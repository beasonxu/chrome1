// components/cast_streaming/public/mojom/demuxer_connector.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "components/cast_streaming/public/mojom/demuxer_connector.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/cast_streaming/public/mojom/demuxer_connector.mojom-params-data.h"
#include "components/cast_streaming/public/mojom/demuxer_connector.mojom-shared-message-ids.h"

#include "components/cast_streaming/public/mojom/demuxer_connector.mojom-import-headers.h"
#include "components/cast_streaming/public/mojom/demuxer_connector.mojom-test-utils.h"


#ifndef COMPONENTS_CAST_STREAMING_PUBLIC_MOJOM_DEMUXER_CONNECTOR_MOJOM_JUMBO_H_
#define COMPONENTS_CAST_STREAMING_PUBLIC_MOJOM_DEMUXER_CONNECTOR_MOJOM_JUMBO_H_
#include "media/mojo/mojom/video_decoder_config_mojom_traits.h"
#endif



namespace cast_streaming {
namespace mojom {
AudioStreamInfo::AudioStreamInfo()
    : decoder_config(),
      data_pipe() {}

AudioStreamInfo::AudioStreamInfo(
    const ::media::AudioDecoderConfig& decoder_config_in,
    ::mojo::ScopedDataPipeConsumerHandle data_pipe_in)
    : decoder_config(std::move(decoder_config_in)),
      data_pipe(std::move(data_pipe_in)) {}

AudioStreamInfo::~AudioStreamInfo() = default;

void AudioStreamInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "decoder_config"), this->decoder_config,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::media::AudioDecoderConfig&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "data_pipe"), this->data_pipe,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::ScopedDataPipeConsumerHandle>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool AudioStreamInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
VideoStreamInfo::VideoStreamInfo()
    : decoder_config(),
      data_pipe() {}

VideoStreamInfo::VideoStreamInfo(
    const ::media::VideoDecoderConfig& decoder_config_in,
    ::mojo::ScopedDataPipeConsumerHandle data_pipe_in)
    : decoder_config(std::move(decoder_config_in)),
      data_pipe(std::move(data_pipe_in)) {}

VideoStreamInfo::~VideoStreamInfo() = default;

void VideoStreamInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "decoder_config"), this->decoder_config,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::media::VideoDecoderConfig&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "data_pipe"), this->data_pipe,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::ScopedDataPipeConsumerHandle>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool VideoStreamInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
AudioStreamInitializationInfo::AudioStreamInitializationInfo()
    : buffer_requester(),
      stream_initialization_info() {}

AudioStreamInitializationInfo::AudioStreamInitializationInfo(
    ::mojo::PendingRemote<AudioBufferRequester> buffer_requester_in,
    AudioStreamInfoPtr stream_initialization_info_in)
    : buffer_requester(std::move(buffer_requester_in)),
      stream_initialization_info(std::move(stream_initialization_info_in)) {}

AudioStreamInitializationInfo::~AudioStreamInitializationInfo() = default;

void AudioStreamInitializationInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "buffer_requester"), this->buffer_requester,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::PendingRemote<AudioBufferRequester>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "stream_initialization_info"), this->stream_initialization_info,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type AudioStreamInfoPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool AudioStreamInitializationInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
VideoStreamInitializationInfo::VideoStreamInitializationInfo()
    : buffer_requester(),
      stream_initialization_info() {}

VideoStreamInitializationInfo::VideoStreamInitializationInfo(
    ::mojo::PendingRemote<VideoBufferRequester> buffer_requester_in,
    VideoStreamInfoPtr stream_initialization_info_in)
    : buffer_requester(std::move(buffer_requester_in)),
      stream_initialization_info(std::move(stream_initialization_info_in)) {}

VideoStreamInitializationInfo::~VideoStreamInitializationInfo() = default;

void VideoStreamInitializationInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "buffer_requester"), this->buffer_requester,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::PendingRemote<VideoBufferRequester>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "stream_initialization_info"), this->stream_initialization_info,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type VideoStreamInfoPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool VideoStreamInitializationInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
GetAudioBufferResponse::GetAudioBufferResponse() : tag_(Tag::kStreamInfo) {
  data_.stream_info = new AudioStreamInfoPtr;
}

GetAudioBufferResponse::~GetAudioBufferResponse() {
  DestroyActive();
}


void GetAudioBufferResponse::set_stream_info(
    AudioStreamInfoPtr stream_info) {
  if (tag_ == Tag::kStreamInfo) {
    *(data_.stream_info) = std::move(stream_info);
  } else {
    DestroyActive();
    tag_ = Tag::kStreamInfo;
    data_.stream_info = new AudioStreamInfoPtr(
        std::move(stream_info));
  }
}
void GetAudioBufferResponse::set_buffer(
    ::media::mojom::DecoderBufferPtr buffer) {
  if (tag_ == Tag::kBuffer) {
    *(data_.buffer) = std::move(buffer);
  } else {
    DestroyActive();
    tag_ = Tag::kBuffer;
    data_.buffer = new ::media::mojom::DecoderBufferPtr(
        std::move(buffer));
  }
}

void GetAudioBufferResponse::DestroyActive() {
  switch (tag_) {

    case Tag::kStreamInfo:

      delete data_.stream_info;
      break;
    case Tag::kBuffer:

      delete data_.buffer;
      break;
  }
}

bool GetAudioBufferResponse::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context, false);
}
GetVideoBufferResponse::GetVideoBufferResponse() : tag_(Tag::kStreamInfo) {
  data_.stream_info = new VideoStreamInfoPtr;
}

GetVideoBufferResponse::~GetVideoBufferResponse() {
  DestroyActive();
}


void GetVideoBufferResponse::set_stream_info(
    VideoStreamInfoPtr stream_info) {
  if (tag_ == Tag::kStreamInfo) {
    *(data_.stream_info) = std::move(stream_info);
  } else {
    DestroyActive();
    tag_ = Tag::kStreamInfo;
    data_.stream_info = new VideoStreamInfoPtr(
        std::move(stream_info));
  }
}
void GetVideoBufferResponse::set_buffer(
    ::media::mojom::DecoderBufferPtr buffer) {
  if (tag_ == Tag::kBuffer) {
    *(data_.buffer) = std::move(buffer);
  } else {
    DestroyActive();
    tag_ = Tag::kBuffer;
    data_.buffer = new ::media::mojom::DecoderBufferPtr(
        std::move(buffer));
  }
}

void GetVideoBufferResponse::DestroyActive() {
  switch (tag_) {

    case Tag::kStreamInfo:

      delete data_.stream_info;
      break;
    case Tag::kBuffer:

      delete data_.buffer;
      break;
  }
}

bool GetVideoBufferResponse::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context, false);
}
const char AudioBufferRequester::Name_[] = "cast_streaming.mojom.AudioBufferRequester";

AudioBufferRequester::IPCStableHashFunction AudioBufferRequester::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kAudioBufferRequester_GetBuffer_Name: {
      return &AudioBufferRequester::GetBuffer_Sym::IPCStableHash;
    }
    case internal::kAudioBufferRequester_EnableBitstreamConverter_Name: {
      return &AudioBufferRequester::EnableBitstreamConverter_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* AudioBufferRequester::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kAudioBufferRequester_GetBuffer_Name:
            return "Receive cast_streaming::mojom::AudioBufferRequester::GetBuffer";
      case internal::kAudioBufferRequester_EnableBitstreamConverter_Name:
            return "Receive cast_streaming::mojom::AudioBufferRequester::EnableBitstreamConverter";
    }
  } else {
    switch (message.name()) {
      case internal::kAudioBufferRequester_GetBuffer_Name:
            return "Receive reply cast_streaming::mojom::AudioBufferRequester::GetBuffer";
      case internal::kAudioBufferRequester_EnableBitstreamConverter_Name:
            return "Receive reply cast_streaming::mojom::AudioBufferRequester::EnableBitstreamConverter";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t AudioBufferRequester::GetBuffer_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cast_streaming::mojom::AudioBufferRequester::GetBuffer");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AudioBufferRequester::EnableBitstreamConverter_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cast_streaming::mojom::AudioBufferRequester::EnableBitstreamConverter");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class AudioBufferRequester_GetBuffer_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AudioBufferRequester_GetBuffer_ForwardToCallback(
      AudioBufferRequester::GetBufferCallback callback
      ) : callback_(std::move(callback)) {
  }

  AudioBufferRequester_GetBuffer_ForwardToCallback(const AudioBufferRequester_GetBuffer_ForwardToCallback&) = delete;
  AudioBufferRequester_GetBuffer_ForwardToCallback& operator=(const AudioBufferRequester_GetBuffer_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  AudioBufferRequester::GetBufferCallback callback_;
};

class AudioBufferRequester_EnableBitstreamConverter_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AudioBufferRequester_EnableBitstreamConverter_ForwardToCallback(
      AudioBufferRequester::EnableBitstreamConverterCallback callback
      ) : callback_(std::move(callback)) {
  }

  AudioBufferRequester_EnableBitstreamConverter_ForwardToCallback(const AudioBufferRequester_EnableBitstreamConverter_ForwardToCallback&) = delete;
  AudioBufferRequester_EnableBitstreamConverter_ForwardToCallback& operator=(const AudioBufferRequester_EnableBitstreamConverter_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  AudioBufferRequester::EnableBitstreamConverterCallback callback_;
};

AudioBufferRequesterProxy::AudioBufferRequesterProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AudioBufferRequesterProxy::GetBuffer(
    GetBufferCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send cast_streaming::mojom::AudioBufferRequester::GetBuffer");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAudioBufferRequester_GetBuffer_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cast_streaming::mojom::internal::AudioBufferRequester_GetBuffer_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AudioBufferRequester::Name_);
  message.set_method_name("GetBuffer");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AudioBufferRequester_GetBuffer_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void AudioBufferRequesterProxy::EnableBitstreamConverter(
    EnableBitstreamConverterCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send cast_streaming::mojom::AudioBufferRequester::EnableBitstreamConverter");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAudioBufferRequester_EnableBitstreamConverter_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cast_streaming::mojom::internal::AudioBufferRequester_EnableBitstreamConverter_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AudioBufferRequester::Name_);
  message.set_method_name("EnableBitstreamConverter");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AudioBufferRequester_EnableBitstreamConverter_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class AudioBufferRequester_GetBuffer_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static AudioBufferRequester::GetBufferCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<AudioBufferRequester_GetBuffer_ProxyToResponder> proxy(
        new AudioBufferRequester_GetBuffer_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&AudioBufferRequester_GetBuffer_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~AudioBufferRequester_GetBuffer_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  AudioBufferRequester_GetBuffer_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "AudioBufferRequester::GetBufferCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      GetAudioBufferResponsePtr in_buffer_response);
};

bool AudioBufferRequester_GetBuffer_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::AudioBufferRequester_GetBuffer_ResponseParams_Data* params =
      reinterpret_cast<
          internal::AudioBufferRequester_GetBuffer_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  GetAudioBufferResponsePtr p_buffer_response{};
  AudioBufferRequester_GetBuffer_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadBufferResponse(&p_buffer_response))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AudioBufferRequester::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_buffer_response));
  return true;
}

void AudioBufferRequester_GetBuffer_ProxyToResponder::Run(
    GetAudioBufferResponsePtr in_buffer_response) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply cast_streaming::mojom::AudioBufferRequester::GetBuffer", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("buffer_response"), in_buffer_response,
                        "<value of type GetAudioBufferResponsePtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAudioBufferRequester_GetBuffer_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cast_streaming::mojom::internal::AudioBufferRequester_GetBuffer_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<decltype(params->buffer_response)>
      buffer_response_fragment(params.message());
  buffer_response_fragment.Claim(&params->buffer_response);
  mojo::internal::Serialize<::cast_streaming::mojom::GetAudioBufferResponseDataView>(
      in_buffer_response, buffer_response_fragment, true);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->buffer_response.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null buffer_response in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AudioBufferRequester::Name_);
  message.set_method_name("GetBuffer");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class AudioBufferRequester_EnableBitstreamConverter_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static AudioBufferRequester::EnableBitstreamConverterCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<AudioBufferRequester_EnableBitstreamConverter_ProxyToResponder> proxy(
        new AudioBufferRequester_EnableBitstreamConverter_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&AudioBufferRequester_EnableBitstreamConverter_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~AudioBufferRequester_EnableBitstreamConverter_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  AudioBufferRequester_EnableBitstreamConverter_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "AudioBufferRequester::EnableBitstreamConverterCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success);
};

bool AudioBufferRequester_EnableBitstreamConverter_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::AudioBufferRequester_EnableBitstreamConverter_ResponseParams_Data* params =
      reinterpret_cast<
          internal::AudioBufferRequester_EnableBitstreamConverter_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  AudioBufferRequester_EnableBitstreamConverter_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AudioBufferRequester::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success));
  return true;
}

void AudioBufferRequester_EnableBitstreamConverter_ProxyToResponder::Run(
    bool in_success) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply cast_streaming::mojom::AudioBufferRequester::EnableBitstreamConverter", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAudioBufferRequester_EnableBitstreamConverter_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cast_streaming::mojom::internal::AudioBufferRequester_EnableBitstreamConverter_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AudioBufferRequester::Name_);
  message.set_method_name("EnableBitstreamConverter");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool AudioBufferRequesterStubDispatch::Accept(
    AudioBufferRequester* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAudioBufferRequester_GetBuffer_Name: {
      break;
    }
    case internal::kAudioBufferRequester_EnableBitstreamConverter_Name: {
      break;
    }
  }
  return false;
}

// static
bool AudioBufferRequesterStubDispatch::AcceptWithResponder(
    AudioBufferRequester* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kAudioBufferRequester_GetBuffer_Name: {

      internal::AudioBufferRequester_GetBuffer_Params_Data* params =
          reinterpret_cast<
              internal::AudioBufferRequester_GetBuffer_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      AudioBufferRequester_GetBuffer_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AudioBufferRequester::Name_, 0, false);
        return false;
      }
      AudioBufferRequester::GetBufferCallback callback =
          AudioBufferRequester_GetBuffer_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetBuffer(std::move(callback));
      return true;
    }
    case internal::kAudioBufferRequester_EnableBitstreamConverter_Name: {

      internal::AudioBufferRequester_EnableBitstreamConverter_Params_Data* params =
          reinterpret_cast<
              internal::AudioBufferRequester_EnableBitstreamConverter_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      AudioBufferRequester_EnableBitstreamConverter_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AudioBufferRequester::Name_, 1, false);
        return false;
      }
      AudioBufferRequester::EnableBitstreamConverterCallback callback =
          AudioBufferRequester_EnableBitstreamConverter_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->EnableBitstreamConverter(std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAudioBufferRequesterValidationInfo[] = {
    {&internal::AudioBufferRequester_GetBuffer_Params_Data::Validate,
     &internal::AudioBufferRequester_GetBuffer_ResponseParams_Data::Validate},
    {&internal::AudioBufferRequester_EnableBitstreamConverter_Params_Data::Validate,
     &internal::AudioBufferRequester_EnableBitstreamConverter_ResponseParams_Data::Validate},
};

bool AudioBufferRequesterRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::cast_streaming::mojom::AudioBufferRequester::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAudioBufferRequesterValidationInfo);
}

bool AudioBufferRequesterResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::cast_streaming::mojom::AudioBufferRequester::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kAudioBufferRequesterValidationInfo);
}
const char VideoBufferRequester::Name_[] = "cast_streaming.mojom.VideoBufferRequester";

VideoBufferRequester::IPCStableHashFunction VideoBufferRequester::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kVideoBufferRequester_GetBuffer_Name: {
      return &VideoBufferRequester::GetBuffer_Sym::IPCStableHash;
    }
    case internal::kVideoBufferRequester_EnableBitstreamConverter_Name: {
      return &VideoBufferRequester::EnableBitstreamConverter_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* VideoBufferRequester::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kVideoBufferRequester_GetBuffer_Name:
            return "Receive cast_streaming::mojom::VideoBufferRequester::GetBuffer";
      case internal::kVideoBufferRequester_EnableBitstreamConverter_Name:
            return "Receive cast_streaming::mojom::VideoBufferRequester::EnableBitstreamConverter";
    }
  } else {
    switch (message.name()) {
      case internal::kVideoBufferRequester_GetBuffer_Name:
            return "Receive reply cast_streaming::mojom::VideoBufferRequester::GetBuffer";
      case internal::kVideoBufferRequester_EnableBitstreamConverter_Name:
            return "Receive reply cast_streaming::mojom::VideoBufferRequester::EnableBitstreamConverter";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t VideoBufferRequester::GetBuffer_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cast_streaming::mojom::VideoBufferRequester::GetBuffer");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t VideoBufferRequester::EnableBitstreamConverter_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cast_streaming::mojom::VideoBufferRequester::EnableBitstreamConverter");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class VideoBufferRequester_GetBuffer_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  VideoBufferRequester_GetBuffer_ForwardToCallback(
      VideoBufferRequester::GetBufferCallback callback
      ) : callback_(std::move(callback)) {
  }

  VideoBufferRequester_GetBuffer_ForwardToCallback(const VideoBufferRequester_GetBuffer_ForwardToCallback&) = delete;
  VideoBufferRequester_GetBuffer_ForwardToCallback& operator=(const VideoBufferRequester_GetBuffer_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  VideoBufferRequester::GetBufferCallback callback_;
};

class VideoBufferRequester_EnableBitstreamConverter_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  VideoBufferRequester_EnableBitstreamConverter_ForwardToCallback(
      VideoBufferRequester::EnableBitstreamConverterCallback callback
      ) : callback_(std::move(callback)) {
  }

  VideoBufferRequester_EnableBitstreamConverter_ForwardToCallback(const VideoBufferRequester_EnableBitstreamConverter_ForwardToCallback&) = delete;
  VideoBufferRequester_EnableBitstreamConverter_ForwardToCallback& operator=(const VideoBufferRequester_EnableBitstreamConverter_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  VideoBufferRequester::EnableBitstreamConverterCallback callback_;
};

VideoBufferRequesterProxy::VideoBufferRequesterProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void VideoBufferRequesterProxy::GetBuffer(
    GetBufferCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send cast_streaming::mojom::VideoBufferRequester::GetBuffer");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kVideoBufferRequester_GetBuffer_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cast_streaming::mojom::internal::VideoBufferRequester_GetBuffer_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(VideoBufferRequester::Name_);
  message.set_method_name("GetBuffer");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new VideoBufferRequester_GetBuffer_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void VideoBufferRequesterProxy::EnableBitstreamConverter(
    EnableBitstreamConverterCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send cast_streaming::mojom::VideoBufferRequester::EnableBitstreamConverter");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kVideoBufferRequester_EnableBitstreamConverter_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cast_streaming::mojom::internal::VideoBufferRequester_EnableBitstreamConverter_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(VideoBufferRequester::Name_);
  message.set_method_name("EnableBitstreamConverter");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new VideoBufferRequester_EnableBitstreamConverter_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class VideoBufferRequester_GetBuffer_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static VideoBufferRequester::GetBufferCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<VideoBufferRequester_GetBuffer_ProxyToResponder> proxy(
        new VideoBufferRequester_GetBuffer_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&VideoBufferRequester_GetBuffer_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~VideoBufferRequester_GetBuffer_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  VideoBufferRequester_GetBuffer_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "VideoBufferRequester::GetBufferCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      GetVideoBufferResponsePtr in_buffer_response);
};

bool VideoBufferRequester_GetBuffer_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::VideoBufferRequester_GetBuffer_ResponseParams_Data* params =
      reinterpret_cast<
          internal::VideoBufferRequester_GetBuffer_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  GetVideoBufferResponsePtr p_buffer_response{};
  VideoBufferRequester_GetBuffer_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadBufferResponse(&p_buffer_response))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        VideoBufferRequester::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_buffer_response));
  return true;
}

void VideoBufferRequester_GetBuffer_ProxyToResponder::Run(
    GetVideoBufferResponsePtr in_buffer_response) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply cast_streaming::mojom::VideoBufferRequester::GetBuffer", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("buffer_response"), in_buffer_response,
                        "<value of type GetVideoBufferResponsePtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kVideoBufferRequester_GetBuffer_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cast_streaming::mojom::internal::VideoBufferRequester_GetBuffer_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<decltype(params->buffer_response)>
      buffer_response_fragment(params.message());
  buffer_response_fragment.Claim(&params->buffer_response);
  mojo::internal::Serialize<::cast_streaming::mojom::GetVideoBufferResponseDataView>(
      in_buffer_response, buffer_response_fragment, true);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->buffer_response.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null buffer_response in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(VideoBufferRequester::Name_);
  message.set_method_name("GetBuffer");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class VideoBufferRequester_EnableBitstreamConverter_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static VideoBufferRequester::EnableBitstreamConverterCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<VideoBufferRequester_EnableBitstreamConverter_ProxyToResponder> proxy(
        new VideoBufferRequester_EnableBitstreamConverter_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&VideoBufferRequester_EnableBitstreamConverter_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~VideoBufferRequester_EnableBitstreamConverter_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  VideoBufferRequester_EnableBitstreamConverter_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "VideoBufferRequester::EnableBitstreamConverterCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success);
};

bool VideoBufferRequester_EnableBitstreamConverter_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::VideoBufferRequester_EnableBitstreamConverter_ResponseParams_Data* params =
      reinterpret_cast<
          internal::VideoBufferRequester_EnableBitstreamConverter_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  VideoBufferRequester_EnableBitstreamConverter_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        VideoBufferRequester::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success));
  return true;
}

void VideoBufferRequester_EnableBitstreamConverter_ProxyToResponder::Run(
    bool in_success) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply cast_streaming::mojom::VideoBufferRequester::EnableBitstreamConverter", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kVideoBufferRequester_EnableBitstreamConverter_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cast_streaming::mojom::internal::VideoBufferRequester_EnableBitstreamConverter_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(VideoBufferRequester::Name_);
  message.set_method_name("EnableBitstreamConverter");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool VideoBufferRequesterStubDispatch::Accept(
    VideoBufferRequester* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kVideoBufferRequester_GetBuffer_Name: {
      break;
    }
    case internal::kVideoBufferRequester_EnableBitstreamConverter_Name: {
      break;
    }
  }
  return false;
}

// static
bool VideoBufferRequesterStubDispatch::AcceptWithResponder(
    VideoBufferRequester* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kVideoBufferRequester_GetBuffer_Name: {

      internal::VideoBufferRequester_GetBuffer_Params_Data* params =
          reinterpret_cast<
              internal::VideoBufferRequester_GetBuffer_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      VideoBufferRequester_GetBuffer_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            VideoBufferRequester::Name_, 0, false);
        return false;
      }
      VideoBufferRequester::GetBufferCallback callback =
          VideoBufferRequester_GetBuffer_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetBuffer(std::move(callback));
      return true;
    }
    case internal::kVideoBufferRequester_EnableBitstreamConverter_Name: {

      internal::VideoBufferRequester_EnableBitstreamConverter_Params_Data* params =
          reinterpret_cast<
              internal::VideoBufferRequester_EnableBitstreamConverter_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      VideoBufferRequester_EnableBitstreamConverter_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            VideoBufferRequester::Name_, 1, false);
        return false;
      }
      VideoBufferRequester::EnableBitstreamConverterCallback callback =
          VideoBufferRequester_EnableBitstreamConverter_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->EnableBitstreamConverter(std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kVideoBufferRequesterValidationInfo[] = {
    {&internal::VideoBufferRequester_GetBuffer_Params_Data::Validate,
     &internal::VideoBufferRequester_GetBuffer_ResponseParams_Data::Validate},
    {&internal::VideoBufferRequester_EnableBitstreamConverter_Params_Data::Validate,
     &internal::VideoBufferRequester_EnableBitstreamConverter_ResponseParams_Data::Validate},
};

bool VideoBufferRequesterRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::cast_streaming::mojom::VideoBufferRequester::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kVideoBufferRequesterValidationInfo);
}

bool VideoBufferRequesterResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::cast_streaming::mojom::VideoBufferRequester::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kVideoBufferRequesterValidationInfo);
}
const char DemuxerConnector::Name_[] = "cast_streaming.mojom.DemuxerConnector";

DemuxerConnector::IPCStableHashFunction DemuxerConnector::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kDemuxerConnector_EnableReceiver_Name: {
      return &DemuxerConnector::EnableReceiver_Sym::IPCStableHash;
    }
    case internal::kDemuxerConnector_OnStreamsInitialized_Name: {
      return &DemuxerConnector::OnStreamsInitialized_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* DemuxerConnector::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kDemuxerConnector_EnableReceiver_Name:
            return "Receive cast_streaming::mojom::DemuxerConnector::EnableReceiver";
      case internal::kDemuxerConnector_OnStreamsInitialized_Name:
            return "Receive cast_streaming::mojom::DemuxerConnector::OnStreamsInitialized";
    }
  } else {
    switch (message.name()) {
      case internal::kDemuxerConnector_EnableReceiver_Name:
            return "Receive reply cast_streaming::mojom::DemuxerConnector::EnableReceiver";
      case internal::kDemuxerConnector_OnStreamsInitialized_Name:
            return "Receive reply cast_streaming::mojom::DemuxerConnector::OnStreamsInitialized";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t DemuxerConnector::EnableReceiver_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cast_streaming::mojom::DemuxerConnector::EnableReceiver");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DemuxerConnector::OnStreamsInitialized_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cast_streaming::mojom::DemuxerConnector::OnStreamsInitialized");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class DemuxerConnector_EnableReceiver_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  DemuxerConnector_EnableReceiver_ForwardToCallback(
      DemuxerConnector::EnableReceiverCallback callback
      ) : callback_(std::move(callback)) {
  }

  DemuxerConnector_EnableReceiver_ForwardToCallback(const DemuxerConnector_EnableReceiver_ForwardToCallback&) = delete;
  DemuxerConnector_EnableReceiver_ForwardToCallback& operator=(const DemuxerConnector_EnableReceiver_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  DemuxerConnector::EnableReceiverCallback callback_;
};

DemuxerConnectorProxy::DemuxerConnectorProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void DemuxerConnectorProxy::EnableReceiver(
    EnableReceiverCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send cast_streaming::mojom::DemuxerConnector::EnableReceiver");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDemuxerConnector_EnableReceiver_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cast_streaming::mojom::internal::DemuxerConnector_EnableReceiver_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DemuxerConnector::Name_);
  message.set_method_name("EnableReceiver");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new DemuxerConnector_EnableReceiver_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void DemuxerConnectorProxy::OnStreamsInitialized(
    AudioStreamInitializationInfoPtr in_audio_buffer_requester, VideoStreamInitializationInfoPtr in_video_buffer_requester) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send cast_streaming::mojom::DemuxerConnector::OnStreamsInitialized", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("audio_buffer_requester"), in_audio_buffer_requester,
                        "<value of type AudioStreamInitializationInfoPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("video_buffer_requester"), in_video_buffer_requester,
                        "<value of type VideoStreamInitializationInfoPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDemuxerConnector_OnStreamsInitialized_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cast_streaming::mojom::internal::DemuxerConnector_OnStreamsInitialized_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->audio_buffer_requester)::BaseType> audio_buffer_requester_fragment(
          params.message());
  mojo::internal::Serialize<::cast_streaming::mojom::AudioStreamInitializationInfoDataView>(
      in_audio_buffer_requester, audio_buffer_requester_fragment);
  params->audio_buffer_requester.Set(
      audio_buffer_requester_fragment.is_null() ? nullptr : audio_buffer_requester_fragment.data());
  mojo::internal::MessageFragment<
      typename decltype(params->video_buffer_requester)::BaseType> video_buffer_requester_fragment(
          params.message());
  mojo::internal::Serialize<::cast_streaming::mojom::VideoStreamInitializationInfoDataView>(
      in_video_buffer_requester, video_buffer_requester_fragment);
  params->video_buffer_requester.Set(
      video_buffer_requester_fragment.is_null() ? nullptr : video_buffer_requester_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DemuxerConnector::Name_);
  message.set_method_name("OnStreamsInitialized");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
class DemuxerConnector_EnableReceiver_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static DemuxerConnector::EnableReceiverCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<DemuxerConnector_EnableReceiver_ProxyToResponder> proxy(
        new DemuxerConnector_EnableReceiver_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&DemuxerConnector_EnableReceiver_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~DemuxerConnector_EnableReceiver_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  DemuxerConnector_EnableReceiver_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "DemuxerConnector::EnableReceiverCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );
};

bool DemuxerConnector_EnableReceiver_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::DemuxerConnector_EnableReceiver_ResponseParams_Data* params =
      reinterpret_cast<
          internal::DemuxerConnector_EnableReceiver_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  DemuxerConnector_EnableReceiver_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        DemuxerConnector::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void DemuxerConnector_EnableReceiver_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send reply cast_streaming::mojom::DemuxerConnector::EnableReceiver");
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDemuxerConnector_EnableReceiver_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cast_streaming::mojom::internal::DemuxerConnector_EnableReceiver_ResponseParams_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DemuxerConnector::Name_);
  message.set_method_name("EnableReceiver");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool DemuxerConnectorStubDispatch::Accept(
    DemuxerConnector* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kDemuxerConnector_EnableReceiver_Name: {
      break;
    }
    case internal::kDemuxerConnector_OnStreamsInitialized_Name: {

      DCHECK(message->is_serialized());
      internal::DemuxerConnector_OnStreamsInitialized_Params_Data* params =
          reinterpret_cast<internal::DemuxerConnector_OnStreamsInitialized_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      AudioStreamInitializationInfoPtr p_audio_buffer_requester{};
      VideoStreamInitializationInfoPtr p_video_buffer_requester{};
      DemuxerConnector_OnStreamsInitialized_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAudioBufferRequester(&p_audio_buffer_requester))
        success = false;
      if (success && !input_data_view.ReadVideoBufferRequester(&p_video_buffer_requester))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DemuxerConnector::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnStreamsInitialized(
std::move(p_audio_buffer_requester), 
std::move(p_video_buffer_requester));
      return true;
    }
  }
  return false;
}

// static
bool DemuxerConnectorStubDispatch::AcceptWithResponder(
    DemuxerConnector* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kDemuxerConnector_EnableReceiver_Name: {

      internal::DemuxerConnector_EnableReceiver_Params_Data* params =
          reinterpret_cast<
              internal::DemuxerConnector_EnableReceiver_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      DemuxerConnector_EnableReceiver_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DemuxerConnector::Name_, 0, false);
        return false;
      }
      DemuxerConnector::EnableReceiverCallback callback =
          DemuxerConnector_EnableReceiver_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->EnableReceiver(std::move(callback));
      return true;
    }
    case internal::kDemuxerConnector_OnStreamsInitialized_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kDemuxerConnectorValidationInfo[] = {
    {&internal::DemuxerConnector_EnableReceiver_Params_Data::Validate,
     &internal::DemuxerConnector_EnableReceiver_ResponseParams_Data::Validate},
    {&internal::DemuxerConnector_OnStreamsInitialized_Params_Data::Validate,
     nullptr /* no response */},
};

bool DemuxerConnectorRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::cast_streaming::mojom::DemuxerConnector::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kDemuxerConnectorValidationInfo);
}

bool DemuxerConnectorResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::cast_streaming::mojom::DemuxerConnector::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kDemuxerConnectorValidationInfo);
}


}  // namespace mojom
}  // namespace cast_streaming


namespace mojo {


// static
bool StructTraits<::cast_streaming::mojom::AudioStreamInfo::DataView, ::cast_streaming::mojom::AudioStreamInfoPtr>::Read(
    ::cast_streaming::mojom::AudioStreamInfo::DataView input,
    ::cast_streaming::mojom::AudioStreamInfoPtr* output) {
  bool success = true;
  ::cast_streaming::mojom::AudioStreamInfoPtr result(::cast_streaming::mojom::AudioStreamInfo::New());
  
      if (success && !input.ReadDecoderConfig(&result->decoder_config))
        success = false;
      if (success)
        result->data_pipe = input.TakeDataPipe();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::cast_streaming::mojom::VideoStreamInfo::DataView, ::cast_streaming::mojom::VideoStreamInfoPtr>::Read(
    ::cast_streaming::mojom::VideoStreamInfo::DataView input,
    ::cast_streaming::mojom::VideoStreamInfoPtr* output) {
  bool success = true;
  ::cast_streaming::mojom::VideoStreamInfoPtr result(::cast_streaming::mojom::VideoStreamInfo::New());
  
      if (success && !input.ReadDecoderConfig(&result->decoder_config))
        success = false;
      if (success)
        result->data_pipe = input.TakeDataPipe();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::cast_streaming::mojom::AudioStreamInitializationInfo::DataView, ::cast_streaming::mojom::AudioStreamInitializationInfoPtr>::Read(
    ::cast_streaming::mojom::AudioStreamInitializationInfo::DataView input,
    ::cast_streaming::mojom::AudioStreamInitializationInfoPtr* output) {
  bool success = true;
  ::cast_streaming::mojom::AudioStreamInitializationInfoPtr result(::cast_streaming::mojom::AudioStreamInitializationInfo::New());
  
      if (success) {
        result->buffer_requester =
            input.TakeBufferRequester<decltype(result->buffer_requester)>();
      }
      if (success && !input.ReadStreamInitializationInfo(&result->stream_initialization_info))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::cast_streaming::mojom::VideoStreamInitializationInfo::DataView, ::cast_streaming::mojom::VideoStreamInitializationInfoPtr>::Read(
    ::cast_streaming::mojom::VideoStreamInitializationInfo::DataView input,
    ::cast_streaming::mojom::VideoStreamInitializationInfoPtr* output) {
  bool success = true;
  ::cast_streaming::mojom::VideoStreamInitializationInfoPtr result(::cast_streaming::mojom::VideoStreamInitializationInfo::New());
  
      if (success) {
        result->buffer_requester =
            input.TakeBufferRequester<decltype(result->buffer_requester)>();
      }
      if (success && !input.ReadStreamInitializationInfo(&result->stream_initialization_info))
        success = false;
  *output = std::move(result);
  return success;
}

// static
bool UnionTraits<::cast_streaming::mojom::GetAudioBufferResponse::DataView, ::cast_streaming::mojom::GetAudioBufferResponsePtr>::Read(
    ::cast_streaming::mojom::GetAudioBufferResponse::DataView input,
    ::cast_streaming::mojom::GetAudioBufferResponsePtr* output) {
  using UnionType = ::cast_streaming::mojom::GetAudioBufferResponse;
  using Tag = UnionType::Tag;

  switch (input.tag()) {
    case Tag::kStreamInfo: {
      ::cast_streaming::mojom::AudioStreamInfoPtr result_stream_info;
      if (!input.ReadStreamInfo(&result_stream_info))
        return false;

      *output = UnionType::NewStreamInfo(
          std::move(result_stream_info));
      break;
    }
    case Tag::kBuffer: {
      ::media::mojom::DecoderBufferPtr result_buffer;
      if (!input.ReadBuffer(&result_buffer))
        return false;

      *output = UnionType::NewBuffer(
          std::move(result_buffer));
      break;
    }
    default:

      return false;
  }
  return true;
}

// static
bool UnionTraits<::cast_streaming::mojom::GetVideoBufferResponse::DataView, ::cast_streaming::mojom::GetVideoBufferResponsePtr>::Read(
    ::cast_streaming::mojom::GetVideoBufferResponse::DataView input,
    ::cast_streaming::mojom::GetVideoBufferResponsePtr* output) {
  using UnionType = ::cast_streaming::mojom::GetVideoBufferResponse;
  using Tag = UnionType::Tag;

  switch (input.tag()) {
    case Tag::kStreamInfo: {
      ::cast_streaming::mojom::VideoStreamInfoPtr result_stream_info;
      if (!input.ReadStreamInfo(&result_stream_info))
        return false;

      *output = UnionType::NewStreamInfo(
          std::move(result_stream_info));
      break;
    }
    case Tag::kBuffer: {
      ::media::mojom::DecoderBufferPtr result_buffer;
      if (!input.ReadBuffer(&result_buffer))
        return false;

      *output = UnionType::NewBuffer(
          std::move(result_buffer));
      break;
    }
    default:

      return false;
  }
  return true;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace cast_streaming {
namespace mojom {


void AudioBufferRequesterInterceptorForTesting::GetBuffer(GetBufferCallback callback) {
  GetForwardingInterface()->GetBuffer(std::move(callback));
}
void AudioBufferRequesterInterceptorForTesting::EnableBitstreamConverter(EnableBitstreamConverterCallback callback) {
  GetForwardingInterface()->EnableBitstreamConverter(std::move(callback));
}
AudioBufferRequesterAsyncWaiter::AudioBufferRequesterAsyncWaiter(
    AudioBufferRequester* proxy) : proxy_(proxy) {}

AudioBufferRequesterAsyncWaiter::~AudioBufferRequesterAsyncWaiter() = default;

void AudioBufferRequesterAsyncWaiter::GetBuffer(
    GetAudioBufferResponsePtr* out_buffer_response) {
  base::RunLoop loop;
  proxy_->GetBuffer(
      base::BindOnce(
          [](base::RunLoop* loop,
             GetAudioBufferResponsePtr* out_buffer_response
,
             GetAudioBufferResponsePtr buffer_response) {*out_buffer_response = std::move(buffer_response);
            loop->Quit();
          },
          &loop,
          out_buffer_response));
  loop.Run();
}
void AudioBufferRequesterAsyncWaiter::EnableBitstreamConverter(
    bool* out_success) {
  base::RunLoop loop;
  proxy_->EnableBitstreamConverter(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}



void VideoBufferRequesterInterceptorForTesting::GetBuffer(GetBufferCallback callback) {
  GetForwardingInterface()->GetBuffer(std::move(callback));
}
void VideoBufferRequesterInterceptorForTesting::EnableBitstreamConverter(EnableBitstreamConverterCallback callback) {
  GetForwardingInterface()->EnableBitstreamConverter(std::move(callback));
}
VideoBufferRequesterAsyncWaiter::VideoBufferRequesterAsyncWaiter(
    VideoBufferRequester* proxy) : proxy_(proxy) {}

VideoBufferRequesterAsyncWaiter::~VideoBufferRequesterAsyncWaiter() = default;

void VideoBufferRequesterAsyncWaiter::GetBuffer(
    GetVideoBufferResponsePtr* out_buffer_response) {
  base::RunLoop loop;
  proxy_->GetBuffer(
      base::BindOnce(
          [](base::RunLoop* loop,
             GetVideoBufferResponsePtr* out_buffer_response
,
             GetVideoBufferResponsePtr buffer_response) {*out_buffer_response = std::move(buffer_response);
            loop->Quit();
          },
          &loop,
          out_buffer_response));
  loop.Run();
}
void VideoBufferRequesterAsyncWaiter::EnableBitstreamConverter(
    bool* out_success) {
  base::RunLoop loop;
  proxy_->EnableBitstreamConverter(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}



void DemuxerConnectorInterceptorForTesting::EnableReceiver(EnableReceiverCallback callback) {
  GetForwardingInterface()->EnableReceiver(std::move(callback));
}
void DemuxerConnectorInterceptorForTesting::OnStreamsInitialized(AudioStreamInitializationInfoPtr audio_buffer_requester, VideoStreamInitializationInfoPtr video_buffer_requester) {
  GetForwardingInterface()->OnStreamsInitialized(std::move(audio_buffer_requester), std::move(video_buffer_requester));
}
DemuxerConnectorAsyncWaiter::DemuxerConnectorAsyncWaiter(
    DemuxerConnector* proxy) : proxy_(proxy) {}

DemuxerConnectorAsyncWaiter::~DemuxerConnectorAsyncWaiter() = default;

void DemuxerConnectorAsyncWaiter::EnableReceiver(
    ) {
  base::RunLoop loop;
  proxy_->EnableReceiver(
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}





}  // namespace mojom
}  // namespace cast_streaming


#if defined(__clang__)
#pragma clang diagnostic pop
#endif