// components/cast_streaming/public/mojom/demuxer_connector.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_CAST_STREAMING_PUBLIC_MOJOM_DEMUXER_CONNECTOR_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_CAST_STREAMING_PUBLIC_MOJOM_DEMUXER_CONNECTOR_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace cast_streaming {
namespace mojom {
namespace internal {

class ValidationContext;
class  AudioBufferRequester_GetBuffer_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<AudioBufferRequester_GetBuffer_Params_Data>;

  AudioBufferRequester_GetBuffer_Params_Data();
  ~AudioBufferRequester_GetBuffer_Params_Data() = delete;
};
static_assert(sizeof(AudioBufferRequester_GetBuffer_Params_Data) == 8,
              "Bad sizeof(AudioBufferRequester_GetBuffer_Params_Data)");
class  AudioBufferRequester_GetBuffer_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::GetAudioBufferResponse_Data buffer_response;

 private:
  friend class mojo::internal::MessageFragment<AudioBufferRequester_GetBuffer_ResponseParams_Data>;

  AudioBufferRequester_GetBuffer_ResponseParams_Data();
  ~AudioBufferRequester_GetBuffer_ResponseParams_Data() = delete;
};
static_assert(sizeof(AudioBufferRequester_GetBuffer_ResponseParams_Data) == 24,
              "Bad sizeof(AudioBufferRequester_GetBuffer_ResponseParams_Data)");
class  AudioBufferRequester_EnableBitstreamConverter_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<AudioBufferRequester_EnableBitstreamConverter_Params_Data>;

  AudioBufferRequester_EnableBitstreamConverter_Params_Data();
  ~AudioBufferRequester_EnableBitstreamConverter_Params_Data() = delete;
};
static_assert(sizeof(AudioBufferRequester_EnableBitstreamConverter_Params_Data) == 8,
              "Bad sizeof(AudioBufferRequester_EnableBitstreamConverter_Params_Data)");
class  AudioBufferRequester_EnableBitstreamConverter_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<AudioBufferRequester_EnableBitstreamConverter_ResponseParams_Data>;

  AudioBufferRequester_EnableBitstreamConverter_ResponseParams_Data();
  ~AudioBufferRequester_EnableBitstreamConverter_ResponseParams_Data() = delete;
};
static_assert(sizeof(AudioBufferRequester_EnableBitstreamConverter_ResponseParams_Data) == 16,
              "Bad sizeof(AudioBufferRequester_EnableBitstreamConverter_ResponseParams_Data)");
class  VideoBufferRequester_GetBuffer_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<VideoBufferRequester_GetBuffer_Params_Data>;

  VideoBufferRequester_GetBuffer_Params_Data();
  ~VideoBufferRequester_GetBuffer_Params_Data() = delete;
};
static_assert(sizeof(VideoBufferRequester_GetBuffer_Params_Data) == 8,
              "Bad sizeof(VideoBufferRequester_GetBuffer_Params_Data)");
class  VideoBufferRequester_GetBuffer_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::GetVideoBufferResponse_Data buffer_response;

 private:
  friend class mojo::internal::MessageFragment<VideoBufferRequester_GetBuffer_ResponseParams_Data>;

  VideoBufferRequester_GetBuffer_ResponseParams_Data();
  ~VideoBufferRequester_GetBuffer_ResponseParams_Data() = delete;
};
static_assert(sizeof(VideoBufferRequester_GetBuffer_ResponseParams_Data) == 24,
              "Bad sizeof(VideoBufferRequester_GetBuffer_ResponseParams_Data)");
class  VideoBufferRequester_EnableBitstreamConverter_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<VideoBufferRequester_EnableBitstreamConverter_Params_Data>;

  VideoBufferRequester_EnableBitstreamConverter_Params_Data();
  ~VideoBufferRequester_EnableBitstreamConverter_Params_Data() = delete;
};
static_assert(sizeof(VideoBufferRequester_EnableBitstreamConverter_Params_Data) == 8,
              "Bad sizeof(VideoBufferRequester_EnableBitstreamConverter_Params_Data)");
class  VideoBufferRequester_EnableBitstreamConverter_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<VideoBufferRequester_EnableBitstreamConverter_ResponseParams_Data>;

  VideoBufferRequester_EnableBitstreamConverter_ResponseParams_Data();
  ~VideoBufferRequester_EnableBitstreamConverter_ResponseParams_Data() = delete;
};
static_assert(sizeof(VideoBufferRequester_EnableBitstreamConverter_ResponseParams_Data) == 16,
              "Bad sizeof(VideoBufferRequester_EnableBitstreamConverter_ResponseParams_Data)");
class  DemuxerConnector_EnableReceiver_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<DemuxerConnector_EnableReceiver_Params_Data>;

  DemuxerConnector_EnableReceiver_Params_Data();
  ~DemuxerConnector_EnableReceiver_Params_Data() = delete;
};
static_assert(sizeof(DemuxerConnector_EnableReceiver_Params_Data) == 8,
              "Bad sizeof(DemuxerConnector_EnableReceiver_Params_Data)");
class  DemuxerConnector_EnableReceiver_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<DemuxerConnector_EnableReceiver_ResponseParams_Data>;

  DemuxerConnector_EnableReceiver_ResponseParams_Data();
  ~DemuxerConnector_EnableReceiver_ResponseParams_Data() = delete;
};
static_assert(sizeof(DemuxerConnector_EnableReceiver_ResponseParams_Data) == 8,
              "Bad sizeof(DemuxerConnector_EnableReceiver_ResponseParams_Data)");
class  DemuxerConnector_OnStreamsInitialized_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::AudioStreamInitializationInfo_Data> audio_buffer_requester;
  mojo::internal::Pointer<internal::VideoStreamInitializationInfo_Data> video_buffer_requester;

 private:
  friend class mojo::internal::MessageFragment<DemuxerConnector_OnStreamsInitialized_Params_Data>;

  DemuxerConnector_OnStreamsInitialized_Params_Data();
  ~DemuxerConnector_OnStreamsInitialized_Params_Data() = delete;
};
static_assert(sizeof(DemuxerConnector_OnStreamsInitialized_Params_Data) == 24,
              "Bad sizeof(DemuxerConnector_OnStreamsInitialized_Params_Data)");

}  // namespace internal


class AudioBufferRequester_GetBuffer_ParamsDataView {
 public:
  AudioBufferRequester_GetBuffer_ParamsDataView() = default;

  AudioBufferRequester_GetBuffer_ParamsDataView(
      internal::AudioBufferRequester_GetBuffer_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::AudioBufferRequester_GetBuffer_Params_Data* data_ = nullptr;
};



class AudioBufferRequester_GetBuffer_ResponseParamsDataView {
 public:
  AudioBufferRequester_GetBuffer_ResponseParamsDataView() = default;

  AudioBufferRequester_GetBuffer_ResponseParamsDataView(
      internal::AudioBufferRequester_GetBuffer_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBufferResponseDataView(
      GetAudioBufferResponseDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBufferResponse(UserType* output) {
    
    auto* pointer = !data_->buffer_response.is_null() ? &data_->buffer_response : nullptr;
    return mojo::internal::Deserialize<::cast_streaming::mojom::GetAudioBufferResponseDataView>(
        pointer, output, message_);
  }
 private:
  internal::AudioBufferRequester_GetBuffer_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AudioBufferRequester_EnableBitstreamConverter_ParamsDataView {
 public:
  AudioBufferRequester_EnableBitstreamConverter_ParamsDataView() = default;

  AudioBufferRequester_EnableBitstreamConverter_ParamsDataView(
      internal::AudioBufferRequester_EnableBitstreamConverter_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::AudioBufferRequester_EnableBitstreamConverter_Params_Data* data_ = nullptr;
};



class AudioBufferRequester_EnableBitstreamConverter_ResponseParamsDataView {
 public:
  AudioBufferRequester_EnableBitstreamConverter_ResponseParamsDataView() = default;

  AudioBufferRequester_EnableBitstreamConverter_ResponseParamsDataView(
      internal::AudioBufferRequester_EnableBitstreamConverter_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::AudioBufferRequester_EnableBitstreamConverter_ResponseParams_Data* data_ = nullptr;
};



class VideoBufferRequester_GetBuffer_ParamsDataView {
 public:
  VideoBufferRequester_GetBuffer_ParamsDataView() = default;

  VideoBufferRequester_GetBuffer_ParamsDataView(
      internal::VideoBufferRequester_GetBuffer_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::VideoBufferRequester_GetBuffer_Params_Data* data_ = nullptr;
};



class VideoBufferRequester_GetBuffer_ResponseParamsDataView {
 public:
  VideoBufferRequester_GetBuffer_ResponseParamsDataView() = default;

  VideoBufferRequester_GetBuffer_ResponseParamsDataView(
      internal::VideoBufferRequester_GetBuffer_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBufferResponseDataView(
      GetVideoBufferResponseDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBufferResponse(UserType* output) {
    
    auto* pointer = !data_->buffer_response.is_null() ? &data_->buffer_response : nullptr;
    return mojo::internal::Deserialize<::cast_streaming::mojom::GetVideoBufferResponseDataView>(
        pointer, output, message_);
  }
 private:
  internal::VideoBufferRequester_GetBuffer_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoBufferRequester_EnableBitstreamConverter_ParamsDataView {
 public:
  VideoBufferRequester_EnableBitstreamConverter_ParamsDataView() = default;

  VideoBufferRequester_EnableBitstreamConverter_ParamsDataView(
      internal::VideoBufferRequester_EnableBitstreamConverter_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::VideoBufferRequester_EnableBitstreamConverter_Params_Data* data_ = nullptr;
};



class VideoBufferRequester_EnableBitstreamConverter_ResponseParamsDataView {
 public:
  VideoBufferRequester_EnableBitstreamConverter_ResponseParamsDataView() = default;

  VideoBufferRequester_EnableBitstreamConverter_ResponseParamsDataView(
      internal::VideoBufferRequester_EnableBitstreamConverter_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::VideoBufferRequester_EnableBitstreamConverter_ResponseParams_Data* data_ = nullptr;
};



class DemuxerConnector_EnableReceiver_ParamsDataView {
 public:
  DemuxerConnector_EnableReceiver_ParamsDataView() = default;

  DemuxerConnector_EnableReceiver_ParamsDataView(
      internal::DemuxerConnector_EnableReceiver_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::DemuxerConnector_EnableReceiver_Params_Data* data_ = nullptr;
};



class DemuxerConnector_EnableReceiver_ResponseParamsDataView {
 public:
  DemuxerConnector_EnableReceiver_ResponseParamsDataView() = default;

  DemuxerConnector_EnableReceiver_ResponseParamsDataView(
      internal::DemuxerConnector_EnableReceiver_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::DemuxerConnector_EnableReceiver_ResponseParams_Data* data_ = nullptr;
};



class DemuxerConnector_OnStreamsInitialized_ParamsDataView {
 public:
  DemuxerConnector_OnStreamsInitialized_ParamsDataView() = default;

  DemuxerConnector_OnStreamsInitialized_ParamsDataView(
      internal::DemuxerConnector_OnStreamsInitialized_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAudioBufferRequesterDataView(
      AudioStreamInitializationInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAudioBufferRequester(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::cast_streaming::mojom::AudioStreamInitializationInfoDataView, UserType>(),
    "Attempting to read the optional `audio_buffer_requester` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadAudioBufferRequester` instead "
    "of `ReadAudioBufferRequester if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->audio_buffer_requester.Get();
    return mojo::internal::Deserialize<::cast_streaming::mojom::AudioStreamInitializationInfoDataView>(
        pointer, output, message_);
  }
  inline void GetVideoBufferRequesterDataView(
      VideoStreamInitializationInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadVideoBufferRequester(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::cast_streaming::mojom::VideoStreamInitializationInfoDataView, UserType>(),
    "Attempting to read the optional `video_buffer_requester` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadVideoBufferRequester` instead "
    "of `ReadVideoBufferRequester if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->video_buffer_requester.Get();
    return mojo::internal::Deserialize<::cast_streaming::mojom::VideoStreamInitializationInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::DemuxerConnector_OnStreamsInitialized_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void AudioBufferRequester_GetBuffer_ResponseParamsDataView::GetBufferResponseDataView(
    GetAudioBufferResponseDataView* output) {
  auto pointer = &data_->buffer_response;
  *output = GetAudioBufferResponseDataView(pointer, message_);
}








inline void VideoBufferRequester_GetBuffer_ResponseParamsDataView::GetBufferResponseDataView(
    GetVideoBufferResponseDataView* output) {
  auto pointer = &data_->buffer_response;
  *output = GetVideoBufferResponseDataView(pointer, message_);
}










inline void DemuxerConnector_OnStreamsInitialized_ParamsDataView::GetAudioBufferRequesterDataView(
    AudioStreamInitializationInfoDataView* output) {
  auto pointer = data_->audio_buffer_requester.Get();
  *output = AudioStreamInitializationInfoDataView(pointer, message_);
}
inline void DemuxerConnector_OnStreamsInitialized_ParamsDataView::GetVideoBufferRequesterDataView(
    VideoStreamInitializationInfoDataView* output) {
  auto pointer = data_->video_buffer_requester.Get();
  *output = VideoStreamInitializationInfoDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace cast_streaming

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_CAST_STREAMING_PUBLIC_MOJOM_DEMUXER_CONNECTOR_MOJOM_PARAMS_DATA_H_