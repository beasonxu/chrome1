// components/cast_streaming/public/mojom/demuxer_connector.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_CAST_STREAMING_PUBLIC_MOJOM_DEMUXER_CONNECTOR_MOJOM_SHARED_INTERNAL_H_
#define COMPONENTS_CAST_STREAMING_PUBLIC_MOJOM_DEMUXER_CONNECTOR_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "media/mojo/mojom/media_types.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace cast_streaming {
namespace mojom {
namespace internal {
class AudioStreamInfo_Data;
class VideoStreamInfo_Data;
class AudioStreamInitializationInfo_Data;
class VideoStreamInitializationInfo_Data;
class GetAudioBufferResponse_Data;
class GetVideoBufferResponse_Data;

#pragma pack(push, 1)


class  GetAudioBufferResponse_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;

  GetAudioBufferResponse_Data() = default;
  // Do nothing in the destructor since it won't be called when it is a
  // non-inlined union.
  ~GetAudioBufferResponse_Data() = default;

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context,
                       bool inlined);

  bool is_null() const { return size == 0; }

  void set_null() {
    size = 0U;
    tag = static_cast<GetAudioBufferResponse_Tag>(0);
    data.unknown = 0U;
  }

  // TODO(crbug.com/1148486): SHOUTY_CASE values are being deprecated per C++ code style
  // guidelines (https://google.github.io/styleguide/cppguide.html#Enumerator_Names),
  // please use kCamelCase values instead.  Cleanup NULL_VALUE, BOOL_VALUE, INT_VALUE, etc.
  // generation once codebase is transitioned to kNullValue, kBoolValue, kIntValue, etc.
  enum class GetAudioBufferResponse_Tag : uint32_t {

    
    kStreamInfo,
    
    kBuffer,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    Union_() : unknown(0) {}
    mojo::internal::Pointer<internal::AudioStreamInfo_Data> f_stream_info;
    mojo::internal::Pointer<::media::mojom::internal::DecoderBuffer_Data> f_buffer;
    uint64_t unknown;
  };

  uint32_t size;
  GetAudioBufferResponse_Tag tag;
  Union_ data;
};
static_assert(sizeof(GetAudioBufferResponse_Data) == mojo::internal::kUnionDataSize,
              "Bad sizeof(GetAudioBufferResponse_Data)");


class  GetVideoBufferResponse_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;

  GetVideoBufferResponse_Data() = default;
  // Do nothing in the destructor since it won't be called when it is a
  // non-inlined union.
  ~GetVideoBufferResponse_Data() = default;

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context,
                       bool inlined);

  bool is_null() const { return size == 0; }

  void set_null() {
    size = 0U;
    tag = static_cast<GetVideoBufferResponse_Tag>(0);
    data.unknown = 0U;
  }

  // TODO(crbug.com/1148486): SHOUTY_CASE values are being deprecated per C++ code style
  // guidelines (https://google.github.io/styleguide/cppguide.html#Enumerator_Names),
  // please use kCamelCase values instead.  Cleanup NULL_VALUE, BOOL_VALUE, INT_VALUE, etc.
  // generation once codebase is transitioned to kNullValue, kBoolValue, kIntValue, etc.
  enum class GetVideoBufferResponse_Tag : uint32_t {

    
    kStreamInfo,
    
    kBuffer,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    Union_() : unknown(0) {}
    mojo::internal::Pointer<internal::VideoStreamInfo_Data> f_stream_info;
    mojo::internal::Pointer<::media::mojom::internal::DecoderBuffer_Data> f_buffer;
    uint64_t unknown;
  };

  uint32_t size;
  GetVideoBufferResponse_Tag tag;
  Union_ data;
};
static_assert(sizeof(GetVideoBufferResponse_Data) == mojo::internal::kUnionDataSize,
              "Bad sizeof(GetVideoBufferResponse_Data)");
class  AudioStreamInfo_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::AudioDecoderConfig_Data> decoder_config;
  mojo::internal::Handle_Data data_pipe;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<AudioStreamInfo_Data>;

  AudioStreamInfo_Data();
  ~AudioStreamInfo_Data() = delete;
};
static_assert(sizeof(AudioStreamInfo_Data) == 24,
              "Bad sizeof(AudioStreamInfo_Data)");
// Used by AudioStreamInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AudioStreamInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AudioStreamInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AudioStreamInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<AudioStreamInfo_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AudioStreamInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  VideoStreamInfo_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::VideoDecoderConfig_Data> decoder_config;
  mojo::internal::Handle_Data data_pipe;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<VideoStreamInfo_Data>;

  VideoStreamInfo_Data();
  ~VideoStreamInfo_Data() = delete;
};
static_assert(sizeof(VideoStreamInfo_Data) == 24,
              "Bad sizeof(VideoStreamInfo_Data)");
// Used by VideoStreamInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct VideoStreamInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  VideoStreamInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~VideoStreamInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<VideoStreamInfo_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    VideoStreamInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  AudioStreamInitializationInfo_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data buffer_requester;
  mojo::internal::Pointer<internal::AudioStreamInfo_Data> stream_initialization_info;

 private:
  friend class mojo::internal::MessageFragment<AudioStreamInitializationInfo_Data>;

  AudioStreamInitializationInfo_Data();
  ~AudioStreamInitializationInfo_Data() = delete;
};
static_assert(sizeof(AudioStreamInitializationInfo_Data) == 24,
              "Bad sizeof(AudioStreamInitializationInfo_Data)");
// Used by AudioStreamInitializationInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AudioStreamInitializationInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AudioStreamInitializationInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AudioStreamInitializationInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<AudioStreamInitializationInfo_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AudioStreamInitializationInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  VideoStreamInitializationInfo_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data buffer_requester;
  mojo::internal::Pointer<internal::VideoStreamInfo_Data> stream_initialization_info;

 private:
  friend class mojo::internal::MessageFragment<VideoStreamInitializationInfo_Data>;

  VideoStreamInitializationInfo_Data();
  ~VideoStreamInitializationInfo_Data() = delete;
};
static_assert(sizeof(VideoStreamInitializationInfo_Data) == 24,
              "Bad sizeof(VideoStreamInitializationInfo_Data)");
// Used by VideoStreamInitializationInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct VideoStreamInitializationInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  VideoStreamInitializationInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~VideoStreamInitializationInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<VideoStreamInitializationInfo_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    VideoStreamInitializationInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace cast_streaming

#endif  // COMPONENTS_CAST_STREAMING_PUBLIC_MOJOM_DEMUXER_CONNECTOR_MOJOM_SHARED_INTERNAL_H_