// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chrome.proto

#include "chrome.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace userfeedback {
PROTOBUF_CONSTEXPR ChromeData::ChromeData(
    ::_pbi::ConstantInitialized)
  : chrome_os_data_(nullptr)
  , chrome_browser_data_(nullptr)
  , chrome_platform_(1)
{}
struct ChromeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeDataDefaultTypeInternal() {}
  union {
    ChromeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeDataDefaultTypeInternal _ChromeData_default_instance_;
PROTOBUF_CONSTEXPR ChromeOsData::ChromeOsData(
    ::_pbi::ConstantInitialized)
  : category_(8)
{}
struct ChromeOsDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeOsDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeOsDataDefaultTypeInternal() {}
  union {
    ChromeOsData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeOsDataDefaultTypeInternal _ChromeOsData_default_instance_;
PROTOBUF_CONSTEXPR ChromeBrowserData::ChromeBrowserData(
    ::_pbi::ConstantInitialized)
  : category_(9)
{}
struct ChromeBrowserDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeBrowserDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeBrowserDataDefaultTypeInternal() {}
  union {
    ChromeBrowserData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeBrowserDataDefaultTypeInternal _ChromeBrowserData_default_instance_;
}  // namespace userfeedback
namespace userfeedback {
bool ChromeData_ChromePlatform_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeData_ChromePlatform_strings[2] = {};

static const char ChromeData_ChromePlatform_names[] =
  "CHROME_BROWSER"
  "CHROME_OS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeData_ChromePlatform_entries[] = {
  { {ChromeData_ChromePlatform_names + 0, 14}, 2 },
  { {ChromeData_ChromePlatform_names + 14, 9}, 1 },
};

static const int ChromeData_ChromePlatform_entries_by_number[] = {
  1, // 1 -> CHROME_OS
  0, // 2 -> CHROME_BROWSER
};

const std::string& ChromeData_ChromePlatform_Name(
    ChromeData_ChromePlatform value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeData_ChromePlatform_entries,
          ChromeData_ChromePlatform_entries_by_number,
          2, ChromeData_ChromePlatform_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeData_ChromePlatform_entries,
      ChromeData_ChromePlatform_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeData_ChromePlatform_strings[idx].get();
}
bool ChromeData_ChromePlatform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeData_ChromePlatform* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeData_ChromePlatform_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ChromeData_ChromePlatform>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeData_ChromePlatform ChromeData::CHROME_OS;
constexpr ChromeData_ChromePlatform ChromeData::CHROME_BROWSER;
constexpr ChromeData_ChromePlatform ChromeData::ChromePlatform_MIN;
constexpr ChromeData_ChromePlatform ChromeData::ChromePlatform_MAX;
constexpr int ChromeData::ChromePlatform_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ChromeOsData_ChromeOsCategory_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeOsData_ChromeOsCategory_strings[9] = {};

static const char ChromeOsData_ChromeOsCategory_names[] =
  "AUTOFILL"
  "CONNECTIVITY"
  "CRASH"
  "EXTENSIONS_OR_APPS"
  "OTHER"
  "PAGE_FORMATTING_OR_LAYOUT"
  "PHISHING_PAGE"
  "STANDBY_OR_RESUME"
  "SYNC";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeOsData_ChromeOsCategory_entries[] = {
  { {ChromeOsData_ChromeOsCategory_names + 0, 8}, 9 },
  { {ChromeOsData_ChromeOsCategory_names + 8, 12}, 1 },
  { {ChromeOsData_ChromeOsCategory_names + 20, 5}, 3 },
  { {ChromeOsData_ChromeOsCategory_names + 25, 18}, 5 },
  { {ChromeOsData_ChromeOsCategory_names + 43, 5}, 8 },
  { {ChromeOsData_ChromeOsCategory_names + 48, 25}, 4 },
  { {ChromeOsData_ChromeOsCategory_names + 73, 13}, 7 },
  { {ChromeOsData_ChromeOsCategory_names + 86, 17}, 6 },
  { {ChromeOsData_ChromeOsCategory_names + 103, 4}, 2 },
};

static const int ChromeOsData_ChromeOsCategory_entries_by_number[] = {
  1, // 1 -> CONNECTIVITY
  8, // 2 -> SYNC
  2, // 3 -> CRASH
  5, // 4 -> PAGE_FORMATTING_OR_LAYOUT
  3, // 5 -> EXTENSIONS_OR_APPS
  7, // 6 -> STANDBY_OR_RESUME
  6, // 7 -> PHISHING_PAGE
  4, // 8 -> OTHER
  0, // 9 -> AUTOFILL
};

const std::string& ChromeOsData_ChromeOsCategory_Name(
    ChromeOsData_ChromeOsCategory value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeOsData_ChromeOsCategory_entries,
          ChromeOsData_ChromeOsCategory_entries_by_number,
          9, ChromeOsData_ChromeOsCategory_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeOsData_ChromeOsCategory_entries,
      ChromeOsData_ChromeOsCategory_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeOsData_ChromeOsCategory_strings[idx].get();
}
bool ChromeOsData_ChromeOsCategory_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeOsData_ChromeOsCategory* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeOsData_ChromeOsCategory_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<ChromeOsData_ChromeOsCategory>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeOsData_ChromeOsCategory ChromeOsData::CONNECTIVITY;
constexpr ChromeOsData_ChromeOsCategory ChromeOsData::SYNC;
constexpr ChromeOsData_ChromeOsCategory ChromeOsData::CRASH;
constexpr ChromeOsData_ChromeOsCategory ChromeOsData::PAGE_FORMATTING_OR_LAYOUT;
constexpr ChromeOsData_ChromeOsCategory ChromeOsData::EXTENSIONS_OR_APPS;
constexpr ChromeOsData_ChromeOsCategory ChromeOsData::STANDBY_OR_RESUME;
constexpr ChromeOsData_ChromeOsCategory ChromeOsData::PHISHING_PAGE;
constexpr ChromeOsData_ChromeOsCategory ChromeOsData::OTHER;
constexpr ChromeOsData_ChromeOsCategory ChromeOsData::AUTOFILL;
constexpr ChromeOsData_ChromeOsCategory ChromeOsData::ChromeOsCategory_MIN;
constexpr ChromeOsData_ChromeOsCategory ChromeOsData::ChromeOsCategory_MAX;
constexpr int ChromeOsData::ChromeOsCategory_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ChromeBrowserData_ChromeBrowserCategory_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeBrowserData_ChromeBrowserCategory_strings[10] = {};

static const char ChromeBrowserData_ChromeBrowserCategory_names[] =
  "AUTOFILL"
  "CRASH"
  "EXTENSIONS_OR_APPS"
  "OTHER"
  "PAGES_NOT_LOADING"
  "PAGE_FORMATTING_OR_LAYOUT"
  "PHISHING_PAGE"
  "PLUGINS"
  "SYNCED_PREFERENCES"
  "TABS_OR_WINDOWS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeBrowserData_ChromeBrowserCategory_entries[] = {
  { {ChromeBrowserData_ChromeBrowserCategory_names + 0, 8}, 10 },
  { {ChromeBrowserData_ChromeBrowserCategory_names + 8, 5}, 6 },
  { {ChromeBrowserData_ChromeBrowserCategory_names + 13, 18}, 7 },
  { {ChromeBrowserData_ChromeBrowserCategory_names + 31, 5}, 9 },
  { {ChromeBrowserData_ChromeBrowserCategory_names + 36, 17}, 2 },
  { {ChromeBrowserData_ChromeBrowserCategory_names + 53, 25}, 1 },
  { {ChromeBrowserData_ChromeBrowserCategory_names + 78, 13}, 8 },
  { {ChromeBrowserData_ChromeBrowserCategory_names + 91, 7}, 3 },
  { {ChromeBrowserData_ChromeBrowserCategory_names + 98, 18}, 5 },
  { {ChromeBrowserData_ChromeBrowserCategory_names + 116, 15}, 4 },
};

static const int ChromeBrowserData_ChromeBrowserCategory_entries_by_number[] = {
  5, // 1 -> PAGE_FORMATTING_OR_LAYOUT
  4, // 2 -> PAGES_NOT_LOADING
  7, // 3 -> PLUGINS
  9, // 4 -> TABS_OR_WINDOWS
  8, // 5 -> SYNCED_PREFERENCES
  1, // 6 -> CRASH
  2, // 7 -> EXTENSIONS_OR_APPS
  6, // 8 -> PHISHING_PAGE
  3, // 9 -> OTHER
  0, // 10 -> AUTOFILL
};

const std::string& ChromeBrowserData_ChromeBrowserCategory_Name(
    ChromeBrowserData_ChromeBrowserCategory value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeBrowserData_ChromeBrowserCategory_entries,
          ChromeBrowserData_ChromeBrowserCategory_entries_by_number,
          10, ChromeBrowserData_ChromeBrowserCategory_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeBrowserData_ChromeBrowserCategory_entries,
      ChromeBrowserData_ChromeBrowserCategory_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeBrowserData_ChromeBrowserCategory_strings[idx].get();
}
bool ChromeBrowserData_ChromeBrowserCategory_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeBrowserData_ChromeBrowserCategory* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeBrowserData_ChromeBrowserCategory_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<ChromeBrowserData_ChromeBrowserCategory>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::PAGE_FORMATTING_OR_LAYOUT;
constexpr ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::PAGES_NOT_LOADING;
constexpr ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::PLUGINS;
constexpr ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::TABS_OR_WINDOWS;
constexpr ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::SYNCED_PREFERENCES;
constexpr ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::CRASH;
constexpr ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::EXTENSIONS_OR_APPS;
constexpr ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::PHISHING_PAGE;
constexpr ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::OTHER;
constexpr ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::AUTOFILL;
constexpr ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::ChromeBrowserCategory_MIN;
constexpr ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::ChromeBrowserCategory_MAX;
constexpr int ChromeBrowserData::ChromeBrowserCategory_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ChromeData::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeData>()._has_bits_);
  static void set_has_chrome_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::userfeedback::ChromeOsData& chrome_os_data(const ChromeData* msg);
  static void set_has_chrome_os_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::userfeedback::ChromeBrowserData& chrome_browser_data(const ChromeData* msg);
  static void set_has_chrome_browser_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::userfeedback::ChromeOsData&
ChromeData::_Internal::chrome_os_data(const ChromeData* msg) {
  return *msg->chrome_os_data_;
}
const ::userfeedback::ChromeBrowserData&
ChromeData::_Internal::chrome_browser_data(const ChromeData* msg) {
  return *msg->chrome_browser_data_;
}
ChromeData::ChromeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:userfeedback.ChromeData)
}
ChromeData::ChromeData(const ChromeData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_chrome_os_data()) {
    chrome_os_data_ = new ::userfeedback::ChromeOsData(*from.chrome_os_data_);
  } else {
    chrome_os_data_ = nullptr;
  }
  if (from._internal_has_chrome_browser_data()) {
    chrome_browser_data_ = new ::userfeedback::ChromeBrowserData(*from.chrome_browser_data_);
  } else {
    chrome_browser_data_ = nullptr;
  }
  chrome_platform_ = from.chrome_platform_;
  // @@protoc_insertion_point(copy_constructor:userfeedback.ChromeData)
}

inline void ChromeData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chrome_os_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chrome_browser_data_) -
    reinterpret_cast<char*>(&chrome_os_data_)) + sizeof(chrome_browser_data_));
chrome_platform_ = 1;
}

ChromeData::~ChromeData() {
  // @@protoc_insertion_point(destructor:userfeedback.ChromeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete chrome_os_data_;
  if (this != internal_default_instance()) delete chrome_browser_data_;
}

void ChromeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChromeData::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ChromeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(chrome_os_data_ != nullptr);
      chrome_os_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(chrome_browser_data_ != nullptr);
      chrome_browser_data_->Clear();
    }
    chrome_platform_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .userfeedback.ChromeData.ChromePlatform chrome_platform = 1 [default = CHROME_OS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::userfeedback::ChromeData_ChromePlatform_IsValid(val))) {
            _internal_set_chrome_platform(static_cast<::userfeedback::ChromeData_ChromePlatform>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .userfeedback.ChromeOsData chrome_os_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_os_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .userfeedback.ChromeBrowserData chrome_browser_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_browser_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userfeedback.ChromeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .userfeedback.ChromeData.ChromePlatform chrome_platform = 1 [default = CHROME_OS];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_chrome_platform(), target);
  }

  // optional .userfeedback.ChromeOsData chrome_os_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::chrome_os_data(this),
        _Internal::chrome_os_data(this).GetCachedSize(), target, stream);
  }

  // optional .userfeedback.ChromeBrowserData chrome_browser_data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::chrome_browser_data(this),
        _Internal::chrome_browser_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userfeedback.ChromeData)
  return target;
}

size_t ChromeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ChromeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .userfeedback.ChromeOsData chrome_os_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_os_data_);
    }

    // optional .userfeedback.ChromeBrowserData chrome_browser_data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_browser_data_);
    }

    // optional .userfeedback.ChromeData.ChromePlatform chrome_platform = 1 [default = CHROME_OS];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_chrome_platform());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeData*>(
      &from));
}

void ChromeData::MergeFrom(const ChromeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ChromeData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_chrome_os_data()->::userfeedback::ChromeOsData::MergeFrom(from._internal_chrome_os_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_chrome_browser_data()->::userfeedback::ChromeBrowserData::MergeFrom(from._internal_chrome_browser_data());
    }
    if (cached_has_bits & 0x00000004u) {
      chrome_platform_ = from.chrome_platform_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeData::CopyFrom(const ChromeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ChromeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeData::IsInitialized() const {
  return true;
}

void ChromeData::InternalSwap(ChromeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeData, chrome_browser_data_)
      + sizeof(ChromeData::chrome_browser_data_)
      - PROTOBUF_FIELD_OFFSET(ChromeData, chrome_os_data_)>(
          reinterpret_cast<char*>(&chrome_os_data_),
          reinterpret_cast<char*>(&other->chrome_os_data_));
  swap(chrome_platform_, other->chrome_platform_);
}

std::string ChromeData::GetTypeName() const {
  return "userfeedback.ChromeData";
}


// ===================================================================

class ChromeOsData::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeOsData>()._has_bits_);
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChromeOsData::ChromeOsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:userfeedback.ChromeOsData)
}
ChromeOsData::ChromeOsData(const ChromeOsData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  category_ = from.category_;
  // @@protoc_insertion_point(copy_constructor:userfeedback.ChromeOsData)
}

inline void ChromeOsData::SharedCtor() {
category_ = 8;
}

ChromeOsData::~ChromeOsData() {
  // @@protoc_insertion_point(destructor:userfeedback.ChromeOsData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeOsData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChromeOsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChromeOsData::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ChromeOsData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_ = 8;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeOsData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .userfeedback.ChromeOsData.ChromeOsCategory category = 1 [default = OTHER];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::userfeedback::ChromeOsData_ChromeOsCategory_IsValid(val))) {
            _internal_set_category(static_cast<::userfeedback::ChromeOsData_ChromeOsCategory>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeOsData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userfeedback.ChromeOsData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .userfeedback.ChromeOsData.ChromeOsCategory category = 1 [default = OTHER];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_category(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userfeedback.ChromeOsData)
  return target;
}

size_t ChromeOsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ChromeOsData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .userfeedback.ChromeOsData.ChromeOsCategory category = 1 [default = OTHER];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_category());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeOsData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeOsData*>(
      &from));
}

void ChromeOsData::MergeFrom(const ChromeOsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ChromeOsData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_category()) {
    _internal_set_category(from._internal_category());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeOsData::CopyFrom(const ChromeOsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ChromeOsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeOsData::IsInitialized() const {
  return true;
}

void ChromeOsData::InternalSwap(ChromeOsData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(category_, other->category_);
}

std::string ChromeOsData::GetTypeName() const {
  return "userfeedback.ChromeOsData";
}


// ===================================================================

class ChromeBrowserData::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeBrowserData>()._has_bits_);
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChromeBrowserData::ChromeBrowserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:userfeedback.ChromeBrowserData)
}
ChromeBrowserData::ChromeBrowserData(const ChromeBrowserData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  category_ = from.category_;
  // @@protoc_insertion_point(copy_constructor:userfeedback.ChromeBrowserData)
}

inline void ChromeBrowserData::SharedCtor() {
category_ = 9;
}

ChromeBrowserData::~ChromeBrowserData() {
  // @@protoc_insertion_point(destructor:userfeedback.ChromeBrowserData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeBrowserData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChromeBrowserData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChromeBrowserData::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ChromeBrowserData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_ = 9;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeBrowserData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .userfeedback.ChromeBrowserData.ChromeBrowserCategory category = 1 [default = OTHER];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::userfeedback::ChromeBrowserData_ChromeBrowserCategory_IsValid(val))) {
            _internal_set_category(static_cast<::userfeedback::ChromeBrowserData_ChromeBrowserCategory>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeBrowserData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userfeedback.ChromeBrowserData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .userfeedback.ChromeBrowserData.ChromeBrowserCategory category = 1 [default = OTHER];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_category(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userfeedback.ChromeBrowserData)
  return target;
}

size_t ChromeBrowserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ChromeBrowserData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .userfeedback.ChromeBrowserData.ChromeBrowserCategory category = 1 [default = OTHER];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_category());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeBrowserData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeBrowserData*>(
      &from));
}

void ChromeBrowserData::MergeFrom(const ChromeBrowserData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ChromeBrowserData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_category()) {
    _internal_set_category(from._internal_category());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeBrowserData::CopyFrom(const ChromeBrowserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ChromeBrowserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeBrowserData::IsInitialized() const {
  return true;
}

void ChromeBrowserData::InternalSwap(ChromeBrowserData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(category_, other->category_);
}

std::string ChromeBrowserData::GetTypeName() const {
  return "userfeedback.ChromeBrowserData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace userfeedback
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::userfeedback::ChromeData*
Arena::CreateMaybeMessage< ::userfeedback::ChromeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::userfeedback::ChromeData >(arena);
}
template<> PROTOBUF_NOINLINE ::userfeedback::ChromeOsData*
Arena::CreateMaybeMessage< ::userfeedback::ChromeOsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::userfeedback::ChromeOsData >(arena);
}
template<> PROTOBUF_NOINLINE ::userfeedback::ChromeBrowserData*
Arena::CreateMaybeMessage< ::userfeedback::ChromeBrowserData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::userfeedback::ChromeBrowserData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
