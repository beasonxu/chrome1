// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: math.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_math_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_math_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_math_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_math_2eproto {
  static const uint32_t offsets[];
};
namespace userfeedback {
class Dimensions;
struct DimensionsDefaultTypeInternal;
extern DimensionsDefaultTypeInternal _Dimensions_default_instance_;
class Rectangle;
struct RectangleDefaultTypeInternal;
extern RectangleDefaultTypeInternal _Rectangle_default_instance_;
}  // namespace userfeedback
PROTOBUF_NAMESPACE_OPEN
template<> ::userfeedback::Dimensions* Arena::CreateMaybeMessage<::userfeedback::Dimensions>(Arena*);
template<> ::userfeedback::Rectangle* Arena::CreateMaybeMessage<::userfeedback::Rectangle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace userfeedback {

// ===================================================================

class Dimensions final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.Dimensions) */ {
 public:
  inline Dimensions() : Dimensions(nullptr) {}
  ~Dimensions() override;
  explicit PROTOBUF_CONSTEXPR Dimensions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dimensions(const Dimensions& from);
  Dimensions(Dimensions&& from) noexcept
    : Dimensions() {
    *this = ::std::move(from);
  }

  inline Dimensions& operator=(const Dimensions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dimensions& operator=(Dimensions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Dimensions& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dimensions* internal_default_instance() {
    return reinterpret_cast<const Dimensions*>(
               &_Dimensions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Dimensions& a, Dimensions& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Dimensions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dimensions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dimensions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Dimensions>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Dimensions& from);
  void MergeFrom(const Dimensions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dimensions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.Dimensions";
  }
  protected:
  explicit Dimensions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // required float width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // required float height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:userfeedback.Dimensions)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float width_;
  float height_;
  friend struct ::TableStruct_math_2eproto;
};
// -------------------------------------------------------------------

class Rectangle final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.Rectangle) */ {
 public:
  inline Rectangle() : Rectangle(nullptr) {}
  ~Rectangle() override;
  explicit PROTOBUF_CONSTEXPR Rectangle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rectangle(const Rectangle& from);
  Rectangle(Rectangle&& from) noexcept
    : Rectangle() {
    *this = ::std::move(from);
  }

  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rectangle& operator=(Rectangle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Rectangle& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rectangle* internal_default_instance() {
    return reinterpret_cast<const Rectangle*>(
               &_Rectangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Rectangle& a, Rectangle& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Rectangle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rectangle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rectangle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rectangle>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Rectangle& from);
  void MergeFrom(const Rectangle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Rectangle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.Rectangle";
  }
  protected:
  explicit Rectangle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kTopFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // required float left = 1;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  float left() const;
  void set_left(float value);
  private:
  float _internal_left() const;
  void _internal_set_left(float value);
  public:

  // required float top = 2;
  bool has_top() const;
  private:
  bool _internal_has_top() const;
  public:
  void clear_top();
  float top() const;
  void set_top(float value);
  private:
  float _internal_top() const;
  void _internal_set_top(float value);
  public:

  // required float width = 3;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // required float height = 4;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:userfeedback.Rectangle)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float left_;
  float top_;
  float width_;
  float height_;
  friend struct ::TableStruct_math_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Dimensions

// required float width = 1;
inline bool Dimensions::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Dimensions::has_width() const {
  return _internal_has_width();
}
inline void Dimensions::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Dimensions::_internal_width() const {
  return width_;
}
inline float Dimensions::width() const {
  // @@protoc_insertion_point(field_get:userfeedback.Dimensions.width)
  return _internal_width();
}
inline void Dimensions::_internal_set_width(float value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
}
inline void Dimensions::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:userfeedback.Dimensions.width)
}

// required float height = 2;
inline bool Dimensions::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Dimensions::has_height() const {
  return _internal_has_height();
}
inline void Dimensions::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Dimensions::_internal_height() const {
  return height_;
}
inline float Dimensions::height() const {
  // @@protoc_insertion_point(field_get:userfeedback.Dimensions.height)
  return _internal_height();
}
inline void Dimensions::_internal_set_height(float value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void Dimensions::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:userfeedback.Dimensions.height)
}

// -------------------------------------------------------------------

// Rectangle

// required float left = 1;
inline bool Rectangle::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Rectangle::has_left() const {
  return _internal_has_left();
}
inline void Rectangle::clear_left() {
  left_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Rectangle::_internal_left() const {
  return left_;
}
inline float Rectangle::left() const {
  // @@protoc_insertion_point(field_get:userfeedback.Rectangle.left)
  return _internal_left();
}
inline void Rectangle::_internal_set_left(float value) {
  _has_bits_[0] |= 0x00000001u;
  left_ = value;
}
inline void Rectangle::set_left(float value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:userfeedback.Rectangle.left)
}

// required float top = 2;
inline bool Rectangle::_internal_has_top() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Rectangle::has_top() const {
  return _internal_has_top();
}
inline void Rectangle::clear_top() {
  top_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Rectangle::_internal_top() const {
  return top_;
}
inline float Rectangle::top() const {
  // @@protoc_insertion_point(field_get:userfeedback.Rectangle.top)
  return _internal_top();
}
inline void Rectangle::_internal_set_top(float value) {
  _has_bits_[0] |= 0x00000002u;
  top_ = value;
}
inline void Rectangle::set_top(float value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:userfeedback.Rectangle.top)
}

// required float width = 3;
inline bool Rectangle::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Rectangle::has_width() const {
  return _internal_has_width();
}
inline void Rectangle::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Rectangle::_internal_width() const {
  return width_;
}
inline float Rectangle::width() const {
  // @@protoc_insertion_point(field_get:userfeedback.Rectangle.width)
  return _internal_width();
}
inline void Rectangle::_internal_set_width(float value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
}
inline void Rectangle::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:userfeedback.Rectangle.width)
}

// required float height = 4;
inline bool Rectangle::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Rectangle::has_height() const {
  return _internal_has_height();
}
inline void Rectangle::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Rectangle::_internal_height() const {
  return height_;
}
inline float Rectangle::height() const {
  // @@protoc_insertion_point(field_get:userfeedback.Rectangle.height)
  return _internal_height();
}
inline void Rectangle::_internal_set_height(float value) {
  _has_bits_[0] |= 0x00000008u;
  height_ = value;
}
inline void Rectangle::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:userfeedback.Rectangle.height)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace userfeedback

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_math_2eproto
