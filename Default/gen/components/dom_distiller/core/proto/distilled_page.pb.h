// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: distilled_page.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_distilled_5fpage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_distilled_5fpage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_distilled_5fpage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_distilled_5fpage_2eproto {
  static const uint32_t offsets[];
};
namespace dom_distiller {
class DistilledPageProto;
struct DistilledPageProtoDefaultTypeInternal;
extern DistilledPageProtoDefaultTypeInternal _DistilledPageProto_default_instance_;
class DistilledPageProto_DebugInfo;
struct DistilledPageProto_DebugInfoDefaultTypeInternal;
extern DistilledPageProto_DebugInfoDefaultTypeInternal _DistilledPageProto_DebugInfo_default_instance_;
class DistilledPageProto_Image;
struct DistilledPageProto_ImageDefaultTypeInternal;
extern DistilledPageProto_ImageDefaultTypeInternal _DistilledPageProto_Image_default_instance_;
class DistilledPageProto_PaginationInfo;
struct DistilledPageProto_PaginationInfoDefaultTypeInternal;
extern DistilledPageProto_PaginationInfoDefaultTypeInternal _DistilledPageProto_PaginationInfo_default_instance_;
class DistilledPageProto_TimingInfo;
struct DistilledPageProto_TimingInfoDefaultTypeInternal;
extern DistilledPageProto_TimingInfoDefaultTypeInternal _DistilledPageProto_TimingInfo_default_instance_;
}  // namespace dom_distiller
PROTOBUF_NAMESPACE_OPEN
template<> ::dom_distiller::DistilledPageProto* Arena::CreateMaybeMessage<::dom_distiller::DistilledPageProto>(Arena*);
template<> ::dom_distiller::DistilledPageProto_DebugInfo* Arena::CreateMaybeMessage<::dom_distiller::DistilledPageProto_DebugInfo>(Arena*);
template<> ::dom_distiller::DistilledPageProto_Image* Arena::CreateMaybeMessage<::dom_distiller::DistilledPageProto_Image>(Arena*);
template<> ::dom_distiller::DistilledPageProto_PaginationInfo* Arena::CreateMaybeMessage<::dom_distiller::DistilledPageProto_PaginationInfo>(Arena*);
template<> ::dom_distiller::DistilledPageProto_TimingInfo* Arena::CreateMaybeMessage<::dom_distiller::DistilledPageProto_TimingInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dom_distiller {

// ===================================================================

class DistilledPageProto_Image final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.DistilledPageProto.Image) */ {
 public:
  inline DistilledPageProto_Image() : DistilledPageProto_Image(nullptr) {}
  ~DistilledPageProto_Image() override;
  explicit PROTOBUF_CONSTEXPR DistilledPageProto_Image(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DistilledPageProto_Image(const DistilledPageProto_Image& from);
  DistilledPageProto_Image(DistilledPageProto_Image&& from) noexcept
    : DistilledPageProto_Image() {
    *this = ::std::move(from);
  }

  inline DistilledPageProto_Image& operator=(const DistilledPageProto_Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistilledPageProto_Image& operator=(DistilledPageProto_Image&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DistilledPageProto_Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistilledPageProto_Image* internal_default_instance() {
    return reinterpret_cast<const DistilledPageProto_Image*>(
               &_DistilledPageProto_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DistilledPageProto_Image& a, DistilledPageProto_Image& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DistilledPageProto_Image* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistilledPageProto_Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistilledPageProto_Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DistilledPageProto_Image>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DistilledPageProto_Image& from);
  void MergeFrom(const DistilledPageProto_Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DistilledPageProto_Image* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dom_distiller.DistilledPageProto.Image";
  }
  protected:
  explicit DistilledPageProto_Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataFieldNumber = 2,
    kUrlFieldNumber = 3,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional string url = 3;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:dom_distiller.DistilledPageProto.Image)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_distilled_5fpage_2eproto;
};
// -------------------------------------------------------------------

class DistilledPageProto_DebugInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.DistilledPageProto.DebugInfo) */ {
 public:
  inline DistilledPageProto_DebugInfo() : DistilledPageProto_DebugInfo(nullptr) {}
  ~DistilledPageProto_DebugInfo() override;
  explicit PROTOBUF_CONSTEXPR DistilledPageProto_DebugInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DistilledPageProto_DebugInfo(const DistilledPageProto_DebugInfo& from);
  DistilledPageProto_DebugInfo(DistilledPageProto_DebugInfo&& from) noexcept
    : DistilledPageProto_DebugInfo() {
    *this = ::std::move(from);
  }

  inline DistilledPageProto_DebugInfo& operator=(const DistilledPageProto_DebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistilledPageProto_DebugInfo& operator=(DistilledPageProto_DebugInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DistilledPageProto_DebugInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistilledPageProto_DebugInfo* internal_default_instance() {
    return reinterpret_cast<const DistilledPageProto_DebugInfo*>(
               &_DistilledPageProto_DebugInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DistilledPageProto_DebugInfo& a, DistilledPageProto_DebugInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DistilledPageProto_DebugInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistilledPageProto_DebugInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistilledPageProto_DebugInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DistilledPageProto_DebugInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DistilledPageProto_DebugInfo& from);
  void MergeFrom(const DistilledPageProto_DebugInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DistilledPageProto_DebugInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dom_distiller.DistilledPageProto.DebugInfo";
  }
  protected:
  explicit DistilledPageProto_DebugInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogFieldNumber = 1,
  };
  // optional string log = 1;
  bool has_log() const;
  private:
  bool _internal_has_log() const;
  public:
  void clear_log();
  const std::string& log() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_log(ArgT0&& arg0, ArgT... args);
  std::string* mutable_log();
  PROTOBUF_NODISCARD std::string* release_log();
  void set_allocated_log(std::string* log);
  private:
  const std::string& _internal_log() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log(const std::string& value);
  std::string* _internal_mutable_log();
  public:

  // @@protoc_insertion_point(class_scope:dom_distiller.DistilledPageProto.DebugInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_;
  friend struct ::TableStruct_distilled_5fpage_2eproto;
};
// -------------------------------------------------------------------

class DistilledPageProto_PaginationInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.DistilledPageProto.PaginationInfo) */ {
 public:
  inline DistilledPageProto_PaginationInfo() : DistilledPageProto_PaginationInfo(nullptr) {}
  ~DistilledPageProto_PaginationInfo() override;
  explicit PROTOBUF_CONSTEXPR DistilledPageProto_PaginationInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DistilledPageProto_PaginationInfo(const DistilledPageProto_PaginationInfo& from);
  DistilledPageProto_PaginationInfo(DistilledPageProto_PaginationInfo&& from) noexcept
    : DistilledPageProto_PaginationInfo() {
    *this = ::std::move(from);
  }

  inline DistilledPageProto_PaginationInfo& operator=(const DistilledPageProto_PaginationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistilledPageProto_PaginationInfo& operator=(DistilledPageProto_PaginationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DistilledPageProto_PaginationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistilledPageProto_PaginationInfo* internal_default_instance() {
    return reinterpret_cast<const DistilledPageProto_PaginationInfo*>(
               &_DistilledPageProto_PaginationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DistilledPageProto_PaginationInfo& a, DistilledPageProto_PaginationInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DistilledPageProto_PaginationInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistilledPageProto_PaginationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistilledPageProto_PaginationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DistilledPageProto_PaginationInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DistilledPageProto_PaginationInfo& from);
  void MergeFrom(const DistilledPageProto_PaginationInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DistilledPageProto_PaginationInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dom_distiller.DistilledPageProto.PaginationInfo";
  }
  protected:
  explicit DistilledPageProto_PaginationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextPageFieldNumber = 1,
    kPrevPageFieldNumber = 2,
    kCanonicalPageFieldNumber = 3,
  };
  // optional string next_page = 1;
  bool has_next_page() const;
  private:
  bool _internal_has_next_page() const;
  public:
  void clear_next_page();
  const std::string& next_page() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page();
  PROTOBUF_NODISCARD std::string* release_next_page();
  void set_allocated_next_page(std::string* next_page);
  private:
  const std::string& _internal_next_page() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page(const std::string& value);
  std::string* _internal_mutable_next_page();
  public:

  // optional string prev_page = 2;
  bool has_prev_page() const;
  private:
  bool _internal_has_prev_page() const;
  public:
  void clear_prev_page();
  const std::string& prev_page() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prev_page(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prev_page();
  PROTOBUF_NODISCARD std::string* release_prev_page();
  void set_allocated_prev_page(std::string* prev_page);
  private:
  const std::string& _internal_prev_page() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prev_page(const std::string& value);
  std::string* _internal_mutable_prev_page();
  public:

  // optional string canonical_page = 3;
  bool has_canonical_page() const;
  private:
  bool _internal_has_canonical_page() const;
  public:
  void clear_canonical_page();
  const std::string& canonical_page() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_canonical_page(ArgT0&& arg0, ArgT... args);
  std::string* mutable_canonical_page();
  PROTOBUF_NODISCARD std::string* release_canonical_page();
  void set_allocated_canonical_page(std::string* canonical_page);
  private:
  const std::string& _internal_canonical_page() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_canonical_page(const std::string& value);
  std::string* _internal_mutable_canonical_page();
  public:

  // @@protoc_insertion_point(class_scope:dom_distiller.DistilledPageProto.PaginationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_page_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr canonical_page_;
  friend struct ::TableStruct_distilled_5fpage_2eproto;
};
// -------------------------------------------------------------------

class DistilledPageProto_TimingInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.DistilledPageProto.TimingInfo) */ {
 public:
  inline DistilledPageProto_TimingInfo() : DistilledPageProto_TimingInfo(nullptr) {}
  ~DistilledPageProto_TimingInfo() override;
  explicit PROTOBUF_CONSTEXPR DistilledPageProto_TimingInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DistilledPageProto_TimingInfo(const DistilledPageProto_TimingInfo& from);
  DistilledPageProto_TimingInfo(DistilledPageProto_TimingInfo&& from) noexcept
    : DistilledPageProto_TimingInfo() {
    *this = ::std::move(from);
  }

  inline DistilledPageProto_TimingInfo& operator=(const DistilledPageProto_TimingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistilledPageProto_TimingInfo& operator=(DistilledPageProto_TimingInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DistilledPageProto_TimingInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistilledPageProto_TimingInfo* internal_default_instance() {
    return reinterpret_cast<const DistilledPageProto_TimingInfo*>(
               &_DistilledPageProto_TimingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DistilledPageProto_TimingInfo& a, DistilledPageProto_TimingInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DistilledPageProto_TimingInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistilledPageProto_TimingInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistilledPageProto_TimingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DistilledPageProto_TimingInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DistilledPageProto_TimingInfo& from);
  void MergeFrom(const DistilledPageProto_TimingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DistilledPageProto_TimingInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dom_distiller.DistilledPageProto.TimingInfo";
  }
  protected:
  explicit DistilledPageProto_TimingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional double time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:dom_distiller.DistilledPageProto.TimingInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double time_;
  friend struct ::TableStruct_distilled_5fpage_2eproto;
};
// -------------------------------------------------------------------

class DistilledPageProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.DistilledPageProto) */ {
 public:
  inline DistilledPageProto() : DistilledPageProto(nullptr) {}
  ~DistilledPageProto() override;
  explicit PROTOBUF_CONSTEXPR DistilledPageProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DistilledPageProto(const DistilledPageProto& from);
  DistilledPageProto(DistilledPageProto&& from) noexcept
    : DistilledPageProto() {
    *this = ::std::move(from);
  }

  inline DistilledPageProto& operator=(const DistilledPageProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistilledPageProto& operator=(DistilledPageProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DistilledPageProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistilledPageProto* internal_default_instance() {
    return reinterpret_cast<const DistilledPageProto*>(
               &_DistilledPageProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DistilledPageProto& a, DistilledPageProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DistilledPageProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistilledPageProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistilledPageProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DistilledPageProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DistilledPageProto& from);
  void MergeFrom(const DistilledPageProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DistilledPageProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dom_distiller.DistilledPageProto";
  }
  protected:
  explicit DistilledPageProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DistilledPageProto_Image Image;
  typedef DistilledPageProto_DebugInfo DebugInfo;
  typedef DistilledPageProto_PaginationInfo PaginationInfo;
  typedef DistilledPageProto_TimingInfo TimingInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 4,
    kTimingInfoFieldNumber = 9,
    kUrlFieldNumber = 1,
    kHtmlFieldNumber = 3,
    kTitleFieldNumber = 5,
    kTextDirectionFieldNumber = 7,
    kDebugInfoFieldNumber = 6,
    kPaginationInfoFieldNumber = 8,
  };
  // repeated .dom_distiller.DistilledPageProto.Image image = 4;
  int image_size() const;
  private:
  int _internal_image_size() const;
  public:
  void clear_image();
  ::dom_distiller::DistilledPageProto_Image* mutable_image(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto_Image >*
      mutable_image();
  private:
  const ::dom_distiller::DistilledPageProto_Image& _internal_image(int index) const;
  ::dom_distiller::DistilledPageProto_Image* _internal_add_image();
  public:
  const ::dom_distiller::DistilledPageProto_Image& image(int index) const;
  ::dom_distiller::DistilledPageProto_Image* add_image();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto_Image >&
      image() const;

  // repeated .dom_distiller.DistilledPageProto.TimingInfo timing_info = 9;
  int timing_info_size() const;
  private:
  int _internal_timing_info_size() const;
  public:
  void clear_timing_info();
  ::dom_distiller::DistilledPageProto_TimingInfo* mutable_timing_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto_TimingInfo >*
      mutable_timing_info();
  private:
  const ::dom_distiller::DistilledPageProto_TimingInfo& _internal_timing_info(int index) const;
  ::dom_distiller::DistilledPageProto_TimingInfo* _internal_add_timing_info();
  public:
  const ::dom_distiller::DistilledPageProto_TimingInfo& timing_info(int index) const;
  ::dom_distiller::DistilledPageProto_TimingInfo* add_timing_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto_TimingInfo >&
      timing_info() const;

  // required string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // required string html = 3;
  bool has_html() const;
  private:
  bool _internal_has_html() const;
  public:
  void clear_html();
  const std::string& html() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_html(ArgT0&& arg0, ArgT... args);
  std::string* mutable_html();
  PROTOBUF_NODISCARD std::string* release_html();
  void set_allocated_html(std::string* html);
  private:
  const std::string& _internal_html() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_html(const std::string& value);
  std::string* _internal_mutable_html();
  public:

  // optional string title = 5;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string text_direction = 7;
  bool has_text_direction() const;
  private:
  bool _internal_has_text_direction() const;
  public:
  void clear_text_direction();
  const std::string& text_direction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text_direction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text_direction();
  PROTOBUF_NODISCARD std::string* release_text_direction();
  void set_allocated_text_direction(std::string* text_direction);
  private:
  const std::string& _internal_text_direction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text_direction(const std::string& value);
  std::string* _internal_mutable_text_direction();
  public:

  // optional .dom_distiller.DistilledPageProto.DebugInfo debug_info = 6;
  bool has_debug_info() const;
  private:
  bool _internal_has_debug_info() const;
  public:
  void clear_debug_info();
  const ::dom_distiller::DistilledPageProto_DebugInfo& debug_info() const;
  PROTOBUF_NODISCARD ::dom_distiller::DistilledPageProto_DebugInfo* release_debug_info();
  ::dom_distiller::DistilledPageProto_DebugInfo* mutable_debug_info();
  void set_allocated_debug_info(::dom_distiller::DistilledPageProto_DebugInfo* debug_info);
  private:
  const ::dom_distiller::DistilledPageProto_DebugInfo& _internal_debug_info() const;
  ::dom_distiller::DistilledPageProto_DebugInfo* _internal_mutable_debug_info();
  public:
  void unsafe_arena_set_allocated_debug_info(
      ::dom_distiller::DistilledPageProto_DebugInfo* debug_info);
  ::dom_distiller::DistilledPageProto_DebugInfo* unsafe_arena_release_debug_info();

  // optional .dom_distiller.DistilledPageProto.PaginationInfo pagination_info = 8;
  bool has_pagination_info() const;
  private:
  bool _internal_has_pagination_info() const;
  public:
  void clear_pagination_info();
  const ::dom_distiller::DistilledPageProto_PaginationInfo& pagination_info() const;
  PROTOBUF_NODISCARD ::dom_distiller::DistilledPageProto_PaginationInfo* release_pagination_info();
  ::dom_distiller::DistilledPageProto_PaginationInfo* mutable_pagination_info();
  void set_allocated_pagination_info(::dom_distiller::DistilledPageProto_PaginationInfo* pagination_info);
  private:
  const ::dom_distiller::DistilledPageProto_PaginationInfo& _internal_pagination_info() const;
  ::dom_distiller::DistilledPageProto_PaginationInfo* _internal_mutable_pagination_info();
  public:
  void unsafe_arena_set_allocated_pagination_info(
      ::dom_distiller::DistilledPageProto_PaginationInfo* pagination_info);
  ::dom_distiller::DistilledPageProto_PaginationInfo* unsafe_arena_release_pagination_info();

  // @@protoc_insertion_point(class_scope:dom_distiller.DistilledPageProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto_Image > image_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto_TimingInfo > timing_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr html_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_direction_;
  ::dom_distiller::DistilledPageProto_DebugInfo* debug_info_;
  ::dom_distiller::DistilledPageProto_PaginationInfo* pagination_info_;
  friend struct ::TableStruct_distilled_5fpage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DistilledPageProto_Image

// required string name = 1;
inline bool DistilledPageProto_Image::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DistilledPageProto_Image::has_name() const {
  return _internal_has_name();
}
inline void DistilledPageProto_Image::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DistilledPageProto_Image::name() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.Image.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistilledPageProto_Image::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.Image.name)
}
inline std::string* DistilledPageProto_Image::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.Image.name)
  return _s;
}
inline const std::string& DistilledPageProto_Image::_internal_name() const {
  return name_.Get();
}
inline void DistilledPageProto_Image::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* DistilledPageProto_Image::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* DistilledPageProto_Image::release_name() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.Image.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DistilledPageProto_Image::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.Image.name)
}

// required bytes data = 2;
inline bool DistilledPageProto_Image::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DistilledPageProto_Image::has_data() const {
  return _internal_has_data();
}
inline void DistilledPageProto_Image::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DistilledPageProto_Image::data() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.Image.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistilledPageProto_Image::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.Image.data)
}
inline std::string* DistilledPageProto_Image::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.Image.data)
  return _s;
}
inline const std::string& DistilledPageProto_Image::_internal_data() const {
  return data_.Get();
}
inline void DistilledPageProto_Image::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* DistilledPageProto_Image::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* DistilledPageProto_Image::release_data() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.Image.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DistilledPageProto_Image::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.Image.data)
}

// optional string url = 3;
inline bool DistilledPageProto_Image::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DistilledPageProto_Image::has_url() const {
  return _internal_has_url();
}
inline void DistilledPageProto_Image::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DistilledPageProto_Image::url() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.Image.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistilledPageProto_Image::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.Image.url)
}
inline std::string* DistilledPageProto_Image::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.Image.url)
  return _s;
}
inline const std::string& DistilledPageProto_Image::_internal_url() const {
  return url_.Get();
}
inline void DistilledPageProto_Image::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* DistilledPageProto_Image::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000004u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* DistilledPageProto_Image::release_url() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.Image.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DistilledPageProto_Image::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.Image.url)
}

// -------------------------------------------------------------------

// DistilledPageProto_DebugInfo

// optional string log = 1;
inline bool DistilledPageProto_DebugInfo::_internal_has_log() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DistilledPageProto_DebugInfo::has_log() const {
  return _internal_has_log();
}
inline void DistilledPageProto_DebugInfo::clear_log() {
  log_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DistilledPageProto_DebugInfo::log() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.DebugInfo.log)
  return _internal_log();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistilledPageProto_DebugInfo::set_log(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 log_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.DebugInfo.log)
}
inline std::string* DistilledPageProto_DebugInfo::mutable_log() {
  std::string* _s = _internal_mutable_log();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.DebugInfo.log)
  return _s;
}
inline const std::string& DistilledPageProto_DebugInfo::_internal_log() const {
  return log_.Get();
}
inline void DistilledPageProto_DebugInfo::_internal_set_log(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  log_.Set(value, GetArenaForAllocation());
}
inline std::string* DistilledPageProto_DebugInfo::_internal_mutable_log() {
  _has_bits_[0] |= 0x00000001u;
  return log_.Mutable(GetArenaForAllocation());
}
inline std::string* DistilledPageProto_DebugInfo::release_log() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.DebugInfo.log)
  if (!_internal_has_log()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = log_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (log_.IsDefault()) {
    log_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DistilledPageProto_DebugInfo::set_allocated_log(std::string* log) {
  if (log != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  log_.SetAllocated(log, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (log_.IsDefault()) {
    log_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.DebugInfo.log)
}

// -------------------------------------------------------------------

// DistilledPageProto_PaginationInfo

// optional string next_page = 1;
inline bool DistilledPageProto_PaginationInfo::_internal_has_next_page() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DistilledPageProto_PaginationInfo::has_next_page() const {
  return _internal_has_next_page();
}
inline void DistilledPageProto_PaginationInfo::clear_next_page() {
  next_page_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DistilledPageProto_PaginationInfo::next_page() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
  return _internal_next_page();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistilledPageProto_PaginationInfo::set_next_page(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 next_page_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
}
inline std::string* DistilledPageProto_PaginationInfo::mutable_next_page() {
  std::string* _s = _internal_mutable_next_page();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
  return _s;
}
inline const std::string& DistilledPageProto_PaginationInfo::_internal_next_page() const {
  return next_page_.Get();
}
inline void DistilledPageProto_PaginationInfo::_internal_set_next_page(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  next_page_.Set(value, GetArenaForAllocation());
}
inline std::string* DistilledPageProto_PaginationInfo::_internal_mutable_next_page() {
  _has_bits_[0] |= 0x00000001u;
  return next_page_.Mutable(GetArenaForAllocation());
}
inline std::string* DistilledPageProto_PaginationInfo::release_next_page() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
  if (!_internal_has_next_page()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = next_page_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_.IsDefault()) {
    next_page_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DistilledPageProto_PaginationInfo::set_allocated_next_page(std::string* next_page) {
  if (next_page != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  next_page_.SetAllocated(next_page, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_.IsDefault()) {
    next_page_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
}

// optional string prev_page = 2;
inline bool DistilledPageProto_PaginationInfo::_internal_has_prev_page() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DistilledPageProto_PaginationInfo::has_prev_page() const {
  return _internal_has_prev_page();
}
inline void DistilledPageProto_PaginationInfo::clear_prev_page() {
  prev_page_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DistilledPageProto_PaginationInfo::prev_page() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
  return _internal_prev_page();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistilledPageProto_PaginationInfo::set_prev_page(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 prev_page_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
}
inline std::string* DistilledPageProto_PaginationInfo::mutable_prev_page() {
  std::string* _s = _internal_mutable_prev_page();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
  return _s;
}
inline const std::string& DistilledPageProto_PaginationInfo::_internal_prev_page() const {
  return prev_page_.Get();
}
inline void DistilledPageProto_PaginationInfo::_internal_set_prev_page(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  prev_page_.Set(value, GetArenaForAllocation());
}
inline std::string* DistilledPageProto_PaginationInfo::_internal_mutable_prev_page() {
  _has_bits_[0] |= 0x00000002u;
  return prev_page_.Mutable(GetArenaForAllocation());
}
inline std::string* DistilledPageProto_PaginationInfo::release_prev_page() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
  if (!_internal_has_prev_page()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = prev_page_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prev_page_.IsDefault()) {
    prev_page_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DistilledPageProto_PaginationInfo::set_allocated_prev_page(std::string* prev_page) {
  if (prev_page != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  prev_page_.SetAllocated(prev_page, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prev_page_.IsDefault()) {
    prev_page_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
}

// optional string canonical_page = 3;
inline bool DistilledPageProto_PaginationInfo::_internal_has_canonical_page() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DistilledPageProto_PaginationInfo::has_canonical_page() const {
  return _internal_has_canonical_page();
}
inline void DistilledPageProto_PaginationInfo::clear_canonical_page() {
  canonical_page_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DistilledPageProto_PaginationInfo::canonical_page() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
  return _internal_canonical_page();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistilledPageProto_PaginationInfo::set_canonical_page(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 canonical_page_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
}
inline std::string* DistilledPageProto_PaginationInfo::mutable_canonical_page() {
  std::string* _s = _internal_mutable_canonical_page();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
  return _s;
}
inline const std::string& DistilledPageProto_PaginationInfo::_internal_canonical_page() const {
  return canonical_page_.Get();
}
inline void DistilledPageProto_PaginationInfo::_internal_set_canonical_page(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  canonical_page_.Set(value, GetArenaForAllocation());
}
inline std::string* DistilledPageProto_PaginationInfo::_internal_mutable_canonical_page() {
  _has_bits_[0] |= 0x00000004u;
  return canonical_page_.Mutable(GetArenaForAllocation());
}
inline std::string* DistilledPageProto_PaginationInfo::release_canonical_page() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
  if (!_internal_has_canonical_page()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = canonical_page_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (canonical_page_.IsDefault()) {
    canonical_page_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DistilledPageProto_PaginationInfo::set_allocated_canonical_page(std::string* canonical_page) {
  if (canonical_page != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  canonical_page_.SetAllocated(canonical_page, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (canonical_page_.IsDefault()) {
    canonical_page_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
}

// -------------------------------------------------------------------

// DistilledPageProto_TimingInfo

// optional string name = 1;
inline bool DistilledPageProto_TimingInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DistilledPageProto_TimingInfo::has_name() const {
  return _internal_has_name();
}
inline void DistilledPageProto_TimingInfo::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DistilledPageProto_TimingInfo::name() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.TimingInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistilledPageProto_TimingInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.TimingInfo.name)
}
inline std::string* DistilledPageProto_TimingInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.TimingInfo.name)
  return _s;
}
inline const std::string& DistilledPageProto_TimingInfo::_internal_name() const {
  return name_.Get();
}
inline void DistilledPageProto_TimingInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* DistilledPageProto_TimingInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* DistilledPageProto_TimingInfo::release_name() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.TimingInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DistilledPageProto_TimingInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.TimingInfo.name)
}

// optional double time = 2;
inline bool DistilledPageProto_TimingInfo::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DistilledPageProto_TimingInfo::has_time() const {
  return _internal_has_time();
}
inline void DistilledPageProto_TimingInfo::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double DistilledPageProto_TimingInfo::_internal_time() const {
  return time_;
}
inline double DistilledPageProto_TimingInfo::time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.TimingInfo.time)
  return _internal_time();
}
inline void DistilledPageProto_TimingInfo::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000002u;
  time_ = value;
}
inline void DistilledPageProto_TimingInfo::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.TimingInfo.time)
}

// -------------------------------------------------------------------

// DistilledPageProto

// required string url = 1;
inline bool DistilledPageProto::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DistilledPageProto::has_url() const {
  return _internal_has_url();
}
inline void DistilledPageProto::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DistilledPageProto::url() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistilledPageProto::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.url)
}
inline std::string* DistilledPageProto::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.url)
  return _s;
}
inline const std::string& DistilledPageProto::_internal_url() const {
  return url_.Get();
}
inline void DistilledPageProto::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* DistilledPageProto::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* DistilledPageProto::release_url() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DistilledPageProto::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.url)
}

// required string html = 3;
inline bool DistilledPageProto::_internal_has_html() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DistilledPageProto::has_html() const {
  return _internal_has_html();
}
inline void DistilledPageProto::clear_html() {
  html_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DistilledPageProto::html() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.html)
  return _internal_html();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistilledPageProto::set_html(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 html_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.html)
}
inline std::string* DistilledPageProto::mutable_html() {
  std::string* _s = _internal_mutable_html();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.html)
  return _s;
}
inline const std::string& DistilledPageProto::_internal_html() const {
  return html_.Get();
}
inline void DistilledPageProto::_internal_set_html(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  html_.Set(value, GetArenaForAllocation());
}
inline std::string* DistilledPageProto::_internal_mutable_html() {
  _has_bits_[0] |= 0x00000002u;
  return html_.Mutable(GetArenaForAllocation());
}
inline std::string* DistilledPageProto::release_html() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.html)
  if (!_internal_has_html()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = html_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (html_.IsDefault()) {
    html_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DistilledPageProto::set_allocated_html(std::string* html) {
  if (html != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  html_.SetAllocated(html, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (html_.IsDefault()) {
    html_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.html)
}

// repeated .dom_distiller.DistilledPageProto.Image image = 4;
inline int DistilledPageProto::_internal_image_size() const {
  return image_.size();
}
inline int DistilledPageProto::image_size() const {
  return _internal_image_size();
}
inline void DistilledPageProto::clear_image() {
  image_.Clear();
}
inline ::dom_distiller::DistilledPageProto_Image* DistilledPageProto::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.image)
  return image_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto_Image >*
DistilledPageProto::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.DistilledPageProto.image)
  return &image_;
}
inline const ::dom_distiller::DistilledPageProto_Image& DistilledPageProto::_internal_image(int index) const {
  return image_.Get(index);
}
inline const ::dom_distiller::DistilledPageProto_Image& DistilledPageProto::image(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.image)
  return _internal_image(index);
}
inline ::dom_distiller::DistilledPageProto_Image* DistilledPageProto::_internal_add_image() {
  return image_.Add();
}
inline ::dom_distiller::DistilledPageProto_Image* DistilledPageProto::add_image() {
  ::dom_distiller::DistilledPageProto_Image* _add = _internal_add_image();
  // @@protoc_insertion_point(field_add:dom_distiller.DistilledPageProto.image)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto_Image >&
DistilledPageProto::image() const {
  // @@protoc_insertion_point(field_list:dom_distiller.DistilledPageProto.image)
  return image_;
}

// optional string title = 5;
inline bool DistilledPageProto::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DistilledPageProto::has_title() const {
  return _internal_has_title();
}
inline void DistilledPageProto::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DistilledPageProto::title() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistilledPageProto::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.title)
}
inline std::string* DistilledPageProto::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.title)
  return _s;
}
inline const std::string& DistilledPageProto::_internal_title() const {
  return title_.Get();
}
inline void DistilledPageProto::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* DistilledPageProto::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000004u;
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* DistilledPageProto::release_title() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DistilledPageProto::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.title)
}

// optional .dom_distiller.DistilledPageProto.DebugInfo debug_info = 6;
inline bool DistilledPageProto::_internal_has_debug_info() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || debug_info_ != nullptr);
  return value;
}
inline bool DistilledPageProto::has_debug_info() const {
  return _internal_has_debug_info();
}
inline void DistilledPageProto::clear_debug_info() {
  if (debug_info_ != nullptr) debug_info_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::dom_distiller::DistilledPageProto_DebugInfo& DistilledPageProto::_internal_debug_info() const {
  const ::dom_distiller::DistilledPageProto_DebugInfo* p = debug_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::dom_distiller::DistilledPageProto_DebugInfo&>(
      ::dom_distiller::_DistilledPageProto_DebugInfo_default_instance_);
}
inline const ::dom_distiller::DistilledPageProto_DebugInfo& DistilledPageProto::debug_info() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.debug_info)
  return _internal_debug_info();
}
inline void DistilledPageProto::unsafe_arena_set_allocated_debug_info(
    ::dom_distiller::DistilledPageProto_DebugInfo* debug_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debug_info_);
  }
  debug_info_ = debug_info;
  if (debug_info) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dom_distiller.DistilledPageProto.debug_info)
}
inline ::dom_distiller::DistilledPageProto_DebugInfo* DistilledPageProto::release_debug_info() {
  _has_bits_[0] &= ~0x00000010u;
  ::dom_distiller::DistilledPageProto_DebugInfo* temp = debug_info_;
  debug_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dom_distiller::DistilledPageProto_DebugInfo* DistilledPageProto::unsafe_arena_release_debug_info() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.debug_info)
  _has_bits_[0] &= ~0x00000010u;
  ::dom_distiller::DistilledPageProto_DebugInfo* temp = debug_info_;
  debug_info_ = nullptr;
  return temp;
}
inline ::dom_distiller::DistilledPageProto_DebugInfo* DistilledPageProto::_internal_mutable_debug_info() {
  _has_bits_[0] |= 0x00000010u;
  if (debug_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::dom_distiller::DistilledPageProto_DebugInfo>(GetArenaForAllocation());
    debug_info_ = p;
  }
  return debug_info_;
}
inline ::dom_distiller::DistilledPageProto_DebugInfo* DistilledPageProto::mutable_debug_info() {
  ::dom_distiller::DistilledPageProto_DebugInfo* _msg = _internal_mutable_debug_info();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.debug_info)
  return _msg;
}
inline void DistilledPageProto::set_allocated_debug_info(::dom_distiller::DistilledPageProto_DebugInfo* debug_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete debug_info_;
  }
  if (debug_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(debug_info);
    if (message_arena != submessage_arena) {
      debug_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  debug_info_ = debug_info;
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.debug_info)
}

// optional string text_direction = 7;
inline bool DistilledPageProto::_internal_has_text_direction() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DistilledPageProto::has_text_direction() const {
  return _internal_has_text_direction();
}
inline void DistilledPageProto::clear_text_direction() {
  text_direction_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DistilledPageProto::text_direction() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.text_direction)
  return _internal_text_direction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistilledPageProto::set_text_direction(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 text_direction_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.text_direction)
}
inline std::string* DistilledPageProto::mutable_text_direction() {
  std::string* _s = _internal_mutable_text_direction();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.text_direction)
  return _s;
}
inline const std::string& DistilledPageProto::_internal_text_direction() const {
  return text_direction_.Get();
}
inline void DistilledPageProto::_internal_set_text_direction(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  text_direction_.Set(value, GetArenaForAllocation());
}
inline std::string* DistilledPageProto::_internal_mutable_text_direction() {
  _has_bits_[0] |= 0x00000008u;
  return text_direction_.Mutable(GetArenaForAllocation());
}
inline std::string* DistilledPageProto::release_text_direction() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.text_direction)
  if (!_internal_has_text_direction()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = text_direction_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_direction_.IsDefault()) {
    text_direction_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DistilledPageProto::set_allocated_text_direction(std::string* text_direction) {
  if (text_direction != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  text_direction_.SetAllocated(text_direction, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_direction_.IsDefault()) {
    text_direction_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.text_direction)
}

// optional .dom_distiller.DistilledPageProto.PaginationInfo pagination_info = 8;
inline bool DistilledPageProto::_internal_has_pagination_info() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || pagination_info_ != nullptr);
  return value;
}
inline bool DistilledPageProto::has_pagination_info() const {
  return _internal_has_pagination_info();
}
inline void DistilledPageProto::clear_pagination_info() {
  if (pagination_info_ != nullptr) pagination_info_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::dom_distiller::DistilledPageProto_PaginationInfo& DistilledPageProto::_internal_pagination_info() const {
  const ::dom_distiller::DistilledPageProto_PaginationInfo* p = pagination_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::dom_distiller::DistilledPageProto_PaginationInfo&>(
      ::dom_distiller::_DistilledPageProto_PaginationInfo_default_instance_);
}
inline const ::dom_distiller::DistilledPageProto_PaginationInfo& DistilledPageProto::pagination_info() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.pagination_info)
  return _internal_pagination_info();
}
inline void DistilledPageProto::unsafe_arena_set_allocated_pagination_info(
    ::dom_distiller::DistilledPageProto_PaginationInfo* pagination_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_info_);
  }
  pagination_info_ = pagination_info;
  if (pagination_info) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dom_distiller.DistilledPageProto.pagination_info)
}
inline ::dom_distiller::DistilledPageProto_PaginationInfo* DistilledPageProto::release_pagination_info() {
  _has_bits_[0] &= ~0x00000020u;
  ::dom_distiller::DistilledPageProto_PaginationInfo* temp = pagination_info_;
  pagination_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dom_distiller::DistilledPageProto_PaginationInfo* DistilledPageProto::unsafe_arena_release_pagination_info() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.pagination_info)
  _has_bits_[0] &= ~0x00000020u;
  ::dom_distiller::DistilledPageProto_PaginationInfo* temp = pagination_info_;
  pagination_info_ = nullptr;
  return temp;
}
inline ::dom_distiller::DistilledPageProto_PaginationInfo* DistilledPageProto::_internal_mutable_pagination_info() {
  _has_bits_[0] |= 0x00000020u;
  if (pagination_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::dom_distiller::DistilledPageProto_PaginationInfo>(GetArenaForAllocation());
    pagination_info_ = p;
  }
  return pagination_info_;
}
inline ::dom_distiller::DistilledPageProto_PaginationInfo* DistilledPageProto::mutable_pagination_info() {
  ::dom_distiller::DistilledPageProto_PaginationInfo* _msg = _internal_mutable_pagination_info();
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.pagination_info)
  return _msg;
}
inline void DistilledPageProto::set_allocated_pagination_info(::dom_distiller::DistilledPageProto_PaginationInfo* pagination_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pagination_info_;
  }
  if (pagination_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pagination_info);
    if (message_arena != submessage_arena) {
      pagination_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  pagination_info_ = pagination_info;
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.pagination_info)
}

// repeated .dom_distiller.DistilledPageProto.TimingInfo timing_info = 9;
inline int DistilledPageProto::_internal_timing_info_size() const {
  return timing_info_.size();
}
inline int DistilledPageProto::timing_info_size() const {
  return _internal_timing_info_size();
}
inline void DistilledPageProto::clear_timing_info() {
  timing_info_.Clear();
}
inline ::dom_distiller::DistilledPageProto_TimingInfo* DistilledPageProto::mutable_timing_info(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.timing_info)
  return timing_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto_TimingInfo >*
DistilledPageProto::mutable_timing_info() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.DistilledPageProto.timing_info)
  return &timing_info_;
}
inline const ::dom_distiller::DistilledPageProto_TimingInfo& DistilledPageProto::_internal_timing_info(int index) const {
  return timing_info_.Get(index);
}
inline const ::dom_distiller::DistilledPageProto_TimingInfo& DistilledPageProto::timing_info(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.timing_info)
  return _internal_timing_info(index);
}
inline ::dom_distiller::DistilledPageProto_TimingInfo* DistilledPageProto::_internal_add_timing_info() {
  return timing_info_.Add();
}
inline ::dom_distiller::DistilledPageProto_TimingInfo* DistilledPageProto::add_timing_info() {
  ::dom_distiller::DistilledPageProto_TimingInfo* _add = _internal_add_timing_info();
  // @@protoc_insertion_point(field_add:dom_distiller.DistilledPageProto.timing_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto_TimingInfo >&
DistilledPageProto::timing_info() const {
  // @@protoc_insertion_point(field_list:dom_distiller.DistilledPageProto.timing_info)
  return timing_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dom_distiller

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_distilled_5fpage_2eproto
