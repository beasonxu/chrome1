// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adaboost.proto

#include "adaboost.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dom_distiller {
PROTOBUF_CONSTEXPR AdaBoostProto::AdaBoostProto(
    ::_pbi::ConstantInitialized)
  : stump_()
  , num_stumps_(0)
  , num_features_(0){}
struct AdaBoostProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdaBoostProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdaBoostProtoDefaultTypeInternal() {}
  union {
    AdaBoostProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdaBoostProtoDefaultTypeInternal _AdaBoostProto_default_instance_;
PROTOBUF_CONSTEXPR StumpProto::StumpProto(
    ::_pbi::ConstantInitialized)
  : split_(0)
  , weight_(0)
  , feature_number_(0){}
struct StumpProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StumpProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StumpProtoDefaultTypeInternal() {}
  union {
    StumpProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StumpProtoDefaultTypeInternal _StumpProto_default_instance_;
}  // namespace dom_distiller
namespace dom_distiller {

// ===================================================================

class AdaBoostProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AdaBoostProto>()._has_bits_);
  static void set_has_num_stumps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_features(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AdaBoostProto::AdaBoostProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  stump_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:dom_distiller.AdaBoostProto)
}
AdaBoostProto::AdaBoostProto(const AdaBoostProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      stump_(from.stump_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&num_stumps_, &from.num_stumps_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_features_) -
    reinterpret_cast<char*>(&num_stumps_)) + sizeof(num_features_));
  // @@protoc_insertion_point(copy_constructor:dom_distiller.AdaBoostProto)
}

inline void AdaBoostProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_stumps_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_features_) -
    reinterpret_cast<char*>(&num_stumps_)) + sizeof(num_features_));
}

AdaBoostProto::~AdaBoostProto() {
  // @@protoc_insertion_point(destructor:dom_distiller.AdaBoostProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdaBoostProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AdaBoostProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AdaBoostProto::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.AdaBoostProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stump_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&num_stumps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_features_) -
        reinterpret_cast<char*>(&num_stumps_)) + sizeof(num_features_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AdaBoostProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 num_stumps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_stumps(&has_bits);
          num_stumps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 num_features = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_features(&has_bits);
          num_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dom_distiller.StumpProto stump = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stump(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdaBoostProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dom_distiller.AdaBoostProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 num_stumps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_stumps(), target);
  }

  // required int32 num_features = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_features(), target);
  }

  // repeated .dom_distiller.StumpProto stump = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stump_size()); i < n; i++) {
    const auto& repfield = this->_internal_stump(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dom_distiller.AdaBoostProto)
  return target;
}

size_t AdaBoostProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dom_distiller.AdaBoostProto)
  size_t total_size = 0;

  if (_internal_has_num_stumps()) {
    // required int32 num_stumps = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_stumps());
  }

  if (_internal_has_num_features()) {
    // required int32 num_features = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_features());
  }

  return total_size;
}
size_t AdaBoostProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.AdaBoostProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 num_stumps = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_stumps());

    // required int32 num_features = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_features());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dom_distiller.StumpProto stump = 3;
  total_size += 1UL * this->_internal_stump_size();
  for (const auto& msg : this->stump_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdaBoostProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AdaBoostProto*>(
      &from));
}

void AdaBoostProto::MergeFrom(const AdaBoostProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.AdaBoostProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stump_.MergeFrom(from.stump_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      num_stumps_ = from.num_stumps_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_features_ = from.num_features_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AdaBoostProto::CopyFrom(const AdaBoostProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.AdaBoostProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdaBoostProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(stump_))
    return false;
  return true;
}

void AdaBoostProto::InternalSwap(AdaBoostProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stump_.InternalSwap(&other->stump_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdaBoostProto, num_features_)
      + sizeof(AdaBoostProto::num_features_)
      - PROTOBUF_FIELD_OFFSET(AdaBoostProto, num_stumps_)>(
          reinterpret_cast<char*>(&num_stumps_),
          reinterpret_cast<char*>(&other->num_stumps_));
}

std::string AdaBoostProto::GetTypeName() const {
  return "dom_distiller.AdaBoostProto";
}


// ===================================================================

class StumpProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StumpProto>()._has_bits_);
  static void set_has_feature_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_split(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

StumpProto::StumpProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:dom_distiller.StumpProto)
}
StumpProto::StumpProto(const StumpProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&split_, &from.split_,
    static_cast<size_t>(reinterpret_cast<char*>(&feature_number_) -
    reinterpret_cast<char*>(&split_)) + sizeof(feature_number_));
  // @@protoc_insertion_point(copy_constructor:dom_distiller.StumpProto)
}

inline void StumpProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&split_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&feature_number_) -
    reinterpret_cast<char*>(&split_)) + sizeof(feature_number_));
}

StumpProto::~StumpProto() {
  // @@protoc_insertion_point(destructor:dom_distiller.StumpProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StumpProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StumpProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StumpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.StumpProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&split_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&feature_number_) -
        reinterpret_cast<char*>(&split_)) + sizeof(feature_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StumpProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 feature_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_feature_number(&has_bits);
          feature_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double split = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_split(&has_bits);
          split_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StumpProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dom_distiller.StumpProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 feature_number = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_feature_number(), target);
  }

  // required double split = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_split(), target);
  }

  // required double weight = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dom_distiller.StumpProto)
  return target;
}

size_t StumpProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dom_distiller.StumpProto)
  size_t total_size = 0;

  if (_internal_has_split()) {
    // required double split = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_weight()) {
    // required double weight = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_feature_number()) {
    // required int32 feature_number = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_feature_number());
  }

  return total_size;
}
size_t StumpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.StumpProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double split = 2;
    total_size += 1 + 8;

    // required double weight = 3;
    total_size += 1 + 8;

    // required int32 feature_number = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_feature_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StumpProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StumpProto*>(
      &from));
}

void StumpProto::MergeFrom(const StumpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.StumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      split_ = from.split_;
    }
    if (cached_has_bits & 0x00000002u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      feature_number_ = from.feature_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StumpProto::CopyFrom(const StumpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.StumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StumpProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void StumpProto::InternalSwap(StumpProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StumpProto, feature_number_)
      + sizeof(StumpProto::feature_number_)
      - PROTOBUF_FIELD_OFFSET(StumpProto, split_)>(
          reinterpret_cast<char*>(&split_),
          reinterpret_cast<char*>(&other->split_));
}

std::string StumpProto::GetTypeName() const {
  return "dom_distiller.StumpProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dom_distiller
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dom_distiller::AdaBoostProto*
Arena::CreateMaybeMessage< ::dom_distiller::AdaBoostProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dom_distiller::AdaBoostProto >(arena);
}
template<> PROTOBUF_NOINLINE ::dom_distiller::StumpProto*
Arena::CreateMaybeMessage< ::dom_distiller::StumpProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dom_distiller::StumpProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
