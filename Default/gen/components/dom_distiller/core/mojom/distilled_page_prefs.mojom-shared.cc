// components/dom_distiller/core/mojom/distilled_page_prefs.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "components/dom_distiller/core/mojom/distilled_page_prefs.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/dom_distiller/core/mojom/distilled_page_prefs.mojom-params-data.h"
namespace dom_distiller {
namespace mojom {

static NOINLINE const char* ThemeToStringHelper(Theme value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case Theme::kLight:
      return "kLight";
    case Theme::kDark:
      return "kDark";
    case Theme::kSepia:
      return "kSepia";
    default:
      return nullptr;
  }
}

std::string ThemeToString(Theme value) {
  const char *str = ThemeToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown Theme value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, Theme value) {
  return os << ThemeToString(value);
}

static NOINLINE const char* FontFamilyToStringHelper(FontFamily value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case FontFamily::kSansSerif:
      return "kSansSerif";
    case FontFamily::kSerif:
      return "kSerif";
    case FontFamily::kMonospace:
      return "kMonospace";
    default:
      return nullptr;
  }
}

std::string FontFamilyToString(FontFamily value) {
  const char *str = FontFamilyToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown FontFamily value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, FontFamily value) {
  return os << FontFamilyToString(value);
}

namespace internal {

}  // namespace internal
}  // namespace mojom
}  // namespace dom_distiller

namespace perfetto {

// static
void TraceFormatTraits<::dom_distiller::mojom::Theme>::WriteIntoTrace(
   perfetto::TracedValue context, ::dom_distiller::mojom::Theme value) {
  return std::move(context).WriteString(::dom_distiller::mojom::ThemeToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::dom_distiller::mojom::FontFamily>::WriteIntoTrace(
   perfetto::TracedValue context, ::dom_distiller::mojom::FontFamily value) {
  return std::move(context).WriteString(::dom_distiller::mojom::FontFamilyToString(value));
}

} // namespace perfetto