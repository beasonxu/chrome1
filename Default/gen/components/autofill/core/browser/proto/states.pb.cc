// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: states.proto

#include "states.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace autofill {
PROTOBUF_CONSTEXPR StateEntry::StateEntry(
    ::_pbi::ConstantInitialized)
  : abbreviations_()
  , alternative_names_()
  , canonical_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct StateEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StateEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StateEntryDefaultTypeInternal() {}
  union {
    StateEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StateEntryDefaultTypeInternal _StateEntry_default_instance_;
PROTOBUF_CONSTEXPR StatesInCountry::StatesInCountry(
    ::_pbi::ConstantInitialized)
  : states_()
  , country_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct StatesInCountryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatesInCountryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatesInCountryDefaultTypeInternal() {}
  union {
    StatesInCountry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatesInCountryDefaultTypeInternal _StatesInCountry_default_instance_;
}  // namespace autofill
namespace autofill {

// ===================================================================

class StateEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<StateEntry>()._has_bits_);
  static void set_has_canonical_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StateEntry::StateEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  abbreviations_(arena),
  alternative_names_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill.StateEntry)
}
StateEntry::StateEntry(const StateEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      abbreviations_(from.abbreviations_),
      alternative_names_(from.alternative_names_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  canonical_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    canonical_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_canonical_name()) {
    canonical_name_.Set(from._internal_canonical_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:autofill.StateEntry)
}

inline void StateEntry::SharedCtor() {
canonical_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  canonical_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StateEntry::~StateEntry() {
  // @@protoc_insertion_point(destructor:autofill.StateEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StateEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  canonical_name_.Destroy();
}

void StateEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StateEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.StateEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  abbreviations_.Clear();
  alternative_names_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    canonical_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StateEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string canonical_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_canonical_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string abbreviations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_abbreviations();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string alternative_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_alternative_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StateEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill.StateEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string canonical_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_canonical_name(), target);
  }

  // repeated string abbreviations = 2;
  for (int i = 0, n = this->_internal_abbreviations_size(); i < n; i++) {
    const auto& s = this->_internal_abbreviations(i);
    target = stream->WriteString(2, s, target);
  }

  // repeated string alternative_names = 3;
  for (int i = 0, n = this->_internal_alternative_names_size(); i < n; i++) {
    const auto& s = this->_internal_alternative_names(i);
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill.StateEntry)
  return target;
}

size_t StateEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.StateEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string abbreviations = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(abbreviations_.size());
  for (int i = 0, n = abbreviations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      abbreviations_.Get(i));
  }

  // repeated string alternative_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(alternative_names_.size());
  for (int i = 0, n = alternative_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      alternative_names_.Get(i));
  }

  // optional string canonical_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_canonical_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StateEntry*>(
      &from));
}

void StateEntry::MergeFrom(const StateEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.StateEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  abbreviations_.MergeFrom(from.abbreviations_);
  alternative_names_.MergeFrom(from.alternative_names_);
  if (from._internal_has_canonical_name()) {
    _internal_set_canonical_name(from._internal_canonical_name());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StateEntry::CopyFrom(const StateEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.StateEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateEntry::IsInitialized() const {
  return true;
}

void StateEntry::InternalSwap(StateEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  abbreviations_.InternalSwap(&other->abbreviations_);
  alternative_names_.InternalSwap(&other->alternative_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &canonical_name_, lhs_arena,
      &other->canonical_name_, rhs_arena
  );
}

std::string StateEntry::GetTypeName() const {
  return "autofill.StateEntry";
}


// ===================================================================

class StatesInCountry::_Internal {
 public:
  using HasBits = decltype(std::declval<StatesInCountry>()._has_bits_);
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StatesInCountry::StatesInCountry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  states_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill.StatesInCountry)
}
StatesInCountry::StatesInCountry(const StatesInCountry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      states_(from.states_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_code()) {
    country_code_.Set(from._internal_country_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:autofill.StatesInCountry)
}

inline void StatesInCountry::SharedCtor() {
country_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  country_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StatesInCountry::~StatesInCountry() {
  // @@protoc_insertion_point(destructor:autofill.StatesInCountry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatesInCountry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  country_code_.Destroy();
}

void StatesInCountry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatesInCountry::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.StatesInCountry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    country_code_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StatesInCountry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string country_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .autofill.StateEntry states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatesInCountry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill.StatesInCountry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_country_code(), target);
  }

  // repeated .autofill.StateEntry states = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill.StatesInCountry)
  return target;
}

size_t StatesInCountry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.StatesInCountry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autofill.StateEntry states = 2;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string country_code = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatesInCountry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StatesInCountry*>(
      &from));
}

void StatesInCountry::MergeFrom(const StatesInCountry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.StatesInCountry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
  if (from._internal_has_country_code()) {
    _internal_set_country_code(from._internal_country_code());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StatesInCountry::CopyFrom(const StatesInCountry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.StatesInCountry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatesInCountry::IsInitialized() const {
  return true;
}

void StatesInCountry::InternalSwap(StatesInCountry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  states_.InternalSwap(&other->states_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &country_code_, lhs_arena,
      &other->country_code_, rhs_arena
  );
}

std::string StatesInCountry::GetTypeName() const {
  return "autofill.StatesInCountry";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace autofill
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autofill::StateEntry*
Arena::CreateMaybeMessage< ::autofill::StateEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill::StateEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::StatesInCountry*
Arena::CreateMaybeMessage< ::autofill::StatesInCountry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill::StatesInCountry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
