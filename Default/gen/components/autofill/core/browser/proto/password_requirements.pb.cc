// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: password_requirements.proto

#include "password_requirements.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace autofill {
PROTOBUF_CONSTEXPR PasswordRequirementsSpec_CharacterClass::PasswordRequirementsSpec_CharacterClass(
    ::_pbi::ConstantInitialized)
  : character_set_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , min_(0u)
  , max_(0u){}
struct PasswordRequirementsSpec_CharacterClassDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PasswordRequirementsSpec_CharacterClassDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PasswordRequirementsSpec_CharacterClassDefaultTypeInternal() {}
  union {
    PasswordRequirementsSpec_CharacterClass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PasswordRequirementsSpec_CharacterClassDefaultTypeInternal _PasswordRequirementsSpec_CharacterClass_default_instance_;
PROTOBUF_CONSTEXPR PasswordRequirementsSpec::PasswordRequirementsSpec(
    ::_pbi::ConstantInitialized)
  : lower_case_(nullptr)
  , upper_case_(nullptr)
  , alphabetic_(nullptr)
  , numeric_(nullptr)
  , symbols_(nullptr)
  , priority_(0u)
  , spec_version_(0u)
  , min_length_(0u)
  , max_length_(0u){}
struct PasswordRequirementsSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PasswordRequirementsSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PasswordRequirementsSpecDefaultTypeInternal() {}
  union {
    PasswordRequirementsSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PasswordRequirementsSpecDefaultTypeInternal _PasswordRequirementsSpec_default_instance_;
PROTOBUF_CONSTEXPR DomainSuggestions::DomainSuggestions(
    ::_pbi::ConstantInitialized)
  : password_requirements_(nullptr){}
struct DomainSuggestionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DomainSuggestionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DomainSuggestionsDefaultTypeInternal() {}
  union {
    DomainSuggestions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DomainSuggestionsDefaultTypeInternal _DomainSuggestions_default_instance_;
}  // namespace autofill
namespace autofill {

// ===================================================================

class PasswordRequirementsSpec_CharacterClass::_Internal {
 public:
  using HasBits = decltype(std::declval<PasswordRequirementsSpec_CharacterClass>()._has_bits_);
  static void set_has_character_set(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PasswordRequirementsSpec_CharacterClass::PasswordRequirementsSpec_CharacterClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill.PasswordRequirementsSpec.CharacterClass)
}
PasswordRequirementsSpec_CharacterClass::PasswordRequirementsSpec_CharacterClass(const PasswordRequirementsSpec_CharacterClass& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  character_set_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    character_set_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_character_set()) {
    character_set_.Set(from._internal_character_set(), 
      GetArenaForAllocation());
  }
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:autofill.PasswordRequirementsSpec.CharacterClass)
}

inline void PasswordRequirementsSpec_CharacterClass::SharedCtor() {
character_set_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  character_set_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

PasswordRequirementsSpec_CharacterClass::~PasswordRequirementsSpec_CharacterClass() {
  // @@protoc_insertion_point(destructor:autofill.PasswordRequirementsSpec.CharacterClass)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PasswordRequirementsSpec_CharacterClass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  character_set_.Destroy();
}

void PasswordRequirementsSpec_CharacterClass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PasswordRequirementsSpec_CharacterClass::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.PasswordRequirementsSpec.CharacterClass)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    character_set_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&min_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PasswordRequirementsSpec_CharacterClass::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string character_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_character_set();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_min(&has_bits);
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max(&has_bits);
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PasswordRequirementsSpec_CharacterClass::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill.PasswordRequirementsSpec.CharacterClass)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string character_set = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_character_set(), target);
  }

  // optional uint32 min = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_min(), target);
  }

  // optional uint32 max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill.PasswordRequirementsSpec.CharacterClass)
  return target;
}

size_t PasswordRequirementsSpec_CharacterClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.PasswordRequirementsSpec.CharacterClass)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string character_set = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_character_set());
    }

    // optional uint32 min = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min());
    }

    // optional uint32 max = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PasswordRequirementsSpec_CharacterClass::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PasswordRequirementsSpec_CharacterClass*>(
      &from));
}

void PasswordRequirementsSpec_CharacterClass::MergeFrom(const PasswordRequirementsSpec_CharacterClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.PasswordRequirementsSpec.CharacterClass)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_character_set(from._internal_character_set());
    }
    if (cached_has_bits & 0x00000002u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PasswordRequirementsSpec_CharacterClass::CopyFrom(const PasswordRequirementsSpec_CharacterClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.PasswordRequirementsSpec.CharacterClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasswordRequirementsSpec_CharacterClass::IsInitialized() const {
  return true;
}

void PasswordRequirementsSpec_CharacterClass::InternalSwap(PasswordRequirementsSpec_CharacterClass* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &character_set_, lhs_arena,
      &other->character_set_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PasswordRequirementsSpec_CharacterClass, max_)
      + sizeof(PasswordRequirementsSpec_CharacterClass::max_)
      - PROTOBUF_FIELD_OFFSET(PasswordRequirementsSpec_CharacterClass, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

std::string PasswordRequirementsSpec_CharacterClass::GetTypeName() const {
  return "autofill.PasswordRequirementsSpec.CharacterClass";
}


// ===================================================================

class PasswordRequirementsSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<PasswordRequirementsSpec>()._has_bits_);
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_spec_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_min_length(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_length(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::autofill::PasswordRequirementsSpec_CharacterClass& lower_case(const PasswordRequirementsSpec* msg);
  static void set_has_lower_case(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::autofill::PasswordRequirementsSpec_CharacterClass& upper_case(const PasswordRequirementsSpec* msg);
  static void set_has_upper_case(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::autofill::PasswordRequirementsSpec_CharacterClass& alphabetic(const PasswordRequirementsSpec* msg);
  static void set_has_alphabetic(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::autofill::PasswordRequirementsSpec_CharacterClass& numeric(const PasswordRequirementsSpec* msg);
  static void set_has_numeric(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::autofill::PasswordRequirementsSpec_CharacterClass& symbols(const PasswordRequirementsSpec* msg);
  static void set_has_symbols(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::autofill::PasswordRequirementsSpec_CharacterClass&
PasswordRequirementsSpec::_Internal::lower_case(const PasswordRequirementsSpec* msg) {
  return *msg->lower_case_;
}
const ::autofill::PasswordRequirementsSpec_CharacterClass&
PasswordRequirementsSpec::_Internal::upper_case(const PasswordRequirementsSpec* msg) {
  return *msg->upper_case_;
}
const ::autofill::PasswordRequirementsSpec_CharacterClass&
PasswordRequirementsSpec::_Internal::alphabetic(const PasswordRequirementsSpec* msg) {
  return *msg->alphabetic_;
}
const ::autofill::PasswordRequirementsSpec_CharacterClass&
PasswordRequirementsSpec::_Internal::numeric(const PasswordRequirementsSpec* msg) {
  return *msg->numeric_;
}
const ::autofill::PasswordRequirementsSpec_CharacterClass&
PasswordRequirementsSpec::_Internal::symbols(const PasswordRequirementsSpec* msg) {
  return *msg->symbols_;
}
PasswordRequirementsSpec::PasswordRequirementsSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill.PasswordRequirementsSpec)
}
PasswordRequirementsSpec::PasswordRequirementsSpec(const PasswordRequirementsSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_lower_case()) {
    lower_case_ = new ::autofill::PasswordRequirementsSpec_CharacterClass(*from.lower_case_);
  } else {
    lower_case_ = nullptr;
  }
  if (from._internal_has_upper_case()) {
    upper_case_ = new ::autofill::PasswordRequirementsSpec_CharacterClass(*from.upper_case_);
  } else {
    upper_case_ = nullptr;
  }
  if (from._internal_has_alphabetic()) {
    alphabetic_ = new ::autofill::PasswordRequirementsSpec_CharacterClass(*from.alphabetic_);
  } else {
    alphabetic_ = nullptr;
  }
  if (from._internal_has_numeric()) {
    numeric_ = new ::autofill::PasswordRequirementsSpec_CharacterClass(*from.numeric_);
  } else {
    numeric_ = nullptr;
  }
  if (from._internal_has_symbols()) {
    symbols_ = new ::autofill::PasswordRequirementsSpec_CharacterClass(*from.symbols_);
  } else {
    symbols_ = nullptr;
  }
  ::memcpy(&priority_, &from.priority_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_length_) -
    reinterpret_cast<char*>(&priority_)) + sizeof(max_length_));
  // @@protoc_insertion_point(copy_constructor:autofill.PasswordRequirementsSpec)
}

inline void PasswordRequirementsSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lower_case_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_length_) -
    reinterpret_cast<char*>(&lower_case_)) + sizeof(max_length_));
}

PasswordRequirementsSpec::~PasswordRequirementsSpec() {
  // @@protoc_insertion_point(destructor:autofill.PasswordRequirementsSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PasswordRequirementsSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lower_case_;
  if (this != internal_default_instance()) delete upper_case_;
  if (this != internal_default_instance()) delete alphabetic_;
  if (this != internal_default_instance()) delete numeric_;
  if (this != internal_default_instance()) delete symbols_;
}

void PasswordRequirementsSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PasswordRequirementsSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.PasswordRequirementsSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lower_case_ != nullptr);
      lower_case_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(upper_case_ != nullptr);
      upper_case_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(alphabetic_ != nullptr);
      alphabetic_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(numeric_ != nullptr);
      numeric_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(symbols_ != nullptr);
      symbols_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&priority_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_length_) -
        reinterpret_cast<char*>(&priority_)) + sizeof(min_length_));
  }
  max_length_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PasswordRequirementsSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 spec_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_spec_version(&has_bits);
          spec_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 min_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_min_length(&has_bits);
          min_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_max_length(&has_bits);
          max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill.PasswordRequirementsSpec.CharacterClass lower_case = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_lower_case(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill.PasswordRequirementsSpec.CharacterClass upper_case = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_upper_case(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill.PasswordRequirementsSpec.CharacterClass alphabetic = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_alphabetic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill.PasswordRequirementsSpec.CharacterClass numeric = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_numeric(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill.PasswordRequirementsSpec.CharacterClass symbols = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_symbols(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PasswordRequirementsSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill.PasswordRequirementsSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 priority = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_priority(), target);
  }

  // optional uint32 spec_version = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_spec_version(), target);
  }

  // optional uint32 min_length = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_min_length(), target);
  }

  // optional uint32 max_length = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_length(), target);
  }

  // optional .autofill.PasswordRequirementsSpec.CharacterClass lower_case = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::lower_case(this),
        _Internal::lower_case(this).GetCachedSize(), target, stream);
  }

  // optional .autofill.PasswordRequirementsSpec.CharacterClass upper_case = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::upper_case(this),
        _Internal::upper_case(this).GetCachedSize(), target, stream);
  }

  // optional .autofill.PasswordRequirementsSpec.CharacterClass alphabetic = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::alphabetic(this),
        _Internal::alphabetic(this).GetCachedSize(), target, stream);
  }

  // optional .autofill.PasswordRequirementsSpec.CharacterClass numeric = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::numeric(this),
        _Internal::numeric(this).GetCachedSize(), target, stream);
  }

  // optional .autofill.PasswordRequirementsSpec.CharacterClass symbols = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::symbols(this),
        _Internal::symbols(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill.PasswordRequirementsSpec)
  return target;
}

size_t PasswordRequirementsSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.PasswordRequirementsSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .autofill.PasswordRequirementsSpec.CharacterClass lower_case = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lower_case_);
    }

    // optional .autofill.PasswordRequirementsSpec.CharacterClass upper_case = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *upper_case_);
    }

    // optional .autofill.PasswordRequirementsSpec.CharacterClass alphabetic = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *alphabetic_);
    }

    // optional .autofill.PasswordRequirementsSpec.CharacterClass numeric = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *numeric_);
    }

    // optional .autofill.PasswordRequirementsSpec.CharacterClass symbols = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *symbols_);
    }

    // optional uint32 priority = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_priority());
    }

    // optional uint32 spec_version = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_spec_version());
    }

    // optional uint32 min_length = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_length());
    }

  }
  // optional uint32 max_length = 5;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PasswordRequirementsSpec::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PasswordRequirementsSpec*>(
      &from));
}

void PasswordRequirementsSpec::MergeFrom(const PasswordRequirementsSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.PasswordRequirementsSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lower_case()->::autofill::PasswordRequirementsSpec_CharacterClass::MergeFrom(from._internal_lower_case());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_upper_case()->::autofill::PasswordRequirementsSpec_CharacterClass::MergeFrom(from._internal_upper_case());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_alphabetic()->::autofill::PasswordRequirementsSpec_CharacterClass::MergeFrom(from._internal_alphabetic());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_numeric()->::autofill::PasswordRequirementsSpec_CharacterClass::MergeFrom(from._internal_numeric());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_symbols()->::autofill::PasswordRequirementsSpec_CharacterClass::MergeFrom(from._internal_symbols());
    }
    if (cached_has_bits & 0x00000020u) {
      priority_ = from.priority_;
    }
    if (cached_has_bits & 0x00000040u) {
      spec_version_ = from.spec_version_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_length_ = from.min_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_max_length(from._internal_max_length());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PasswordRequirementsSpec::CopyFrom(const PasswordRequirementsSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.PasswordRequirementsSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasswordRequirementsSpec::IsInitialized() const {
  return true;
}

void PasswordRequirementsSpec::InternalSwap(PasswordRequirementsSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PasswordRequirementsSpec, max_length_)
      + sizeof(PasswordRequirementsSpec::max_length_)
      - PROTOBUF_FIELD_OFFSET(PasswordRequirementsSpec, lower_case_)>(
          reinterpret_cast<char*>(&lower_case_),
          reinterpret_cast<char*>(&other->lower_case_));
}

std::string PasswordRequirementsSpec::GetTypeName() const {
  return "autofill.PasswordRequirementsSpec";
}


// ===================================================================

class DomainSuggestions::_Internal {
 public:
  using HasBits = decltype(std::declval<DomainSuggestions>()._has_bits_);
  static const ::autofill::PasswordRequirementsSpec& password_requirements(const DomainSuggestions* msg);
  static void set_has_password_requirements(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill::PasswordRequirementsSpec&
DomainSuggestions::_Internal::password_requirements(const DomainSuggestions* msg) {
  return *msg->password_requirements_;
}
DomainSuggestions::DomainSuggestions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill.DomainSuggestions)
}
DomainSuggestions::DomainSuggestions(const DomainSuggestions& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_password_requirements()) {
    password_requirements_ = new ::autofill::PasswordRequirementsSpec(*from.password_requirements_);
  } else {
    password_requirements_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill.DomainSuggestions)
}

inline void DomainSuggestions::SharedCtor() {
password_requirements_ = nullptr;
}

DomainSuggestions::~DomainSuggestions() {
  // @@protoc_insertion_point(destructor:autofill.DomainSuggestions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DomainSuggestions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete password_requirements_;
}

void DomainSuggestions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DomainSuggestions::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.DomainSuggestions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(password_requirements_ != nullptr);
    password_requirements_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DomainSuggestions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill.PasswordRequirementsSpec password_requirements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_password_requirements(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DomainSuggestions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill.DomainSuggestions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill.PasswordRequirementsSpec password_requirements = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::password_requirements(this),
        _Internal::password_requirements(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill.DomainSuggestions)
  return target;
}

size_t DomainSuggestions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.DomainSuggestions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .autofill.PasswordRequirementsSpec password_requirements = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *password_requirements_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DomainSuggestions::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DomainSuggestions*>(
      &from));
}

void DomainSuggestions::MergeFrom(const DomainSuggestions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.DomainSuggestions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_password_requirements()) {
    _internal_mutable_password_requirements()->::autofill::PasswordRequirementsSpec::MergeFrom(from._internal_password_requirements());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DomainSuggestions::CopyFrom(const DomainSuggestions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.DomainSuggestions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomainSuggestions::IsInitialized() const {
  return true;
}

void DomainSuggestions::InternalSwap(DomainSuggestions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(password_requirements_, other->password_requirements_);
}

std::string DomainSuggestions::GetTypeName() const {
  return "autofill.DomainSuggestions";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace autofill
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autofill::PasswordRequirementsSpec_CharacterClass*
Arena::CreateMaybeMessage< ::autofill::PasswordRequirementsSpec_CharacterClass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill::PasswordRequirementsSpec_CharacterClass >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::PasswordRequirementsSpec*
Arena::CreateMaybeMessage< ::autofill::PasswordRequirementsSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill::PasswordRequirementsSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::DomainSuggestions*
Arena::CreateMaybeMessage< ::autofill::DomainSuggestions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill::DomainSuggestions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
