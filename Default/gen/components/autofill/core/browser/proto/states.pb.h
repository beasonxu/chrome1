// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: states.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_states_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_states_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_states_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_states_2eproto {
  static const uint32_t offsets[];
};
namespace autofill {
class StateEntry;
struct StateEntryDefaultTypeInternal;
extern StateEntryDefaultTypeInternal _StateEntry_default_instance_;
class StatesInCountry;
struct StatesInCountryDefaultTypeInternal;
extern StatesInCountryDefaultTypeInternal _StatesInCountry_default_instance_;
}  // namespace autofill
PROTOBUF_NAMESPACE_OPEN
template<> ::autofill::StateEntry* Arena::CreateMaybeMessage<::autofill::StateEntry>(Arena*);
template<> ::autofill::StatesInCountry* Arena::CreateMaybeMessage<::autofill::StatesInCountry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autofill {

// ===================================================================

class StateEntry final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill.StateEntry) */ {
 public:
  inline StateEntry() : StateEntry(nullptr) {}
  ~StateEntry() override;
  explicit PROTOBUF_CONSTEXPR StateEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StateEntry(const StateEntry& from);
  StateEntry(StateEntry&& from) noexcept
    : StateEntry() {
    *this = ::std::move(from);
  }

  inline StateEntry& operator=(const StateEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateEntry& operator=(StateEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StateEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const StateEntry* internal_default_instance() {
    return reinterpret_cast<const StateEntry*>(
               &_StateEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StateEntry& a, StateEntry& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StateEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StateEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StateEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StateEntry& from);
  void MergeFrom(const StateEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StateEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill.StateEntry";
  }
  protected:
  explicit StateEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbbreviationsFieldNumber = 2,
    kAlternativeNamesFieldNumber = 3,
    kCanonicalNameFieldNumber = 1,
  };
  // repeated string abbreviations = 2;
  int abbreviations_size() const;
  private:
  int _internal_abbreviations_size() const;
  public:
  void clear_abbreviations();
  const std::string& abbreviations(int index) const;
  std::string* mutable_abbreviations(int index);
  void set_abbreviations(int index, const std::string& value);
  void set_abbreviations(int index, std::string&& value);
  void set_abbreviations(int index, const char* value);
  void set_abbreviations(int index, const char* value, size_t size);
  std::string* add_abbreviations();
  void add_abbreviations(const std::string& value);
  void add_abbreviations(std::string&& value);
  void add_abbreviations(const char* value);
  void add_abbreviations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& abbreviations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_abbreviations();
  private:
  const std::string& _internal_abbreviations(int index) const;
  std::string* _internal_add_abbreviations();
  public:

  // repeated string alternative_names = 3;
  int alternative_names_size() const;
  private:
  int _internal_alternative_names_size() const;
  public:
  void clear_alternative_names();
  const std::string& alternative_names(int index) const;
  std::string* mutable_alternative_names(int index);
  void set_alternative_names(int index, const std::string& value);
  void set_alternative_names(int index, std::string&& value);
  void set_alternative_names(int index, const char* value);
  void set_alternative_names(int index, const char* value, size_t size);
  std::string* add_alternative_names();
  void add_alternative_names(const std::string& value);
  void add_alternative_names(std::string&& value);
  void add_alternative_names(const char* value);
  void add_alternative_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& alternative_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_alternative_names();
  private:
  const std::string& _internal_alternative_names(int index) const;
  std::string* _internal_add_alternative_names();
  public:

  // optional string canonical_name = 1;
  bool has_canonical_name() const;
  private:
  bool _internal_has_canonical_name() const;
  public:
  void clear_canonical_name();
  const std::string& canonical_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_canonical_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_canonical_name();
  PROTOBUF_NODISCARD std::string* release_canonical_name();
  void set_allocated_canonical_name(std::string* canonical_name);
  private:
  const std::string& _internal_canonical_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_canonical_name(const std::string& value);
  std::string* _internal_mutable_canonical_name();
  public:

  // @@protoc_insertion_point(class_scope:autofill.StateEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> abbreviations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> alternative_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr canonical_name_;
  friend struct ::TableStruct_states_2eproto;
};
// -------------------------------------------------------------------

class StatesInCountry final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill.StatesInCountry) */ {
 public:
  inline StatesInCountry() : StatesInCountry(nullptr) {}
  ~StatesInCountry() override;
  explicit PROTOBUF_CONSTEXPR StatesInCountry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatesInCountry(const StatesInCountry& from);
  StatesInCountry(StatesInCountry&& from) noexcept
    : StatesInCountry() {
    *this = ::std::move(from);
  }

  inline StatesInCountry& operator=(const StatesInCountry& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatesInCountry& operator=(StatesInCountry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StatesInCountry& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatesInCountry* internal_default_instance() {
    return reinterpret_cast<const StatesInCountry*>(
               &_StatesInCountry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StatesInCountry& a, StatesInCountry& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StatesInCountry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatesInCountry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatesInCountry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatesInCountry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StatesInCountry& from);
  void MergeFrom(const StatesInCountry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StatesInCountry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill.StatesInCountry";
  }
  protected:
  explicit StatesInCountry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 2,
    kCountryCodeFieldNumber = 1,
  };
  // repeated .autofill.StateEntry states = 2;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::autofill::StateEntry* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::StateEntry >*
      mutable_states();
  private:
  const ::autofill::StateEntry& _internal_states(int index) const;
  ::autofill::StateEntry* _internal_add_states();
  public:
  const ::autofill::StateEntry& states(int index) const;
  ::autofill::StateEntry* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::StateEntry >&
      states() const;

  // optional string country_code = 1;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // @@protoc_insertion_point(class_scope:autofill.StatesInCountry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::StateEntry > states_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  friend struct ::TableStruct_states_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StateEntry

// optional string canonical_name = 1;
inline bool StateEntry::_internal_has_canonical_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StateEntry::has_canonical_name() const {
  return _internal_has_canonical_name();
}
inline void StateEntry::clear_canonical_name() {
  canonical_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StateEntry::canonical_name() const {
  // @@protoc_insertion_point(field_get:autofill.StateEntry.canonical_name)
  return _internal_canonical_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StateEntry::set_canonical_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 canonical_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:autofill.StateEntry.canonical_name)
}
inline std::string* StateEntry::mutable_canonical_name() {
  std::string* _s = _internal_mutable_canonical_name();
  // @@protoc_insertion_point(field_mutable:autofill.StateEntry.canonical_name)
  return _s;
}
inline const std::string& StateEntry::_internal_canonical_name() const {
  return canonical_name_.Get();
}
inline void StateEntry::_internal_set_canonical_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  canonical_name_.Set(value, GetArenaForAllocation());
}
inline std::string* StateEntry::_internal_mutable_canonical_name() {
  _has_bits_[0] |= 0x00000001u;
  return canonical_name_.Mutable(GetArenaForAllocation());
}
inline std::string* StateEntry::release_canonical_name() {
  // @@protoc_insertion_point(field_release:autofill.StateEntry.canonical_name)
  if (!_internal_has_canonical_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = canonical_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (canonical_name_.IsDefault()) {
    canonical_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StateEntry::set_allocated_canonical_name(std::string* canonical_name) {
  if (canonical_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  canonical_name_.SetAllocated(canonical_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (canonical_name_.IsDefault()) {
    canonical_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:autofill.StateEntry.canonical_name)
}

// repeated string abbreviations = 2;
inline int StateEntry::_internal_abbreviations_size() const {
  return abbreviations_.size();
}
inline int StateEntry::abbreviations_size() const {
  return _internal_abbreviations_size();
}
inline void StateEntry::clear_abbreviations() {
  abbreviations_.Clear();
}
inline std::string* StateEntry::add_abbreviations() {
  std::string* _s = _internal_add_abbreviations();
  // @@protoc_insertion_point(field_add_mutable:autofill.StateEntry.abbreviations)
  return _s;
}
inline const std::string& StateEntry::_internal_abbreviations(int index) const {
  return abbreviations_.Get(index);
}
inline const std::string& StateEntry::abbreviations(int index) const {
  // @@protoc_insertion_point(field_get:autofill.StateEntry.abbreviations)
  return _internal_abbreviations(index);
}
inline std::string* StateEntry::mutable_abbreviations(int index) {
  // @@protoc_insertion_point(field_mutable:autofill.StateEntry.abbreviations)
  return abbreviations_.Mutable(index);
}
inline void StateEntry::set_abbreviations(int index, const std::string& value) {
  abbreviations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:autofill.StateEntry.abbreviations)
}
inline void StateEntry::set_abbreviations(int index, std::string&& value) {
  abbreviations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:autofill.StateEntry.abbreviations)
}
inline void StateEntry::set_abbreviations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  abbreviations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:autofill.StateEntry.abbreviations)
}
inline void StateEntry::set_abbreviations(int index, const char* value, size_t size) {
  abbreviations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:autofill.StateEntry.abbreviations)
}
inline std::string* StateEntry::_internal_add_abbreviations() {
  return abbreviations_.Add();
}
inline void StateEntry::add_abbreviations(const std::string& value) {
  abbreviations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:autofill.StateEntry.abbreviations)
}
inline void StateEntry::add_abbreviations(std::string&& value) {
  abbreviations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:autofill.StateEntry.abbreviations)
}
inline void StateEntry::add_abbreviations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  abbreviations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:autofill.StateEntry.abbreviations)
}
inline void StateEntry::add_abbreviations(const char* value, size_t size) {
  abbreviations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:autofill.StateEntry.abbreviations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StateEntry::abbreviations() const {
  // @@protoc_insertion_point(field_list:autofill.StateEntry.abbreviations)
  return abbreviations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StateEntry::mutable_abbreviations() {
  // @@protoc_insertion_point(field_mutable_list:autofill.StateEntry.abbreviations)
  return &abbreviations_;
}

// repeated string alternative_names = 3;
inline int StateEntry::_internal_alternative_names_size() const {
  return alternative_names_.size();
}
inline int StateEntry::alternative_names_size() const {
  return _internal_alternative_names_size();
}
inline void StateEntry::clear_alternative_names() {
  alternative_names_.Clear();
}
inline std::string* StateEntry::add_alternative_names() {
  std::string* _s = _internal_add_alternative_names();
  // @@protoc_insertion_point(field_add_mutable:autofill.StateEntry.alternative_names)
  return _s;
}
inline const std::string& StateEntry::_internal_alternative_names(int index) const {
  return alternative_names_.Get(index);
}
inline const std::string& StateEntry::alternative_names(int index) const {
  // @@protoc_insertion_point(field_get:autofill.StateEntry.alternative_names)
  return _internal_alternative_names(index);
}
inline std::string* StateEntry::mutable_alternative_names(int index) {
  // @@protoc_insertion_point(field_mutable:autofill.StateEntry.alternative_names)
  return alternative_names_.Mutable(index);
}
inline void StateEntry::set_alternative_names(int index, const std::string& value) {
  alternative_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:autofill.StateEntry.alternative_names)
}
inline void StateEntry::set_alternative_names(int index, std::string&& value) {
  alternative_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:autofill.StateEntry.alternative_names)
}
inline void StateEntry::set_alternative_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  alternative_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:autofill.StateEntry.alternative_names)
}
inline void StateEntry::set_alternative_names(int index, const char* value, size_t size) {
  alternative_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:autofill.StateEntry.alternative_names)
}
inline std::string* StateEntry::_internal_add_alternative_names() {
  return alternative_names_.Add();
}
inline void StateEntry::add_alternative_names(const std::string& value) {
  alternative_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:autofill.StateEntry.alternative_names)
}
inline void StateEntry::add_alternative_names(std::string&& value) {
  alternative_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:autofill.StateEntry.alternative_names)
}
inline void StateEntry::add_alternative_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  alternative_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:autofill.StateEntry.alternative_names)
}
inline void StateEntry::add_alternative_names(const char* value, size_t size) {
  alternative_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:autofill.StateEntry.alternative_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StateEntry::alternative_names() const {
  // @@protoc_insertion_point(field_list:autofill.StateEntry.alternative_names)
  return alternative_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StateEntry::mutable_alternative_names() {
  // @@protoc_insertion_point(field_mutable_list:autofill.StateEntry.alternative_names)
  return &alternative_names_;
}

// -------------------------------------------------------------------

// StatesInCountry

// optional string country_code = 1;
inline bool StatesInCountry::_internal_has_country_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StatesInCountry::has_country_code() const {
  return _internal_has_country_code();
}
inline void StatesInCountry::clear_country_code() {
  country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StatesInCountry::country_code() const {
  // @@protoc_insertion_point(field_get:autofill.StatesInCountry.country_code)
  return _internal_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatesInCountry::set_country_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 country_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:autofill.StatesInCountry.country_code)
}
inline std::string* StatesInCountry::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:autofill.StatesInCountry.country_code)
  return _s;
}
inline const std::string& StatesInCountry::_internal_country_code() const {
  return country_code_.Get();
}
inline void StatesInCountry::_internal_set_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  country_code_.Set(value, GetArenaForAllocation());
}
inline std::string* StatesInCountry::_internal_mutable_country_code() {
  _has_bits_[0] |= 0x00000001u;
  return country_code_.Mutable(GetArenaForAllocation());
}
inline std::string* StatesInCountry::release_country_code() {
  // @@protoc_insertion_point(field_release:autofill.StatesInCountry.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = country_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault()) {
    country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StatesInCountry::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  country_code_.SetAllocated(country_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault()) {
    country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:autofill.StatesInCountry.country_code)
}

// repeated .autofill.StateEntry states = 2;
inline int StatesInCountry::_internal_states_size() const {
  return states_.size();
}
inline int StatesInCountry::states_size() const {
  return _internal_states_size();
}
inline void StatesInCountry::clear_states() {
  states_.Clear();
}
inline ::autofill::StateEntry* StatesInCountry::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:autofill.StatesInCountry.states)
  return states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::StateEntry >*
StatesInCountry::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:autofill.StatesInCountry.states)
  return &states_;
}
inline const ::autofill::StateEntry& StatesInCountry::_internal_states(int index) const {
  return states_.Get(index);
}
inline const ::autofill::StateEntry& StatesInCountry::states(int index) const {
  // @@protoc_insertion_point(field_get:autofill.StatesInCountry.states)
  return _internal_states(index);
}
inline ::autofill::StateEntry* StatesInCountry::_internal_add_states() {
  return states_.Add();
}
inline ::autofill::StateEntry* StatesInCountry::add_states() {
  ::autofill::StateEntry* _add = _internal_add_states();
  // @@protoc_insertion_point(field_add:autofill.StatesInCountry.states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::StateEntry >&
StatesInCountry::states() const {
  // @@protoc_insertion_point(field_list:autofill.StatesInCountry.states)
  return states_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace autofill

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_states_2eproto
