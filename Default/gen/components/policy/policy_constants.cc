//
// DO NOT MODIFY THIS FILE DIRECTLY!
// IT IS GENERATED BY generate_policy_source.py
// FROM gen/chrome/app/policy/policy_templates.json
//

#include "components/policy/policy_constants.h"

#include <algorithm>
#include <climits>
#include <iterator>
#include <memory>

#include "base/check_op.h"
#include "base/values.h"
#include "build/branding_buildflags.h"
#include "components/policy/core/common/policy_types.h"
#include "components/policy/core/common/schema_internal.h"
#include "components/policy/proto/cloud_policy.pb.h"
#include "components/policy/risk_tag.h"

namespace policy {

[[maybe_unused]] const PolicyDetails kChromePolicyDetails[] = {
// is_deprecated is_future is_device_policy id max_external_data_size, risk tags
  // AdditionalDnsQueryTypesEnabled
  { false,        false,    false,            857,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // AllHttpAuthSchemesAllowedForOrigins
  { false,        false,    false,            950,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // AllowedDomainsForApps
  { false,        false,    false,            331,                     0, { RISK_TAG_FILTERING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // AlternateErrorPagesEnabled
  { false,        false,    false,              5,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // AuthAndroidNegotiateAccountType
  { false,        false,    false,            305,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // AuthNegotiateDelegateAllowlist
  { false,        false,    false,            746,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // AuthSchemes
  { false,        false,    false,             26,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // AuthServerAllowlist
  { false,        false,    false,            747,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // AutoFillEnabled
  { true,         false,    false,             18,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // AutofillAddressEnabled
  { false,        false,    false,            459,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // AutofillCreditCardEnabled
  { false,        false,    false,            392,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // BackForwardCacheEnabled
  { false,        false,    false,            758,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // BlockThirdPartyCookies
  { false,        false,    false,             39,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // BrowserSignin
  { false,        false,    false,            487,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // BrowsingDataLifetime
  { false,        false,    false,            791,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // BuiltInDnsClientEnabled
  { false,        false,    false,            165,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // CECPQ2Enabled
  { false,        false,    false,            841,                     0, { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE, RISK_TAG_NONE } },
  // CORSNonWildcardRequestHeadersSupport
  { false,        false,    false,            921,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // CertificateTransparencyEnforcementDisabledForCas
  { false,        false,    false,            435,                     0, { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE, RISK_TAG_NONE } },
  // CertificateTransparencyEnforcementDisabledForLegacyCas
  { false,        false,    false,            436,                     0, { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE, RISK_TAG_NONE } },
  // CertificateTransparencyEnforcementDisabledForUrls
  { false,        false,    false,            335,                     0, { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE, RISK_TAG_NONE } },
  // CloudManagementEnrollmentToken
  { false,        false,    false,            510,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // CloudPolicyOverridesPlatformPolicy
  { false,        false,    false,            381,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // CloudProfileReportingEnabled
  { false,        true,     false,            942,                     0, { RISK_TAG_ADMIN_SHARING, RISK_TAG_GOOGLE_SHARING, RISK_TAG_NONE } },
  // CloudReportingEnabled
  { false,        false,    false,            493,                     0, { RISK_TAG_ADMIN_SHARING, RISK_TAG_GOOGLE_SHARING, RISK_TAG_NONE } },
  // CloudReportingUploadFrequency
  { false,        false,    false,            962,                     0, { RISK_TAG_ADMIN_SHARING, RISK_TAG_GOOGLE_SHARING, RISK_TAG_NONE } },
  // CloudUserPolicyMerge
  { false,        false,    false,            859,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // CloudUserPolicyOverridesCloudMachinePolicy
  { false,        false,    false,            899,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // CoalesceH2ConnectionsWithClientCertificatesForHosts
  { false,        false,    false,            466,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // ComponentUpdatesEnabled
  { false,        false,    false,            342,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // ContextualSearchEnabled
  { false,        false,    false,            281,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // CookiesAllowedForUrls
  { false,        false,    false,             77,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // CookiesBlockedForUrls
  { false,        false,    false,             67,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // CookiesSessionOnlyForUrls
  { false,        false,    false,             68,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultCookiesSetting
  { false,        false,    false,             48,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultGeolocationSetting
  { false,        false,    false,             54,                     0, { RISK_TAG_WEBSITE_SHARING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultJavaScriptJitSetting
  { false,        false,    false,            867,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultJavaScriptSetting
  { false,        false,    false,             50,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultPopupsSetting
  { false,        false,    false,             52,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderAlternateURLs
  { false,        false,    false,            161,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderEnabled
  { false,        false,    false,             40,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderEncodings
  { false,        false,    false,             47,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderIconURL
  { false,        false,    false,             46,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderImageURL
  { false,        false,    false,            229,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderImageURLPostParams
  { false,        false,    false,            233,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderKeyword
  { false,        false,    false,             42,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderName
  { false,        false,    false,             41,                     0, { RISK_TAG_WEBSITE_SHARING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderNewTabURL
  { false,        false,    false,            237,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderSearchURL
  { false,        false,    false,             43,                     0, { RISK_TAG_WEBSITE_SHARING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderSearchURLPostParams
  { false,        false,    false,            230,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderSuggestURL
  { false,        false,    false,             44,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSearchProviderSuggestURLPostParams
  { false,        false,    false,            231,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultSensorsSetting
  { false,        false,    false,            754,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultWebBluetoothGuardSetting
  { false,        false,    false,            320,                     0, { RISK_TAG_WEBSITE_SHARING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DefaultWebUsbGuardSetting
  { false,        false,    false,            434,                     0, { RISK_TAG_WEBSITE_SHARING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DisableAuthNegotiateCnameLookup
  { false,        false,    false,             27,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DisableSafeBrowsingProceedAnyway
  { false,        false,    false,            150,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DnsOverHttpsMode
  { false,        false,    false,            582,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // DnsOverHttpsTemplates
  { false,        false,    false,            642,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // EditBookmarksEnabled
  { false,        false,    false,             83,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // EnableExperimentalPolicies
  { false,        false,    false,            711,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // EnableMediaRouter
  { false,        false,    false,            333,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // EncryptedClientHelloEnabled
  { false,        false,    false,            996,                     0, { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE, RISK_TAG_NONE } },
  // EnterpriseAuthenticationAppLinkPolicy
  { false,        false,    false,            976,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // EnterpriseHardwarePlatformAPIEnabled
  { false,        false,    false,            483,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // EventPathEnabled
  { false,        false,    false,            990,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // ExplicitlyAllowedNetworkPorts
  { false,        false,    false,            849,                     0, { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_WEBSITE_SHARING,
    RISK_TAG_LOCAL_DATA_ACCESS } },
  // FirstPartySetsEnabled
  { false,        true,     false,            948,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // FirstPartySetsOverrides
  { false,        true,     false,            969,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // ForceBrowserSignin
  { true,         false,    false,            346,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // ForceGoogleSafeSearch
  { false,        false,    false,            282,                     0, { RISK_TAG_FILTERING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // ForceMajorVersionToMinorPositionInUserAgent
  { false,        false,    false,            949,                     0, { RISK_TAG_WEBSITE_SHARING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // ForceSafeSearch
  { true,         false,    false,            162,                     0, { RISK_TAG_FILTERING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // ForceYouTubeRestrict
  { false,        false,    false,            348,                     0, { RISK_TAG_FILTERING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // ForceYouTubeSafetyMode
  { true,         false,    false,            283,                     0, { RISK_TAG_FILTERING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // HSTSPolicyBypassList
  { false,        false,    false,            601,                     0, { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE, RISK_TAG_NONE } },
  // HomepageLocation
  { false,        false,    false,              1,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // HttpsOnlyMode
  { false,        false,    false,            870,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // IncognitoEnabled
  { true,         false,    false,             10,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // IncognitoModeAvailability
  { false,        false,    false,             93,                     0, { RISK_TAG_FILTERING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // InsecureFormsWarningsEnabled
  { false,        false,    false,            748,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // InsecurePrivateNetworkRequestsAllowed
  { false,        false,    false,            766,                     0, { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE, RISK_TAG_NONE } },
  // InsecurePrivateNetworkRequestsAllowedForUrls
  { false,        false,    false,            767,                     0, { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE, RISK_TAG_NONE } },
  // IntensiveWakeUpThrottlingEnabled
  { false,        false,    false,            713,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // IsolateOriginsAndroid
  { false,        false,    false,            445,                     0, { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE, RISK_TAG_NONE } },
  // JavaScriptAllowedForUrls
  { false,        false,    false,             71,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // JavaScriptBlockedForUrls
  { false,        false,    false,             72,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // JavaScriptJitAllowedForSites
  { false,        false,    false,            868,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // JavaScriptJitBlockedForSites
  { false,        false,    false,            869,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // JavascriptEnabled
  { true,         false,    false,              9,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // LegacySameSiteCookieBehaviorEnabledForDomainList
  { false,        false,    false,            624,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // LensCameraAssistedSearchEnabled
  { false,        false,    false,            853,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // LookalikeWarningAllowlistDomains
  { false,        false,    false,            782,                     0, { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_WEBSITE_SHARING, RISK_TAG_NONE } },
  // ManagedBookmarks
  { false,        false,    false,            227,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // MetricsReportingEnabled
  { false,        true,     false,             15,                     0, { RISK_TAG_GOOGLE_SHARING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // NTPContentSuggestionsEnabled
  { false,        false,    false,            338,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // NetworkPredictionOptions
  { false,        false,    false,            273,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // NtlmV2Enabled
  { false,        false,    false,            393,                     0, { RISK_TAG_WEBSITE_SHARING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // OverrideSecurityRestrictionsOnInsecureOrigin
  { false,        false,    false,            457,                     0, { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE, RISK_TAG_NONE } },
  // PasswordLeakDetectionEnabled
  { false,        false,    false,            580,                     0, { RISK_TAG_GOOGLE_SHARING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // PasswordManagerEnabled
  { false,        false,    false,             16,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // PaymentMethodQueryEnabled
  { false,        false,    false,            651,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // PersistentQuotaEnabled
  { false,        false,    false,           1002,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // PolicyAtomicGroupsEnabled
  { false,        false,    false,            584,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // PolicyDictionaryMultipleSourceMergeList
  { false,        false,    false,            565,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // PolicyListMultipleSourceMergeList
  { false,        false,    false,            554,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // PopupsAllowedForUrls
  { false,        false,    false,             75,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // PopupsBlockedForUrls
  { false,        false,    false,             76,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // PrintingEnabled
  { false,        false,    false,             12,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // PromptForDownloadLocation
  { false,        false,    false,            395,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // ProxyBypassList
  { true,         false,    false,             25,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // ProxyMode
  { true,         false,    false,             21,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // ProxyPacUrl
  { true,         false,    false,             24,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // ProxyServer
  { true,         false,    false,             23,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // ProxyServerMode
  { true,         false,    false,             22,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // ProxySettings
  { false,        false,    false,            116,                     0, { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE, RISK_TAG_NONE } },
  // RestrictAccountsToPatterns
  { false,        false,    false,            410,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // SSLErrorOverrideAllowed
  { false,        false,    false,            300,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // SSLErrorOverrideAllowedForOrigins
  { false,        false,    false,            819,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // SSLVersionMin
  { false,        false,    false,            279,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // SafeBrowsingEnabled
  { true,         false,    false,             14,                     0, { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE, RISK_TAG_NONE } },
  // SafeBrowsingExtendedReportingEnabled
  { false,        false,    false,            429,                     0, { RISK_TAG_GOOGLE_SHARING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // SafeBrowsingProtectionLevel
  { false,        false,    false,            684,                     0, { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE, RISK_TAG_NONE } },
  // SavingBrowserHistoryDisabled
  { false,        false,    false,             11,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // ScrollToTextFragmentEnabled
  { false,        false,    false,            687,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // SearchSuggestEnabled
  { false,        false,    false,              6,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // SensorsAllowedForUrls
  { false,        false,    false,            755,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // SensorsBlockedForUrls
  { false,        false,    false,            756,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // SetTimeoutWithout1MsClampEnabled
  { true,         false,    false,            967,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // SharedClipboardEnabled
  { false,        false,    false,            610,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // SigninAllowed
  { true,         false,    false,            190,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // SitePerProcessAndroid
  { false,        false,    false,            446,                     0, { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE, RISK_TAG_NONE } },
  // SuppressDifferentOriginSubframeDialogs
  { false,        false,    false,            829,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // SyncDisabled
  { false,        true,     false,             20,                     0, { RISK_TAG_FILTERING, RISK_TAG_GOOGLE_SHARING, RISK_TAG_NONE } },
  // SyncTypesListDisabled
  { false,        false,    false,            649,                     0, { RISK_TAG_SYSTEM_SECURITY, RISK_TAG_NONE, RISK_TAG_NONE } },
  // TosDialogBehavior
  { false,        false,    false,            801,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // TranslateEnabled
  { false,        false,    false,             80,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // URLAllowlist
  { false,        false,    false,            737,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // URLBlocklist
  { false,        false,    false,            736,                     0, { RISK_TAG_FILTERING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // UnthrottledNestedTimeoutEnabled
  { false,        false,    false,            988,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // UrlKeyedAnonymizedDataCollectionEnabled
  { false,        false,    false,            461,                     0, { RISK_TAG_GOOGLE_SHARING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // UrlParamFilterEnabled
  { false,        false,    false,            981,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // UserAgentClientHintsGREASEUpdateEnabled
  { false,        false,    false,            924,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // UserAgentReduction
  { false,        false,    false,            932,                     0, { RISK_TAG_WEBSITE_SHARING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // VariationsRestrictParameter
  { false,        false,    false,            196,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // WebRtcUdpPortRange
  { false,        false,    false,            339,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // WebSQLAccess
  { false,        false,    false,            966,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // WebSQLNonSecureContextEnabled
  { false,        false,    false,            993,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // WebUsbAllowDevicesForUrls
  { false,        false,    false,            486,                     0, { RISK_TAG_WEBSITE_SHARING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // WebUsbAskForUrls
  { false,        false,    false,            439,                     0, { RISK_TAG_WEBSITE_SHARING, RISK_TAG_NONE, RISK_TAG_NONE } },
  // WebUsbBlockedForUrls
  { false,        false,    false,            440,                     0, { RISK_TAG_NONE, RISK_TAG_NONE, RISK_TAG_NONE } },
  // WebXRImmersiveArEnabled
  { false,        false,    false,            820,                     0, { RISK_TAG_WEBSITE_SHARING, RISK_TAG_NONE, RISK_TAG_NONE } },
};

const internal::SchemaNode kSchemas[] = {
//  Type                           Extra  IsSensitiveValue HasSensitiveChildren
  { base::Value::Type::DICTIONARY,     9, false,           false },  // root node
  { base::Value::Type::BOOLEAN,       -1, false,           false },  // simple type: boolean
  { base::Value::Type::STRING,        -1, false,           false },  // simple type: string
  { base::Value::Type::LIST,           2, false,           false },  // 
  { base::Value::Type::INTEGER,        0, false,           false },  // integer with enumeration restriction (use range instead): BrowserSignin
                                                                     // integer with enumeration restriction (use range instead): ForceMajorVersionToMinorPositionInUserAgent
                                                                     // integer with enumeration restriction (use range instead): ForceYouTubeRestrict
                                                                     // integer with enumeration restriction (use range instead): IncognitoModeAvailability
                                                                     // integer with enumeration restriction (use range instead): NetworkPredictionOptions
                                                                     // integer with enumeration restriction (use range instead): SafeBrowsingProtectionLevel
                                                                     // integer with enumeration restriction (use range instead): UserAgentReduction
  { base::Value::Type::DICTIONARY,     0, false,           false },  // items of BrowsingDataLifetime
  { base::Value::Type::STRING,         1, false,           false },  // string with enumeration restriction: items of data_types
  { base::Value::Type::LIST,           6, false,           false },  // 
  { base::Value::Type::INTEGER,        2, false,           false },  // integer with ranged restriction: time_to_live_in_hours
  { base::Value::Type::LIST,           5, false,           false },  // 
  { base::Value::Type::INTEGER,        3, false,           false },  // integer with ranged restriction: CloudReportingUploadFrequency
  { base::Value::Type::INTEGER,        4, false,           false },  // integer with enumeration restriction: DefaultCookiesSetting
  { base::Value::Type::INTEGER,        5, false,           false },  // integer with enumeration restriction (use range instead): DefaultGeolocationSetting
  { base::Value::Type::INTEGER,        6, false,           false },  // integer with enumeration restriction (use range instead): DefaultJavaScriptJitSetting
                                                                     // integer with enumeration restriction (use range instead): DefaultJavaScriptSetting
                                                                     // integer with enumeration restriction (use range instead): DefaultPopupsSetting
                                                                     // integer with enumeration restriction (use range instead): DefaultSensorsSetting
                                                                     // integer with enumeration restriction (use range instead): TosDialogBehavior
  { base::Value::Type::INTEGER,        7, false,           false },  // integer with enumeration restriction (use range instead): DefaultWebBluetoothGuardSetting
                                                                     // integer with enumeration restriction (use range instead): DefaultWebUsbGuardSetting
  { base::Value::Type::STRING,         8, false,           false },  // string with enumeration restriction: DnsOverHttpsMode
  { base::Value::Type::DICTIONARY,     1, false,           false },  // items of EnterpriseAuthenticationAppLinkPolicy
  { base::Value::Type::LIST,          16, false,           false },  // 
  { base::Value::Type::STRING,         9, false,           false },  // string with enumeration restriction: items of ExplicitlyAllowedNetworkPorts
  { base::Value::Type::LIST,          18, false,           false },  // 
  { base::Value::Type::DICTIONARY,     4, false,           false },  // FirstPartySetsOverrides
  { base::Value::Type::DICTIONARY,     2, false,           false },  // items of additions
  { base::Value::Type::LIST,          21, false,           false },  // 
  { base::Value::Type::DICTIONARY,     3, false,           false },  // items of replacements
  { base::Value::Type::LIST,          23, false,           false },  // 
  { base::Value::Type::STRING,        10, false,           false },  // string with pattern restriction: items of HSTSPolicyBypassList
  { base::Value::Type::LIST,          25, false,           false },  // 
  { base::Value::Type::STRING,        11, false,           false },  // string with enumeration restriction: HttpsOnlyMode
  { base::Value::Type::DICTIONARY,     5, false,           false },  // items of ManagedBookmarks
  { base::Value::Type::LIST,          28, false,           false },  // 
  { base::Value::Type::LIST,          28, false,           false },  // 
  { base::Value::Type::STRING,        12, false,           false },  // string with enumeration restriction: items of PolicyDictionaryMultipleSourceMergeList
  { base::Value::Type::LIST,          31, false,           false },  // 
  { base::Value::Type::STRING,        13, false,           false },  // string with enumeration restriction: ProxyMode
  { base::Value::Type::INTEGER,       14, false,           false },  // integer with enumeration restriction (use range instead): ProxyServerMode
  { base::Value::Type::DICTIONARY,     6, false,           false },  // ProxySettings
  { base::Value::Type::STRING,        15, false,           false },  // string with enumeration restriction: ProxyMode
  { base::Value::Type::STRING,        16, false,           false },  // string with enumeration restriction: SSLVersionMin
  { base::Value::Type::DICTIONARY,     8, false,           false },  // items of WebUsbAllowDevicesForUrls
  { base::Value::Type::DICTIONARY,     7, false,           false },  // items of devices
  { base::Value::Type::INTEGER,       17, false,           false },  // integer with ranged restriction: product_id
                                                                     // integer with ranged restriction: vendor_id
  { base::Value::Type::LIST,          39, false,           false },  // 
  { base::Value::Type::LIST,          38, false,           false },  // 
};

const internal::PropertyNode kPropertyNodes[] = {
//  Property                                                             Schema
  { "data_types",                                                         7 },
  { "time_to_live_in_hours",                                              8 },
  { "url",                                                                2 },
  { "members",                                                            3 },
  { "owner",                                                              2 },
  { "members",                                                            3 },
  { "owner",                                                              2 },
  { "additions",                                                         22 },
  { "replacements",                                                      24 },
  { "children",                                                          29 },
  { "name",                                                               2 },
  { "toplevel_name",                                                      2 },
  { "url",                                                                2 },
  { key::kProxyBypassList,                                                2 },
  { key::kProxyMode,                                                     36 },
  { "ProxyPacMandatory",                                                  1 },
  { key::kProxyPacUrl,                                                    2 },
  { key::kProxyServer,                                                    2 },
  { key::kProxyServerMode,                                               34 },
  { "product_id",                                                        40 },
  { "vendor_id",                                                         40 },
  { "devices",                                                           41 },
  { "urls",                                                               3 },
  { key::kAdditionalDnsQueryTypesEnabled,                                 1 },
  { key::kAllHttpAuthSchemesAllowedForOrigins,                            3 },
  { key::kAllowedDomainsForApps,                                          2 },
  { key::kAlternateErrorPagesEnabled,                                     1 },
  { key::kAuthAndroidNegotiateAccountType,                                2 },
  { key::kAuthNegotiateDelegateAllowlist,                                 2 },
  { key::kAuthSchemes,                                                    2 },
  { key::kAuthServerAllowlist,                                            2 },
  { key::kAutoFillEnabled,                                                1 },
  { key::kAutofillAddressEnabled,                                         1 },
  { key::kAutofillCreditCardEnabled,                                      1 },
  { key::kBackForwardCacheEnabled,                                        1 },
  { key::kBlockThirdPartyCookies,                                         1 },
  { key::kBrowserSignin,                                                  4 },
  { key::kBrowsingDataLifetime,                                           9 },
  { key::kBuiltInDnsClientEnabled,                                        1 },
  { key::kCECPQ2Enabled,                                                  1 },
  { key::kCORSNonWildcardRequestHeadersSupport,                           1 },
  { key::kCertificateTransparencyEnforcementDisabledForCas,               3 },
  { key::kCertificateTransparencyEnforcementDisabledForLegacyCas,         3 },
  { key::kCertificateTransparencyEnforcementDisabledForUrls,              3 },
  { key::kCloudManagementEnrollmentToken,                                 2 },
  { key::kCloudPolicyOverridesPlatformPolicy,                             1 },
  { key::kCloudProfileReportingEnabled,                                   1 },
  { key::kCloudReportingEnabled,                                          1 },
  { key::kCloudReportingUploadFrequency,                                 10 },
  { key::kCloudUserPolicyMerge,                                           1 },
  { key::kCloudUserPolicyOverridesCloudMachinePolicy,                     1 },
  { key::kCoalesceH2ConnectionsWithClientCertificatesForHosts,            3 },
  { key::kComponentUpdatesEnabled,                                        1 },
  { key::kContextualSearchEnabled,                                        1 },
  { key::kCookiesAllowedForUrls,                                          3 },
  { key::kCookiesBlockedForUrls,                                          3 },
  { key::kCookiesSessionOnlyForUrls,                                      3 },
  { key::kDefaultCookiesSetting,                                         11 },
  { key::kDefaultGeolocationSetting,                                     12 },
  { key::kDefaultJavaScriptJitSetting,                                   13 },
  { key::kDefaultJavaScriptSetting,                                      13 },
  { key::kDefaultPopupsSetting,                                          13 },
  { key::kDefaultSearchProviderAlternateURLs,                             3 },
  { key::kDefaultSearchProviderEnabled,                                   1 },
  { key::kDefaultSearchProviderEncodings,                                 3 },
  { key::kDefaultSearchProviderIconURL,                                   2 },
  { key::kDefaultSearchProviderImageURL,                                  2 },
  { key::kDefaultSearchProviderImageURLPostParams,                        2 },
  { key::kDefaultSearchProviderKeyword,                                   2 },
  { key::kDefaultSearchProviderName,                                      2 },
  { key::kDefaultSearchProviderNewTabURL,                                 2 },
  { key::kDefaultSearchProviderSearchURL,                                 2 },
  { key::kDefaultSearchProviderSearchURLPostParams,                       2 },
  { key::kDefaultSearchProviderSuggestURL,                                2 },
  { key::kDefaultSearchProviderSuggestURLPostParams,                      2 },
  { key::kDefaultSensorsSetting,                                         13 },
  { key::kDefaultWebBluetoothGuardSetting,                               14 },
  { key::kDefaultWebUsbGuardSetting,                                     14 },
  { key::kDisableAuthNegotiateCnameLookup,                                1 },
  { key::kDisableSafeBrowsingProceedAnyway,                               1 },
  { key::kDnsOverHttpsMode,                                              15 },
  { key::kDnsOverHttpsTemplates,                                          2 },
  { key::kEditBookmarksEnabled,                                           1 },
  { key::kEnableExperimentalPolicies,                                     3 },
  { key::kEnableMediaRouter,                                              1 },
  { key::kEncryptedClientHelloEnabled,                                    1 },
  { key::kEnterpriseAuthenticationAppLinkPolicy,                         17 },
  { key::kEnterpriseHardwarePlatformAPIEnabled,                           1 },
  { key::kEventPathEnabled,                                               1 },
  { key::kExplicitlyAllowedNetworkPorts,                                 19 },
  { key::kFirstPartySetsEnabled,                                          1 },
  { key::kFirstPartySetsOverrides,                                       20 },
  { key::kForceBrowserSignin,                                             1 },
  { key::kForceGoogleSafeSearch,                                          1 },
  { key::kForceMajorVersionToMinorPositionInUserAgent,                    4 },
  { key::kForceSafeSearch,                                                1 },
  { key::kForceYouTubeRestrict,                                           4 },
  { key::kForceYouTubeSafetyMode,                                         1 },
  { key::kHSTSPolicyBypassList,                                          26 },
  { key::kHomepageLocation,                                               2 },
  { key::kHttpsOnlyMode,                                                 27 },
  { key::kIncognitoEnabled,                                               1 },
  { key::kIncognitoModeAvailability,                                      4 },
  { key::kInsecureFormsWarningsEnabled,                                   1 },
  { key::kInsecurePrivateNetworkRequestsAllowed,                          1 },
  { key::kInsecurePrivateNetworkRequestsAllowedForUrls,                   3 },
  { key::kIntensiveWakeUpThrottlingEnabled,                               1 },
  { key::kIsolateOriginsAndroid,                                          2 },
  { key::kJavaScriptAllowedForUrls,                                       3 },
  { key::kJavaScriptBlockedForUrls,                                       3 },
  { key::kJavaScriptJitAllowedForSites,                                   3 },
  { key::kJavaScriptJitBlockedForSites,                                   3 },
  { key::kJavascriptEnabled,                                              1 },
  { key::kLegacySameSiteCookieBehaviorEnabledForDomainList,               3 },
  { key::kLensCameraAssistedSearchEnabled,                                1 },
  { key::kLookalikeWarningAllowlistDomains,                               3 },
  { key::kManagedBookmarks,                                              30 },
  { key::kMetricsReportingEnabled,                                        1 },
  { key::kNTPContentSuggestionsEnabled,                                   1 },
  { key::kNetworkPredictionOptions,                                       4 },
  { key::kNtlmV2Enabled,                                                  1 },
  { key::kOverrideSecurityRestrictionsOnInsecureOrigin,                   3 },
  { key::kPasswordLeakDetectionEnabled,                                   1 },
  { key::kPasswordManagerEnabled,                                         1 },
  { key::kPaymentMethodQueryEnabled,                                      1 },
  { key::kPersistentQuotaEnabled,                                         1 },
  { key::kPolicyAtomicGroupsEnabled,                                      1 },
  { key::kPolicyDictionaryMultipleSourceMergeList,                       32 },
  { key::kPolicyListMultipleSourceMergeList,                              3 },
  { key::kPopupsAllowedForUrls,                                           3 },
  { key::kPopupsBlockedForUrls,                                           3 },
  { key::kPrintingEnabled,                                                1 },
  { key::kPromptForDownloadLocation,                                      1 },
  { key::kProxyBypassList,                                                2 },
  { key::kProxyMode,                                                     33 },
  { key::kProxyPacUrl,                                                    2 },
  { key::kProxyServer,                                                    2 },
  { key::kProxyServerMode,                                               34 },
  { key::kProxySettings,                                                 35 },
  { key::kRestrictAccountsToPatterns,                                     3 },
  { key::kSSLErrorOverrideAllowed,                                        1 },
  { key::kSSLErrorOverrideAllowedForOrigins,                              3 },
  { key::kSSLVersionMin,                                                 37 },
  { key::kSafeBrowsingEnabled,                                            1 },
  { key::kSafeBrowsingExtendedReportingEnabled,                           1 },
  { key::kSafeBrowsingProtectionLevel,                                    4 },
  { key::kSavingBrowserHistoryDisabled,                                   1 },
  { key::kScrollToTextFragmentEnabled,                                    1 },
  { key::kSearchSuggestEnabled,                                           1 },
  { key::kSensorsAllowedForUrls,                                          3 },
  { key::kSensorsBlockedForUrls,                                          3 },
  { key::kSetTimeoutWithout1MsClampEnabled,                               1 },
  { key::kSharedClipboardEnabled,                                         1 },
  { key::kSigninAllowed,                                                  1 },
  { key::kSitePerProcessAndroid,                                          1 },
  { key::kSuppressDifferentOriginSubframeDialogs,                         1 },
  { key::kSyncDisabled,                                                   1 },
  { key::kSyncTypesListDisabled,                                          3 },
  { key::kTosDialogBehavior,                                             13 },
  { key::kTranslateEnabled,                                               1 },
  { key::kURLAllowlist,                                                   3 },
  { key::kURLBlocklist,                                                   3 },
  { key::kUnthrottledNestedTimeoutEnabled,                                1 },
  { key::kUrlKeyedAnonymizedDataCollectionEnabled,                        1 },
  { key::kUrlParamFilterEnabled,                                          1 },
  { key::kUserAgentClientHintsGREASEUpdateEnabled,                        1 },
  { key::kUserAgentReduction,                                             4 },
  { key::kVariationsRestrictParameter,                                    2 },
  { key::kWebRtcUdpPortRange,                                             2 },
  { key::kWebSQLAccess,                                                   1 },
  { key::kWebSQLNonSecureContextEnabled,                                  1 },
  { key::kWebUsbAllowDevicesForUrls,                                     42 },
  { key::kWebUsbAskForUrls,                                               3 },
  { key::kWebUsbBlockedForUrls,                                           3 },
  { key::kWebXRImmersiveArEnabled,                                        1 },
};

const internal::PropertiesNode kProperties[] = {
//  Begin    End  PatternEnd  RequiredBegin  RequiredEnd  Additional Properties
  {     0,     2,     2,     0,          0,    -1 },  // items of BrowsingDataLifetime
  {     2,     3,     3,     0,          0,    -1 },  // items of EnterpriseAuthenticationAppLinkPolicy
  {     3,     5,     5,     0,          2,    -1 },  // members
  {     5,     7,     7,     2,          4,    -1 },  // members
  {     7,     9,     9,     4,          4,    -1 },  // FirstPartySetsOverrides
  {     9,    13,    13,     4,          4,    -1 },  // items of ManagedBookmarks
  {    13,    19,    19,     4,          4,    -1 },  // ProxySettings
  {    19,    21,    21,     4,          4,    -1 },  // items of devices
  {    21,    23,    23,     4,          6,    -1 },  // urls
  {    23,   175,   175,     6,          6,    -1 },  // root node
};

const internal::RestrictionNode kRestrictionNodes[] = {
//   FIRST, SECOND
  {{ 2,          0}},
  {{ 0,          8}},
  {{ INT_MAX,    1}},
  {{ 24,         3}},
  {{ 0,          3}},
  {{ 3,          1}},
  {{ 2,          1}},
  {{ 3,          2}},
  {{ 8,         11}},
  {{ 11,        16}},
  {{ 16,        16}},
  {{ 17,        20}},
  {{ 20,        27}},
  {{ 27,        32}},
  {{ 3,          0}},
  {{ 32,        37}},
  {{ 37,        40}},
  {{ 65535,      0}},
};

const char* const kRequiredProperties[] = {
  "owner",
  "members",
  "owner",
  "members",
  "devices",
  "urls",
};

const int kIntegerEnumerations[] = {
  1,
  2,
  4,
};

const char* const kStringEnumerations[] = {
  "browsing_history",
  "download_history",
  "cookies_and_other_site_data",
  "cached_images_and_files",
  "password_signin",
  "autofill",
  "site_settings",
  "hosted_app_data",
  "off",
  "automatic",
  "secure",
  "554",
  "10080",
  "6566",
  "989",
  "990",
  "^[a-z0-9-]*$",
  "allowed",
  "disallowed",
  "force_enabled",
  "ContentPackManualBehaviorURLs",
  "ExtensionSettings",
  "DeviceLoginScreenPowerManagement",
  "KeyPermissions",
  "PowerManagementIdleSettings",
  "ScreenBrightnessPercent",
  "ScreenLockDelays",
  "direct",
  "auto_detect",
  "pac_script",
  "fixed_servers",
  "system",
  "direct",
  "auto_detect",
  "pac_script",
  "fixed_servers",
  "system",
  "tls1",
  "tls1.1",
  "tls1.2",
};

const internal::SchemaData* GetChromeSchemaData() {
  static const internal::SchemaData kChromeSchemaData = {
    kSchemas,
    kPropertyNodes,
    kProperties,
    kRestrictionNodes,
    kRequiredProperties,
    kIntegerEnumerations,
    kStringEnumerations,
    -1,  // validation_schema root index
  };

  return &kChromeSchemaData;
}


namespace {
bool CompareKeys(const internal::PropertyNode& node,
                 const std::string& key) {
  return node.key < key;
}

}  // namespace

#if BUILDFLAG(IS_CHROMEOS)
void SetEnterpriseUsersProfileDefaults(PolicyMap* policy_map) {
  if (!policy_map->Get(key::kNTPContentSuggestionsEnabled)) {
    
    policy_map->Set(key::kNTPContentSuggestionsEnabled,
                    POLICY_LEVEL_MANDATORY,
                    POLICY_SCOPE_USER,
                    POLICY_SOURCE_ENTERPRISE_DEFAULT,
                    base::Value(false),
                    nullptr);
  }

}

void SetEnterpriseUsersSystemWideDefaults(PolicyMap* policy_map) {
  if (!policy_map->Get(key::kDnsOverHttpsMode)) {
    
    policy_map->Set(key::kDnsOverHttpsMode,
                    POLICY_LEVEL_MANDATORY,
                    POLICY_SCOPE_USER,
                    POLICY_SOURCE_ENTERPRISE_DEFAULT,
                    base::Value("off"),
                    nullptr);
  }

}

void SetEnterpriseUsersDefaults(PolicyMap* policy_map) {
  SetEnterpriseUsersProfileDefaults(policy_map);
  SetEnterpriseUsersSystemWideDefaults(policy_map);
}
#endif

const PolicyDetails* GetChromePolicyDetails(const std::string& policy) {
  // First index in kPropertyNodes of the Chrome policies.
  static const int begin_index = 23;
  // One-past-the-end of the Chrome policies in kPropertyNodes.
  static const int end_index = 175;
  const internal::PropertyNode* begin =
     kPropertyNodes + begin_index;
  const internal::PropertyNode* end = kPropertyNodes + end_index;
  const internal::PropertyNode* it =
      std::lower_bound(begin, end, policy, CompareKeys);
  if (it == end || it->key != policy)
    return nullptr;
  // This relies on kPropertyNodes from begin_index to end_index
  // having exactly the same policies (and in the same order) as
  // kChromePolicyDetails, so that binary searching on the first
  // gets the same results as a binary search on the second would.
  // However, kPropertyNodes has the policy names and
  // kChromePolicyDetails doesn't, so we obtain the index into
  // the second array by searching the first to avoid duplicating
  // the policy name pointers.
  // Offsetting |it| from |begin| here obtains the index we're
  // looking for.
  size_t index = it - begin;
  CHECK_LT(index, std::size(kChromePolicyDetails));
  return kChromePolicyDetails + index;
}

namespace key {

const char kAdditionalDnsQueryTypesEnabled[] = "AdditionalDnsQueryTypesEnabled";
const char kAllHttpAuthSchemesAllowedForOrigins[] = "AllHttpAuthSchemesAllowedForOrigins";
const char kAllowedDomainsForApps[] = "AllowedDomainsForApps";
const char kAlternateErrorPagesEnabled[] = "AlternateErrorPagesEnabled";
const char kAuthAndroidNegotiateAccountType[] = "AuthAndroidNegotiateAccountType";
const char kAuthNegotiateDelegateAllowlist[] = "AuthNegotiateDelegateAllowlist";
const char kAuthSchemes[] = "AuthSchemes";
const char kAuthServerAllowlist[] = "AuthServerAllowlist";
const char kAutoFillEnabled[] = "AutoFillEnabled";
const char kAutofillAddressEnabled[] = "AutofillAddressEnabled";
const char kAutofillCreditCardEnabled[] = "AutofillCreditCardEnabled";
const char kBackForwardCacheEnabled[] = "BackForwardCacheEnabled";
const char kBlockThirdPartyCookies[] = "BlockThirdPartyCookies";
const char kBrowserSignin[] = "BrowserSignin";
const char kBrowsingDataLifetime[] = "BrowsingDataLifetime";
const char kBuiltInDnsClientEnabled[] = "BuiltInDnsClientEnabled";
const char kCECPQ2Enabled[] = "CECPQ2Enabled";
const char kCORSNonWildcardRequestHeadersSupport[] = "CORSNonWildcardRequestHeadersSupport";
const char kCertificateTransparencyEnforcementDisabledForCas[] = "CertificateTransparencyEnforcementDisabledForCas";
const char kCertificateTransparencyEnforcementDisabledForLegacyCas[] = "CertificateTransparencyEnforcementDisabledForLegacyCas";
const char kCertificateTransparencyEnforcementDisabledForUrls[] = "CertificateTransparencyEnforcementDisabledForUrls";
const char kCloudManagementEnrollmentToken[] = "CloudManagementEnrollmentToken";
const char kCloudPolicyOverridesPlatformPolicy[] = "CloudPolicyOverridesPlatformPolicy";
const char kCloudProfileReportingEnabled[] = "CloudProfileReportingEnabled";
const char kCloudReportingEnabled[] = "CloudReportingEnabled";
const char kCloudReportingUploadFrequency[] = "CloudReportingUploadFrequency";
const char kCloudUserPolicyMerge[] = "CloudUserPolicyMerge";
const char kCloudUserPolicyOverridesCloudMachinePolicy[] = "CloudUserPolicyOverridesCloudMachinePolicy";
const char kCoalesceH2ConnectionsWithClientCertificatesForHosts[] = "CoalesceH2ConnectionsWithClientCertificatesForHosts";
const char kComponentUpdatesEnabled[] = "ComponentUpdatesEnabled";
const char kContextualSearchEnabled[] = "ContextualSearchEnabled";
const char kCookiesAllowedForUrls[] = "CookiesAllowedForUrls";
const char kCookiesBlockedForUrls[] = "CookiesBlockedForUrls";
const char kCookiesSessionOnlyForUrls[] = "CookiesSessionOnlyForUrls";
const char kDefaultCookiesSetting[] = "DefaultCookiesSetting";
const char kDefaultGeolocationSetting[] = "DefaultGeolocationSetting";
const char kDefaultJavaScriptJitSetting[] = "DefaultJavaScriptJitSetting";
const char kDefaultJavaScriptSetting[] = "DefaultJavaScriptSetting";
const char kDefaultPopupsSetting[] = "DefaultPopupsSetting";
const char kDefaultSearchProviderAlternateURLs[] = "DefaultSearchProviderAlternateURLs";
const char kDefaultSearchProviderEnabled[] = "DefaultSearchProviderEnabled";
const char kDefaultSearchProviderEncodings[] = "DefaultSearchProviderEncodings";
const char kDefaultSearchProviderIconURL[] = "DefaultSearchProviderIconURL";
const char kDefaultSearchProviderImageURL[] = "DefaultSearchProviderImageURL";
const char kDefaultSearchProviderImageURLPostParams[] = "DefaultSearchProviderImageURLPostParams";
const char kDefaultSearchProviderKeyword[] = "DefaultSearchProviderKeyword";
const char kDefaultSearchProviderName[] = "DefaultSearchProviderName";
const char kDefaultSearchProviderNewTabURL[] = "DefaultSearchProviderNewTabURL";
const char kDefaultSearchProviderSearchURL[] = "DefaultSearchProviderSearchURL";
const char kDefaultSearchProviderSearchURLPostParams[] = "DefaultSearchProviderSearchURLPostParams";
const char kDefaultSearchProviderSuggestURL[] = "DefaultSearchProviderSuggestURL";
const char kDefaultSearchProviderSuggestURLPostParams[] = "DefaultSearchProviderSuggestURLPostParams";
const char kDefaultSensorsSetting[] = "DefaultSensorsSetting";
const char kDefaultWebBluetoothGuardSetting[] = "DefaultWebBluetoothGuardSetting";
const char kDefaultWebUsbGuardSetting[] = "DefaultWebUsbGuardSetting";
const char kDisableAuthNegotiateCnameLookup[] = "DisableAuthNegotiateCnameLookup";
const char kDisableSafeBrowsingProceedAnyway[] = "DisableSafeBrowsingProceedAnyway";
const char kDnsOverHttpsMode[] = "DnsOverHttpsMode";
const char kDnsOverHttpsTemplates[] = "DnsOverHttpsTemplates";
const char kEditBookmarksEnabled[] = "EditBookmarksEnabled";
const char kEnableExperimentalPolicies[] = "EnableExperimentalPolicies";
const char kEnableMediaRouter[] = "EnableMediaRouter";
const char kEncryptedClientHelloEnabled[] = "EncryptedClientHelloEnabled";
const char kEnterpriseAuthenticationAppLinkPolicy[] = "EnterpriseAuthenticationAppLinkPolicy";
const char kEnterpriseHardwarePlatformAPIEnabled[] = "EnterpriseHardwarePlatformAPIEnabled";
const char kEventPathEnabled[] = "EventPathEnabled";
const char kExplicitlyAllowedNetworkPorts[] = "ExplicitlyAllowedNetworkPorts";
const char kFirstPartySetsEnabled[] = "FirstPartySetsEnabled";
const char kFirstPartySetsOverrides[] = "FirstPartySetsOverrides";
const char kForceBrowserSignin[] = "ForceBrowserSignin";
const char kForceGoogleSafeSearch[] = "ForceGoogleSafeSearch";
const char kForceMajorVersionToMinorPositionInUserAgent[] = "ForceMajorVersionToMinorPositionInUserAgent";
const char kForceSafeSearch[] = "ForceSafeSearch";
const char kForceYouTubeRestrict[] = "ForceYouTubeRestrict";
const char kForceYouTubeSafetyMode[] = "ForceYouTubeSafetyMode";
const char kHSTSPolicyBypassList[] = "HSTSPolicyBypassList";
const char kHomepageLocation[] = "HomepageLocation";
const char kHttpsOnlyMode[] = "HttpsOnlyMode";
const char kIncognitoEnabled[] = "IncognitoEnabled";
const char kIncognitoModeAvailability[] = "IncognitoModeAvailability";
const char kInsecureFormsWarningsEnabled[] = "InsecureFormsWarningsEnabled";
const char kInsecurePrivateNetworkRequestsAllowed[] = "InsecurePrivateNetworkRequestsAllowed";
const char kInsecurePrivateNetworkRequestsAllowedForUrls[] = "InsecurePrivateNetworkRequestsAllowedForUrls";
const char kIntensiveWakeUpThrottlingEnabled[] = "IntensiveWakeUpThrottlingEnabled";
const char kIsolateOriginsAndroid[] = "IsolateOriginsAndroid";
const char kJavaScriptAllowedForUrls[] = "JavaScriptAllowedForUrls";
const char kJavaScriptBlockedForUrls[] = "JavaScriptBlockedForUrls";
const char kJavaScriptJitAllowedForSites[] = "JavaScriptJitAllowedForSites";
const char kJavaScriptJitBlockedForSites[] = "JavaScriptJitBlockedForSites";
const char kJavascriptEnabled[] = "JavascriptEnabled";
const char kLegacySameSiteCookieBehaviorEnabledForDomainList[] = "LegacySameSiteCookieBehaviorEnabledForDomainList";
const char kLensCameraAssistedSearchEnabled[] = "LensCameraAssistedSearchEnabled";
const char kLookalikeWarningAllowlistDomains[] = "LookalikeWarningAllowlistDomains";
const char kManagedBookmarks[] = "ManagedBookmarks";
const char kMetricsReportingEnabled[] = "MetricsReportingEnabled";
const char kNTPContentSuggestionsEnabled[] = "NTPContentSuggestionsEnabled";
const char kNetworkPredictionOptions[] = "NetworkPredictionOptions";
const char kNtlmV2Enabled[] = "NtlmV2Enabled";
const char kOverrideSecurityRestrictionsOnInsecureOrigin[] = "OverrideSecurityRestrictionsOnInsecureOrigin";
const char kPasswordLeakDetectionEnabled[] = "PasswordLeakDetectionEnabled";
const char kPasswordManagerEnabled[] = "PasswordManagerEnabled";
const char kPaymentMethodQueryEnabled[] = "PaymentMethodQueryEnabled";
const char kPersistentQuotaEnabled[] = "PersistentQuotaEnabled";
const char kPolicyAtomicGroupsEnabled[] = "PolicyAtomicGroupsEnabled";
const char kPolicyDictionaryMultipleSourceMergeList[] = "PolicyDictionaryMultipleSourceMergeList";
const char kPolicyListMultipleSourceMergeList[] = "PolicyListMultipleSourceMergeList";
const char kPopupsAllowedForUrls[] = "PopupsAllowedForUrls";
const char kPopupsBlockedForUrls[] = "PopupsBlockedForUrls";
const char kPrintingEnabled[] = "PrintingEnabled";
const char kPromptForDownloadLocation[] = "PromptForDownloadLocation";
const char kProxyBypassList[] = "ProxyBypassList";
const char kProxyMode[] = "ProxyMode";
const char kProxyPacUrl[] = "ProxyPacUrl";
const char kProxyServer[] = "ProxyServer";
const char kProxyServerMode[] = "ProxyServerMode";
const char kProxySettings[] = "ProxySettings";
const char kRestrictAccountsToPatterns[] = "RestrictAccountsToPatterns";
const char kSSLErrorOverrideAllowed[] = "SSLErrorOverrideAllowed";
const char kSSLErrorOverrideAllowedForOrigins[] = "SSLErrorOverrideAllowedForOrigins";
const char kSSLVersionMin[] = "SSLVersionMin";
const char kSafeBrowsingEnabled[] = "SafeBrowsingEnabled";
const char kSafeBrowsingExtendedReportingEnabled[] = "SafeBrowsingExtendedReportingEnabled";
const char kSafeBrowsingProtectionLevel[] = "SafeBrowsingProtectionLevel";
const char kSavingBrowserHistoryDisabled[] = "SavingBrowserHistoryDisabled";
const char kScrollToTextFragmentEnabled[] = "ScrollToTextFragmentEnabled";
const char kSearchSuggestEnabled[] = "SearchSuggestEnabled";
const char kSensorsAllowedForUrls[] = "SensorsAllowedForUrls";
const char kSensorsBlockedForUrls[] = "SensorsBlockedForUrls";
const char kSetTimeoutWithout1MsClampEnabled[] = "SetTimeoutWithout1MsClampEnabled";
const char kSharedClipboardEnabled[] = "SharedClipboardEnabled";
const char kSigninAllowed[] = "SigninAllowed";
const char kSitePerProcessAndroid[] = "SitePerProcessAndroid";
const char kSuppressDifferentOriginSubframeDialogs[] = "SuppressDifferentOriginSubframeDialogs";
const char kSyncDisabled[] = "SyncDisabled";
const char kSyncTypesListDisabled[] = "SyncTypesListDisabled";
const char kTosDialogBehavior[] = "TosDialogBehavior";
const char kTranslateEnabled[] = "TranslateEnabled";
const char kURLAllowlist[] = "URLAllowlist";
const char kURLBlocklist[] = "URLBlocklist";
const char kUnthrottledNestedTimeoutEnabled[] = "UnthrottledNestedTimeoutEnabled";
const char kUrlKeyedAnonymizedDataCollectionEnabled[] = "UrlKeyedAnonymizedDataCollectionEnabled";
const char kUrlParamFilterEnabled[] = "UrlParamFilterEnabled";
const char kUserAgentClientHintsGREASEUpdateEnabled[] = "UserAgentClientHintsGREASEUpdateEnabled";
const char kUserAgentReduction[] = "UserAgentReduction";
const char kVariationsRestrictParameter[] = "VariationsRestrictParameter";
const char kWebRtcUdpPortRange[] = "WebRtcUdpPortRange";
const char kWebSQLAccess[] = "WebSQLAccess";
const char kWebSQLNonSecureContextEnabled[] = "WebSQLNonSecureContextEnabled";
const char kWebUsbAllowDevicesForUrls[] = "WebUsbAllowDevicesForUrls";
const char kWebUsbAskForUrls[] = "WebUsbAskForUrls";
const char kWebUsbBlockedForUrls[] = "WebUsbBlockedForUrls";
const char kWebXRImmersiveArEnabled[] = "WebXRImmersiveArEnabled";

}  // namespace key

namespace group {

const char kActiveDirectoryManagement[] = "ActiveDirectoryManagement";
const char kAttestation[] = "Attestation";
const char kBrowserSwitcher[] = "BrowserSwitcher";
const char kCloudReporting[] = "CloudReporting";
const char kCookiesSettings[] = "CookiesSettings";
const char kDateAndTime[] = "DateAndTime";
const char kDefaultSearchProvider[] = "DefaultSearchProvider";
const char kDisplay[] = "Display";
const char kDrive[] = "Drive";
const char kExtensions[] = "Extensions";
const char kGoogleCast[] = "GoogleCast";
const char kHomepage[] = "Homepage";
const char kImageSettings[] = "ImageSettings";
const char kJavascriptSettings[] = "JavascriptSettings";
const char kKeygenSettings[] = "KeygenSettings";
const char kKiosk[] = "Kiosk";
const char kLegacySameSiteCookieBehaviorSettings[] = "LegacySameSiteCookieBehaviorSettings";
const char kLocalFontsSettings[] = "LocalFontsSettings";
const char kLoginScreenOrigins[] = "LoginScreenOrigins";
const char kNativeMessaging[] = "NativeMessaging";
const char kNetworkFileShares[] = "NetworkFileShares";
const char kNotificationsSettings[] = "NotificationsSettings";
const char kPasswordManager[] = "PasswordManager";
const char kPasswordProtection[] = "PasswordProtection";
const char kPinUnlock[] = "PinUnlock";
const char kPluginVm[] = "PluginVm";
const char kPluginsSettings[] = "PluginsSettings";
const char kPopupsSettings[] = "PopupsSettings";
const char kPrivateNetworkRequestSettings[] = "PrivateNetworkRequestSettings";
const char kProxy[] = "Proxy";
const char kQuickUnlock[] = "QuickUnlock";
const char kRemoteAccess[] = "RemoteAccess";
const char kRestoreOnStartup[] = "RestoreOnStartup";
const char kSAML[] = "SAML";
const char kSafeBrowsing[] = "SafeBrowsing";
const char kScreenCaptureSettings[] = "ScreenCaptureSettings";
const char kSensorsSettings[] = "SensorsSettings";
const char kSupervisedUsers[] = "SupervisedUsers";
const char kUserAndDeviceReporting[] = "UserAndDeviceReporting";
const char kWebUsbSettings[] = "WebUsbSettings";
const char kWiFi[] = "WiFi";
const char kWindowPlacementSettings[] = "WindowPlacementSettings";

namespace {

const char* const ActiveDirectoryManagement[] = {nullptr};
const char* const Attestation[] = {nullptr};
const char* const BrowserSwitcher[] = {nullptr};
const char* const CloudReporting[] = {key::kCloudReportingEnabled, key::kCloudProfileReportingEnabled, key::kCloudReportingUploadFrequency, nullptr};
const char* const CookiesSettings[] = {key::kDefaultCookiesSetting, key::kCookiesAllowedForUrls, key::kCookiesBlockedForUrls, key::kCookiesSessionOnlyForUrls, nullptr};
const char* const DateAndTime[] = {nullptr};
const char* const DefaultSearchProvider[] = {key::kDefaultSearchProviderEnabled, key::kDefaultSearchProviderName, key::kDefaultSearchProviderKeyword, key::kDefaultSearchProviderSearchURL, key::kDefaultSearchProviderSuggestURL, key::kDefaultSearchProviderIconURL, key::kDefaultSearchProviderEncodings, key::kDefaultSearchProviderAlternateURLs, key::kDefaultSearchProviderImageURL, key::kDefaultSearchProviderNewTabURL, key::kDefaultSearchProviderSearchURLPostParams, key::kDefaultSearchProviderSuggestURLPostParams, key::kDefaultSearchProviderImageURLPostParams, nullptr};
const char* const Display[] = {nullptr};
const char* const Drive[] = {nullptr};
const char* const Extensions[] = {nullptr};
const char* const GoogleCast[] = {nullptr};
const char* const Homepage[] = {key::kHomepageLocation, nullptr};
const char* const ImageSettings[] = {nullptr};
const char* const JavascriptSettings[] = {key::kDefaultJavaScriptSetting, key::kJavaScriptAllowedForUrls, key::kJavaScriptBlockedForUrls, nullptr};
const char* const KeygenSettings[] = {nullptr};
const char* const Kiosk[] = {nullptr};
const char* const LegacySameSiteCookieBehaviorSettings[] = {key::kLegacySameSiteCookieBehaviorEnabledForDomainList, nullptr};
const char* const LocalFontsSettings[] = {nullptr};
const char* const LoginScreenOrigins[] = {nullptr};
const char* const NativeMessaging[] = {nullptr};
const char* const NetworkFileShares[] = {nullptr};
const char* const NotificationsSettings[] = {nullptr};
const char* const PasswordManager[] = {key::kPasswordManagerEnabled, nullptr};
const char* const PasswordProtection[] = {nullptr};
const char* const PinUnlock[] = {nullptr};
const char* const PluginVm[] = {nullptr};
const char* const PluginsSettings[] = {nullptr};
const char* const PopupsSettings[] = {key::kDefaultPopupsSetting, key::kPopupsAllowedForUrls, key::kPopupsBlockedForUrls, nullptr};
const char* const PrivateNetworkRequestSettings[] = {key::kInsecurePrivateNetworkRequestsAllowed, key::kInsecurePrivateNetworkRequestsAllowedForUrls, nullptr};
const char* const Proxy[] = {key::kProxyMode, key::kProxyServerMode, key::kProxyServer, key::kProxyPacUrl, key::kProxyBypassList, key::kProxySettings, nullptr};
const char* const QuickUnlock[] = {nullptr};
const char* const RemoteAccess[] = {nullptr};
const char* const RestoreOnStartup[] = {nullptr};
const char* const SAML[] = {nullptr};
const char* const SafeBrowsing[] = {key::kSafeBrowsingEnabled, key::kSafeBrowsingExtendedReportingEnabled, key::kSafeBrowsingProtectionLevel, nullptr};
const char* const ScreenCaptureSettings[] = {nullptr};
const char* const SensorsSettings[] = {key::kDefaultSensorsSetting, key::kSensorsAllowedForUrls, key::kSensorsBlockedForUrls, nullptr};
const char* const SupervisedUsers[] = {nullptr};
const char* const UserAndDeviceReporting[] = {nullptr};
const char* const WebUsbSettings[] = {key::kDefaultWebUsbGuardSetting, key::kWebUsbAllowDevicesForUrls, key::kWebUsbAskForUrls, key::kWebUsbBlockedForUrls, nullptr};
const char* const WiFi[] = {nullptr};
const char* const WindowPlacementSettings[] = {nullptr};

}  // namespace

}  // namespace group

const AtomicGroup kPolicyAtomicGroupMappings[] = {
  {  37, group::kActiveDirectoryManagement, group::ActiveDirectoryManagement  },
  {  18, group::kAttestation, group::Attestation  },
  {  28, group::kBrowserSwitcher, group::BrowserSwitcher  },
  {  27, group::kCloudReporting, group::CloudReporting  },
  {  9, group::kCookiesSettings, group::CookiesSettings  },
  {  35, group::kDateAndTime, group::DateAndTime  },
  {  7, group::kDefaultSearchProvider, group::DefaultSearchProvider  },
  {  36, group::kDisplay, group::Display  },
  {  17, group::kDrive, group::Drive  },
  {  5, group::kExtensions, group::Extensions  },
  {  21, group::kGoogleCast, group::GoogleCast  },
  {  1, group::kHomepage, group::Homepage  },
  {  8, group::kImageSettings, group::ImageSettings  },
  {  10, group::kJavascriptSettings, group::JavascriptSettings  },
  {  13, group::kKeygenSettings, group::KeygenSettings  },
  {  34, group::kKiosk, group::Kiosk  },
  {  38, group::kLegacySameSiteCookieBehaviorSettings, group::LegacySameSiteCookieBehaviorSettings  },
  {  43, group::kLocalFontsSettings, group::LocalFontsSettings  },
  {  31, group::kLoginScreenOrigins, group::LoginScreenOrigins  },
  {  16, group::kNativeMessaging, group::NativeMessaging  },
  {  26, group::kNetworkFileShares, group::NetworkFileShares  },
  {  14, group::kNotificationsSettings, group::NotificationsSettings  },
  {  3, group::kPasswordManager, group::PasswordManager  },
  {  25, group::kPasswordProtection, group::PasswordProtection  },
  {  23, group::kPinUnlock, group::PinUnlock  },
  {  29, group::kPluginVm, group::PluginVm  },
  {  11, group::kPluginsSettings, group::PluginsSettings  },
  {  12, group::kPopupsSettings, group::PopupsSettings  },
  {  40, group::kPrivateNetworkRequestSettings, group::PrivateNetworkRequestSettings  },
  {  4, group::kProxy, group::Proxy  },
  {  22, group::kQuickUnlock, group::QuickUnlock  },
  {  2, group::kRemoteAccess, group::RemoteAccess  },
  {  6, group::kRestoreOnStartup, group::RestoreOnStartup  },
  {  30, group::kSAML, group::SAML  },
  {  24, group::kSafeBrowsing, group::SafeBrowsing  },
  {  41, group::kScreenCaptureSettings, group::ScreenCaptureSettings  },
  {  39, group::kSensorsSettings, group::SensorsSettings  },
  {  20, group::kSupervisedUsers, group::SupervisedUsers  },
  {  32, group::kUserAndDeviceReporting, group::UserAndDeviceReporting  },
  {  15, group::kWebUsbSettings, group::WebUsbSettings  },
  {  33, group::kWiFi, group::WiFi  },
  {  42, group::kWindowPlacementSettings, group::WindowPlacementSettings  },
};

const size_t kPolicyAtomicGroupMappingsLength = 42;

namespace metapolicy {

const char* const kMerge[3] = {
  key::kCloudUserPolicyMerge,
  key::kPolicyDictionaryMultipleSourceMergeList,
  key::kPolicyListMultipleSourceMergeList,
};

const char* const kPrecedence[2] = {
  key::kCloudPolicyOverridesPlatformPolicy,
  key::kCloudUserPolicyOverridesCloudMachinePolicy,
};

}  // namespace metapolicy

const std::array<BooleanPolicyAccess, 66> kBooleanPolicyAccess {{
  {key::kAdditionalDnsQueryTypesEnabled,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_additionaldnsquerytypesenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.additionaldnsquerytypesenabled();
   }
  },
  {key::kAlternateErrorPagesEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_alternateerrorpagesenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.alternateerrorpagesenabled();
   }
  },
  {key::kAutoFillEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_autofillenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.autofillenabled();
   }
  },
  {key::kAutofillAddressEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_autofilladdressenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.autofilladdressenabled();
   }
  },
  {key::kAutofillCreditCardEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_autofillcreditcardenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.autofillcreditcardenabled();
   }
  },
  {key::kBackForwardCacheEnabled,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_backforwardcacheenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.backforwardcacheenabled();
   }
  },
  {key::kBlockThirdPartyCookies,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_blockthirdpartycookies();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.blockthirdpartycookies();
   }
  },
  {key::kBuiltInDnsClientEnabled,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_builtindnsclientenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.builtindnsclientenabled();
   }
  },
  {key::kCECPQ2Enabled,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_cecpq2enabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.cecpq2enabled();
   }
  },
  {key::kCORSNonWildcardRequestHeadersSupport,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_corsnonwildcardrequestheaderssupport();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.corsnonwildcardrequestheaderssupport();
   }
  },
  {key::kCloudPolicyOverridesPlatformPolicy,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_cloudpolicyoverridesplatformpolicy();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.cloudpolicyoverridesplatformpolicy();
   }
  },
  {key::kCloudProfileReportingEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_cloudprofilereportingenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.cloudprofilereportingenabled();
   }
  },
  {key::kCloudReportingEnabled,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_cloudreportingenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.cloudreportingenabled();
   }
  },
  {key::kCloudUserPolicyMerge,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_clouduserpolicymerge();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.clouduserpolicymerge();
   }
  },
  {key::kCloudUserPolicyOverridesCloudMachinePolicy,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_clouduserpolicyoverridescloudmachinepolicy();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.clouduserpolicyoverridescloudmachinepolicy();
   }
  },
  {key::kComponentUpdatesEnabled,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_componentupdatesenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.componentupdatesenabled();
   }
  },
  {key::kContextualSearchEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_contextualsearchenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.contextualsearchenabled();
   }
  },
  {key::kDefaultSearchProviderEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultsearchproviderenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.defaultsearchproviderenabled();
   }
  },
  {key::kDisableAuthNegotiateCnameLookup,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_disableauthnegotiatecnamelookup();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.disableauthnegotiatecnamelookup();
   }
  },
  {key::kDisableSafeBrowsingProceedAnyway,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_disablesafebrowsingproceedanyway();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.disablesafebrowsingproceedanyway();
   }
  },
  {key::kEditBookmarksEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_editbookmarksenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.editbookmarksenabled();
   }
  },
  {key::kEnableMediaRouter,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_enablemediarouter();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.enablemediarouter();
   }
  },
  {key::kEncryptedClientHelloEnabled,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_encryptedclienthelloenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.encryptedclienthelloenabled();
   }
  },
  {key::kEnterpriseHardwarePlatformAPIEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_enterprisehardwareplatformapienabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.enterprisehardwareplatformapienabled();
   }
  },
  {key::kEventPathEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_eventpathenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.eventpathenabled();
   }
  },
  {key::kFirstPartySetsEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_firstpartysetsenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.firstpartysetsenabled();
   }
  },
  {key::kForceBrowserSignin,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_forcebrowsersignin();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.forcebrowsersignin();
   }
  },
  {key::kForceGoogleSafeSearch,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_forcegooglesafesearch();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.forcegooglesafesearch();
   }
  },
  {key::kForceSafeSearch,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_forcesafesearch();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.forcesafesearch();
   }
  },
  {key::kForceYouTubeSafetyMode,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_forceyoutubesafetymode();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.forceyoutubesafetymode();
   }
  },
  {key::kIncognitoEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_incognitoenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.incognitoenabled();
   }
  },
  {key::kInsecureFormsWarningsEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_insecureformswarningsenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.insecureformswarningsenabled();
   }
  },
  {key::kInsecurePrivateNetworkRequestsAllowed,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_insecureprivatenetworkrequestsallowed();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.insecureprivatenetworkrequestsallowed();
   }
  },
  {key::kIntensiveWakeUpThrottlingEnabled,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_intensivewakeupthrottlingenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.intensivewakeupthrottlingenabled();
   }
  },
  {key::kJavascriptEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_javascriptenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.javascriptenabled();
   }
  },
  {key::kLensCameraAssistedSearchEnabled,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_lenscameraassistedsearchenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.lenscameraassistedsearchenabled();
   }
  },
  {key::kMetricsReportingEnabled,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_metricsreportingenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.metricsreportingenabled();
   }
  },
  {key::kNTPContentSuggestionsEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_ntpcontentsuggestionsenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.ntpcontentsuggestionsenabled();
   }
  },
  {key::kNtlmV2Enabled,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_ntlmv2enabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.ntlmv2enabled();
   }
  },
  {key::kPasswordLeakDetectionEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_passwordleakdetectionenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.passwordleakdetectionenabled();
   }
  },
  {key::kPasswordManagerEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_passwordmanagerenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.passwordmanagerenabled();
   }
  },
  {key::kPaymentMethodQueryEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_paymentmethodqueryenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.paymentmethodqueryenabled();
   }
  },
  {key::kPersistentQuotaEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_persistentquotaenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.persistentquotaenabled();
   }
  },
  {key::kPolicyAtomicGroupsEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_policyatomicgroupsenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.policyatomicgroupsenabled();
   }
  },
  {key::kPrintingEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_printingenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.printingenabled();
   }
  },
  {key::kPromptForDownloadLocation,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_promptfordownloadlocation();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.promptfordownloadlocation();
   }
  },
  {key::kSSLErrorOverrideAllowed,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_sslerroroverrideallowed();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.sslerroroverrideallowed();
   }
  },
  {key::kSafeBrowsingEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_safebrowsingenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.safebrowsingenabled();
   }
  },
  {key::kSafeBrowsingExtendedReportingEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_safebrowsingextendedreportingenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.safebrowsingextendedreportingenabled();
   }
  },
  {key::kSavingBrowserHistoryDisabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_savingbrowserhistorydisabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.savingbrowserhistorydisabled();
   }
  },
  {key::kScrollToTextFragmentEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_scrolltotextfragmentenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.scrolltotextfragmentenabled();
   }
  },
  {key::kSearchSuggestEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_searchsuggestenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.searchsuggestenabled();
   }
  },
  {key::kSetTimeoutWithout1MsClampEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_settimeoutwithout1msclampenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.settimeoutwithout1msclampenabled();
   }
  },
  {key::kSharedClipboardEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_sharedclipboardenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.sharedclipboardenabled();
   }
  },
  {key::kSigninAllowed,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_signinallowed();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.signinallowed();
   }
  },
  {key::kSitePerProcessAndroid,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_siteperprocessandroid();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.siteperprocessandroid();
   }
  },
  {key::kSuppressDifferentOriginSubframeDialogs,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_suppressdifferentoriginsubframedialogs();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.suppressdifferentoriginsubframedialogs();
   }
  },
  {key::kSyncDisabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_syncdisabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.syncdisabled();
   }
  },
  {key::kTranslateEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_translateenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.translateenabled();
   }
  },
  {key::kUnthrottledNestedTimeoutEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_unthrottlednestedtimeoutenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.unthrottlednestedtimeoutenabled();
   }
  },
  {key::kUrlKeyedAnonymizedDataCollectionEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_urlkeyedanonymizeddatacollectionenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.urlkeyedanonymizeddatacollectionenabled();
   }
  },
  {key::kUrlParamFilterEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_urlparamfilterenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.urlparamfilterenabled();
   }
  },
  {key::kUserAgentClientHintsGREASEUpdateEnabled,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_useragentclienthintsgreaseupdateenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.useragentclienthintsgreaseupdateenabled();
   }
  },
  {key::kWebSQLAccess,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_websqlaccess();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.websqlaccess();
   }
  },
  {key::kWebSQLNonSecureContextEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_websqlnonsecurecontextenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.websqlnonsecurecontextenabled();
   }
  },
  {key::kWebXRImmersiveArEnabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_webxrimmersivearenabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::BooleanPolicyProto& {
     return policy.webxrimmersivearenabled();
   }
  },
}};

const std::array<IntegerPolicyAccess, 18> kIntegerPolicyAccess {{
  {key::kBrowserSignin,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_browsersignin();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::IntegerPolicyProto& {
     return policy.browsersignin();
   }
  },
  {key::kCloudReportingUploadFrequency,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_cloudreportinguploadfrequency();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::IntegerPolicyProto& {
     return policy.cloudreportinguploadfrequency();
   }
  },
  {key::kDefaultCookiesSetting,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultcookiessetting();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::IntegerPolicyProto& {
     return policy.defaultcookiessetting();
   }
  },
  {key::kDefaultGeolocationSetting,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultgeolocationsetting();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::IntegerPolicyProto& {
     return policy.defaultgeolocationsetting();
   }
  },
  {key::kDefaultJavaScriptJitSetting,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultjavascriptjitsetting();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::IntegerPolicyProto& {
     return policy.defaultjavascriptjitsetting();
   }
  },
  {key::kDefaultJavaScriptSetting,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultjavascriptsetting();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::IntegerPolicyProto& {
     return policy.defaultjavascriptsetting();
   }
  },
  {key::kDefaultPopupsSetting,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultpopupssetting();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::IntegerPolicyProto& {
     return policy.defaultpopupssetting();
   }
  },
  {key::kDefaultSensorsSetting,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultsensorssetting();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::IntegerPolicyProto& {
     return policy.defaultsensorssetting();
   }
  },
  {key::kDefaultWebBluetoothGuardSetting,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultwebbluetoothguardsetting();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::IntegerPolicyProto& {
     return policy.defaultwebbluetoothguardsetting();
   }
  },
  {key::kDefaultWebUsbGuardSetting,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultwebusbguardsetting();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::IntegerPolicyProto& {
     return policy.defaultwebusbguardsetting();
   }
  },
  {key::kForceMajorVersionToMinorPositionInUserAgent,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_forcemajorversiontominorpositioninuseragent();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::IntegerPolicyProto& {
     return policy.forcemajorversiontominorpositioninuseragent();
   }
  },
  {key::kForceYouTubeRestrict,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_forceyoutuberestrict();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::IntegerPolicyProto& {
     return policy.forceyoutuberestrict();
   }
  },
  {key::kIncognitoModeAvailability,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_incognitomodeavailability();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::IntegerPolicyProto& {
     return policy.incognitomodeavailability();
   }
  },
  {key::kNetworkPredictionOptions,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_networkpredictionoptions();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::IntegerPolicyProto& {
     return policy.networkpredictionoptions();
   }
  },
  {key::kProxyServerMode,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_proxyservermode();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::IntegerPolicyProto& {
     return policy.proxyservermode();
   }
  },
  {key::kSafeBrowsingProtectionLevel,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_safebrowsingprotectionlevel();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::IntegerPolicyProto& {
     return policy.safebrowsingprotectionlevel();
   }
  },
  {key::kTosDialogBehavior,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_tosdialogbehavior();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::IntegerPolicyProto& {
     return policy.tosdialogbehavior();
   }
  },
  {key::kUserAgentReduction,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_useragentreduction();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::IntegerPolicyProto& {
     return policy.useragentreduction();
   }
  },
}};

const std::array<StringPolicyAccess, 34> kStringPolicyAccess {{
  {key::kAllowedDomainsForApps,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_alloweddomainsforapps();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.alloweddomainsforapps();
   },
   StringPolicyType::STRING
  },
  {key::kAuthAndroidNegotiateAccountType,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_authandroidnegotiateaccounttype();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.authandroidnegotiateaccounttype();
   },
   StringPolicyType::STRING
  },
  {key::kAuthNegotiateDelegateAllowlist,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_authnegotiatedelegateallowlist();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.authnegotiatedelegateallowlist();
   },
   StringPolicyType::STRING
  },
  {key::kAuthSchemes,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_authschemes();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.authschemes();
   },
   StringPolicyType::STRING
  },
  {key::kAuthServerAllowlist,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_authserverallowlist();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.authserverallowlist();
   },
   StringPolicyType::STRING
  },
  {key::kBrowsingDataLifetime,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_browsingdatalifetime();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.browsingdatalifetime();
   },
   StringPolicyType::JSON
  },
  {key::kCloudManagementEnrollmentToken,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_cloudmanagementenrollmenttoken();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.cloudmanagementenrollmenttoken();
   },
   StringPolicyType::STRING
  },
  {key::kDefaultSearchProviderIconURL,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultsearchprovidericonurl();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.defaultsearchprovidericonurl();
   },
   StringPolicyType::STRING
  },
  {key::kDefaultSearchProviderImageURL,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultsearchproviderimageurl();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.defaultsearchproviderimageurl();
   },
   StringPolicyType::STRING
  },
  {key::kDefaultSearchProviderImageURLPostParams,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultsearchproviderimageurlpostparams();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.defaultsearchproviderimageurlpostparams();
   },
   StringPolicyType::STRING
  },
  {key::kDefaultSearchProviderKeyword,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultsearchproviderkeyword();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.defaultsearchproviderkeyword();
   },
   StringPolicyType::STRING
  },
  {key::kDefaultSearchProviderName,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultsearchprovidername();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.defaultsearchprovidername();
   },
   StringPolicyType::STRING
  },
  {key::kDefaultSearchProviderNewTabURL,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultsearchprovidernewtaburl();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.defaultsearchprovidernewtaburl();
   },
   StringPolicyType::STRING
  },
  {key::kDefaultSearchProviderSearchURL,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultsearchprovidersearchurl();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.defaultsearchprovidersearchurl();
   },
   StringPolicyType::STRING
  },
  {key::kDefaultSearchProviderSearchURLPostParams,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultsearchprovidersearchurlpostparams();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.defaultsearchprovidersearchurlpostparams();
   },
   StringPolicyType::STRING
  },
  {key::kDefaultSearchProviderSuggestURL,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultsearchprovidersuggesturl();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.defaultsearchprovidersuggesturl();
   },
   StringPolicyType::STRING
  },
  {key::kDefaultSearchProviderSuggestURLPostParams,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultsearchprovidersuggesturlpostparams();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.defaultsearchprovidersuggesturlpostparams();
   },
   StringPolicyType::STRING
  },
  {key::kDnsOverHttpsMode,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_dnsoverhttpsmode();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.dnsoverhttpsmode();
   },
   StringPolicyType::STRING
  },
  {key::kDnsOverHttpsTemplates,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_dnsoverhttpstemplates();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.dnsoverhttpstemplates();
   },
   StringPolicyType::STRING
  },
  {key::kEnterpriseAuthenticationAppLinkPolicy,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_enterpriseauthenticationapplinkpolicy();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.enterpriseauthenticationapplinkpolicy();
   },
   StringPolicyType::JSON
  },
  {key::kFirstPartySetsOverrides,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_firstpartysetsoverrides();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.firstpartysetsoverrides();
   },
   StringPolicyType::JSON
  },
  {key::kHomepageLocation,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_homepagelocation();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.homepagelocation();
   },
   StringPolicyType::STRING
  },
  {key::kHttpsOnlyMode,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_httpsonlymode();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.httpsonlymode();
   },
   StringPolicyType::STRING
  },
  {key::kIsolateOriginsAndroid,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_isolateoriginsandroid();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.isolateoriginsandroid();
   },
   StringPolicyType::STRING
  },
  {key::kManagedBookmarks,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_managedbookmarks();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.managedbookmarks();
   },
   StringPolicyType::JSON
  },
  {key::kProxyBypassList,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_proxybypasslist();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.proxybypasslist();
   },
   StringPolicyType::STRING
  },
  {key::kProxyMode,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_proxymode();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.proxymode();
   },
   StringPolicyType::STRING
  },
  {key::kProxyPacUrl,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_proxypacurl();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.proxypacurl();
   },
   StringPolicyType::STRING
  },
  {key::kProxyServer,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_proxyserver();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.proxyserver();
   },
   StringPolicyType::STRING
  },
  {key::kProxySettings,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_proxysettings();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.proxysettings();
   },
   StringPolicyType::JSON
  },
  {key::kSSLVersionMin,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_sslversionmin();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.sslversionmin();
   },
   StringPolicyType::STRING
  },
  {key::kVariationsRestrictParameter,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_variationsrestrictparameter();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.variationsrestrictparameter();
   },
   StringPolicyType::STRING
  },
  {key::kWebRtcUdpPortRange,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_webrtcudpportrange();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.webrtcudpportrange();
   },
   StringPolicyType::STRING
  },
  {key::kWebUsbAllowDevicesForUrls,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_webusballowdevicesforurls();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringPolicyProto& {
     return policy.webusballowdevicesforurls();
   },
   StringPolicyType::JSON
  },
}};

const std::array<StringListPolicyAccess, 34> kStringListPolicyAccess {{
  {key::kAllHttpAuthSchemesAllowedForOrigins,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_allhttpauthschemesallowedfororigins();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.allhttpauthschemesallowedfororigins();
   }
  },
  {key::kCertificateTransparencyEnforcementDisabledForCas,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_certificatetransparencyenforcementdisabledforcas();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.certificatetransparencyenforcementdisabledforcas();
   }
  },
  {key::kCertificateTransparencyEnforcementDisabledForLegacyCas,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_certificatetransparencyenforcementdisabledforlegacycas();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.certificatetransparencyenforcementdisabledforlegacycas();
   }
  },
  {key::kCertificateTransparencyEnforcementDisabledForUrls,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_certificatetransparencyenforcementdisabledforurls();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.certificatetransparencyenforcementdisabledforurls();
   }
  },
  {key::kCoalesceH2ConnectionsWithClientCertificatesForHosts,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_coalesceh2connectionswithclientcertificatesforhosts();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.coalesceh2connectionswithclientcertificatesforhosts();
   }
  },
  {key::kCookiesAllowedForUrls,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_cookiesallowedforurls();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.cookiesallowedforurls();
   }
  },
  {key::kCookiesBlockedForUrls,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_cookiesblockedforurls();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.cookiesblockedforurls();
   }
  },
  {key::kCookiesSessionOnlyForUrls,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_cookiessessiononlyforurls();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.cookiessessiononlyforurls();
   }
  },
  {key::kDefaultSearchProviderAlternateURLs,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultsearchprovideralternateurls();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.defaultsearchprovideralternateurls();
   }
  },
  {key::kDefaultSearchProviderEncodings,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_defaultsearchproviderencodings();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.defaultsearchproviderencodings();
   }
  },
  {key::kEnableExperimentalPolicies,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_enableexperimentalpolicies();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.enableexperimentalpolicies();
   }
  },
  {key::kExplicitlyAllowedNetworkPorts,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_explicitlyallowednetworkports();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.explicitlyallowednetworkports();
   }
  },
  {key::kHSTSPolicyBypassList,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_hstspolicybypasslist();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.hstspolicybypasslist();
   }
  },
  {key::kInsecurePrivateNetworkRequestsAllowedForUrls,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_insecureprivatenetworkrequestsallowedforurls();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.insecureprivatenetworkrequestsallowedforurls();
   }
  },
  {key::kJavaScriptAllowedForUrls,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_javascriptallowedforurls();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.javascriptallowedforurls();
   }
  },
  {key::kJavaScriptBlockedForUrls,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_javascriptblockedforurls();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.javascriptblockedforurls();
   }
  },
  {key::kJavaScriptJitAllowedForSites,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_javascriptjitallowedforsites();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.javascriptjitallowedforsites();
   }
  },
  {key::kJavaScriptJitBlockedForSites,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_javascriptjitblockedforsites();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.javascriptjitblockedforsites();
   }
  },
  {key::kLegacySameSiteCookieBehaviorEnabledForDomainList,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_legacysamesitecookiebehaviorenabledfordomainlist();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.legacysamesitecookiebehaviorenabledfordomainlist();
   }
  },
  {key::kLookalikeWarningAllowlistDomains,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_lookalikewarningallowlistdomains();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.lookalikewarningallowlistdomains();
   }
  },
  {key::kOverrideSecurityRestrictionsOnInsecureOrigin,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_overridesecurityrestrictionsoninsecureorigin();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.overridesecurityrestrictionsoninsecureorigin();
   }
  },
  {key::kPolicyDictionaryMultipleSourceMergeList,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_policydictionarymultiplesourcemergelist();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.policydictionarymultiplesourcemergelist();
   }
  },
  {key::kPolicyListMultipleSourceMergeList,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_policylistmultiplesourcemergelist();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.policylistmultiplesourcemergelist();
   }
  },
  {key::kPopupsAllowedForUrls,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_popupsallowedforurls();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.popupsallowedforurls();
   }
  },
  {key::kPopupsBlockedForUrls,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_popupsblockedforurls();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.popupsblockedforurls();
   }
  },
  {key::kRestrictAccountsToPatterns,
   false,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_restrictaccountstopatterns();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.restrictaccountstopatterns();
   }
  },
  {key::kSSLErrorOverrideAllowedForOrigins,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_sslerroroverrideallowedfororigins();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.sslerroroverrideallowedfororigins();
   }
  },
  {key::kSensorsAllowedForUrls,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_sensorsallowedforurls();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.sensorsallowedforurls();
   }
  },
  {key::kSensorsBlockedForUrls,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_sensorsblockedforurls();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.sensorsblockedforurls();
   }
  },
  {key::kSyncTypesListDisabled,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_synctypeslistdisabled();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.synctypeslistdisabled();
   }
  },
  {key::kURLAllowlist,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_urlallowlist();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.urlallowlist();
   }
  },
  {key::kURLBlocklist,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_urlblocklist();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.urlblocklist();
   }
  },
  {key::kWebUsbAskForUrls,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_webusbaskforurls();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.webusbaskforurls();
   }
  },
  {key::kWebUsbBlockedForUrls,
   true,
   [](const em::CloudPolicySettings& policy) {
     return policy.has_webusbblockedforurls();
   },
   [](const em::CloudPolicySettings& policy)
       -> const em::StringListPolicyProto& {
     return policy.webusbblockedforurls();
   }
  },
}};


}  // namespace policy
