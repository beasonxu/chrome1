//
// DO NOT MODIFY THIS FILE DIRECTLY!
// IT IS GENERATED BY generate_policy_source.py
// FROM gen/chrome/app/policy/policy_templates.json
//

#ifndef COMPONENTS_POLICY_POLICY_CONSTANTS_H_
#define COMPONENTS_POLICY_POLICY_CONSTANTS_H_

#include <cstdint>
#include <string>

#include "components/policy/core/common/policy_details.h"
#include "components/policy/core/common/policy_map.h"

namespace enterprise_management {
class BooleanPolicyProto;
class CloudPolicySettings;
class IntegerPolicyProto;
class StringListPolicyProto;
class StringPolicyProto;
}

namespace em = enterprise_management;

namespace policy {

namespace internal {
struct SchemaData;
}

#if BUILDFLAG(IS_CHROMEOS)
// Sets default profile policies values for enterprise users.
void SetEnterpriseUsersProfileDefaults(PolicyMap* policy_map);
// Sets default system-wide policies values for enterprise users.
void SetEnterpriseUsersSystemWideDefaults(PolicyMap* policy_map);
// Sets all default values for enterprise users.
void SetEnterpriseUsersDefaults(PolicyMap* policy_map);
#endif

// Returns the PolicyDetails for |policy| if |policy| is a known
// Chrome policy, otherwise returns nullptr.
const PolicyDetails* GetChromePolicyDetails(
const std::string& policy);

// Returns the schema data of the Chrome policy schema.
const internal::SchemaData* GetChromeSchemaData();

// Key names for the policy settings.
namespace key {

extern const char kAdditionalDnsQueryTypesEnabled[];
extern const char kAllHttpAuthSchemesAllowedForOrigins[];
extern const char kAllowedDomainsForApps[];
extern const char kAlternateErrorPagesEnabled[];
extern const char kAuthAndroidNegotiateAccountType[];
extern const char kAuthNegotiateDelegateAllowlist[];
extern const char kAuthSchemes[];
extern const char kAuthServerAllowlist[];
extern const char kAutoFillEnabled[];
extern const char kAutofillAddressEnabled[];
extern const char kAutofillCreditCardEnabled[];
extern const char kBackForwardCacheEnabled[];
extern const char kBlockThirdPartyCookies[];
extern const char kBrowserSignin[];
extern const char kBrowsingDataLifetime[];
extern const char kBuiltInDnsClientEnabled[];
extern const char kCECPQ2Enabled[];
extern const char kCORSNonWildcardRequestHeadersSupport[];
extern const char kCertificateTransparencyEnforcementDisabledForCas[];
extern const char kCertificateTransparencyEnforcementDisabledForLegacyCas[];
extern const char kCertificateTransparencyEnforcementDisabledForUrls[];
extern const char kCloudManagementEnrollmentToken[];
extern const char kCloudPolicyOverridesPlatformPolicy[];
extern const char kCloudProfileReportingEnabled[];
extern const char kCloudReportingEnabled[];
extern const char kCloudReportingUploadFrequency[];
extern const char kCloudUserPolicyMerge[];
extern const char kCloudUserPolicyOverridesCloudMachinePolicy[];
extern const char kCoalesceH2ConnectionsWithClientCertificatesForHosts[];
extern const char kComponentUpdatesEnabled[];
extern const char kContextualSearchEnabled[];
extern const char kCookiesAllowedForUrls[];
extern const char kCookiesBlockedForUrls[];
extern const char kCookiesSessionOnlyForUrls[];
extern const char kDefaultCookiesSetting[];
extern const char kDefaultGeolocationSetting[];
extern const char kDefaultJavaScriptJitSetting[];
extern const char kDefaultJavaScriptSetting[];
extern const char kDefaultPopupsSetting[];
extern const char kDefaultSearchProviderAlternateURLs[];
extern const char kDefaultSearchProviderEnabled[];
extern const char kDefaultSearchProviderEncodings[];
extern const char kDefaultSearchProviderIconURL[];
extern const char kDefaultSearchProviderImageURL[];
extern const char kDefaultSearchProviderImageURLPostParams[];
extern const char kDefaultSearchProviderKeyword[];
extern const char kDefaultSearchProviderName[];
extern const char kDefaultSearchProviderNewTabURL[];
extern const char kDefaultSearchProviderSearchURL[];
extern const char kDefaultSearchProviderSearchURLPostParams[];
extern const char kDefaultSearchProviderSuggestURL[];
extern const char kDefaultSearchProviderSuggestURLPostParams[];
extern const char kDefaultSensorsSetting[];
extern const char kDefaultWebBluetoothGuardSetting[];
extern const char kDefaultWebUsbGuardSetting[];
extern const char kDisableAuthNegotiateCnameLookup[];
extern const char kDisableSafeBrowsingProceedAnyway[];
extern const char kDnsOverHttpsMode[];
extern const char kDnsOverHttpsTemplates[];
extern const char kEditBookmarksEnabled[];
extern const char kEnableExperimentalPolicies[];
extern const char kEnableMediaRouter[];
extern const char kEncryptedClientHelloEnabled[];
extern const char kEnterpriseAuthenticationAppLinkPolicy[];
extern const char kEnterpriseHardwarePlatformAPIEnabled[];
extern const char kEventPathEnabled[];
extern const char kExplicitlyAllowedNetworkPorts[];
extern const char kFirstPartySetsEnabled[];
extern const char kFirstPartySetsOverrides[];
extern const char kForceBrowserSignin[];
extern const char kForceGoogleSafeSearch[];
extern const char kForceMajorVersionToMinorPositionInUserAgent[];
extern const char kForceSafeSearch[];
extern const char kForceYouTubeRestrict[];
extern const char kForceYouTubeSafetyMode[];
extern const char kHSTSPolicyBypassList[];
extern const char kHomepageLocation[];
extern const char kHttpsOnlyMode[];
extern const char kIncognitoEnabled[];
extern const char kIncognitoModeAvailability[];
extern const char kInsecureFormsWarningsEnabled[];
extern const char kInsecurePrivateNetworkRequestsAllowed[];
extern const char kInsecurePrivateNetworkRequestsAllowedForUrls[];
extern const char kIntensiveWakeUpThrottlingEnabled[];
extern const char kIsolateOriginsAndroid[];
extern const char kJavaScriptAllowedForUrls[];
extern const char kJavaScriptBlockedForUrls[];
extern const char kJavaScriptJitAllowedForSites[];
extern const char kJavaScriptJitBlockedForSites[];
extern const char kJavascriptEnabled[];
extern const char kLegacySameSiteCookieBehaviorEnabledForDomainList[];
extern const char kLensCameraAssistedSearchEnabled[];
extern const char kLookalikeWarningAllowlistDomains[];
extern const char kManagedBookmarks[];
extern const char kMetricsReportingEnabled[];
extern const char kNTPContentSuggestionsEnabled[];
extern const char kNetworkPredictionOptions[];
extern const char kNtlmV2Enabled[];
extern const char kOverrideSecurityRestrictionsOnInsecureOrigin[];
extern const char kPasswordLeakDetectionEnabled[];
extern const char kPasswordManagerEnabled[];
extern const char kPaymentMethodQueryEnabled[];
extern const char kPersistentQuotaEnabled[];
extern const char kPolicyAtomicGroupsEnabled[];
extern const char kPolicyDictionaryMultipleSourceMergeList[];
extern const char kPolicyListMultipleSourceMergeList[];
extern const char kPopupsAllowedForUrls[];
extern const char kPopupsBlockedForUrls[];
extern const char kPrintingEnabled[];
extern const char kPromptForDownloadLocation[];
extern const char kProxyBypassList[];
extern const char kProxyMode[];
extern const char kProxyPacUrl[];
extern const char kProxyServer[];
extern const char kProxyServerMode[];
extern const char kProxySettings[];
extern const char kRestrictAccountsToPatterns[];
extern const char kSSLErrorOverrideAllowed[];
extern const char kSSLErrorOverrideAllowedForOrigins[];
extern const char kSSLVersionMin[];
extern const char kSafeBrowsingEnabled[];
extern const char kSafeBrowsingExtendedReportingEnabled[];
extern const char kSafeBrowsingProtectionLevel[];
extern const char kSavingBrowserHistoryDisabled[];
extern const char kScrollToTextFragmentEnabled[];
extern const char kSearchSuggestEnabled[];
extern const char kSensorsAllowedForUrls[];
extern const char kSensorsBlockedForUrls[];
extern const char kSetTimeoutWithout1MsClampEnabled[];
extern const char kSharedClipboardEnabled[];
extern const char kSigninAllowed[];
extern const char kSitePerProcessAndroid[];
extern const char kSuppressDifferentOriginSubframeDialogs[];
extern const char kSyncDisabled[];
extern const char kSyncTypesListDisabled[];
extern const char kTosDialogBehavior[];
extern const char kTranslateEnabled[];
extern const char kURLAllowlist[];
extern const char kURLBlocklist[];
extern const char kUnthrottledNestedTimeoutEnabled[];
extern const char kUrlKeyedAnonymizedDataCollectionEnabled[];
extern const char kUrlParamFilterEnabled[];
extern const char kUserAgentClientHintsGREASEUpdateEnabled[];
extern const char kUserAgentReduction[];
extern const char kVariationsRestrictParameter[];
extern const char kWebRtcUdpPortRange[];
extern const char kWebSQLAccess[];
extern const char kWebSQLNonSecureContextEnabled[];
extern const char kWebUsbAllowDevicesForUrls[];
extern const char kWebUsbAskForUrls[];
extern const char kWebUsbBlockedForUrls[];
extern const char kWebXRImmersiveArEnabled[];

}  // namespace key

// Group names for the policy settings.
namespace group {

extern const char kActiveDirectoryManagement[];
extern const char kAttestation[];
extern const char kBrowserSwitcher[];
extern const char kCloudReporting[];
extern const char kCookiesSettings[];
extern const char kDateAndTime[];
extern const char kDefaultSearchProvider[];
extern const char kDisplay[];
extern const char kDrive[];
extern const char kExtensions[];
extern const char kGoogleCast[];
extern const char kHomepage[];
extern const char kImageSettings[];
extern const char kJavascriptSettings[];
extern const char kKeygenSettings[];
extern const char kKiosk[];
extern const char kLegacySameSiteCookieBehaviorSettings[];
extern const char kLocalFontsSettings[];
extern const char kLoginScreenOrigins[];
extern const char kNativeMessaging[];
extern const char kNetworkFileShares[];
extern const char kNotificationsSettings[];
extern const char kPasswordManager[];
extern const char kPasswordProtection[];
extern const char kPinUnlock[];
extern const char kPluginVm[];
extern const char kPluginsSettings[];
extern const char kPopupsSettings[];
extern const char kPrivateNetworkRequestSettings[];
extern const char kProxy[];
extern const char kQuickUnlock[];
extern const char kRemoteAccess[];
extern const char kRestoreOnStartup[];
extern const char kSAML[];
extern const char kSafeBrowsing[];
extern const char kScreenCaptureSettings[];
extern const char kSensorsSettings[];
extern const char kSupervisedUsers[];
extern const char kUserAndDeviceReporting[];
extern const char kWebUsbSettings[];
extern const char kWiFi[];
extern const char kWindowPlacementSettings[];

}  // namespace group

struct AtomicGroup {
  const short id;
  const char* policy_group;
  const char* const* policies;
};

extern const AtomicGroup kPolicyAtomicGroupMappings[];

extern const size_t kPolicyAtomicGroupMappingsLength;

// Arrays of metapolicies.
namespace metapolicy {

extern const char* const kMerge[3];
extern const char* const kPrecedence[2];

}  // namespace metapolicy

enum class StringPolicyType {
  STRING,
  JSON,
  EXTERNAL,
};

// Read access to the protobufs of all supported boolean user policies.
struct BooleanPolicyAccess {
  const char* policy_key;
  bool per_profile;
  bool (*has_proto)(const em::CloudPolicySettings& policy);
  const em::BooleanPolicyProto& (*get_proto)(
      const em::CloudPolicySettings& policy);
};
extern const std::array<BooleanPolicyAccess, 66> kBooleanPolicyAccess;

// Read access to the protobufs of all supported integer user policies.
struct IntegerPolicyAccess {
  const char* policy_key;
  bool per_profile;
  bool (*has_proto)(const em::CloudPolicySettings& policy);
  const em::IntegerPolicyProto& (*get_proto)(
      const em::CloudPolicySettings& policy);
};
extern const std::array<IntegerPolicyAccess, 18> kIntegerPolicyAccess;

// Read access to the protobufs of all supported string user policies.
struct StringPolicyAccess {
  const char* policy_key;
  bool per_profile;
  bool (*has_proto)(const em::CloudPolicySettings& policy);
  const em::StringPolicyProto& (*get_proto)(
      const em::CloudPolicySettings& policy);
  const StringPolicyType type;
};
extern const std::array<StringPolicyAccess, 34> kStringPolicyAccess;

// Read access to the protobufs of all supported stringlist user policies.
struct StringListPolicyAccess {
  const char* policy_key;
  bool per_profile;
  bool (*has_proto)(const em::CloudPolicySettings& policy);
  const em::StringListPolicyProto& (*get_proto)(
      const em::CloudPolicySettings& policy);
};
extern const std::array<StringListPolicyAccess, 34> kStringListPolicyAccess;

constexpr int64_t kDevicePolicyExternalDataResourceCacheSize = 0;

}  // namespace policy

#endif  // COMPONENTS_POLICY_POLICY_CONSTANTS_H_
