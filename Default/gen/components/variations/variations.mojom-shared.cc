// components/variations/variations.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "components/variations/variations.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/variations/variations.mojom-params-data.h"
namespace variations {
namespace mojom {

static NOINLINE const char* GoogleWebVisibilityToStringHelper(GoogleWebVisibility value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case GoogleWebVisibility::ANY:
      return "ANY";
    case GoogleWebVisibility::FIRST_PARTY:
      return "FIRST_PARTY";
    default:
      return nullptr;
  }
}

std::string GoogleWebVisibilityToString(GoogleWebVisibility value) {
  const char *str = GoogleWebVisibilityToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown GoogleWebVisibility value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, GoogleWebVisibility value) {
  return os << GoogleWebVisibilityToString(value);
}

namespace internal {


// static
bool VariationsHeaders_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const VariationsHeaders_Data* object =
      static_cast<const VariationsHeaders_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->headers_map, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams headers_map_validate_params(
      new mojo::internal::ContainerValidateParams(0, ::variations::mojom::internal::GoogleWebVisibility_Data::Validate), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)));
  if (!mojo::internal::ValidateContainer(object->headers_map, validation_context,
                                         &headers_map_validate_params)) {
    return false;
  }

  return true;
}

VariationsHeaders_Data::VariationsHeaders_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace variations

namespace perfetto {

// static
void TraceFormatTraits<::variations::mojom::GoogleWebVisibility>::WriteIntoTrace(
   perfetto::TracedValue context, ::variations::mojom::GoogleWebVisibility value) {
  return std::move(context).WriteString(::variations::mojom::GoogleWebVisibilityToString(value));
}

} // namespace perfetto