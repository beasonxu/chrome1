// components/variations/variations.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "components/variations/variations.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/variations/variations.mojom-params-data.h"
#include "components/variations/variations.mojom-shared-message-ids.h"

#include "components/variations/variations.mojom-import-headers.h"
#include "components/variations/variations.mojom-test-utils.h"


#ifndef COMPONENTS_VARIATIONS_VARIATIONS_MOJOM_JUMBO_H_
#define COMPONENTS_VARIATIONS_VARIATIONS_MOJOM_JUMBO_H_
#endif



namespace variations {
namespace mojom {
VariationsHeaders::VariationsHeaders()
    : headers_map() {}

VariationsHeaders::VariationsHeaders(
    const base::flat_map<GoogleWebVisibility, std::string>& headers_map_in)
    : headers_map(std::move(headers_map_in)) {}

VariationsHeaders::~VariationsHeaders() = default;

void VariationsHeaders::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "headers_map"), this->headers_map,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const base::flat_map<GoogleWebVisibility, std::string>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool VariationsHeaders::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace variations


namespace mojo {


// static
bool StructTraits<::variations::mojom::VariationsHeaders::DataView, ::variations::mojom::VariationsHeadersPtr>::Read(
    ::variations::mojom::VariationsHeaders::DataView input,
    ::variations::mojom::VariationsHeadersPtr* output) {
  bool success = true;
  ::variations::mojom::VariationsHeadersPtr result(::variations::mojom::VariationsHeaders::New());
  
      if (success && !input.ReadHeadersMap(&result->headers_map))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace variations {
namespace mojom {




}  // namespace mojom
}  // namespace variations


#if defined(__clang__)
#pragma clang diagnostic pop
#endif