// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package org.chromium.base.natives;

// This file is autogenerated by
//     base/android/jni_generator/jni_registration_generator.py
// Please do not change its content.

public class GEN_JNI {
    public static final boolean TESTING_ENABLED = false;
    public static final boolean REQUIRE_MOCK = false;


    public static void org_chromium_base_ApplicationStatus_onApplicationStateChange(int newState) {
        J.N.MiAkQ_SU(newState);
    }
    public static boolean org_chromium_base_BaseFeatureList_isEnabled(String featureName) {
        return J.N.MA9sJ3RR(featureName);
    }
    public static void org_chromium_base_CommandLine_init(String[] args) {
        J.N.MDkrKi31(args);
    }

    public static boolean org_chromium_base_CommandLine_hasSwitch(String switchString) {
        return J.N.MsCvypjU(switchString);
    }

    public static String org_chromium_base_CommandLine_getSwitchValue(String switchString) {
        return J.N.MZJ2lrZY(switchString);
    }

    public static String[] org_chromium_base_CommandLine_getSwitchesFlattened() {
        return J.N.MHzche6O();
    }

    public static void org_chromium_base_CommandLine_appendSwitch(String switchString) {
        J.N.M5K_ewhl(switchString);
    }

    public static void org_chromium_base_CommandLine_appendSwitchWithValue(String switchString, String value) {
        J.N.MUoYiNbY(switchString, value);
    }

    public static void org_chromium_base_CommandLine_appendSwitchesAndArguments(String[] array) {
        J.N.MPquHBNa(array);
    }

    public static void org_chromium_base_CommandLine_removeSwitch(String switchString) {
        J.N.M1cMYXGO(switchString);
    }
    public static int org_chromium_base_CpuFeatures_getCoreCount() {
        return J.N.MOiBJ1qS();
    }

    public static long org_chromium_base_CpuFeatures_getCpuFeatures() {
        return J.N.ML0T8q1U();
    }
    public static void org_chromium_base_EarlyTraceEvent_recordEarlyBeginEvent(String name, long timeNanos, int threadId, long threadMillis) {
        J.N.MrWG2uUW(name, timeNanos, threadId, threadMillis);
    }

    public static void org_chromium_base_EarlyTraceEvent_recordEarlyEndEvent(String name, long timeNanos, int threadId, long threadMillis) {
        J.N.MmyrhqXB(name, timeNanos, threadId, threadMillis);
    }

    public static void org_chromium_base_EarlyTraceEvent_recordEarlyToplevelBeginEvent(String name, long timeNanos, int threadId, long threadMillis) {
        J.N.M7UXCmoq(name, timeNanos, threadId, threadMillis);
    }

    public static void org_chromium_base_EarlyTraceEvent_recordEarlyToplevelEndEvent(String name, long timeNanos, int threadId, long threadMillis) {
        J.N.MRlw2LEn(name, timeNanos, threadId, threadMillis);
    }

    public static void org_chromium_base_EarlyTraceEvent_recordEarlyAsyncBeginEvent(String name, long id, long timeNanos) {
        J.N.M_Gv8TwM(name, id, timeNanos);
    }

    public static void org_chromium_base_EarlyTraceEvent_recordEarlyAsyncEndEvent(String name, long id, long timeNanos) {
        J.N.MrKsqeCD(name, id, timeNanos);
    }
    public static boolean org_chromium_base_FeatureList_isInitialized() {
        return J.N.MFTJCvBh();
    }
    public static boolean org_chromium_base_Features_isEnabled(long featurePointer) {
        return J.N.MRiRQ_Ey(featurePointer);
    }

    public static boolean org_chromium_base_Features_getFieldTrialParamByFeatureAsBoolean(long featurePointer, String paramName, boolean defaultValue) {
        return J.N.M8R55Xut(featurePointer, paramName, defaultValue);
    }
    public static String org_chromium_base_FieldTrialList_findFullName(String trialName) {
        return J.N.MdC43qwX(trialName);
    }

    public static boolean org_chromium_base_FieldTrialList_trialExists(String trialName) {
        return J.N.Mmqqda9c(trialName);
    }

    public static String org_chromium_base_FieldTrialList_getVariationParameter(String trialName, String parameterKey) {
        return J.N.MZWMOP4I(trialName, parameterKey);
    }

    public static void org_chromium_base_FieldTrialList_logActiveTrials() {
        J.N.MHz6Fn06();
    }

    public static boolean org_chromium_base_FieldTrialList_createFieldTrial(String trialName, String groupName) {
        return J.N.MGqzwlIM(trialName, groupName);
    }
    public static String org_chromium_base_FileUtils_getAbsoluteFilePath(String filePath) {
        return J.N.MWck3aif(filePath);
    }
    public static boolean org_chromium_base_ImportantFileWriterAndroid_writeFileAtomically(String fileName, byte[] data) {
        return J.N.MsOKBrZ5(fileName, data);
    }
    public static void org_chromium_base_JavaExceptionReporter_reportJavaException(boolean crashAfterReport, Throwable e) {
        J.N.MLlibBXh(crashAfterReport, e);
    }

    public static void org_chromium_base_JavaExceptionReporter_reportJavaStackTrace(String stackTrace) {
        J.N.MmS4zlEt(stackTrace);
    }
    public static void org_chromium_base_JavaHandlerThread_initializeThread(long nativeJavaHandlerThread, long nativeEvent) {
        J.N.MJcct7gJ(nativeJavaHandlerThread, nativeEvent);
    }

    public static void org_chromium_base_JavaHandlerThread_onLooperStopped(long nativeJavaHandlerThread) {
        J.N.MYwg$x8E(nativeJavaHandlerThread);
    }
    public static void org_chromium_base_MemoryPressureListener_onMemoryPressure(int pressure) {
        J.N.MZJzyjAa(pressure);
    }
    public static void org_chromium_base_PathService_override(int what, String path) {
        J.N.M6H_IiaF(what, path);
    }
    public static void org_chromium_base_PowerMonitor_onBatteryChargingChanged() {
        J.N.MCImhGql();
    }

    public static void org_chromium_base_PowerMonitor_onThermalStatusChanged(int thermalStatus) {
        J.N.MQNVaF2F(thermalStatus);
    }
    public static void org_chromium_base_TraceEvent_registerEnabledObserver() {
        J.N.MFFzPOVw();
    }

    public static void org_chromium_base_TraceEvent_startATrace(String categoryFilter) {
        J.N.MRN$Vid3(categoryFilter);
    }

    public static void org_chromium_base_TraceEvent_stopATrace() {
        J.N.MOgCa3d$();
    }

    public static void org_chromium_base_TraceEvent_setupATraceStartupTrace(String categoryFilter) {
        J.N.MlFM5bdC(categoryFilter);
    }

    public static void org_chromium_base_TraceEvent_instant(String name, String arg) {
        J.N.ML40H8ed(name, arg);
    }

    public static void org_chromium_base_TraceEvent_begin(String name, String arg) {
        J.N.M9XfPu17(name, arg);
    }

    public static void org_chromium_base_TraceEvent_end(String name, String arg) {
        J.N.Mw73xTww(name, arg);
    }

    public static void org_chromium_base_TraceEvent_beginToplevel(String target) {
        J.N.M_y76mct(target);
    }

    public static void org_chromium_base_TraceEvent_endToplevel(String target) {
        J.N.MLJecZJ9(target);
    }

    public static void org_chromium_base_TraceEvent_startAsync(String name, long id) {
        J.N.MHopMqLX(name, id);
    }

    public static void org_chromium_base_TraceEvent_finishAsync(String name, long id) {
        J.N.MffNhCLU(name, id);
    }

    public static boolean org_chromium_base_TraceEvent_viewHierarchyDumpEnabled() {
        return J.N.MnfJQqTB();
    }

    public static void org_chromium_base_TraceEvent_initViewHierarchyDump() {
        J.N.Ml5G_GLY();
    }

    public static long org_chromium_base_TraceEvent_startActivityDump(String name, long dumpProtoPtr) {
        return J.N.MwX2YEhL(name, dumpProtoPtr);
    }

    public static void org_chromium_base_TraceEvent_addViewDump(int id, int parentId, boolean isShown, boolean isDirty, String className, String resourceName, long activityProtoPtr) {
        J.N.MmnP6i1r(id, parentId, isShown, isDirty, className, resourceName, activityProtoPtr);
    }

    public static void org_chromium_base_TraceEvent_instantAndroidIPC(String name, long durMs) {
        J.N.MgOW0Igo(name, durMs);
    }
    public static void org_chromium_base_jank_1tracker_JankMetricUMARecorder_recordJankMetrics(String scenarioName, long[] timestampsNs, long[] durationsNs, long[] jankBurstsNs, int missedFrames) {
        J.N.MJ46uzUz(scenarioName, timestampsNs, durationsNs, jankBurstsNs, missedFrames);
    }
    public static long org_chromium_base_metrics_NativeUmaRecorder_recordBooleanHistogram(String name, long nativeHint, boolean sample) {
        return J.N.MtKTTHie(name, nativeHint, sample);
    }

    public static long org_chromium_base_metrics_NativeUmaRecorder_recordExponentialHistogram(String name, long nativeHint, int sample, int min, int max, int numBuckets) {
        return J.N.MILRV9Ch(name, nativeHint, sample, min, max, numBuckets);
    }

    public static long org_chromium_base_metrics_NativeUmaRecorder_recordLinearHistogram(String name, long nativeHint, int sample, int min, int max, int numBuckets) {
        return J.N.M$oMD214(name, nativeHint, sample, min, max, numBuckets);
    }

    public static long org_chromium_base_metrics_NativeUmaRecorder_recordSparseHistogram(String name, long nativeHint, int sample) {
        return J.N.Mk1ai9mx(name, nativeHint, sample);
    }

    public static void org_chromium_base_metrics_NativeUmaRecorder_recordUserAction(String name, long millisSinceEvent) {
        J.N.MTDsfZGe(name, millisSinceEvent);
    }

    public static int org_chromium_base_metrics_NativeUmaRecorder_getHistogramValueCountForTesting(String name, int sample, long snapshotPtr) {
        return J.N.M_1WxmXI_ForTesting(name, sample, snapshotPtr);
    }

    public static int org_chromium_base_metrics_NativeUmaRecorder_getHistogramTotalCountForTesting(String name, long snapshotPtr) {
        return J.N.MP$RSyC4_ForTesting(name, snapshotPtr);
    }

    public static long org_chromium_base_metrics_NativeUmaRecorder_createHistogramSnapshotForTesting() {
        return J.N.MlZcyPle_ForTesting();
    }

    public static void org_chromium_base_metrics_NativeUmaRecorder_destroyHistogramSnapshotForTesting(long snapshotPtr) {
        J.N.MqHgOQAN_ForTesting(snapshotPtr);
    }

    public static long org_chromium_base_metrics_NativeUmaRecorder_addActionCallbackForTesting(Object callback) {
        return J.N.MEfoV$c9_ForTesting(callback);
    }

    public static void org_chromium_base_metrics_NativeUmaRecorder_removeActionCallbackForTesting(long callbackId) {
        J.N.MUBbgum1_ForTesting(callbackId);
    }
    public static String org_chromium_base_metrics_StatisticsRecorderAndroid_toJson(int verbosityLevel) {
        return J.N.MvO$oy3r(verbosityLevel);
    }
    public static void org_chromium_base_task_PostTask_postDelayedTask(int priority, boolean mayBlock, boolean useThreadPool, byte extensionId, byte[] extensionData, Object task, long delay, String runnableClassName) {
        J.N.MTILOhAQ(priority, mayBlock, useThreadPool, extensionId, extensionData, task, delay, runnableClassName);
    }
    public static long org_chromium_base_task_TaskRunnerImpl_init(int taskRunnerType, int priority, boolean mayBlock, boolean useThreadPool, byte extensionId, byte[] extensionData) {
        return J.N.M5_IQXaH(taskRunnerType, priority, mayBlock, useThreadPool, extensionId, extensionData);
    }

    public static void org_chromium_base_task_TaskRunnerImpl_destroy(long nativeTaskRunnerAndroid) {
        J.N.MERCiIV8(nativeTaskRunnerAndroid);
    }

    public static void org_chromium_base_task_TaskRunnerImpl_postDelayedTask(long nativeTaskRunnerAndroid, Object task, long delay, String runnableClassName) {
        J.N.MGnQU$47(nativeTaskRunnerAndroid, task, delay, runnableClassName);
    }

    public static boolean org_chromium_base_task_TaskRunnerImpl_belongsToCurrentThread(long nativeTaskRunnerAndroid) {
        return J.N.MdFi6sVQ(nativeTaskRunnerAndroid);
    }
    public static String org_chromium_net_GURLUtils_getOrigin(String url) {
        return J.N.MpCt7siL(url);
    }
    public static void org_chromium_net_HttpNegotiateAuthenticator_setResult(long nativeJavaNegotiateResultWrapper, Object caller, int status, String authToken) {
        J.N.M0s8NeYn(nativeJavaNegotiateResultWrapper, caller, status, authToken);
    }
    public static boolean org_chromium_net_HttpUtil_isAllowedHeader(String headerName, String headerValue) {
        return J.N.MorcXgQd(headerName, headerValue);
    }
    public static void org_chromium_net_NetworkActiveNotifier_notifyOfDefaultNetworkActive(long nativePtr) {
        J.N.MSZPA7qE(nativePtr);
    }
    public static void org_chromium_net_NetworkChangeNotifier_notifyConnectionTypeChanged(long nativePtr, Object caller, int newConnectionType, long defaultNetId) {
        J.N.MbPIImnU(nativePtr, caller, newConnectionType, defaultNetId);
    }

    public static void org_chromium_net_NetworkChangeNotifier_notifyConnectionCostChanged(long nativePtr, Object caller, int newConnectionCost) {
        J.N.Mg0W7eRL(nativePtr, caller, newConnectionCost);
    }

    public static void org_chromium_net_NetworkChangeNotifier_notifyMaxBandwidthChanged(long nativePtr, Object caller, int subType) {
        J.N.Mt26m31j(nativePtr, caller, subType);
    }

    public static void org_chromium_net_NetworkChangeNotifier_notifyOfNetworkConnect(long nativePtr, Object caller, long netId, int connectionType) {
        J.N.MBT1i5cd(nativePtr, caller, netId, connectionType);
    }

    public static void org_chromium_net_NetworkChangeNotifier_notifyOfNetworkSoonToDisconnect(long nativePtr, Object caller, long netId) {
        J.N.MiJIMrTb(nativePtr, caller, netId);
    }

    public static void org_chromium_net_NetworkChangeNotifier_notifyOfNetworkDisconnect(long nativePtr, Object caller, long netId) {
        J.N.MDpuHJTB(nativePtr, caller, netId);
    }

    public static void org_chromium_net_NetworkChangeNotifier_notifyPurgeActiveNetworkList(long nativePtr, Object caller, long[] activeNetIds) {
        J.N.MpF$179U(nativePtr, caller, activeNetIds);
    }
    public static void org_chromium_net_ProxyChangeListener_proxySettingsChangedTo(long nativePtr, Object caller, String host, int port, String pacUrl, String[] exclusionList) {
        J.N.MyoFZt$2(nativePtr, caller, host, port, pacUrl, exclusionList);
    }

    public static void org_chromium_net_ProxyChangeListener_proxySettingsChanged(long nativePtr, Object caller) {
        J.N.MCIk73GZ(nativePtr, caller);
    }
    public static void org_chromium_net_X509Util_notifyKeyChainChanged() {
        J.N.MGVAvp19();
    }
    public static long org_chromium_net_impl_CronetBidirectionalStream_createBidirectionalStream(Object caller, long urlRequestContextAdapter, boolean sendRequestHeadersAutomatically, boolean trafficStatsTagSet, int trafficStatsTag, boolean trafficStatsUidSet, int trafficStatsUid, long networkHandle) {
        return J.N.MqTDYvZd(caller, urlRequestContextAdapter, sendRequestHeadersAutomatically, trafficStatsTagSet, trafficStatsTag, trafficStatsUidSet, trafficStatsUid, networkHandle);
    }

    public static int org_chromium_net_impl_CronetBidirectionalStream_start(long nativePtr, Object caller, String url, int priority, String method, String[] headers, boolean endOfStream) {
        return J.N.McDUim_I(nativePtr, caller, url, priority, method, headers, endOfStream);
    }

    public static void org_chromium_net_impl_CronetBidirectionalStream_sendRequestHeaders(long nativePtr, Object caller) {
        J.N.MGLIR7Sc(nativePtr, caller);
    }

    public static boolean org_chromium_net_impl_CronetBidirectionalStream_readData(long nativePtr, Object caller, Object byteBuffer, int position, int limit) {
        return J.N.Md_rPmgC(nativePtr, caller, byteBuffer, position, limit);
    }

    public static boolean org_chromium_net_impl_CronetBidirectionalStream_writevData(long nativePtr, Object caller, Object[] buffers, int[] positions, int[] limits, boolean endOfStream) {
        return J.N.MwJCBTMQ(nativePtr, caller, buffers, positions, limits, endOfStream);
    }

    public static void org_chromium_net_impl_CronetBidirectionalStream_destroy(long nativePtr, Object caller, boolean sendOnCanceled) {
        J.N.MS2l1kNx(nativePtr, caller, sendOnCanceled);
    }
    public static void org_chromium_net_impl_CronetLibraryLoader_cronetInitOnInitThread() {
        J.N.MROCxiBo();
    }

    public static String org_chromium_net_impl_CronetLibraryLoader_getCronetVersion() {
        return J.N.M6xubM8G();
    }
    public static long org_chromium_net_impl_CronetUploadDataStream_attachUploadDataToRequest(Object caller, long urlRequestAdapter, long length) {
        return J.N.MA4X1aZa(caller, urlRequestAdapter, length);
    }

    public static long org_chromium_net_impl_CronetUploadDataStream_createAdapterForTesting(Object caller) {
        return J.N.MnDEFloP_ForTesting(caller);
    }

    public static long org_chromium_net_impl_CronetUploadDataStream_createUploadDataStreamForTesting(Object caller, long length, long adapter) {
        return J.N.MymnNC4__ForTesting(caller, length, adapter);
    }

    public static void org_chromium_net_impl_CronetUploadDataStream_onReadSucceeded(long nativePtr, Object caller, int bytesRead, boolean finalChunk) {
        J.N.MpWH3VIr(nativePtr, caller, bytesRead, finalChunk);
    }

    public static void org_chromium_net_impl_CronetUploadDataStream_onRewindSucceeded(long nativePtr, Object caller) {
        J.N.MFpRjSMv(nativePtr, caller);
    }

    public static void org_chromium_net_impl_CronetUploadDataStream_destroy(long nativePtr) {
        J.N.MMW1G0N1(nativePtr);
    }
    public static long org_chromium_net_impl_CronetUrlRequest_createRequestAdapter(Object caller, long urlRequestContextAdapter, String url, int priority, boolean disableCache, boolean disableConnectionMigration, boolean trafficStatsTagSet, int trafficStatsTag, boolean trafficStatsUidSet, int trafficStatsUid, int idempotency, long networkHandle) {
        return J.N.MuOIsMvf(caller, urlRequestContextAdapter, url, priority, disableCache, disableConnectionMigration, trafficStatsTagSet, trafficStatsTag, trafficStatsUidSet, trafficStatsUid, idempotency, networkHandle);
    }

    public static boolean org_chromium_net_impl_CronetUrlRequest_setHttpMethod(long nativePtr, Object caller, String method) {
        return J.N.M51RPBJe(nativePtr, caller, method);
    }

    public static boolean org_chromium_net_impl_CronetUrlRequest_addRequestHeader(long nativePtr, Object caller, String name, String value) {
        return J.N.MvHusd1J(nativePtr, caller, name, value);
    }

    public static void org_chromium_net_impl_CronetUrlRequest_start(long nativePtr, Object caller) {
        J.N.MabZ5m6r(nativePtr, caller);
    }

    public static void org_chromium_net_impl_CronetUrlRequest_followDeferredRedirect(long nativePtr, Object caller) {
        J.N.Mhp54Oqs(nativePtr, caller);
    }

    public static boolean org_chromium_net_impl_CronetUrlRequest_readData(long nativePtr, Object caller, Object byteBuffer, int position, int capacity) {
        return J.N.MfCxA8r3(nativePtr, caller, byteBuffer, position, capacity);
    }

    public static void org_chromium_net_impl_CronetUrlRequest_destroy(long nativePtr, Object caller, boolean sendOnCanceled) {
        J.N.M4znfYdB(nativePtr, caller, sendOnCanceled);
    }

    public static void org_chromium_net_impl_CronetUrlRequest_getStatus(long nativePtr, Object caller, Object listener) {
        J.N.MgIIMpT9(nativePtr, caller, listener);
    }
    public static long org_chromium_net_impl_CronetUrlRequestContext_createRequestContextConfig(String userAgent, String storagePath, boolean quicEnabled, String quicUserAgentId, boolean http2Enabled, boolean brotliEnabled, boolean disableCache, int httpCacheMode, long httpCacheMaxSize, String experimentalOptions, long mockCertVerifier, boolean enableNetworkQualityEstimator, boolean bypassPublicKeyPinningForLocalTrustAnchors, int networkThreadPriority) {
        return J.N.MB3ntV7V(userAgent, storagePath, quicEnabled, quicUserAgentId, http2Enabled, brotliEnabled, disableCache, httpCacheMode, httpCacheMaxSize, experimentalOptions, mockCertVerifier, enableNetworkQualityEstimator, bypassPublicKeyPinningForLocalTrustAnchors, networkThreadPriority);
    }

    public static void org_chromium_net_impl_CronetUrlRequestContext_addQuicHint(long urlRequestContextConfig, String host, int port, int alternatePort) {
        J.N.MyRIv1Ij(urlRequestContextConfig, host, port, alternatePort);
    }

    public static void org_chromium_net_impl_CronetUrlRequestContext_addPkp(long urlRequestContextConfig, String host, byte[][] hashes, boolean includeSubdomains, long expirationTime) {
        J.N.Muq3ic6p(urlRequestContextConfig, host, hashes, includeSubdomains, expirationTime);
    }

    public static long org_chromium_net_impl_CronetUrlRequestContext_createRequestContextAdapter(long urlRequestContextConfig) {
        return J.N.M135Cu0D(urlRequestContextConfig);
    }

    public static int org_chromium_net_impl_CronetUrlRequestContext_setMinLogLevel(int loggingLevel) {
        return J.N.MnO2u2DQ(loggingLevel);
    }

    public static byte[] org_chromium_net_impl_CronetUrlRequestContext_getHistogramDeltas() {
        return J.N.M7CZ_Klr();
    }

    public static void org_chromium_net_impl_CronetUrlRequestContext_destroy(long nativePtr, Object caller) {
        J.N.MeBvNXm5(nativePtr, caller);
    }

    public static boolean org_chromium_net_impl_CronetUrlRequestContext_startNetLogToFile(long nativePtr, Object caller, String fileName, boolean logAll) {
        return J.N.MgwJQAH1(nativePtr, caller, fileName, logAll);
    }

    public static void org_chromium_net_impl_CronetUrlRequestContext_startNetLogToDisk(long nativePtr, Object caller, String dirPath, boolean logAll, int maxSize) {
        J.N.MTULt02u(nativePtr, caller, dirPath, logAll, maxSize);
    }

    public static void org_chromium_net_impl_CronetUrlRequestContext_stopNetLog(long nativePtr, Object caller) {
        J.N.MKFm_qQ7(nativePtr, caller);
    }

    public static void org_chromium_net_impl_CronetUrlRequestContext_initRequestContextOnInitThread(long nativePtr, Object caller) {
        J.N.M6Dz0nZ5(nativePtr, caller);
    }

    public static void org_chromium_net_impl_CronetUrlRequestContext_configureNetworkQualityEstimatorForTesting(long nativePtr, Object caller, boolean useLocalHostRequests, boolean useSmallerResponses, boolean disableOfflineCheck) {
        J.N.M6sIJDgy_ForTesting(nativePtr, caller, useLocalHostRequests, useSmallerResponses, disableOfflineCheck);
    }

    public static void org_chromium_net_impl_CronetUrlRequestContext_provideRTTObservations(long nativePtr, Object caller, boolean should) {
        J.N.MpnFLFF2(nativePtr, caller, should);
    }

    public static void org_chromium_net_impl_CronetUrlRequestContext_provideThroughputObservations(long nativePtr, Object caller, boolean should) {
        J.N.MnPUhNKP(nativePtr, caller, should);
    }

    public static boolean org_chromium_net_impl_CronetUrlRequestContext_skipLogging(long nativePtr, Object caller) {
        return J.N.Mey_yE9a(nativePtr, caller);
    }
}
