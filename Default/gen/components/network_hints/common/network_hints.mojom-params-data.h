// components/network_hints/common/network_hints.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_NETWORK_HINTS_COMMON_NETWORK_HINTS_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_NETWORK_HINTS_COMMON_NETWORK_HINTS_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace network_hints {
namespace mojom {
namespace internal {

class ValidationContext;
class  NetworkHintsHandler_PrefetchDNS_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> hostname_list;

 private:
  friend class mojo::internal::MessageFragment<NetworkHintsHandler_PrefetchDNS_Params_Data>;

  NetworkHintsHandler_PrefetchDNS_Params_Data();
  ~NetworkHintsHandler_PrefetchDNS_Params_Data() = delete;
};
static_assert(sizeof(NetworkHintsHandler_PrefetchDNS_Params_Data) == 16,
              "Bad sizeof(NetworkHintsHandler_PrefetchDNS_Params_Data)");
class  NetworkHintsHandler_Preconnect_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  uint8_t allow_credentials : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<NetworkHintsHandler_Preconnect_Params_Data>;

  NetworkHintsHandler_Preconnect_Params_Data();
  ~NetworkHintsHandler_Preconnect_Params_Data() = delete;
};
static_assert(sizeof(NetworkHintsHandler_Preconnect_Params_Data) == 24,
              "Bad sizeof(NetworkHintsHandler_Preconnect_Params_Data)");

}  // namespace internal


class NetworkHintsHandler_PrefetchDNS_ParamsDataView {
 public:
  NetworkHintsHandler_PrefetchDNS_ParamsDataView() = default;

  NetworkHintsHandler_PrefetchDNS_ParamsDataView(
      internal::NetworkHintsHandler_PrefetchDNS_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetHostnameListDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHostnameList(UserType* output) {
    
    auto* pointer = data_->hostname_list.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
 private:
  internal::NetworkHintsHandler_PrefetchDNS_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkHintsHandler_Preconnect_ParamsDataView {
 public:
  NetworkHintsHandler_Preconnect_ParamsDataView() = default;

  NetworkHintsHandler_Preconnect_ParamsDataView(
      internal::NetworkHintsHandler_Preconnect_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  bool allow_credentials() const {
    return data_->allow_credentials;
  }
 private:
  internal::NetworkHintsHandler_Preconnect_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void NetworkHintsHandler_PrefetchDNS_ParamsDataView::GetHostnameListDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->hostname_list.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}


inline void NetworkHintsHandler_Preconnect_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace network_hints

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_NETWORK_HINTS_COMMON_NETWORK_HINTS_MOJOM_PARAMS_DATA_H_