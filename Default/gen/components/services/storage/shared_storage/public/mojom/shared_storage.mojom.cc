// components/services/storage/shared_storage/public/mojom/shared_storage.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "components/services/storage/shared_storage/public/mojom/shared_storage.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/services/storage/shared_storage/public/mojom/shared_storage.mojom-params-data.h"
#include "components/services/storage/shared_storage/public/mojom/shared_storage.mojom-shared-message-ids.h"

#include "components/services/storage/shared_storage/public/mojom/shared_storage.mojom-import-headers.h"
#include "components/services/storage/shared_storage/public/mojom/shared_storage.mojom-test-utils.h"


#ifndef COMPONENTS_SERVICES_STORAGE_SHARED_STORAGE_PUBLIC_MOJOM_SHARED_STORAGE_MOJOM_JUMBO_H_
#define COMPONENTS_SERVICES_STORAGE_SHARED_STORAGE_PUBLIC_MOJOM_SHARED_STORAGE_MOJOM_JUMBO_H_
#endif



namespace shared_storage_worklet {
namespace mojom {
SharedStorageKeyAndOrValue::SharedStorageKeyAndOrValue()
    : key(),
      value() {}

SharedStorageKeyAndOrValue::SharedStorageKeyAndOrValue(
    const ::std::u16string& key_in,
    const ::std::u16string& value_in)
    : key(std::move(key_in)),
      value(std::move(value_in)) {}

SharedStorageKeyAndOrValue::~SharedStorageKeyAndOrValue() = default;

void SharedStorageKeyAndOrValue::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "key"), this->key,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::std::u16string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "value"), this->value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::std::u16string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool SharedStorageKeyAndOrValue::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char SharedStorageEntriesListener::Name_[] = "shared_storage_worklet.mojom.SharedStorageEntriesListener";

SharedStorageEntriesListener::IPCStableHashFunction SharedStorageEntriesListener::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kSharedStorageEntriesListener_DidReadEntries_Name: {
      return &SharedStorageEntriesListener::DidReadEntries_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* SharedStorageEntriesListener::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kSharedStorageEntriesListener_DidReadEntries_Name:
            return "Receive shared_storage_worklet::mojom::SharedStorageEntriesListener::DidReadEntries";
    }
  } else {
    switch (message.name()) {
      case internal::kSharedStorageEntriesListener_DidReadEntries_Name:
            return "Receive reply shared_storage_worklet::mojom::SharedStorageEntriesListener::DidReadEntries";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t SharedStorageEntriesListener::DidReadEntries_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)shared_storage_worklet::mojom::SharedStorageEntriesListener::DidReadEntries");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

SharedStorageEntriesListenerProxy::SharedStorageEntriesListenerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void SharedStorageEntriesListenerProxy::DidReadEntries(
    bool in_success, const std::string& in_error_message, std::vector<SharedStorageKeyAndOrValuePtr> in_entries, bool in_has_more_entries, int32_t in_total_queued_to_send) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send shared_storage_worklet::mojom::SharedStorageEntriesListener::DidReadEntries", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("error_message"), in_error_message,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("entries"), in_entries,
                        "<value of type std::vector<SharedStorageKeyAndOrValuePtr>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("has_more_entries"), in_has_more_entries,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("total_queued_to_send"), in_total_queued_to_send,
                        "<value of type int32_t>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageEntriesListener_DidReadEntries_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageEntriesListener_DidReadEntries_Params_Data> params(
          message);
  params.Allocate();
  params->success = in_success;
  mojo::internal::MessageFragment<
      typename decltype(params->error_message)::BaseType> error_message_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_error_message, error_message_fragment);
  params->error_message.Set(
      error_message_fragment.is_null() ? nullptr : error_message_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->error_message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null error_message in SharedStorageEntriesListener.DidReadEntries request");
  mojo::internal::MessageFragment<
      typename decltype(params->entries)::BaseType>
      entries_fragment(params.message());
  const mojo::internal::ContainerValidateParams entries_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::shared_storage_worklet::mojom::SharedStorageKeyAndOrValueDataView>>(
      in_entries, entries_fragment, &entries_validate_params);
  params->entries.Set(
      entries_fragment.is_null() ? nullptr : entries_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->entries.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null entries in SharedStorageEntriesListener.DidReadEntries request");
  params->has_more_entries = in_has_more_entries;
  params->total_queued_to_send = in_total_queued_to_send;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageEntriesListener::Name_);
  message.set_method_name("DidReadEntries");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool SharedStorageEntriesListenerStubDispatch::Accept(
    SharedStorageEntriesListener* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kSharedStorageEntriesListener_DidReadEntries_Name: {

      DCHECK(message->is_serialized());
      internal::SharedStorageEntriesListener_DidReadEntries_Params_Data* params =
          reinterpret_cast<internal::SharedStorageEntriesListener_DidReadEntries_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      bool p_success{};
      std::string p_error_message{};
      std::vector<SharedStorageKeyAndOrValuePtr> p_entries{};
      bool p_has_more_entries{};
      int32_t p_total_queued_to_send{};
      SharedStorageEntriesListener_DidReadEntries_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_success = input_data_view.success();
      if (success && !input_data_view.ReadErrorMessage(&p_error_message))
        success = false;
      if (success && !input_data_view.ReadEntries(&p_entries))
        success = false;
      if (success)
        p_has_more_entries = input_data_view.has_more_entries();
      if (success)
        p_total_queued_to_send = input_data_view.total_queued_to_send();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SharedStorageEntriesListener::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DidReadEntries(
std::move(p_success), 
std::move(p_error_message), 
std::move(p_entries), 
std::move(p_has_more_entries), 
std::move(p_total_queued_to_send));
      return true;
    }
  }
  return false;
}

// static
bool SharedStorageEntriesListenerStubDispatch::AcceptWithResponder(
    SharedStorageEntriesListener* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kSharedStorageEntriesListener_DidReadEntries_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kSharedStorageEntriesListenerValidationInfo[] = {
    {&internal::SharedStorageEntriesListener_DidReadEntries_Params_Data::Validate,
     nullptr /* no response */},
};

bool SharedStorageEntriesListenerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::shared_storage_worklet::mojom::SharedStorageEntriesListener::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kSharedStorageEntriesListenerValidationInfo);
}



}  // namespace mojom
}  // namespace shared_storage_worklet


namespace mojo {


// static
bool StructTraits<::shared_storage_worklet::mojom::SharedStorageKeyAndOrValue::DataView, ::shared_storage_worklet::mojom::SharedStorageKeyAndOrValuePtr>::Read(
    ::shared_storage_worklet::mojom::SharedStorageKeyAndOrValue::DataView input,
    ::shared_storage_worklet::mojom::SharedStorageKeyAndOrValuePtr* output) {
  bool success = true;
  ::shared_storage_worklet::mojom::SharedStorageKeyAndOrValuePtr result(::shared_storage_worklet::mojom::SharedStorageKeyAndOrValue::New());
  
      if (success && !input.ReadKey(&result->key))
        success = false;
      if (success && !input.ReadValue(&result->value))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace shared_storage_worklet {
namespace mojom {


void SharedStorageEntriesListenerInterceptorForTesting::DidReadEntries(bool success, const std::string& error_message, std::vector<SharedStorageKeyAndOrValuePtr> entries, bool has_more_entries, int32_t total_queued_to_send) {
  GetForwardingInterface()->DidReadEntries(std::move(success), std::move(error_message), std::move(entries), std::move(has_more_entries), std::move(total_queued_to_send));
}
SharedStorageEntriesListenerAsyncWaiter::SharedStorageEntriesListenerAsyncWaiter(
    SharedStorageEntriesListener* proxy) : proxy_(proxy) {}

SharedStorageEntriesListenerAsyncWaiter::~SharedStorageEntriesListenerAsyncWaiter() = default;






}  // namespace mojom
}  // namespace shared_storage_worklet


#if defined(__clang__)
#pragma clang diagnostic pop
#endif