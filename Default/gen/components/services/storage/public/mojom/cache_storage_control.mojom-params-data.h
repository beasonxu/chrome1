// components/services/storage/public/mojom/cache_storage_control.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_CACHE_STORAGE_CONTROL_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_CACHE_STORAGE_CONTROL_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace storage {
namespace mojom {
namespace internal {

class ValidationContext;
class  CacheStorageObserver_OnCacheListChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::StorageKey_Data> storage_key;

 private:
  friend class mojo::internal::MessageFragment<CacheStorageObserver_OnCacheListChanged_Params_Data>;

  CacheStorageObserver_OnCacheListChanged_Params_Data();
  ~CacheStorageObserver_OnCacheListChanged_Params_Data() = delete;
};
static_assert(sizeof(CacheStorageObserver_OnCacheListChanged_Params_Data) == 16,
              "Bad sizeof(CacheStorageObserver_OnCacheListChanged_Params_Data)");
class  CacheStorageObserver_OnCacheContentChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::StorageKey_Data> storage_key;
  mojo::internal::Pointer<mojo::internal::String_Data> cache_name;

 private:
  friend class mojo::internal::MessageFragment<CacheStorageObserver_OnCacheContentChanged_Params_Data>;

  CacheStorageObserver_OnCacheContentChanged_Params_Data();
  ~CacheStorageObserver_OnCacheContentChanged_Params_Data() = delete;
};
static_assert(sizeof(CacheStorageObserver_OnCacheContentChanged_Params_Data) == 24,
              "Bad sizeof(CacheStorageObserver_OnCacheContentChanged_Params_Data)");
class  CacheStorageControl_AddReceiver_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::CrossOriginEmbedderPolicy_Data> policy;
  mojo::internal::Interface_Data coep_reporter;
  mojo::internal::Pointer<::blink::mojom::internal::StorageKey_Data> storage_key;
  int32_t owner;
  mojo::internal::Handle_Data receiver;

 private:
  friend class mojo::internal::MessageFragment<CacheStorageControl_AddReceiver_Params_Data>;

  CacheStorageControl_AddReceiver_Params_Data();
  ~CacheStorageControl_AddReceiver_Params_Data() = delete;
};
static_assert(sizeof(CacheStorageControl_AddReceiver_Params_Data) == 40,
              "Bad sizeof(CacheStorageControl_AddReceiver_Params_Data)");
class  CacheStorageControl_DeleteForStorageKey_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::StorageKey_Data> storage_key;

 private:
  friend class mojo::internal::MessageFragment<CacheStorageControl_DeleteForStorageKey_Params_Data>;

  CacheStorageControl_DeleteForStorageKey_Params_Data();
  ~CacheStorageControl_DeleteForStorageKey_Params_Data() = delete;
};
static_assert(sizeof(CacheStorageControl_DeleteForStorageKey_Params_Data) == 16,
              "Bad sizeof(CacheStorageControl_DeleteForStorageKey_Params_Data)");
class  CacheStorageControl_GetAllStorageKeysInfo_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<CacheStorageControl_GetAllStorageKeysInfo_Params_Data>;

  CacheStorageControl_GetAllStorageKeysInfo_Params_Data();
  ~CacheStorageControl_GetAllStorageKeysInfo_Params_Data() = delete;
};
static_assert(sizeof(CacheStorageControl_GetAllStorageKeysInfo_Params_Data) == 8,
              "Bad sizeof(CacheStorageControl_GetAllStorageKeysInfo_Params_Data)");
class  CacheStorageControl_GetAllStorageKeysInfo_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::storage::mojom::internal::StorageUsageInfo_Data>>> usage_info;

 private:
  friend class mojo::internal::MessageFragment<CacheStorageControl_GetAllStorageKeysInfo_ResponseParams_Data>;

  CacheStorageControl_GetAllStorageKeysInfo_ResponseParams_Data();
  ~CacheStorageControl_GetAllStorageKeysInfo_ResponseParams_Data() = delete;
};
static_assert(sizeof(CacheStorageControl_GetAllStorageKeysInfo_ResponseParams_Data) == 16,
              "Bad sizeof(CacheStorageControl_GetAllStorageKeysInfo_ResponseParams_Data)");
class  CacheStorageControl_AddObserver_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data observer;

 private:
  friend class mojo::internal::MessageFragment<CacheStorageControl_AddObserver_Params_Data>;

  CacheStorageControl_AddObserver_Params_Data();
  ~CacheStorageControl_AddObserver_Params_Data() = delete;
};
static_assert(sizeof(CacheStorageControl_AddObserver_Params_Data) == 16,
              "Bad sizeof(CacheStorageControl_AddObserver_Params_Data)");
class  CacheStorageControl_ApplyPolicyUpdates_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::storage::mojom::internal::StoragePolicyUpdate_Data>>> policy_updates;

 private:
  friend class mojo::internal::MessageFragment<CacheStorageControl_ApplyPolicyUpdates_Params_Data>;

  CacheStorageControl_ApplyPolicyUpdates_Params_Data();
  ~CacheStorageControl_ApplyPolicyUpdates_Params_Data() = delete;
};
static_assert(sizeof(CacheStorageControl_ApplyPolicyUpdates_Params_Data) == 16,
              "Bad sizeof(CacheStorageControl_ApplyPolicyUpdates_Params_Data)");

}  // namespace internal


class CacheStorageObserver_OnCacheListChanged_ParamsDataView {
 public:
  CacheStorageObserver_OnCacheListChanged_ParamsDataView() = default;

  CacheStorageObserver_OnCacheListChanged_ParamsDataView(
      internal::CacheStorageObserver_OnCacheListChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStorageKeyDataView(
      ::blink::mojom::StorageKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStorageKey(UserType* output) {
    
    auto* pointer = data_->storage_key.Get();
    return mojo::internal::Deserialize<::blink::mojom::StorageKeyDataView>(
        pointer, output, message_);
  }
 private:
  internal::CacheStorageObserver_OnCacheListChanged_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorageObserver_OnCacheContentChanged_ParamsDataView {
 public:
  CacheStorageObserver_OnCacheContentChanged_ParamsDataView() = default;

  CacheStorageObserver_OnCacheContentChanged_ParamsDataView(
      internal::CacheStorageObserver_OnCacheContentChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStorageKeyDataView(
      ::blink::mojom::StorageKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStorageKey(UserType* output) {
    
    auto* pointer = data_->storage_key.Get();
    return mojo::internal::Deserialize<::blink::mojom::StorageKeyDataView>(
        pointer, output, message_);
  }
  inline void GetCacheNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCacheName(UserType* output) {
    
    auto* pointer = data_->cache_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::CacheStorageObserver_OnCacheContentChanged_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorageControl_AddReceiver_ParamsDataView {
 public:
  CacheStorageControl_AddReceiver_ParamsDataView() = default;

  CacheStorageControl_AddReceiver_ParamsDataView(
      internal::CacheStorageControl_AddReceiver_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPolicyDataView(
      ::network::mojom::CrossOriginEmbedderPolicyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPolicy(UserType* output) {
    
    auto* pointer = data_->policy.Get();
    return mojo::internal::Deserialize<::network::mojom::CrossOriginEmbedderPolicyDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeCoepReporter() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::CrossOriginEmbedderPolicyReporterInterfaceBase>>(
            &data_->coep_reporter, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetStorageKeyDataView(
      ::blink::mojom::StorageKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStorageKey(UserType* output) {
    
    auto* pointer = data_->storage_key.Get();
    return mojo::internal::Deserialize<::blink::mojom::StorageKeyDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadOwner(UserType* output) const {
    auto data_value = data_->owner;
    return mojo::internal::Deserialize<::storage::mojom::CacheStorageOwner>(
        data_value, output);
  }
  CacheStorageOwner owner() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::storage::mojom::CacheStorageOwner>(data_->owner));
  }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::CacheStorageInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::CacheStorageControl_AddReceiver_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorageControl_DeleteForStorageKey_ParamsDataView {
 public:
  CacheStorageControl_DeleteForStorageKey_ParamsDataView() = default;

  CacheStorageControl_DeleteForStorageKey_ParamsDataView(
      internal::CacheStorageControl_DeleteForStorageKey_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStorageKeyDataView(
      ::blink::mojom::StorageKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStorageKey(UserType* output) {
    
    auto* pointer = data_->storage_key.Get();
    return mojo::internal::Deserialize<::blink::mojom::StorageKeyDataView>(
        pointer, output, message_);
  }
 private:
  internal::CacheStorageControl_DeleteForStorageKey_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorageControl_GetAllStorageKeysInfo_ParamsDataView {
 public:
  CacheStorageControl_GetAllStorageKeysInfo_ParamsDataView() = default;

  CacheStorageControl_GetAllStorageKeysInfo_ParamsDataView(
      internal::CacheStorageControl_GetAllStorageKeysInfo_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::CacheStorageControl_GetAllStorageKeysInfo_Params_Data* data_ = nullptr;
};



class CacheStorageControl_GetAllStorageKeysInfo_ResponseParamsDataView {
 public:
  CacheStorageControl_GetAllStorageKeysInfo_ResponseParamsDataView() = default;

  CacheStorageControl_GetAllStorageKeysInfo_ResponseParamsDataView(
      internal::CacheStorageControl_GetAllStorageKeysInfo_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUsageInfoDataView(
      mojo::ArrayDataView<::storage::mojom::StorageUsageInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUsageInfo(UserType* output) {
    
    auto* pointer = data_->usage_info.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::storage::mojom::StorageUsageInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::CacheStorageControl_GetAllStorageKeysInfo_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorageControl_AddObserver_ParamsDataView {
 public:
  CacheStorageControl_AddObserver_ParamsDataView() = default;

  CacheStorageControl_AddObserver_ParamsDataView(
      internal::CacheStorageControl_AddObserver_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeObserver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::storage::mojom::CacheStorageObserverInterfaceBase>>(
            &data_->observer, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::CacheStorageControl_AddObserver_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CacheStorageControl_ApplyPolicyUpdates_ParamsDataView {
 public:
  CacheStorageControl_ApplyPolicyUpdates_ParamsDataView() = default;

  CacheStorageControl_ApplyPolicyUpdates_ParamsDataView(
      internal::CacheStorageControl_ApplyPolicyUpdates_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPolicyUpdatesDataView(
      mojo::ArrayDataView<::storage::mojom::StoragePolicyUpdateDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPolicyUpdates(UserType* output) {
    
    auto* pointer = data_->policy_updates.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::storage::mojom::StoragePolicyUpdateDataView>>(
        pointer, output, message_);
  }
 private:
  internal::CacheStorageControl_ApplyPolicyUpdates_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void CacheStorageObserver_OnCacheListChanged_ParamsDataView::GetStorageKeyDataView(
    ::blink::mojom::StorageKeyDataView* output) {
  auto pointer = data_->storage_key.Get();
  *output = ::blink::mojom::StorageKeyDataView(pointer, message_);
}


inline void CacheStorageObserver_OnCacheContentChanged_ParamsDataView::GetStorageKeyDataView(
    ::blink::mojom::StorageKeyDataView* output) {
  auto pointer = data_->storage_key.Get();
  *output = ::blink::mojom::StorageKeyDataView(pointer, message_);
}
inline void CacheStorageObserver_OnCacheContentChanged_ParamsDataView::GetCacheNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->cache_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void CacheStorageControl_AddReceiver_ParamsDataView::GetPolicyDataView(
    ::network::mojom::CrossOriginEmbedderPolicyDataView* output) {
  auto pointer = data_->policy.Get();
  *output = ::network::mojom::CrossOriginEmbedderPolicyDataView(pointer, message_);
}
inline void CacheStorageControl_AddReceiver_ParamsDataView::GetStorageKeyDataView(
    ::blink::mojom::StorageKeyDataView* output) {
  auto pointer = data_->storage_key.Get();
  *output = ::blink::mojom::StorageKeyDataView(pointer, message_);
}


inline void CacheStorageControl_DeleteForStorageKey_ParamsDataView::GetStorageKeyDataView(
    ::blink::mojom::StorageKeyDataView* output) {
  auto pointer = data_->storage_key.Get();
  *output = ::blink::mojom::StorageKeyDataView(pointer, message_);
}




inline void CacheStorageControl_GetAllStorageKeysInfo_ResponseParamsDataView::GetUsageInfoDataView(
    mojo::ArrayDataView<::storage::mojom::StorageUsageInfoDataView>* output) {
  auto pointer = data_->usage_info.Get();
  *output = mojo::ArrayDataView<::storage::mojom::StorageUsageInfoDataView>(pointer, message_);
}




inline void CacheStorageControl_ApplyPolicyUpdates_ParamsDataView::GetPolicyUpdatesDataView(
    mojo::ArrayDataView<::storage::mojom::StoragePolicyUpdateDataView>* output) {
  auto pointer = data_->policy_updates.Get();
  *output = mojo::ArrayDataView<::storage::mojom::StoragePolicyUpdateDataView>(pointer, message_);
}

}  // namespace mojom
}  // namespace storage

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_CACHE_STORAGE_CONTROL_MOJOM_PARAMS_DATA_H_