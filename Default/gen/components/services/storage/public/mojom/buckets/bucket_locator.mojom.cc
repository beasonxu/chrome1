// components/services/storage/public/mojom/buckets/bucket_locator.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "components/services/storage/public/mojom/buckets/bucket_locator.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/services/storage/public/mojom/buckets/bucket_locator.mojom-params-data.h"
#include "components/services/storage/public/mojom/buckets/bucket_locator.mojom-shared-message-ids.h"

#include "components/services/storage/public/mojom/buckets/bucket_locator.mojom-import-headers.h"
#include "components/services/storage/public/mojom/buckets/bucket_locator.mojom-test-utils.h"


#ifndef COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_BUCKETS_BUCKET_LOCATOR_MOJOM_JUMBO_H_
#define COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_BUCKETS_BUCKET_LOCATOR_MOJOM_JUMBO_H_
#endif



namespace storage {
namespace mojom {
BucketLocator::BucketLocator()
    : id(),
      storage_key(),
      type(),
      is_default() {}

BucketLocator::BucketLocator(
    ::storage::BucketId id_in,
    const ::blink::StorageKey& storage_key_in,
    ::blink::mojom::StorageType type_in,
    bool is_default_in)
    : id(std::move(id_in)),
      storage_key(std::move(storage_key_in)),
      type(std::move(type_in)),
      is_default(std::move(is_default_in)) {}

BucketLocator::~BucketLocator() = default;

void BucketLocator::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "id"), this->id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::storage::BucketId>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "storage_key"), this->storage_key,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::blink::StorageKey&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "type"), this->type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::blink::mojom::StorageType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_default"), this->is_default,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool BucketLocator::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace storage


namespace mojo {


// static
bool StructTraits<::storage::mojom::BucketLocator::DataView, ::storage::mojom::BucketLocatorPtr>::Read(
    ::storage::mojom::BucketLocator::DataView input,
    ::storage::mojom::BucketLocatorPtr* output) {
  bool success = true;
  ::storage::mojom::BucketLocatorPtr result(::storage::mojom::BucketLocator::New());
  
      if (success && !input.ReadId(&result->id))
        success = false;
      if (success && !input.ReadStorageKey(&result->storage_key))
        success = false;
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success)
        result->is_default = input.is_default();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace storage {
namespace mojom {




}  // namespace mojom
}  // namespace storage


#if defined(__clang__)
#pragma clang diagnostic pop
#endif