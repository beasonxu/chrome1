// components/services/storage/public/mojom/service_worker_database.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_SERVICE_WORKER_DATABASE_MOJOM_SHARED_H_
#define COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_SERVICE_WORKER_DATABASE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/services/storage/public/mojom/service_worker_database.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "services/network/public/mojom/cross_origin_embedder_policy.mojom-shared.h"
#include "third_party/blink/public/mojom/script/script_type.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/navigation_preload_state.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_ancestor_frame_type.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_database.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_fetch_handler_type.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_registration_options.mojom-shared.h"
#include "third_party/blink/public/mojom/storage_key/storage_key.mojom-shared.h"
#include "third_party/blink/public/mojom/use_counter/metrics/web_feature.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"







namespace storage {
namespace mojom {
class ServiceWorkerRegistrationDataDataView;

class ServiceWorkerResourceRecordDataView;



}  // namespace mojom
}  // namespace storage

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::storage::mojom::ServiceWorkerRegistrationDataDataView> {
  using Data = ::storage::mojom::internal::ServiceWorkerRegistrationData_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::storage::mojom::ServiceWorkerResourceRecordDataView> {
  using Data = ::storage::mojom::internal::ServiceWorkerResourceRecord_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace storage {
namespace mojom {


enum class ServiceWorkerDatabaseStatus : int32_t {
  
  kOk = 0,
  
  kErrorNotFound = 1,
  
  kErrorIOError = 2,
  
  kErrorCorrupted = 3,
  
  kErrorFailed = 4,
  
  kErrorNotSupported = 5,
  
  kErrorDisabled = 6,
  
  kErrorStorageDisconnected = 7,
  kMinValue = 0,
  kMaxValue = 7,
};

 std::ostream& operator<<(std::ostream& os, ServiceWorkerDatabaseStatus value);
inline bool IsKnownEnumValue(ServiceWorkerDatabaseStatus value) {
  return internal::ServiceWorkerDatabaseStatus_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


class ServiceWorkerRegistrationDataDataView {
 public:
  ServiceWorkerRegistrationDataDataView() = default;

  ServiceWorkerRegistrationDataDataView(
      internal::ServiceWorkerRegistrationData_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t registration_id() const {
    return data_->registration_id;
  }
  inline void GetScopeDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScope(UserType* output) {
    
    auto* pointer = data_->scope.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetKeyDataView(
      ::blink::mojom::StorageKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKey(UserType* output) {
    
    auto* pointer = data_->key.Get();
    return mojo::internal::Deserialize<::blink::mojom::StorageKeyDataView>(
        pointer, output, message_);
  }
  inline void GetScriptDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScript(UserType* output) {
    
    auto* pointer = data_->script.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadScriptType(UserType* output) const {
    auto data_value = data_->script_type;
    return mojo::internal::Deserialize<::blink::mojom::ScriptType>(
        data_value, output);
  }
  ::blink::mojom::ScriptType script_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ScriptType>(data_->script_type));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadUpdateViaCache(UserType* output) const {
    auto data_value = data_->update_via_cache;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerUpdateViaCache>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerUpdateViaCache update_via_cache() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerUpdateViaCache>(data_->update_via_cache));
  }
  int64_t version_id() const {
    return data_->version_id;
  }
  bool is_active() const {
    return data_->is_active;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadFetchHandlerType(UserType* output) const {
    auto data_value = data_->fetch_handler_type;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerFetchHandlerType>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerFetchHandlerType fetch_handler_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerFetchHandlerType>(data_->fetch_handler_type));
  }
  inline void GetLastUpdateCheckDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLastUpdateCheck(UserType* output) {
    
    auto* pointer = data_->last_update_check.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
  inline void GetScriptResponseTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScriptResponseTime(UserType* output) {
    
    auto* pointer = data_->script_response_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
  inline void GetOriginTrialTokensDataView(
      mojo::MapDataView<mojo::StringDataView, mojo::ArrayDataView<mojo::StringDataView>>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOriginTrialTokens(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::MapDataView<mojo::StringDataView, mojo::ArrayDataView<mojo::StringDataView>>, UserType>(),
    "Attempting to read the optional `origin_trial_tokens` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadOriginTrialTokens` instead "
    "of `ReadOriginTrialTokens if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->origin_trial_tokens.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<mojo::StringDataView, mojo::ArrayDataView<mojo::StringDataView>>>(
        pointer, output, message_);
  }
  inline void GetNavigationPreloadStateDataView(
      ::blink::mojom::NavigationPreloadStateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNavigationPreloadState(UserType* output) {
    
    auto* pointer = data_->navigation_preload_state.Get();
    return mojo::internal::Deserialize<::blink::mojom::NavigationPreloadStateDataView>(
        pointer, output, message_);
  }
  inline void GetUsedFeaturesDataView(
      mojo::ArrayDataView<::blink::mojom::WebFeature>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUsedFeatures(UserType* output) {
    
    auto* pointer = data_->used_features.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::WebFeature>>(
        pointer, output, message_);
  }
  int64_t resources_total_size_bytes() const {
    return data_->resources_total_size_bytes;
  }
  inline void GetCrossOriginEmbedderPolicyDataView(
      ::network::mojom::CrossOriginEmbedderPolicyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCrossOriginEmbedderPolicy(UserType* output) {
    
    auto* pointer = data_->cross_origin_embedder_policy.Get();
    return mojo::internal::Deserialize<::network::mojom::CrossOriginEmbedderPolicyDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadAncestorFrameType(UserType* output) const {
    auto data_value = data_->ancestor_frame_type;
    return mojo::internal::Deserialize<::blink::mojom::AncestorFrameType>(
        data_value, output);
  }
  ::blink::mojom::AncestorFrameType ancestor_frame_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::AncestorFrameType>(data_->ancestor_frame_type));
  }
 private:
  internal::ServiceWorkerRegistrationData_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerResourceRecordDataView {
 public:
  ServiceWorkerResourceRecordDataView() = default;

  ServiceWorkerResourceRecordDataView(
      internal::ServiceWorkerResourceRecord_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t resource_id() const {
    return data_->resource_id;
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  int64_t size_bytes() const {
    return data_->size_bytes;
  }
 private:
  internal::ServiceWorkerResourceRecord_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace storage

namespace std {

template <>
struct hash<::storage::mojom::ServiceWorkerDatabaseStatus>
    : public mojo::internal::EnumHashImpl<::storage::mojom::ServiceWorkerDatabaseStatus> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::storage::mojom::ServiceWorkerDatabaseStatus, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::storage::mojom::ServiceWorkerDatabaseStatus, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::storage::mojom::ServiceWorkerDatabaseStatus>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::storage::mojom::ServiceWorkerRegistrationDataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::storage::mojom::ServiceWorkerRegistrationDataDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::storage::mojom::internal::ServiceWorkerRegistrationData_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->registration_id = Traits::registration_id(input);
    decltype(Traits::scope(input)) in_scope = Traits::scope(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->scope)::BaseType> scope_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_scope, scope_fragment);
    fragment->scope.Set(
        scope_fragment.is_null() ? nullptr : scope_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->scope.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null scope in ServiceWorkerRegistrationData struct");
    decltype(Traits::key(input)) in_key = Traits::key(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->key)::BaseType> key_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::StorageKeyDataView>(
        in_key, key_fragment);
    fragment->key.Set(
        key_fragment.is_null() ? nullptr : key_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->key.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null key in ServiceWorkerRegistrationData struct");
    decltype(Traits::script(input)) in_script = Traits::script(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->script)::BaseType> script_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_script, script_fragment);
    fragment->script.Set(
        script_fragment.is_null() ? nullptr : script_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->script.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null script in ServiceWorkerRegistrationData struct");
    mojo::internal::Serialize<::blink::mojom::ScriptType>(
        Traits::script_type(input), &fragment->script_type);
    mojo::internal::Serialize<::blink::mojom::ServiceWorkerUpdateViaCache>(
        Traits::update_via_cache(input), &fragment->update_via_cache);
    fragment->version_id = Traits::version_id(input);
    fragment->is_active = Traits::is_active(input);
    mojo::internal::Serialize<::blink::mojom::ServiceWorkerFetchHandlerType>(
        Traits::fetch_handler_type(input), &fragment->fetch_handler_type);
    decltype(Traits::last_update_check(input)) in_last_update_check = Traits::last_update_check(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->last_update_check)::BaseType> last_update_check_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeDataView>(
        in_last_update_check, last_update_check_fragment);
    fragment->last_update_check.Set(
        last_update_check_fragment.is_null() ? nullptr : last_update_check_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->last_update_check.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null last_update_check in ServiceWorkerRegistrationData struct");
    decltype(Traits::script_response_time(input)) in_script_response_time = Traits::script_response_time(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->script_response_time)::BaseType> script_response_time_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeDataView>(
        in_script_response_time, script_response_time_fragment);
    fragment->script_response_time.Set(
        script_response_time_fragment.is_null() ? nullptr : script_response_time_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->script_response_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null script_response_time in ServiceWorkerRegistrationData struct");
    decltype(Traits::origin_trial_tokens(input)) in_origin_trial_tokens = Traits::origin_trial_tokens(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->origin_trial_tokens)::BaseType>
        origin_trial_tokens_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams origin_trial_tokens_validate_params(
        new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr))));
    mojo::internal::Serialize<mojo::MapDataView<mojo::StringDataView, mojo::ArrayDataView<mojo::StringDataView>>>(
        in_origin_trial_tokens, origin_trial_tokens_fragment, &origin_trial_tokens_validate_params);
    fragment->origin_trial_tokens.Set(
        origin_trial_tokens_fragment.is_null() ? nullptr : origin_trial_tokens_fragment.data());
    decltype(Traits::navigation_preload_state(input)) in_navigation_preload_state = Traits::navigation_preload_state(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->navigation_preload_state)::BaseType> navigation_preload_state_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::NavigationPreloadStateDataView>(
        in_navigation_preload_state, navigation_preload_state_fragment);
    fragment->navigation_preload_state.Set(
        navigation_preload_state_fragment.is_null() ? nullptr : navigation_preload_state_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->navigation_preload_state.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null navigation_preload_state in ServiceWorkerRegistrationData struct");
    decltype(Traits::used_features(input)) in_used_features = Traits::used_features(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->used_features)::BaseType>
        used_features_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams used_features_validate_params(
        0, ::blink::mojom::internal::WebFeature_Data::Validate);
    mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::WebFeature>>(
        in_used_features, used_features_fragment, &used_features_validate_params);
    fragment->used_features.Set(
        used_features_fragment.is_null() ? nullptr : used_features_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->used_features.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null used_features in ServiceWorkerRegistrationData struct");
    fragment->resources_total_size_bytes = Traits::resources_total_size_bytes(input);
    decltype(Traits::cross_origin_embedder_policy(input)) in_cross_origin_embedder_policy = Traits::cross_origin_embedder_policy(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->cross_origin_embedder_policy)::BaseType> cross_origin_embedder_policy_fragment(
            fragment.message());
    mojo::internal::Serialize<::network::mojom::CrossOriginEmbedderPolicyDataView>(
        in_cross_origin_embedder_policy, cross_origin_embedder_policy_fragment);
    fragment->cross_origin_embedder_policy.Set(
        cross_origin_embedder_policy_fragment.is_null() ? nullptr : cross_origin_embedder_policy_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->cross_origin_embedder_policy.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null cross_origin_embedder_policy in ServiceWorkerRegistrationData struct");
    mojo::internal::Serialize<::blink::mojom::AncestorFrameType>(
        Traits::ancestor_frame_type(input), &fragment->ancestor_frame_type);
  }

  static bool Deserialize(::storage::mojom::internal::ServiceWorkerRegistrationData_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::storage::mojom::ServiceWorkerRegistrationDataDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::storage::mojom::ServiceWorkerResourceRecordDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::storage::mojom::ServiceWorkerResourceRecordDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::storage::mojom::internal::ServiceWorkerResourceRecord_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->resource_id = Traits::resource_id(input);
    decltype(Traits::url(input)) in_url = Traits::url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->url)::BaseType> url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_url, url_fragment);
    fragment->url.Set(
        url_fragment.is_null() ? nullptr : url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in ServiceWorkerResourceRecord struct");
    fragment->size_bytes = Traits::size_bytes(input);
  }

  static bool Deserialize(::storage::mojom::internal::ServiceWorkerResourceRecord_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::storage::mojom::ServiceWorkerResourceRecordDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace storage {
namespace mojom {

inline void ServiceWorkerRegistrationDataDataView::GetScopeDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->scope.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void ServiceWorkerRegistrationDataDataView::GetKeyDataView(
    ::blink::mojom::StorageKeyDataView* output) {
  auto pointer = data_->key.Get();
  *output = ::blink::mojom::StorageKeyDataView(pointer, message_);
}
inline void ServiceWorkerRegistrationDataDataView::GetScriptDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->script.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void ServiceWorkerRegistrationDataDataView::GetLastUpdateCheckDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->last_update_check.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}
inline void ServiceWorkerRegistrationDataDataView::GetScriptResponseTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->script_response_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}
inline void ServiceWorkerRegistrationDataDataView::GetOriginTrialTokensDataView(
    mojo::MapDataView<mojo::StringDataView, mojo::ArrayDataView<mojo::StringDataView>>* output) {
  auto pointer = data_->origin_trial_tokens.Get();
  *output = mojo::MapDataView<mojo::StringDataView, mojo::ArrayDataView<mojo::StringDataView>>(pointer, message_);
}
inline void ServiceWorkerRegistrationDataDataView::GetNavigationPreloadStateDataView(
    ::blink::mojom::NavigationPreloadStateDataView* output) {
  auto pointer = data_->navigation_preload_state.Get();
  *output = ::blink::mojom::NavigationPreloadStateDataView(pointer, message_);
}
inline void ServiceWorkerRegistrationDataDataView::GetUsedFeaturesDataView(
    mojo::ArrayDataView<::blink::mojom::WebFeature>* output) {
  auto pointer = data_->used_features.Get();
  *output = mojo::ArrayDataView<::blink::mojom::WebFeature>(pointer, message_);
}
inline void ServiceWorkerRegistrationDataDataView::GetCrossOriginEmbedderPolicyDataView(
    ::network::mojom::CrossOriginEmbedderPolicyDataView* output) {
  auto pointer = data_->cross_origin_embedder_policy.Get();
  *output = ::network::mojom::CrossOriginEmbedderPolicyDataView(pointer, message_);
}


inline void ServiceWorkerResourceRecordDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace storage

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::storage::mojom::ServiceWorkerDatabaseStatus> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::storage::mojom::ServiceWorkerDatabaseStatus value);
};

} // namespace perfetto

#endif  // COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_SERVICE_WORKER_DATABASE_MOJOM_SHARED_H_