// components/services/storage/public/mojom/local_storage_control.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_LOCAL_STORAGE_CONTROL_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_LOCAL_STORAGE_CONTROL_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace storage {
namespace mojom {
namespace internal {

class ValidationContext;
class  LocalStorageControl_BindStorageArea_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::StorageKey_Data> storage_key;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<LocalStorageControl_BindStorageArea_Params_Data>;

  LocalStorageControl_BindStorageArea_Params_Data();
  ~LocalStorageControl_BindStorageArea_Params_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_BindStorageArea_Params_Data) == 24,
              "Bad sizeof(LocalStorageControl_BindStorageArea_Params_Data)");
class  LocalStorageControl_GetUsage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalStorageControl_GetUsage_Params_Data>;

  LocalStorageControl_GetUsage_Params_Data();
  ~LocalStorageControl_GetUsage_Params_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_GetUsage_Params_Data) == 8,
              "Bad sizeof(LocalStorageControl_GetUsage_Params_Data)");
class  LocalStorageControl_GetUsage_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::storage::mojom::internal::StorageUsageInfo_Data>>> info;

 private:
  friend class mojo::internal::MessageFragment<LocalStorageControl_GetUsage_ResponseParams_Data>;

  LocalStorageControl_GetUsage_ResponseParams_Data();
  ~LocalStorageControl_GetUsage_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_GetUsage_ResponseParams_Data) == 16,
              "Bad sizeof(LocalStorageControl_GetUsage_ResponseParams_Data)");
class  LocalStorageControl_DeleteStorage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::StorageKey_Data> storage_key;

 private:
  friend class mojo::internal::MessageFragment<LocalStorageControl_DeleteStorage_Params_Data>;

  LocalStorageControl_DeleteStorage_Params_Data();
  ~LocalStorageControl_DeleteStorage_Params_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_DeleteStorage_Params_Data) == 16,
              "Bad sizeof(LocalStorageControl_DeleteStorage_Params_Data)");
class  LocalStorageControl_DeleteStorage_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalStorageControl_DeleteStorage_ResponseParams_Data>;

  LocalStorageControl_DeleteStorage_ResponseParams_Data();
  ~LocalStorageControl_DeleteStorage_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_DeleteStorage_ResponseParams_Data) == 8,
              "Bad sizeof(LocalStorageControl_DeleteStorage_ResponseParams_Data)");
class  LocalStorageControl_CleanUpStorage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalStorageControl_CleanUpStorage_Params_Data>;

  LocalStorageControl_CleanUpStorage_Params_Data();
  ~LocalStorageControl_CleanUpStorage_Params_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_CleanUpStorage_Params_Data) == 8,
              "Bad sizeof(LocalStorageControl_CleanUpStorage_Params_Data)");
class  LocalStorageControl_CleanUpStorage_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalStorageControl_CleanUpStorage_ResponseParams_Data>;

  LocalStorageControl_CleanUpStorage_ResponseParams_Data();
  ~LocalStorageControl_CleanUpStorage_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_CleanUpStorage_ResponseParams_Data) == 8,
              "Bad sizeof(LocalStorageControl_CleanUpStorage_ResponseParams_Data)");
class  LocalStorageControl_Flush_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalStorageControl_Flush_Params_Data>;

  LocalStorageControl_Flush_Params_Data();
  ~LocalStorageControl_Flush_Params_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_Flush_Params_Data) == 8,
              "Bad sizeof(LocalStorageControl_Flush_Params_Data)");
class  LocalStorageControl_Flush_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalStorageControl_Flush_ResponseParams_Data>;

  LocalStorageControl_Flush_ResponseParams_Data();
  ~LocalStorageControl_Flush_ResponseParams_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_Flush_ResponseParams_Data) == 8,
              "Bad sizeof(LocalStorageControl_Flush_ResponseParams_Data)");
class  LocalStorageControl_PurgeMemory_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalStorageControl_PurgeMemory_Params_Data>;

  LocalStorageControl_PurgeMemory_Params_Data();
  ~LocalStorageControl_PurgeMemory_Params_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_PurgeMemory_Params_Data) == 8,
              "Bad sizeof(LocalStorageControl_PurgeMemory_Params_Data)");
class  LocalStorageControl_ApplyPolicyUpdates_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::storage::mojom::internal::StoragePolicyUpdate_Data>>> policy_updates;

 private:
  friend class mojo::internal::MessageFragment<LocalStorageControl_ApplyPolicyUpdates_Params_Data>;

  LocalStorageControl_ApplyPolicyUpdates_Params_Data();
  ~LocalStorageControl_ApplyPolicyUpdates_Params_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_ApplyPolicyUpdates_Params_Data) == 16,
              "Bad sizeof(LocalStorageControl_ApplyPolicyUpdates_Params_Data)");
class  LocalStorageControl_ForceKeepSessionState_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<LocalStorageControl_ForceKeepSessionState_Params_Data>;

  LocalStorageControl_ForceKeepSessionState_Params_Data();
  ~LocalStorageControl_ForceKeepSessionState_Params_Data() = delete;
};
static_assert(sizeof(LocalStorageControl_ForceKeepSessionState_Params_Data) == 8,
              "Bad sizeof(LocalStorageControl_ForceKeepSessionState_Params_Data)");

}  // namespace internal


class LocalStorageControl_BindStorageArea_ParamsDataView {
 public:
  LocalStorageControl_BindStorageArea_ParamsDataView() = default;

  LocalStorageControl_BindStorageArea_ParamsDataView(
      internal::LocalStorageControl_BindStorageArea_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStorageKeyDataView(
      ::blink::mojom::StorageKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStorageKey(UserType* output) {
    
    auto* pointer = data_->storage_key.Get();
    return mojo::internal::Deserialize<::blink::mojom::StorageKeyDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::StorageAreaInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::LocalStorageControl_BindStorageArea_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalStorageControl_GetUsage_ParamsDataView {
 public:
  LocalStorageControl_GetUsage_ParamsDataView() = default;

  LocalStorageControl_GetUsage_ParamsDataView(
      internal::LocalStorageControl_GetUsage_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalStorageControl_GetUsage_Params_Data* data_ = nullptr;
};



class LocalStorageControl_GetUsage_ResponseParamsDataView {
 public:
  LocalStorageControl_GetUsage_ResponseParamsDataView() = default;

  LocalStorageControl_GetUsage_ResponseParamsDataView(
      internal::LocalStorageControl_GetUsage_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetInfoDataView(
      mojo::ArrayDataView<::storage::mojom::StorageUsageInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInfo(UserType* output) {
    
    auto* pointer = data_->info.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::storage::mojom::StorageUsageInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::LocalStorageControl_GetUsage_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalStorageControl_DeleteStorage_ParamsDataView {
 public:
  LocalStorageControl_DeleteStorage_ParamsDataView() = default;

  LocalStorageControl_DeleteStorage_ParamsDataView(
      internal::LocalStorageControl_DeleteStorage_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStorageKeyDataView(
      ::blink::mojom::StorageKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStorageKey(UserType* output) {
    
    auto* pointer = data_->storage_key.Get();
    return mojo::internal::Deserialize<::blink::mojom::StorageKeyDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocalStorageControl_DeleteStorage_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalStorageControl_DeleteStorage_ResponseParamsDataView {
 public:
  LocalStorageControl_DeleteStorage_ResponseParamsDataView() = default;

  LocalStorageControl_DeleteStorage_ResponseParamsDataView(
      internal::LocalStorageControl_DeleteStorage_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalStorageControl_DeleteStorage_ResponseParams_Data* data_ = nullptr;
};



class LocalStorageControl_CleanUpStorage_ParamsDataView {
 public:
  LocalStorageControl_CleanUpStorage_ParamsDataView() = default;

  LocalStorageControl_CleanUpStorage_ParamsDataView(
      internal::LocalStorageControl_CleanUpStorage_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalStorageControl_CleanUpStorage_Params_Data* data_ = nullptr;
};



class LocalStorageControl_CleanUpStorage_ResponseParamsDataView {
 public:
  LocalStorageControl_CleanUpStorage_ResponseParamsDataView() = default;

  LocalStorageControl_CleanUpStorage_ResponseParamsDataView(
      internal::LocalStorageControl_CleanUpStorage_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalStorageControl_CleanUpStorage_ResponseParams_Data* data_ = nullptr;
};



class LocalStorageControl_Flush_ParamsDataView {
 public:
  LocalStorageControl_Flush_ParamsDataView() = default;

  LocalStorageControl_Flush_ParamsDataView(
      internal::LocalStorageControl_Flush_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalStorageControl_Flush_Params_Data* data_ = nullptr;
};



class LocalStorageControl_Flush_ResponseParamsDataView {
 public:
  LocalStorageControl_Flush_ResponseParamsDataView() = default;

  LocalStorageControl_Flush_ResponseParamsDataView(
      internal::LocalStorageControl_Flush_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalStorageControl_Flush_ResponseParams_Data* data_ = nullptr;
};



class LocalStorageControl_PurgeMemory_ParamsDataView {
 public:
  LocalStorageControl_PurgeMemory_ParamsDataView() = default;

  LocalStorageControl_PurgeMemory_ParamsDataView(
      internal::LocalStorageControl_PurgeMemory_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalStorageControl_PurgeMemory_Params_Data* data_ = nullptr;
};



class LocalStorageControl_ApplyPolicyUpdates_ParamsDataView {
 public:
  LocalStorageControl_ApplyPolicyUpdates_ParamsDataView() = default;

  LocalStorageControl_ApplyPolicyUpdates_ParamsDataView(
      internal::LocalStorageControl_ApplyPolicyUpdates_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPolicyUpdatesDataView(
      mojo::ArrayDataView<::storage::mojom::StoragePolicyUpdateDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPolicyUpdates(UserType* output) {
    
    auto* pointer = data_->policy_updates.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::storage::mojom::StoragePolicyUpdateDataView>>(
        pointer, output, message_);
  }
 private:
  internal::LocalStorageControl_ApplyPolicyUpdates_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LocalStorageControl_ForceKeepSessionState_ParamsDataView {
 public:
  LocalStorageControl_ForceKeepSessionState_ParamsDataView() = default;

  LocalStorageControl_ForceKeepSessionState_ParamsDataView(
      internal::LocalStorageControl_ForceKeepSessionState_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::LocalStorageControl_ForceKeepSessionState_Params_Data* data_ = nullptr;
};


inline void LocalStorageControl_BindStorageArea_ParamsDataView::GetStorageKeyDataView(
    ::blink::mojom::StorageKeyDataView* output) {
  auto pointer = data_->storage_key.Get();
  *output = ::blink::mojom::StorageKeyDataView(pointer, message_);
}




inline void LocalStorageControl_GetUsage_ResponseParamsDataView::GetInfoDataView(
    mojo::ArrayDataView<::storage::mojom::StorageUsageInfoDataView>* output) {
  auto pointer = data_->info.Get();
  *output = mojo::ArrayDataView<::storage::mojom::StorageUsageInfoDataView>(pointer, message_);
}


inline void LocalStorageControl_DeleteStorage_ParamsDataView::GetStorageKeyDataView(
    ::blink::mojom::StorageKeyDataView* output) {
  auto pointer = data_->storage_key.Get();
  *output = ::blink::mojom::StorageKeyDataView(pointer, message_);
}














inline void LocalStorageControl_ApplyPolicyUpdates_ParamsDataView::GetPolicyUpdatesDataView(
    mojo::ArrayDataView<::storage::mojom::StoragePolicyUpdateDataView>* output) {
  auto pointer = data_->policy_updates.Get();
  *output = mojo::ArrayDataView<::storage::mojom::StoragePolicyUpdateDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace storage

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_LOCAL_STORAGE_CONTROL_MOJOM_PARAMS_DATA_H_