// components/services/storage/public/mojom/partition.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_PARTITION_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_PARTITION_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace storage {
namespace mojom {
namespace internal {

class ValidationContext;
class  Partition_BindOriginContext_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<Partition_BindOriginContext_Params_Data>;

  Partition_BindOriginContext_Params_Data();
  ~Partition_BindOriginContext_Params_Data() = delete;
};
static_assert(sizeof(Partition_BindOriginContext_Params_Data) == 24,
              "Bad sizeof(Partition_BindOriginContext_Params_Data)");
class  Partition_BindSessionStorageControl_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<Partition_BindSessionStorageControl_Params_Data>;

  Partition_BindSessionStorageControl_Params_Data();
  ~Partition_BindSessionStorageControl_Params_Data() = delete;
};
static_assert(sizeof(Partition_BindSessionStorageControl_Params_Data) == 16,
              "Bad sizeof(Partition_BindSessionStorageControl_Params_Data)");
class  Partition_BindLocalStorageControl_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<Partition_BindLocalStorageControl_Params_Data>;

  Partition_BindLocalStorageControl_Params_Data();
  ~Partition_BindLocalStorageControl_Params_Data() = delete;
};
static_assert(sizeof(Partition_BindLocalStorageControl_Params_Data) == 16,
              "Bad sizeof(Partition_BindLocalStorageControl_Params_Data)");
class  Partition_BindServiceWorkerStorageControl_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<Partition_BindServiceWorkerStorageControl_Params_Data>;

  Partition_BindServiceWorkerStorageControl_Params_Data();
  ~Partition_BindServiceWorkerStorageControl_Params_Data() = delete;
};
static_assert(sizeof(Partition_BindServiceWorkerStorageControl_Params_Data) == 16,
              "Bad sizeof(Partition_BindServiceWorkerStorageControl_Params_Data)");

}  // namespace internal


class Partition_BindOriginContext_ParamsDataView {
 public:
  Partition_BindOriginContext_ParamsDataView() = default;

  Partition_BindOriginContext_ParamsDataView(
      internal::Partition_BindOriginContext_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOrigin(UserType* output) {
    
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::storage::mojom::OriginContextInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Partition_BindOriginContext_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Partition_BindSessionStorageControl_ParamsDataView {
 public:
  Partition_BindSessionStorageControl_ParamsDataView() = default;

  Partition_BindSessionStorageControl_ParamsDataView(
      internal::Partition_BindSessionStorageControl_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::storage::mojom::SessionStorageControlInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Partition_BindSessionStorageControl_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Partition_BindLocalStorageControl_ParamsDataView {
 public:
  Partition_BindLocalStorageControl_ParamsDataView() = default;

  Partition_BindLocalStorageControl_ParamsDataView(
      internal::Partition_BindLocalStorageControl_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::storage::mojom::LocalStorageControlInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Partition_BindLocalStorageControl_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Partition_BindServiceWorkerStorageControl_ParamsDataView {
 public:
  Partition_BindServiceWorkerStorageControl_ParamsDataView() = default;

  Partition_BindServiceWorkerStorageControl_ParamsDataView(
      internal::Partition_BindServiceWorkerStorageControl_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::storage::mojom::ServiceWorkerStorageControlInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Partition_BindServiceWorkerStorageControl_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void Partition_BindOriginContext_ParamsDataView::GetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}







}  // namespace mojom
}  // namespace storage

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_PARTITION_MOJOM_PARAMS_DATA_H_