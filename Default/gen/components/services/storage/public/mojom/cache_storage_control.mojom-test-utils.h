// components/services/storage/public/mojom/cache_storage_control.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_CACHE_STORAGE_CONTROL_MOJOM_TEST_UTILS_H_
#define COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_CACHE_STORAGE_CONTROL_MOJOM_TEST_UTILS_H_

#include "components/services/storage/public/mojom/cache_storage_control.mojom.h"


namespace storage {
namespace mojom {


class  CacheStorageObserverInterceptorForTesting : public CacheStorageObserver {
  virtual CacheStorageObserver* GetForwardingInterface() = 0;
  void OnCacheListChanged(const ::blink::StorageKey& storage_key) override;
  void OnCacheContentChanged(const ::blink::StorageKey& storage_key, const std::string& cache_name) override;
};
class  CacheStorageObserverAsyncWaiter {
 public:
  explicit CacheStorageObserverAsyncWaiter(CacheStorageObserver* proxy);

  CacheStorageObserverAsyncWaiter(const CacheStorageObserverAsyncWaiter&) = delete;
  CacheStorageObserverAsyncWaiter& operator=(const CacheStorageObserverAsyncWaiter&) = delete;

  ~CacheStorageObserverAsyncWaiter();

 private:
  CacheStorageObserver* const proxy_;
};


class  CacheStorageControlInterceptorForTesting : public CacheStorageControl {
  virtual CacheStorageControl* GetForwardingInterface() = 0;
  void AddReceiver(const ::network::CrossOriginEmbedderPolicy& policy, ::mojo::PendingRemote<::network::mojom::CrossOriginEmbedderPolicyReporter> coep_reporter, const ::blink::StorageKey& storage_key, CacheStorageOwner owner, ::mojo::PendingReceiver<::blink::mojom::CacheStorage> receiver) override;
  void DeleteForStorageKey(const ::blink::StorageKey& storage_key) override;
  void GetAllStorageKeysInfo(GetAllStorageKeysInfoCallback callback) override;
  void AddObserver(::mojo::PendingRemote<CacheStorageObserver> observer) override;
  void ApplyPolicyUpdates(std::vector<::storage::mojom::StoragePolicyUpdatePtr> policy_updates) override;
};
class  CacheStorageControlAsyncWaiter {
 public:
  explicit CacheStorageControlAsyncWaiter(CacheStorageControl* proxy);

  CacheStorageControlAsyncWaiter(const CacheStorageControlAsyncWaiter&) = delete;
  CacheStorageControlAsyncWaiter& operator=(const CacheStorageControlAsyncWaiter&) = delete;

  ~CacheStorageControlAsyncWaiter();
  void GetAllStorageKeysInfo(
      std::vector<::storage::mojom::StorageUsageInfoPtr>* out_usage_info);

 private:
  CacheStorageControl* const proxy_;
};




}  // namespace mojom
}  // namespace storage

#endif  // COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_CACHE_STORAGE_CONTROL_MOJOM_TEST_UTILS_H_