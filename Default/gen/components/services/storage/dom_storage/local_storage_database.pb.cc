// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: local_storage_database.proto

#include "local_storage_database.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace storage {
PROTOBUF_CONSTEXPR LocalStorageStorageKeyMetaData::LocalStorageStorageKeyMetaData(
    ::_pbi::ConstantInitialized)
  : last_modified_(int64_t{0})
  , size_bytes_(uint64_t{0u}){}
struct LocalStorageStorageKeyMetaDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalStorageStorageKeyMetaDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalStorageStorageKeyMetaDataDefaultTypeInternal() {}
  union {
    LocalStorageStorageKeyMetaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalStorageStorageKeyMetaDataDefaultTypeInternal _LocalStorageStorageKeyMetaData_default_instance_;
}  // namespace storage
namespace storage {

// ===================================================================

class LocalStorageStorageKeyMetaData::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalStorageStorageKeyMetaData>()._has_bits_);
  static void set_has_last_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

LocalStorageStorageKeyMetaData::LocalStorageStorageKeyMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:storage.LocalStorageStorageKeyMetaData)
}
LocalStorageStorageKeyMetaData::LocalStorageStorageKeyMetaData(const LocalStorageStorageKeyMetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&last_modified_, &from.last_modified_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_bytes_) -
    reinterpret_cast<char*>(&last_modified_)) + sizeof(size_bytes_));
  // @@protoc_insertion_point(copy_constructor:storage.LocalStorageStorageKeyMetaData)
}

inline void LocalStorageStorageKeyMetaData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_modified_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_bytes_) -
    reinterpret_cast<char*>(&last_modified_)) + sizeof(size_bytes_));
}

LocalStorageStorageKeyMetaData::~LocalStorageStorageKeyMetaData() {
  // @@protoc_insertion_point(destructor:storage.LocalStorageStorageKeyMetaData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalStorageStorageKeyMetaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LocalStorageStorageKeyMetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalStorageStorageKeyMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:storage.LocalStorageStorageKeyMetaData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&last_modified_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_bytes_) -
        reinterpret_cast<char*>(&last_modified_)) + sizeof(size_bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LocalStorageStorageKeyMetaData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 last_modified = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_last_modified(&has_bits);
          last_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 size_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_size_bytes(&has_bits);
          size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalStorageStorageKeyMetaData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:storage.LocalStorageStorageKeyMetaData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 last_modified = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_last_modified(), target);
  }

  // required uint64 size_bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_size_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storage.LocalStorageStorageKeyMetaData)
  return target;
}

size_t LocalStorageStorageKeyMetaData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:storage.LocalStorageStorageKeyMetaData)
  size_t total_size = 0;

  if (_internal_has_last_modified()) {
    // required int64 last_modified = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_modified());
  }

  if (_internal_has_size_bytes()) {
    // required uint64 size_bytes = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size_bytes());
  }

  return total_size;
}
size_t LocalStorageStorageKeyMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storage.LocalStorageStorageKeyMetaData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 last_modified = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_modified());

    // required uint64 size_bytes = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size_bytes());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalStorageStorageKeyMetaData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LocalStorageStorageKeyMetaData*>(
      &from));
}

void LocalStorageStorageKeyMetaData::MergeFrom(const LocalStorageStorageKeyMetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storage.LocalStorageStorageKeyMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      last_modified_ = from.last_modified_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_bytes_ = from.size_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LocalStorageStorageKeyMetaData::CopyFrom(const LocalStorageStorageKeyMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storage.LocalStorageStorageKeyMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalStorageStorageKeyMetaData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LocalStorageStorageKeyMetaData::InternalSwap(LocalStorageStorageKeyMetaData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalStorageStorageKeyMetaData, size_bytes_)
      + sizeof(LocalStorageStorageKeyMetaData::size_bytes_)
      - PROTOBUF_FIELD_OFFSET(LocalStorageStorageKeyMetaData, last_modified_)>(
          reinterpret_cast<char*>(&last_modified_),
          reinterpret_cast<char*>(&other->last_modified_));
}

std::string LocalStorageStorageKeyMetaData::GetTypeName() const {
  return "storage.LocalStorageStorageKeyMetaData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace storage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::storage::LocalStorageStorageKeyMetaData*
Arena::CreateMaybeMessage< ::storage::LocalStorageStorageKeyMetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::storage::LocalStorageStorageKeyMetaData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
