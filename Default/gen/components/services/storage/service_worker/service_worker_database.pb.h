// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_worker_database.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_5fworker_5fdatabase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service_5fworker_5fdatabase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_5fworker_5fdatabase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service_5fworker_5fdatabase_2eproto {
  static const uint32_t offsets[];
};
namespace storage {
class ServiceWorkerNavigationPreloadState;
struct ServiceWorkerNavigationPreloadStateDefaultTypeInternal;
extern ServiceWorkerNavigationPreloadStateDefaultTypeInternal _ServiceWorkerNavigationPreloadState_default_instance_;
class ServiceWorkerOriginTrialFeature;
struct ServiceWorkerOriginTrialFeatureDefaultTypeInternal;
extern ServiceWorkerOriginTrialFeatureDefaultTypeInternal _ServiceWorkerOriginTrialFeature_default_instance_;
class ServiceWorkerOriginTrialInfo;
struct ServiceWorkerOriginTrialInfoDefaultTypeInternal;
extern ServiceWorkerOriginTrialInfoDefaultTypeInternal _ServiceWorkerOriginTrialInfo_default_instance_;
class ServiceWorkerRegistrationData;
struct ServiceWorkerRegistrationDataDefaultTypeInternal;
extern ServiceWorkerRegistrationDataDefaultTypeInternal _ServiceWorkerRegistrationData_default_instance_;
class ServiceWorkerResourceRecord;
struct ServiceWorkerResourceRecordDefaultTypeInternal;
extern ServiceWorkerResourceRecordDefaultTypeInternal _ServiceWorkerResourceRecord_default_instance_;
}  // namespace storage
PROTOBUF_NAMESPACE_OPEN
template<> ::storage::ServiceWorkerNavigationPreloadState* Arena::CreateMaybeMessage<::storage::ServiceWorkerNavigationPreloadState>(Arena*);
template<> ::storage::ServiceWorkerOriginTrialFeature* Arena::CreateMaybeMessage<::storage::ServiceWorkerOriginTrialFeature>(Arena*);
template<> ::storage::ServiceWorkerOriginTrialInfo* Arena::CreateMaybeMessage<::storage::ServiceWorkerOriginTrialInfo>(Arena*);
template<> ::storage::ServiceWorkerRegistrationData* Arena::CreateMaybeMessage<::storage::ServiceWorkerRegistrationData>(Arena*);
template<> ::storage::ServiceWorkerResourceRecord* Arena::CreateMaybeMessage<::storage::ServiceWorkerResourceRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace storage {

enum ServiceWorkerRegistrationData_ServiceWorkerScriptType : int {
  ServiceWorkerRegistrationData_ServiceWorkerScriptType_CLASSIC = 0,
  ServiceWorkerRegistrationData_ServiceWorkerScriptType_MODULE = 1
};
bool ServiceWorkerRegistrationData_ServiceWorkerScriptType_IsValid(int value);
constexpr ServiceWorkerRegistrationData_ServiceWorkerScriptType ServiceWorkerRegistrationData_ServiceWorkerScriptType_ServiceWorkerScriptType_MIN = ServiceWorkerRegistrationData_ServiceWorkerScriptType_CLASSIC;
constexpr ServiceWorkerRegistrationData_ServiceWorkerScriptType ServiceWorkerRegistrationData_ServiceWorkerScriptType_ServiceWorkerScriptType_MAX = ServiceWorkerRegistrationData_ServiceWorkerScriptType_MODULE;
constexpr int ServiceWorkerRegistrationData_ServiceWorkerScriptType_ServiceWorkerScriptType_ARRAYSIZE = ServiceWorkerRegistrationData_ServiceWorkerScriptType_ServiceWorkerScriptType_MAX + 1;

const std::string& ServiceWorkerRegistrationData_ServiceWorkerScriptType_Name(ServiceWorkerRegistrationData_ServiceWorkerScriptType value);
template<typename T>
inline const std::string& ServiceWorkerRegistrationData_ServiceWorkerScriptType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceWorkerRegistrationData_ServiceWorkerScriptType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceWorkerRegistrationData_ServiceWorkerScriptType_Name.");
  return ServiceWorkerRegistrationData_ServiceWorkerScriptType_Name(static_cast<ServiceWorkerRegistrationData_ServiceWorkerScriptType>(enum_t_value));
}
bool ServiceWorkerRegistrationData_ServiceWorkerScriptType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceWorkerRegistrationData_ServiceWorkerScriptType* value);
enum ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType : int {
  ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IMPORTS = 0,
  ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ALL = 1,
  ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_NONE = 2
};
bool ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IsValid(int value);
constexpr ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_MIN = ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IMPORTS;
constexpr ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_MAX = ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_NONE;
constexpr int ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_ARRAYSIZE = ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_MAX + 1;

const std::string& ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_Name(ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType value);
template<typename T>
inline const std::string& ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_Name.");
  return ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_Name(static_cast<ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType>(enum_t_value));
}
bool ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType* value);
enum ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue : int {
  ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_NONE_OR_NOT_EXIST = 0,
  ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_REQUIRE_CORP = 1,
  ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_CREDENTIALLESS = 2
};
bool ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_IsValid(int value);
constexpr ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_CrossOriginEmbedderPolicyValue_MIN = ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_NONE_OR_NOT_EXIST;
constexpr ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_CrossOriginEmbedderPolicyValue_MAX = ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_CREDENTIALLESS;
constexpr int ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_CrossOriginEmbedderPolicyValue_ARRAYSIZE = ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_CrossOriginEmbedderPolicyValue_MAX + 1;

const std::string& ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_Name(ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue value);
template<typename T>
inline const std::string& ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_Name.");
  return ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_Name(static_cast<ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue>(enum_t_value));
}
bool ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue* value);
enum ServiceWorkerRegistrationData_AncestorFrameType : int {
  ServiceWorkerRegistrationData_AncestorFrameType_NORMAL_FRAME = 0,
  ServiceWorkerRegistrationData_AncestorFrameType_FENCED_FRAME = 1
};
bool ServiceWorkerRegistrationData_AncestorFrameType_IsValid(int value);
constexpr ServiceWorkerRegistrationData_AncestorFrameType ServiceWorkerRegistrationData_AncestorFrameType_AncestorFrameType_MIN = ServiceWorkerRegistrationData_AncestorFrameType_NORMAL_FRAME;
constexpr ServiceWorkerRegistrationData_AncestorFrameType ServiceWorkerRegistrationData_AncestorFrameType_AncestorFrameType_MAX = ServiceWorkerRegistrationData_AncestorFrameType_FENCED_FRAME;
constexpr int ServiceWorkerRegistrationData_AncestorFrameType_AncestorFrameType_ARRAYSIZE = ServiceWorkerRegistrationData_AncestorFrameType_AncestorFrameType_MAX + 1;

const std::string& ServiceWorkerRegistrationData_AncestorFrameType_Name(ServiceWorkerRegistrationData_AncestorFrameType value);
template<typename T>
inline const std::string& ServiceWorkerRegistrationData_AncestorFrameType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceWorkerRegistrationData_AncestorFrameType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceWorkerRegistrationData_AncestorFrameType_Name.");
  return ServiceWorkerRegistrationData_AncestorFrameType_Name(static_cast<ServiceWorkerRegistrationData_AncestorFrameType>(enum_t_value));
}
bool ServiceWorkerRegistrationData_AncestorFrameType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceWorkerRegistrationData_AncestorFrameType* value);
enum ServiceWorkerRegistrationData_FetchHandlerSkippableType : int {
  ServiceWorkerRegistrationData_FetchHandlerSkippableType_NOT_SKIPPABLE = 1,
  ServiceWorkerRegistrationData_FetchHandlerSkippableType_SKIPPABLE_EMPTY_FETCH_HANDLER = 2
};
bool ServiceWorkerRegistrationData_FetchHandlerSkippableType_IsValid(int value);
constexpr ServiceWorkerRegistrationData_FetchHandlerSkippableType ServiceWorkerRegistrationData_FetchHandlerSkippableType_FetchHandlerSkippableType_MIN = ServiceWorkerRegistrationData_FetchHandlerSkippableType_NOT_SKIPPABLE;
constexpr ServiceWorkerRegistrationData_FetchHandlerSkippableType ServiceWorkerRegistrationData_FetchHandlerSkippableType_FetchHandlerSkippableType_MAX = ServiceWorkerRegistrationData_FetchHandlerSkippableType_SKIPPABLE_EMPTY_FETCH_HANDLER;
constexpr int ServiceWorkerRegistrationData_FetchHandlerSkippableType_FetchHandlerSkippableType_ARRAYSIZE = ServiceWorkerRegistrationData_FetchHandlerSkippableType_FetchHandlerSkippableType_MAX + 1;

const std::string& ServiceWorkerRegistrationData_FetchHandlerSkippableType_Name(ServiceWorkerRegistrationData_FetchHandlerSkippableType value);
template<typename T>
inline const std::string& ServiceWorkerRegistrationData_FetchHandlerSkippableType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceWorkerRegistrationData_FetchHandlerSkippableType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceWorkerRegistrationData_FetchHandlerSkippableType_Name.");
  return ServiceWorkerRegistrationData_FetchHandlerSkippableType_Name(static_cast<ServiceWorkerRegistrationData_FetchHandlerSkippableType>(enum_t_value));
}
bool ServiceWorkerRegistrationData_FetchHandlerSkippableType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceWorkerRegistrationData_FetchHandlerSkippableType* value);
// ===================================================================

class ServiceWorkerOriginTrialFeature final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:storage.ServiceWorkerOriginTrialFeature) */ {
 public:
  inline ServiceWorkerOriginTrialFeature() : ServiceWorkerOriginTrialFeature(nullptr) {}
  ~ServiceWorkerOriginTrialFeature() override;
  explicit PROTOBUF_CONSTEXPR ServiceWorkerOriginTrialFeature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceWorkerOriginTrialFeature(const ServiceWorkerOriginTrialFeature& from);
  ServiceWorkerOriginTrialFeature(ServiceWorkerOriginTrialFeature&& from) noexcept
    : ServiceWorkerOriginTrialFeature() {
    *this = ::std::move(from);
  }

  inline ServiceWorkerOriginTrialFeature& operator=(const ServiceWorkerOriginTrialFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceWorkerOriginTrialFeature& operator=(ServiceWorkerOriginTrialFeature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ServiceWorkerOriginTrialFeature& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceWorkerOriginTrialFeature* internal_default_instance() {
    return reinterpret_cast<const ServiceWorkerOriginTrialFeature*>(
               &_ServiceWorkerOriginTrialFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceWorkerOriginTrialFeature& a, ServiceWorkerOriginTrialFeature& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ServiceWorkerOriginTrialFeature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceWorkerOriginTrialFeature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceWorkerOriginTrialFeature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceWorkerOriginTrialFeature>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ServiceWorkerOriginTrialFeature& from);
  void MergeFrom(const ServiceWorkerOriginTrialFeature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceWorkerOriginTrialFeature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage.ServiceWorkerOriginTrialFeature";
  }
  protected:
  explicit ServiceWorkerOriginTrialFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokensFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string tokens = 2;
  int tokens_size() const;
  private:
  int _internal_tokens_size() const;
  public:
  void clear_tokens();
  const std::string& tokens(int index) const;
  std::string* mutable_tokens(int index);
  void set_tokens(int index, const std::string& value);
  void set_tokens(int index, std::string&& value);
  void set_tokens(int index, const char* value);
  void set_tokens(int index, const char* value, size_t size);
  std::string* add_tokens();
  void add_tokens(const std::string& value);
  void add_tokens(std::string&& value);
  void add_tokens(const char* value);
  void add_tokens(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tokens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tokens();
  private:
  const std::string& _internal_tokens(int index) const;
  std::string* _internal_add_tokens();
  public:

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:storage.ServiceWorkerOriginTrialFeature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tokens_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_service_5fworker_5fdatabase_2eproto;
};
// -------------------------------------------------------------------

class ServiceWorkerOriginTrialInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:storage.ServiceWorkerOriginTrialInfo) */ {
 public:
  inline ServiceWorkerOriginTrialInfo() : ServiceWorkerOriginTrialInfo(nullptr) {}
  ~ServiceWorkerOriginTrialInfo() override;
  explicit PROTOBUF_CONSTEXPR ServiceWorkerOriginTrialInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceWorkerOriginTrialInfo(const ServiceWorkerOriginTrialInfo& from);
  ServiceWorkerOriginTrialInfo(ServiceWorkerOriginTrialInfo&& from) noexcept
    : ServiceWorkerOriginTrialInfo() {
    *this = ::std::move(from);
  }

  inline ServiceWorkerOriginTrialInfo& operator=(const ServiceWorkerOriginTrialInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceWorkerOriginTrialInfo& operator=(ServiceWorkerOriginTrialInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ServiceWorkerOriginTrialInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceWorkerOriginTrialInfo* internal_default_instance() {
    return reinterpret_cast<const ServiceWorkerOriginTrialInfo*>(
               &_ServiceWorkerOriginTrialInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServiceWorkerOriginTrialInfo& a, ServiceWorkerOriginTrialInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ServiceWorkerOriginTrialInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceWorkerOriginTrialInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceWorkerOriginTrialInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceWorkerOriginTrialInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ServiceWorkerOriginTrialInfo& from);
  void MergeFrom(const ServiceWorkerOriginTrialInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceWorkerOriginTrialInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage.ServiceWorkerOriginTrialInfo";
  }
  protected:
  explicit ServiceWorkerOriginTrialInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 1,
  };
  // repeated .storage.ServiceWorkerOriginTrialFeature features = 1;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  ::storage::ServiceWorkerOriginTrialFeature* mutable_features(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage::ServiceWorkerOriginTrialFeature >*
      mutable_features();
  private:
  const ::storage::ServiceWorkerOriginTrialFeature& _internal_features(int index) const;
  ::storage::ServiceWorkerOriginTrialFeature* _internal_add_features();
  public:
  const ::storage::ServiceWorkerOriginTrialFeature& features(int index) const;
  ::storage::ServiceWorkerOriginTrialFeature* add_features();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage::ServiceWorkerOriginTrialFeature >&
      features() const;

  // @@protoc_insertion_point(class_scope:storage.ServiceWorkerOriginTrialInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage::ServiceWorkerOriginTrialFeature > features_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_5fworker_5fdatabase_2eproto;
};
// -------------------------------------------------------------------

class ServiceWorkerNavigationPreloadState final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:storage.ServiceWorkerNavigationPreloadState) */ {
 public:
  inline ServiceWorkerNavigationPreloadState() : ServiceWorkerNavigationPreloadState(nullptr) {}
  ~ServiceWorkerNavigationPreloadState() override;
  explicit PROTOBUF_CONSTEXPR ServiceWorkerNavigationPreloadState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceWorkerNavigationPreloadState(const ServiceWorkerNavigationPreloadState& from);
  ServiceWorkerNavigationPreloadState(ServiceWorkerNavigationPreloadState&& from) noexcept
    : ServiceWorkerNavigationPreloadState() {
    *this = ::std::move(from);
  }

  inline ServiceWorkerNavigationPreloadState& operator=(const ServiceWorkerNavigationPreloadState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceWorkerNavigationPreloadState& operator=(ServiceWorkerNavigationPreloadState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ServiceWorkerNavigationPreloadState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceWorkerNavigationPreloadState* internal_default_instance() {
    return reinterpret_cast<const ServiceWorkerNavigationPreloadState*>(
               &_ServiceWorkerNavigationPreloadState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServiceWorkerNavigationPreloadState& a, ServiceWorkerNavigationPreloadState& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ServiceWorkerNavigationPreloadState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceWorkerNavigationPreloadState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceWorkerNavigationPreloadState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceWorkerNavigationPreloadState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ServiceWorkerNavigationPreloadState& from);
  void MergeFrom(const ServiceWorkerNavigationPreloadState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceWorkerNavigationPreloadState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage.ServiceWorkerNavigationPreloadState";
  }
  protected:
  explicit ServiceWorkerNavigationPreloadState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 2,
    kEnabledFieldNumber = 1,
  };
  // optional string header = 2;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const std::string& header() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_header(ArgT0&& arg0, ArgT... args);
  std::string* mutable_header();
  PROTOBUF_NODISCARD std::string* release_header();
  void set_allocated_header(std::string* header);
  private:
  const std::string& _internal_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header(const std::string& value);
  std::string* _internal_mutable_header();
  public:

  // required bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:storage.ServiceWorkerNavigationPreloadState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  bool enabled_;
  friend struct ::TableStruct_service_5fworker_5fdatabase_2eproto;
};
// -------------------------------------------------------------------

class ServiceWorkerRegistrationData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:storage.ServiceWorkerRegistrationData) */ {
 public:
  inline ServiceWorkerRegistrationData() : ServiceWorkerRegistrationData(nullptr) {}
  ~ServiceWorkerRegistrationData() override;
  explicit PROTOBUF_CONSTEXPR ServiceWorkerRegistrationData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceWorkerRegistrationData(const ServiceWorkerRegistrationData& from);
  ServiceWorkerRegistrationData(ServiceWorkerRegistrationData&& from) noexcept
    : ServiceWorkerRegistrationData() {
    *this = ::std::move(from);
  }

  inline ServiceWorkerRegistrationData& operator=(const ServiceWorkerRegistrationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceWorkerRegistrationData& operator=(ServiceWorkerRegistrationData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ServiceWorkerRegistrationData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceWorkerRegistrationData* internal_default_instance() {
    return reinterpret_cast<const ServiceWorkerRegistrationData*>(
               &_ServiceWorkerRegistrationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServiceWorkerRegistrationData& a, ServiceWorkerRegistrationData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ServiceWorkerRegistrationData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceWorkerRegistrationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceWorkerRegistrationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceWorkerRegistrationData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ServiceWorkerRegistrationData& from);
  void MergeFrom(const ServiceWorkerRegistrationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceWorkerRegistrationData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage.ServiceWorkerRegistrationData";
  }
  protected:
  explicit ServiceWorkerRegistrationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ServiceWorkerRegistrationData_ServiceWorkerScriptType ServiceWorkerScriptType;
  static constexpr ServiceWorkerScriptType CLASSIC =
    ServiceWorkerRegistrationData_ServiceWorkerScriptType_CLASSIC;
  static constexpr ServiceWorkerScriptType MODULE =
    ServiceWorkerRegistrationData_ServiceWorkerScriptType_MODULE;
  static inline bool ServiceWorkerScriptType_IsValid(int value) {
    return ServiceWorkerRegistrationData_ServiceWorkerScriptType_IsValid(value);
  }
  static constexpr ServiceWorkerScriptType ServiceWorkerScriptType_MIN =
    ServiceWorkerRegistrationData_ServiceWorkerScriptType_ServiceWorkerScriptType_MIN;
  static constexpr ServiceWorkerScriptType ServiceWorkerScriptType_MAX =
    ServiceWorkerRegistrationData_ServiceWorkerScriptType_ServiceWorkerScriptType_MAX;
  static constexpr int ServiceWorkerScriptType_ARRAYSIZE =
    ServiceWorkerRegistrationData_ServiceWorkerScriptType_ServiceWorkerScriptType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ServiceWorkerScriptType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ServiceWorkerScriptType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ServiceWorkerScriptType_Name.");
    return ServiceWorkerRegistrationData_ServiceWorkerScriptType_Name(enum_t_value);
  }
  static inline bool ServiceWorkerScriptType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ServiceWorkerScriptType* value) {
    return ServiceWorkerRegistrationData_ServiceWorkerScriptType_Parse(name, value);
  }

  typedef ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerUpdateViaCacheType;
  static constexpr ServiceWorkerUpdateViaCacheType IMPORTS =
    ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IMPORTS;
  static constexpr ServiceWorkerUpdateViaCacheType ALL =
    ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ALL;
  static constexpr ServiceWorkerUpdateViaCacheType NONE =
    ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_NONE;
  static inline bool ServiceWorkerUpdateViaCacheType_IsValid(int value) {
    return ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IsValid(value);
  }
  static constexpr ServiceWorkerUpdateViaCacheType ServiceWorkerUpdateViaCacheType_MIN =
    ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_MIN;
  static constexpr ServiceWorkerUpdateViaCacheType ServiceWorkerUpdateViaCacheType_MAX =
    ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_MAX;
  static constexpr int ServiceWorkerUpdateViaCacheType_ARRAYSIZE =
    ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_ServiceWorkerUpdateViaCacheType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ServiceWorkerUpdateViaCacheType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ServiceWorkerUpdateViaCacheType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ServiceWorkerUpdateViaCacheType_Name.");
    return ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_Name(enum_t_value);
  }
  static inline bool ServiceWorkerUpdateViaCacheType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ServiceWorkerUpdateViaCacheType* value) {
    return ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_Parse(name, value);
  }

  typedef ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue CrossOriginEmbedderPolicyValue;
  static constexpr CrossOriginEmbedderPolicyValue NONE_OR_NOT_EXIST =
    ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_NONE_OR_NOT_EXIST;
  static constexpr CrossOriginEmbedderPolicyValue REQUIRE_CORP =
    ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_REQUIRE_CORP;
  static constexpr CrossOriginEmbedderPolicyValue CREDENTIALLESS =
    ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_CREDENTIALLESS;
  static inline bool CrossOriginEmbedderPolicyValue_IsValid(int value) {
    return ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_IsValid(value);
  }
  static constexpr CrossOriginEmbedderPolicyValue CrossOriginEmbedderPolicyValue_MIN =
    ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_CrossOriginEmbedderPolicyValue_MIN;
  static constexpr CrossOriginEmbedderPolicyValue CrossOriginEmbedderPolicyValue_MAX =
    ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_CrossOriginEmbedderPolicyValue_MAX;
  static constexpr int CrossOriginEmbedderPolicyValue_ARRAYSIZE =
    ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_CrossOriginEmbedderPolicyValue_ARRAYSIZE;
  template<typename T>
  static inline const std::string& CrossOriginEmbedderPolicyValue_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CrossOriginEmbedderPolicyValue>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CrossOriginEmbedderPolicyValue_Name.");
    return ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_Name(enum_t_value);
  }
  static inline bool CrossOriginEmbedderPolicyValue_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CrossOriginEmbedderPolicyValue* value) {
    return ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_Parse(name, value);
  }

  typedef ServiceWorkerRegistrationData_AncestorFrameType AncestorFrameType;
  static constexpr AncestorFrameType NORMAL_FRAME =
    ServiceWorkerRegistrationData_AncestorFrameType_NORMAL_FRAME;
  static constexpr AncestorFrameType FENCED_FRAME =
    ServiceWorkerRegistrationData_AncestorFrameType_FENCED_FRAME;
  static inline bool AncestorFrameType_IsValid(int value) {
    return ServiceWorkerRegistrationData_AncestorFrameType_IsValid(value);
  }
  static constexpr AncestorFrameType AncestorFrameType_MIN =
    ServiceWorkerRegistrationData_AncestorFrameType_AncestorFrameType_MIN;
  static constexpr AncestorFrameType AncestorFrameType_MAX =
    ServiceWorkerRegistrationData_AncestorFrameType_AncestorFrameType_MAX;
  static constexpr int AncestorFrameType_ARRAYSIZE =
    ServiceWorkerRegistrationData_AncestorFrameType_AncestorFrameType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AncestorFrameType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AncestorFrameType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AncestorFrameType_Name.");
    return ServiceWorkerRegistrationData_AncestorFrameType_Name(enum_t_value);
  }
  static inline bool AncestorFrameType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AncestorFrameType* value) {
    return ServiceWorkerRegistrationData_AncestorFrameType_Parse(name, value);
  }

  typedef ServiceWorkerRegistrationData_FetchHandlerSkippableType FetchHandlerSkippableType;
  static constexpr FetchHandlerSkippableType NOT_SKIPPABLE =
    ServiceWorkerRegistrationData_FetchHandlerSkippableType_NOT_SKIPPABLE;
  static constexpr FetchHandlerSkippableType SKIPPABLE_EMPTY_FETCH_HANDLER =
    ServiceWorkerRegistrationData_FetchHandlerSkippableType_SKIPPABLE_EMPTY_FETCH_HANDLER;
  static inline bool FetchHandlerSkippableType_IsValid(int value) {
    return ServiceWorkerRegistrationData_FetchHandlerSkippableType_IsValid(value);
  }
  static constexpr FetchHandlerSkippableType FetchHandlerSkippableType_MIN =
    ServiceWorkerRegistrationData_FetchHandlerSkippableType_FetchHandlerSkippableType_MIN;
  static constexpr FetchHandlerSkippableType FetchHandlerSkippableType_MAX =
    ServiceWorkerRegistrationData_FetchHandlerSkippableType_FetchHandlerSkippableType_MAX;
  static constexpr int FetchHandlerSkippableType_ARRAYSIZE =
    ServiceWorkerRegistrationData_FetchHandlerSkippableType_FetchHandlerSkippableType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& FetchHandlerSkippableType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FetchHandlerSkippableType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FetchHandlerSkippableType_Name.");
    return ServiceWorkerRegistrationData_FetchHandlerSkippableType_Name(enum_t_value);
  }
  static inline bool FetchHandlerSkippableType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FetchHandlerSkippableType* value) {
    return ServiceWorkerRegistrationData_FetchHandlerSkippableType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUsedFeaturesFieldNumber = 13,
    kScopeUrlFieldNumber = 2,
    kScriptUrlFieldNumber = 3,
    kCrossOriginEmbedderPolicyReportingEndpointFieldNumber = 18,
    kCrossOriginEmbedderPolicyReportOnlyReportingEndpointFieldNumber = 20,
    kOriginTrialTokensFieldNumber = 11,
    kNavigationPreloadStateFieldNumber = 12,
    kRegistrationIdFieldNumber = 1,
    kVersionIdFieldNumber = 4,
    kLastUpdateCheckTimeFieldNumber = 7,
    kResourcesTotalSizeBytesFieldNumber = 8,
    kIsActiveFieldNumber = 5,
    kHasFetchHandlerFieldNumber = 6,
    kUpdateViaCacheFieldNumber = 14,
    kScriptResponseTimeFieldNumber = 16,
    kScriptTypeFieldNumber = 15,
    kCrossOriginEmbedderPolicyValueFieldNumber = 17,
    kCrossOriginEmbedderPolicyReportOnlyValueFieldNumber = 19,
    kAncestorFrameTypeFieldNumber = 21,
    kFetchHandlerSkippableTypeFieldNumber = 22,
  };
  // repeated uint32 used_features = 13;
  int used_features_size() const;
  private:
  int _internal_used_features_size() const;
  public:
  void clear_used_features();
  private:
  uint32_t _internal_used_features(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_used_features() const;
  void _internal_add_used_features(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_used_features();
  public:
  uint32_t used_features(int index) const;
  void set_used_features(int index, uint32_t value);
  void add_used_features(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      used_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_used_features();

  // required string scope_url = 2;
  bool has_scope_url() const;
  private:
  bool _internal_has_scope_url() const;
  public:
  void clear_scope_url();
  const std::string& scope_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scope_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scope_url();
  PROTOBUF_NODISCARD std::string* release_scope_url();
  void set_allocated_scope_url(std::string* scope_url);
  private:
  const std::string& _internal_scope_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scope_url(const std::string& value);
  std::string* _internal_mutable_scope_url();
  public:

  // required string script_url = 3;
  bool has_script_url() const;
  private:
  bool _internal_has_script_url() const;
  public:
  void clear_script_url();
  const std::string& script_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script_url();
  PROTOBUF_NODISCARD std::string* release_script_url();
  void set_allocated_script_url(std::string* script_url);
  private:
  const std::string& _internal_script_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script_url(const std::string& value);
  std::string* _internal_mutable_script_url();
  public:

  // optional string cross_origin_embedder_policy_reporting_endpoint = 18;
  bool has_cross_origin_embedder_policy_reporting_endpoint() const;
  private:
  bool _internal_has_cross_origin_embedder_policy_reporting_endpoint() const;
  public:
  void clear_cross_origin_embedder_policy_reporting_endpoint();
  const std::string& cross_origin_embedder_policy_reporting_endpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cross_origin_embedder_policy_reporting_endpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cross_origin_embedder_policy_reporting_endpoint();
  PROTOBUF_NODISCARD std::string* release_cross_origin_embedder_policy_reporting_endpoint();
  void set_allocated_cross_origin_embedder_policy_reporting_endpoint(std::string* cross_origin_embedder_policy_reporting_endpoint);
  private:
  const std::string& _internal_cross_origin_embedder_policy_reporting_endpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cross_origin_embedder_policy_reporting_endpoint(const std::string& value);
  std::string* _internal_mutable_cross_origin_embedder_policy_reporting_endpoint();
  public:

  // optional string cross_origin_embedder_policy_report_only_reporting_endpoint = 20;
  bool has_cross_origin_embedder_policy_report_only_reporting_endpoint() const;
  private:
  bool _internal_has_cross_origin_embedder_policy_report_only_reporting_endpoint() const;
  public:
  void clear_cross_origin_embedder_policy_report_only_reporting_endpoint();
  const std::string& cross_origin_embedder_policy_report_only_reporting_endpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cross_origin_embedder_policy_report_only_reporting_endpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cross_origin_embedder_policy_report_only_reporting_endpoint();
  PROTOBUF_NODISCARD std::string* release_cross_origin_embedder_policy_report_only_reporting_endpoint();
  void set_allocated_cross_origin_embedder_policy_report_only_reporting_endpoint(std::string* cross_origin_embedder_policy_report_only_reporting_endpoint);
  private:
  const std::string& _internal_cross_origin_embedder_policy_report_only_reporting_endpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cross_origin_embedder_policy_report_only_reporting_endpoint(const std::string& value);
  std::string* _internal_mutable_cross_origin_embedder_policy_report_only_reporting_endpoint();
  public:

  // optional .storage.ServiceWorkerOriginTrialInfo origin_trial_tokens = 11;
  bool has_origin_trial_tokens() const;
  private:
  bool _internal_has_origin_trial_tokens() const;
  public:
  void clear_origin_trial_tokens();
  const ::storage::ServiceWorkerOriginTrialInfo& origin_trial_tokens() const;
  PROTOBUF_NODISCARD ::storage::ServiceWorkerOriginTrialInfo* release_origin_trial_tokens();
  ::storage::ServiceWorkerOriginTrialInfo* mutable_origin_trial_tokens();
  void set_allocated_origin_trial_tokens(::storage::ServiceWorkerOriginTrialInfo* origin_trial_tokens);
  private:
  const ::storage::ServiceWorkerOriginTrialInfo& _internal_origin_trial_tokens() const;
  ::storage::ServiceWorkerOriginTrialInfo* _internal_mutable_origin_trial_tokens();
  public:
  void unsafe_arena_set_allocated_origin_trial_tokens(
      ::storage::ServiceWorkerOriginTrialInfo* origin_trial_tokens);
  ::storage::ServiceWorkerOriginTrialInfo* unsafe_arena_release_origin_trial_tokens();

  // optional .storage.ServiceWorkerNavigationPreloadState navigation_preload_state = 12;
  bool has_navigation_preload_state() const;
  private:
  bool _internal_has_navigation_preload_state() const;
  public:
  void clear_navigation_preload_state();
  const ::storage::ServiceWorkerNavigationPreloadState& navigation_preload_state() const;
  PROTOBUF_NODISCARD ::storage::ServiceWorkerNavigationPreloadState* release_navigation_preload_state();
  ::storage::ServiceWorkerNavigationPreloadState* mutable_navigation_preload_state();
  void set_allocated_navigation_preload_state(::storage::ServiceWorkerNavigationPreloadState* navigation_preload_state);
  private:
  const ::storage::ServiceWorkerNavigationPreloadState& _internal_navigation_preload_state() const;
  ::storage::ServiceWorkerNavigationPreloadState* _internal_mutable_navigation_preload_state();
  public:
  void unsafe_arena_set_allocated_navigation_preload_state(
      ::storage::ServiceWorkerNavigationPreloadState* navigation_preload_state);
  ::storage::ServiceWorkerNavigationPreloadState* unsafe_arena_release_navigation_preload_state();

  // required int64 registration_id = 1;
  bool has_registration_id() const;
  private:
  bool _internal_has_registration_id() const;
  public:
  void clear_registration_id();
  int64_t registration_id() const;
  void set_registration_id(int64_t value);
  private:
  int64_t _internal_registration_id() const;
  void _internal_set_registration_id(int64_t value);
  public:

  // required int64 version_id = 4;
  bool has_version_id() const;
  private:
  bool _internal_has_version_id() const;
  public:
  void clear_version_id();
  int64_t version_id() const;
  void set_version_id(int64_t value);
  private:
  int64_t _internal_version_id() const;
  void _internal_set_version_id(int64_t value);
  public:

  // required int64 last_update_check_time = 7;
  bool has_last_update_check_time() const;
  private:
  bool _internal_has_last_update_check_time() const;
  public:
  void clear_last_update_check_time();
  int64_t last_update_check_time() const;
  void set_last_update_check_time(int64_t value);
  private:
  int64_t _internal_last_update_check_time() const;
  void _internal_set_last_update_check_time(int64_t value);
  public:

  // optional uint64 resources_total_size_bytes = 8;
  bool has_resources_total_size_bytes() const;
  private:
  bool _internal_has_resources_total_size_bytes() const;
  public:
  void clear_resources_total_size_bytes();
  uint64_t resources_total_size_bytes() const;
  void set_resources_total_size_bytes(uint64_t value);
  private:
  uint64_t _internal_resources_total_size_bytes() const;
  void _internal_set_resources_total_size_bytes(uint64_t value);
  public:

  // required bool is_active = 5;
  bool has_is_active() const;
  private:
  bool _internal_has_is_active() const;
  public:
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // required bool has_fetch_handler = 6;
  bool has_has_fetch_handler() const;
  private:
  bool _internal_has_has_fetch_handler() const;
  public:
  void clear_has_fetch_handler();
  bool has_fetch_handler() const;
  void set_has_fetch_handler(bool value);
  private:
  bool _internal_has_fetch_handler() const;
  void _internal_set_has_fetch_handler(bool value);
  public:

  // optional .storage.ServiceWorkerRegistrationData.ServiceWorkerUpdateViaCacheType update_via_cache = 14 [default = IMPORTS];
  bool has_update_via_cache() const;
  private:
  bool _internal_has_update_via_cache() const;
  public:
  void clear_update_via_cache();
  ::storage::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType update_via_cache() const;
  void set_update_via_cache(::storage::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType value);
  private:
  ::storage::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType _internal_update_via_cache() const;
  void _internal_set_update_via_cache(::storage::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType value);
  public:

  // optional int64 script_response_time = 16;
  bool has_script_response_time() const;
  private:
  bool _internal_has_script_response_time() const;
  public:
  void clear_script_response_time();
  int64_t script_response_time() const;
  void set_script_response_time(int64_t value);
  private:
  int64_t _internal_script_response_time() const;
  void _internal_set_script_response_time(int64_t value);
  public:

  // optional .storage.ServiceWorkerRegistrationData.ServiceWorkerScriptType script_type = 15 [default = CLASSIC];
  bool has_script_type() const;
  private:
  bool _internal_has_script_type() const;
  public:
  void clear_script_type();
  ::storage::ServiceWorkerRegistrationData_ServiceWorkerScriptType script_type() const;
  void set_script_type(::storage::ServiceWorkerRegistrationData_ServiceWorkerScriptType value);
  private:
  ::storage::ServiceWorkerRegistrationData_ServiceWorkerScriptType _internal_script_type() const;
  void _internal_set_script_type(::storage::ServiceWorkerRegistrationData_ServiceWorkerScriptType value);
  public:

  // optional .storage.ServiceWorkerRegistrationData.CrossOriginEmbedderPolicyValue cross_origin_embedder_policy_value = 17 [default = NONE_OR_NOT_EXIST];
  bool has_cross_origin_embedder_policy_value() const;
  private:
  bool _internal_has_cross_origin_embedder_policy_value() const;
  public:
  void clear_cross_origin_embedder_policy_value();
  ::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue cross_origin_embedder_policy_value() const;
  void set_cross_origin_embedder_policy_value(::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue value);
  private:
  ::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue _internal_cross_origin_embedder_policy_value() const;
  void _internal_set_cross_origin_embedder_policy_value(::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue value);
  public:

  // optional .storage.ServiceWorkerRegistrationData.CrossOriginEmbedderPolicyValue cross_origin_embedder_policy_report_only_value = 19 [default = NONE_OR_NOT_EXIST];
  bool has_cross_origin_embedder_policy_report_only_value() const;
  private:
  bool _internal_has_cross_origin_embedder_policy_report_only_value() const;
  public:
  void clear_cross_origin_embedder_policy_report_only_value();
  ::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue cross_origin_embedder_policy_report_only_value() const;
  void set_cross_origin_embedder_policy_report_only_value(::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue value);
  private:
  ::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue _internal_cross_origin_embedder_policy_report_only_value() const;
  void _internal_set_cross_origin_embedder_policy_report_only_value(::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue value);
  public:

  // optional .storage.ServiceWorkerRegistrationData.AncestorFrameType ancestor_frame_type = 21 [default = NORMAL_FRAME];
  bool has_ancestor_frame_type() const;
  private:
  bool _internal_has_ancestor_frame_type() const;
  public:
  void clear_ancestor_frame_type();
  ::storage::ServiceWorkerRegistrationData_AncestorFrameType ancestor_frame_type() const;
  void set_ancestor_frame_type(::storage::ServiceWorkerRegistrationData_AncestorFrameType value);
  private:
  ::storage::ServiceWorkerRegistrationData_AncestorFrameType _internal_ancestor_frame_type() const;
  void _internal_set_ancestor_frame_type(::storage::ServiceWorkerRegistrationData_AncestorFrameType value);
  public:

  // optional .storage.ServiceWorkerRegistrationData.FetchHandlerSkippableType fetch_handler_skippable_type = 22;
  bool has_fetch_handler_skippable_type() const;
  private:
  bool _internal_has_fetch_handler_skippable_type() const;
  public:
  void clear_fetch_handler_skippable_type();
  ::storage::ServiceWorkerRegistrationData_FetchHandlerSkippableType fetch_handler_skippable_type() const;
  void set_fetch_handler_skippable_type(::storage::ServiceWorkerRegistrationData_FetchHandlerSkippableType value);
  private:
  ::storage::ServiceWorkerRegistrationData_FetchHandlerSkippableType _internal_fetch_handler_skippable_type() const;
  void _internal_set_fetch_handler_skippable_type(::storage::ServiceWorkerRegistrationData_FetchHandlerSkippableType value);
  public:

  // @@protoc_insertion_point(class_scope:storage.ServiceWorkerRegistrationData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > used_features_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scope_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cross_origin_embedder_policy_reporting_endpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cross_origin_embedder_policy_report_only_reporting_endpoint_;
  ::storage::ServiceWorkerOriginTrialInfo* origin_trial_tokens_;
  ::storage::ServiceWorkerNavigationPreloadState* navigation_preload_state_;
  int64_t registration_id_;
  int64_t version_id_;
  int64_t last_update_check_time_;
  uint64_t resources_total_size_bytes_;
  bool is_active_;
  bool has_fetch_handler_;
  int update_via_cache_;
  int64_t script_response_time_;
  int script_type_;
  int cross_origin_embedder_policy_value_;
  int cross_origin_embedder_policy_report_only_value_;
  int ancestor_frame_type_;
  int fetch_handler_skippable_type_;
  friend struct ::TableStruct_service_5fworker_5fdatabase_2eproto;
};
// -------------------------------------------------------------------

class ServiceWorkerResourceRecord final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:storage.ServiceWorkerResourceRecord) */ {
 public:
  inline ServiceWorkerResourceRecord() : ServiceWorkerResourceRecord(nullptr) {}
  ~ServiceWorkerResourceRecord() override;
  explicit PROTOBUF_CONSTEXPR ServiceWorkerResourceRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceWorkerResourceRecord(const ServiceWorkerResourceRecord& from);
  ServiceWorkerResourceRecord(ServiceWorkerResourceRecord&& from) noexcept
    : ServiceWorkerResourceRecord() {
    *this = ::std::move(from);
  }

  inline ServiceWorkerResourceRecord& operator=(const ServiceWorkerResourceRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceWorkerResourceRecord& operator=(ServiceWorkerResourceRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ServiceWorkerResourceRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceWorkerResourceRecord* internal_default_instance() {
    return reinterpret_cast<const ServiceWorkerResourceRecord*>(
               &_ServiceWorkerResourceRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServiceWorkerResourceRecord& a, ServiceWorkerResourceRecord& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ServiceWorkerResourceRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceWorkerResourceRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceWorkerResourceRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceWorkerResourceRecord>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ServiceWorkerResourceRecord& from);
  void MergeFrom(const ServiceWorkerResourceRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceWorkerResourceRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage.ServiceWorkerResourceRecord";
  }
  protected:
  explicit ServiceWorkerResourceRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kResourceIdFieldNumber = 1,
    kSizeBytesFieldNumber = 3,
  };
  // required string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // required int64 resource_id = 1;
  bool has_resource_id() const;
  private:
  bool _internal_has_resource_id() const;
  public:
  void clear_resource_id();
  int64_t resource_id() const;
  void set_resource_id(int64_t value);
  private:
  int64_t _internal_resource_id() const;
  void _internal_set_resource_id(int64_t value);
  public:

  // optional uint64 size_bytes = 3;
  bool has_size_bytes() const;
  private:
  bool _internal_has_size_bytes() const;
  public:
  void clear_size_bytes();
  uint64_t size_bytes() const;
  void set_size_bytes(uint64_t value);
  private:
  uint64_t _internal_size_bytes() const;
  void _internal_set_size_bytes(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:storage.ServiceWorkerResourceRecord)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  int64_t resource_id_;
  uint64_t size_bytes_;
  friend struct ::TableStruct_service_5fworker_5fdatabase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceWorkerOriginTrialFeature

// required string name = 1;
inline bool ServiceWorkerOriginTrialFeature::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServiceWorkerOriginTrialFeature::has_name() const {
  return _internal_has_name();
}
inline void ServiceWorkerOriginTrialFeature::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceWorkerOriginTrialFeature::name() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerOriginTrialFeature.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceWorkerOriginTrialFeature::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerOriginTrialFeature.name)
}
inline std::string* ServiceWorkerOriginTrialFeature::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:storage.ServiceWorkerOriginTrialFeature.name)
  return _s;
}
inline const std::string& ServiceWorkerOriginTrialFeature::_internal_name() const {
  return name_.Get();
}
inline void ServiceWorkerOriginTrialFeature::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceWorkerOriginTrialFeature::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceWorkerOriginTrialFeature::release_name() {
  // @@protoc_insertion_point(field_release:storage.ServiceWorkerOriginTrialFeature.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceWorkerOriginTrialFeature::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:storage.ServiceWorkerOriginTrialFeature.name)
}

// repeated string tokens = 2;
inline int ServiceWorkerOriginTrialFeature::_internal_tokens_size() const {
  return tokens_.size();
}
inline int ServiceWorkerOriginTrialFeature::tokens_size() const {
  return _internal_tokens_size();
}
inline void ServiceWorkerOriginTrialFeature::clear_tokens() {
  tokens_.Clear();
}
inline std::string* ServiceWorkerOriginTrialFeature::add_tokens() {
  std::string* _s = _internal_add_tokens();
  // @@protoc_insertion_point(field_add_mutable:storage.ServiceWorkerOriginTrialFeature.tokens)
  return _s;
}
inline const std::string& ServiceWorkerOriginTrialFeature::_internal_tokens(int index) const {
  return tokens_.Get(index);
}
inline const std::string& ServiceWorkerOriginTrialFeature::tokens(int index) const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerOriginTrialFeature.tokens)
  return _internal_tokens(index);
}
inline std::string* ServiceWorkerOriginTrialFeature::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:storage.ServiceWorkerOriginTrialFeature.tokens)
  return tokens_.Mutable(index);
}
inline void ServiceWorkerOriginTrialFeature::set_tokens(int index, const std::string& value) {
  tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerOriginTrialFeature.tokens)
}
inline void ServiceWorkerOriginTrialFeature::set_tokens(int index, std::string&& value) {
  tokens_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerOriginTrialFeature.tokens)
}
inline void ServiceWorkerOriginTrialFeature::set_tokens(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:storage.ServiceWorkerOriginTrialFeature.tokens)
}
inline void ServiceWorkerOriginTrialFeature::set_tokens(int index, const char* value, size_t size) {
  tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:storage.ServiceWorkerOriginTrialFeature.tokens)
}
inline std::string* ServiceWorkerOriginTrialFeature::_internal_add_tokens() {
  return tokens_.Add();
}
inline void ServiceWorkerOriginTrialFeature::add_tokens(const std::string& value) {
  tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:storage.ServiceWorkerOriginTrialFeature.tokens)
}
inline void ServiceWorkerOriginTrialFeature::add_tokens(std::string&& value) {
  tokens_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:storage.ServiceWorkerOriginTrialFeature.tokens)
}
inline void ServiceWorkerOriginTrialFeature::add_tokens(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:storage.ServiceWorkerOriginTrialFeature.tokens)
}
inline void ServiceWorkerOriginTrialFeature::add_tokens(const char* value, size_t size) {
  tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:storage.ServiceWorkerOriginTrialFeature.tokens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ServiceWorkerOriginTrialFeature::tokens() const {
  // @@protoc_insertion_point(field_list:storage.ServiceWorkerOriginTrialFeature.tokens)
  return tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ServiceWorkerOriginTrialFeature::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:storage.ServiceWorkerOriginTrialFeature.tokens)
  return &tokens_;
}

// -------------------------------------------------------------------

// ServiceWorkerOriginTrialInfo

// repeated .storage.ServiceWorkerOriginTrialFeature features = 1;
inline int ServiceWorkerOriginTrialInfo::_internal_features_size() const {
  return features_.size();
}
inline int ServiceWorkerOriginTrialInfo::features_size() const {
  return _internal_features_size();
}
inline void ServiceWorkerOriginTrialInfo::clear_features() {
  features_.Clear();
}
inline ::storage::ServiceWorkerOriginTrialFeature* ServiceWorkerOriginTrialInfo::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:storage.ServiceWorkerOriginTrialInfo.features)
  return features_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage::ServiceWorkerOriginTrialFeature >*
ServiceWorkerOriginTrialInfo::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:storage.ServiceWorkerOriginTrialInfo.features)
  return &features_;
}
inline const ::storage::ServiceWorkerOriginTrialFeature& ServiceWorkerOriginTrialInfo::_internal_features(int index) const {
  return features_.Get(index);
}
inline const ::storage::ServiceWorkerOriginTrialFeature& ServiceWorkerOriginTrialInfo::features(int index) const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerOriginTrialInfo.features)
  return _internal_features(index);
}
inline ::storage::ServiceWorkerOriginTrialFeature* ServiceWorkerOriginTrialInfo::_internal_add_features() {
  return features_.Add();
}
inline ::storage::ServiceWorkerOriginTrialFeature* ServiceWorkerOriginTrialInfo::add_features() {
  ::storage::ServiceWorkerOriginTrialFeature* _add = _internal_add_features();
  // @@protoc_insertion_point(field_add:storage.ServiceWorkerOriginTrialInfo.features)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage::ServiceWorkerOriginTrialFeature >&
ServiceWorkerOriginTrialInfo::features() const {
  // @@protoc_insertion_point(field_list:storage.ServiceWorkerOriginTrialInfo.features)
  return features_;
}

// -------------------------------------------------------------------

// ServiceWorkerNavigationPreloadState

// required bool enabled = 1;
inline bool ServiceWorkerNavigationPreloadState::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServiceWorkerNavigationPreloadState::has_enabled() const {
  return _internal_has_enabled();
}
inline void ServiceWorkerNavigationPreloadState::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ServiceWorkerNavigationPreloadState::_internal_enabled() const {
  return enabled_;
}
inline bool ServiceWorkerNavigationPreloadState::enabled() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerNavigationPreloadState.enabled)
  return _internal_enabled();
}
inline void ServiceWorkerNavigationPreloadState::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enabled_ = value;
}
inline void ServiceWorkerNavigationPreloadState::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerNavigationPreloadState.enabled)
}

// optional string header = 2;
inline bool ServiceWorkerNavigationPreloadState::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServiceWorkerNavigationPreloadState::has_header() const {
  return _internal_has_header();
}
inline void ServiceWorkerNavigationPreloadState::clear_header() {
  header_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceWorkerNavigationPreloadState::header() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerNavigationPreloadState.header)
  return _internal_header();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceWorkerNavigationPreloadState::set_header(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 header_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerNavigationPreloadState.header)
}
inline std::string* ServiceWorkerNavigationPreloadState::mutable_header() {
  std::string* _s = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:storage.ServiceWorkerNavigationPreloadState.header)
  return _s;
}
inline const std::string& ServiceWorkerNavigationPreloadState::_internal_header() const {
  return header_.Get();
}
inline void ServiceWorkerNavigationPreloadState::_internal_set_header(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  header_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceWorkerNavigationPreloadState::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  return header_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceWorkerNavigationPreloadState::release_header() {
  // @@protoc_insertion_point(field_release:storage.ServiceWorkerNavigationPreloadState.header)
  if (!_internal_has_header()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = header_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (header_.IsDefault()) {
    header_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceWorkerNavigationPreloadState::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_.SetAllocated(header, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (header_.IsDefault()) {
    header_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:storage.ServiceWorkerNavigationPreloadState.header)
}

// -------------------------------------------------------------------

// ServiceWorkerRegistrationData

// required int64 registration_id = 1;
inline bool ServiceWorkerRegistrationData::_internal_has_registration_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ServiceWorkerRegistrationData::has_registration_id() const {
  return _internal_has_registration_id();
}
inline void ServiceWorkerRegistrationData::clear_registration_id() {
  registration_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000040u;
}
inline int64_t ServiceWorkerRegistrationData::_internal_registration_id() const {
  return registration_id_;
}
inline int64_t ServiceWorkerRegistrationData::registration_id() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerRegistrationData.registration_id)
  return _internal_registration_id();
}
inline void ServiceWorkerRegistrationData::_internal_set_registration_id(int64_t value) {
  _has_bits_[0] |= 0x00000040u;
  registration_id_ = value;
}
inline void ServiceWorkerRegistrationData::set_registration_id(int64_t value) {
  _internal_set_registration_id(value);
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerRegistrationData.registration_id)
}

// required string scope_url = 2;
inline bool ServiceWorkerRegistrationData::_internal_has_scope_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServiceWorkerRegistrationData::has_scope_url() const {
  return _internal_has_scope_url();
}
inline void ServiceWorkerRegistrationData::clear_scope_url() {
  scope_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceWorkerRegistrationData::scope_url() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerRegistrationData.scope_url)
  return _internal_scope_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceWorkerRegistrationData::set_scope_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 scope_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerRegistrationData.scope_url)
}
inline std::string* ServiceWorkerRegistrationData::mutable_scope_url() {
  std::string* _s = _internal_mutable_scope_url();
  // @@protoc_insertion_point(field_mutable:storage.ServiceWorkerRegistrationData.scope_url)
  return _s;
}
inline const std::string& ServiceWorkerRegistrationData::_internal_scope_url() const {
  return scope_url_.Get();
}
inline void ServiceWorkerRegistrationData::_internal_set_scope_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  scope_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceWorkerRegistrationData::_internal_mutable_scope_url() {
  _has_bits_[0] |= 0x00000001u;
  return scope_url_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceWorkerRegistrationData::release_scope_url() {
  // @@protoc_insertion_point(field_release:storage.ServiceWorkerRegistrationData.scope_url)
  if (!_internal_has_scope_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = scope_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (scope_url_.IsDefault()) {
    scope_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceWorkerRegistrationData::set_allocated_scope_url(std::string* scope_url) {
  if (scope_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scope_url_.SetAllocated(scope_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (scope_url_.IsDefault()) {
    scope_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:storage.ServiceWorkerRegistrationData.scope_url)
}

// required string script_url = 3;
inline bool ServiceWorkerRegistrationData::_internal_has_script_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServiceWorkerRegistrationData::has_script_url() const {
  return _internal_has_script_url();
}
inline void ServiceWorkerRegistrationData::clear_script_url() {
  script_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ServiceWorkerRegistrationData::script_url() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerRegistrationData.script_url)
  return _internal_script_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceWorkerRegistrationData::set_script_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 script_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerRegistrationData.script_url)
}
inline std::string* ServiceWorkerRegistrationData::mutable_script_url() {
  std::string* _s = _internal_mutable_script_url();
  // @@protoc_insertion_point(field_mutable:storage.ServiceWorkerRegistrationData.script_url)
  return _s;
}
inline const std::string& ServiceWorkerRegistrationData::_internal_script_url() const {
  return script_url_.Get();
}
inline void ServiceWorkerRegistrationData::_internal_set_script_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  script_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceWorkerRegistrationData::_internal_mutable_script_url() {
  _has_bits_[0] |= 0x00000002u;
  return script_url_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceWorkerRegistrationData::release_script_url() {
  // @@protoc_insertion_point(field_release:storage.ServiceWorkerRegistrationData.script_url)
  if (!_internal_has_script_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = script_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (script_url_.IsDefault()) {
    script_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceWorkerRegistrationData::set_allocated_script_url(std::string* script_url) {
  if (script_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  script_url_.SetAllocated(script_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (script_url_.IsDefault()) {
    script_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:storage.ServiceWorkerRegistrationData.script_url)
}

// required int64 version_id = 4;
inline bool ServiceWorkerRegistrationData::_internal_has_version_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ServiceWorkerRegistrationData::has_version_id() const {
  return _internal_has_version_id();
}
inline void ServiceWorkerRegistrationData::clear_version_id() {
  version_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000080u;
}
inline int64_t ServiceWorkerRegistrationData::_internal_version_id() const {
  return version_id_;
}
inline int64_t ServiceWorkerRegistrationData::version_id() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerRegistrationData.version_id)
  return _internal_version_id();
}
inline void ServiceWorkerRegistrationData::_internal_set_version_id(int64_t value) {
  _has_bits_[0] |= 0x00000080u;
  version_id_ = value;
}
inline void ServiceWorkerRegistrationData::set_version_id(int64_t value) {
  _internal_set_version_id(value);
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerRegistrationData.version_id)
}

// required bool is_active = 5;
inline bool ServiceWorkerRegistrationData::_internal_has_is_active() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ServiceWorkerRegistrationData::has_is_active() const {
  return _internal_has_is_active();
}
inline void ServiceWorkerRegistrationData::clear_is_active() {
  is_active_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ServiceWorkerRegistrationData::_internal_is_active() const {
  return is_active_;
}
inline bool ServiceWorkerRegistrationData::is_active() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerRegistrationData.is_active)
  return _internal_is_active();
}
inline void ServiceWorkerRegistrationData::_internal_set_is_active(bool value) {
  _has_bits_[0] |= 0x00000400u;
  is_active_ = value;
}
inline void ServiceWorkerRegistrationData::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerRegistrationData.is_active)
}

// required bool has_fetch_handler = 6;
inline bool ServiceWorkerRegistrationData::_internal_has_has_fetch_handler() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ServiceWorkerRegistrationData::has_has_fetch_handler() const {
  return _internal_has_has_fetch_handler();
}
inline void ServiceWorkerRegistrationData::clear_has_fetch_handler() {
  has_fetch_handler_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ServiceWorkerRegistrationData::_internal_has_fetch_handler() const {
  return has_fetch_handler_;
}
inline bool ServiceWorkerRegistrationData::has_fetch_handler() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerRegistrationData.has_fetch_handler)
  return _internal_has_fetch_handler();
}
inline void ServiceWorkerRegistrationData::_internal_set_has_fetch_handler(bool value) {
  _has_bits_[0] |= 0x00000800u;
  has_fetch_handler_ = value;
}
inline void ServiceWorkerRegistrationData::set_has_fetch_handler(bool value) {
  _internal_set_has_fetch_handler(value);
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerRegistrationData.has_fetch_handler)
}

// optional .storage.ServiceWorkerRegistrationData.FetchHandlerSkippableType fetch_handler_skippable_type = 22;
inline bool ServiceWorkerRegistrationData::_internal_has_fetch_handler_skippable_type() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ServiceWorkerRegistrationData::has_fetch_handler_skippable_type() const {
  return _internal_has_fetch_handler_skippable_type();
}
inline void ServiceWorkerRegistrationData::clear_fetch_handler_skippable_type() {
  fetch_handler_skippable_type_ = 1;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::storage::ServiceWorkerRegistrationData_FetchHandlerSkippableType ServiceWorkerRegistrationData::_internal_fetch_handler_skippable_type() const {
  return static_cast< ::storage::ServiceWorkerRegistrationData_FetchHandlerSkippableType >(fetch_handler_skippable_type_);
}
inline ::storage::ServiceWorkerRegistrationData_FetchHandlerSkippableType ServiceWorkerRegistrationData::fetch_handler_skippable_type() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerRegistrationData.fetch_handler_skippable_type)
  return _internal_fetch_handler_skippable_type();
}
inline void ServiceWorkerRegistrationData::_internal_set_fetch_handler_skippable_type(::storage::ServiceWorkerRegistrationData_FetchHandlerSkippableType value) {
  assert(::storage::ServiceWorkerRegistrationData_FetchHandlerSkippableType_IsValid(value));
  _has_bits_[0] |= 0x00040000u;
  fetch_handler_skippable_type_ = value;
}
inline void ServiceWorkerRegistrationData::set_fetch_handler_skippable_type(::storage::ServiceWorkerRegistrationData_FetchHandlerSkippableType value) {
  _internal_set_fetch_handler_skippable_type(value);
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerRegistrationData.fetch_handler_skippable_type)
}

// required int64 last_update_check_time = 7;
inline bool ServiceWorkerRegistrationData::_internal_has_last_update_check_time() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ServiceWorkerRegistrationData::has_last_update_check_time() const {
  return _internal_has_last_update_check_time();
}
inline void ServiceWorkerRegistrationData::clear_last_update_check_time() {
  last_update_check_time_ = int64_t{0};
  _has_bits_[0] &= ~0x00000100u;
}
inline int64_t ServiceWorkerRegistrationData::_internal_last_update_check_time() const {
  return last_update_check_time_;
}
inline int64_t ServiceWorkerRegistrationData::last_update_check_time() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerRegistrationData.last_update_check_time)
  return _internal_last_update_check_time();
}
inline void ServiceWorkerRegistrationData::_internal_set_last_update_check_time(int64_t value) {
  _has_bits_[0] |= 0x00000100u;
  last_update_check_time_ = value;
}
inline void ServiceWorkerRegistrationData::set_last_update_check_time(int64_t value) {
  _internal_set_last_update_check_time(value);
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerRegistrationData.last_update_check_time)
}

// optional uint64 resources_total_size_bytes = 8;
inline bool ServiceWorkerRegistrationData::_internal_has_resources_total_size_bytes() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ServiceWorkerRegistrationData::has_resources_total_size_bytes() const {
  return _internal_has_resources_total_size_bytes();
}
inline void ServiceWorkerRegistrationData::clear_resources_total_size_bytes() {
  resources_total_size_bytes_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000200u;
}
inline uint64_t ServiceWorkerRegistrationData::_internal_resources_total_size_bytes() const {
  return resources_total_size_bytes_;
}
inline uint64_t ServiceWorkerRegistrationData::resources_total_size_bytes() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerRegistrationData.resources_total_size_bytes)
  return _internal_resources_total_size_bytes();
}
inline void ServiceWorkerRegistrationData::_internal_set_resources_total_size_bytes(uint64_t value) {
  _has_bits_[0] |= 0x00000200u;
  resources_total_size_bytes_ = value;
}
inline void ServiceWorkerRegistrationData::set_resources_total_size_bytes(uint64_t value) {
  _internal_set_resources_total_size_bytes(value);
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerRegistrationData.resources_total_size_bytes)
}

// optional .storage.ServiceWorkerOriginTrialInfo origin_trial_tokens = 11;
inline bool ServiceWorkerRegistrationData::_internal_has_origin_trial_tokens() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || origin_trial_tokens_ != nullptr);
  return value;
}
inline bool ServiceWorkerRegistrationData::has_origin_trial_tokens() const {
  return _internal_has_origin_trial_tokens();
}
inline void ServiceWorkerRegistrationData::clear_origin_trial_tokens() {
  if (origin_trial_tokens_ != nullptr) origin_trial_tokens_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::storage::ServiceWorkerOriginTrialInfo& ServiceWorkerRegistrationData::_internal_origin_trial_tokens() const {
  const ::storage::ServiceWorkerOriginTrialInfo* p = origin_trial_tokens_;
  return p != nullptr ? *p : reinterpret_cast<const ::storage::ServiceWorkerOriginTrialInfo&>(
      ::storage::_ServiceWorkerOriginTrialInfo_default_instance_);
}
inline const ::storage::ServiceWorkerOriginTrialInfo& ServiceWorkerRegistrationData::origin_trial_tokens() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerRegistrationData.origin_trial_tokens)
  return _internal_origin_trial_tokens();
}
inline void ServiceWorkerRegistrationData::unsafe_arena_set_allocated_origin_trial_tokens(
    ::storage::ServiceWorkerOriginTrialInfo* origin_trial_tokens) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_trial_tokens_);
  }
  origin_trial_tokens_ = origin_trial_tokens;
  if (origin_trial_tokens) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:storage.ServiceWorkerRegistrationData.origin_trial_tokens)
}
inline ::storage::ServiceWorkerOriginTrialInfo* ServiceWorkerRegistrationData::release_origin_trial_tokens() {
  _has_bits_[0] &= ~0x00000010u;
  ::storage::ServiceWorkerOriginTrialInfo* temp = origin_trial_tokens_;
  origin_trial_tokens_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::storage::ServiceWorkerOriginTrialInfo* ServiceWorkerRegistrationData::unsafe_arena_release_origin_trial_tokens() {
  // @@protoc_insertion_point(field_release:storage.ServiceWorkerRegistrationData.origin_trial_tokens)
  _has_bits_[0] &= ~0x00000010u;
  ::storage::ServiceWorkerOriginTrialInfo* temp = origin_trial_tokens_;
  origin_trial_tokens_ = nullptr;
  return temp;
}
inline ::storage::ServiceWorkerOriginTrialInfo* ServiceWorkerRegistrationData::_internal_mutable_origin_trial_tokens() {
  _has_bits_[0] |= 0x00000010u;
  if (origin_trial_tokens_ == nullptr) {
    auto* p = CreateMaybeMessage<::storage::ServiceWorkerOriginTrialInfo>(GetArenaForAllocation());
    origin_trial_tokens_ = p;
  }
  return origin_trial_tokens_;
}
inline ::storage::ServiceWorkerOriginTrialInfo* ServiceWorkerRegistrationData::mutable_origin_trial_tokens() {
  ::storage::ServiceWorkerOriginTrialInfo* _msg = _internal_mutable_origin_trial_tokens();
  // @@protoc_insertion_point(field_mutable:storage.ServiceWorkerRegistrationData.origin_trial_tokens)
  return _msg;
}
inline void ServiceWorkerRegistrationData::set_allocated_origin_trial_tokens(::storage::ServiceWorkerOriginTrialInfo* origin_trial_tokens) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete origin_trial_tokens_;
  }
  if (origin_trial_tokens) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(origin_trial_tokens);
    if (message_arena != submessage_arena) {
      origin_trial_tokens = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin_trial_tokens, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  origin_trial_tokens_ = origin_trial_tokens;
  // @@protoc_insertion_point(field_set_allocated:storage.ServiceWorkerRegistrationData.origin_trial_tokens)
}

// optional .storage.ServiceWorkerNavigationPreloadState navigation_preload_state = 12;
inline bool ServiceWorkerRegistrationData::_internal_has_navigation_preload_state() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || navigation_preload_state_ != nullptr);
  return value;
}
inline bool ServiceWorkerRegistrationData::has_navigation_preload_state() const {
  return _internal_has_navigation_preload_state();
}
inline void ServiceWorkerRegistrationData::clear_navigation_preload_state() {
  if (navigation_preload_state_ != nullptr) navigation_preload_state_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::storage::ServiceWorkerNavigationPreloadState& ServiceWorkerRegistrationData::_internal_navigation_preload_state() const {
  const ::storage::ServiceWorkerNavigationPreloadState* p = navigation_preload_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::storage::ServiceWorkerNavigationPreloadState&>(
      ::storage::_ServiceWorkerNavigationPreloadState_default_instance_);
}
inline const ::storage::ServiceWorkerNavigationPreloadState& ServiceWorkerRegistrationData::navigation_preload_state() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerRegistrationData.navigation_preload_state)
  return _internal_navigation_preload_state();
}
inline void ServiceWorkerRegistrationData::unsafe_arena_set_allocated_navigation_preload_state(
    ::storage::ServiceWorkerNavigationPreloadState* navigation_preload_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(navigation_preload_state_);
  }
  navigation_preload_state_ = navigation_preload_state;
  if (navigation_preload_state) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:storage.ServiceWorkerRegistrationData.navigation_preload_state)
}
inline ::storage::ServiceWorkerNavigationPreloadState* ServiceWorkerRegistrationData::release_navigation_preload_state() {
  _has_bits_[0] &= ~0x00000020u;
  ::storage::ServiceWorkerNavigationPreloadState* temp = navigation_preload_state_;
  navigation_preload_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::storage::ServiceWorkerNavigationPreloadState* ServiceWorkerRegistrationData::unsafe_arena_release_navigation_preload_state() {
  // @@protoc_insertion_point(field_release:storage.ServiceWorkerRegistrationData.navigation_preload_state)
  _has_bits_[0] &= ~0x00000020u;
  ::storage::ServiceWorkerNavigationPreloadState* temp = navigation_preload_state_;
  navigation_preload_state_ = nullptr;
  return temp;
}
inline ::storage::ServiceWorkerNavigationPreloadState* ServiceWorkerRegistrationData::_internal_mutable_navigation_preload_state() {
  _has_bits_[0] |= 0x00000020u;
  if (navigation_preload_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::storage::ServiceWorkerNavigationPreloadState>(GetArenaForAllocation());
    navigation_preload_state_ = p;
  }
  return navigation_preload_state_;
}
inline ::storage::ServiceWorkerNavigationPreloadState* ServiceWorkerRegistrationData::mutable_navigation_preload_state() {
  ::storage::ServiceWorkerNavigationPreloadState* _msg = _internal_mutable_navigation_preload_state();
  // @@protoc_insertion_point(field_mutable:storage.ServiceWorkerRegistrationData.navigation_preload_state)
  return _msg;
}
inline void ServiceWorkerRegistrationData::set_allocated_navigation_preload_state(::storage::ServiceWorkerNavigationPreloadState* navigation_preload_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete navigation_preload_state_;
  }
  if (navigation_preload_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(navigation_preload_state);
    if (message_arena != submessage_arena) {
      navigation_preload_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navigation_preload_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  navigation_preload_state_ = navigation_preload_state;
  // @@protoc_insertion_point(field_set_allocated:storage.ServiceWorkerRegistrationData.navigation_preload_state)
}

// repeated uint32 used_features = 13;
inline int ServiceWorkerRegistrationData::_internal_used_features_size() const {
  return used_features_.size();
}
inline int ServiceWorkerRegistrationData::used_features_size() const {
  return _internal_used_features_size();
}
inline void ServiceWorkerRegistrationData::clear_used_features() {
  used_features_.Clear();
}
inline uint32_t ServiceWorkerRegistrationData::_internal_used_features(int index) const {
  return used_features_.Get(index);
}
inline uint32_t ServiceWorkerRegistrationData::used_features(int index) const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerRegistrationData.used_features)
  return _internal_used_features(index);
}
inline void ServiceWorkerRegistrationData::set_used_features(int index, uint32_t value) {
  used_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerRegistrationData.used_features)
}
inline void ServiceWorkerRegistrationData::_internal_add_used_features(uint32_t value) {
  used_features_.Add(value);
}
inline void ServiceWorkerRegistrationData::add_used_features(uint32_t value) {
  _internal_add_used_features(value);
  // @@protoc_insertion_point(field_add:storage.ServiceWorkerRegistrationData.used_features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ServiceWorkerRegistrationData::_internal_used_features() const {
  return used_features_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ServiceWorkerRegistrationData::used_features() const {
  // @@protoc_insertion_point(field_list:storage.ServiceWorkerRegistrationData.used_features)
  return _internal_used_features();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ServiceWorkerRegistrationData::_internal_mutable_used_features() {
  return &used_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ServiceWorkerRegistrationData::mutable_used_features() {
  // @@protoc_insertion_point(field_mutable_list:storage.ServiceWorkerRegistrationData.used_features)
  return _internal_mutable_used_features();
}

// optional .storage.ServiceWorkerRegistrationData.ServiceWorkerUpdateViaCacheType update_via_cache = 14 [default = IMPORTS];
inline bool ServiceWorkerRegistrationData::_internal_has_update_via_cache() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ServiceWorkerRegistrationData::has_update_via_cache() const {
  return _internal_has_update_via_cache();
}
inline void ServiceWorkerRegistrationData::clear_update_via_cache() {
  update_via_cache_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::storage::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData::_internal_update_via_cache() const {
  return static_cast< ::storage::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType >(update_via_cache_);
}
inline ::storage::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType ServiceWorkerRegistrationData::update_via_cache() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerRegistrationData.update_via_cache)
  return _internal_update_via_cache();
}
inline void ServiceWorkerRegistrationData::_internal_set_update_via_cache(::storage::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType value) {
  assert(::storage::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  update_via_cache_ = value;
}
inline void ServiceWorkerRegistrationData::set_update_via_cache(::storage::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType value) {
  _internal_set_update_via_cache(value);
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerRegistrationData.update_via_cache)
}

// optional .storage.ServiceWorkerRegistrationData.ServiceWorkerScriptType script_type = 15 [default = CLASSIC];
inline bool ServiceWorkerRegistrationData::_internal_has_script_type() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ServiceWorkerRegistrationData::has_script_type() const {
  return _internal_has_script_type();
}
inline void ServiceWorkerRegistrationData::clear_script_type() {
  script_type_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::storage::ServiceWorkerRegistrationData_ServiceWorkerScriptType ServiceWorkerRegistrationData::_internal_script_type() const {
  return static_cast< ::storage::ServiceWorkerRegistrationData_ServiceWorkerScriptType >(script_type_);
}
inline ::storage::ServiceWorkerRegistrationData_ServiceWorkerScriptType ServiceWorkerRegistrationData::script_type() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerRegistrationData.script_type)
  return _internal_script_type();
}
inline void ServiceWorkerRegistrationData::_internal_set_script_type(::storage::ServiceWorkerRegistrationData_ServiceWorkerScriptType value) {
  assert(::storage::ServiceWorkerRegistrationData_ServiceWorkerScriptType_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  script_type_ = value;
}
inline void ServiceWorkerRegistrationData::set_script_type(::storage::ServiceWorkerRegistrationData_ServiceWorkerScriptType value) {
  _internal_set_script_type(value);
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerRegistrationData.script_type)
}

// optional int64 script_response_time = 16;
inline bool ServiceWorkerRegistrationData::_internal_has_script_response_time() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ServiceWorkerRegistrationData::has_script_response_time() const {
  return _internal_has_script_response_time();
}
inline void ServiceWorkerRegistrationData::clear_script_response_time() {
  script_response_time_ = int64_t{0};
  _has_bits_[0] &= ~0x00002000u;
}
inline int64_t ServiceWorkerRegistrationData::_internal_script_response_time() const {
  return script_response_time_;
}
inline int64_t ServiceWorkerRegistrationData::script_response_time() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerRegistrationData.script_response_time)
  return _internal_script_response_time();
}
inline void ServiceWorkerRegistrationData::_internal_set_script_response_time(int64_t value) {
  _has_bits_[0] |= 0x00002000u;
  script_response_time_ = value;
}
inline void ServiceWorkerRegistrationData::set_script_response_time(int64_t value) {
  _internal_set_script_response_time(value);
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerRegistrationData.script_response_time)
}

// optional .storage.ServiceWorkerRegistrationData.CrossOriginEmbedderPolicyValue cross_origin_embedder_policy_value = 17 [default = NONE_OR_NOT_EXIST];
inline bool ServiceWorkerRegistrationData::_internal_has_cross_origin_embedder_policy_value() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ServiceWorkerRegistrationData::has_cross_origin_embedder_policy_value() const {
  return _internal_has_cross_origin_embedder_policy_value();
}
inline void ServiceWorkerRegistrationData::clear_cross_origin_embedder_policy_value() {
  cross_origin_embedder_policy_value_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue ServiceWorkerRegistrationData::_internal_cross_origin_embedder_policy_value() const {
  return static_cast< ::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue >(cross_origin_embedder_policy_value_);
}
inline ::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue ServiceWorkerRegistrationData::cross_origin_embedder_policy_value() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerRegistrationData.cross_origin_embedder_policy_value)
  return _internal_cross_origin_embedder_policy_value();
}
inline void ServiceWorkerRegistrationData::_internal_set_cross_origin_embedder_policy_value(::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue value) {
  assert(::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  cross_origin_embedder_policy_value_ = value;
}
inline void ServiceWorkerRegistrationData::set_cross_origin_embedder_policy_value(::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue value) {
  _internal_set_cross_origin_embedder_policy_value(value);
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerRegistrationData.cross_origin_embedder_policy_value)
}

// optional string cross_origin_embedder_policy_reporting_endpoint = 18;
inline bool ServiceWorkerRegistrationData::_internal_has_cross_origin_embedder_policy_reporting_endpoint() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServiceWorkerRegistrationData::has_cross_origin_embedder_policy_reporting_endpoint() const {
  return _internal_has_cross_origin_embedder_policy_reporting_endpoint();
}
inline void ServiceWorkerRegistrationData::clear_cross_origin_embedder_policy_reporting_endpoint() {
  cross_origin_embedder_policy_reporting_endpoint_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ServiceWorkerRegistrationData::cross_origin_embedder_policy_reporting_endpoint() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerRegistrationData.cross_origin_embedder_policy_reporting_endpoint)
  return _internal_cross_origin_embedder_policy_reporting_endpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceWorkerRegistrationData::set_cross_origin_embedder_policy_reporting_endpoint(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 cross_origin_embedder_policy_reporting_endpoint_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerRegistrationData.cross_origin_embedder_policy_reporting_endpoint)
}
inline std::string* ServiceWorkerRegistrationData::mutable_cross_origin_embedder_policy_reporting_endpoint() {
  std::string* _s = _internal_mutable_cross_origin_embedder_policy_reporting_endpoint();
  // @@protoc_insertion_point(field_mutable:storage.ServiceWorkerRegistrationData.cross_origin_embedder_policy_reporting_endpoint)
  return _s;
}
inline const std::string& ServiceWorkerRegistrationData::_internal_cross_origin_embedder_policy_reporting_endpoint() const {
  return cross_origin_embedder_policy_reporting_endpoint_.Get();
}
inline void ServiceWorkerRegistrationData::_internal_set_cross_origin_embedder_policy_reporting_endpoint(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cross_origin_embedder_policy_reporting_endpoint_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceWorkerRegistrationData::_internal_mutable_cross_origin_embedder_policy_reporting_endpoint() {
  _has_bits_[0] |= 0x00000004u;
  return cross_origin_embedder_policy_reporting_endpoint_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceWorkerRegistrationData::release_cross_origin_embedder_policy_reporting_endpoint() {
  // @@protoc_insertion_point(field_release:storage.ServiceWorkerRegistrationData.cross_origin_embedder_policy_reporting_endpoint)
  if (!_internal_has_cross_origin_embedder_policy_reporting_endpoint()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = cross_origin_embedder_policy_reporting_endpoint_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cross_origin_embedder_policy_reporting_endpoint_.IsDefault()) {
    cross_origin_embedder_policy_reporting_endpoint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceWorkerRegistrationData::set_allocated_cross_origin_embedder_policy_reporting_endpoint(std::string* cross_origin_embedder_policy_reporting_endpoint) {
  if (cross_origin_embedder_policy_reporting_endpoint != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cross_origin_embedder_policy_reporting_endpoint_.SetAllocated(cross_origin_embedder_policy_reporting_endpoint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cross_origin_embedder_policy_reporting_endpoint_.IsDefault()) {
    cross_origin_embedder_policy_reporting_endpoint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:storage.ServiceWorkerRegistrationData.cross_origin_embedder_policy_reporting_endpoint)
}

// optional .storage.ServiceWorkerRegistrationData.CrossOriginEmbedderPolicyValue cross_origin_embedder_policy_report_only_value = 19 [default = NONE_OR_NOT_EXIST];
inline bool ServiceWorkerRegistrationData::_internal_has_cross_origin_embedder_policy_report_only_value() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ServiceWorkerRegistrationData::has_cross_origin_embedder_policy_report_only_value() const {
  return _internal_has_cross_origin_embedder_policy_report_only_value();
}
inline void ServiceWorkerRegistrationData::clear_cross_origin_embedder_policy_report_only_value() {
  cross_origin_embedder_policy_report_only_value_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue ServiceWorkerRegistrationData::_internal_cross_origin_embedder_policy_report_only_value() const {
  return static_cast< ::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue >(cross_origin_embedder_policy_report_only_value_);
}
inline ::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue ServiceWorkerRegistrationData::cross_origin_embedder_policy_report_only_value() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerRegistrationData.cross_origin_embedder_policy_report_only_value)
  return _internal_cross_origin_embedder_policy_report_only_value();
}
inline void ServiceWorkerRegistrationData::_internal_set_cross_origin_embedder_policy_report_only_value(::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue value) {
  assert(::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  cross_origin_embedder_policy_report_only_value_ = value;
}
inline void ServiceWorkerRegistrationData::set_cross_origin_embedder_policy_report_only_value(::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue value) {
  _internal_set_cross_origin_embedder_policy_report_only_value(value);
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerRegistrationData.cross_origin_embedder_policy_report_only_value)
}

// optional string cross_origin_embedder_policy_report_only_reporting_endpoint = 20;
inline bool ServiceWorkerRegistrationData::_internal_has_cross_origin_embedder_policy_report_only_reporting_endpoint() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ServiceWorkerRegistrationData::has_cross_origin_embedder_policy_report_only_reporting_endpoint() const {
  return _internal_has_cross_origin_embedder_policy_report_only_reporting_endpoint();
}
inline void ServiceWorkerRegistrationData::clear_cross_origin_embedder_policy_report_only_reporting_endpoint() {
  cross_origin_embedder_policy_report_only_reporting_endpoint_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ServiceWorkerRegistrationData::cross_origin_embedder_policy_report_only_reporting_endpoint() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerRegistrationData.cross_origin_embedder_policy_report_only_reporting_endpoint)
  return _internal_cross_origin_embedder_policy_report_only_reporting_endpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceWorkerRegistrationData::set_cross_origin_embedder_policy_report_only_reporting_endpoint(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 cross_origin_embedder_policy_report_only_reporting_endpoint_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerRegistrationData.cross_origin_embedder_policy_report_only_reporting_endpoint)
}
inline std::string* ServiceWorkerRegistrationData::mutable_cross_origin_embedder_policy_report_only_reporting_endpoint() {
  std::string* _s = _internal_mutable_cross_origin_embedder_policy_report_only_reporting_endpoint();
  // @@protoc_insertion_point(field_mutable:storage.ServiceWorkerRegistrationData.cross_origin_embedder_policy_report_only_reporting_endpoint)
  return _s;
}
inline const std::string& ServiceWorkerRegistrationData::_internal_cross_origin_embedder_policy_report_only_reporting_endpoint() const {
  return cross_origin_embedder_policy_report_only_reporting_endpoint_.Get();
}
inline void ServiceWorkerRegistrationData::_internal_set_cross_origin_embedder_policy_report_only_reporting_endpoint(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  cross_origin_embedder_policy_report_only_reporting_endpoint_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceWorkerRegistrationData::_internal_mutable_cross_origin_embedder_policy_report_only_reporting_endpoint() {
  _has_bits_[0] |= 0x00000008u;
  return cross_origin_embedder_policy_report_only_reporting_endpoint_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceWorkerRegistrationData::release_cross_origin_embedder_policy_report_only_reporting_endpoint() {
  // @@protoc_insertion_point(field_release:storage.ServiceWorkerRegistrationData.cross_origin_embedder_policy_report_only_reporting_endpoint)
  if (!_internal_has_cross_origin_embedder_policy_report_only_reporting_endpoint()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = cross_origin_embedder_policy_report_only_reporting_endpoint_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cross_origin_embedder_policy_report_only_reporting_endpoint_.IsDefault()) {
    cross_origin_embedder_policy_report_only_reporting_endpoint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceWorkerRegistrationData::set_allocated_cross_origin_embedder_policy_report_only_reporting_endpoint(std::string* cross_origin_embedder_policy_report_only_reporting_endpoint) {
  if (cross_origin_embedder_policy_report_only_reporting_endpoint != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  cross_origin_embedder_policy_report_only_reporting_endpoint_.SetAllocated(cross_origin_embedder_policy_report_only_reporting_endpoint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cross_origin_embedder_policy_report_only_reporting_endpoint_.IsDefault()) {
    cross_origin_embedder_policy_report_only_reporting_endpoint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:storage.ServiceWorkerRegistrationData.cross_origin_embedder_policy_report_only_reporting_endpoint)
}

// optional .storage.ServiceWorkerRegistrationData.AncestorFrameType ancestor_frame_type = 21 [default = NORMAL_FRAME];
inline bool ServiceWorkerRegistrationData::_internal_has_ancestor_frame_type() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ServiceWorkerRegistrationData::has_ancestor_frame_type() const {
  return _internal_has_ancestor_frame_type();
}
inline void ServiceWorkerRegistrationData::clear_ancestor_frame_type() {
  ancestor_frame_type_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::storage::ServiceWorkerRegistrationData_AncestorFrameType ServiceWorkerRegistrationData::_internal_ancestor_frame_type() const {
  return static_cast< ::storage::ServiceWorkerRegistrationData_AncestorFrameType >(ancestor_frame_type_);
}
inline ::storage::ServiceWorkerRegistrationData_AncestorFrameType ServiceWorkerRegistrationData::ancestor_frame_type() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerRegistrationData.ancestor_frame_type)
  return _internal_ancestor_frame_type();
}
inline void ServiceWorkerRegistrationData::_internal_set_ancestor_frame_type(::storage::ServiceWorkerRegistrationData_AncestorFrameType value) {
  assert(::storage::ServiceWorkerRegistrationData_AncestorFrameType_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  ancestor_frame_type_ = value;
}
inline void ServiceWorkerRegistrationData::set_ancestor_frame_type(::storage::ServiceWorkerRegistrationData_AncestorFrameType value) {
  _internal_set_ancestor_frame_type(value);
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerRegistrationData.ancestor_frame_type)
}

// -------------------------------------------------------------------

// ServiceWorkerResourceRecord

// required int64 resource_id = 1;
inline bool ServiceWorkerResourceRecord::_internal_has_resource_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServiceWorkerResourceRecord::has_resource_id() const {
  return _internal_has_resource_id();
}
inline void ServiceWorkerResourceRecord::clear_resource_id() {
  resource_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t ServiceWorkerResourceRecord::_internal_resource_id() const {
  return resource_id_;
}
inline int64_t ServiceWorkerResourceRecord::resource_id() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerResourceRecord.resource_id)
  return _internal_resource_id();
}
inline void ServiceWorkerResourceRecord::_internal_set_resource_id(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  resource_id_ = value;
}
inline void ServiceWorkerResourceRecord::set_resource_id(int64_t value) {
  _internal_set_resource_id(value);
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerResourceRecord.resource_id)
}

// required string url = 2;
inline bool ServiceWorkerResourceRecord::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServiceWorkerResourceRecord::has_url() const {
  return _internal_has_url();
}
inline void ServiceWorkerResourceRecord::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceWorkerResourceRecord::url() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerResourceRecord.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceWorkerResourceRecord::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerResourceRecord.url)
}
inline std::string* ServiceWorkerResourceRecord::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:storage.ServiceWorkerResourceRecord.url)
  return _s;
}
inline const std::string& ServiceWorkerResourceRecord::_internal_url() const {
  return url_.Get();
}
inline void ServiceWorkerResourceRecord::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceWorkerResourceRecord::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceWorkerResourceRecord::release_url() {
  // @@protoc_insertion_point(field_release:storage.ServiceWorkerResourceRecord.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceWorkerResourceRecord::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:storage.ServiceWorkerResourceRecord.url)
}

// optional uint64 size_bytes = 3;
inline bool ServiceWorkerResourceRecord::_internal_has_size_bytes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServiceWorkerResourceRecord::has_size_bytes() const {
  return _internal_has_size_bytes();
}
inline void ServiceWorkerResourceRecord::clear_size_bytes() {
  size_bytes_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t ServiceWorkerResourceRecord::_internal_size_bytes() const {
  return size_bytes_;
}
inline uint64_t ServiceWorkerResourceRecord::size_bytes() const {
  // @@protoc_insertion_point(field_get:storage.ServiceWorkerResourceRecord.size_bytes)
  return _internal_size_bytes();
}
inline void ServiceWorkerResourceRecord::_internal_set_size_bytes(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  size_bytes_ = value;
}
inline void ServiceWorkerResourceRecord::set_size_bytes(uint64_t value) {
  _internal_set_size_bytes(value);
  // @@protoc_insertion_point(field_set:storage.ServiceWorkerResourceRecord.size_bytes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace storage

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::storage::ServiceWorkerRegistrationData_ServiceWorkerScriptType> : ::std::true_type {};
template <> struct is_proto_enum< ::storage::ServiceWorkerRegistrationData_ServiceWorkerUpdateViaCacheType> : ::std::true_type {};
template <> struct is_proto_enum< ::storage::ServiceWorkerRegistrationData_CrossOriginEmbedderPolicyValue> : ::std::true_type {};
template <> struct is_proto_enum< ::storage::ServiceWorkerRegistrationData_AncestorFrameType> : ::std::true_type {};
template <> struct is_proto_enum< ::storage::ServiceWorkerRegistrationData_FetchHandlerSkippableType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service_5fworker_5fdatabase_2eproto
