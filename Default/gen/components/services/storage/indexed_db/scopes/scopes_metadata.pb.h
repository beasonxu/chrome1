// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scopes_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scopes_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scopes_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scopes_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scopes_5fmetadata_2eproto {
  static const uint32_t offsets[];
};
namespace content {
class LevelDBScopesCleanupTask;
struct LevelDBScopesCleanupTaskDefaultTypeInternal;
extern LevelDBScopesCleanupTaskDefaultTypeInternal _LevelDBScopesCleanupTask_default_instance_;
class LevelDBScopesKeyRange;
struct LevelDBScopesKeyRangeDefaultTypeInternal;
extern LevelDBScopesKeyRangeDefaultTypeInternal _LevelDBScopesKeyRange_default_instance_;
class LevelDBScopesMetadata;
struct LevelDBScopesMetadataDefaultTypeInternal;
extern LevelDBScopesMetadataDefaultTypeInternal _LevelDBScopesMetadata_default_instance_;
class LevelDBScopesScopeMetadata;
struct LevelDBScopesScopeMetadataDefaultTypeInternal;
extern LevelDBScopesScopeMetadataDefaultTypeInternal _LevelDBScopesScopeMetadata_default_instance_;
class LevelDBScopesScopeMetadata_LevelDBLeveledLock;
struct LevelDBScopesScopeMetadata_LevelDBLeveledLockDefaultTypeInternal;
extern LevelDBScopesScopeMetadata_LevelDBLeveledLockDefaultTypeInternal _LevelDBScopesScopeMetadata_LevelDBLeveledLock_default_instance_;
class LevelDBScopesUndoTask;
struct LevelDBScopesUndoTaskDefaultTypeInternal;
extern LevelDBScopesUndoTaskDefaultTypeInternal _LevelDBScopesUndoTask_default_instance_;
class LevelDBScopesUndoTask_Delete;
struct LevelDBScopesUndoTask_DeleteDefaultTypeInternal;
extern LevelDBScopesUndoTask_DeleteDefaultTypeInternal _LevelDBScopesUndoTask_Delete_default_instance_;
class LevelDBScopesUndoTask_Put;
struct LevelDBScopesUndoTask_PutDefaultTypeInternal;
extern LevelDBScopesUndoTask_PutDefaultTypeInternal _LevelDBScopesUndoTask_Put_default_instance_;
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> ::content::LevelDBScopesCleanupTask* Arena::CreateMaybeMessage<::content::LevelDBScopesCleanupTask>(Arena*);
template<> ::content::LevelDBScopesKeyRange* Arena::CreateMaybeMessage<::content::LevelDBScopesKeyRange>(Arena*);
template<> ::content::LevelDBScopesMetadata* Arena::CreateMaybeMessage<::content::LevelDBScopesMetadata>(Arena*);
template<> ::content::LevelDBScopesScopeMetadata* Arena::CreateMaybeMessage<::content::LevelDBScopesScopeMetadata>(Arena*);
template<> ::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock* Arena::CreateMaybeMessage<::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock>(Arena*);
template<> ::content::LevelDBScopesUndoTask* Arena::CreateMaybeMessage<::content::LevelDBScopesUndoTask>(Arena*);
template<> ::content::LevelDBScopesUndoTask_Delete* Arena::CreateMaybeMessage<::content::LevelDBScopesUndoTask_Delete>(Arena*);
template<> ::content::LevelDBScopesUndoTask_Put* Arena::CreateMaybeMessage<::content::LevelDBScopesUndoTask_Put>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content {

// ===================================================================

class LevelDBScopesKeyRange final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.LevelDBScopesKeyRange) */ {
 public:
  inline LevelDBScopesKeyRange() : LevelDBScopesKeyRange(nullptr) {}
  ~LevelDBScopesKeyRange() override;
  explicit PROTOBUF_CONSTEXPR LevelDBScopesKeyRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LevelDBScopesKeyRange(const LevelDBScopesKeyRange& from);
  LevelDBScopesKeyRange(LevelDBScopesKeyRange&& from) noexcept
    : LevelDBScopesKeyRange() {
    *this = ::std::move(from);
  }

  inline LevelDBScopesKeyRange& operator=(const LevelDBScopesKeyRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline LevelDBScopesKeyRange& operator=(LevelDBScopesKeyRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LevelDBScopesKeyRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const LevelDBScopesKeyRange* internal_default_instance() {
    return reinterpret_cast<const LevelDBScopesKeyRange*>(
               &_LevelDBScopesKeyRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LevelDBScopesKeyRange& a, LevelDBScopesKeyRange& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LevelDBScopesKeyRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LevelDBScopesKeyRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LevelDBScopesKeyRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LevelDBScopesKeyRange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LevelDBScopesKeyRange& from);
  void MergeFrom(const LevelDBScopesKeyRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LevelDBScopesKeyRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.LevelDBScopesKeyRange";
  }
  protected:
  explicit LevelDBScopesKeyRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeginFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // bytes begin = 1;
  void clear_begin();
  const std::string& begin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_begin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_begin();
  PROTOBUF_NODISCARD std::string* release_begin();
  void set_allocated_begin(std::string* begin);
  private:
  const std::string& _internal_begin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_begin(const std::string& value);
  std::string* _internal_mutable_begin();
  public:

  // bytes end = 2;
  void clear_end();
  const std::string& end() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_end(ArgT0&& arg0, ArgT... args);
  std::string* mutable_end();
  PROTOBUF_NODISCARD std::string* release_end();
  void set_allocated_end(std::string* end);
  private:
  const std::string& _internal_end() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end(const std::string& value);
  std::string* _internal_mutable_end();
  public:

  // @@protoc_insertion_point(class_scope:content.LevelDBScopesKeyRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr begin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scopes_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class LevelDBScopesMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.LevelDBScopesMetadata) */ {
 public:
  inline LevelDBScopesMetadata() : LevelDBScopesMetadata(nullptr) {}
  ~LevelDBScopesMetadata() override;
  explicit PROTOBUF_CONSTEXPR LevelDBScopesMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LevelDBScopesMetadata(const LevelDBScopesMetadata& from);
  LevelDBScopesMetadata(LevelDBScopesMetadata&& from) noexcept
    : LevelDBScopesMetadata() {
    *this = ::std::move(from);
  }

  inline LevelDBScopesMetadata& operator=(const LevelDBScopesMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline LevelDBScopesMetadata& operator=(LevelDBScopesMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LevelDBScopesMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const LevelDBScopesMetadata* internal_default_instance() {
    return reinterpret_cast<const LevelDBScopesMetadata*>(
               &_LevelDBScopesMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LevelDBScopesMetadata& a, LevelDBScopesMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LevelDBScopesMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LevelDBScopesMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LevelDBScopesMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LevelDBScopesMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LevelDBScopesMetadata& from);
  void MergeFrom(const LevelDBScopesMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LevelDBScopesMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.LevelDBScopesMetadata";
  }
  protected:
  explicit LevelDBScopesMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // int64 version = 1;
  void clear_version();
  int64_t version() const;
  void set_version(int64_t value);
  private:
  int64_t _internal_version() const;
  void _internal_set_version(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:content.LevelDBScopesMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scopes_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class LevelDBScopesScopeMetadata_LevelDBLeveledLock final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.LevelDBScopesScopeMetadata.LevelDBLeveledLock) */ {
 public:
  inline LevelDBScopesScopeMetadata_LevelDBLeveledLock() : LevelDBScopesScopeMetadata_LevelDBLeveledLock(nullptr) {}
  ~LevelDBScopesScopeMetadata_LevelDBLeveledLock() override;
  explicit PROTOBUF_CONSTEXPR LevelDBScopesScopeMetadata_LevelDBLeveledLock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LevelDBScopesScopeMetadata_LevelDBLeveledLock(const LevelDBScopesScopeMetadata_LevelDBLeveledLock& from);
  LevelDBScopesScopeMetadata_LevelDBLeveledLock(LevelDBScopesScopeMetadata_LevelDBLeveledLock&& from) noexcept
    : LevelDBScopesScopeMetadata_LevelDBLeveledLock() {
    *this = ::std::move(from);
  }

  inline LevelDBScopesScopeMetadata_LevelDBLeveledLock& operator=(const LevelDBScopesScopeMetadata_LevelDBLeveledLock& from) {
    CopyFrom(from);
    return *this;
  }
  inline LevelDBScopesScopeMetadata_LevelDBLeveledLock& operator=(LevelDBScopesScopeMetadata_LevelDBLeveledLock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LevelDBScopesScopeMetadata_LevelDBLeveledLock& default_instance() {
    return *internal_default_instance();
  }
  static inline const LevelDBScopesScopeMetadata_LevelDBLeveledLock* internal_default_instance() {
    return reinterpret_cast<const LevelDBScopesScopeMetadata_LevelDBLeveledLock*>(
               &_LevelDBScopesScopeMetadata_LevelDBLeveledLock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LevelDBScopesScopeMetadata_LevelDBLeveledLock& a, LevelDBScopesScopeMetadata_LevelDBLeveledLock& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LevelDBScopesScopeMetadata_LevelDBLeveledLock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LevelDBScopesScopeMetadata_LevelDBLeveledLock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LevelDBScopesScopeMetadata_LevelDBLeveledLock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LevelDBScopesScopeMetadata_LevelDBLeveledLock>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LevelDBScopesScopeMetadata_LevelDBLeveledLock& from);
  void MergeFrom(const LevelDBScopesScopeMetadata_LevelDBLeveledLock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LevelDBScopesScopeMetadata_LevelDBLeveledLock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.LevelDBScopesScopeMetadata.LevelDBLeveledLock";
  }
  protected:
  explicit LevelDBScopesScopeMetadata_LevelDBLeveledLock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 2,
    kLevelFieldNumber = 1,
  };
  // .content.LevelDBScopesKeyRange range = 2;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::content::LevelDBScopesKeyRange& range() const;
  PROTOBUF_NODISCARD ::content::LevelDBScopesKeyRange* release_range();
  ::content::LevelDBScopesKeyRange* mutable_range();
  void set_allocated_range(::content::LevelDBScopesKeyRange* range);
  private:
  const ::content::LevelDBScopesKeyRange& _internal_range() const;
  ::content::LevelDBScopesKeyRange* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::content::LevelDBScopesKeyRange* range);
  ::content::LevelDBScopesKeyRange* unsafe_arena_release_range();

  // int64 level = 1;
  void clear_level();
  int64_t level() const;
  void set_level(int64_t value);
  private:
  int64_t _internal_level() const;
  void _internal_set_level(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:content.LevelDBScopesScopeMetadata.LevelDBLeveledLock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::content::LevelDBScopesKeyRange* range_;
  int64_t level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scopes_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class LevelDBScopesScopeMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.LevelDBScopesScopeMetadata) */ {
 public:
  inline LevelDBScopesScopeMetadata() : LevelDBScopesScopeMetadata(nullptr) {}
  ~LevelDBScopesScopeMetadata() override;
  explicit PROTOBUF_CONSTEXPR LevelDBScopesScopeMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LevelDBScopesScopeMetadata(const LevelDBScopesScopeMetadata& from);
  LevelDBScopesScopeMetadata(LevelDBScopesScopeMetadata&& from) noexcept
    : LevelDBScopesScopeMetadata() {
    *this = ::std::move(from);
  }

  inline LevelDBScopesScopeMetadata& operator=(const LevelDBScopesScopeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline LevelDBScopesScopeMetadata& operator=(LevelDBScopesScopeMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LevelDBScopesScopeMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const LevelDBScopesScopeMetadata* internal_default_instance() {
    return reinterpret_cast<const LevelDBScopesScopeMetadata*>(
               &_LevelDBScopesScopeMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LevelDBScopesScopeMetadata& a, LevelDBScopesScopeMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LevelDBScopesScopeMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LevelDBScopesScopeMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LevelDBScopesScopeMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LevelDBScopesScopeMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LevelDBScopesScopeMetadata& from);
  void MergeFrom(const LevelDBScopesScopeMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LevelDBScopesScopeMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.LevelDBScopesScopeMetadata";
  }
  protected:
  explicit LevelDBScopesScopeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LevelDBScopesScopeMetadata_LevelDBLeveledLock LevelDBLeveledLock;

  // accessors -------------------------------------------------------

  enum : int {
    kLocksFieldNumber = 1,
    kIgnoreCleanupTasksFieldNumber = 2,
  };
  // repeated .content.LevelDBScopesScopeMetadata.LevelDBLeveledLock locks = 1;
  int locks_size() const;
  private:
  int _internal_locks_size() const;
  public:
  void clear_locks();
  ::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock* mutable_locks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock >*
      mutable_locks();
  private:
  const ::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock& _internal_locks(int index) const;
  ::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock* _internal_add_locks();
  public:
  const ::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock& locks(int index) const;
  ::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock* add_locks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock >&
      locks() const;

  // bool ignore_cleanup_tasks = 2;
  void clear_ignore_cleanup_tasks();
  bool ignore_cleanup_tasks() const;
  void set_ignore_cleanup_tasks(bool value);
  private:
  bool _internal_ignore_cleanup_tasks() const;
  void _internal_set_ignore_cleanup_tasks(bool value);
  public:

  // @@protoc_insertion_point(class_scope:content.LevelDBScopesScopeMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock > locks_;
  bool ignore_cleanup_tasks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scopes_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class LevelDBScopesUndoTask_Put final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.LevelDBScopesUndoTask.Put) */ {
 public:
  inline LevelDBScopesUndoTask_Put() : LevelDBScopesUndoTask_Put(nullptr) {}
  ~LevelDBScopesUndoTask_Put() override;
  explicit PROTOBUF_CONSTEXPR LevelDBScopesUndoTask_Put(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LevelDBScopesUndoTask_Put(const LevelDBScopesUndoTask_Put& from);
  LevelDBScopesUndoTask_Put(LevelDBScopesUndoTask_Put&& from) noexcept
    : LevelDBScopesUndoTask_Put() {
    *this = ::std::move(from);
  }

  inline LevelDBScopesUndoTask_Put& operator=(const LevelDBScopesUndoTask_Put& from) {
    CopyFrom(from);
    return *this;
  }
  inline LevelDBScopesUndoTask_Put& operator=(LevelDBScopesUndoTask_Put&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LevelDBScopesUndoTask_Put& default_instance() {
    return *internal_default_instance();
  }
  static inline const LevelDBScopesUndoTask_Put* internal_default_instance() {
    return reinterpret_cast<const LevelDBScopesUndoTask_Put*>(
               &_LevelDBScopesUndoTask_Put_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LevelDBScopesUndoTask_Put& a, LevelDBScopesUndoTask_Put& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LevelDBScopesUndoTask_Put* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LevelDBScopesUndoTask_Put* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LevelDBScopesUndoTask_Put* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LevelDBScopesUndoTask_Put>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LevelDBScopesUndoTask_Put& from);
  void MergeFrom(const LevelDBScopesUndoTask_Put& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LevelDBScopesUndoTask_Put* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.LevelDBScopesUndoTask.Put";
  }
  protected:
  explicit LevelDBScopesUndoTask_Put(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:content.LevelDBScopesUndoTask.Put)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scopes_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class LevelDBScopesUndoTask_Delete final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.LevelDBScopesUndoTask.Delete) */ {
 public:
  inline LevelDBScopesUndoTask_Delete() : LevelDBScopesUndoTask_Delete(nullptr) {}
  ~LevelDBScopesUndoTask_Delete() override;
  explicit PROTOBUF_CONSTEXPR LevelDBScopesUndoTask_Delete(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LevelDBScopesUndoTask_Delete(const LevelDBScopesUndoTask_Delete& from);
  LevelDBScopesUndoTask_Delete(LevelDBScopesUndoTask_Delete&& from) noexcept
    : LevelDBScopesUndoTask_Delete() {
    *this = ::std::move(from);
  }

  inline LevelDBScopesUndoTask_Delete& operator=(const LevelDBScopesUndoTask_Delete& from) {
    CopyFrom(from);
    return *this;
  }
  inline LevelDBScopesUndoTask_Delete& operator=(LevelDBScopesUndoTask_Delete&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LevelDBScopesUndoTask_Delete& default_instance() {
    return *internal_default_instance();
  }
  static inline const LevelDBScopesUndoTask_Delete* internal_default_instance() {
    return reinterpret_cast<const LevelDBScopesUndoTask_Delete*>(
               &_LevelDBScopesUndoTask_Delete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LevelDBScopesUndoTask_Delete& a, LevelDBScopesUndoTask_Delete& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LevelDBScopesUndoTask_Delete* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LevelDBScopesUndoTask_Delete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LevelDBScopesUndoTask_Delete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LevelDBScopesUndoTask_Delete>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LevelDBScopesUndoTask_Delete& from);
  void MergeFrom(const LevelDBScopesUndoTask_Delete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LevelDBScopesUndoTask_Delete* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.LevelDBScopesUndoTask.Delete";
  }
  protected:
  explicit LevelDBScopesUndoTask_Delete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:content.LevelDBScopesUndoTask.Delete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scopes_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class LevelDBScopesUndoTask final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.LevelDBScopesUndoTask) */ {
 public:
  inline LevelDBScopesUndoTask() : LevelDBScopesUndoTask(nullptr) {}
  ~LevelDBScopesUndoTask() override;
  explicit PROTOBUF_CONSTEXPR LevelDBScopesUndoTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LevelDBScopesUndoTask(const LevelDBScopesUndoTask& from);
  LevelDBScopesUndoTask(LevelDBScopesUndoTask&& from) noexcept
    : LevelDBScopesUndoTask() {
    *this = ::std::move(from);
  }

  inline LevelDBScopesUndoTask& operator=(const LevelDBScopesUndoTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline LevelDBScopesUndoTask& operator=(LevelDBScopesUndoTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LevelDBScopesUndoTask& default_instance() {
    return *internal_default_instance();
  }
  enum OperationCase {
    kPut = 1,
    kDelete = 2,
    kDeleteRange = 3,
    OPERATION_NOT_SET = 0,
  };

  static inline const LevelDBScopesUndoTask* internal_default_instance() {
    return reinterpret_cast<const LevelDBScopesUndoTask*>(
               &_LevelDBScopesUndoTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LevelDBScopesUndoTask& a, LevelDBScopesUndoTask& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LevelDBScopesUndoTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LevelDBScopesUndoTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LevelDBScopesUndoTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LevelDBScopesUndoTask>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LevelDBScopesUndoTask& from);
  void MergeFrom(const LevelDBScopesUndoTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LevelDBScopesUndoTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.LevelDBScopesUndoTask";
  }
  protected:
  explicit LevelDBScopesUndoTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LevelDBScopesUndoTask_Put Put;
  typedef LevelDBScopesUndoTask_Delete Delete;

  // accessors -------------------------------------------------------

  enum : int {
    kPutFieldNumber = 1,
    kDeleteFieldNumber = 2,
    kDeleteRangeFieldNumber = 3,
  };
  // .content.LevelDBScopesUndoTask.Put put = 1;
  bool has_put() const;
  private:
  bool _internal_has_put() const;
  public:
  void clear_put();
  const ::content::LevelDBScopesUndoTask_Put& put() const;
  PROTOBUF_NODISCARD ::content::LevelDBScopesUndoTask_Put* release_put();
  ::content::LevelDBScopesUndoTask_Put* mutable_put();
  void set_allocated_put(::content::LevelDBScopesUndoTask_Put* put);
  private:
  const ::content::LevelDBScopesUndoTask_Put& _internal_put() const;
  ::content::LevelDBScopesUndoTask_Put* _internal_mutable_put();
  public:
  void unsafe_arena_set_allocated_put(
      ::content::LevelDBScopesUndoTask_Put* put);
  ::content::LevelDBScopesUndoTask_Put* unsafe_arena_release_put();

  // .content.LevelDBScopesUndoTask.Delete delete = 2;
  bool has_delete_() const;
  private:
  bool _internal_has_delete_() const;
  public:
  void clear_delete_();
  const ::content::LevelDBScopesUndoTask_Delete& delete_() const;
  PROTOBUF_NODISCARD ::content::LevelDBScopesUndoTask_Delete* release_delete_();
  ::content::LevelDBScopesUndoTask_Delete* mutable_delete_();
  void set_allocated_delete_(::content::LevelDBScopesUndoTask_Delete* delete_);
  private:
  const ::content::LevelDBScopesUndoTask_Delete& _internal_delete_() const;
  ::content::LevelDBScopesUndoTask_Delete* _internal_mutable_delete_();
  public:
  void unsafe_arena_set_allocated_delete_(
      ::content::LevelDBScopesUndoTask_Delete* delete_);
  ::content::LevelDBScopesUndoTask_Delete* unsafe_arena_release_delete_();

  // .content.LevelDBScopesKeyRange delete_range = 3;
  bool has_delete_range() const;
  private:
  bool _internal_has_delete_range() const;
  public:
  void clear_delete_range();
  const ::content::LevelDBScopesKeyRange& delete_range() const;
  PROTOBUF_NODISCARD ::content::LevelDBScopesKeyRange* release_delete_range();
  ::content::LevelDBScopesKeyRange* mutable_delete_range();
  void set_allocated_delete_range(::content::LevelDBScopesKeyRange* delete_range);
  private:
  const ::content::LevelDBScopesKeyRange& _internal_delete_range() const;
  ::content::LevelDBScopesKeyRange* _internal_mutable_delete_range();
  public:
  void unsafe_arena_set_allocated_delete_range(
      ::content::LevelDBScopesKeyRange* delete_range);
  ::content::LevelDBScopesKeyRange* unsafe_arena_release_delete_range();

  void clear_operation();
  OperationCase operation_case() const;
  // @@protoc_insertion_point(class_scope:content.LevelDBScopesUndoTask)
 private:
  class _Internal;
  void set_has_put();
  void set_has_delete_();
  void set_has_delete_range();

  inline bool has_operation() const;
  inline void clear_has_operation();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union OperationUnion {
    constexpr OperationUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::content::LevelDBScopesUndoTask_Put* put_;
    ::content::LevelDBScopesUndoTask_Delete* delete__;
    ::content::LevelDBScopesKeyRange* delete_range_;
  } operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_scopes_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class LevelDBScopesCleanupTask final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.LevelDBScopesCleanupTask) */ {
 public:
  inline LevelDBScopesCleanupTask() : LevelDBScopesCleanupTask(nullptr) {}
  ~LevelDBScopesCleanupTask() override;
  explicit PROTOBUF_CONSTEXPR LevelDBScopesCleanupTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LevelDBScopesCleanupTask(const LevelDBScopesCleanupTask& from);
  LevelDBScopesCleanupTask(LevelDBScopesCleanupTask&& from) noexcept
    : LevelDBScopesCleanupTask() {
    *this = ::std::move(from);
  }

  inline LevelDBScopesCleanupTask& operator=(const LevelDBScopesCleanupTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline LevelDBScopesCleanupTask& operator=(LevelDBScopesCleanupTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LevelDBScopesCleanupTask& default_instance() {
    return *internal_default_instance();
  }
  enum OperationCase {
    kDeleteRange = 1,
    kDeleteRangeAndCompact = 2,
    OPERATION_NOT_SET = 0,
  };

  static inline const LevelDBScopesCleanupTask* internal_default_instance() {
    return reinterpret_cast<const LevelDBScopesCleanupTask*>(
               &_LevelDBScopesCleanupTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LevelDBScopesCleanupTask& a, LevelDBScopesCleanupTask& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LevelDBScopesCleanupTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LevelDBScopesCleanupTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LevelDBScopesCleanupTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LevelDBScopesCleanupTask>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LevelDBScopesCleanupTask& from);
  void MergeFrom(const LevelDBScopesCleanupTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LevelDBScopesCleanupTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.LevelDBScopesCleanupTask";
  }
  protected:
  explicit LevelDBScopesCleanupTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeleteRangeFieldNumber = 1,
    kDeleteRangeAndCompactFieldNumber = 2,
  };
  // .content.LevelDBScopesKeyRange delete_range = 1;
  bool has_delete_range() const;
  private:
  bool _internal_has_delete_range() const;
  public:
  void clear_delete_range();
  const ::content::LevelDBScopesKeyRange& delete_range() const;
  PROTOBUF_NODISCARD ::content::LevelDBScopesKeyRange* release_delete_range();
  ::content::LevelDBScopesKeyRange* mutable_delete_range();
  void set_allocated_delete_range(::content::LevelDBScopesKeyRange* delete_range);
  private:
  const ::content::LevelDBScopesKeyRange& _internal_delete_range() const;
  ::content::LevelDBScopesKeyRange* _internal_mutable_delete_range();
  public:
  void unsafe_arena_set_allocated_delete_range(
      ::content::LevelDBScopesKeyRange* delete_range);
  ::content::LevelDBScopesKeyRange* unsafe_arena_release_delete_range();

  // .content.LevelDBScopesKeyRange delete_range_and_compact = 2;
  bool has_delete_range_and_compact() const;
  private:
  bool _internal_has_delete_range_and_compact() const;
  public:
  void clear_delete_range_and_compact();
  const ::content::LevelDBScopesKeyRange& delete_range_and_compact() const;
  PROTOBUF_NODISCARD ::content::LevelDBScopesKeyRange* release_delete_range_and_compact();
  ::content::LevelDBScopesKeyRange* mutable_delete_range_and_compact();
  void set_allocated_delete_range_and_compact(::content::LevelDBScopesKeyRange* delete_range_and_compact);
  private:
  const ::content::LevelDBScopesKeyRange& _internal_delete_range_and_compact() const;
  ::content::LevelDBScopesKeyRange* _internal_mutable_delete_range_and_compact();
  public:
  void unsafe_arena_set_allocated_delete_range_and_compact(
      ::content::LevelDBScopesKeyRange* delete_range_and_compact);
  ::content::LevelDBScopesKeyRange* unsafe_arena_release_delete_range_and_compact();

  void clear_operation();
  OperationCase operation_case() const;
  // @@protoc_insertion_point(class_scope:content.LevelDBScopesCleanupTask)
 private:
  class _Internal;
  void set_has_delete_range();
  void set_has_delete_range_and_compact();

  inline bool has_operation() const;
  inline void clear_has_operation();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union OperationUnion {
    constexpr OperationUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::content::LevelDBScopesKeyRange* delete_range_;
    ::content::LevelDBScopesKeyRange* delete_range_and_compact_;
  } operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_scopes_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LevelDBScopesKeyRange

// bytes begin = 1;
inline void LevelDBScopesKeyRange::clear_begin() {
  begin_.ClearToEmpty();
}
inline const std::string& LevelDBScopesKeyRange::begin() const {
  // @@protoc_insertion_point(field_get:content.LevelDBScopesKeyRange.begin)
  return _internal_begin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LevelDBScopesKeyRange::set_begin(ArgT0&& arg0, ArgT... args) {
 
 begin_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.LevelDBScopesKeyRange.begin)
}
inline std::string* LevelDBScopesKeyRange::mutable_begin() {
  std::string* _s = _internal_mutable_begin();
  // @@protoc_insertion_point(field_mutable:content.LevelDBScopesKeyRange.begin)
  return _s;
}
inline const std::string& LevelDBScopesKeyRange::_internal_begin() const {
  return begin_.Get();
}
inline void LevelDBScopesKeyRange::_internal_set_begin(const std::string& value) {
  
  begin_.Set(value, GetArenaForAllocation());
}
inline std::string* LevelDBScopesKeyRange::_internal_mutable_begin() {
  
  return begin_.Mutable(GetArenaForAllocation());
}
inline std::string* LevelDBScopesKeyRange::release_begin() {
  // @@protoc_insertion_point(field_release:content.LevelDBScopesKeyRange.begin)
  return begin_.Release();
}
inline void LevelDBScopesKeyRange::set_allocated_begin(std::string* begin) {
  if (begin != nullptr) {
    
  } else {
    
  }
  begin_.SetAllocated(begin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (begin_.IsDefault()) {
    begin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.LevelDBScopesKeyRange.begin)
}

// bytes end = 2;
inline void LevelDBScopesKeyRange::clear_end() {
  end_.ClearToEmpty();
}
inline const std::string& LevelDBScopesKeyRange::end() const {
  // @@protoc_insertion_point(field_get:content.LevelDBScopesKeyRange.end)
  return _internal_end();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LevelDBScopesKeyRange::set_end(ArgT0&& arg0, ArgT... args) {
 
 end_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.LevelDBScopesKeyRange.end)
}
inline std::string* LevelDBScopesKeyRange::mutable_end() {
  std::string* _s = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:content.LevelDBScopesKeyRange.end)
  return _s;
}
inline const std::string& LevelDBScopesKeyRange::_internal_end() const {
  return end_.Get();
}
inline void LevelDBScopesKeyRange::_internal_set_end(const std::string& value) {
  
  end_.Set(value, GetArenaForAllocation());
}
inline std::string* LevelDBScopesKeyRange::_internal_mutable_end() {
  
  return end_.Mutable(GetArenaForAllocation());
}
inline std::string* LevelDBScopesKeyRange::release_end() {
  // @@protoc_insertion_point(field_release:content.LevelDBScopesKeyRange.end)
  return end_.Release();
}
inline void LevelDBScopesKeyRange::set_allocated_end(std::string* end) {
  if (end != nullptr) {
    
  } else {
    
  }
  end_.SetAllocated(end, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (end_.IsDefault()) {
    end_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.LevelDBScopesKeyRange.end)
}

// -------------------------------------------------------------------

// LevelDBScopesMetadata

// int64 version = 1;
inline void LevelDBScopesMetadata::clear_version() {
  version_ = int64_t{0};
}
inline int64_t LevelDBScopesMetadata::_internal_version() const {
  return version_;
}
inline int64_t LevelDBScopesMetadata::version() const {
  // @@protoc_insertion_point(field_get:content.LevelDBScopesMetadata.version)
  return _internal_version();
}
inline void LevelDBScopesMetadata::_internal_set_version(int64_t value) {
  
  version_ = value;
}
inline void LevelDBScopesMetadata::set_version(int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:content.LevelDBScopesMetadata.version)
}

// -------------------------------------------------------------------

// LevelDBScopesScopeMetadata_LevelDBLeveledLock

// int64 level = 1;
inline void LevelDBScopesScopeMetadata_LevelDBLeveledLock::clear_level() {
  level_ = int64_t{0};
}
inline int64_t LevelDBScopesScopeMetadata_LevelDBLeveledLock::_internal_level() const {
  return level_;
}
inline int64_t LevelDBScopesScopeMetadata_LevelDBLeveledLock::level() const {
  // @@protoc_insertion_point(field_get:content.LevelDBScopesScopeMetadata.LevelDBLeveledLock.level)
  return _internal_level();
}
inline void LevelDBScopesScopeMetadata_LevelDBLeveledLock::_internal_set_level(int64_t value) {
  
  level_ = value;
}
inline void LevelDBScopesScopeMetadata_LevelDBLeveledLock::set_level(int64_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:content.LevelDBScopesScopeMetadata.LevelDBLeveledLock.level)
}

// .content.LevelDBScopesKeyRange range = 2;
inline bool LevelDBScopesScopeMetadata_LevelDBLeveledLock::_internal_has_range() const {
  return this != internal_default_instance() && range_ != nullptr;
}
inline bool LevelDBScopesScopeMetadata_LevelDBLeveledLock::has_range() const {
  return _internal_has_range();
}
inline void LevelDBScopesScopeMetadata_LevelDBLeveledLock::clear_range() {
  if (GetArenaForAllocation() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
}
inline const ::content::LevelDBScopesKeyRange& LevelDBScopesScopeMetadata_LevelDBLeveledLock::_internal_range() const {
  const ::content::LevelDBScopesKeyRange* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::content::LevelDBScopesKeyRange&>(
      ::content::_LevelDBScopesKeyRange_default_instance_);
}
inline const ::content::LevelDBScopesKeyRange& LevelDBScopesScopeMetadata_LevelDBLeveledLock::range() const {
  // @@protoc_insertion_point(field_get:content.LevelDBScopesScopeMetadata.LevelDBLeveledLock.range)
  return _internal_range();
}
inline void LevelDBScopesScopeMetadata_LevelDBLeveledLock::unsafe_arena_set_allocated_range(
    ::content::LevelDBScopesKeyRange* range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content.LevelDBScopesScopeMetadata.LevelDBLeveledLock.range)
}
inline ::content::LevelDBScopesKeyRange* LevelDBScopesScopeMetadata_LevelDBLeveledLock::release_range() {
  
  ::content::LevelDBScopesKeyRange* temp = range_;
  range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::content::LevelDBScopesKeyRange* LevelDBScopesScopeMetadata_LevelDBLeveledLock::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:content.LevelDBScopesScopeMetadata.LevelDBLeveledLock.range)
  
  ::content::LevelDBScopesKeyRange* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::content::LevelDBScopesKeyRange* LevelDBScopesScopeMetadata_LevelDBLeveledLock::_internal_mutable_range() {
  
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::content::LevelDBScopesKeyRange>(GetArenaForAllocation());
    range_ = p;
  }
  return range_;
}
inline ::content::LevelDBScopesKeyRange* LevelDBScopesScopeMetadata_LevelDBLeveledLock::mutable_range() {
  ::content::LevelDBScopesKeyRange* _msg = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:content.LevelDBScopesScopeMetadata.LevelDBLeveledLock.range)
  return _msg;
}
inline void LevelDBScopesScopeMetadata_LevelDBLeveledLock::set_allocated_range(::content::LevelDBScopesKeyRange* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete range_;
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    
  } else {
    
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:content.LevelDBScopesScopeMetadata.LevelDBLeveledLock.range)
}

// -------------------------------------------------------------------

// LevelDBScopesScopeMetadata

// repeated .content.LevelDBScopesScopeMetadata.LevelDBLeveledLock locks = 1;
inline int LevelDBScopesScopeMetadata::_internal_locks_size() const {
  return locks_.size();
}
inline int LevelDBScopesScopeMetadata::locks_size() const {
  return _internal_locks_size();
}
inline void LevelDBScopesScopeMetadata::clear_locks() {
  locks_.Clear();
}
inline ::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock* LevelDBScopesScopeMetadata::mutable_locks(int index) {
  // @@protoc_insertion_point(field_mutable:content.LevelDBScopesScopeMetadata.locks)
  return locks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock >*
LevelDBScopesScopeMetadata::mutable_locks() {
  // @@protoc_insertion_point(field_mutable_list:content.LevelDBScopesScopeMetadata.locks)
  return &locks_;
}
inline const ::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock& LevelDBScopesScopeMetadata::_internal_locks(int index) const {
  return locks_.Get(index);
}
inline const ::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock& LevelDBScopesScopeMetadata::locks(int index) const {
  // @@protoc_insertion_point(field_get:content.LevelDBScopesScopeMetadata.locks)
  return _internal_locks(index);
}
inline ::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock* LevelDBScopesScopeMetadata::_internal_add_locks() {
  return locks_.Add();
}
inline ::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock* LevelDBScopesScopeMetadata::add_locks() {
  ::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock* _add = _internal_add_locks();
  // @@protoc_insertion_point(field_add:content.LevelDBScopesScopeMetadata.locks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock >&
LevelDBScopesScopeMetadata::locks() const {
  // @@protoc_insertion_point(field_list:content.LevelDBScopesScopeMetadata.locks)
  return locks_;
}

// bool ignore_cleanup_tasks = 2;
inline void LevelDBScopesScopeMetadata::clear_ignore_cleanup_tasks() {
  ignore_cleanup_tasks_ = false;
}
inline bool LevelDBScopesScopeMetadata::_internal_ignore_cleanup_tasks() const {
  return ignore_cleanup_tasks_;
}
inline bool LevelDBScopesScopeMetadata::ignore_cleanup_tasks() const {
  // @@protoc_insertion_point(field_get:content.LevelDBScopesScopeMetadata.ignore_cleanup_tasks)
  return _internal_ignore_cleanup_tasks();
}
inline void LevelDBScopesScopeMetadata::_internal_set_ignore_cleanup_tasks(bool value) {
  
  ignore_cleanup_tasks_ = value;
}
inline void LevelDBScopesScopeMetadata::set_ignore_cleanup_tasks(bool value) {
  _internal_set_ignore_cleanup_tasks(value);
  // @@protoc_insertion_point(field_set:content.LevelDBScopesScopeMetadata.ignore_cleanup_tasks)
}

// -------------------------------------------------------------------

// LevelDBScopesUndoTask_Put

// bytes key = 1;
inline void LevelDBScopesUndoTask_Put::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& LevelDBScopesUndoTask_Put::key() const {
  // @@protoc_insertion_point(field_get:content.LevelDBScopesUndoTask.Put.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LevelDBScopesUndoTask_Put::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.LevelDBScopesUndoTask.Put.key)
}
inline std::string* LevelDBScopesUndoTask_Put::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:content.LevelDBScopesUndoTask.Put.key)
  return _s;
}
inline const std::string& LevelDBScopesUndoTask_Put::_internal_key() const {
  return key_.Get();
}
inline void LevelDBScopesUndoTask_Put::_internal_set_key(const std::string& value) {
  
  key_.Set(value, GetArenaForAllocation());
}
inline std::string* LevelDBScopesUndoTask_Put::_internal_mutable_key() {
  
  return key_.Mutable(GetArenaForAllocation());
}
inline std::string* LevelDBScopesUndoTask_Put::release_key() {
  // @@protoc_insertion_point(field_release:content.LevelDBScopesUndoTask.Put.key)
  return key_.Release();
}
inline void LevelDBScopesUndoTask_Put::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.LevelDBScopesUndoTask.Put.key)
}

// bytes value = 2;
inline void LevelDBScopesUndoTask_Put::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& LevelDBScopesUndoTask_Put::value() const {
  // @@protoc_insertion_point(field_get:content.LevelDBScopesUndoTask.Put.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LevelDBScopesUndoTask_Put::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.LevelDBScopesUndoTask.Put.value)
}
inline std::string* LevelDBScopesUndoTask_Put::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:content.LevelDBScopesUndoTask.Put.value)
  return _s;
}
inline const std::string& LevelDBScopesUndoTask_Put::_internal_value() const {
  return value_.Get();
}
inline void LevelDBScopesUndoTask_Put::_internal_set_value(const std::string& value) {
  
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* LevelDBScopesUndoTask_Put::_internal_mutable_value() {
  
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* LevelDBScopesUndoTask_Put::release_value() {
  // @@protoc_insertion_point(field_release:content.LevelDBScopesUndoTask.Put.value)
  return value_.Release();
}
inline void LevelDBScopesUndoTask_Put::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.LevelDBScopesUndoTask.Put.value)
}

// -------------------------------------------------------------------

// LevelDBScopesUndoTask_Delete

// bytes key = 1;
inline void LevelDBScopesUndoTask_Delete::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& LevelDBScopesUndoTask_Delete::key() const {
  // @@protoc_insertion_point(field_get:content.LevelDBScopesUndoTask.Delete.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LevelDBScopesUndoTask_Delete::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.LevelDBScopesUndoTask.Delete.key)
}
inline std::string* LevelDBScopesUndoTask_Delete::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:content.LevelDBScopesUndoTask.Delete.key)
  return _s;
}
inline const std::string& LevelDBScopesUndoTask_Delete::_internal_key() const {
  return key_.Get();
}
inline void LevelDBScopesUndoTask_Delete::_internal_set_key(const std::string& value) {
  
  key_.Set(value, GetArenaForAllocation());
}
inline std::string* LevelDBScopesUndoTask_Delete::_internal_mutable_key() {
  
  return key_.Mutable(GetArenaForAllocation());
}
inline std::string* LevelDBScopesUndoTask_Delete::release_key() {
  // @@protoc_insertion_point(field_release:content.LevelDBScopesUndoTask.Delete.key)
  return key_.Release();
}
inline void LevelDBScopesUndoTask_Delete::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.LevelDBScopesUndoTask.Delete.key)
}

// -------------------------------------------------------------------

// LevelDBScopesUndoTask

// .content.LevelDBScopesUndoTask.Put put = 1;
inline bool LevelDBScopesUndoTask::_internal_has_put() const {
  return operation_case() == kPut;
}
inline bool LevelDBScopesUndoTask::has_put() const {
  return _internal_has_put();
}
inline void LevelDBScopesUndoTask::set_has_put() {
  _oneof_case_[0] = kPut;
}
inline void LevelDBScopesUndoTask::clear_put() {
  if (_internal_has_put()) {
    if (GetArenaForAllocation() == nullptr) {
      delete operation_.put_;
    }
    clear_has_operation();
  }
}
inline ::content::LevelDBScopesUndoTask_Put* LevelDBScopesUndoTask::release_put() {
  // @@protoc_insertion_point(field_release:content.LevelDBScopesUndoTask.put)
  if (_internal_has_put()) {
    clear_has_operation();
    ::content::LevelDBScopesUndoTask_Put* temp = operation_.put_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_.put_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::content::LevelDBScopesUndoTask_Put& LevelDBScopesUndoTask::_internal_put() const {
  return _internal_has_put()
      ? *operation_.put_
      : reinterpret_cast< ::content::LevelDBScopesUndoTask_Put&>(::content::_LevelDBScopesUndoTask_Put_default_instance_);
}
inline const ::content::LevelDBScopesUndoTask_Put& LevelDBScopesUndoTask::put() const {
  // @@protoc_insertion_point(field_get:content.LevelDBScopesUndoTask.put)
  return _internal_put();
}
inline ::content::LevelDBScopesUndoTask_Put* LevelDBScopesUndoTask::unsafe_arena_release_put() {
  // @@protoc_insertion_point(field_unsafe_arena_release:content.LevelDBScopesUndoTask.put)
  if (_internal_has_put()) {
    clear_has_operation();
    ::content::LevelDBScopesUndoTask_Put* temp = operation_.put_;
    operation_.put_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LevelDBScopesUndoTask::unsafe_arena_set_allocated_put(::content::LevelDBScopesUndoTask_Put* put) {
  clear_operation();
  if (put) {
    set_has_put();
    operation_.put_ = put;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content.LevelDBScopesUndoTask.put)
}
inline ::content::LevelDBScopesUndoTask_Put* LevelDBScopesUndoTask::_internal_mutable_put() {
  if (!_internal_has_put()) {
    clear_operation();
    set_has_put();
    operation_.put_ = CreateMaybeMessage< ::content::LevelDBScopesUndoTask_Put >(GetArenaForAllocation());
  }
  return operation_.put_;
}
inline ::content::LevelDBScopesUndoTask_Put* LevelDBScopesUndoTask::mutable_put() {
  ::content::LevelDBScopesUndoTask_Put* _msg = _internal_mutable_put();
  // @@protoc_insertion_point(field_mutable:content.LevelDBScopesUndoTask.put)
  return _msg;
}

// .content.LevelDBScopesUndoTask.Delete delete = 2;
inline bool LevelDBScopesUndoTask::_internal_has_delete_() const {
  return operation_case() == kDelete;
}
inline bool LevelDBScopesUndoTask::has_delete_() const {
  return _internal_has_delete_();
}
inline void LevelDBScopesUndoTask::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
inline void LevelDBScopesUndoTask::clear_delete_() {
  if (_internal_has_delete_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete operation_.delete__;
    }
    clear_has_operation();
  }
}
inline ::content::LevelDBScopesUndoTask_Delete* LevelDBScopesUndoTask::release_delete_() {
  // @@protoc_insertion_point(field_release:content.LevelDBScopesUndoTask.delete)
  if (_internal_has_delete_()) {
    clear_has_operation();
    ::content::LevelDBScopesUndoTask_Delete* temp = operation_.delete__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_.delete__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::content::LevelDBScopesUndoTask_Delete& LevelDBScopesUndoTask::_internal_delete_() const {
  return _internal_has_delete_()
      ? *operation_.delete__
      : reinterpret_cast< ::content::LevelDBScopesUndoTask_Delete&>(::content::_LevelDBScopesUndoTask_Delete_default_instance_);
}
inline const ::content::LevelDBScopesUndoTask_Delete& LevelDBScopesUndoTask::delete_() const {
  // @@protoc_insertion_point(field_get:content.LevelDBScopesUndoTask.delete)
  return _internal_delete_();
}
inline ::content::LevelDBScopesUndoTask_Delete* LevelDBScopesUndoTask::unsafe_arena_release_delete_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:content.LevelDBScopesUndoTask.delete)
  if (_internal_has_delete_()) {
    clear_has_operation();
    ::content::LevelDBScopesUndoTask_Delete* temp = operation_.delete__;
    operation_.delete__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LevelDBScopesUndoTask::unsafe_arena_set_allocated_delete_(::content::LevelDBScopesUndoTask_Delete* delete_) {
  clear_operation();
  if (delete_) {
    set_has_delete_();
    operation_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content.LevelDBScopesUndoTask.delete)
}
inline ::content::LevelDBScopesUndoTask_Delete* LevelDBScopesUndoTask::_internal_mutable_delete_() {
  if (!_internal_has_delete_()) {
    clear_operation();
    set_has_delete_();
    operation_.delete__ = CreateMaybeMessage< ::content::LevelDBScopesUndoTask_Delete >(GetArenaForAllocation());
  }
  return operation_.delete__;
}
inline ::content::LevelDBScopesUndoTask_Delete* LevelDBScopesUndoTask::mutable_delete_() {
  ::content::LevelDBScopesUndoTask_Delete* _msg = _internal_mutable_delete_();
  // @@protoc_insertion_point(field_mutable:content.LevelDBScopesUndoTask.delete)
  return _msg;
}

// .content.LevelDBScopesKeyRange delete_range = 3;
inline bool LevelDBScopesUndoTask::_internal_has_delete_range() const {
  return operation_case() == kDeleteRange;
}
inline bool LevelDBScopesUndoTask::has_delete_range() const {
  return _internal_has_delete_range();
}
inline void LevelDBScopesUndoTask::set_has_delete_range() {
  _oneof_case_[0] = kDeleteRange;
}
inline void LevelDBScopesUndoTask::clear_delete_range() {
  if (_internal_has_delete_range()) {
    if (GetArenaForAllocation() == nullptr) {
      delete operation_.delete_range_;
    }
    clear_has_operation();
  }
}
inline ::content::LevelDBScopesKeyRange* LevelDBScopesUndoTask::release_delete_range() {
  // @@protoc_insertion_point(field_release:content.LevelDBScopesUndoTask.delete_range)
  if (_internal_has_delete_range()) {
    clear_has_operation();
    ::content::LevelDBScopesKeyRange* temp = operation_.delete_range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_.delete_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::content::LevelDBScopesKeyRange& LevelDBScopesUndoTask::_internal_delete_range() const {
  return _internal_has_delete_range()
      ? *operation_.delete_range_
      : reinterpret_cast< ::content::LevelDBScopesKeyRange&>(::content::_LevelDBScopesKeyRange_default_instance_);
}
inline const ::content::LevelDBScopesKeyRange& LevelDBScopesUndoTask::delete_range() const {
  // @@protoc_insertion_point(field_get:content.LevelDBScopesUndoTask.delete_range)
  return _internal_delete_range();
}
inline ::content::LevelDBScopesKeyRange* LevelDBScopesUndoTask::unsafe_arena_release_delete_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:content.LevelDBScopesUndoTask.delete_range)
  if (_internal_has_delete_range()) {
    clear_has_operation();
    ::content::LevelDBScopesKeyRange* temp = operation_.delete_range_;
    operation_.delete_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LevelDBScopesUndoTask::unsafe_arena_set_allocated_delete_range(::content::LevelDBScopesKeyRange* delete_range) {
  clear_operation();
  if (delete_range) {
    set_has_delete_range();
    operation_.delete_range_ = delete_range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content.LevelDBScopesUndoTask.delete_range)
}
inline ::content::LevelDBScopesKeyRange* LevelDBScopesUndoTask::_internal_mutable_delete_range() {
  if (!_internal_has_delete_range()) {
    clear_operation();
    set_has_delete_range();
    operation_.delete_range_ = CreateMaybeMessage< ::content::LevelDBScopesKeyRange >(GetArenaForAllocation());
  }
  return operation_.delete_range_;
}
inline ::content::LevelDBScopesKeyRange* LevelDBScopesUndoTask::mutable_delete_range() {
  ::content::LevelDBScopesKeyRange* _msg = _internal_mutable_delete_range();
  // @@protoc_insertion_point(field_mutable:content.LevelDBScopesUndoTask.delete_range)
  return _msg;
}

inline bool LevelDBScopesUndoTask::has_operation() const {
  return operation_case() != OPERATION_NOT_SET;
}
inline void LevelDBScopesUndoTask::clear_has_operation() {
  _oneof_case_[0] = OPERATION_NOT_SET;
}
inline LevelDBScopesUndoTask::OperationCase LevelDBScopesUndoTask::operation_case() const {
  return LevelDBScopesUndoTask::OperationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LevelDBScopesCleanupTask

// .content.LevelDBScopesKeyRange delete_range = 1;
inline bool LevelDBScopesCleanupTask::_internal_has_delete_range() const {
  return operation_case() == kDeleteRange;
}
inline bool LevelDBScopesCleanupTask::has_delete_range() const {
  return _internal_has_delete_range();
}
inline void LevelDBScopesCleanupTask::set_has_delete_range() {
  _oneof_case_[0] = kDeleteRange;
}
inline void LevelDBScopesCleanupTask::clear_delete_range() {
  if (_internal_has_delete_range()) {
    if (GetArenaForAllocation() == nullptr) {
      delete operation_.delete_range_;
    }
    clear_has_operation();
  }
}
inline ::content::LevelDBScopesKeyRange* LevelDBScopesCleanupTask::release_delete_range() {
  // @@protoc_insertion_point(field_release:content.LevelDBScopesCleanupTask.delete_range)
  if (_internal_has_delete_range()) {
    clear_has_operation();
    ::content::LevelDBScopesKeyRange* temp = operation_.delete_range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_.delete_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::content::LevelDBScopesKeyRange& LevelDBScopesCleanupTask::_internal_delete_range() const {
  return _internal_has_delete_range()
      ? *operation_.delete_range_
      : reinterpret_cast< ::content::LevelDBScopesKeyRange&>(::content::_LevelDBScopesKeyRange_default_instance_);
}
inline const ::content::LevelDBScopesKeyRange& LevelDBScopesCleanupTask::delete_range() const {
  // @@protoc_insertion_point(field_get:content.LevelDBScopesCleanupTask.delete_range)
  return _internal_delete_range();
}
inline ::content::LevelDBScopesKeyRange* LevelDBScopesCleanupTask::unsafe_arena_release_delete_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:content.LevelDBScopesCleanupTask.delete_range)
  if (_internal_has_delete_range()) {
    clear_has_operation();
    ::content::LevelDBScopesKeyRange* temp = operation_.delete_range_;
    operation_.delete_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LevelDBScopesCleanupTask::unsafe_arena_set_allocated_delete_range(::content::LevelDBScopesKeyRange* delete_range) {
  clear_operation();
  if (delete_range) {
    set_has_delete_range();
    operation_.delete_range_ = delete_range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content.LevelDBScopesCleanupTask.delete_range)
}
inline ::content::LevelDBScopesKeyRange* LevelDBScopesCleanupTask::_internal_mutable_delete_range() {
  if (!_internal_has_delete_range()) {
    clear_operation();
    set_has_delete_range();
    operation_.delete_range_ = CreateMaybeMessage< ::content::LevelDBScopesKeyRange >(GetArenaForAllocation());
  }
  return operation_.delete_range_;
}
inline ::content::LevelDBScopesKeyRange* LevelDBScopesCleanupTask::mutable_delete_range() {
  ::content::LevelDBScopesKeyRange* _msg = _internal_mutable_delete_range();
  // @@protoc_insertion_point(field_mutable:content.LevelDBScopesCleanupTask.delete_range)
  return _msg;
}

// .content.LevelDBScopesKeyRange delete_range_and_compact = 2;
inline bool LevelDBScopesCleanupTask::_internal_has_delete_range_and_compact() const {
  return operation_case() == kDeleteRangeAndCompact;
}
inline bool LevelDBScopesCleanupTask::has_delete_range_and_compact() const {
  return _internal_has_delete_range_and_compact();
}
inline void LevelDBScopesCleanupTask::set_has_delete_range_and_compact() {
  _oneof_case_[0] = kDeleteRangeAndCompact;
}
inline void LevelDBScopesCleanupTask::clear_delete_range_and_compact() {
  if (_internal_has_delete_range_and_compact()) {
    if (GetArenaForAllocation() == nullptr) {
      delete operation_.delete_range_and_compact_;
    }
    clear_has_operation();
  }
}
inline ::content::LevelDBScopesKeyRange* LevelDBScopesCleanupTask::release_delete_range_and_compact() {
  // @@protoc_insertion_point(field_release:content.LevelDBScopesCleanupTask.delete_range_and_compact)
  if (_internal_has_delete_range_and_compact()) {
    clear_has_operation();
    ::content::LevelDBScopesKeyRange* temp = operation_.delete_range_and_compact_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_.delete_range_and_compact_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::content::LevelDBScopesKeyRange& LevelDBScopesCleanupTask::_internal_delete_range_and_compact() const {
  return _internal_has_delete_range_and_compact()
      ? *operation_.delete_range_and_compact_
      : reinterpret_cast< ::content::LevelDBScopesKeyRange&>(::content::_LevelDBScopesKeyRange_default_instance_);
}
inline const ::content::LevelDBScopesKeyRange& LevelDBScopesCleanupTask::delete_range_and_compact() const {
  // @@protoc_insertion_point(field_get:content.LevelDBScopesCleanupTask.delete_range_and_compact)
  return _internal_delete_range_and_compact();
}
inline ::content::LevelDBScopesKeyRange* LevelDBScopesCleanupTask::unsafe_arena_release_delete_range_and_compact() {
  // @@protoc_insertion_point(field_unsafe_arena_release:content.LevelDBScopesCleanupTask.delete_range_and_compact)
  if (_internal_has_delete_range_and_compact()) {
    clear_has_operation();
    ::content::LevelDBScopesKeyRange* temp = operation_.delete_range_and_compact_;
    operation_.delete_range_and_compact_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LevelDBScopesCleanupTask::unsafe_arena_set_allocated_delete_range_and_compact(::content::LevelDBScopesKeyRange* delete_range_and_compact) {
  clear_operation();
  if (delete_range_and_compact) {
    set_has_delete_range_and_compact();
    operation_.delete_range_and_compact_ = delete_range_and_compact;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content.LevelDBScopesCleanupTask.delete_range_and_compact)
}
inline ::content::LevelDBScopesKeyRange* LevelDBScopesCleanupTask::_internal_mutable_delete_range_and_compact() {
  if (!_internal_has_delete_range_and_compact()) {
    clear_operation();
    set_has_delete_range_and_compact();
    operation_.delete_range_and_compact_ = CreateMaybeMessage< ::content::LevelDBScopesKeyRange >(GetArenaForAllocation());
  }
  return operation_.delete_range_and_compact_;
}
inline ::content::LevelDBScopesKeyRange* LevelDBScopesCleanupTask::mutable_delete_range_and_compact() {
  ::content::LevelDBScopesKeyRange* _msg = _internal_mutable_delete_range_and_compact();
  // @@protoc_insertion_point(field_mutable:content.LevelDBScopesCleanupTask.delete_range_and_compact)
  return _msg;
}

inline bool LevelDBScopesCleanupTask::has_operation() const {
  return operation_case() != OPERATION_NOT_SET;
}
inline void LevelDBScopesCleanupTask::clear_has_operation() {
  _oneof_case_[0] = OPERATION_NOT_SET;
}
inline LevelDBScopesCleanupTask::OperationCase LevelDBScopesCleanupTask::operation_case() const {
  return LevelDBScopesCleanupTask::OperationCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace content

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scopes_5fmetadata_2eproto
