// components/services/patch/public/mojom/file_patcher.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_PATCH_PUBLIC_MOJOM_FILE_PATCHER_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_SERVICES_PATCH_PUBLIC_MOJOM_FILE_PATCHER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace patch {
namespace mojom {
namespace internal {

class ValidationContext;
class  FilePatcher_PatchFileBsdiff_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlyFile_Data> input_file;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlyFile_Data> patch_file;
  mojo::internal::Pointer<::mojo_base::mojom::internal::File_Data> output_file;

 private:
  friend class mojo::internal::MessageFragment<FilePatcher_PatchFileBsdiff_Params_Data>;

  FilePatcher_PatchFileBsdiff_Params_Data();
  ~FilePatcher_PatchFileBsdiff_Params_Data() = delete;
};
static_assert(sizeof(FilePatcher_PatchFileBsdiff_Params_Data) == 32,
              "Bad sizeof(FilePatcher_PatchFileBsdiff_Params_Data)");
class  FilePatcher_PatchFileBsdiff_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FilePatcher_PatchFileBsdiff_ResponseParams_Data>;

  FilePatcher_PatchFileBsdiff_ResponseParams_Data();
  ~FilePatcher_PatchFileBsdiff_ResponseParams_Data() = delete;
};
static_assert(sizeof(FilePatcher_PatchFileBsdiff_ResponseParams_Data) == 16,
              "Bad sizeof(FilePatcher_PatchFileBsdiff_ResponseParams_Data)");
class  FilePatcher_PatchFileCourgette_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlyFile_Data> input_file;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlyFile_Data> patch_file;
  mojo::internal::Pointer<::mojo_base::mojom::internal::File_Data> output_file;

 private:
  friend class mojo::internal::MessageFragment<FilePatcher_PatchFileCourgette_Params_Data>;

  FilePatcher_PatchFileCourgette_Params_Data();
  ~FilePatcher_PatchFileCourgette_Params_Data() = delete;
};
static_assert(sizeof(FilePatcher_PatchFileCourgette_Params_Data) == 32,
              "Bad sizeof(FilePatcher_PatchFileCourgette_Params_Data)");
class  FilePatcher_PatchFileCourgette_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FilePatcher_PatchFileCourgette_ResponseParams_Data>;

  FilePatcher_PatchFileCourgette_ResponseParams_Data();
  ~FilePatcher_PatchFileCourgette_ResponseParams_Data() = delete;
};
static_assert(sizeof(FilePatcher_PatchFileCourgette_ResponseParams_Data) == 16,
              "Bad sizeof(FilePatcher_PatchFileCourgette_ResponseParams_Data)");
class  FilePatcher_PatchFilePuffPatch_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlyFile_Data> input_file;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlyFile_Data> patch_file;
  mojo::internal::Pointer<::mojo_base::mojom::internal::File_Data> output_file;

 private:
  friend class mojo::internal::MessageFragment<FilePatcher_PatchFilePuffPatch_Params_Data>;

  FilePatcher_PatchFilePuffPatch_Params_Data();
  ~FilePatcher_PatchFilePuffPatch_Params_Data() = delete;
};
static_assert(sizeof(FilePatcher_PatchFilePuffPatch_Params_Data) == 32,
              "Bad sizeof(FilePatcher_PatchFilePuffPatch_Params_Data)");
class  FilePatcher_PatchFilePuffPatch_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FilePatcher_PatchFilePuffPatch_ResponseParams_Data>;

  FilePatcher_PatchFilePuffPatch_ResponseParams_Data();
  ~FilePatcher_PatchFilePuffPatch_ResponseParams_Data() = delete;
};
static_assert(sizeof(FilePatcher_PatchFilePuffPatch_ResponseParams_Data) == 16,
              "Bad sizeof(FilePatcher_PatchFilePuffPatch_ResponseParams_Data)");

}  // namespace internal


class FilePatcher_PatchFileBsdiff_ParamsDataView {
 public:
  FilePatcher_PatchFileBsdiff_ParamsDataView() = default;

  FilePatcher_PatchFileBsdiff_ParamsDataView(
      internal::FilePatcher_PatchFileBsdiff_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetInputFileDataView(
      ::mojo_base::mojom::ReadOnlyFileDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInputFile(UserType* output) {
    
    auto* pointer = data_->input_file.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlyFileDataView>(
        pointer, output, message_);
  }
  inline void GetPatchFileDataView(
      ::mojo_base::mojom::ReadOnlyFileDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPatchFile(UserType* output) {
    
    auto* pointer = data_->patch_file.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlyFileDataView>(
        pointer, output, message_);
  }
  inline void GetOutputFileDataView(
      ::mojo_base::mojom::FileDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOutputFile(UserType* output) {
    
    auto* pointer = data_->output_file.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FileDataView>(
        pointer, output, message_);
  }
 private:
  internal::FilePatcher_PatchFileBsdiff_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FilePatcher_PatchFileBsdiff_ResponseParamsDataView {
 public:
  FilePatcher_PatchFileBsdiff_ResponseParamsDataView() = default;

  FilePatcher_PatchFileBsdiff_ResponseParamsDataView(
      internal::FilePatcher_PatchFileBsdiff_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t result() const {
    return data_->result;
  }
 private:
  internal::FilePatcher_PatchFileBsdiff_ResponseParams_Data* data_ = nullptr;
};



class FilePatcher_PatchFileCourgette_ParamsDataView {
 public:
  FilePatcher_PatchFileCourgette_ParamsDataView() = default;

  FilePatcher_PatchFileCourgette_ParamsDataView(
      internal::FilePatcher_PatchFileCourgette_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetInputFileDataView(
      ::mojo_base::mojom::ReadOnlyFileDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInputFile(UserType* output) {
    
    auto* pointer = data_->input_file.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlyFileDataView>(
        pointer, output, message_);
  }
  inline void GetPatchFileDataView(
      ::mojo_base::mojom::ReadOnlyFileDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPatchFile(UserType* output) {
    
    auto* pointer = data_->patch_file.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlyFileDataView>(
        pointer, output, message_);
  }
  inline void GetOutputFileDataView(
      ::mojo_base::mojom::FileDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOutputFile(UserType* output) {
    
    auto* pointer = data_->output_file.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FileDataView>(
        pointer, output, message_);
  }
 private:
  internal::FilePatcher_PatchFileCourgette_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FilePatcher_PatchFileCourgette_ResponseParamsDataView {
 public:
  FilePatcher_PatchFileCourgette_ResponseParamsDataView() = default;

  FilePatcher_PatchFileCourgette_ResponseParamsDataView(
      internal::FilePatcher_PatchFileCourgette_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t result() const {
    return data_->result;
  }
 private:
  internal::FilePatcher_PatchFileCourgette_ResponseParams_Data* data_ = nullptr;
};



class FilePatcher_PatchFilePuffPatch_ParamsDataView {
 public:
  FilePatcher_PatchFilePuffPatch_ParamsDataView() = default;

  FilePatcher_PatchFilePuffPatch_ParamsDataView(
      internal::FilePatcher_PatchFilePuffPatch_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetInputFileDataView(
      ::mojo_base::mojom::ReadOnlyFileDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInputFile(UserType* output) {
    
    auto* pointer = data_->input_file.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlyFileDataView>(
        pointer, output, message_);
  }
  inline void GetPatchFileDataView(
      ::mojo_base::mojom::ReadOnlyFileDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPatchFile(UserType* output) {
    
    auto* pointer = data_->patch_file.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlyFileDataView>(
        pointer, output, message_);
  }
  inline void GetOutputFileDataView(
      ::mojo_base::mojom::FileDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOutputFile(UserType* output) {
    
    auto* pointer = data_->output_file.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FileDataView>(
        pointer, output, message_);
  }
 private:
  internal::FilePatcher_PatchFilePuffPatch_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FilePatcher_PatchFilePuffPatch_ResponseParamsDataView {
 public:
  FilePatcher_PatchFilePuffPatch_ResponseParamsDataView() = default;

  FilePatcher_PatchFilePuffPatch_ResponseParamsDataView(
      internal::FilePatcher_PatchFilePuffPatch_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t result() const {
    return data_->result;
  }
 private:
  internal::FilePatcher_PatchFilePuffPatch_ResponseParams_Data* data_ = nullptr;
};


inline void FilePatcher_PatchFileBsdiff_ParamsDataView::GetInputFileDataView(
    ::mojo_base::mojom::ReadOnlyFileDataView* output) {
  auto pointer = data_->input_file.Get();
  *output = ::mojo_base::mojom::ReadOnlyFileDataView(pointer, message_);
}
inline void FilePatcher_PatchFileBsdiff_ParamsDataView::GetPatchFileDataView(
    ::mojo_base::mojom::ReadOnlyFileDataView* output) {
  auto pointer = data_->patch_file.Get();
  *output = ::mojo_base::mojom::ReadOnlyFileDataView(pointer, message_);
}
inline void FilePatcher_PatchFileBsdiff_ParamsDataView::GetOutputFileDataView(
    ::mojo_base::mojom::FileDataView* output) {
  auto pointer = data_->output_file.Get();
  *output = ::mojo_base::mojom::FileDataView(pointer, message_);
}




inline void FilePatcher_PatchFileCourgette_ParamsDataView::GetInputFileDataView(
    ::mojo_base::mojom::ReadOnlyFileDataView* output) {
  auto pointer = data_->input_file.Get();
  *output = ::mojo_base::mojom::ReadOnlyFileDataView(pointer, message_);
}
inline void FilePatcher_PatchFileCourgette_ParamsDataView::GetPatchFileDataView(
    ::mojo_base::mojom::ReadOnlyFileDataView* output) {
  auto pointer = data_->patch_file.Get();
  *output = ::mojo_base::mojom::ReadOnlyFileDataView(pointer, message_);
}
inline void FilePatcher_PatchFileCourgette_ParamsDataView::GetOutputFileDataView(
    ::mojo_base::mojom::FileDataView* output) {
  auto pointer = data_->output_file.Get();
  *output = ::mojo_base::mojom::FileDataView(pointer, message_);
}




inline void FilePatcher_PatchFilePuffPatch_ParamsDataView::GetInputFileDataView(
    ::mojo_base::mojom::ReadOnlyFileDataView* output) {
  auto pointer = data_->input_file.Get();
  *output = ::mojo_base::mojom::ReadOnlyFileDataView(pointer, message_);
}
inline void FilePatcher_PatchFilePuffPatch_ParamsDataView::GetPatchFileDataView(
    ::mojo_base::mojom::ReadOnlyFileDataView* output) {
  auto pointer = data_->patch_file.Get();
  *output = ::mojo_base::mojom::ReadOnlyFileDataView(pointer, message_);
}
inline void FilePatcher_PatchFilePuffPatch_ParamsDataView::GetOutputFileDataView(
    ::mojo_base::mojom::FileDataView* output) {
  auto pointer = data_->output_file.Get();
  *output = ::mojo_base::mojom::FileDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace patch

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_SERVICES_PATCH_PUBLIC_MOJOM_FILE_PATCHER_MOJOM_PARAMS_DATA_H_