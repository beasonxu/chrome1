// components/services/screen_ai/public/mojom/screen_ai_service.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "components/services/screen_ai/public/mojom/screen_ai_service.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/services/screen_ai/public/mojom/screen_ai_service.mojom-params-data.h"
#include "components/services/screen_ai/public/mojom/screen_ai_service.mojom-shared-message-ids.h"

#include "components/services/screen_ai/public/mojom/screen_ai_service.mojom-import-headers.h"
#include "components/services/screen_ai/public/mojom/screen_ai_service.mojom-test-utils.h"


#ifndef COMPONENTS_SERVICES_SCREEN_AI_PUBLIC_MOJOM_SCREEN_AI_SERVICE_MOJOM_JUMBO_H_
#define COMPONENTS_SERVICES_SCREEN_AI_PUBLIC_MOJOM_SCREEN_AI_SERVICE_MOJOM_JUMBO_H_
#endif



namespace screen_ai {
namespace mojom {
const char ScreenAIAnnotator::Name_[] = "screen_ai.mojom.ScreenAIAnnotator";

ScreenAIAnnotator::IPCStableHashFunction ScreenAIAnnotator::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kScreenAIAnnotator_Annotate_Name: {
      return &ScreenAIAnnotator::Annotate_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* ScreenAIAnnotator::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kScreenAIAnnotator_Annotate_Name:
            return "Receive screen_ai::mojom::ScreenAIAnnotator::Annotate";
    }
  } else {
    switch (message.name()) {
      case internal::kScreenAIAnnotator_Annotate_Name:
            return "Receive reply screen_ai::mojom::ScreenAIAnnotator::Annotate";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t ScreenAIAnnotator::Annotate_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)screen_ai::mojom::ScreenAIAnnotator::Annotate");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class ScreenAIAnnotator_Annotate_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ScreenAIAnnotator_Annotate_ForwardToCallback(
      ScreenAIAnnotator::AnnotateCallback callback
      ) : callback_(std::move(callback)) {
  }

  ScreenAIAnnotator_Annotate_ForwardToCallback(const ScreenAIAnnotator_Annotate_ForwardToCallback&) = delete;
  ScreenAIAnnotator_Annotate_ForwardToCallback& operator=(const ScreenAIAnnotator_Annotate_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  ScreenAIAnnotator::AnnotateCallback callback_;
};

ScreenAIAnnotatorProxy::ScreenAIAnnotatorProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void ScreenAIAnnotatorProxy::Annotate(
    const ::SkBitmap& in_image, AnnotateCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send screen_ai::mojom::ScreenAIAnnotator::Annotate", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("image"), in_image,
                        "<value of type const ::SkBitmap&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kScreenAIAnnotator_Annotate_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::screen_ai::mojom::internal::ScreenAIAnnotator_Annotate_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->image)::BaseType> image_fragment(
          params.message());
  mojo::internal::Serialize<::skia::mojom::BitmapN32DataView>(
      in_image, image_fragment);
  params->image.Set(
      image_fragment.is_null() ? nullptr : image_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->image.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null image in ScreenAIAnnotator.Annotate request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ScreenAIAnnotator::Name_);
  message.set_method_name("Annotate");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new ScreenAIAnnotator_Annotate_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class ScreenAIAnnotator_Annotate_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static ScreenAIAnnotator::AnnotateCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<ScreenAIAnnotator_Annotate_ProxyToResponder> proxy(
        new ScreenAIAnnotator_Annotate_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&ScreenAIAnnotator_Annotate_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~ScreenAIAnnotator_Annotate_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  ScreenAIAnnotator_Annotate_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "ScreenAIAnnotator::AnnotateCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const ::ui::AXTreeUpdate& in_updates);
};

bool ScreenAIAnnotator_Annotate_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::ScreenAIAnnotator_Annotate_ResponseParams_Data* params =
      reinterpret_cast<
          internal::ScreenAIAnnotator_Annotate_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ::ui::AXTreeUpdate p_updates{};
  ScreenAIAnnotator_Annotate_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadUpdates(&p_updates))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        ScreenAIAnnotator::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_updates));
  return true;
}

void ScreenAIAnnotator_Annotate_ProxyToResponder::Run(
    const ::ui::AXTreeUpdate& in_updates) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply screen_ai::mojom::ScreenAIAnnotator::Annotate", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("updates"), in_updates,
                        "<value of type const ::ui::AXTreeUpdate&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kScreenAIAnnotator_Annotate_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::screen_ai::mojom::internal::ScreenAIAnnotator_Annotate_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->updates)::BaseType> updates_fragment(
          params.message());
  mojo::internal::Serialize<::ax::mojom::AXTreeUpdateDataView>(
      in_updates, updates_fragment);
  params->updates.Set(
      updates_fragment.is_null() ? nullptr : updates_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->updates.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null updates in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ScreenAIAnnotator::Name_);
  message.set_method_name("Annotate");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool ScreenAIAnnotatorStubDispatch::Accept(
    ScreenAIAnnotator* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kScreenAIAnnotator_Annotate_Name: {
      break;
    }
  }
  return false;
}

// static
bool ScreenAIAnnotatorStubDispatch::AcceptWithResponder(
    ScreenAIAnnotator* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kScreenAIAnnotator_Annotate_Name: {

      internal::ScreenAIAnnotator_Annotate_Params_Data* params =
          reinterpret_cast<
              internal::ScreenAIAnnotator_Annotate_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::SkBitmap p_image{};
      ScreenAIAnnotator_Annotate_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadImage(&p_image))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ScreenAIAnnotator::Name_, 0, false);
        return false;
      }
      ScreenAIAnnotator::AnnotateCallback callback =
          ScreenAIAnnotator_Annotate_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Annotate(
std::move(p_image), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kScreenAIAnnotatorValidationInfo[] = {
    {&internal::ScreenAIAnnotator_Annotate_Params_Data::Validate,
     &internal::ScreenAIAnnotator_Annotate_ResponseParams_Data::Validate},
};

bool ScreenAIAnnotatorRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::screen_ai::mojom::ScreenAIAnnotator::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kScreenAIAnnotatorValidationInfo);
}

bool ScreenAIAnnotatorResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::screen_ai::mojom::ScreenAIAnnotator::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kScreenAIAnnotatorValidationInfo);
}
const char Screen2xMainContentExtractor::Name_[] = "screen_ai.mojom.Screen2xMainContentExtractor";

Screen2xMainContentExtractor::IPCStableHashFunction Screen2xMainContentExtractor::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kScreen2xMainContentExtractor_ExtractMainContent_Name: {
      return &Screen2xMainContentExtractor::ExtractMainContent_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* Screen2xMainContentExtractor::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kScreen2xMainContentExtractor_ExtractMainContent_Name:
            return "Receive screen_ai::mojom::Screen2xMainContentExtractor::ExtractMainContent";
    }
  } else {
    switch (message.name()) {
      case internal::kScreen2xMainContentExtractor_ExtractMainContent_Name:
            return "Receive reply screen_ai::mojom::Screen2xMainContentExtractor::ExtractMainContent";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t Screen2xMainContentExtractor::ExtractMainContent_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)screen_ai::mojom::Screen2xMainContentExtractor::ExtractMainContent");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class Screen2xMainContentExtractor_ExtractMainContent_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Screen2xMainContentExtractor_ExtractMainContent_ForwardToCallback(
      Screen2xMainContentExtractor::ExtractMainContentCallback callback
      ) : callback_(std::move(callback)) {
  }

  Screen2xMainContentExtractor_ExtractMainContent_ForwardToCallback(const Screen2xMainContentExtractor_ExtractMainContent_ForwardToCallback&) = delete;
  Screen2xMainContentExtractor_ExtractMainContent_ForwardToCallback& operator=(const Screen2xMainContentExtractor_ExtractMainContent_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  Screen2xMainContentExtractor::ExtractMainContentCallback callback_;
};

Screen2xMainContentExtractorProxy::Screen2xMainContentExtractorProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void Screen2xMainContentExtractorProxy::ExtractMainContent(
    const ::ui::AXTreeUpdate& in_snapshot, ExtractMainContentCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send screen_ai::mojom::Screen2xMainContentExtractor::ExtractMainContent", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("snapshot"), in_snapshot,
                        "<value of type const ::ui::AXTreeUpdate&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kScreen2xMainContentExtractor_ExtractMainContent_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::screen_ai::mojom::internal::Screen2xMainContentExtractor_ExtractMainContent_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->snapshot)::BaseType> snapshot_fragment(
          params.message());
  mojo::internal::Serialize<::ax::mojom::AXTreeUpdateDataView>(
      in_snapshot, snapshot_fragment);
  params->snapshot.Set(
      snapshot_fragment.is_null() ? nullptr : snapshot_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->snapshot.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null snapshot in Screen2xMainContentExtractor.ExtractMainContent request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Screen2xMainContentExtractor::Name_);
  message.set_method_name("ExtractMainContent");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new Screen2xMainContentExtractor_ExtractMainContent_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class Screen2xMainContentExtractor_ExtractMainContent_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static Screen2xMainContentExtractor::ExtractMainContentCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<Screen2xMainContentExtractor_ExtractMainContent_ProxyToResponder> proxy(
        new Screen2xMainContentExtractor_ExtractMainContent_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&Screen2xMainContentExtractor_ExtractMainContent_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~Screen2xMainContentExtractor_ExtractMainContent_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  Screen2xMainContentExtractor_ExtractMainContent_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "Screen2xMainContentExtractor::ExtractMainContentCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const std::vector<int32_t>& in_content_node_ids);
};

bool Screen2xMainContentExtractor_ExtractMainContent_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::Screen2xMainContentExtractor_ExtractMainContent_ResponseParams_Data* params =
      reinterpret_cast<
          internal::Screen2xMainContentExtractor_ExtractMainContent_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::vector<int32_t> p_content_node_ids{};
  Screen2xMainContentExtractor_ExtractMainContent_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadContentNodeIds(&p_content_node_ids))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        Screen2xMainContentExtractor::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_content_node_ids));
  return true;
}

void Screen2xMainContentExtractor_ExtractMainContent_ProxyToResponder::Run(
    const std::vector<int32_t>& in_content_node_ids) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply screen_ai::mojom::Screen2xMainContentExtractor::ExtractMainContent", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("content_node_ids"), in_content_node_ids,
                        "<value of type const std::vector<int32_t>&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kScreen2xMainContentExtractor_ExtractMainContent_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::screen_ai::mojom::internal::Screen2xMainContentExtractor_ExtractMainContent_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->content_node_ids)::BaseType>
      content_node_ids_fragment(params.message());
  const mojo::internal::ContainerValidateParams content_node_ids_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<int32_t>>(
      in_content_node_ids, content_node_ids_fragment, &content_node_ids_validate_params);
  params->content_node_ids.Set(
      content_node_ids_fragment.is_null() ? nullptr : content_node_ids_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->content_node_ids.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null content_node_ids in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Screen2xMainContentExtractor::Name_);
  message.set_method_name("ExtractMainContent");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool Screen2xMainContentExtractorStubDispatch::Accept(
    Screen2xMainContentExtractor* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kScreen2xMainContentExtractor_ExtractMainContent_Name: {
      break;
    }
  }
  return false;
}

// static
bool Screen2xMainContentExtractorStubDispatch::AcceptWithResponder(
    Screen2xMainContentExtractor* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kScreen2xMainContentExtractor_ExtractMainContent_Name: {

      internal::Screen2xMainContentExtractor_ExtractMainContent_Params_Data* params =
          reinterpret_cast<
              internal::Screen2xMainContentExtractor_ExtractMainContent_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::ui::AXTreeUpdate p_snapshot{};
      Screen2xMainContentExtractor_ExtractMainContent_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadSnapshot(&p_snapshot))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Screen2xMainContentExtractor::Name_, 0, false);
        return false;
      }
      Screen2xMainContentExtractor::ExtractMainContentCallback callback =
          Screen2xMainContentExtractor_ExtractMainContent_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ExtractMainContent(
std::move(p_snapshot), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kScreen2xMainContentExtractorValidationInfo[] = {
    {&internal::Screen2xMainContentExtractor_ExtractMainContent_Params_Data::Validate,
     &internal::Screen2xMainContentExtractor_ExtractMainContent_ResponseParams_Data::Validate},
};

bool Screen2xMainContentExtractorRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::screen_ai::mojom::Screen2xMainContentExtractor::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kScreen2xMainContentExtractorValidationInfo);
}

bool Screen2xMainContentExtractorResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::screen_ai::mojom::Screen2xMainContentExtractor::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kScreen2xMainContentExtractorValidationInfo);
}
const char ScreenAIService::Name_[] = "screen_ai.mojom.ScreenAIService";

ScreenAIService::IPCStableHashFunction ScreenAIService::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kScreenAIService_BindAnnotator_Name: {
      return &ScreenAIService::BindAnnotator_Sym::IPCStableHash;
    }
    case internal::kScreenAIService_BindMainContentExtractor_Name: {
      return &ScreenAIService::BindMainContentExtractor_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* ScreenAIService::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kScreenAIService_BindAnnotator_Name:
            return "Receive screen_ai::mojom::ScreenAIService::BindAnnotator";
      case internal::kScreenAIService_BindMainContentExtractor_Name:
            return "Receive screen_ai::mojom::ScreenAIService::BindMainContentExtractor";
    }
  } else {
    switch (message.name()) {
      case internal::kScreenAIService_BindAnnotator_Name:
            return "Receive reply screen_ai::mojom::ScreenAIService::BindAnnotator";
      case internal::kScreenAIService_BindMainContentExtractor_Name:
            return "Receive reply screen_ai::mojom::ScreenAIService::BindMainContentExtractor";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t ScreenAIService::BindAnnotator_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)screen_ai::mojom::ScreenAIService::BindAnnotator");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t ScreenAIService::BindMainContentExtractor_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)screen_ai::mojom::ScreenAIService::BindMainContentExtractor");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

ScreenAIServiceProxy::ScreenAIServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void ScreenAIServiceProxy::BindAnnotator(
    ::mojo::PendingReceiver<ScreenAIAnnotator> in_annotator) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send screen_ai::mojom::ScreenAIService::BindAnnotator", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("annotator"), in_annotator,
                        "<value of type ::mojo::PendingReceiver<ScreenAIAnnotator>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kScreenAIService_BindAnnotator_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::screen_ai::mojom::internal::ScreenAIService_BindAnnotator_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::screen_ai::mojom::ScreenAIAnnotatorInterfaceBase>>(
      in_annotator, &params->annotator, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->annotator),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid annotator in ScreenAIService.BindAnnotator request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ScreenAIService::Name_);
  message.set_method_name("BindAnnotator");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void ScreenAIServiceProxy::BindMainContentExtractor(
    ::mojo::PendingReceiver<Screen2xMainContentExtractor> in_main_content_extractor) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send screen_ai::mojom::ScreenAIService::BindMainContentExtractor", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("main_content_extractor"), in_main_content_extractor,
                        "<value of type ::mojo::PendingReceiver<Screen2xMainContentExtractor>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kScreenAIService_BindMainContentExtractor_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::screen_ai::mojom::internal::ScreenAIService_BindMainContentExtractor_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::screen_ai::mojom::Screen2xMainContentExtractorInterfaceBase>>(
      in_main_content_extractor, &params->main_content_extractor, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->main_content_extractor),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid main_content_extractor in ScreenAIService.BindMainContentExtractor request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ScreenAIService::Name_);
  message.set_method_name("BindMainContentExtractor");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool ScreenAIServiceStubDispatch::Accept(
    ScreenAIService* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kScreenAIService_BindAnnotator_Name: {

      DCHECK(message->is_serialized());
      internal::ScreenAIService_BindAnnotator_Params_Data* params =
          reinterpret_cast<internal::ScreenAIService_BindAnnotator_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<ScreenAIAnnotator> p_annotator{};
      ScreenAIService_BindAnnotator_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_annotator =
            input_data_view.TakeAnnotator<decltype(p_annotator)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ScreenAIService::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindAnnotator(
std::move(p_annotator));
      return true;
    }
    case internal::kScreenAIService_BindMainContentExtractor_Name: {

      DCHECK(message->is_serialized());
      internal::ScreenAIService_BindMainContentExtractor_Params_Data* params =
          reinterpret_cast<internal::ScreenAIService_BindMainContentExtractor_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<Screen2xMainContentExtractor> p_main_content_extractor{};
      ScreenAIService_BindMainContentExtractor_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_main_content_extractor =
            input_data_view.TakeMainContentExtractor<decltype(p_main_content_extractor)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ScreenAIService::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindMainContentExtractor(
std::move(p_main_content_extractor));
      return true;
    }
  }
  return false;
}

// static
bool ScreenAIServiceStubDispatch::AcceptWithResponder(
    ScreenAIService* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kScreenAIService_BindAnnotator_Name: {
      break;
    }
    case internal::kScreenAIService_BindMainContentExtractor_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kScreenAIServiceValidationInfo[] = {
    {&internal::ScreenAIService_BindAnnotator_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::ScreenAIService_BindMainContentExtractor_Params_Data::Validate,
     nullptr /* no response */},
};

bool ScreenAIServiceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::screen_ai::mojom::ScreenAIService::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kScreenAIServiceValidationInfo);
}



}  // namespace mojom
}  // namespace screen_ai


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace screen_ai {
namespace mojom {


void ScreenAIAnnotatorInterceptorForTesting::Annotate(const ::SkBitmap& image, AnnotateCallback callback) {
  GetForwardingInterface()->Annotate(std::move(image), std::move(callback));
}
ScreenAIAnnotatorAsyncWaiter::ScreenAIAnnotatorAsyncWaiter(
    ScreenAIAnnotator* proxy) : proxy_(proxy) {}

ScreenAIAnnotatorAsyncWaiter::~ScreenAIAnnotatorAsyncWaiter() = default;

void ScreenAIAnnotatorAsyncWaiter::Annotate(
    const ::SkBitmap& image, ::ui::AXTreeUpdate* out_updates) {
  base::RunLoop loop;
  proxy_->Annotate(std::move(image),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::ui::AXTreeUpdate* out_updates
,
             const ::ui::AXTreeUpdate& updates) {*out_updates = std::move(updates);
            loop->Quit();
          },
          &loop,
          out_updates));
  loop.Run();
}



void Screen2xMainContentExtractorInterceptorForTesting::ExtractMainContent(const ::ui::AXTreeUpdate& snapshot, ExtractMainContentCallback callback) {
  GetForwardingInterface()->ExtractMainContent(std::move(snapshot), std::move(callback));
}
Screen2xMainContentExtractorAsyncWaiter::Screen2xMainContentExtractorAsyncWaiter(
    Screen2xMainContentExtractor* proxy) : proxy_(proxy) {}

Screen2xMainContentExtractorAsyncWaiter::~Screen2xMainContentExtractorAsyncWaiter() = default;

void Screen2xMainContentExtractorAsyncWaiter::ExtractMainContent(
    const ::ui::AXTreeUpdate& snapshot, std::vector<int32_t>* out_content_node_ids) {
  base::RunLoop loop;
  proxy_->ExtractMainContent(std::move(snapshot),
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<int32_t>* out_content_node_ids
,
             const std::vector<int32_t>& content_node_ids) {*out_content_node_ids = std::move(content_node_ids);
            loop->Quit();
          },
          &loop,
          out_content_node_ids));
  loop.Run();
}



void ScreenAIServiceInterceptorForTesting::BindAnnotator(::mojo::PendingReceiver<ScreenAIAnnotator> annotator) {
  GetForwardingInterface()->BindAnnotator(std::move(annotator));
}
void ScreenAIServiceInterceptorForTesting::BindMainContentExtractor(::mojo::PendingReceiver<Screen2xMainContentExtractor> main_content_extractor) {
  GetForwardingInterface()->BindMainContentExtractor(std::move(main_content_extractor));
}
ScreenAIServiceAsyncWaiter::ScreenAIServiceAsyncWaiter(
    ScreenAIService* proxy) : proxy_(proxy) {}

ScreenAIServiceAsyncWaiter::~ScreenAIServiceAsyncWaiter() = default;






}  // namespace mojom
}  // namespace screen_ai


#if defined(__clang__)
#pragma clang diagnostic pop
#endif