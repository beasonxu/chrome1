// components/services/screen_ai/public/mojom/screen_ai_service.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_SCREEN_AI_PUBLIC_MOJOM_SCREEN_AI_SERVICE_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_SERVICES_SCREEN_AI_PUBLIC_MOJOM_SCREEN_AI_SERVICE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace screen_ai {
namespace mojom {
namespace internal {

class ValidationContext;
class  ScreenAIAnnotator_Annotate_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::skia::mojom::internal::BitmapN32_Data> image;

 private:
  friend class mojo::internal::MessageFragment<ScreenAIAnnotator_Annotate_Params_Data>;

  ScreenAIAnnotator_Annotate_Params_Data();
  ~ScreenAIAnnotator_Annotate_Params_Data() = delete;
};
static_assert(sizeof(ScreenAIAnnotator_Annotate_Params_Data) == 16,
              "Bad sizeof(ScreenAIAnnotator_Annotate_Params_Data)");
class  ScreenAIAnnotator_Annotate_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::ax::mojom::internal::AXTreeUpdate_Data> updates;

 private:
  friend class mojo::internal::MessageFragment<ScreenAIAnnotator_Annotate_ResponseParams_Data>;

  ScreenAIAnnotator_Annotate_ResponseParams_Data();
  ~ScreenAIAnnotator_Annotate_ResponseParams_Data() = delete;
};
static_assert(sizeof(ScreenAIAnnotator_Annotate_ResponseParams_Data) == 16,
              "Bad sizeof(ScreenAIAnnotator_Annotate_ResponseParams_Data)");
class  Screen2xMainContentExtractor_ExtractMainContent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::ax::mojom::internal::AXTreeUpdate_Data> snapshot;

 private:
  friend class mojo::internal::MessageFragment<Screen2xMainContentExtractor_ExtractMainContent_Params_Data>;

  Screen2xMainContentExtractor_ExtractMainContent_Params_Data();
  ~Screen2xMainContentExtractor_ExtractMainContent_Params_Data() = delete;
};
static_assert(sizeof(Screen2xMainContentExtractor_ExtractMainContent_Params_Data) == 16,
              "Bad sizeof(Screen2xMainContentExtractor_ExtractMainContent_Params_Data)");
class  Screen2xMainContentExtractor_ExtractMainContent_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> content_node_ids;

 private:
  friend class mojo::internal::MessageFragment<Screen2xMainContentExtractor_ExtractMainContent_ResponseParams_Data>;

  Screen2xMainContentExtractor_ExtractMainContent_ResponseParams_Data();
  ~Screen2xMainContentExtractor_ExtractMainContent_ResponseParams_Data() = delete;
};
static_assert(sizeof(Screen2xMainContentExtractor_ExtractMainContent_ResponseParams_Data) == 16,
              "Bad sizeof(Screen2xMainContentExtractor_ExtractMainContent_ResponseParams_Data)");
class  ScreenAIService_BindAnnotator_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data annotator;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ScreenAIService_BindAnnotator_Params_Data>;

  ScreenAIService_BindAnnotator_Params_Data();
  ~ScreenAIService_BindAnnotator_Params_Data() = delete;
};
static_assert(sizeof(ScreenAIService_BindAnnotator_Params_Data) == 16,
              "Bad sizeof(ScreenAIService_BindAnnotator_Params_Data)");
class  ScreenAIService_BindMainContentExtractor_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data main_content_extractor;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ScreenAIService_BindMainContentExtractor_Params_Data>;

  ScreenAIService_BindMainContentExtractor_Params_Data();
  ~ScreenAIService_BindMainContentExtractor_Params_Data() = delete;
};
static_assert(sizeof(ScreenAIService_BindMainContentExtractor_Params_Data) == 16,
              "Bad sizeof(ScreenAIService_BindMainContentExtractor_Params_Data)");

}  // namespace internal


class ScreenAIAnnotator_Annotate_ParamsDataView {
 public:
  ScreenAIAnnotator_Annotate_ParamsDataView() = default;

  ScreenAIAnnotator_Annotate_ParamsDataView(
      internal::ScreenAIAnnotator_Annotate_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetImageDataView(
      ::skia::mojom::BitmapN32DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadImage(UserType* output) {
    
    auto* pointer = data_->image.Get();
    return mojo::internal::Deserialize<::skia::mojom::BitmapN32DataView>(
        pointer, output, message_);
  }
 private:
  internal::ScreenAIAnnotator_Annotate_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ScreenAIAnnotator_Annotate_ResponseParamsDataView {
 public:
  ScreenAIAnnotator_Annotate_ResponseParamsDataView() = default;

  ScreenAIAnnotator_Annotate_ResponseParamsDataView(
      internal::ScreenAIAnnotator_Annotate_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUpdatesDataView(
      ::ax::mojom::AXTreeUpdateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUpdates(UserType* output) {
    
    auto* pointer = data_->updates.Get();
    return mojo::internal::Deserialize<::ax::mojom::AXTreeUpdateDataView>(
        pointer, output, message_);
  }
 private:
  internal::ScreenAIAnnotator_Annotate_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Screen2xMainContentExtractor_ExtractMainContent_ParamsDataView {
 public:
  Screen2xMainContentExtractor_ExtractMainContent_ParamsDataView() = default;

  Screen2xMainContentExtractor_ExtractMainContent_ParamsDataView(
      internal::Screen2xMainContentExtractor_ExtractMainContent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSnapshotDataView(
      ::ax::mojom::AXTreeUpdateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSnapshot(UserType* output) {
    
    auto* pointer = data_->snapshot.Get();
    return mojo::internal::Deserialize<::ax::mojom::AXTreeUpdateDataView>(
        pointer, output, message_);
  }
 private:
  internal::Screen2xMainContentExtractor_ExtractMainContent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Screen2xMainContentExtractor_ExtractMainContent_ResponseParamsDataView {
 public:
  Screen2xMainContentExtractor_ExtractMainContent_ResponseParamsDataView() = default;

  Screen2xMainContentExtractor_ExtractMainContent_ResponseParamsDataView(
      internal::Screen2xMainContentExtractor_ExtractMainContent_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetContentNodeIdsDataView(
      mojo::ArrayDataView<int32_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadContentNodeIds(UserType* output) {
    
    auto* pointer = data_->content_node_ids.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<int32_t>>(
        pointer, output, message_);
  }
 private:
  internal::Screen2xMainContentExtractor_ExtractMainContent_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ScreenAIService_BindAnnotator_ParamsDataView {
 public:
  ScreenAIService_BindAnnotator_ParamsDataView() = default;

  ScreenAIService_BindAnnotator_ParamsDataView(
      internal::ScreenAIService_BindAnnotator_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeAnnotator() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::screen_ai::mojom::ScreenAIAnnotatorInterfaceBase>>(
            &data_->annotator, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::ScreenAIService_BindAnnotator_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ScreenAIService_BindMainContentExtractor_ParamsDataView {
 public:
  ScreenAIService_BindMainContentExtractor_ParamsDataView() = default;

  ScreenAIService_BindMainContentExtractor_ParamsDataView(
      internal::ScreenAIService_BindMainContentExtractor_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeMainContentExtractor() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::screen_ai::mojom::Screen2xMainContentExtractorInterfaceBase>>(
            &data_->main_content_extractor, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::ScreenAIService_BindMainContentExtractor_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void ScreenAIAnnotator_Annotate_ParamsDataView::GetImageDataView(
    ::skia::mojom::BitmapN32DataView* output) {
  auto pointer = data_->image.Get();
  *output = ::skia::mojom::BitmapN32DataView(pointer, message_);
}


inline void ScreenAIAnnotator_Annotate_ResponseParamsDataView::GetUpdatesDataView(
    ::ax::mojom::AXTreeUpdateDataView* output) {
  auto pointer = data_->updates.Get();
  *output = ::ax::mojom::AXTreeUpdateDataView(pointer, message_);
}


inline void Screen2xMainContentExtractor_ExtractMainContent_ParamsDataView::GetSnapshotDataView(
    ::ax::mojom::AXTreeUpdateDataView* output) {
  auto pointer = data_->snapshot.Get();
  *output = ::ax::mojom::AXTreeUpdateDataView(pointer, message_);
}


inline void Screen2xMainContentExtractor_ExtractMainContent_ResponseParamsDataView::GetContentNodeIdsDataView(
    mojo::ArrayDataView<int32_t>* output) {
  auto pointer = data_->content_node_ids.Get();
  *output = mojo::ArrayDataView<int32_t>(pointer, message_);
}





}  // namespace mojom
}  // namespace screen_ai

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_SERVICES_SCREEN_AI_PUBLIC_MOJOM_SCREEN_AI_SERVICE_MOJOM_PARAMS_DATA_H_