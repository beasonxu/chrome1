// components/services/screen_ai/public/mojom/screen_ai_service.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_SCREEN_AI_PUBLIC_MOJOM_SCREEN_AI_SERVICE_MOJOM_H_
#define COMPONENTS_SERVICES_SCREEN_AI_PUBLIC_MOJOM_SCREEN_AI_SERVICE_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/services/screen_ai/public/mojom/screen_ai_service.mojom-shared.h"
#include "components/services/screen_ai/public/mojom/screen_ai_service.mojom-forward.h"
#include "sandbox/policy/mojom/sandbox.mojom-forward.h"
#include "skia/public/mojom/bitmap.mojom.h"
#include "ui/accessibility/mojom/ax_tree_update.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"






namespace screen_ai {
namespace mojom {

class ScreenAIAnnotatorProxy;

template <typename ImplRefTraits>
class ScreenAIAnnotatorStub;

class ScreenAIAnnotatorRequestValidator;
class ScreenAIAnnotatorResponseValidator;


class  ScreenAIAnnotator
    : public ScreenAIAnnotatorInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = ScreenAIAnnotatorInterfaceBase;
  using Proxy_ = ScreenAIAnnotatorProxy;

  template <typename ImplRefTraits>
  using Stub_ = ScreenAIAnnotatorStub<ImplRefTraits>;

  using RequestValidator_ = ScreenAIAnnotatorRequestValidator;
  using ResponseValidator_ = ScreenAIAnnotatorResponseValidator;
  enum MethodMinVersions : uint32_t {
    kAnnotateMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct Annotate_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~ScreenAIAnnotator() = default;


  using AnnotateCallback = base::OnceCallback<void(const ::ui::AXTreeUpdate&)>;
  
  virtual void Annotate(const ::SkBitmap& image, AnnotateCallback callback) = 0;
};

class Screen2xMainContentExtractorProxy;

template <typename ImplRefTraits>
class Screen2xMainContentExtractorStub;

class Screen2xMainContentExtractorRequestValidator;
class Screen2xMainContentExtractorResponseValidator;


class  Screen2xMainContentExtractor
    : public Screen2xMainContentExtractorInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = Screen2xMainContentExtractorInterfaceBase;
  using Proxy_ = Screen2xMainContentExtractorProxy;

  template <typename ImplRefTraits>
  using Stub_ = Screen2xMainContentExtractorStub<ImplRefTraits>;

  using RequestValidator_ = Screen2xMainContentExtractorRequestValidator;
  using ResponseValidator_ = Screen2xMainContentExtractorResponseValidator;
  enum MethodMinVersions : uint32_t {
    kExtractMainContentMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct ExtractMainContent_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~Screen2xMainContentExtractor() = default;


  using ExtractMainContentCallback = base::OnceCallback<void(const std::vector<int32_t>&)>;
  
  virtual void ExtractMainContent(const ::ui::AXTreeUpdate& snapshot, ExtractMainContentCallback callback) = 0;
};

class ScreenAIServiceProxy;

template <typename ImplRefTraits>
class ScreenAIServiceStub;

class ScreenAIServiceRequestValidator;


class  ScreenAIService
    : public ScreenAIServiceInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = ScreenAIServiceInterfaceBase;
  using Proxy_ = ScreenAIServiceProxy;

  template <typename ImplRefTraits>
  using Stub_ = ScreenAIServiceStub<ImplRefTraits>;

  using RequestValidator_ = ScreenAIServiceRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kBindAnnotatorMinVersion = 0,
    kBindMainContentExtractorMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct BindAnnotator_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct BindMainContentExtractor_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~ScreenAIService() = default;

  
  virtual void BindAnnotator(::mojo::PendingReceiver<ScreenAIAnnotator> annotator) = 0;

  
  virtual void BindMainContentExtractor(::mojo::PendingReceiver<Screen2xMainContentExtractor> main_content_extractor) = 0;
};



class  ScreenAIAnnotatorProxy
    : public ScreenAIAnnotator {
 public:
  using InterfaceType = ScreenAIAnnotator;

  explicit ScreenAIAnnotatorProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void Annotate(const ::SkBitmap& image, AnnotateCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class  Screen2xMainContentExtractorProxy
    : public Screen2xMainContentExtractor {
 public:
  using InterfaceType = Screen2xMainContentExtractor;

  explicit Screen2xMainContentExtractorProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void ExtractMainContent(const ::ui::AXTreeUpdate& snapshot, ExtractMainContentCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class  ScreenAIServiceProxy
    : public ScreenAIService {
 public:
  using InterfaceType = ScreenAIService;

  explicit ScreenAIServiceProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void BindAnnotator(::mojo::PendingReceiver<ScreenAIAnnotator> annotator) final;
  
  void BindMainContentExtractor(::mojo::PendingReceiver<Screen2xMainContentExtractor> main_content_extractor) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  ScreenAIAnnotatorStubDispatch {
 public:
  static bool Accept(ScreenAIAnnotator* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      ScreenAIAnnotator* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<ScreenAIAnnotator>>
class ScreenAIAnnotatorStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  ScreenAIAnnotatorStub() = default;
  ~ScreenAIAnnotatorStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ScreenAIAnnotatorStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ScreenAIAnnotatorStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  Screen2xMainContentExtractorStubDispatch {
 public:
  static bool Accept(Screen2xMainContentExtractor* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      Screen2xMainContentExtractor* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<Screen2xMainContentExtractor>>
class Screen2xMainContentExtractorStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  Screen2xMainContentExtractorStub() = default;
  ~Screen2xMainContentExtractorStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return Screen2xMainContentExtractorStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return Screen2xMainContentExtractorStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  ScreenAIServiceStubDispatch {
 public:
  static bool Accept(ScreenAIService* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      ScreenAIService* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<ScreenAIService>>
class ScreenAIServiceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  ScreenAIServiceStub() = default;
  ~ScreenAIServiceStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ScreenAIServiceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ScreenAIServiceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  ScreenAIAnnotatorRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  Screen2xMainContentExtractorRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  ScreenAIServiceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  ScreenAIAnnotatorResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  Screen2xMainContentExtractorResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace mojom
}  // namespace screen_ai

namespace mojo {

}  // namespace mojo

#endif  // COMPONENTS_SERVICES_SCREEN_AI_PUBLIC_MOJOM_SCREEN_AI_SERVICE_MOJOM_H_