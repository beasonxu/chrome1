// components/services/app_service/public/mojom/app_service.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_APP_SERVICE_PUBLIC_MOJOM_APP_SERVICE_MOJOM_TEST_UTILS_H_
#define COMPONENTS_SERVICES_APP_SERVICE_PUBLIC_MOJOM_APP_SERVICE_MOJOM_TEST_UTILS_H_

#include "components/services/app_service/public/mojom/app_service.mojom.h"


namespace apps {
namespace mojom {


class  AppServiceInterceptorForTesting : public AppService {
  virtual AppService* GetForwardingInterface() = 0;
  void RegisterPublisher(::mojo::PendingRemote<Publisher> publisher, ::apps::mojom::AppType app_type) override;
  void RegisterSubscriber(::mojo::PendingRemote<Subscriber> subscriber, ConnectOptionsPtr opts) override;
  void Launch(::apps::mojom::AppType app_type, const std::string& app_id, int32_t event_flags, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::WindowInfoPtr window_info) override;
  void LaunchAppWithFiles(::apps::mojom::AppType app_type, const std::string& app_id, int32_t event_flags, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::FilePathsPtr file_paths) override;
  void LaunchAppWithIntent(::apps::mojom::AppType app_type, const std::string& app_id, int32_t event_flags, ::apps::mojom::IntentPtr intent, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::WindowInfoPtr window_info, LaunchAppWithIntentCallback callback) override;
  void SetPermission(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::PermissionPtr permission) override;
  void Uninstall(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::UninstallSource uninstall_source, bool clear_site_data, bool report_abuse) override;
  void PauseApp(::apps::mojom::AppType app_type, const std::string& app_id) override;
  void UnpauseApp(::apps::mojom::AppType app_type, const std::string& app_id) override;
  void StopApp(::apps::mojom::AppType app_type, const std::string& app_id) override;
  void GetMenuModel(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::MenuType menu_type, int64_t display_id, GetMenuModelCallback callback) override;
  void ExecuteContextMenuCommand(::apps::mojom::AppType app_type, const std::string& app_id, int32_t command_id, const std::string& shortcut_id, int64_t display_id) override;
  void OpenNativeSettings(::apps::mojom::AppType app_type, const std::string& app_id) override;
  void AddPreferredApp(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::IntentFilterPtr intent_filter, ::apps::mojom::IntentPtr intent, bool from_publisher) override;
  void RemovePreferredApp(::apps::mojom::AppType app_type, const std::string& app_id) override;
  void SetSupportedLinksPreference(::apps::mojom::AppType app_type, const std::string& app_id, std::vector<::apps::mojom::IntentFilterPtr> all_link_filters) override;
  void RemoveSupportedLinksPreference(::apps::mojom::AppType app_type, const std::string& app_id) override;
  void SetResizeLocked(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::OptionalBool locked) override;
  void SetWindowMode(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::WindowMode window_mode) override;
  void SetRunOnOsLoginMode(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::RunOnOsLoginMode run_on_os_login_mode) override;
};
class  AppServiceAsyncWaiter {
 public:
  explicit AppServiceAsyncWaiter(AppService* proxy);

  AppServiceAsyncWaiter(const AppServiceAsyncWaiter&) = delete;
  AppServiceAsyncWaiter& operator=(const AppServiceAsyncWaiter&) = delete;

  ~AppServiceAsyncWaiter();
  void LaunchAppWithIntent(
      ::apps::mojom::AppType app_type, const std::string& app_id, int32_t event_flags, ::apps::mojom::IntentPtr intent, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::WindowInfoPtr window_info, bool* out_success);
  void GetMenuModel(
      ::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::MenuType menu_type, int64_t display_id, ::apps::mojom::MenuItemsPtr* out_menu_items);

 private:
  AppService* const proxy_;
};


class  PublisherInterceptorForTesting : public Publisher {
  virtual Publisher* GetForwardingInterface() = 0;
  void Connect(::mojo::PendingRemote<Subscriber> subscriber, ConnectOptionsPtr opts) override;
  void Launch(const std::string& app_id, int32_t event_flags, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::WindowInfoPtr window_info) override;
  void LaunchAppWithFiles(const std::string& app_id, int32_t event_flags, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::FilePathsPtr file_paths) override;
  void LaunchAppWithIntent(const std::string& app_id, int32_t event_flags, ::apps::mojom::IntentPtr intent, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::WindowInfoPtr window_info, LaunchAppWithIntentCallback callback) override;
  void SetPermission(const std::string& app_id, ::apps::mojom::PermissionPtr permission) override;
  void Uninstall(const std::string& app_id, ::apps::mojom::UninstallSource uninstall_source, bool clear_site_data, bool report_abuse) override;
  void PauseApp(const std::string& app_id) override;
  void UnpauseApp(const std::string& app_id) override;
  void StopApp(const std::string& app_id) override;
  void GetMenuModel(const std::string& app_id, ::apps::mojom::MenuType menu_type, int64_t display_id, GetMenuModelCallback callback) override;
  void ExecuteContextMenuCommand(const std::string& app_id, int32_t command_id, const std::string& shortcut_id, int64_t display_id) override;
  void OpenNativeSettings(const std::string& app_id) override;
  void OnPreferredAppSet(const std::string& app_id, ::apps::mojom::IntentFilterPtr intent_filter, ::apps::mojom::IntentPtr intent, ::apps::mojom::ReplacedAppPreferencesPtr replaced_app_preferences) override;
  void OnSupportedLinksPreferenceChanged(const std::string& app_id, bool open_in_app) override;
  void SetResizeLocked(const std::string& app_id, ::apps::mojom::OptionalBool locked) override;
  void SetWindowMode(const std::string& app_id, ::apps::mojom::WindowMode window_mode) override;
  void SetRunOnOsLoginMode(const std::string& app_id, ::apps::mojom::RunOnOsLoginMode run_on_os_login_mode) override;
};
class  PublisherAsyncWaiter {
 public:
  explicit PublisherAsyncWaiter(Publisher* proxy);

  PublisherAsyncWaiter(const PublisherAsyncWaiter&) = delete;
  PublisherAsyncWaiter& operator=(const PublisherAsyncWaiter&) = delete;

  ~PublisherAsyncWaiter();
  void LaunchAppWithIntent(
      const std::string& app_id, int32_t event_flags, ::apps::mojom::IntentPtr intent, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::WindowInfoPtr window_info, bool* out_success);
  void GetMenuModel(
      const std::string& app_id, ::apps::mojom::MenuType menu_type, int64_t display_id, ::apps::mojom::MenuItemsPtr* out_menu_items);

 private:
  Publisher* const proxy_;
};


class  SubscriberInterceptorForTesting : public Subscriber {
  virtual Subscriber* GetForwardingInterface() = 0;
  void OnApps(std::vector<::apps::mojom::AppPtr> deltas, ::apps::mojom::AppType app_type, bool should_notify_initialized) override;
  void OnCapabilityAccesses(std::vector<::apps::mojom::CapabilityAccessPtr> deltas) override;
  void Clone(::mojo::PendingReceiver<Subscriber> receiver) override;
  void OnPreferredAppsChanged(::apps::mojom::PreferredAppChangesPtr changes) override;
  void InitializePreferredApps(std::vector<::apps::mojom::PreferredAppPtr> preferred_apps) override;
};
class  SubscriberAsyncWaiter {
 public:
  explicit SubscriberAsyncWaiter(Subscriber* proxy);

  SubscriberAsyncWaiter(const SubscriberAsyncWaiter&) = delete;
  SubscriberAsyncWaiter& operator=(const SubscriberAsyncWaiter&) = delete;

  ~SubscriberAsyncWaiter();

 private:
  Subscriber* const proxy_;
};




}  // namespace mojom
}  // namespace apps

#endif  // COMPONENTS_SERVICES_APP_SERVICE_PUBLIC_MOJOM_APP_SERVICE_MOJOM_TEST_UTILS_H_