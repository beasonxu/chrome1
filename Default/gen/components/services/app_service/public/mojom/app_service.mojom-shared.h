// components/services/app_service/public/mojom/app_service.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_APP_SERVICE_PUBLIC_MOJOM_APP_SERVICE_MOJOM_SHARED_H_
#define COMPONENTS_SERVICES_APP_SERVICE_PUBLIC_MOJOM_APP_SERVICE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/services/app_service/public/mojom/app_service.mojom-shared-internal.h"
#include "components/services/app_service/public/mojom/types.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace apps {
namespace mojom {
class ConnectOptionsDataView;



}  // namespace mojom
}  // namespace apps

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::apps::mojom::ConnectOptionsDataView> {
  using Data = ::apps::mojom::internal::ConnectOptions_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace apps {
namespace mojom {
// Interface base classes. They are used for type safety check.
class AppServiceInterfaceBase {};

using AppServicePtrDataView =
    mojo::InterfacePtrDataView<AppServiceInterfaceBase>;
using AppServiceRequestDataView =
    mojo::InterfaceRequestDataView<AppServiceInterfaceBase>;
using AppServiceAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<AppServiceInterfaceBase>;
using AppServiceAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<AppServiceInterfaceBase>;
class PublisherInterfaceBase {};

using PublisherPtrDataView =
    mojo::InterfacePtrDataView<PublisherInterfaceBase>;
using PublisherRequestDataView =
    mojo::InterfaceRequestDataView<PublisherInterfaceBase>;
using PublisherAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PublisherInterfaceBase>;
using PublisherAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PublisherInterfaceBase>;
class SubscriberInterfaceBase {};

using SubscriberPtrDataView =
    mojo::InterfacePtrDataView<SubscriberInterfaceBase>;
using SubscriberRequestDataView =
    mojo::InterfaceRequestDataView<SubscriberInterfaceBase>;
using SubscriberAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<SubscriberInterfaceBase>;
using SubscriberAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<SubscriberInterfaceBase>;


class ConnectOptionsDataView {
 public:
  ConnectOptionsDataView() = default;

  ConnectOptionsDataView(
      internal::ConnectOptions_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ConnectOptions_Data* data_ = nullptr;
};



}  // namespace mojom
}  // namespace apps

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::apps::mojom::ConnectOptionsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::apps::mojom::ConnectOptionsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::apps::mojom::internal::ConnectOptions_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
  }

  static bool Deserialize(::apps::mojom::internal::ConnectOptions_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::apps::mojom::ConnectOptionsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace apps {
namespace mojom {




}  // namespace mojom
}  // namespace apps

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // COMPONENTS_SERVICES_APP_SERVICE_PUBLIC_MOJOM_APP_SERVICE_MOJOM_SHARED_H_