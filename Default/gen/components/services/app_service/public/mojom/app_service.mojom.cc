// components/services/app_service/public/mojom/app_service.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "components/services/app_service/public/mojom/app_service.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/services/app_service/public/mojom/app_service.mojom-params-data.h"
#include "components/services/app_service/public/mojom/app_service.mojom-shared-message-ids.h"

#include "components/services/app_service/public/mojom/app_service.mojom-import-headers.h"
#include "components/services/app_service/public/mojom/app_service.mojom-test-utils.h"


#ifndef COMPONENTS_SERVICES_APP_SERVICE_PUBLIC_MOJOM_APP_SERVICE_MOJOM_JUMBO_H_
#define COMPONENTS_SERVICES_APP_SERVICE_PUBLIC_MOJOM_APP_SERVICE_MOJOM_JUMBO_H_
#endif



namespace apps {
namespace mojom {
ConnectOptions::ConnectOptions() {}

ConnectOptions::~ConnectOptions() = default;
size_t ConnectOptions::Hash(size_t seed) const {
  return seed;
}

void ConnectOptions::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
}

bool ConnectOptions::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char AppService::Name_[] = "apps.mojom.AppService";

AppService::IPCStableHashFunction AppService::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kAppService_RegisterPublisher_Name: {
      return &AppService::RegisterPublisher_Sym::IPCStableHash;
    }
    case internal::kAppService_RegisterSubscriber_Name: {
      return &AppService::RegisterSubscriber_Sym::IPCStableHash;
    }
    case internal::kAppService_Launch_Name: {
      return &AppService::Launch_Sym::IPCStableHash;
    }
    case internal::kAppService_LaunchAppWithFiles_Name: {
      return &AppService::LaunchAppWithFiles_Sym::IPCStableHash;
    }
    case internal::kAppService_LaunchAppWithIntent_Name: {
      return &AppService::LaunchAppWithIntent_Sym::IPCStableHash;
    }
    case internal::kAppService_SetPermission_Name: {
      return &AppService::SetPermission_Sym::IPCStableHash;
    }
    case internal::kAppService_Uninstall_Name: {
      return &AppService::Uninstall_Sym::IPCStableHash;
    }
    case internal::kAppService_PauseApp_Name: {
      return &AppService::PauseApp_Sym::IPCStableHash;
    }
    case internal::kAppService_UnpauseApp_Name: {
      return &AppService::UnpauseApp_Sym::IPCStableHash;
    }
    case internal::kAppService_StopApp_Name: {
      return &AppService::StopApp_Sym::IPCStableHash;
    }
    case internal::kAppService_GetMenuModel_Name: {
      return &AppService::GetMenuModel_Sym::IPCStableHash;
    }
    case internal::kAppService_ExecuteContextMenuCommand_Name: {
      return &AppService::ExecuteContextMenuCommand_Sym::IPCStableHash;
    }
    case internal::kAppService_OpenNativeSettings_Name: {
      return &AppService::OpenNativeSettings_Sym::IPCStableHash;
    }
    case internal::kAppService_AddPreferredApp_Name: {
      return &AppService::AddPreferredApp_Sym::IPCStableHash;
    }
    case internal::kAppService_RemovePreferredApp_Name: {
      return &AppService::RemovePreferredApp_Sym::IPCStableHash;
    }
    case internal::kAppService_SetSupportedLinksPreference_Name: {
      return &AppService::SetSupportedLinksPreference_Sym::IPCStableHash;
    }
    case internal::kAppService_RemoveSupportedLinksPreference_Name: {
      return &AppService::RemoveSupportedLinksPreference_Sym::IPCStableHash;
    }
    case internal::kAppService_SetResizeLocked_Name: {
      return &AppService::SetResizeLocked_Sym::IPCStableHash;
    }
    case internal::kAppService_SetWindowMode_Name: {
      return &AppService::SetWindowMode_Sym::IPCStableHash;
    }
    case internal::kAppService_SetRunOnOsLoginMode_Name: {
      return &AppService::SetRunOnOsLoginMode_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* AppService::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kAppService_RegisterPublisher_Name:
            return "Receive apps::mojom::AppService::RegisterPublisher";
      case internal::kAppService_RegisterSubscriber_Name:
            return "Receive apps::mojom::AppService::RegisterSubscriber";
      case internal::kAppService_Launch_Name:
            return "Receive apps::mojom::AppService::Launch";
      case internal::kAppService_LaunchAppWithFiles_Name:
            return "Receive apps::mojom::AppService::LaunchAppWithFiles";
      case internal::kAppService_LaunchAppWithIntent_Name:
            return "Receive apps::mojom::AppService::LaunchAppWithIntent";
      case internal::kAppService_SetPermission_Name:
            return "Receive apps::mojom::AppService::SetPermission";
      case internal::kAppService_Uninstall_Name:
            return "Receive apps::mojom::AppService::Uninstall";
      case internal::kAppService_PauseApp_Name:
            return "Receive apps::mojom::AppService::PauseApp";
      case internal::kAppService_UnpauseApp_Name:
            return "Receive apps::mojom::AppService::UnpauseApp";
      case internal::kAppService_StopApp_Name:
            return "Receive apps::mojom::AppService::StopApp";
      case internal::kAppService_GetMenuModel_Name:
            return "Receive apps::mojom::AppService::GetMenuModel";
      case internal::kAppService_ExecuteContextMenuCommand_Name:
            return "Receive apps::mojom::AppService::ExecuteContextMenuCommand";
      case internal::kAppService_OpenNativeSettings_Name:
            return "Receive apps::mojom::AppService::OpenNativeSettings";
      case internal::kAppService_AddPreferredApp_Name:
            return "Receive apps::mojom::AppService::AddPreferredApp";
      case internal::kAppService_RemovePreferredApp_Name:
            return "Receive apps::mojom::AppService::RemovePreferredApp";
      case internal::kAppService_SetSupportedLinksPreference_Name:
            return "Receive apps::mojom::AppService::SetSupportedLinksPreference";
      case internal::kAppService_RemoveSupportedLinksPreference_Name:
            return "Receive apps::mojom::AppService::RemoveSupportedLinksPreference";
      case internal::kAppService_SetResizeLocked_Name:
            return "Receive apps::mojom::AppService::SetResizeLocked";
      case internal::kAppService_SetWindowMode_Name:
            return "Receive apps::mojom::AppService::SetWindowMode";
      case internal::kAppService_SetRunOnOsLoginMode_Name:
            return "Receive apps::mojom::AppService::SetRunOnOsLoginMode";
    }
  } else {
    switch (message.name()) {
      case internal::kAppService_RegisterPublisher_Name:
            return "Receive reply apps::mojom::AppService::RegisterPublisher";
      case internal::kAppService_RegisterSubscriber_Name:
            return "Receive reply apps::mojom::AppService::RegisterSubscriber";
      case internal::kAppService_Launch_Name:
            return "Receive reply apps::mojom::AppService::Launch";
      case internal::kAppService_LaunchAppWithFiles_Name:
            return "Receive reply apps::mojom::AppService::LaunchAppWithFiles";
      case internal::kAppService_LaunchAppWithIntent_Name:
            return "Receive reply apps::mojom::AppService::LaunchAppWithIntent";
      case internal::kAppService_SetPermission_Name:
            return "Receive reply apps::mojom::AppService::SetPermission";
      case internal::kAppService_Uninstall_Name:
            return "Receive reply apps::mojom::AppService::Uninstall";
      case internal::kAppService_PauseApp_Name:
            return "Receive reply apps::mojom::AppService::PauseApp";
      case internal::kAppService_UnpauseApp_Name:
            return "Receive reply apps::mojom::AppService::UnpauseApp";
      case internal::kAppService_StopApp_Name:
            return "Receive reply apps::mojom::AppService::StopApp";
      case internal::kAppService_GetMenuModel_Name:
            return "Receive reply apps::mojom::AppService::GetMenuModel";
      case internal::kAppService_ExecuteContextMenuCommand_Name:
            return "Receive reply apps::mojom::AppService::ExecuteContextMenuCommand";
      case internal::kAppService_OpenNativeSettings_Name:
            return "Receive reply apps::mojom::AppService::OpenNativeSettings";
      case internal::kAppService_AddPreferredApp_Name:
            return "Receive reply apps::mojom::AppService::AddPreferredApp";
      case internal::kAppService_RemovePreferredApp_Name:
            return "Receive reply apps::mojom::AppService::RemovePreferredApp";
      case internal::kAppService_SetSupportedLinksPreference_Name:
            return "Receive reply apps::mojom::AppService::SetSupportedLinksPreference";
      case internal::kAppService_RemoveSupportedLinksPreference_Name:
            return "Receive reply apps::mojom::AppService::RemoveSupportedLinksPreference";
      case internal::kAppService_SetResizeLocked_Name:
            return "Receive reply apps::mojom::AppService::SetResizeLocked";
      case internal::kAppService_SetWindowMode_Name:
            return "Receive reply apps::mojom::AppService::SetWindowMode";
      case internal::kAppService_SetRunOnOsLoginMode_Name:
            return "Receive reply apps::mojom::AppService::SetRunOnOsLoginMode";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t AppService::RegisterPublisher_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::AppService::RegisterPublisher");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AppService::RegisterSubscriber_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::AppService::RegisterSubscriber");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AppService::Launch_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::AppService::Launch");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AppService::LaunchAppWithFiles_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::AppService::LaunchAppWithFiles");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AppService::LaunchAppWithIntent_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::AppService::LaunchAppWithIntent");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AppService::SetPermission_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::AppService::SetPermission");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AppService::Uninstall_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::AppService::Uninstall");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AppService::PauseApp_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::AppService::PauseApp");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AppService::UnpauseApp_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::AppService::UnpauseApp");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AppService::StopApp_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::AppService::StopApp");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AppService::GetMenuModel_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::AppService::GetMenuModel");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AppService::ExecuteContextMenuCommand_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::AppService::ExecuteContextMenuCommand");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AppService::OpenNativeSettings_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::AppService::OpenNativeSettings");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AppService::AddPreferredApp_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::AppService::AddPreferredApp");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AppService::RemovePreferredApp_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::AppService::RemovePreferredApp");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AppService::SetSupportedLinksPreference_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::AppService::SetSupportedLinksPreference");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AppService::RemoveSupportedLinksPreference_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::AppService::RemoveSupportedLinksPreference");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AppService::SetResizeLocked_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::AppService::SetResizeLocked");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AppService::SetWindowMode_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::AppService::SetWindowMode");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AppService::SetRunOnOsLoginMode_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::AppService::SetRunOnOsLoginMode");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class AppService_LaunchAppWithIntent_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AppService_LaunchAppWithIntent_ForwardToCallback(
      AppService::LaunchAppWithIntentCallback callback
      ) : callback_(std::move(callback)) {
  }

  AppService_LaunchAppWithIntent_ForwardToCallback(const AppService_LaunchAppWithIntent_ForwardToCallback&) = delete;
  AppService_LaunchAppWithIntent_ForwardToCallback& operator=(const AppService_LaunchAppWithIntent_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  AppService::LaunchAppWithIntentCallback callback_;
};

class AppService_GetMenuModel_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AppService_GetMenuModel_ForwardToCallback(
      AppService::GetMenuModelCallback callback
      ) : callback_(std::move(callback)) {
  }

  AppService_GetMenuModel_ForwardToCallback(const AppService_GetMenuModel_ForwardToCallback&) = delete;
  AppService_GetMenuModel_ForwardToCallback& operator=(const AppService_GetMenuModel_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  AppService::GetMenuModelCallback callback_;
};

AppServiceProxy::AppServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AppServiceProxy::RegisterPublisher(
    ::mojo::PendingRemote<Publisher> in_publisher, ::apps::mojom::AppType in_app_type) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::AppService::RegisterPublisher", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("publisher"), in_publisher,
                        "<value of type ::mojo::PendingRemote<Publisher>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_type"), in_app_type,
                        "<value of type ::apps::mojom::AppType>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_RegisterPublisher_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_RegisterPublisher_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::apps::mojom::PublisherInterfaceBase>>(
      in_publisher, &params->publisher, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->publisher),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid publisher in AppService.RegisterPublisher request");
  mojo::internal::Serialize<::apps::mojom::AppType>(
      in_app_type, &params->app_type);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("RegisterPublisher");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AppServiceProxy::RegisterSubscriber(
    ::mojo::PendingRemote<Subscriber> in_subscriber, ConnectOptionsPtr in_opts) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::AppService::RegisterSubscriber", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("subscriber"), in_subscriber,
                        "<value of type ::mojo::PendingRemote<Subscriber>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("opts"), in_opts,
                        "<value of type ConnectOptionsPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_RegisterSubscriber_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_RegisterSubscriber_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::apps::mojom::SubscriberInterfaceBase>>(
      in_subscriber, &params->subscriber, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->subscriber),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid subscriber in AppService.RegisterSubscriber request");
  mojo::internal::MessageFragment<
      typename decltype(params->opts)::BaseType> opts_fragment(
          params.message());
  mojo::internal::Serialize<::apps::mojom::ConnectOptionsDataView>(
      in_opts, opts_fragment);
  params->opts.Set(
      opts_fragment.is_null() ? nullptr : opts_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("RegisterSubscriber");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AppServiceProxy::Launch(
    ::apps::mojom::AppType in_app_type, const std::string& in_app_id, int32_t in_event_flags, ::apps::mojom::LaunchSource in_launch_source, ::apps::mojom::WindowInfoPtr in_window_info) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::AppService::Launch", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_type"), in_app_type,
                        "<value of type ::apps::mojom::AppType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("event_flags"), in_event_flags,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("launch_source"), in_launch_source,
                        "<value of type ::apps::mojom::LaunchSource>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("window_info"), in_window_info,
                        "<value of type ::apps::mojom::WindowInfoPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_Launch_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_Launch_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::apps::mojom::AppType>(
      in_app_type, &params->app_type);
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in AppService.Launch request");
  params->event_flags = in_event_flags;
  mojo::internal::Serialize<::apps::mojom::LaunchSource>(
      in_launch_source, &params->launch_source);
  mojo::internal::MessageFragment<
      typename decltype(params->window_info)::BaseType> window_info_fragment(
          params.message());
  mojo::internal::Serialize<::apps::mojom::WindowInfoDataView>(
      in_window_info, window_info_fragment);
  params->window_info.Set(
      window_info_fragment.is_null() ? nullptr : window_info_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("Launch");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AppServiceProxy::LaunchAppWithFiles(
    ::apps::mojom::AppType in_app_type, const std::string& in_app_id, int32_t in_event_flags, ::apps::mojom::LaunchSource in_launch_source, ::apps::mojom::FilePathsPtr in_file_paths) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::AppService::LaunchAppWithFiles", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_type"), in_app_type,
                        "<value of type ::apps::mojom::AppType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("event_flags"), in_event_flags,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("launch_source"), in_launch_source,
                        "<value of type ::apps::mojom::LaunchSource>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("file_paths"), in_file_paths,
                        "<value of type ::apps::mojom::FilePathsPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_LaunchAppWithFiles_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_LaunchAppWithFiles_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::apps::mojom::AppType>(
      in_app_type, &params->app_type);
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in AppService.LaunchAppWithFiles request");
  params->event_flags = in_event_flags;
  mojo::internal::Serialize<::apps::mojom::LaunchSource>(
      in_launch_source, &params->launch_source);
  mojo::internal::MessageFragment<
      typename decltype(params->file_paths)::BaseType> file_paths_fragment(
          params.message());
  mojo::internal::Serialize<::apps::mojom::FilePathsDataView>(
      in_file_paths, file_paths_fragment);
  params->file_paths.Set(
      file_paths_fragment.is_null() ? nullptr : file_paths_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->file_paths.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null file_paths in AppService.LaunchAppWithFiles request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("LaunchAppWithFiles");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AppServiceProxy::LaunchAppWithIntent(
    ::apps::mojom::AppType in_app_type, const std::string& in_app_id, int32_t in_event_flags, ::apps::mojom::IntentPtr in_intent, ::apps::mojom::LaunchSource in_launch_source, ::apps::mojom::WindowInfoPtr in_window_info, LaunchAppWithIntentCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::AppService::LaunchAppWithIntent", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_type"), in_app_type,
                        "<value of type ::apps::mojom::AppType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("event_flags"), in_event_flags,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("intent"), in_intent,
                        "<value of type ::apps::mojom::IntentPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("launch_source"), in_launch_source,
                        "<value of type ::apps::mojom::LaunchSource>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("window_info"), in_window_info,
                        "<value of type ::apps::mojom::WindowInfoPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_LaunchAppWithIntent_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_LaunchAppWithIntent_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::apps::mojom::AppType>(
      in_app_type, &params->app_type);
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in AppService.LaunchAppWithIntent request");
  params->event_flags = in_event_flags;
  mojo::internal::MessageFragment<
      typename decltype(params->intent)::BaseType> intent_fragment(
          params.message());
  mojo::internal::Serialize<::apps::mojom::IntentDataView>(
      in_intent, intent_fragment);
  params->intent.Set(
      intent_fragment.is_null() ? nullptr : intent_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->intent.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null intent in AppService.LaunchAppWithIntent request");
  mojo::internal::Serialize<::apps::mojom::LaunchSource>(
      in_launch_source, &params->launch_source);
  mojo::internal::MessageFragment<
      typename decltype(params->window_info)::BaseType> window_info_fragment(
          params.message());
  mojo::internal::Serialize<::apps::mojom::WindowInfoDataView>(
      in_window_info, window_info_fragment);
  params->window_info.Set(
      window_info_fragment.is_null() ? nullptr : window_info_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("LaunchAppWithIntent");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AppService_LaunchAppWithIntent_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void AppServiceProxy::SetPermission(
    ::apps::mojom::AppType in_app_type, const std::string& in_app_id, ::apps::mojom::PermissionPtr in_permission) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::AppService::SetPermission", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_type"), in_app_type,
                        "<value of type ::apps::mojom::AppType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("permission"), in_permission,
                        "<value of type ::apps::mojom::PermissionPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_SetPermission_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_SetPermission_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::apps::mojom::AppType>(
      in_app_type, &params->app_type);
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in AppService.SetPermission request");
  mojo::internal::MessageFragment<
      typename decltype(params->permission)::BaseType> permission_fragment(
          params.message());
  mojo::internal::Serialize<::apps::mojom::PermissionDataView>(
      in_permission, permission_fragment);
  params->permission.Set(
      permission_fragment.is_null() ? nullptr : permission_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->permission.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null permission in AppService.SetPermission request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("SetPermission");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AppServiceProxy::Uninstall(
    ::apps::mojom::AppType in_app_type, const std::string& in_app_id, ::apps::mojom::UninstallSource in_uninstall_source, bool in_clear_site_data, bool in_report_abuse) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::AppService::Uninstall", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_type"), in_app_type,
                        "<value of type ::apps::mojom::AppType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("uninstall_source"), in_uninstall_source,
                        "<value of type ::apps::mojom::UninstallSource>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("clear_site_data"), in_clear_site_data,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("report_abuse"), in_report_abuse,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_Uninstall_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_Uninstall_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::apps::mojom::AppType>(
      in_app_type, &params->app_type);
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in AppService.Uninstall request");
  mojo::internal::Serialize<::apps::mojom::UninstallSource>(
      in_uninstall_source, &params->uninstall_source);
  params->clear_site_data = in_clear_site_data;
  params->report_abuse = in_report_abuse;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("Uninstall");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AppServiceProxy::PauseApp(
    ::apps::mojom::AppType in_app_type, const std::string& in_app_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::AppService::PauseApp", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_type"), in_app_type,
                        "<value of type ::apps::mojom::AppType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_PauseApp_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_PauseApp_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::apps::mojom::AppType>(
      in_app_type, &params->app_type);
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in AppService.PauseApp request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("PauseApp");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AppServiceProxy::UnpauseApp(
    ::apps::mojom::AppType in_app_type, const std::string& in_app_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::AppService::UnpauseApp", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_type"), in_app_type,
                        "<value of type ::apps::mojom::AppType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_UnpauseApp_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_UnpauseApp_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::apps::mojom::AppType>(
      in_app_type, &params->app_type);
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in AppService.UnpauseApp request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("UnpauseApp");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AppServiceProxy::StopApp(
    ::apps::mojom::AppType in_app_type, const std::string& in_app_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::AppService::StopApp", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_type"), in_app_type,
                        "<value of type ::apps::mojom::AppType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_StopApp_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_StopApp_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::apps::mojom::AppType>(
      in_app_type, &params->app_type);
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in AppService.StopApp request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("StopApp");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AppServiceProxy::GetMenuModel(
    ::apps::mojom::AppType in_app_type, const std::string& in_app_id, ::apps::mojom::MenuType in_menu_type, int64_t in_display_id, GetMenuModelCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::AppService::GetMenuModel", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_type"), in_app_type,
                        "<value of type ::apps::mojom::AppType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("menu_type"), in_menu_type,
                        "<value of type ::apps::mojom::MenuType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("display_id"), in_display_id,
                        "<value of type int64_t>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_GetMenuModel_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_GetMenuModel_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::apps::mojom::AppType>(
      in_app_type, &params->app_type);
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in AppService.GetMenuModel request");
  mojo::internal::Serialize<::apps::mojom::MenuType>(
      in_menu_type, &params->menu_type);
  params->display_id = in_display_id;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("GetMenuModel");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AppService_GetMenuModel_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void AppServiceProxy::ExecuteContextMenuCommand(
    ::apps::mojom::AppType in_app_type, const std::string& in_app_id, int32_t in_command_id, const std::string& in_shortcut_id, int64_t in_display_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::AppService::ExecuteContextMenuCommand", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_type"), in_app_type,
                        "<value of type ::apps::mojom::AppType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("command_id"), in_command_id,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("shortcut_id"), in_shortcut_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("display_id"), in_display_id,
                        "<value of type int64_t>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_ExecuteContextMenuCommand_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_ExecuteContextMenuCommand_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::apps::mojom::AppType>(
      in_app_type, &params->app_type);
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in AppService.ExecuteContextMenuCommand request");
  params->command_id = in_command_id;
  mojo::internal::MessageFragment<
      typename decltype(params->shortcut_id)::BaseType> shortcut_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_shortcut_id, shortcut_id_fragment);
  params->shortcut_id.Set(
      shortcut_id_fragment.is_null() ? nullptr : shortcut_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->shortcut_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null shortcut_id in AppService.ExecuteContextMenuCommand request");
  params->display_id = in_display_id;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("ExecuteContextMenuCommand");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AppServiceProxy::OpenNativeSettings(
    ::apps::mojom::AppType in_app_type, const std::string& in_app_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::AppService::OpenNativeSettings", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_type"), in_app_type,
                        "<value of type ::apps::mojom::AppType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_OpenNativeSettings_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_OpenNativeSettings_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::apps::mojom::AppType>(
      in_app_type, &params->app_type);
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in AppService.OpenNativeSettings request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("OpenNativeSettings");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AppServiceProxy::AddPreferredApp(
    ::apps::mojom::AppType in_app_type, const std::string& in_app_id, ::apps::mojom::IntentFilterPtr in_intent_filter, ::apps::mojom::IntentPtr in_intent, bool in_from_publisher) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::AppService::AddPreferredApp", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_type"), in_app_type,
                        "<value of type ::apps::mojom::AppType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("intent_filter"), in_intent_filter,
                        "<value of type ::apps::mojom::IntentFilterPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("intent"), in_intent,
                        "<value of type ::apps::mojom::IntentPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("from_publisher"), in_from_publisher,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_AddPreferredApp_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_AddPreferredApp_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::apps::mojom::AppType>(
      in_app_type, &params->app_type);
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in AppService.AddPreferredApp request");
  mojo::internal::MessageFragment<
      typename decltype(params->intent_filter)::BaseType> intent_filter_fragment(
          params.message());
  mojo::internal::Serialize<::apps::mojom::IntentFilterDataView>(
      in_intent_filter, intent_filter_fragment);
  params->intent_filter.Set(
      intent_filter_fragment.is_null() ? nullptr : intent_filter_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->intent_filter.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null intent_filter in AppService.AddPreferredApp request");
  mojo::internal::MessageFragment<
      typename decltype(params->intent)::BaseType> intent_fragment(
          params.message());
  mojo::internal::Serialize<::apps::mojom::IntentDataView>(
      in_intent, intent_fragment);
  params->intent.Set(
      intent_fragment.is_null() ? nullptr : intent_fragment.data());
  params->from_publisher = in_from_publisher;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("AddPreferredApp");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AppServiceProxy::RemovePreferredApp(
    ::apps::mojom::AppType in_app_type, const std::string& in_app_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::AppService::RemovePreferredApp", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_type"), in_app_type,
                        "<value of type ::apps::mojom::AppType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_RemovePreferredApp_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_RemovePreferredApp_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::apps::mojom::AppType>(
      in_app_type, &params->app_type);
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in AppService.RemovePreferredApp request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("RemovePreferredApp");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AppServiceProxy::SetSupportedLinksPreference(
    ::apps::mojom::AppType in_app_type, const std::string& in_app_id, std::vector<::apps::mojom::IntentFilterPtr> in_all_link_filters) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::AppService::SetSupportedLinksPreference", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_type"), in_app_type,
                        "<value of type ::apps::mojom::AppType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("all_link_filters"), in_all_link_filters,
                        "<value of type std::vector<::apps::mojom::IntentFilterPtr>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_SetSupportedLinksPreference_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_SetSupportedLinksPreference_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::apps::mojom::AppType>(
      in_app_type, &params->app_type);
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in AppService.SetSupportedLinksPreference request");
  mojo::internal::MessageFragment<
      typename decltype(params->all_link_filters)::BaseType>
      all_link_filters_fragment(params.message());
  const mojo::internal::ContainerValidateParams all_link_filters_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::apps::mojom::IntentFilterDataView>>(
      in_all_link_filters, all_link_filters_fragment, &all_link_filters_validate_params);
  params->all_link_filters.Set(
      all_link_filters_fragment.is_null() ? nullptr : all_link_filters_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->all_link_filters.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null all_link_filters in AppService.SetSupportedLinksPreference request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("SetSupportedLinksPreference");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AppServiceProxy::RemoveSupportedLinksPreference(
    ::apps::mojom::AppType in_app_type, const std::string& in_app_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::AppService::RemoveSupportedLinksPreference", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_type"), in_app_type,
                        "<value of type ::apps::mojom::AppType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_RemoveSupportedLinksPreference_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_RemoveSupportedLinksPreference_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::apps::mojom::AppType>(
      in_app_type, &params->app_type);
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in AppService.RemoveSupportedLinksPreference request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("RemoveSupportedLinksPreference");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AppServiceProxy::SetResizeLocked(
    ::apps::mojom::AppType in_app_type, const std::string& in_app_id, ::apps::mojom::OptionalBool in_locked) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::AppService::SetResizeLocked", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_type"), in_app_type,
                        "<value of type ::apps::mojom::AppType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("locked"), in_locked,
                        "<value of type ::apps::mojom::OptionalBool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_SetResizeLocked_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_SetResizeLocked_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::apps::mojom::AppType>(
      in_app_type, &params->app_type);
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in AppService.SetResizeLocked request");
  mojo::internal::Serialize<::apps::mojom::OptionalBool>(
      in_locked, &params->locked);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("SetResizeLocked");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AppServiceProxy::SetWindowMode(
    ::apps::mojom::AppType in_app_type, const std::string& in_app_id, ::apps::mojom::WindowMode in_window_mode) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::AppService::SetWindowMode", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_type"), in_app_type,
                        "<value of type ::apps::mojom::AppType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("window_mode"), in_window_mode,
                        "<value of type ::apps::mojom::WindowMode>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_SetWindowMode_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_SetWindowMode_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::apps::mojom::AppType>(
      in_app_type, &params->app_type);
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in AppService.SetWindowMode request");
  mojo::internal::Serialize<::apps::mojom::WindowMode>(
      in_window_mode, &params->window_mode);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("SetWindowMode");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AppServiceProxy::SetRunOnOsLoginMode(
    ::apps::mojom::AppType in_app_type, const std::string& in_app_id, ::apps::mojom::RunOnOsLoginMode in_run_on_os_login_mode) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::AppService::SetRunOnOsLoginMode", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_type"), in_app_type,
                        "<value of type ::apps::mojom::AppType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("run_on_os_login_mode"), in_run_on_os_login_mode,
                        "<value of type ::apps::mojom::RunOnOsLoginMode>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_SetRunOnOsLoginMode_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_SetRunOnOsLoginMode_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::apps::mojom::AppType>(
      in_app_type, &params->app_type);
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in AppService.SetRunOnOsLoginMode request");
  mojo::internal::Serialize<::apps::mojom::RunOnOsLoginMode>(
      in_run_on_os_login_mode, &params->run_on_os_login_mode);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("SetRunOnOsLoginMode");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
class AppService_LaunchAppWithIntent_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static AppService::LaunchAppWithIntentCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<AppService_LaunchAppWithIntent_ProxyToResponder> proxy(
        new AppService_LaunchAppWithIntent_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&AppService_LaunchAppWithIntent_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~AppService_LaunchAppWithIntent_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  AppService_LaunchAppWithIntent_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "AppService::LaunchAppWithIntentCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success);
};

bool AppService_LaunchAppWithIntent_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::AppService_LaunchAppWithIntent_ResponseParams_Data* params =
      reinterpret_cast<
          internal::AppService_LaunchAppWithIntent_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  AppService_LaunchAppWithIntent_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AppService::Name_, 4, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success));
  return true;
}

void AppService_LaunchAppWithIntent_ProxyToResponder::Run(
    bool in_success) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply apps::mojom::AppService::LaunchAppWithIntent", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_LaunchAppWithIntent_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_LaunchAppWithIntent_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("LaunchAppWithIntent");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class AppService_GetMenuModel_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static AppService::GetMenuModelCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<AppService_GetMenuModel_ProxyToResponder> proxy(
        new AppService_GetMenuModel_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&AppService_GetMenuModel_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~AppService_GetMenuModel_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  AppService_GetMenuModel_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "AppService::GetMenuModelCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ::apps::mojom::MenuItemsPtr in_menu_items);
};

bool AppService_GetMenuModel_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::AppService_GetMenuModel_ResponseParams_Data* params =
      reinterpret_cast<
          internal::AppService_GetMenuModel_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ::apps::mojom::MenuItemsPtr p_menu_items{};
  AppService_GetMenuModel_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadMenuItems(&p_menu_items))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AppService::Name_, 10, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_menu_items));
  return true;
}

void AppService_GetMenuModel_ProxyToResponder::Run(
    ::apps::mojom::MenuItemsPtr in_menu_items) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply apps::mojom::AppService::GetMenuModel", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("menu_items"), in_menu_items,
                        "<value of type ::apps::mojom::MenuItemsPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppService_GetMenuModel_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::AppService_GetMenuModel_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->menu_items)::BaseType> menu_items_fragment(
          params.message());
  mojo::internal::Serialize<::apps::mojom::MenuItemsDataView>(
      in_menu_items, menu_items_fragment);
  params->menu_items.Set(
      menu_items_fragment.is_null() ? nullptr : menu_items_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->menu_items.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null menu_items in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppService::Name_);
  message.set_method_name("GetMenuModel");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool AppServiceStubDispatch::Accept(
    AppService* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAppService_RegisterPublisher_Name: {

      DCHECK(message->is_serialized());
      internal::AppService_RegisterPublisher_Params_Data* params =
          reinterpret_cast<internal::AppService_RegisterPublisher_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<Publisher> p_publisher{};
      ::apps::mojom::AppType p_app_type{};
      AppService_RegisterPublisher_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_publisher =
            input_data_view.TakePublisher<decltype(p_publisher)>();
      }
      if (success && !input_data_view.ReadAppType(&p_app_type))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppService::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RegisterPublisher(
std::move(p_publisher), 
std::move(p_app_type));
      return true;
    }
    case internal::kAppService_RegisterSubscriber_Name: {

      DCHECK(message->is_serialized());
      internal::AppService_RegisterSubscriber_Params_Data* params =
          reinterpret_cast<internal::AppService_RegisterSubscriber_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<Subscriber> p_subscriber{};
      ConnectOptionsPtr p_opts{};
      AppService_RegisterSubscriber_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_subscriber =
            input_data_view.TakeSubscriber<decltype(p_subscriber)>();
      }
      if (success && !input_data_view.ReadOpts(&p_opts))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppService::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RegisterSubscriber(
std::move(p_subscriber), 
std::move(p_opts));
      return true;
    }
    case internal::kAppService_Launch_Name: {

      DCHECK(message->is_serialized());
      internal::AppService_Launch_Params_Data* params =
          reinterpret_cast<internal::AppService_Launch_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::apps::mojom::AppType p_app_type{};
      std::string p_app_id{};
      int32_t p_event_flags{};
      ::apps::mojom::LaunchSource p_launch_source{};
      ::apps::mojom::WindowInfoPtr p_window_info{};
      AppService_Launch_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppType(&p_app_type))
        success = false;
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success)
        p_event_flags = input_data_view.event_flags();
      if (success && !input_data_view.ReadLaunchSource(&p_launch_source))
        success = false;
      if (success && !input_data_view.ReadWindowInfo(&p_window_info))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppService::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Launch(
std::move(p_app_type), 
std::move(p_app_id), 
std::move(p_event_flags), 
std::move(p_launch_source), 
std::move(p_window_info));
      return true;
    }
    case internal::kAppService_LaunchAppWithFiles_Name: {

      DCHECK(message->is_serialized());
      internal::AppService_LaunchAppWithFiles_Params_Data* params =
          reinterpret_cast<internal::AppService_LaunchAppWithFiles_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::apps::mojom::AppType p_app_type{};
      std::string p_app_id{};
      int32_t p_event_flags{};
      ::apps::mojom::LaunchSource p_launch_source{};
      ::apps::mojom::FilePathsPtr p_file_paths{};
      AppService_LaunchAppWithFiles_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppType(&p_app_type))
        success = false;
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success)
        p_event_flags = input_data_view.event_flags();
      if (success && !input_data_view.ReadLaunchSource(&p_launch_source))
        success = false;
      if (success && !input_data_view.ReadFilePaths(&p_file_paths))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppService::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->LaunchAppWithFiles(
std::move(p_app_type), 
std::move(p_app_id), 
std::move(p_event_flags), 
std::move(p_launch_source), 
std::move(p_file_paths));
      return true;
    }
    case internal::kAppService_LaunchAppWithIntent_Name: {
      break;
    }
    case internal::kAppService_SetPermission_Name: {

      DCHECK(message->is_serialized());
      internal::AppService_SetPermission_Params_Data* params =
          reinterpret_cast<internal::AppService_SetPermission_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::apps::mojom::AppType p_app_type{};
      std::string p_app_id{};
      ::apps::mojom::PermissionPtr p_permission{};
      AppService_SetPermission_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppType(&p_app_type))
        success = false;
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success && !input_data_view.ReadPermission(&p_permission))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppService::Name_, 5, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetPermission(
std::move(p_app_type), 
std::move(p_app_id), 
std::move(p_permission));
      return true;
    }
    case internal::kAppService_Uninstall_Name: {

      DCHECK(message->is_serialized());
      internal::AppService_Uninstall_Params_Data* params =
          reinterpret_cast<internal::AppService_Uninstall_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::apps::mojom::AppType p_app_type{};
      std::string p_app_id{};
      ::apps::mojom::UninstallSource p_uninstall_source{};
      bool p_clear_site_data{};
      bool p_report_abuse{};
      AppService_Uninstall_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppType(&p_app_type))
        success = false;
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success && !input_data_view.ReadUninstallSource(&p_uninstall_source))
        success = false;
      if (success)
        p_clear_site_data = input_data_view.clear_site_data();
      if (success)
        p_report_abuse = input_data_view.report_abuse();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppService::Name_, 6, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Uninstall(
std::move(p_app_type), 
std::move(p_app_id), 
std::move(p_uninstall_source), 
std::move(p_clear_site_data), 
std::move(p_report_abuse));
      return true;
    }
    case internal::kAppService_PauseApp_Name: {

      DCHECK(message->is_serialized());
      internal::AppService_PauseApp_Params_Data* params =
          reinterpret_cast<internal::AppService_PauseApp_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::apps::mojom::AppType p_app_type{};
      std::string p_app_id{};
      AppService_PauseApp_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppType(&p_app_type))
        success = false;
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppService::Name_, 7, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->PauseApp(
std::move(p_app_type), 
std::move(p_app_id));
      return true;
    }
    case internal::kAppService_UnpauseApp_Name: {

      DCHECK(message->is_serialized());
      internal::AppService_UnpauseApp_Params_Data* params =
          reinterpret_cast<internal::AppService_UnpauseApp_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::apps::mojom::AppType p_app_type{};
      std::string p_app_id{};
      AppService_UnpauseApp_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppType(&p_app_type))
        success = false;
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppService::Name_, 8, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->UnpauseApp(
std::move(p_app_type), 
std::move(p_app_id));
      return true;
    }
    case internal::kAppService_StopApp_Name: {

      DCHECK(message->is_serialized());
      internal::AppService_StopApp_Params_Data* params =
          reinterpret_cast<internal::AppService_StopApp_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::apps::mojom::AppType p_app_type{};
      std::string p_app_id{};
      AppService_StopApp_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppType(&p_app_type))
        success = false;
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppService::Name_, 9, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->StopApp(
std::move(p_app_type), 
std::move(p_app_id));
      return true;
    }
    case internal::kAppService_GetMenuModel_Name: {
      break;
    }
    case internal::kAppService_ExecuteContextMenuCommand_Name: {

      DCHECK(message->is_serialized());
      internal::AppService_ExecuteContextMenuCommand_Params_Data* params =
          reinterpret_cast<internal::AppService_ExecuteContextMenuCommand_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::apps::mojom::AppType p_app_type{};
      std::string p_app_id{};
      int32_t p_command_id{};
      std::string p_shortcut_id{};
      int64_t p_display_id{};
      AppService_ExecuteContextMenuCommand_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppType(&p_app_type))
        success = false;
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success)
        p_command_id = input_data_view.command_id();
      if (success && !input_data_view.ReadShortcutId(&p_shortcut_id))
        success = false;
      if (success)
        p_display_id = input_data_view.display_id();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppService::Name_, 11, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ExecuteContextMenuCommand(
std::move(p_app_type), 
std::move(p_app_id), 
std::move(p_command_id), 
std::move(p_shortcut_id), 
std::move(p_display_id));
      return true;
    }
    case internal::kAppService_OpenNativeSettings_Name: {

      DCHECK(message->is_serialized());
      internal::AppService_OpenNativeSettings_Params_Data* params =
          reinterpret_cast<internal::AppService_OpenNativeSettings_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::apps::mojom::AppType p_app_type{};
      std::string p_app_id{};
      AppService_OpenNativeSettings_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppType(&p_app_type))
        success = false;
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppService::Name_, 12, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OpenNativeSettings(
std::move(p_app_type), 
std::move(p_app_id));
      return true;
    }
    case internal::kAppService_AddPreferredApp_Name: {

      DCHECK(message->is_serialized());
      internal::AppService_AddPreferredApp_Params_Data* params =
          reinterpret_cast<internal::AppService_AddPreferredApp_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::apps::mojom::AppType p_app_type{};
      std::string p_app_id{};
      ::apps::mojom::IntentFilterPtr p_intent_filter{};
      ::apps::mojom::IntentPtr p_intent{};
      bool p_from_publisher{};
      AppService_AddPreferredApp_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppType(&p_app_type))
        success = false;
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success && !input_data_view.ReadIntentFilter(&p_intent_filter))
        success = false;
      if (success && !input_data_view.ReadIntent(&p_intent))
        success = false;
      if (success)
        p_from_publisher = input_data_view.from_publisher();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppService::Name_, 13, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AddPreferredApp(
std::move(p_app_type), 
std::move(p_app_id), 
std::move(p_intent_filter), 
std::move(p_intent), 
std::move(p_from_publisher));
      return true;
    }
    case internal::kAppService_RemovePreferredApp_Name: {

      DCHECK(message->is_serialized());
      internal::AppService_RemovePreferredApp_Params_Data* params =
          reinterpret_cast<internal::AppService_RemovePreferredApp_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::apps::mojom::AppType p_app_type{};
      std::string p_app_id{};
      AppService_RemovePreferredApp_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppType(&p_app_type))
        success = false;
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppService::Name_, 14, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RemovePreferredApp(
std::move(p_app_type), 
std::move(p_app_id));
      return true;
    }
    case internal::kAppService_SetSupportedLinksPreference_Name: {

      DCHECK(message->is_serialized());
      internal::AppService_SetSupportedLinksPreference_Params_Data* params =
          reinterpret_cast<internal::AppService_SetSupportedLinksPreference_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::apps::mojom::AppType p_app_type{};
      std::string p_app_id{};
      std::vector<::apps::mojom::IntentFilterPtr> p_all_link_filters{};
      AppService_SetSupportedLinksPreference_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppType(&p_app_type))
        success = false;
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success && !input_data_view.ReadAllLinkFilters(&p_all_link_filters))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppService::Name_, 15, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetSupportedLinksPreference(
std::move(p_app_type), 
std::move(p_app_id), 
std::move(p_all_link_filters));
      return true;
    }
    case internal::kAppService_RemoveSupportedLinksPreference_Name: {

      DCHECK(message->is_serialized());
      internal::AppService_RemoveSupportedLinksPreference_Params_Data* params =
          reinterpret_cast<internal::AppService_RemoveSupportedLinksPreference_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::apps::mojom::AppType p_app_type{};
      std::string p_app_id{};
      AppService_RemoveSupportedLinksPreference_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppType(&p_app_type))
        success = false;
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppService::Name_, 16, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RemoveSupportedLinksPreference(
std::move(p_app_type), 
std::move(p_app_id));
      return true;
    }
    case internal::kAppService_SetResizeLocked_Name: {

      DCHECK(message->is_serialized());
      internal::AppService_SetResizeLocked_Params_Data* params =
          reinterpret_cast<internal::AppService_SetResizeLocked_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::apps::mojom::AppType p_app_type{};
      std::string p_app_id{};
      ::apps::mojom::OptionalBool p_locked{};
      AppService_SetResizeLocked_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppType(&p_app_type))
        success = false;
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success && !input_data_view.ReadLocked(&p_locked))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppService::Name_, 17, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetResizeLocked(
std::move(p_app_type), 
std::move(p_app_id), 
std::move(p_locked));
      return true;
    }
    case internal::kAppService_SetWindowMode_Name: {

      DCHECK(message->is_serialized());
      internal::AppService_SetWindowMode_Params_Data* params =
          reinterpret_cast<internal::AppService_SetWindowMode_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::apps::mojom::AppType p_app_type{};
      std::string p_app_id{};
      ::apps::mojom::WindowMode p_window_mode{};
      AppService_SetWindowMode_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppType(&p_app_type))
        success = false;
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success && !input_data_view.ReadWindowMode(&p_window_mode))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppService::Name_, 18, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetWindowMode(
std::move(p_app_type), 
std::move(p_app_id), 
std::move(p_window_mode));
      return true;
    }
    case internal::kAppService_SetRunOnOsLoginMode_Name: {

      DCHECK(message->is_serialized());
      internal::AppService_SetRunOnOsLoginMode_Params_Data* params =
          reinterpret_cast<internal::AppService_SetRunOnOsLoginMode_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::apps::mojom::AppType p_app_type{};
      std::string p_app_id{};
      ::apps::mojom::RunOnOsLoginMode p_run_on_os_login_mode{};
      AppService_SetRunOnOsLoginMode_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppType(&p_app_type))
        success = false;
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success && !input_data_view.ReadRunOnOsLoginMode(&p_run_on_os_login_mode))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppService::Name_, 19, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetRunOnOsLoginMode(
std::move(p_app_type), 
std::move(p_app_id), 
std::move(p_run_on_os_login_mode));
      return true;
    }
  }
  return false;
}

// static
bool AppServiceStubDispatch::AcceptWithResponder(
    AppService* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kAppService_RegisterPublisher_Name: {
      break;
    }
    case internal::kAppService_RegisterSubscriber_Name: {
      break;
    }
    case internal::kAppService_Launch_Name: {
      break;
    }
    case internal::kAppService_LaunchAppWithFiles_Name: {
      break;
    }
    case internal::kAppService_LaunchAppWithIntent_Name: {

      internal::AppService_LaunchAppWithIntent_Params_Data* params =
          reinterpret_cast<
              internal::AppService_LaunchAppWithIntent_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::apps::mojom::AppType p_app_type{};
      std::string p_app_id{};
      int32_t p_event_flags{};
      ::apps::mojom::IntentPtr p_intent{};
      ::apps::mojom::LaunchSource p_launch_source{};
      ::apps::mojom::WindowInfoPtr p_window_info{};
      AppService_LaunchAppWithIntent_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppType(&p_app_type))
        success = false;
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success)
        p_event_flags = input_data_view.event_flags();
      if (success && !input_data_view.ReadIntent(&p_intent))
        success = false;
      if (success && !input_data_view.ReadLaunchSource(&p_launch_source))
        success = false;
      if (success && !input_data_view.ReadWindowInfo(&p_window_info))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppService::Name_, 4, false);
        return false;
      }
      AppService::LaunchAppWithIntentCallback callback =
          AppService_LaunchAppWithIntent_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->LaunchAppWithIntent(
std::move(p_app_type), 
std::move(p_app_id), 
std::move(p_event_flags), 
std::move(p_intent), 
std::move(p_launch_source), 
std::move(p_window_info), std::move(callback));
      return true;
    }
    case internal::kAppService_SetPermission_Name: {
      break;
    }
    case internal::kAppService_Uninstall_Name: {
      break;
    }
    case internal::kAppService_PauseApp_Name: {
      break;
    }
    case internal::kAppService_UnpauseApp_Name: {
      break;
    }
    case internal::kAppService_StopApp_Name: {
      break;
    }
    case internal::kAppService_GetMenuModel_Name: {

      internal::AppService_GetMenuModel_Params_Data* params =
          reinterpret_cast<
              internal::AppService_GetMenuModel_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::apps::mojom::AppType p_app_type{};
      std::string p_app_id{};
      ::apps::mojom::MenuType p_menu_type{};
      int64_t p_display_id{};
      AppService_GetMenuModel_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppType(&p_app_type))
        success = false;
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success && !input_data_view.ReadMenuType(&p_menu_type))
        success = false;
      if (success)
        p_display_id = input_data_view.display_id();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppService::Name_, 10, false);
        return false;
      }
      AppService::GetMenuModelCallback callback =
          AppService_GetMenuModel_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetMenuModel(
std::move(p_app_type), 
std::move(p_app_id), 
std::move(p_menu_type), 
std::move(p_display_id), std::move(callback));
      return true;
    }
    case internal::kAppService_ExecuteContextMenuCommand_Name: {
      break;
    }
    case internal::kAppService_OpenNativeSettings_Name: {
      break;
    }
    case internal::kAppService_AddPreferredApp_Name: {
      break;
    }
    case internal::kAppService_RemovePreferredApp_Name: {
      break;
    }
    case internal::kAppService_SetSupportedLinksPreference_Name: {
      break;
    }
    case internal::kAppService_RemoveSupportedLinksPreference_Name: {
      break;
    }
    case internal::kAppService_SetResizeLocked_Name: {
      break;
    }
    case internal::kAppService_SetWindowMode_Name: {
      break;
    }
    case internal::kAppService_SetRunOnOsLoginMode_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAppServiceValidationInfo[] = {
    {&internal::AppService_RegisterPublisher_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AppService_RegisterSubscriber_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AppService_Launch_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AppService_LaunchAppWithFiles_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AppService_LaunchAppWithIntent_Params_Data::Validate,
     &internal::AppService_LaunchAppWithIntent_ResponseParams_Data::Validate},
    {&internal::AppService_SetPermission_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AppService_Uninstall_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AppService_PauseApp_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AppService_UnpauseApp_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AppService_StopApp_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AppService_GetMenuModel_Params_Data::Validate,
     &internal::AppService_GetMenuModel_ResponseParams_Data::Validate},
    {&internal::AppService_ExecuteContextMenuCommand_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AppService_OpenNativeSettings_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AppService_AddPreferredApp_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AppService_RemovePreferredApp_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AppService_SetSupportedLinksPreference_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AppService_RemoveSupportedLinksPreference_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AppService_SetResizeLocked_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AppService_SetWindowMode_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AppService_SetRunOnOsLoginMode_Params_Data::Validate,
     nullptr /* no response */},
};

bool AppServiceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::apps::mojom::AppService::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAppServiceValidationInfo);
}

bool AppServiceResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::apps::mojom::AppService::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kAppServiceValidationInfo);
}
const char Publisher::Name_[] = "apps.mojom.Publisher";

Publisher::IPCStableHashFunction Publisher::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kPublisher_Connect_Name: {
      return &Publisher::Connect_Sym::IPCStableHash;
    }
    case internal::kPublisher_Launch_Name: {
      return &Publisher::Launch_Sym::IPCStableHash;
    }
    case internal::kPublisher_LaunchAppWithFiles_Name: {
      return &Publisher::LaunchAppWithFiles_Sym::IPCStableHash;
    }
    case internal::kPublisher_LaunchAppWithIntent_Name: {
      return &Publisher::LaunchAppWithIntent_Sym::IPCStableHash;
    }
    case internal::kPublisher_SetPermission_Name: {
      return &Publisher::SetPermission_Sym::IPCStableHash;
    }
    case internal::kPublisher_Uninstall_Name: {
      return &Publisher::Uninstall_Sym::IPCStableHash;
    }
    case internal::kPublisher_PauseApp_Name: {
      return &Publisher::PauseApp_Sym::IPCStableHash;
    }
    case internal::kPublisher_UnpauseApp_Name: {
      return &Publisher::UnpauseApp_Sym::IPCStableHash;
    }
    case internal::kPublisher_StopApp_Name: {
      return &Publisher::StopApp_Sym::IPCStableHash;
    }
    case internal::kPublisher_GetMenuModel_Name: {
      return &Publisher::GetMenuModel_Sym::IPCStableHash;
    }
    case internal::kPublisher_ExecuteContextMenuCommand_Name: {
      return &Publisher::ExecuteContextMenuCommand_Sym::IPCStableHash;
    }
    case internal::kPublisher_OpenNativeSettings_Name: {
      return &Publisher::OpenNativeSettings_Sym::IPCStableHash;
    }
    case internal::kPublisher_OnPreferredAppSet_Name: {
      return &Publisher::OnPreferredAppSet_Sym::IPCStableHash;
    }
    case internal::kPublisher_OnSupportedLinksPreferenceChanged_Name: {
      return &Publisher::OnSupportedLinksPreferenceChanged_Sym::IPCStableHash;
    }
    case internal::kPublisher_SetResizeLocked_Name: {
      return &Publisher::SetResizeLocked_Sym::IPCStableHash;
    }
    case internal::kPublisher_SetWindowMode_Name: {
      return &Publisher::SetWindowMode_Sym::IPCStableHash;
    }
    case internal::kPublisher_SetRunOnOsLoginMode_Name: {
      return &Publisher::SetRunOnOsLoginMode_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* Publisher::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kPublisher_Connect_Name:
            return "Receive apps::mojom::Publisher::Connect";
      case internal::kPublisher_Launch_Name:
            return "Receive apps::mojom::Publisher::Launch";
      case internal::kPublisher_LaunchAppWithFiles_Name:
            return "Receive apps::mojom::Publisher::LaunchAppWithFiles";
      case internal::kPublisher_LaunchAppWithIntent_Name:
            return "Receive apps::mojom::Publisher::LaunchAppWithIntent";
      case internal::kPublisher_SetPermission_Name:
            return "Receive apps::mojom::Publisher::SetPermission";
      case internal::kPublisher_Uninstall_Name:
            return "Receive apps::mojom::Publisher::Uninstall";
      case internal::kPublisher_PauseApp_Name:
            return "Receive apps::mojom::Publisher::PauseApp";
      case internal::kPublisher_UnpauseApp_Name:
            return "Receive apps::mojom::Publisher::UnpauseApp";
      case internal::kPublisher_StopApp_Name:
            return "Receive apps::mojom::Publisher::StopApp";
      case internal::kPublisher_GetMenuModel_Name:
            return "Receive apps::mojom::Publisher::GetMenuModel";
      case internal::kPublisher_ExecuteContextMenuCommand_Name:
            return "Receive apps::mojom::Publisher::ExecuteContextMenuCommand";
      case internal::kPublisher_OpenNativeSettings_Name:
            return "Receive apps::mojom::Publisher::OpenNativeSettings";
      case internal::kPublisher_OnPreferredAppSet_Name:
            return "Receive apps::mojom::Publisher::OnPreferredAppSet";
      case internal::kPublisher_OnSupportedLinksPreferenceChanged_Name:
            return "Receive apps::mojom::Publisher::OnSupportedLinksPreferenceChanged";
      case internal::kPublisher_SetResizeLocked_Name:
            return "Receive apps::mojom::Publisher::SetResizeLocked";
      case internal::kPublisher_SetWindowMode_Name:
            return "Receive apps::mojom::Publisher::SetWindowMode";
      case internal::kPublisher_SetRunOnOsLoginMode_Name:
            return "Receive apps::mojom::Publisher::SetRunOnOsLoginMode";
    }
  } else {
    switch (message.name()) {
      case internal::kPublisher_Connect_Name:
            return "Receive reply apps::mojom::Publisher::Connect";
      case internal::kPublisher_Launch_Name:
            return "Receive reply apps::mojom::Publisher::Launch";
      case internal::kPublisher_LaunchAppWithFiles_Name:
            return "Receive reply apps::mojom::Publisher::LaunchAppWithFiles";
      case internal::kPublisher_LaunchAppWithIntent_Name:
            return "Receive reply apps::mojom::Publisher::LaunchAppWithIntent";
      case internal::kPublisher_SetPermission_Name:
            return "Receive reply apps::mojom::Publisher::SetPermission";
      case internal::kPublisher_Uninstall_Name:
            return "Receive reply apps::mojom::Publisher::Uninstall";
      case internal::kPublisher_PauseApp_Name:
            return "Receive reply apps::mojom::Publisher::PauseApp";
      case internal::kPublisher_UnpauseApp_Name:
            return "Receive reply apps::mojom::Publisher::UnpauseApp";
      case internal::kPublisher_StopApp_Name:
            return "Receive reply apps::mojom::Publisher::StopApp";
      case internal::kPublisher_GetMenuModel_Name:
            return "Receive reply apps::mojom::Publisher::GetMenuModel";
      case internal::kPublisher_ExecuteContextMenuCommand_Name:
            return "Receive reply apps::mojom::Publisher::ExecuteContextMenuCommand";
      case internal::kPublisher_OpenNativeSettings_Name:
            return "Receive reply apps::mojom::Publisher::OpenNativeSettings";
      case internal::kPublisher_OnPreferredAppSet_Name:
            return "Receive reply apps::mojom::Publisher::OnPreferredAppSet";
      case internal::kPublisher_OnSupportedLinksPreferenceChanged_Name:
            return "Receive reply apps::mojom::Publisher::OnSupportedLinksPreferenceChanged";
      case internal::kPublisher_SetResizeLocked_Name:
            return "Receive reply apps::mojom::Publisher::SetResizeLocked";
      case internal::kPublisher_SetWindowMode_Name:
            return "Receive reply apps::mojom::Publisher::SetWindowMode";
      case internal::kPublisher_SetRunOnOsLoginMode_Name:
            return "Receive reply apps::mojom::Publisher::SetRunOnOsLoginMode";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t Publisher::Connect_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Publisher::Connect");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Publisher::Launch_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Publisher::Launch");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Publisher::LaunchAppWithFiles_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Publisher::LaunchAppWithFiles");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Publisher::LaunchAppWithIntent_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Publisher::LaunchAppWithIntent");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Publisher::SetPermission_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Publisher::SetPermission");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Publisher::Uninstall_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Publisher::Uninstall");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Publisher::PauseApp_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Publisher::PauseApp");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Publisher::UnpauseApp_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Publisher::UnpauseApp");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Publisher::StopApp_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Publisher::StopApp");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Publisher::GetMenuModel_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Publisher::GetMenuModel");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Publisher::ExecuteContextMenuCommand_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Publisher::ExecuteContextMenuCommand");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Publisher::OpenNativeSettings_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Publisher::OpenNativeSettings");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Publisher::OnPreferredAppSet_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Publisher::OnPreferredAppSet");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Publisher::OnSupportedLinksPreferenceChanged_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Publisher::OnSupportedLinksPreferenceChanged");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Publisher::SetResizeLocked_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Publisher::SetResizeLocked");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Publisher::SetWindowMode_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Publisher::SetWindowMode");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Publisher::SetRunOnOsLoginMode_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Publisher::SetRunOnOsLoginMode");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class Publisher_LaunchAppWithIntent_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Publisher_LaunchAppWithIntent_ForwardToCallback(
      Publisher::LaunchAppWithIntentCallback callback
      ) : callback_(std::move(callback)) {
  }

  Publisher_LaunchAppWithIntent_ForwardToCallback(const Publisher_LaunchAppWithIntent_ForwardToCallback&) = delete;
  Publisher_LaunchAppWithIntent_ForwardToCallback& operator=(const Publisher_LaunchAppWithIntent_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  Publisher::LaunchAppWithIntentCallback callback_;
};

class Publisher_GetMenuModel_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Publisher_GetMenuModel_ForwardToCallback(
      Publisher::GetMenuModelCallback callback
      ) : callback_(std::move(callback)) {
  }

  Publisher_GetMenuModel_ForwardToCallback(const Publisher_GetMenuModel_ForwardToCallback&) = delete;
  Publisher_GetMenuModel_ForwardToCallback& operator=(const Publisher_GetMenuModel_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  Publisher::GetMenuModelCallback callback_;
};

PublisherProxy::PublisherProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void PublisherProxy::Connect(
    ::mojo::PendingRemote<Subscriber> in_subscriber, ConnectOptionsPtr in_opts) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Publisher::Connect", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("subscriber"), in_subscriber,
                        "<value of type ::mojo::PendingRemote<Subscriber>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("opts"), in_opts,
                        "<value of type ConnectOptionsPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPublisher_Connect_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Publisher_Connect_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::apps::mojom::SubscriberInterfaceBase>>(
      in_subscriber, &params->subscriber, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->subscriber),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid subscriber in Publisher.Connect request");
  mojo::internal::MessageFragment<
      typename decltype(params->opts)::BaseType> opts_fragment(
          params.message());
  mojo::internal::Serialize<::apps::mojom::ConnectOptionsDataView>(
      in_opts, opts_fragment);
  params->opts.Set(
      opts_fragment.is_null() ? nullptr : opts_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Publisher::Name_);
  message.set_method_name("Connect");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PublisherProxy::Launch(
    const std::string& in_app_id, int32_t in_event_flags, ::apps::mojom::LaunchSource in_launch_source, ::apps::mojom::WindowInfoPtr in_window_info) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Publisher::Launch", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("event_flags"), in_event_flags,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("launch_source"), in_launch_source,
                        "<value of type ::apps::mojom::LaunchSource>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("window_info"), in_window_info,
                        "<value of type ::apps::mojom::WindowInfoPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPublisher_Launch_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Publisher_Launch_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in Publisher.Launch request");
  params->event_flags = in_event_flags;
  mojo::internal::Serialize<::apps::mojom::LaunchSource>(
      in_launch_source, &params->launch_source);
  mojo::internal::MessageFragment<
      typename decltype(params->window_info)::BaseType> window_info_fragment(
          params.message());
  mojo::internal::Serialize<::apps::mojom::WindowInfoDataView>(
      in_window_info, window_info_fragment);
  params->window_info.Set(
      window_info_fragment.is_null() ? nullptr : window_info_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Publisher::Name_);
  message.set_method_name("Launch");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PublisherProxy::LaunchAppWithFiles(
    const std::string& in_app_id, int32_t in_event_flags, ::apps::mojom::LaunchSource in_launch_source, ::apps::mojom::FilePathsPtr in_file_paths) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Publisher::LaunchAppWithFiles", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("event_flags"), in_event_flags,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("launch_source"), in_launch_source,
                        "<value of type ::apps::mojom::LaunchSource>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("file_paths"), in_file_paths,
                        "<value of type ::apps::mojom::FilePathsPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPublisher_LaunchAppWithFiles_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Publisher_LaunchAppWithFiles_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in Publisher.LaunchAppWithFiles request");
  params->event_flags = in_event_flags;
  mojo::internal::Serialize<::apps::mojom::LaunchSource>(
      in_launch_source, &params->launch_source);
  mojo::internal::MessageFragment<
      typename decltype(params->file_paths)::BaseType> file_paths_fragment(
          params.message());
  mojo::internal::Serialize<::apps::mojom::FilePathsDataView>(
      in_file_paths, file_paths_fragment);
  params->file_paths.Set(
      file_paths_fragment.is_null() ? nullptr : file_paths_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->file_paths.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null file_paths in Publisher.LaunchAppWithFiles request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Publisher::Name_);
  message.set_method_name("LaunchAppWithFiles");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PublisherProxy::LaunchAppWithIntent(
    const std::string& in_app_id, int32_t in_event_flags, ::apps::mojom::IntentPtr in_intent, ::apps::mojom::LaunchSource in_launch_source, ::apps::mojom::WindowInfoPtr in_window_info, LaunchAppWithIntentCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Publisher::LaunchAppWithIntent", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("event_flags"), in_event_flags,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("intent"), in_intent,
                        "<value of type ::apps::mojom::IntentPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("launch_source"), in_launch_source,
                        "<value of type ::apps::mojom::LaunchSource>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("window_info"), in_window_info,
                        "<value of type ::apps::mojom::WindowInfoPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPublisher_LaunchAppWithIntent_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Publisher_LaunchAppWithIntent_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in Publisher.LaunchAppWithIntent request");
  params->event_flags = in_event_flags;
  mojo::internal::MessageFragment<
      typename decltype(params->intent)::BaseType> intent_fragment(
          params.message());
  mojo::internal::Serialize<::apps::mojom::IntentDataView>(
      in_intent, intent_fragment);
  params->intent.Set(
      intent_fragment.is_null() ? nullptr : intent_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->intent.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null intent in Publisher.LaunchAppWithIntent request");
  mojo::internal::Serialize<::apps::mojom::LaunchSource>(
      in_launch_source, &params->launch_source);
  mojo::internal::MessageFragment<
      typename decltype(params->window_info)::BaseType> window_info_fragment(
          params.message());
  mojo::internal::Serialize<::apps::mojom::WindowInfoDataView>(
      in_window_info, window_info_fragment);
  params->window_info.Set(
      window_info_fragment.is_null() ? nullptr : window_info_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Publisher::Name_);
  message.set_method_name("LaunchAppWithIntent");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new Publisher_LaunchAppWithIntent_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void PublisherProxy::SetPermission(
    const std::string& in_app_id, ::apps::mojom::PermissionPtr in_permission) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Publisher::SetPermission", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("permission"), in_permission,
                        "<value of type ::apps::mojom::PermissionPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPublisher_SetPermission_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Publisher_SetPermission_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in Publisher.SetPermission request");
  mojo::internal::MessageFragment<
      typename decltype(params->permission)::BaseType> permission_fragment(
          params.message());
  mojo::internal::Serialize<::apps::mojom::PermissionDataView>(
      in_permission, permission_fragment);
  params->permission.Set(
      permission_fragment.is_null() ? nullptr : permission_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->permission.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null permission in Publisher.SetPermission request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Publisher::Name_);
  message.set_method_name("SetPermission");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PublisherProxy::Uninstall(
    const std::string& in_app_id, ::apps::mojom::UninstallSource in_uninstall_source, bool in_clear_site_data, bool in_report_abuse) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Publisher::Uninstall", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("uninstall_source"), in_uninstall_source,
                        "<value of type ::apps::mojom::UninstallSource>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("clear_site_data"), in_clear_site_data,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("report_abuse"), in_report_abuse,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPublisher_Uninstall_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Publisher_Uninstall_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in Publisher.Uninstall request");
  mojo::internal::Serialize<::apps::mojom::UninstallSource>(
      in_uninstall_source, &params->uninstall_source);
  params->clear_site_data = in_clear_site_data;
  params->report_abuse = in_report_abuse;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Publisher::Name_);
  message.set_method_name("Uninstall");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PublisherProxy::PauseApp(
    const std::string& in_app_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Publisher::PauseApp", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPublisher_PauseApp_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Publisher_PauseApp_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in Publisher.PauseApp request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Publisher::Name_);
  message.set_method_name("PauseApp");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PublisherProxy::UnpauseApp(
    const std::string& in_app_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Publisher::UnpauseApp", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPublisher_UnpauseApp_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Publisher_UnpauseApp_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in Publisher.UnpauseApp request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Publisher::Name_);
  message.set_method_name("UnpauseApp");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PublisherProxy::StopApp(
    const std::string& in_app_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Publisher::StopApp", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPublisher_StopApp_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Publisher_StopApp_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in Publisher.StopApp request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Publisher::Name_);
  message.set_method_name("StopApp");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PublisherProxy::GetMenuModel(
    const std::string& in_app_id, ::apps::mojom::MenuType in_menu_type, int64_t in_display_id, GetMenuModelCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Publisher::GetMenuModel", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("menu_type"), in_menu_type,
                        "<value of type ::apps::mojom::MenuType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("display_id"), in_display_id,
                        "<value of type int64_t>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPublisher_GetMenuModel_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Publisher_GetMenuModel_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in Publisher.GetMenuModel request");
  mojo::internal::Serialize<::apps::mojom::MenuType>(
      in_menu_type, &params->menu_type);
  params->display_id = in_display_id;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Publisher::Name_);
  message.set_method_name("GetMenuModel");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new Publisher_GetMenuModel_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void PublisherProxy::ExecuteContextMenuCommand(
    const std::string& in_app_id, int32_t in_command_id, const std::string& in_shortcut_id, int64_t in_display_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Publisher::ExecuteContextMenuCommand", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("command_id"), in_command_id,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("shortcut_id"), in_shortcut_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("display_id"), in_display_id,
                        "<value of type int64_t>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPublisher_ExecuteContextMenuCommand_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Publisher_ExecuteContextMenuCommand_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in Publisher.ExecuteContextMenuCommand request");
  params->command_id = in_command_id;
  mojo::internal::MessageFragment<
      typename decltype(params->shortcut_id)::BaseType> shortcut_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_shortcut_id, shortcut_id_fragment);
  params->shortcut_id.Set(
      shortcut_id_fragment.is_null() ? nullptr : shortcut_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->shortcut_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null shortcut_id in Publisher.ExecuteContextMenuCommand request");
  params->display_id = in_display_id;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Publisher::Name_);
  message.set_method_name("ExecuteContextMenuCommand");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PublisherProxy::OpenNativeSettings(
    const std::string& in_app_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Publisher::OpenNativeSettings", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPublisher_OpenNativeSettings_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Publisher_OpenNativeSettings_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in Publisher.OpenNativeSettings request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Publisher::Name_);
  message.set_method_name("OpenNativeSettings");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PublisherProxy::OnPreferredAppSet(
    const std::string& in_app_id, ::apps::mojom::IntentFilterPtr in_intent_filter, ::apps::mojom::IntentPtr in_intent, ::apps::mojom::ReplacedAppPreferencesPtr in_replaced_app_preferences) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Publisher::OnPreferredAppSet", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("intent_filter"), in_intent_filter,
                        "<value of type ::apps::mojom::IntentFilterPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("intent"), in_intent,
                        "<value of type ::apps::mojom::IntentPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("replaced_app_preferences"), in_replaced_app_preferences,
                        "<value of type ::apps::mojom::ReplacedAppPreferencesPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPublisher_OnPreferredAppSet_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Publisher_OnPreferredAppSet_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in Publisher.OnPreferredAppSet request");
  mojo::internal::MessageFragment<
      typename decltype(params->intent_filter)::BaseType> intent_filter_fragment(
          params.message());
  mojo::internal::Serialize<::apps::mojom::IntentFilterDataView>(
      in_intent_filter, intent_filter_fragment);
  params->intent_filter.Set(
      intent_filter_fragment.is_null() ? nullptr : intent_filter_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->intent_filter.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null intent_filter in Publisher.OnPreferredAppSet request");
  mojo::internal::MessageFragment<
      typename decltype(params->intent)::BaseType> intent_fragment(
          params.message());
  mojo::internal::Serialize<::apps::mojom::IntentDataView>(
      in_intent, intent_fragment);
  params->intent.Set(
      intent_fragment.is_null() ? nullptr : intent_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->intent.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null intent in Publisher.OnPreferredAppSet request");
  mojo::internal::MessageFragment<
      typename decltype(params->replaced_app_preferences)::BaseType> replaced_app_preferences_fragment(
          params.message());
  mojo::internal::Serialize<::apps::mojom::ReplacedAppPreferencesDataView>(
      in_replaced_app_preferences, replaced_app_preferences_fragment);
  params->replaced_app_preferences.Set(
      replaced_app_preferences_fragment.is_null() ? nullptr : replaced_app_preferences_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->replaced_app_preferences.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null replaced_app_preferences in Publisher.OnPreferredAppSet request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Publisher::Name_);
  message.set_method_name("OnPreferredAppSet");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PublisherProxy::OnSupportedLinksPreferenceChanged(
    const std::string& in_app_id, bool in_open_in_app) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Publisher::OnSupportedLinksPreferenceChanged", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("open_in_app"), in_open_in_app,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPublisher_OnSupportedLinksPreferenceChanged_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Publisher_OnSupportedLinksPreferenceChanged_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in Publisher.OnSupportedLinksPreferenceChanged request");
  params->open_in_app = in_open_in_app;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Publisher::Name_);
  message.set_method_name("OnSupportedLinksPreferenceChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PublisherProxy::SetResizeLocked(
    const std::string& in_app_id, ::apps::mojom::OptionalBool in_locked) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Publisher::SetResizeLocked", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("locked"), in_locked,
                        "<value of type ::apps::mojom::OptionalBool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPublisher_SetResizeLocked_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Publisher_SetResizeLocked_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in Publisher.SetResizeLocked request");
  mojo::internal::Serialize<::apps::mojom::OptionalBool>(
      in_locked, &params->locked);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Publisher::Name_);
  message.set_method_name("SetResizeLocked");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PublisherProxy::SetWindowMode(
    const std::string& in_app_id, ::apps::mojom::WindowMode in_window_mode) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Publisher::SetWindowMode", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("window_mode"), in_window_mode,
                        "<value of type ::apps::mojom::WindowMode>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPublisher_SetWindowMode_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Publisher_SetWindowMode_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in Publisher.SetWindowMode request");
  mojo::internal::Serialize<::apps::mojom::WindowMode>(
      in_window_mode, &params->window_mode);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Publisher::Name_);
  message.set_method_name("SetWindowMode");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PublisherProxy::SetRunOnOsLoginMode(
    const std::string& in_app_id, ::apps::mojom::RunOnOsLoginMode in_run_on_os_login_mode) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Publisher::SetRunOnOsLoginMode", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_id"), in_app_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("run_on_os_login_mode"), in_run_on_os_login_mode,
                        "<value of type ::apps::mojom::RunOnOsLoginMode>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPublisher_SetRunOnOsLoginMode_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Publisher_SetRunOnOsLoginMode_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->app_id)::BaseType> app_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_app_id, app_id_fragment);
  params->app_id.Set(
      app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_id in Publisher.SetRunOnOsLoginMode request");
  mojo::internal::Serialize<::apps::mojom::RunOnOsLoginMode>(
      in_run_on_os_login_mode, &params->run_on_os_login_mode);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Publisher::Name_);
  message.set_method_name("SetRunOnOsLoginMode");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
class Publisher_LaunchAppWithIntent_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static Publisher::LaunchAppWithIntentCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<Publisher_LaunchAppWithIntent_ProxyToResponder> proxy(
        new Publisher_LaunchAppWithIntent_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&Publisher_LaunchAppWithIntent_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~Publisher_LaunchAppWithIntent_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  Publisher_LaunchAppWithIntent_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "Publisher::LaunchAppWithIntentCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success);
};

bool Publisher_LaunchAppWithIntent_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::Publisher_LaunchAppWithIntent_ResponseParams_Data* params =
      reinterpret_cast<
          internal::Publisher_LaunchAppWithIntent_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  Publisher_LaunchAppWithIntent_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        Publisher::Name_, 3, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success));
  return true;
}

void Publisher_LaunchAppWithIntent_ProxyToResponder::Run(
    bool in_success) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply apps::mojom::Publisher::LaunchAppWithIntent", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPublisher_LaunchAppWithIntent_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Publisher_LaunchAppWithIntent_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Publisher::Name_);
  message.set_method_name("LaunchAppWithIntent");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class Publisher_GetMenuModel_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static Publisher::GetMenuModelCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<Publisher_GetMenuModel_ProxyToResponder> proxy(
        new Publisher_GetMenuModel_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&Publisher_GetMenuModel_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~Publisher_GetMenuModel_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  Publisher_GetMenuModel_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "Publisher::GetMenuModelCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ::apps::mojom::MenuItemsPtr in_menu_items);
};

bool Publisher_GetMenuModel_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::Publisher_GetMenuModel_ResponseParams_Data* params =
      reinterpret_cast<
          internal::Publisher_GetMenuModel_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ::apps::mojom::MenuItemsPtr p_menu_items{};
  Publisher_GetMenuModel_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadMenuItems(&p_menu_items))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        Publisher::Name_, 9, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_menu_items));
  return true;
}

void Publisher_GetMenuModel_ProxyToResponder::Run(
    ::apps::mojom::MenuItemsPtr in_menu_items) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply apps::mojom::Publisher::GetMenuModel", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("menu_items"), in_menu_items,
                        "<value of type ::apps::mojom::MenuItemsPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPublisher_GetMenuModel_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Publisher_GetMenuModel_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->menu_items)::BaseType> menu_items_fragment(
          params.message());
  mojo::internal::Serialize<::apps::mojom::MenuItemsDataView>(
      in_menu_items, menu_items_fragment);
  params->menu_items.Set(
      menu_items_fragment.is_null() ? nullptr : menu_items_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->menu_items.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null menu_items in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Publisher::Name_);
  message.set_method_name("GetMenuModel");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool PublisherStubDispatch::Accept(
    Publisher* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kPublisher_Connect_Name: {

      DCHECK(message->is_serialized());
      internal::Publisher_Connect_Params_Data* params =
          reinterpret_cast<internal::Publisher_Connect_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<Subscriber> p_subscriber{};
      ConnectOptionsPtr p_opts{};
      Publisher_Connect_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_subscriber =
            input_data_view.TakeSubscriber<decltype(p_subscriber)>();
      }
      if (success && !input_data_view.ReadOpts(&p_opts))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Publisher::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Connect(
std::move(p_subscriber), 
std::move(p_opts));
      return true;
    }
    case internal::kPublisher_Launch_Name: {

      DCHECK(message->is_serialized());
      internal::Publisher_Launch_Params_Data* params =
          reinterpret_cast<internal::Publisher_Launch_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_app_id{};
      int32_t p_event_flags{};
      ::apps::mojom::LaunchSource p_launch_source{};
      ::apps::mojom::WindowInfoPtr p_window_info{};
      Publisher_Launch_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success)
        p_event_flags = input_data_view.event_flags();
      if (success && !input_data_view.ReadLaunchSource(&p_launch_source))
        success = false;
      if (success && !input_data_view.ReadWindowInfo(&p_window_info))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Publisher::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Launch(
std::move(p_app_id), 
std::move(p_event_flags), 
std::move(p_launch_source), 
std::move(p_window_info));
      return true;
    }
    case internal::kPublisher_LaunchAppWithFiles_Name: {

      DCHECK(message->is_serialized());
      internal::Publisher_LaunchAppWithFiles_Params_Data* params =
          reinterpret_cast<internal::Publisher_LaunchAppWithFiles_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_app_id{};
      int32_t p_event_flags{};
      ::apps::mojom::LaunchSource p_launch_source{};
      ::apps::mojom::FilePathsPtr p_file_paths{};
      Publisher_LaunchAppWithFiles_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success)
        p_event_flags = input_data_view.event_flags();
      if (success && !input_data_view.ReadLaunchSource(&p_launch_source))
        success = false;
      if (success && !input_data_view.ReadFilePaths(&p_file_paths))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Publisher::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->LaunchAppWithFiles(
std::move(p_app_id), 
std::move(p_event_flags), 
std::move(p_launch_source), 
std::move(p_file_paths));
      return true;
    }
    case internal::kPublisher_LaunchAppWithIntent_Name: {
      break;
    }
    case internal::kPublisher_SetPermission_Name: {

      DCHECK(message->is_serialized());
      internal::Publisher_SetPermission_Params_Data* params =
          reinterpret_cast<internal::Publisher_SetPermission_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_app_id{};
      ::apps::mojom::PermissionPtr p_permission{};
      Publisher_SetPermission_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success && !input_data_view.ReadPermission(&p_permission))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Publisher::Name_, 4, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetPermission(
std::move(p_app_id), 
std::move(p_permission));
      return true;
    }
    case internal::kPublisher_Uninstall_Name: {

      DCHECK(message->is_serialized());
      internal::Publisher_Uninstall_Params_Data* params =
          reinterpret_cast<internal::Publisher_Uninstall_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_app_id{};
      ::apps::mojom::UninstallSource p_uninstall_source{};
      bool p_clear_site_data{};
      bool p_report_abuse{};
      Publisher_Uninstall_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success && !input_data_view.ReadUninstallSource(&p_uninstall_source))
        success = false;
      if (success)
        p_clear_site_data = input_data_view.clear_site_data();
      if (success)
        p_report_abuse = input_data_view.report_abuse();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Publisher::Name_, 5, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Uninstall(
std::move(p_app_id), 
std::move(p_uninstall_source), 
std::move(p_clear_site_data), 
std::move(p_report_abuse));
      return true;
    }
    case internal::kPublisher_PauseApp_Name: {

      DCHECK(message->is_serialized());
      internal::Publisher_PauseApp_Params_Data* params =
          reinterpret_cast<internal::Publisher_PauseApp_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_app_id{};
      Publisher_PauseApp_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Publisher::Name_, 6, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->PauseApp(
std::move(p_app_id));
      return true;
    }
    case internal::kPublisher_UnpauseApp_Name: {

      DCHECK(message->is_serialized());
      internal::Publisher_UnpauseApp_Params_Data* params =
          reinterpret_cast<internal::Publisher_UnpauseApp_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_app_id{};
      Publisher_UnpauseApp_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Publisher::Name_, 7, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->UnpauseApp(
std::move(p_app_id));
      return true;
    }
    case internal::kPublisher_StopApp_Name: {

      DCHECK(message->is_serialized());
      internal::Publisher_StopApp_Params_Data* params =
          reinterpret_cast<internal::Publisher_StopApp_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_app_id{};
      Publisher_StopApp_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Publisher::Name_, 8, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->StopApp(
std::move(p_app_id));
      return true;
    }
    case internal::kPublisher_GetMenuModel_Name: {
      break;
    }
    case internal::kPublisher_ExecuteContextMenuCommand_Name: {

      DCHECK(message->is_serialized());
      internal::Publisher_ExecuteContextMenuCommand_Params_Data* params =
          reinterpret_cast<internal::Publisher_ExecuteContextMenuCommand_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_app_id{};
      int32_t p_command_id{};
      std::string p_shortcut_id{};
      int64_t p_display_id{};
      Publisher_ExecuteContextMenuCommand_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success)
        p_command_id = input_data_view.command_id();
      if (success && !input_data_view.ReadShortcutId(&p_shortcut_id))
        success = false;
      if (success)
        p_display_id = input_data_view.display_id();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Publisher::Name_, 10, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ExecuteContextMenuCommand(
std::move(p_app_id), 
std::move(p_command_id), 
std::move(p_shortcut_id), 
std::move(p_display_id));
      return true;
    }
    case internal::kPublisher_OpenNativeSettings_Name: {

      DCHECK(message->is_serialized());
      internal::Publisher_OpenNativeSettings_Params_Data* params =
          reinterpret_cast<internal::Publisher_OpenNativeSettings_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_app_id{};
      Publisher_OpenNativeSettings_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Publisher::Name_, 11, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OpenNativeSettings(
std::move(p_app_id));
      return true;
    }
    case internal::kPublisher_OnPreferredAppSet_Name: {

      DCHECK(message->is_serialized());
      internal::Publisher_OnPreferredAppSet_Params_Data* params =
          reinterpret_cast<internal::Publisher_OnPreferredAppSet_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_app_id{};
      ::apps::mojom::IntentFilterPtr p_intent_filter{};
      ::apps::mojom::IntentPtr p_intent{};
      ::apps::mojom::ReplacedAppPreferencesPtr p_replaced_app_preferences{};
      Publisher_OnPreferredAppSet_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success && !input_data_view.ReadIntentFilter(&p_intent_filter))
        success = false;
      if (success && !input_data_view.ReadIntent(&p_intent))
        success = false;
      if (success && !input_data_view.ReadReplacedAppPreferences(&p_replaced_app_preferences))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Publisher::Name_, 12, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnPreferredAppSet(
std::move(p_app_id), 
std::move(p_intent_filter), 
std::move(p_intent), 
std::move(p_replaced_app_preferences));
      return true;
    }
    case internal::kPublisher_OnSupportedLinksPreferenceChanged_Name: {

      DCHECK(message->is_serialized());
      internal::Publisher_OnSupportedLinksPreferenceChanged_Params_Data* params =
          reinterpret_cast<internal::Publisher_OnSupportedLinksPreferenceChanged_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_app_id{};
      bool p_open_in_app{};
      Publisher_OnSupportedLinksPreferenceChanged_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success)
        p_open_in_app = input_data_view.open_in_app();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Publisher::Name_, 13, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnSupportedLinksPreferenceChanged(
std::move(p_app_id), 
std::move(p_open_in_app));
      return true;
    }
    case internal::kPublisher_SetResizeLocked_Name: {

      DCHECK(message->is_serialized());
      internal::Publisher_SetResizeLocked_Params_Data* params =
          reinterpret_cast<internal::Publisher_SetResizeLocked_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_app_id{};
      ::apps::mojom::OptionalBool p_locked{};
      Publisher_SetResizeLocked_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success && !input_data_view.ReadLocked(&p_locked))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Publisher::Name_, 14, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetResizeLocked(
std::move(p_app_id), 
std::move(p_locked));
      return true;
    }
    case internal::kPublisher_SetWindowMode_Name: {

      DCHECK(message->is_serialized());
      internal::Publisher_SetWindowMode_Params_Data* params =
          reinterpret_cast<internal::Publisher_SetWindowMode_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_app_id{};
      ::apps::mojom::WindowMode p_window_mode{};
      Publisher_SetWindowMode_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success && !input_data_view.ReadWindowMode(&p_window_mode))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Publisher::Name_, 15, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetWindowMode(
std::move(p_app_id), 
std::move(p_window_mode));
      return true;
    }
    case internal::kPublisher_SetRunOnOsLoginMode_Name: {

      DCHECK(message->is_serialized());
      internal::Publisher_SetRunOnOsLoginMode_Params_Data* params =
          reinterpret_cast<internal::Publisher_SetRunOnOsLoginMode_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_app_id{};
      ::apps::mojom::RunOnOsLoginMode p_run_on_os_login_mode{};
      Publisher_SetRunOnOsLoginMode_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success && !input_data_view.ReadRunOnOsLoginMode(&p_run_on_os_login_mode))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Publisher::Name_, 16, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetRunOnOsLoginMode(
std::move(p_app_id), 
std::move(p_run_on_os_login_mode));
      return true;
    }
  }
  return false;
}

// static
bool PublisherStubDispatch::AcceptWithResponder(
    Publisher* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kPublisher_Connect_Name: {
      break;
    }
    case internal::kPublisher_Launch_Name: {
      break;
    }
    case internal::kPublisher_LaunchAppWithFiles_Name: {
      break;
    }
    case internal::kPublisher_LaunchAppWithIntent_Name: {

      internal::Publisher_LaunchAppWithIntent_Params_Data* params =
          reinterpret_cast<
              internal::Publisher_LaunchAppWithIntent_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::string p_app_id{};
      int32_t p_event_flags{};
      ::apps::mojom::IntentPtr p_intent{};
      ::apps::mojom::LaunchSource p_launch_source{};
      ::apps::mojom::WindowInfoPtr p_window_info{};
      Publisher_LaunchAppWithIntent_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success)
        p_event_flags = input_data_view.event_flags();
      if (success && !input_data_view.ReadIntent(&p_intent))
        success = false;
      if (success && !input_data_view.ReadLaunchSource(&p_launch_source))
        success = false;
      if (success && !input_data_view.ReadWindowInfo(&p_window_info))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Publisher::Name_, 3, false);
        return false;
      }
      Publisher::LaunchAppWithIntentCallback callback =
          Publisher_LaunchAppWithIntent_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->LaunchAppWithIntent(
std::move(p_app_id), 
std::move(p_event_flags), 
std::move(p_intent), 
std::move(p_launch_source), 
std::move(p_window_info), std::move(callback));
      return true;
    }
    case internal::kPublisher_SetPermission_Name: {
      break;
    }
    case internal::kPublisher_Uninstall_Name: {
      break;
    }
    case internal::kPublisher_PauseApp_Name: {
      break;
    }
    case internal::kPublisher_UnpauseApp_Name: {
      break;
    }
    case internal::kPublisher_StopApp_Name: {
      break;
    }
    case internal::kPublisher_GetMenuModel_Name: {

      internal::Publisher_GetMenuModel_Params_Data* params =
          reinterpret_cast<
              internal::Publisher_GetMenuModel_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::string p_app_id{};
      ::apps::mojom::MenuType p_menu_type{};
      int64_t p_display_id{};
      Publisher_GetMenuModel_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAppId(&p_app_id))
        success = false;
      if (success && !input_data_view.ReadMenuType(&p_menu_type))
        success = false;
      if (success)
        p_display_id = input_data_view.display_id();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Publisher::Name_, 9, false);
        return false;
      }
      Publisher::GetMenuModelCallback callback =
          Publisher_GetMenuModel_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetMenuModel(
std::move(p_app_id), 
std::move(p_menu_type), 
std::move(p_display_id), std::move(callback));
      return true;
    }
    case internal::kPublisher_ExecuteContextMenuCommand_Name: {
      break;
    }
    case internal::kPublisher_OpenNativeSettings_Name: {
      break;
    }
    case internal::kPublisher_OnPreferredAppSet_Name: {
      break;
    }
    case internal::kPublisher_OnSupportedLinksPreferenceChanged_Name: {
      break;
    }
    case internal::kPublisher_SetResizeLocked_Name: {
      break;
    }
    case internal::kPublisher_SetWindowMode_Name: {
      break;
    }
    case internal::kPublisher_SetRunOnOsLoginMode_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kPublisherValidationInfo[] = {
    {&internal::Publisher_Connect_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::Publisher_Launch_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::Publisher_LaunchAppWithFiles_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::Publisher_LaunchAppWithIntent_Params_Data::Validate,
     &internal::Publisher_LaunchAppWithIntent_ResponseParams_Data::Validate},
    {&internal::Publisher_SetPermission_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::Publisher_Uninstall_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::Publisher_PauseApp_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::Publisher_UnpauseApp_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::Publisher_StopApp_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::Publisher_GetMenuModel_Params_Data::Validate,
     &internal::Publisher_GetMenuModel_ResponseParams_Data::Validate},
    {&internal::Publisher_ExecuteContextMenuCommand_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::Publisher_OpenNativeSettings_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::Publisher_OnPreferredAppSet_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::Publisher_OnSupportedLinksPreferenceChanged_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::Publisher_SetResizeLocked_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::Publisher_SetWindowMode_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::Publisher_SetRunOnOsLoginMode_Params_Data::Validate,
     nullptr /* no response */},
};

bool PublisherRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::apps::mojom::Publisher::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kPublisherValidationInfo);
}

bool PublisherResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::apps::mojom::Publisher::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kPublisherValidationInfo);
}
const char Subscriber::Name_[] = "apps.mojom.Subscriber";

Subscriber::IPCStableHashFunction Subscriber::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kSubscriber_OnApps_Name: {
      return &Subscriber::OnApps_Sym::IPCStableHash;
    }
    case internal::kSubscriber_OnCapabilityAccesses_Name: {
      return &Subscriber::OnCapabilityAccesses_Sym::IPCStableHash;
    }
    case internal::kSubscriber_Clone_Name: {
      return &Subscriber::Clone_Sym::IPCStableHash;
    }
    case internal::kSubscriber_OnPreferredAppsChanged_Name: {
      return &Subscriber::OnPreferredAppsChanged_Sym::IPCStableHash;
    }
    case internal::kSubscriber_InitializePreferredApps_Name: {
      return &Subscriber::InitializePreferredApps_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* Subscriber::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kSubscriber_OnApps_Name:
            return "Receive apps::mojom::Subscriber::OnApps";
      case internal::kSubscriber_OnCapabilityAccesses_Name:
            return "Receive apps::mojom::Subscriber::OnCapabilityAccesses";
      case internal::kSubscriber_Clone_Name:
            return "Receive apps::mojom::Subscriber::Clone";
      case internal::kSubscriber_OnPreferredAppsChanged_Name:
            return "Receive apps::mojom::Subscriber::OnPreferredAppsChanged";
      case internal::kSubscriber_InitializePreferredApps_Name:
            return "Receive apps::mojom::Subscriber::InitializePreferredApps";
    }
  } else {
    switch (message.name()) {
      case internal::kSubscriber_OnApps_Name:
            return "Receive reply apps::mojom::Subscriber::OnApps";
      case internal::kSubscriber_OnCapabilityAccesses_Name:
            return "Receive reply apps::mojom::Subscriber::OnCapabilityAccesses";
      case internal::kSubscriber_Clone_Name:
            return "Receive reply apps::mojom::Subscriber::Clone";
      case internal::kSubscriber_OnPreferredAppsChanged_Name:
            return "Receive reply apps::mojom::Subscriber::OnPreferredAppsChanged";
      case internal::kSubscriber_InitializePreferredApps_Name:
            return "Receive reply apps::mojom::Subscriber::InitializePreferredApps";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t Subscriber::OnApps_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Subscriber::OnApps");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Subscriber::OnCapabilityAccesses_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Subscriber::OnCapabilityAccesses");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Subscriber::Clone_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Subscriber::Clone");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Subscriber::OnPreferredAppsChanged_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Subscriber::OnPreferredAppsChanged");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t Subscriber::InitializePreferredApps_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)apps::mojom::Subscriber::InitializePreferredApps");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

SubscriberProxy::SubscriberProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void SubscriberProxy::OnApps(
    std::vector<::apps::mojom::AppPtr> in_deltas, ::apps::mojom::AppType in_app_type, bool in_should_notify_initialized) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Subscriber::OnApps", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("deltas"), in_deltas,
                        "<value of type std::vector<::apps::mojom::AppPtr>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_type"), in_app_type,
                        "<value of type ::apps::mojom::AppType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("should_notify_initialized"), in_should_notify_initialized,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSubscriber_OnApps_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Subscriber_OnApps_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->deltas)::BaseType>
      deltas_fragment(params.message());
  const mojo::internal::ContainerValidateParams deltas_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::apps::mojom::AppDataView>>(
      in_deltas, deltas_fragment, &deltas_validate_params);
  params->deltas.Set(
      deltas_fragment.is_null() ? nullptr : deltas_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->deltas.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null deltas in Subscriber.OnApps request");
  mojo::internal::Serialize<::apps::mojom::AppType>(
      in_app_type, &params->app_type);
  params->should_notify_initialized = in_should_notify_initialized;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Subscriber::Name_);
  message.set_method_name("OnApps");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void SubscriberProxy::OnCapabilityAccesses(
    std::vector<::apps::mojom::CapabilityAccessPtr> in_deltas) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Subscriber::OnCapabilityAccesses", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("deltas"), in_deltas,
                        "<value of type std::vector<::apps::mojom::CapabilityAccessPtr>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSubscriber_OnCapabilityAccesses_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Subscriber_OnCapabilityAccesses_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->deltas)::BaseType>
      deltas_fragment(params.message());
  const mojo::internal::ContainerValidateParams deltas_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::apps::mojom::CapabilityAccessDataView>>(
      in_deltas, deltas_fragment, &deltas_validate_params);
  params->deltas.Set(
      deltas_fragment.is_null() ? nullptr : deltas_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->deltas.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null deltas in Subscriber.OnCapabilityAccesses request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Subscriber::Name_);
  message.set_method_name("OnCapabilityAccesses");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void SubscriberProxy::Clone(
    ::mojo::PendingReceiver<Subscriber> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Subscriber::Clone", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<Subscriber>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSubscriber_Clone_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Subscriber_Clone_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::apps::mojom::SubscriberInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in Subscriber.Clone request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Subscriber::Name_);
  message.set_method_name("Clone");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void SubscriberProxy::OnPreferredAppsChanged(
    ::apps::mojom::PreferredAppChangesPtr in_changes) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Subscriber::OnPreferredAppsChanged", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("changes"), in_changes,
                        "<value of type ::apps::mojom::PreferredAppChangesPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSubscriber_OnPreferredAppsChanged_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Subscriber_OnPreferredAppsChanged_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->changes)::BaseType> changes_fragment(
          params.message());
  mojo::internal::Serialize<::apps::mojom::PreferredAppChangesDataView>(
      in_changes, changes_fragment);
  params->changes.Set(
      changes_fragment.is_null() ? nullptr : changes_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->changes.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null changes in Subscriber.OnPreferredAppsChanged request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Subscriber::Name_);
  message.set_method_name("OnPreferredAppsChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void SubscriberProxy::InitializePreferredApps(
    std::vector<::apps::mojom::PreferredAppPtr> in_preferred_apps) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send apps::mojom::Subscriber::InitializePreferredApps", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("preferred_apps"), in_preferred_apps,
                        "<value of type std::vector<::apps::mojom::PreferredAppPtr>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSubscriber_InitializePreferredApps_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::apps::mojom::internal::Subscriber_InitializePreferredApps_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->preferred_apps)::BaseType>
      preferred_apps_fragment(params.message());
  const mojo::internal::ContainerValidateParams preferred_apps_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::apps::mojom::PreferredAppDataView>>(
      in_preferred_apps, preferred_apps_fragment, &preferred_apps_validate_params);
  params->preferred_apps.Set(
      preferred_apps_fragment.is_null() ? nullptr : preferred_apps_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->preferred_apps.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null preferred_apps in Subscriber.InitializePreferredApps request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Subscriber::Name_);
  message.set_method_name("InitializePreferredApps");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool SubscriberStubDispatch::Accept(
    Subscriber* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kSubscriber_OnApps_Name: {

      DCHECK(message->is_serialized());
      internal::Subscriber_OnApps_Params_Data* params =
          reinterpret_cast<internal::Subscriber_OnApps_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::vector<::apps::mojom::AppPtr> p_deltas{};
      ::apps::mojom::AppType p_app_type{};
      bool p_should_notify_initialized{};
      Subscriber_OnApps_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadDeltas(&p_deltas))
        success = false;
      if (success && !input_data_view.ReadAppType(&p_app_type))
        success = false;
      if (success)
        p_should_notify_initialized = input_data_view.should_notify_initialized();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Subscriber::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnApps(
std::move(p_deltas), 
std::move(p_app_type), 
std::move(p_should_notify_initialized));
      return true;
    }
    case internal::kSubscriber_OnCapabilityAccesses_Name: {

      DCHECK(message->is_serialized());
      internal::Subscriber_OnCapabilityAccesses_Params_Data* params =
          reinterpret_cast<internal::Subscriber_OnCapabilityAccesses_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::vector<::apps::mojom::CapabilityAccessPtr> p_deltas{};
      Subscriber_OnCapabilityAccesses_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadDeltas(&p_deltas))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Subscriber::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnCapabilityAccesses(
std::move(p_deltas));
      return true;
    }
    case internal::kSubscriber_Clone_Name: {

      DCHECK(message->is_serialized());
      internal::Subscriber_Clone_Params_Data* params =
          reinterpret_cast<internal::Subscriber_Clone_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<Subscriber> p_receiver{};
      Subscriber_Clone_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Subscriber::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Clone(
std::move(p_receiver));
      return true;
    }
    case internal::kSubscriber_OnPreferredAppsChanged_Name: {

      DCHECK(message->is_serialized());
      internal::Subscriber_OnPreferredAppsChanged_Params_Data* params =
          reinterpret_cast<internal::Subscriber_OnPreferredAppsChanged_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::apps::mojom::PreferredAppChangesPtr p_changes{};
      Subscriber_OnPreferredAppsChanged_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadChanges(&p_changes))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Subscriber::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnPreferredAppsChanged(
std::move(p_changes));
      return true;
    }
    case internal::kSubscriber_InitializePreferredApps_Name: {

      DCHECK(message->is_serialized());
      internal::Subscriber_InitializePreferredApps_Params_Data* params =
          reinterpret_cast<internal::Subscriber_InitializePreferredApps_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::vector<::apps::mojom::PreferredAppPtr> p_preferred_apps{};
      Subscriber_InitializePreferredApps_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadPreferredApps(&p_preferred_apps))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Subscriber::Name_, 4, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->InitializePreferredApps(
std::move(p_preferred_apps));
      return true;
    }
  }
  return false;
}

// static
bool SubscriberStubDispatch::AcceptWithResponder(
    Subscriber* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kSubscriber_OnApps_Name: {
      break;
    }
    case internal::kSubscriber_OnCapabilityAccesses_Name: {
      break;
    }
    case internal::kSubscriber_Clone_Name: {
      break;
    }
    case internal::kSubscriber_OnPreferredAppsChanged_Name: {
      break;
    }
    case internal::kSubscriber_InitializePreferredApps_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kSubscriberValidationInfo[] = {
    {&internal::Subscriber_OnApps_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::Subscriber_OnCapabilityAccesses_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::Subscriber_Clone_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::Subscriber_OnPreferredAppsChanged_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::Subscriber_InitializePreferredApps_Params_Data::Validate,
     nullptr /* no response */},
};

bool SubscriberRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::apps::mojom::Subscriber::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kSubscriberValidationInfo);
}



}  // namespace mojom
}  // namespace apps


namespace mojo {


// static
bool StructTraits<::apps::mojom::ConnectOptions::DataView, ::apps::mojom::ConnectOptionsPtr>::Read(
    ::apps::mojom::ConnectOptions::DataView input,
    ::apps::mojom::ConnectOptionsPtr* output) {
  bool success = true;
  ::apps::mojom::ConnectOptionsPtr result(::apps::mojom::ConnectOptions::New());
  
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace apps {
namespace mojom {


void AppServiceInterceptorForTesting::RegisterPublisher(::mojo::PendingRemote<Publisher> publisher, ::apps::mojom::AppType app_type) {
  GetForwardingInterface()->RegisterPublisher(std::move(publisher), std::move(app_type));
}
void AppServiceInterceptorForTesting::RegisterSubscriber(::mojo::PendingRemote<Subscriber> subscriber, ConnectOptionsPtr opts) {
  GetForwardingInterface()->RegisterSubscriber(std::move(subscriber), std::move(opts));
}
void AppServiceInterceptorForTesting::Launch(::apps::mojom::AppType app_type, const std::string& app_id, int32_t event_flags, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::WindowInfoPtr window_info) {
  GetForwardingInterface()->Launch(std::move(app_type), std::move(app_id), std::move(event_flags), std::move(launch_source), std::move(window_info));
}
void AppServiceInterceptorForTesting::LaunchAppWithFiles(::apps::mojom::AppType app_type, const std::string& app_id, int32_t event_flags, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::FilePathsPtr file_paths) {
  GetForwardingInterface()->LaunchAppWithFiles(std::move(app_type), std::move(app_id), std::move(event_flags), std::move(launch_source), std::move(file_paths));
}
void AppServiceInterceptorForTesting::LaunchAppWithIntent(::apps::mojom::AppType app_type, const std::string& app_id, int32_t event_flags, ::apps::mojom::IntentPtr intent, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::WindowInfoPtr window_info, LaunchAppWithIntentCallback callback) {
  GetForwardingInterface()->LaunchAppWithIntent(std::move(app_type), std::move(app_id), std::move(event_flags), std::move(intent), std::move(launch_source), std::move(window_info), std::move(callback));
}
void AppServiceInterceptorForTesting::SetPermission(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::PermissionPtr permission) {
  GetForwardingInterface()->SetPermission(std::move(app_type), std::move(app_id), std::move(permission));
}
void AppServiceInterceptorForTesting::Uninstall(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::UninstallSource uninstall_source, bool clear_site_data, bool report_abuse) {
  GetForwardingInterface()->Uninstall(std::move(app_type), std::move(app_id), std::move(uninstall_source), std::move(clear_site_data), std::move(report_abuse));
}
void AppServiceInterceptorForTesting::PauseApp(::apps::mojom::AppType app_type, const std::string& app_id) {
  GetForwardingInterface()->PauseApp(std::move(app_type), std::move(app_id));
}
void AppServiceInterceptorForTesting::UnpauseApp(::apps::mojom::AppType app_type, const std::string& app_id) {
  GetForwardingInterface()->UnpauseApp(std::move(app_type), std::move(app_id));
}
void AppServiceInterceptorForTesting::StopApp(::apps::mojom::AppType app_type, const std::string& app_id) {
  GetForwardingInterface()->StopApp(std::move(app_type), std::move(app_id));
}
void AppServiceInterceptorForTesting::GetMenuModel(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::MenuType menu_type, int64_t display_id, GetMenuModelCallback callback) {
  GetForwardingInterface()->GetMenuModel(std::move(app_type), std::move(app_id), std::move(menu_type), std::move(display_id), std::move(callback));
}
void AppServiceInterceptorForTesting::ExecuteContextMenuCommand(::apps::mojom::AppType app_type, const std::string& app_id, int32_t command_id, const std::string& shortcut_id, int64_t display_id) {
  GetForwardingInterface()->ExecuteContextMenuCommand(std::move(app_type), std::move(app_id), std::move(command_id), std::move(shortcut_id), std::move(display_id));
}
void AppServiceInterceptorForTesting::OpenNativeSettings(::apps::mojom::AppType app_type, const std::string& app_id) {
  GetForwardingInterface()->OpenNativeSettings(std::move(app_type), std::move(app_id));
}
void AppServiceInterceptorForTesting::AddPreferredApp(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::IntentFilterPtr intent_filter, ::apps::mojom::IntentPtr intent, bool from_publisher) {
  GetForwardingInterface()->AddPreferredApp(std::move(app_type), std::move(app_id), std::move(intent_filter), std::move(intent), std::move(from_publisher));
}
void AppServiceInterceptorForTesting::RemovePreferredApp(::apps::mojom::AppType app_type, const std::string& app_id) {
  GetForwardingInterface()->RemovePreferredApp(std::move(app_type), std::move(app_id));
}
void AppServiceInterceptorForTesting::SetSupportedLinksPreference(::apps::mojom::AppType app_type, const std::string& app_id, std::vector<::apps::mojom::IntentFilterPtr> all_link_filters) {
  GetForwardingInterface()->SetSupportedLinksPreference(std::move(app_type), std::move(app_id), std::move(all_link_filters));
}
void AppServiceInterceptorForTesting::RemoveSupportedLinksPreference(::apps::mojom::AppType app_type, const std::string& app_id) {
  GetForwardingInterface()->RemoveSupportedLinksPreference(std::move(app_type), std::move(app_id));
}
void AppServiceInterceptorForTesting::SetResizeLocked(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::OptionalBool locked) {
  GetForwardingInterface()->SetResizeLocked(std::move(app_type), std::move(app_id), std::move(locked));
}
void AppServiceInterceptorForTesting::SetWindowMode(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::WindowMode window_mode) {
  GetForwardingInterface()->SetWindowMode(std::move(app_type), std::move(app_id), std::move(window_mode));
}
void AppServiceInterceptorForTesting::SetRunOnOsLoginMode(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::RunOnOsLoginMode run_on_os_login_mode) {
  GetForwardingInterface()->SetRunOnOsLoginMode(std::move(app_type), std::move(app_id), std::move(run_on_os_login_mode));
}
AppServiceAsyncWaiter::AppServiceAsyncWaiter(
    AppService* proxy) : proxy_(proxy) {}

AppServiceAsyncWaiter::~AppServiceAsyncWaiter() = default;

void AppServiceAsyncWaiter::LaunchAppWithIntent(
    ::apps::mojom::AppType app_type, const std::string& app_id, int32_t event_flags, ::apps::mojom::IntentPtr intent, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::WindowInfoPtr window_info, bool* out_success) {
  base::RunLoop loop;
  proxy_->LaunchAppWithIntent(std::move(app_type),std::move(app_id),std::move(event_flags),std::move(intent),std::move(launch_source),std::move(window_info),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}
void AppServiceAsyncWaiter::GetMenuModel(
    ::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::MenuType menu_type, int64_t display_id, ::apps::mojom::MenuItemsPtr* out_menu_items) {
  base::RunLoop loop;
  proxy_->GetMenuModel(std::move(app_type),std::move(app_id),std::move(menu_type),std::move(display_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::apps::mojom::MenuItemsPtr* out_menu_items
,
             ::apps::mojom::MenuItemsPtr menu_items) {*out_menu_items = std::move(menu_items);
            loop->Quit();
          },
          &loop,
          out_menu_items));
  loop.Run();
}



void PublisherInterceptorForTesting::Connect(::mojo::PendingRemote<Subscriber> subscriber, ConnectOptionsPtr opts) {
  GetForwardingInterface()->Connect(std::move(subscriber), std::move(opts));
}
void PublisherInterceptorForTesting::Launch(const std::string& app_id, int32_t event_flags, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::WindowInfoPtr window_info) {
  GetForwardingInterface()->Launch(std::move(app_id), std::move(event_flags), std::move(launch_source), std::move(window_info));
}
void PublisherInterceptorForTesting::LaunchAppWithFiles(const std::string& app_id, int32_t event_flags, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::FilePathsPtr file_paths) {
  GetForwardingInterface()->LaunchAppWithFiles(std::move(app_id), std::move(event_flags), std::move(launch_source), std::move(file_paths));
}
void PublisherInterceptorForTesting::LaunchAppWithIntent(const std::string& app_id, int32_t event_flags, ::apps::mojom::IntentPtr intent, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::WindowInfoPtr window_info, LaunchAppWithIntentCallback callback) {
  GetForwardingInterface()->LaunchAppWithIntent(std::move(app_id), std::move(event_flags), std::move(intent), std::move(launch_source), std::move(window_info), std::move(callback));
}
void PublisherInterceptorForTesting::SetPermission(const std::string& app_id, ::apps::mojom::PermissionPtr permission) {
  GetForwardingInterface()->SetPermission(std::move(app_id), std::move(permission));
}
void PublisherInterceptorForTesting::Uninstall(const std::string& app_id, ::apps::mojom::UninstallSource uninstall_source, bool clear_site_data, bool report_abuse) {
  GetForwardingInterface()->Uninstall(std::move(app_id), std::move(uninstall_source), std::move(clear_site_data), std::move(report_abuse));
}
void PublisherInterceptorForTesting::PauseApp(const std::string& app_id) {
  GetForwardingInterface()->PauseApp(std::move(app_id));
}
void PublisherInterceptorForTesting::UnpauseApp(const std::string& app_id) {
  GetForwardingInterface()->UnpauseApp(std::move(app_id));
}
void PublisherInterceptorForTesting::StopApp(const std::string& app_id) {
  GetForwardingInterface()->StopApp(std::move(app_id));
}
void PublisherInterceptorForTesting::GetMenuModel(const std::string& app_id, ::apps::mojom::MenuType menu_type, int64_t display_id, GetMenuModelCallback callback) {
  GetForwardingInterface()->GetMenuModel(std::move(app_id), std::move(menu_type), std::move(display_id), std::move(callback));
}
void PublisherInterceptorForTesting::ExecuteContextMenuCommand(const std::string& app_id, int32_t command_id, const std::string& shortcut_id, int64_t display_id) {
  GetForwardingInterface()->ExecuteContextMenuCommand(std::move(app_id), std::move(command_id), std::move(shortcut_id), std::move(display_id));
}
void PublisherInterceptorForTesting::OpenNativeSettings(const std::string& app_id) {
  GetForwardingInterface()->OpenNativeSettings(std::move(app_id));
}
void PublisherInterceptorForTesting::OnPreferredAppSet(const std::string& app_id, ::apps::mojom::IntentFilterPtr intent_filter, ::apps::mojom::IntentPtr intent, ::apps::mojom::ReplacedAppPreferencesPtr replaced_app_preferences) {
  GetForwardingInterface()->OnPreferredAppSet(std::move(app_id), std::move(intent_filter), std::move(intent), std::move(replaced_app_preferences));
}
void PublisherInterceptorForTesting::OnSupportedLinksPreferenceChanged(const std::string& app_id, bool open_in_app) {
  GetForwardingInterface()->OnSupportedLinksPreferenceChanged(std::move(app_id), std::move(open_in_app));
}
void PublisherInterceptorForTesting::SetResizeLocked(const std::string& app_id, ::apps::mojom::OptionalBool locked) {
  GetForwardingInterface()->SetResizeLocked(std::move(app_id), std::move(locked));
}
void PublisherInterceptorForTesting::SetWindowMode(const std::string& app_id, ::apps::mojom::WindowMode window_mode) {
  GetForwardingInterface()->SetWindowMode(std::move(app_id), std::move(window_mode));
}
void PublisherInterceptorForTesting::SetRunOnOsLoginMode(const std::string& app_id, ::apps::mojom::RunOnOsLoginMode run_on_os_login_mode) {
  GetForwardingInterface()->SetRunOnOsLoginMode(std::move(app_id), std::move(run_on_os_login_mode));
}
PublisherAsyncWaiter::PublisherAsyncWaiter(
    Publisher* proxy) : proxy_(proxy) {}

PublisherAsyncWaiter::~PublisherAsyncWaiter() = default;

void PublisherAsyncWaiter::LaunchAppWithIntent(
    const std::string& app_id, int32_t event_flags, ::apps::mojom::IntentPtr intent, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::WindowInfoPtr window_info, bool* out_success) {
  base::RunLoop loop;
  proxy_->LaunchAppWithIntent(std::move(app_id),std::move(event_flags),std::move(intent),std::move(launch_source),std::move(window_info),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}
void PublisherAsyncWaiter::GetMenuModel(
    const std::string& app_id, ::apps::mojom::MenuType menu_type, int64_t display_id, ::apps::mojom::MenuItemsPtr* out_menu_items) {
  base::RunLoop loop;
  proxy_->GetMenuModel(std::move(app_id),std::move(menu_type),std::move(display_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::apps::mojom::MenuItemsPtr* out_menu_items
,
             ::apps::mojom::MenuItemsPtr menu_items) {*out_menu_items = std::move(menu_items);
            loop->Quit();
          },
          &loop,
          out_menu_items));
  loop.Run();
}



void SubscriberInterceptorForTesting::OnApps(std::vector<::apps::mojom::AppPtr> deltas, ::apps::mojom::AppType app_type, bool should_notify_initialized) {
  GetForwardingInterface()->OnApps(std::move(deltas), std::move(app_type), std::move(should_notify_initialized));
}
void SubscriberInterceptorForTesting::OnCapabilityAccesses(std::vector<::apps::mojom::CapabilityAccessPtr> deltas) {
  GetForwardingInterface()->OnCapabilityAccesses(std::move(deltas));
}
void SubscriberInterceptorForTesting::Clone(::mojo::PendingReceiver<Subscriber> receiver) {
  GetForwardingInterface()->Clone(std::move(receiver));
}
void SubscriberInterceptorForTesting::OnPreferredAppsChanged(::apps::mojom::PreferredAppChangesPtr changes) {
  GetForwardingInterface()->OnPreferredAppsChanged(std::move(changes));
}
void SubscriberInterceptorForTesting::InitializePreferredApps(std::vector<::apps::mojom::PreferredAppPtr> preferred_apps) {
  GetForwardingInterface()->InitializePreferredApps(std::move(preferred_apps));
}
SubscriberAsyncWaiter::SubscriberAsyncWaiter(
    Subscriber* proxy) : proxy_(proxy) {}

SubscriberAsyncWaiter::~SubscriberAsyncWaiter() = default;






}  // namespace mojom
}  // namespace apps


#if defined(__clang__)
#pragma clang diagnostic pop
#endif