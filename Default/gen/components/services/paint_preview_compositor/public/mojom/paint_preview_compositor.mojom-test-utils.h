// components/services/paint_preview_compositor/public/mojom/paint_preview_compositor.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_PAINT_PREVIEW_COMPOSITOR_PUBLIC_MOJOM_PAINT_PREVIEW_COMPOSITOR_MOJOM_TEST_UTILS_H_
#define COMPONENTS_SERVICES_PAINT_PREVIEW_COMPOSITOR_PUBLIC_MOJOM_PAINT_PREVIEW_COMPOSITOR_MOJOM_TEST_UTILS_H_

#include "components/services/paint_preview_compositor/public/mojom/paint_preview_compositor.mojom.h"


namespace paint_preview {
namespace mojom {


class  PaintPreviewCompositorInterceptorForTesting : public PaintPreviewCompositor {
  virtual PaintPreviewCompositor* GetForwardingInterface() = 0;
  void BeginSeparatedFrameComposite(PaintPreviewBeginCompositeRequestPtr request, BeginSeparatedFrameCompositeCallback callback) override;
  void BitmapForSeparatedFrame(const ::base::UnguessableToken& frame_guid, const ::gfx::Rect& clip_rect, float scale_factor, BitmapForSeparatedFrameCallback callback) override;
  void BeginMainFrameComposite(PaintPreviewBeginCompositeRequestPtr request, BeginMainFrameCompositeCallback callback) override;
  void BitmapForMainFrame(const ::gfx::Rect& clip_rect, float scale_factor, BitmapForMainFrameCallback callback) override;
  void SetRootFrameUrl(const ::GURL& url) override;
};
class  PaintPreviewCompositorAsyncWaiter {
 public:
  explicit PaintPreviewCompositorAsyncWaiter(PaintPreviewCompositor* proxy);

  PaintPreviewCompositorAsyncWaiter(const PaintPreviewCompositorAsyncWaiter&) = delete;
  PaintPreviewCompositorAsyncWaiter& operator=(const PaintPreviewCompositorAsyncWaiter&) = delete;

  ~PaintPreviewCompositorAsyncWaiter();
  void BeginSeparatedFrameComposite(
      PaintPreviewBeginCompositeRequestPtr request, PaintPreviewCompositor::BeginCompositeStatus* out_status, PaintPreviewBeginCompositeResponsePtr* out_response);
  void BitmapForSeparatedFrame(
      const ::base::UnguessableToken& frame_guid, const ::gfx::Rect& clip_rect, float scale_factor, PaintPreviewCompositor::BitmapStatus* out_status, ::SkBitmap* out_bitmap);
  void BeginMainFrameComposite(
      PaintPreviewBeginCompositeRequestPtr request, PaintPreviewCompositor::BeginCompositeStatus* out_status, PaintPreviewBeginCompositeResponsePtr* out_response);
  void BitmapForMainFrame(
      const ::gfx::Rect& clip_rect, float scale_factor, PaintPreviewCompositor::BitmapStatus* out_status, ::SkBitmap* out_bitmap);

 private:
  PaintPreviewCompositor* const proxy_;
};


class  PaintPreviewCompositorCollectionInterceptorForTesting : public PaintPreviewCompositorCollection {
  virtual PaintPreviewCompositorCollection* GetForwardingInterface() = 0;
  void SetDiscardableSharedMemoryManager(::mojo::PendingRemote<::discardable_memory::mojom::DiscardableSharedMemoryManager> manager) override;
  void CreateCompositor(::mojo::PendingReceiver<PaintPreviewCompositor> compositor, CreateCompositorCallback callback) override;
  void OnMemoryPressure(::base::MemoryPressureListener::MemoryPressureLevel memory_pressure_level) override;
  void ListCompositors(ListCompositorsCallback callback) override;
};
class  PaintPreviewCompositorCollectionAsyncWaiter {
 public:
  explicit PaintPreviewCompositorCollectionAsyncWaiter(PaintPreviewCompositorCollection* proxy);

  PaintPreviewCompositorCollectionAsyncWaiter(const PaintPreviewCompositorCollectionAsyncWaiter&) = delete;
  PaintPreviewCompositorCollectionAsyncWaiter& operator=(const PaintPreviewCompositorCollectionAsyncWaiter&) = delete;

  ~PaintPreviewCompositorCollectionAsyncWaiter();
  void CreateCompositor(
      ::mojo::PendingReceiver<PaintPreviewCompositor> compositor, ::base::UnguessableToken* out_compositor_id);
  void ListCompositors(
      std::vector<::base::UnguessableToken>* out_compositor_ids);

 private:
  PaintPreviewCompositorCollection* const proxy_;
};




}  // namespace mojom
}  // namespace paint_preview

#endif  // COMPONENTS_SERVICES_PAINT_PREVIEW_COMPOSITOR_PUBLIC_MOJOM_PAINT_PREVIEW_COMPOSITOR_MOJOM_TEST_UTILS_H_