// components/services/paint_preview_compositor/public/mojom/paint_preview_compositor.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_PAINT_PREVIEW_COMPOSITOR_PUBLIC_MOJOM_PAINT_PREVIEW_COMPOSITOR_MOJOM_SHARED_INTERNAL_H_
#define COMPONENTS_SERVICES_PAINT_PREVIEW_COMPOSITOR_PUBLIC_MOJOM_PAINT_PREVIEW_COMPOSITOR_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "components/discardable_memory/public/mojom/discardable_shared_memory_manager.mojom-shared-internal.h"
#include "components/paint_preview/common/mojom/paint_preview_types.mojom-shared-internal.h"
#include "mojo/public/mojom/base/memory_pressure_level.mojom-shared-internal.h"
#include "mojo/public/mojom/base/shared_memory.mojom-shared-internal.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared-internal.h"
#include "sandbox/policy/mojom/sandbox.mojom-shared-internal.h"
#include "skia/public/mojom/bitmap.mojom-shared-internal.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace paint_preview {
namespace mojom {
namespace internal {
class PaintPreviewBeginCompositeRequest_Data;
class SubframeClipRect_Data;
class FrameData_Data;
class PaintPreviewBeginCompositeResponse_Data;

struct PaintPreviewCompositor_BeginCompositeStatus_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case -2:
      case -1:
      case 0:
      case 1:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct PaintPreviewCompositor_BitmapStatus_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)
class  PaintPreviewBeginCompositeRequest_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlySharedMemoryRegion_Data> proto;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data>, ::paint_preview::mojom::internal::SerializedRecording_Data>> recording_map;

 private:
  friend class mojo::internal::MessageFragment<PaintPreviewBeginCompositeRequest_Data>;

  PaintPreviewBeginCompositeRequest_Data();
  ~PaintPreviewBeginCompositeRequest_Data() = delete;
};
static_assert(sizeof(PaintPreviewBeginCompositeRequest_Data) == 24,
              "Bad sizeof(PaintPreviewBeginCompositeRequest_Data)");
// Used by PaintPreviewBeginCompositeRequest::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PaintPreviewBeginCompositeRequest_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PaintPreviewBeginCompositeRequest_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PaintPreviewBeginCompositeRequest_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<PaintPreviewBeginCompositeRequest_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PaintPreviewBeginCompositeRequest_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  SubframeClipRect_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> frame_guid;
  mojo::internal::Pointer<::gfx::mojom::internal::RectF_Data> clip_rect;

 private:
  friend class mojo::internal::MessageFragment<SubframeClipRect_Data>;

  SubframeClipRect_Data();
  ~SubframeClipRect_Data() = delete;
};
static_assert(sizeof(SubframeClipRect_Data) == 24,
              "Bad sizeof(SubframeClipRect_Data)");
// Used by SubframeClipRect::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SubframeClipRect_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SubframeClipRect_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SubframeClipRect_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<SubframeClipRect_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SubframeClipRect_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  FrameData_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> scroll_extents;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> scroll_offsets;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::SubframeClipRect_Data>>> subframes;

 private:
  friend class mojo::internal::MessageFragment<FrameData_Data>;

  FrameData_Data();
  ~FrameData_Data() = delete;
};
static_assert(sizeof(FrameData_Data) == 32,
              "Bad sizeof(FrameData_Data)");
// Used by FrameData::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct FrameData_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  FrameData_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~FrameData_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<FrameData_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    FrameData_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  PaintPreviewBeginCompositeResponse_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> root_frame_guid;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data>, mojo::internal::Pointer<internal::FrameData_Data>>> frames;

 private:
  friend class mojo::internal::MessageFragment<PaintPreviewBeginCompositeResponse_Data>;

  PaintPreviewBeginCompositeResponse_Data();
  ~PaintPreviewBeginCompositeResponse_Data() = delete;
};
static_assert(sizeof(PaintPreviewBeginCompositeResponse_Data) == 24,
              "Bad sizeof(PaintPreviewBeginCompositeResponse_Data)");
// Used by PaintPreviewBeginCompositeResponse::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PaintPreviewBeginCompositeResponse_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PaintPreviewBeginCompositeResponse_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PaintPreviewBeginCompositeResponse_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<PaintPreviewBeginCompositeResponse_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PaintPreviewBeginCompositeResponse_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace paint_preview

#endif  // COMPONENTS_SERVICES_PAINT_PREVIEW_COMPOSITOR_PUBLIC_MOJOM_PAINT_PREVIEW_COMPOSITOR_MOJOM_SHARED_INTERNAL_H_