// components/services/language_detection/public/mojom/language_detection.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_LANGUAGE_DETECTION_PUBLIC_MOJOM_LANGUAGE_DETECTION_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_SERVICES_LANGUAGE_DETECTION_PUBLIC_MOJOM_LANGUAGE_DETECTION_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace language_detection {
namespace mojom {
namespace internal {

class ValidationContext;
class  LanguageDetectionService_DetermineLanguage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::BigString16_Data> text;

 private:
  friend class mojo::internal::MessageFragment<LanguageDetectionService_DetermineLanguage_Params_Data>;

  LanguageDetectionService_DetermineLanguage_Params_Data();
  ~LanguageDetectionService_DetermineLanguage_Params_Data() = delete;
};
static_assert(sizeof(LanguageDetectionService_DetermineLanguage_Params_Data) == 16,
              "Bad sizeof(LanguageDetectionService_DetermineLanguage_Params_Data)");
class  LanguageDetectionService_DetermineLanguage_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> language;
  uint8_t is_reliable : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<LanguageDetectionService_DetermineLanguage_ResponseParams_Data>;

  LanguageDetectionService_DetermineLanguage_ResponseParams_Data();
  ~LanguageDetectionService_DetermineLanguage_ResponseParams_Data() = delete;
};
static_assert(sizeof(LanguageDetectionService_DetermineLanguage_ResponseParams_Data) == 24,
              "Bad sizeof(LanguageDetectionService_DetermineLanguage_ResponseParams_Data)");

}  // namespace internal


class LanguageDetectionService_DetermineLanguage_ParamsDataView {
 public:
  LanguageDetectionService_DetermineLanguage_ParamsDataView() = default;

  LanguageDetectionService_DetermineLanguage_ParamsDataView(
      internal::LanguageDetectionService_DetermineLanguage_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTextDataView(
      ::mojo_base::mojom::BigString16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadText(UserType* output) {
    
    auto* pointer = data_->text.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::BigString16DataView>(
        pointer, output, message_);
  }
 private:
  internal::LanguageDetectionService_DetermineLanguage_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class LanguageDetectionService_DetermineLanguage_ResponseParamsDataView {
 public:
  LanguageDetectionService_DetermineLanguage_ResponseParamsDataView() = default;

  LanguageDetectionService_DetermineLanguage_ResponseParamsDataView(
      internal::LanguageDetectionService_DetermineLanguage_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetLanguageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLanguage(UserType* output) {
    
    auto* pointer = data_->language.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  bool is_reliable() const {
    return data_->is_reliable;
  }
 private:
  internal::LanguageDetectionService_DetermineLanguage_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void LanguageDetectionService_DetermineLanguage_ParamsDataView::GetTextDataView(
    ::mojo_base::mojom::BigString16DataView* output) {
  auto pointer = data_->text.Get();
  *output = ::mojo_base::mojom::BigString16DataView(pointer, message_);
}


inline void LanguageDetectionService_DetermineLanguage_ResponseParamsDataView::GetLanguageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->language.Get();
  *output = mojo::StringDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace language_detection

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_SERVICES_LANGUAGE_DETECTION_PUBLIC_MOJOM_LANGUAGE_DETECTION_MOJOM_PARAMS_DATA_H_