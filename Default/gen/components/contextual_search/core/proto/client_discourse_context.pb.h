// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_discourse_context.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fdiscourse_5fcontext_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fdiscourse_5fcontext_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fdiscourse_5fcontext_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fdiscourse_5fcontext_2eproto {
  static const uint32_t offsets[];
};
namespace discourse_context {
class ClientDiscourseContext;
struct ClientDiscourseContextDefaultTypeInternal;
extern ClientDiscourseContextDefaultTypeInternal _ClientDiscourseContext_default_instance_;
class Display;
struct DisplayDefaultTypeInternal;
extern DisplayDefaultTypeInternal _Display_default_instance_;
class Media;
struct MediaDefaultTypeInternal;
extern MediaDefaultTypeInternal _Media_default_instance_;
class Selection;
struct SelectionDefaultTypeInternal;
extern SelectionDefaultTypeInternal _Selection_default_instance_;
}  // namespace discourse_context
PROTOBUF_NAMESPACE_OPEN
template<> ::discourse_context::ClientDiscourseContext* Arena::CreateMaybeMessage<::discourse_context::ClientDiscourseContext>(Arena*);
template<> ::discourse_context::Display* Arena::CreateMaybeMessage<::discourse_context::Display>(Arena*);
template<> ::discourse_context::Media* Arena::CreateMaybeMessage<::discourse_context::Media>(Arena*);
template<> ::discourse_context::Selection* Arena::CreateMaybeMessage<::discourse_context::Selection>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace discourse_context {

// ===================================================================

class ClientDiscourseContext final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:discourse_context.ClientDiscourseContext) */ {
 public:
  inline ClientDiscourseContext() : ClientDiscourseContext(nullptr) {}
  ~ClientDiscourseContext() override;
  explicit PROTOBUF_CONSTEXPR ClientDiscourseContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientDiscourseContext(const ClientDiscourseContext& from);
  ClientDiscourseContext(ClientDiscourseContext&& from) noexcept
    : ClientDiscourseContext() {
    *this = ::std::move(from);
  }

  inline ClientDiscourseContext& operator=(const ClientDiscourseContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientDiscourseContext& operator=(ClientDiscourseContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientDiscourseContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientDiscourseContext* internal_default_instance() {
    return reinterpret_cast<const ClientDiscourseContext*>(
               &_ClientDiscourseContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientDiscourseContext& a, ClientDiscourseContext& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientDiscourseContext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientDiscourseContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientDiscourseContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientDiscourseContext>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientDiscourseContext& from);
  void MergeFrom(const ClientDiscourseContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDiscourseContext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "discourse_context.ClientDiscourseContext";
  }
  protected:
  explicit ClientDiscourseContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayFieldNumber = 4,
  };
  // repeated .discourse_context.Display display = 4;
  int display_size() const;
  private:
  int _internal_display_size() const;
  public:
  void clear_display();
  ::discourse_context::Display* mutable_display(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::discourse_context::Display >*
      mutable_display();
  private:
  const ::discourse_context::Display& _internal_display(int index) const;
  ::discourse_context::Display* _internal_add_display();
  public:
  const ::discourse_context::Display& display(int index) const;
  ::discourse_context::Display* add_display();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::discourse_context::Display >&
      display() const;

  // @@protoc_insertion_point(class_scope:discourse_context.ClientDiscourseContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::discourse_context::Display > display_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fdiscourse_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class Display final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:discourse_context.Display) */ {
 public:
  inline Display() : Display(nullptr) {}
  ~Display() override;
  explicit PROTOBUF_CONSTEXPR Display(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Display(const Display& from);
  Display(Display&& from) noexcept
    : Display() {
    *this = ::std::move(from);
  }

  inline Display& operator=(const Display& from) {
    CopyFrom(from);
    return *this;
  }
  inline Display& operator=(Display&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Display& default_instance() {
    return *internal_default_instance();
  }
  static inline const Display* internal_default_instance() {
    return reinterpret_cast<const Display*>(
               &_Display_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Display& a, Display& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Display* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Display* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Display* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Display>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Display& from);
  void MergeFrom(const Display& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Display* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "discourse_context.Display";
  }
  protected:
  explicit Display(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 10,
    kMediaFieldNumber = 9,
    kSelectionFieldNumber = 13,
  };
  // optional string uri = 10;
  bool has_uri() const;
  private:
  bool _internal_has_uri() const;
  public:
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // optional .discourse_context.Media media = 9;
  bool has_media() const;
  private:
  bool _internal_has_media() const;
  public:
  void clear_media();
  const ::discourse_context::Media& media() const;
  PROTOBUF_NODISCARD ::discourse_context::Media* release_media();
  ::discourse_context::Media* mutable_media();
  void set_allocated_media(::discourse_context::Media* media);
  private:
  const ::discourse_context::Media& _internal_media() const;
  ::discourse_context::Media* _internal_mutable_media();
  public:
  void unsafe_arena_set_allocated_media(
      ::discourse_context::Media* media);
  ::discourse_context::Media* unsafe_arena_release_media();

  // optional .discourse_context.Selection selection = 13;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::discourse_context::Selection& selection() const;
  PROTOBUF_NODISCARD ::discourse_context::Selection* release_selection();
  ::discourse_context::Selection* mutable_selection();
  void set_allocated_selection(::discourse_context::Selection* selection);
  private:
  const ::discourse_context::Selection& _internal_selection() const;
  ::discourse_context::Selection* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::discourse_context::Selection* selection);
  ::discourse_context::Selection* unsafe_arena_release_selection();

  // @@protoc_insertion_point(class_scope:discourse_context.Display)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::discourse_context::Media* media_;
  ::discourse_context::Selection* selection_;
  friend struct ::TableStruct_client_5fdiscourse_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class Selection final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:discourse_context.Selection) */ {
 public:
  inline Selection() : Selection(nullptr) {}
  ~Selection() override;
  explicit PROTOBUF_CONSTEXPR Selection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Selection(const Selection& from);
  Selection(Selection&& from) noexcept
    : Selection() {
    *this = ::std::move(from);
  }

  inline Selection& operator=(const Selection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Selection& operator=(Selection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Selection& default_instance() {
    return *internal_default_instance();
  }
  static inline const Selection* internal_default_instance() {
    return reinterpret_cast<const Selection*>(
               &_Selection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Selection& a, Selection& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Selection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Selection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Selection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Selection>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Selection& from);
  void MergeFrom(const Selection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Selection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "discourse_context.Selection";
  }
  protected:
  explicit Selection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
    kIsUriEncodedFieldNumber = 4,
  };
  // optional string content = 1;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional int32 start = 2;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  int32_t start() const;
  void set_start(int32_t value);
  private:
  int32_t _internal_start() const;
  void _internal_set_start(int32_t value);
  public:

  // optional int32 end = 3;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  int32_t end() const;
  void set_end(int32_t value);
  private:
  int32_t _internal_end() const;
  void _internal_set_end(int32_t value);
  public:

  // optional bool is_uri_encoded = 4 [default = true];
  bool has_is_uri_encoded() const;
  private:
  bool _internal_has_is_uri_encoded() const;
  public:
  void clear_is_uri_encoded();
  bool is_uri_encoded() const;
  void set_is_uri_encoded(bool value);
  private:
  bool _internal_is_uri_encoded() const;
  void _internal_set_is_uri_encoded(bool value);
  public:

  // @@protoc_insertion_point(class_scope:discourse_context.Selection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  int32_t start_;
  int32_t end_;
  bool is_uri_encoded_;
  friend struct ::TableStruct_client_5fdiscourse_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class Media final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:discourse_context.Media) */ {
 public:
  inline Media() : Media(nullptr) {}
  ~Media() override;
  explicit PROTOBUF_CONSTEXPR Media(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Media(const Media& from);
  Media(Media&& from) noexcept
    : Media() {
    *this = ::std::move(from);
  }

  inline Media& operator=(const Media& from) {
    CopyFrom(from);
    return *this;
  }
  inline Media& operator=(Media&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Media& default_instance() {
    return *internal_default_instance();
  }
  static inline const Media* internal_default_instance() {
    return reinterpret_cast<const Media*>(
               &_Media_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Media& a, Media& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Media* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Media* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Media* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Media>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Media& from);
  void MergeFrom(const Media& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Media* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "discourse_context.Media";
  }
  protected:
  explicit Media(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMimeTypeFieldNumber = 3,
  };
  // optional string mime_type = 3;
  bool has_mime_type() const;
  private:
  bool _internal_has_mime_type() const;
  public:
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // @@protoc_insertion_point(class_scope:discourse_context.Media)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
  friend struct ::TableStruct_client_5fdiscourse_5fcontext_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientDiscourseContext

// repeated .discourse_context.Display display = 4;
inline int ClientDiscourseContext::_internal_display_size() const {
  return display_.size();
}
inline int ClientDiscourseContext::display_size() const {
  return _internal_display_size();
}
inline void ClientDiscourseContext::clear_display() {
  display_.Clear();
}
inline ::discourse_context::Display* ClientDiscourseContext::mutable_display(int index) {
  // @@protoc_insertion_point(field_mutable:discourse_context.ClientDiscourseContext.display)
  return display_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::discourse_context::Display >*
ClientDiscourseContext::mutable_display() {
  // @@protoc_insertion_point(field_mutable_list:discourse_context.ClientDiscourseContext.display)
  return &display_;
}
inline const ::discourse_context::Display& ClientDiscourseContext::_internal_display(int index) const {
  return display_.Get(index);
}
inline const ::discourse_context::Display& ClientDiscourseContext::display(int index) const {
  // @@protoc_insertion_point(field_get:discourse_context.ClientDiscourseContext.display)
  return _internal_display(index);
}
inline ::discourse_context::Display* ClientDiscourseContext::_internal_add_display() {
  return display_.Add();
}
inline ::discourse_context::Display* ClientDiscourseContext::add_display() {
  ::discourse_context::Display* _add = _internal_add_display();
  // @@protoc_insertion_point(field_add:discourse_context.ClientDiscourseContext.display)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::discourse_context::Display >&
ClientDiscourseContext::display() const {
  // @@protoc_insertion_point(field_list:discourse_context.ClientDiscourseContext.display)
  return display_;
}

// -------------------------------------------------------------------

// Display

// optional .discourse_context.Media media = 9;
inline bool Display::_internal_has_media() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || media_ != nullptr);
  return value;
}
inline bool Display::has_media() const {
  return _internal_has_media();
}
inline void Display::clear_media() {
  if (media_ != nullptr) media_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::discourse_context::Media& Display::_internal_media() const {
  const ::discourse_context::Media* p = media_;
  return p != nullptr ? *p : reinterpret_cast<const ::discourse_context::Media&>(
      ::discourse_context::_Media_default_instance_);
}
inline const ::discourse_context::Media& Display::media() const {
  // @@protoc_insertion_point(field_get:discourse_context.Display.media)
  return _internal_media();
}
inline void Display::unsafe_arena_set_allocated_media(
    ::discourse_context::Media* media) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(media_);
  }
  media_ = media;
  if (media) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:discourse_context.Display.media)
}
inline ::discourse_context::Media* Display::release_media() {
  _has_bits_[0] &= ~0x00000002u;
  ::discourse_context::Media* temp = media_;
  media_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::discourse_context::Media* Display::unsafe_arena_release_media() {
  // @@protoc_insertion_point(field_release:discourse_context.Display.media)
  _has_bits_[0] &= ~0x00000002u;
  ::discourse_context::Media* temp = media_;
  media_ = nullptr;
  return temp;
}
inline ::discourse_context::Media* Display::_internal_mutable_media() {
  _has_bits_[0] |= 0x00000002u;
  if (media_ == nullptr) {
    auto* p = CreateMaybeMessage<::discourse_context::Media>(GetArenaForAllocation());
    media_ = p;
  }
  return media_;
}
inline ::discourse_context::Media* Display::mutable_media() {
  ::discourse_context::Media* _msg = _internal_mutable_media();
  // @@protoc_insertion_point(field_mutable:discourse_context.Display.media)
  return _msg;
}
inline void Display::set_allocated_media(::discourse_context::Media* media) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete media_;
  }
  if (media) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(media);
    if (message_arena != submessage_arena) {
      media = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  media_ = media;
  // @@protoc_insertion_point(field_set_allocated:discourse_context.Display.media)
}

// optional string uri = 10;
inline bool Display::_internal_has_uri() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Display::has_uri() const {
  return _internal_has_uri();
}
inline void Display::clear_uri() {
  uri_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Display::uri() const {
  // @@protoc_insertion_point(field_get:discourse_context.Display.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Display::set_uri(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:discourse_context.Display.uri)
}
inline std::string* Display::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:discourse_context.Display.uri)
  return _s;
}
inline const std::string& Display::_internal_uri() const {
  return uri_.Get();
}
inline void Display::_internal_set_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uri_.Set(value, GetArenaForAllocation());
}
inline std::string* Display::_internal_mutable_uri() {
  _has_bits_[0] |= 0x00000001u;
  return uri_.Mutable(GetArenaForAllocation());
}
inline std::string* Display::release_uri() {
  // @@protoc_insertion_point(field_release:discourse_context.Display.uri)
  if (!_internal_has_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = uri_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uri_.IsDefault()) {
    uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Display::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uri_.IsDefault()) {
    uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:discourse_context.Display.uri)
}

// optional .discourse_context.Selection selection = 13;
inline bool Display::_internal_has_selection() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || selection_ != nullptr);
  return value;
}
inline bool Display::has_selection() const {
  return _internal_has_selection();
}
inline void Display::clear_selection() {
  if (selection_ != nullptr) selection_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::discourse_context::Selection& Display::_internal_selection() const {
  const ::discourse_context::Selection* p = selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::discourse_context::Selection&>(
      ::discourse_context::_Selection_default_instance_);
}
inline const ::discourse_context::Selection& Display::selection() const {
  // @@protoc_insertion_point(field_get:discourse_context.Display.selection)
  return _internal_selection();
}
inline void Display::unsafe_arena_set_allocated_selection(
    ::discourse_context::Selection* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_);
  }
  selection_ = selection;
  if (selection) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:discourse_context.Display.selection)
}
inline ::discourse_context::Selection* Display::release_selection() {
  _has_bits_[0] &= ~0x00000004u;
  ::discourse_context::Selection* temp = selection_;
  selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::discourse_context::Selection* Display::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:discourse_context.Display.selection)
  _has_bits_[0] &= ~0x00000004u;
  ::discourse_context::Selection* temp = selection_;
  selection_ = nullptr;
  return temp;
}
inline ::discourse_context::Selection* Display::_internal_mutable_selection() {
  _has_bits_[0] |= 0x00000004u;
  if (selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::discourse_context::Selection>(GetArenaForAllocation());
    selection_ = p;
  }
  return selection_;
}
inline ::discourse_context::Selection* Display::mutable_selection() {
  ::discourse_context::Selection* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:discourse_context.Display.selection)
  return _msg;
}
inline void Display::set_allocated_selection(::discourse_context::Selection* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete selection_;
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(selection);
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:discourse_context.Display.selection)
}

// -------------------------------------------------------------------

// Selection

// optional string content = 1;
inline bool Selection::_internal_has_content() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Selection::has_content() const {
  return _internal_has_content();
}
inline void Selection::clear_content() {
  content_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Selection::content() const {
  // @@protoc_insertion_point(field_get:discourse_context.Selection.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Selection::set_content(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:discourse_context.Selection.content)
}
inline std::string* Selection::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:discourse_context.Selection.content)
  return _s;
}
inline const std::string& Selection::_internal_content() const {
  return content_.Get();
}
inline void Selection::_internal_set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.Set(value, GetArenaForAllocation());
}
inline std::string* Selection::_internal_mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  return content_.Mutable(GetArenaForAllocation());
}
inline std::string* Selection::release_content() {
  // @@protoc_insertion_point(field_release:discourse_context.Selection.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = content_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault()) {
    content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Selection::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault()) {
    content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:discourse_context.Selection.content)
}

// optional int32 start = 2;
inline bool Selection::_internal_has_start() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Selection::has_start() const {
  return _internal_has_start();
}
inline void Selection::clear_start() {
  start_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Selection::_internal_start() const {
  return start_;
}
inline int32_t Selection::start() const {
  // @@protoc_insertion_point(field_get:discourse_context.Selection.start)
  return _internal_start();
}
inline void Selection::_internal_set_start(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  start_ = value;
}
inline void Selection::set_start(int32_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:discourse_context.Selection.start)
}

// optional int32 end = 3;
inline bool Selection::_internal_has_end() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Selection::has_end() const {
  return _internal_has_end();
}
inline void Selection::clear_end() {
  end_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t Selection::_internal_end() const {
  return end_;
}
inline int32_t Selection::end() const {
  // @@protoc_insertion_point(field_get:discourse_context.Selection.end)
  return _internal_end();
}
inline void Selection::_internal_set_end(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  end_ = value;
}
inline void Selection::set_end(int32_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:discourse_context.Selection.end)
}

// optional bool is_uri_encoded = 4 [default = true];
inline bool Selection::_internal_has_is_uri_encoded() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Selection::has_is_uri_encoded() const {
  return _internal_has_is_uri_encoded();
}
inline void Selection::clear_is_uri_encoded() {
  is_uri_encoded_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Selection::_internal_is_uri_encoded() const {
  return is_uri_encoded_;
}
inline bool Selection::is_uri_encoded() const {
  // @@protoc_insertion_point(field_get:discourse_context.Selection.is_uri_encoded)
  return _internal_is_uri_encoded();
}
inline void Selection::_internal_set_is_uri_encoded(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_uri_encoded_ = value;
}
inline void Selection::set_is_uri_encoded(bool value) {
  _internal_set_is_uri_encoded(value);
  // @@protoc_insertion_point(field_set:discourse_context.Selection.is_uri_encoded)
}

// -------------------------------------------------------------------

// Media

// optional string mime_type = 3;
inline bool Media::_internal_has_mime_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Media::has_mime_type() const {
  return _internal_has_mime_type();
}
inline void Media::clear_mime_type() {
  mime_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Media::mime_type() const {
  // @@protoc_insertion_point(field_get:discourse_context.Media.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Media::set_mime_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 mime_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:discourse_context.Media.mime_type)
}
inline std::string* Media::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:discourse_context.Media.mime_type)
  return _s;
}
inline const std::string& Media::_internal_mime_type() const {
  return mime_type_.Get();
}
inline void Media::_internal_set_mime_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mime_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Media::_internal_mutable_mime_type() {
  _has_bits_[0] |= 0x00000001u;
  return mime_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Media::release_mime_type() {
  // @@protoc_insertion_point(field_release:discourse_context.Media.mime_type)
  if (!_internal_has_mime_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = mime_type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mime_type_.IsDefault()) {
    mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Media::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mime_type_.SetAllocated(mime_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mime_type_.IsDefault()) {
    mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:discourse_context.Media.mime_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace discourse_context

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fdiscourse_5fcontext_2eproto
