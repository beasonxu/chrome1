// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_discourse_context.proto

#include "client_discourse_context.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace discourse_context {
PROTOBUF_CONSTEXPR ClientDiscourseContext::ClientDiscourseContext(
    ::_pbi::ConstantInitialized)
  : display_(){}
struct ClientDiscourseContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDiscourseContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDiscourseContextDefaultTypeInternal() {}
  union {
    ClientDiscourseContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDiscourseContextDefaultTypeInternal _ClientDiscourseContext_default_instance_;
PROTOBUF_CONSTEXPR Display::Display(
    ::_pbi::ConstantInitialized)
  : uri_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , media_(nullptr)
  , selection_(nullptr){}
struct DisplayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisplayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisplayDefaultTypeInternal() {}
  union {
    Display _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisplayDefaultTypeInternal _Display_default_instance_;
PROTOBUF_CONSTEXPR Selection::Selection(
    ::_pbi::ConstantInitialized)
  : content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , start_(0)
  , end_(0)
  , is_uri_encoded_(true){}
struct SelectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectionDefaultTypeInternal() {}
  union {
    Selection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectionDefaultTypeInternal _Selection_default_instance_;
PROTOBUF_CONSTEXPR Media::Media(
    ::_pbi::ConstantInitialized)
  : mime_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct MediaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaDefaultTypeInternal() {}
  union {
    Media _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaDefaultTypeInternal _Media_default_instance_;
}  // namespace discourse_context
namespace discourse_context {

// ===================================================================

class ClientDiscourseContext::_Internal {
 public:
};

ClientDiscourseContext::ClientDiscourseContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  display_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:discourse_context.ClientDiscourseContext)
}
ClientDiscourseContext::ClientDiscourseContext(const ClientDiscourseContext& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      display_(from.display_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:discourse_context.ClientDiscourseContext)
}

inline void ClientDiscourseContext::SharedCtor() {
}

ClientDiscourseContext::~ClientDiscourseContext() {
  // @@protoc_insertion_point(destructor:discourse_context.ClientDiscourseContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientDiscourseContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientDiscourseContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientDiscourseContext::Clear() {
// @@protoc_insertion_point(message_clear_start:discourse_context.ClientDiscourseContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  display_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientDiscourseContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .discourse_context.Display display = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientDiscourseContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:discourse_context.ClientDiscourseContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .discourse_context.Display display = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_display_size()); i < n; i++) {
    const auto& repfield = this->_internal_display(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:discourse_context.ClientDiscourseContext)
  return target;
}

size_t ClientDiscourseContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:discourse_context.ClientDiscourseContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .discourse_context.Display display = 4;
  total_size += 1UL * this->_internal_display_size();
  for (const auto& msg : this->display_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientDiscourseContext::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientDiscourseContext*>(
      &from));
}

void ClientDiscourseContext::MergeFrom(const ClientDiscourseContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:discourse_context.ClientDiscourseContext)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  display_.MergeFrom(from.display_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientDiscourseContext::CopyFrom(const ClientDiscourseContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:discourse_context.ClientDiscourseContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDiscourseContext::IsInitialized() const {
  return true;
}

void ClientDiscourseContext::InternalSwap(ClientDiscourseContext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  display_.InternalSwap(&other->display_);
}

std::string ClientDiscourseContext::GetTypeName() const {
  return "discourse_context.ClientDiscourseContext";
}


// ===================================================================

class Display::_Internal {
 public:
  using HasBits = decltype(std::declval<Display>()._has_bits_);
  static const ::discourse_context::Media& media(const Display* msg);
  static void set_has_media(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::discourse_context::Selection& selection(const Display* msg);
  static void set_has_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::discourse_context::Media&
Display::_Internal::media(const Display* msg) {
  return *msg->media_;
}
const ::discourse_context::Selection&
Display::_Internal::selection(const Display* msg) {
  return *msg->selection_;
}
Display::Display(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:discourse_context.Display)
}
Display::Display(const Display& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uri()) {
    uri_.Set(from._internal_uri(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_media()) {
    media_ = new ::discourse_context::Media(*from.media_);
  } else {
    media_ = nullptr;
  }
  if (from._internal_has_selection()) {
    selection_ = new ::discourse_context::Selection(*from.selection_);
  } else {
    selection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:discourse_context.Display)
}

inline void Display::SharedCtor() {
uri_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uri_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&media_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&selection_) -
    reinterpret_cast<char*>(&media_)) + sizeof(selection_));
}

Display::~Display() {
  // @@protoc_insertion_point(destructor:discourse_context.Display)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Display::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uri_.Destroy();
  if (this != internal_default_instance()) delete media_;
  if (this != internal_default_instance()) delete selection_;
}

void Display::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Display::Clear() {
// @@protoc_insertion_point(message_clear_start:discourse_context.Display)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      uri_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(media_ != nullptr);
      media_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(selection_ != nullptr);
      selection_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Display::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .discourse_context.Media media = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_media(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string uri = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .discourse_context.Selection selection = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Display::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:discourse_context.Display)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .discourse_context.Media media = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::media(this),
        _Internal::media(this).GetCachedSize(), target, stream);
  }

  // optional string uri = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_uri(), target);
  }

  // optional .discourse_context.Selection selection = 13;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::selection(this),
        _Internal::selection(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:discourse_context.Display)
  return target;
}

size_t Display::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:discourse_context.Display)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string uri = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri());
    }

    // optional .discourse_context.Media media = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *media_);
    }

    // optional .discourse_context.Selection selection = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selection_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Display::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Display*>(
      &from));
}

void Display::MergeFrom(const Display& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:discourse_context.Display)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_uri(from._internal_uri());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_media()->::discourse_context::Media::MergeFrom(from._internal_media());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_selection()->::discourse_context::Selection::MergeFrom(from._internal_selection());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Display::CopyFrom(const Display& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:discourse_context.Display)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Display::IsInitialized() const {
  return true;
}

void Display::InternalSwap(Display* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &uri_, lhs_arena,
      &other->uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Display, selection_)
      + sizeof(Display::selection_)
      - PROTOBUF_FIELD_OFFSET(Display, media_)>(
          reinterpret_cast<char*>(&media_),
          reinterpret_cast<char*>(&other->media_));
}

std::string Display::GetTypeName() const {
  return "discourse_context.Display";
}


// ===================================================================

class Selection::_Internal {
 public:
  using HasBits = decltype(std::declval<Selection>()._has_bits_);
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_uri_encoded(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Selection::Selection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:discourse_context.Selection)
}
Selection::Selection(const Selection& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_content()) {
    content_.Set(from._internal_content(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_uri_encoded_) -
    reinterpret_cast<char*>(&start_)) + sizeof(is_uri_encoded_));
  // @@protoc_insertion_point(copy_constructor:discourse_context.Selection)
}

inline void Selection::SharedCtor() {
content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
is_uri_encoded_ = true;
}

Selection::~Selection() {
  // @@protoc_insertion_point(destructor:discourse_context.Selection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Selection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  content_.Destroy();
}

void Selection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Selection::Clear() {
// @@protoc_insertion_point(message_clear_start:discourse_context.Selection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    content_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_) -
        reinterpret_cast<char*>(&start_)) + sizeof(end_));
    is_uri_encoded_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Selection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_start(&has_bits);
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_end(&has_bits);
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_uri_encoded = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_uri_encoded(&has_bits);
          is_uri_encoded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Selection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:discourse_context.Selection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string content = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  // optional int32 start = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_start(), target);
  }

  // optional int32 end = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_end(), target);
  }

  // optional bool is_uri_encoded = 4 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_uri_encoded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:discourse_context.Selection)
  return target;
}

size_t Selection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:discourse_context.Selection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string content = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_content());
    }

    // optional int32 start = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start());
    }

    // optional int32 end = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_end());
    }

    // optional bool is_uri_encoded = 4 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Selection::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Selection*>(
      &from));
}

void Selection::MergeFrom(const Selection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:discourse_context.Selection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_content(from._internal_content());
    }
    if (cached_has_bits & 0x00000002u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_ = from.end_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_uri_encoded_ = from.is_uri_encoded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Selection::CopyFrom(const Selection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:discourse_context.Selection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Selection::IsInitialized() const {
  return true;
}

void Selection::InternalSwap(Selection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Selection, end_)
      + sizeof(Selection::end_)
      - PROTOBUF_FIELD_OFFSET(Selection, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
  swap(is_uri_encoded_, other->is_uri_encoded_);
}

std::string Selection::GetTypeName() const {
  return "discourse_context.Selection";
}


// ===================================================================

class Media::_Internal {
 public:
  using HasBits = decltype(std::declval<Media>()._has_bits_);
  static void set_has_mime_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Media::Media(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:discourse_context.Media)
}
Media::Media(const Media& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mime_type()) {
    mime_type_.Set(from._internal_mime_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:discourse_context.Media)
}

inline void Media::SharedCtor() {
mime_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Media::~Media() {
  // @@protoc_insertion_point(destructor:discourse_context.Media)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Media::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mime_type_.Destroy();
}

void Media::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Media::Clear() {
// @@protoc_insertion_point(message_clear_start:discourse_context.Media)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mime_type_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Media::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string mime_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Media::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:discourse_context.Media)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string mime_type = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mime_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:discourse_context.Media)
  return target;
}

size_t Media::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:discourse_context.Media)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string mime_type = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Media::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Media*>(
      &from));
}

void Media::MergeFrom(const Media& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:discourse_context.Media)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mime_type()) {
    _internal_set_mime_type(from._internal_mime_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Media::CopyFrom(const Media& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:discourse_context.Media)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Media::IsInitialized() const {
  return true;
}

void Media::InternalSwap(Media* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mime_type_, lhs_arena,
      &other->mime_type_, rhs_arena
  );
}

std::string Media::GetTypeName() const {
  return "discourse_context.Media";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace discourse_context
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::discourse_context::ClientDiscourseContext*
Arena::CreateMaybeMessage< ::discourse_context::ClientDiscourseContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::discourse_context::ClientDiscourseContext >(arena);
}
template<> PROTOBUF_NOINLINE ::discourse_context::Display*
Arena::CreateMaybeMessage< ::discourse_context::Display >(Arena* arena) {
  return Arena::CreateMessageInternal< ::discourse_context::Display >(arena);
}
template<> PROTOBUF_NOINLINE ::discourse_context::Selection*
Arena::CreateMaybeMessage< ::discourse_context::Selection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::discourse_context::Selection >(arena);
}
template<> PROTOBUF_NOINLINE ::discourse_context::Media*
Arena::CreateMaybeMessage< ::discourse_context::Media >(Arena* arena) {
  return Arena::CreateMessageInternal< ::discourse_context::Media >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
