// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: template_storage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_template_5fstorage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_template_5fstorage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_template_5fstorage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_template_5fstorage_2eproto {
  static const uint32_t offsets[];
};
namespace content_creation {
namespace proto {
class Background;
struct BackgroundDefaultTypeInternal;
extern BackgroundDefaultTypeInternal _Background_default_instance_;
class Collection;
struct CollectionDefaultTypeInternal;
extern CollectionDefaultTypeInternal _Collection_default_instance_;
class CollectionItem;
struct CollectionItemDefaultTypeInternal;
extern CollectionItemDefaultTypeInternal _CollectionItem_default_instance_;
class Date;
struct DateDefaultTypeInternal;
extern DateDefaultTypeInternal _Date_default_instance_;
class FooterStyle;
struct FooterStyleDefaultTypeInternal;
extern FooterStyleDefaultTypeInternal _FooterStyle_default_instance_;
class Gradient;
struct GradientDefaultTypeInternal;
extern GradientDefaultTypeInternal _Gradient_default_instance_;
class NoteTemplate;
struct NoteTemplateDefaultTypeInternal;
extern NoteTemplateDefaultTypeInternal _NoteTemplate_default_instance_;
class TextStyle;
struct TextStyleDefaultTypeInternal;
extern TextStyleDefaultTypeInternal _TextStyle_default_instance_;
}  // namespace proto
}  // namespace content_creation
PROTOBUF_NAMESPACE_OPEN
template<> ::content_creation::proto::Background* Arena::CreateMaybeMessage<::content_creation::proto::Background>(Arena*);
template<> ::content_creation::proto::Collection* Arena::CreateMaybeMessage<::content_creation::proto::Collection>(Arena*);
template<> ::content_creation::proto::CollectionItem* Arena::CreateMaybeMessage<::content_creation::proto::CollectionItem>(Arena*);
template<> ::content_creation::proto::Date* Arena::CreateMaybeMessage<::content_creation::proto::Date>(Arena*);
template<> ::content_creation::proto::FooterStyle* Arena::CreateMaybeMessage<::content_creation::proto::FooterStyle>(Arena*);
template<> ::content_creation::proto::Gradient* Arena::CreateMaybeMessage<::content_creation::proto::Gradient>(Arena*);
template<> ::content_creation::proto::NoteTemplate* Arena::CreateMaybeMessage<::content_creation::proto::NoteTemplate>(Arena*);
template<> ::content_creation::proto::TextStyle* Arena::CreateMaybeMessage<::content_creation::proto::TextStyle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content_creation {
namespace proto {

// ===================================================================

class Gradient final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content_creation.proto.Gradient) */ {
 public:
  inline Gradient() : Gradient(nullptr) {}
  ~Gradient() override;
  explicit PROTOBUF_CONSTEXPR Gradient(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Gradient(const Gradient& from);
  Gradient(Gradient&& from) noexcept
    : Gradient() {
    *this = ::std::move(from);
  }

  inline Gradient& operator=(const Gradient& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gradient& operator=(Gradient&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Gradient& default_instance() {
    return *internal_default_instance();
  }
  static inline const Gradient* internal_default_instance() {
    return reinterpret_cast<const Gradient*>(
               &_Gradient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Gradient& a, Gradient& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Gradient* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gradient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Gradient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Gradient>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Gradient& from);
  void MergeFrom(const Gradient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Gradient* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content_creation.proto.Gradient";
  }
  protected:
  explicit Gradient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorsFieldNumber = 2,
    kOrientationFieldNumber = 1,
  };
  // repeated uint32 colors = 2;
  int colors_size() const;
  private:
  int _internal_colors_size() const;
  public:
  void clear_colors();
  private:
  uint32_t _internal_colors(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_colors() const;
  void _internal_add_colors(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_colors();
  public:
  uint32_t colors(int index) const;
  void set_colors(int index, uint32_t value);
  void add_colors(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      colors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_colors();

  // int32 orientation = 1;
  void clear_orientation();
  int32_t orientation() const;
  void set_orientation(int32_t value);
  private:
  int32_t _internal_orientation() const;
  void _internal_set_orientation(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:content_creation.proto.Gradient)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > colors_;
  mutable std::atomic<int> _colors_cached_byte_size_;
  int32_t orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_template_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class Background final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content_creation.proto.Background) */ {
 public:
  inline Background() : Background(nullptr) {}
  ~Background() override;
  explicit PROTOBUF_CONSTEXPR Background(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Background(const Background& from);
  Background(Background&& from) noexcept
    : Background() {
    *this = ::std::move(from);
  }

  inline Background& operator=(const Background& from) {
    CopyFrom(from);
    return *this;
  }
  inline Background& operator=(Background&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Background& default_instance() {
    return *internal_default_instance();
  }
  enum ConstructorOptionsCase {
    kColor = 1,
    kGradient = 2,
    kUrl = 3,
    CONSTRUCTOR_OPTIONS_NOT_SET = 0,
  };

  static inline const Background* internal_default_instance() {
    return reinterpret_cast<const Background*>(
               &_Background_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Background& a, Background& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Background* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Background* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Background* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Background>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Background& from);
  void MergeFrom(const Background& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Background* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content_creation.proto.Background";
  }
  protected:
  explicit Background(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 1,
    kGradientFieldNumber = 2,
    kUrlFieldNumber = 3,
  };
  // uint32 color = 1;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  uint32_t color() const;
  void set_color(uint32_t value);
  private:
  uint32_t _internal_color() const;
  void _internal_set_color(uint32_t value);
  public:

  // .content_creation.proto.Gradient gradient = 2;
  bool has_gradient() const;
  private:
  bool _internal_has_gradient() const;
  public:
  void clear_gradient();
  const ::content_creation::proto::Gradient& gradient() const;
  PROTOBUF_NODISCARD ::content_creation::proto::Gradient* release_gradient();
  ::content_creation::proto::Gradient* mutable_gradient();
  void set_allocated_gradient(::content_creation::proto::Gradient* gradient);
  private:
  const ::content_creation::proto::Gradient& _internal_gradient() const;
  ::content_creation::proto::Gradient* _internal_mutable_gradient();
  public:
  void unsafe_arena_set_allocated_gradient(
      ::content_creation::proto::Gradient* gradient);
  ::content_creation::proto::Gradient* unsafe_arena_release_gradient();

  // string url = 3;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  void clear_constructor_options();
  ConstructorOptionsCase constructor_options_case() const;
  // @@protoc_insertion_point(class_scope:content_creation.proto.Background)
 private:
  class _Internal;
  void set_has_color();
  void set_has_gradient();
  void set_has_url();

  inline bool has_constructor_options() const;
  inline void clear_has_constructor_options();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ConstructorOptionsUnion {
    constexpr ConstructorOptionsUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    uint32_t color_;
    ::content_creation::proto::Gradient* gradient_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  } constructor_options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_template_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class TextStyle final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content_creation.proto.TextStyle) */ {
 public:
  inline TextStyle() : TextStyle(nullptr) {}
  ~TextStyle() override;
  explicit PROTOBUF_CONSTEXPR TextStyle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextStyle(const TextStyle& from);
  TextStyle(TextStyle&& from) noexcept
    : TextStyle() {
    *this = ::std::move(from);
  }

  inline TextStyle& operator=(const TextStyle& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextStyle& operator=(TextStyle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TextStyle& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextStyle* internal_default_instance() {
    return reinterpret_cast<const TextStyle*>(
               &_TextStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TextStyle& a, TextStyle& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TextStyle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextStyle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextStyle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextStyle>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TextStyle& from);
  void MergeFrom(const TextStyle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TextStyle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content_creation.proto.TextStyle";
  }
  protected:
  explicit TextStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kColorFieldNumber = 2,
    kWeightFieldNumber = 3,
    kAllCapsFieldNumber = 4,
    kAlignmentFieldNumber = 5,
    kMinTextSizeFieldNumber = 6,
    kMaxTextSizeFieldNumber = 7,
    kHighlightColorFieldNumber = 8,
    kHighlightStyleFieldNumber = 9,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 color = 2;
  void clear_color();
  uint32_t color() const;
  void set_color(uint32_t value);
  private:
  uint32_t _internal_color() const;
  void _internal_set_color(uint32_t value);
  public:

  // uint32 weight = 3;
  void clear_weight();
  uint32_t weight() const;
  void set_weight(uint32_t value);
  private:
  uint32_t _internal_weight() const;
  void _internal_set_weight(uint32_t value);
  public:

  // bool allCaps = 4;
  void clear_allcaps();
  bool allcaps() const;
  void set_allcaps(bool value);
  private:
  bool _internal_allcaps() const;
  void _internal_set_allcaps(bool value);
  public:

  // int32 alignment = 5;
  void clear_alignment();
  int32_t alignment() const;
  void set_alignment(int32_t value);
  private:
  int32_t _internal_alignment() const;
  void _internal_set_alignment(int32_t value);
  public:

  // int32 minTextSize = 6;
  void clear_mintextsize();
  int32_t mintextsize() const;
  void set_mintextsize(int32_t value);
  private:
  int32_t _internal_mintextsize() const;
  void _internal_set_mintextsize(int32_t value);
  public:

  // int32 maxTextSize = 7;
  void clear_maxtextsize();
  int32_t maxtextsize() const;
  void set_maxtextsize(int32_t value);
  private:
  int32_t _internal_maxtextsize() const;
  void _internal_set_maxtextsize(int32_t value);
  public:

  // uint32 highlightColor = 8;
  void clear_highlightcolor();
  uint32_t highlightcolor() const;
  void set_highlightcolor(uint32_t value);
  private:
  uint32_t _internal_highlightcolor() const;
  void _internal_set_highlightcolor(uint32_t value);
  public:

  // int32 highlightStyle = 9;
  void clear_highlightstyle();
  int32_t highlightstyle() const;
  void set_highlightstyle(int32_t value);
  private:
  int32_t _internal_highlightstyle() const;
  void _internal_set_highlightstyle(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:content_creation.proto.TextStyle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t color_;
  uint32_t weight_;
  bool allcaps_;
  int32_t alignment_;
  int32_t mintextsize_;
  int32_t maxtextsize_;
  uint32_t highlightcolor_;
  int32_t highlightstyle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_template_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class FooterStyle final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content_creation.proto.FooterStyle) */ {
 public:
  inline FooterStyle() : FooterStyle(nullptr) {}
  ~FooterStyle() override;
  explicit PROTOBUF_CONSTEXPR FooterStyle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FooterStyle(const FooterStyle& from);
  FooterStyle(FooterStyle&& from) noexcept
    : FooterStyle() {
    *this = ::std::move(from);
  }

  inline FooterStyle& operator=(const FooterStyle& from) {
    CopyFrom(from);
    return *this;
  }
  inline FooterStyle& operator=(FooterStyle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FooterStyle& default_instance() {
    return *internal_default_instance();
  }
  static inline const FooterStyle* internal_default_instance() {
    return reinterpret_cast<const FooterStyle*>(
               &_FooterStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FooterStyle& a, FooterStyle& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FooterStyle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FooterStyle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FooterStyle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FooterStyle>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FooterStyle& from);
  void MergeFrom(const FooterStyle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FooterStyle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content_creation.proto.FooterStyle";
  }
  protected:
  explicit FooterStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextColorFieldNumber = 1,
    kLogoColorFieldNumber = 2,
  };
  // uint32 textColor = 1;
  void clear_textcolor();
  uint32_t textcolor() const;
  void set_textcolor(uint32_t value);
  private:
  uint32_t _internal_textcolor() const;
  void _internal_set_textcolor(uint32_t value);
  public:

  // uint32 logoColor = 2;
  void clear_logocolor();
  uint32_t logocolor() const;
  void set_logocolor(uint32_t value);
  private:
  uint32_t _internal_logocolor() const;
  void _internal_set_logocolor(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:content_creation.proto.FooterStyle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t textcolor_;
  uint32_t logocolor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_template_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class Date final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content_creation.proto.Date) */ {
 public:
  inline Date() : Date(nullptr) {}
  ~Date() override;
  explicit PROTOBUF_CONSTEXPR Date(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Date(const Date& from);
  Date(Date&& from) noexcept
    : Date() {
    *this = ::std::move(from);
  }

  inline Date& operator=(const Date& from) {
    CopyFrom(from);
    return *this;
  }
  inline Date& operator=(Date&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Date& default_instance() {
    return *internal_default_instance();
  }
  static inline const Date* internal_default_instance() {
    return reinterpret_cast<const Date*>(
               &_Date_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Date& a, Date& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Date* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Date* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Date* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Date>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Date& from);
  void MergeFrom(const Date& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Date* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content_creation.proto.Date";
  }
  protected:
  explicit Date(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonthFieldNumber = 1,
    kDayFieldNumber = 2,
    kYearFieldNumber = 3,
  };
  // int32 month = 1;
  void clear_month();
  int32_t month() const;
  void set_month(int32_t value);
  private:
  int32_t _internal_month() const;
  void _internal_set_month(int32_t value);
  public:

  // int32 day = 2;
  void clear_day();
  int32_t day() const;
  void set_day(int32_t value);
  private:
  int32_t _internal_day() const;
  void _internal_set_day(int32_t value);
  public:

  // int32 year = 3;
  void clear_year();
  int32_t year() const;
  void set_year(int32_t value);
  private:
  int32_t _internal_year() const;
  void _internal_set_year(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:content_creation.proto.Date)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t month_;
  int32_t day_;
  int32_t year_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_template_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class Collection final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content_creation.proto.Collection) */ {
 public:
  inline Collection() : Collection(nullptr) {}
  ~Collection() override;
  explicit PROTOBUF_CONSTEXPR Collection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Collection(const Collection& from);
  Collection(Collection&& from) noexcept
    : Collection() {
    *this = ::std::move(from);
  }

  inline Collection& operator=(const Collection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Collection& operator=(Collection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Collection& default_instance() {
    return *internal_default_instance();
  }
  static inline const Collection* internal_default_instance() {
    return reinterpret_cast<const Collection*>(
               &_Collection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Collection& a, Collection& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Collection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Collection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Collection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Collection>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Collection& from);
  void MergeFrom(const Collection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Collection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content_creation.proto.Collection";
  }
  protected:
  explicit Collection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionItemsFieldNumber = 1,
    kMaxTemplateNumberFieldNumber = 2,
  };
  // repeated .content_creation.proto.CollectionItem collectionItems = 1;
  int collectionitems_size() const;
  private:
  int _internal_collectionitems_size() const;
  public:
  void clear_collectionitems();
  ::content_creation::proto::CollectionItem* mutable_collectionitems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content_creation::proto::CollectionItem >*
      mutable_collectionitems();
  private:
  const ::content_creation::proto::CollectionItem& _internal_collectionitems(int index) const;
  ::content_creation::proto::CollectionItem* _internal_add_collectionitems();
  public:
  const ::content_creation::proto::CollectionItem& collectionitems(int index) const;
  ::content_creation::proto::CollectionItem* add_collectionitems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content_creation::proto::CollectionItem >&
      collectionitems() const;

  // int32 max_template_number = 2;
  void clear_max_template_number();
  int32_t max_template_number() const;
  void set_max_template_number(int32_t value);
  private:
  int32_t _internal_max_template_number() const;
  void _internal_set_max_template_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:content_creation.proto.Collection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content_creation::proto::CollectionItem > collectionitems_;
  int32_t max_template_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_template_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class CollectionItem final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content_creation.proto.CollectionItem) */ {
 public:
  inline CollectionItem() : CollectionItem(nullptr) {}
  ~CollectionItem() override;
  explicit PROTOBUF_CONSTEXPR CollectionItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectionItem(const CollectionItem& from);
  CollectionItem(CollectionItem&& from) noexcept
    : CollectionItem() {
    *this = ::std::move(from);
  }

  inline CollectionItem& operator=(const CollectionItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionItem& operator=(CollectionItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CollectionItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollectionItem* internal_default_instance() {
    return reinterpret_cast<const CollectionItem*>(
               &_CollectionItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CollectionItem& a, CollectionItem& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CollectionItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectionItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollectionItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollectionItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CollectionItem& from);
  void MergeFrom(const CollectionItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CollectionItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content_creation.proto.CollectionItem";
  }
  protected:
  explicit CollectionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeoFieldNumber = 4,
    kNoteTemplateFieldNumber = 1,
    kActivationFieldNumber = 2,
    kExpirationFieldNumber = 3,
  };
  // repeated string geo = 4;
  int geo_size() const;
  private:
  int _internal_geo_size() const;
  public:
  void clear_geo();
  const std::string& geo(int index) const;
  std::string* mutable_geo(int index);
  void set_geo(int index, const std::string& value);
  void set_geo(int index, std::string&& value);
  void set_geo(int index, const char* value);
  void set_geo(int index, const char* value, size_t size);
  std::string* add_geo();
  void add_geo(const std::string& value);
  void add_geo(std::string&& value);
  void add_geo(const char* value);
  void add_geo(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& geo() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_geo();
  private:
  const std::string& _internal_geo(int index) const;
  std::string* _internal_add_geo();
  public:

  // .content_creation.proto.NoteTemplate noteTemplate = 1;
  bool has_notetemplate() const;
  private:
  bool _internal_has_notetemplate() const;
  public:
  void clear_notetemplate();
  const ::content_creation::proto::NoteTemplate& notetemplate() const;
  PROTOBUF_NODISCARD ::content_creation::proto::NoteTemplate* release_notetemplate();
  ::content_creation::proto::NoteTemplate* mutable_notetemplate();
  void set_allocated_notetemplate(::content_creation::proto::NoteTemplate* notetemplate);
  private:
  const ::content_creation::proto::NoteTemplate& _internal_notetemplate() const;
  ::content_creation::proto::NoteTemplate* _internal_mutable_notetemplate();
  public:
  void unsafe_arena_set_allocated_notetemplate(
      ::content_creation::proto::NoteTemplate* notetemplate);
  ::content_creation::proto::NoteTemplate* unsafe_arena_release_notetemplate();

  // .content_creation.proto.Date activation = 2;
  bool has_activation() const;
  private:
  bool _internal_has_activation() const;
  public:
  void clear_activation();
  const ::content_creation::proto::Date& activation() const;
  PROTOBUF_NODISCARD ::content_creation::proto::Date* release_activation();
  ::content_creation::proto::Date* mutable_activation();
  void set_allocated_activation(::content_creation::proto::Date* activation);
  private:
  const ::content_creation::proto::Date& _internal_activation() const;
  ::content_creation::proto::Date* _internal_mutable_activation();
  public:
  void unsafe_arena_set_allocated_activation(
      ::content_creation::proto::Date* activation);
  ::content_creation::proto::Date* unsafe_arena_release_activation();

  // .content_creation.proto.Date expiration = 3;
  bool has_expiration() const;
  private:
  bool _internal_has_expiration() const;
  public:
  void clear_expiration();
  const ::content_creation::proto::Date& expiration() const;
  PROTOBUF_NODISCARD ::content_creation::proto::Date* release_expiration();
  ::content_creation::proto::Date* mutable_expiration();
  void set_allocated_expiration(::content_creation::proto::Date* expiration);
  private:
  const ::content_creation::proto::Date& _internal_expiration() const;
  ::content_creation::proto::Date* _internal_mutable_expiration();
  public:
  void unsafe_arena_set_allocated_expiration(
      ::content_creation::proto::Date* expiration);
  ::content_creation::proto::Date* unsafe_arena_release_expiration();

  // @@protoc_insertion_point(class_scope:content_creation.proto.CollectionItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> geo_;
  ::content_creation::proto::NoteTemplate* notetemplate_;
  ::content_creation::proto::Date* activation_;
  ::content_creation::proto::Date* expiration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_template_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class NoteTemplate final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content_creation.proto.NoteTemplate) */ {
 public:
  inline NoteTemplate() : NoteTemplate(nullptr) {}
  ~NoteTemplate() override;
  explicit PROTOBUF_CONSTEXPR NoteTemplate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoteTemplate(const NoteTemplate& from);
  NoteTemplate(NoteTemplate&& from) noexcept
    : NoteTemplate() {
    *this = ::std::move(from);
  }

  inline NoteTemplate& operator=(const NoteTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoteTemplate& operator=(NoteTemplate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const NoteTemplate& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoteTemplate* internal_default_instance() {
    return reinterpret_cast<const NoteTemplate*>(
               &_NoteTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NoteTemplate& a, NoteTemplate& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(NoteTemplate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoteTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NoteTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NoteTemplate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const NoteTemplate& from);
  void MergeFrom(const NoteTemplate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NoteTemplate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content_creation.proto.NoteTemplate";
  }
  protected:
  explicit NoteTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainBackgroundFieldNumber = 2,
    kContentBackgroundFieldNumber = 3,
    kTextStyleFieldNumber = 4,
    kFooterStyleFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // .content_creation.proto.Background mainBackground = 2;
  bool has_mainbackground() const;
  private:
  bool _internal_has_mainbackground() const;
  public:
  void clear_mainbackground();
  const ::content_creation::proto::Background& mainbackground() const;
  PROTOBUF_NODISCARD ::content_creation::proto::Background* release_mainbackground();
  ::content_creation::proto::Background* mutable_mainbackground();
  void set_allocated_mainbackground(::content_creation::proto::Background* mainbackground);
  private:
  const ::content_creation::proto::Background& _internal_mainbackground() const;
  ::content_creation::proto::Background* _internal_mutable_mainbackground();
  public:
  void unsafe_arena_set_allocated_mainbackground(
      ::content_creation::proto::Background* mainbackground);
  ::content_creation::proto::Background* unsafe_arena_release_mainbackground();

  // .content_creation.proto.Background contentBackground = 3;
  bool has_contentbackground() const;
  private:
  bool _internal_has_contentbackground() const;
  public:
  void clear_contentbackground();
  const ::content_creation::proto::Background& contentbackground() const;
  PROTOBUF_NODISCARD ::content_creation::proto::Background* release_contentbackground();
  ::content_creation::proto::Background* mutable_contentbackground();
  void set_allocated_contentbackground(::content_creation::proto::Background* contentbackground);
  private:
  const ::content_creation::proto::Background& _internal_contentbackground() const;
  ::content_creation::proto::Background* _internal_mutable_contentbackground();
  public:
  void unsafe_arena_set_allocated_contentbackground(
      ::content_creation::proto::Background* contentbackground);
  ::content_creation::proto::Background* unsafe_arena_release_contentbackground();

  // .content_creation.proto.TextStyle textStyle = 4;
  bool has_textstyle() const;
  private:
  bool _internal_has_textstyle() const;
  public:
  void clear_textstyle();
  const ::content_creation::proto::TextStyle& textstyle() const;
  PROTOBUF_NODISCARD ::content_creation::proto::TextStyle* release_textstyle();
  ::content_creation::proto::TextStyle* mutable_textstyle();
  void set_allocated_textstyle(::content_creation::proto::TextStyle* textstyle);
  private:
  const ::content_creation::proto::TextStyle& _internal_textstyle() const;
  ::content_creation::proto::TextStyle* _internal_mutable_textstyle();
  public:
  void unsafe_arena_set_allocated_textstyle(
      ::content_creation::proto::TextStyle* textstyle);
  ::content_creation::proto::TextStyle* unsafe_arena_release_textstyle();

  // .content_creation.proto.FooterStyle footerStyle = 5;
  bool has_footerstyle() const;
  private:
  bool _internal_has_footerstyle() const;
  public:
  void clear_footerstyle();
  const ::content_creation::proto::FooterStyle& footerstyle() const;
  PROTOBUF_NODISCARD ::content_creation::proto::FooterStyle* release_footerstyle();
  ::content_creation::proto::FooterStyle* mutable_footerstyle();
  void set_allocated_footerstyle(::content_creation::proto::FooterStyle* footerstyle);
  private:
  const ::content_creation::proto::FooterStyle& _internal_footerstyle() const;
  ::content_creation::proto::FooterStyle* _internal_mutable_footerstyle();
  public:
  void unsafe_arena_set_allocated_footerstyle(
      ::content_creation::proto::FooterStyle* footerstyle);
  ::content_creation::proto::FooterStyle* unsafe_arena_release_footerstyle();

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:content_creation.proto.NoteTemplate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::content_creation::proto::Background* mainbackground_;
  ::content_creation::proto::Background* contentbackground_;
  ::content_creation::proto::TextStyle* textstyle_;
  ::content_creation::proto::FooterStyle* footerstyle_;
  int32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_template_5fstorage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Gradient

// int32 orientation = 1;
inline void Gradient::clear_orientation() {
  orientation_ = 0;
}
inline int32_t Gradient::_internal_orientation() const {
  return orientation_;
}
inline int32_t Gradient::orientation() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.Gradient.orientation)
  return _internal_orientation();
}
inline void Gradient::_internal_set_orientation(int32_t value) {
  
  orientation_ = value;
}
inline void Gradient::set_orientation(int32_t value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:content_creation.proto.Gradient.orientation)
}

// repeated uint32 colors = 2;
inline int Gradient::_internal_colors_size() const {
  return colors_.size();
}
inline int Gradient::colors_size() const {
  return _internal_colors_size();
}
inline void Gradient::clear_colors() {
  colors_.Clear();
}
inline uint32_t Gradient::_internal_colors(int index) const {
  return colors_.Get(index);
}
inline uint32_t Gradient::colors(int index) const {
  // @@protoc_insertion_point(field_get:content_creation.proto.Gradient.colors)
  return _internal_colors(index);
}
inline void Gradient::set_colors(int index, uint32_t value) {
  colors_.Set(index, value);
  // @@protoc_insertion_point(field_set:content_creation.proto.Gradient.colors)
}
inline void Gradient::_internal_add_colors(uint32_t value) {
  colors_.Add(value);
}
inline void Gradient::add_colors(uint32_t value) {
  _internal_add_colors(value);
  // @@protoc_insertion_point(field_add:content_creation.proto.Gradient.colors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Gradient::_internal_colors() const {
  return colors_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Gradient::colors() const {
  // @@protoc_insertion_point(field_list:content_creation.proto.Gradient.colors)
  return _internal_colors();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Gradient::_internal_mutable_colors() {
  return &colors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Gradient::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:content_creation.proto.Gradient.colors)
  return _internal_mutable_colors();
}

// -------------------------------------------------------------------

// Background

// uint32 color = 1;
inline bool Background::_internal_has_color() const {
  return constructor_options_case() == kColor;
}
inline bool Background::has_color() const {
  return _internal_has_color();
}
inline void Background::set_has_color() {
  _oneof_case_[0] = kColor;
}
inline void Background::clear_color() {
  if (_internal_has_color()) {
    constructor_options_.color_ = 0u;
    clear_has_constructor_options();
  }
}
inline uint32_t Background::_internal_color() const {
  if (_internal_has_color()) {
    return constructor_options_.color_;
  }
  return 0u;
}
inline void Background::_internal_set_color(uint32_t value) {
  if (!_internal_has_color()) {
    clear_constructor_options();
    set_has_color();
  }
  constructor_options_.color_ = value;
}
inline uint32_t Background::color() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.Background.color)
  return _internal_color();
}
inline void Background::set_color(uint32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:content_creation.proto.Background.color)
}

// .content_creation.proto.Gradient gradient = 2;
inline bool Background::_internal_has_gradient() const {
  return constructor_options_case() == kGradient;
}
inline bool Background::has_gradient() const {
  return _internal_has_gradient();
}
inline void Background::set_has_gradient() {
  _oneof_case_[0] = kGradient;
}
inline void Background::clear_gradient() {
  if (_internal_has_gradient()) {
    if (GetArenaForAllocation() == nullptr) {
      delete constructor_options_.gradient_;
    }
    clear_has_constructor_options();
  }
}
inline ::content_creation::proto::Gradient* Background::release_gradient() {
  // @@protoc_insertion_point(field_release:content_creation.proto.Background.gradient)
  if (_internal_has_gradient()) {
    clear_has_constructor_options();
    ::content_creation::proto::Gradient* temp = constructor_options_.gradient_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    constructor_options_.gradient_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::content_creation::proto::Gradient& Background::_internal_gradient() const {
  return _internal_has_gradient()
      ? *constructor_options_.gradient_
      : reinterpret_cast< ::content_creation::proto::Gradient&>(::content_creation::proto::_Gradient_default_instance_);
}
inline const ::content_creation::proto::Gradient& Background::gradient() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.Background.gradient)
  return _internal_gradient();
}
inline ::content_creation::proto::Gradient* Background::unsafe_arena_release_gradient() {
  // @@protoc_insertion_point(field_unsafe_arena_release:content_creation.proto.Background.gradient)
  if (_internal_has_gradient()) {
    clear_has_constructor_options();
    ::content_creation::proto::Gradient* temp = constructor_options_.gradient_;
    constructor_options_.gradient_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Background::unsafe_arena_set_allocated_gradient(::content_creation::proto::Gradient* gradient) {
  clear_constructor_options();
  if (gradient) {
    set_has_gradient();
    constructor_options_.gradient_ = gradient;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content_creation.proto.Background.gradient)
}
inline ::content_creation::proto::Gradient* Background::_internal_mutable_gradient() {
  if (!_internal_has_gradient()) {
    clear_constructor_options();
    set_has_gradient();
    constructor_options_.gradient_ = CreateMaybeMessage< ::content_creation::proto::Gradient >(GetArenaForAllocation());
  }
  return constructor_options_.gradient_;
}
inline ::content_creation::proto::Gradient* Background::mutable_gradient() {
  ::content_creation::proto::Gradient* _msg = _internal_mutable_gradient();
  // @@protoc_insertion_point(field_mutable:content_creation.proto.Background.gradient)
  return _msg;
}

// string url = 3;
inline bool Background::_internal_has_url() const {
  return constructor_options_case() == kUrl;
}
inline bool Background::has_url() const {
  return _internal_has_url();
}
inline void Background::set_has_url() {
  _oneof_case_[0] = kUrl;
}
inline void Background::clear_url() {
  if (_internal_has_url()) {
    constructor_options_.url_.Destroy();
    clear_has_constructor_options();
  }
}
inline const std::string& Background::url() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.Background.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline void Background::set_url(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_url()) {
    clear_constructor_options();
    set_has_url();
    constructor_options_.url_.InitDefault();
  }
  constructor_options_.url_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content_creation.proto.Background.url)
}
inline std::string* Background::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:content_creation.proto.Background.url)
  return _s;
}
inline const std::string& Background::_internal_url() const {
  if (_internal_has_url()) {
    return constructor_options_.url_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Background::_internal_set_url(const std::string& value) {
  if (!_internal_has_url()) {
    clear_constructor_options();
    set_has_url();
    constructor_options_.url_.InitDefault();
  }
  constructor_options_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* Background::_internal_mutable_url() {
  if (!_internal_has_url()) {
    clear_constructor_options();
    set_has_url();
    constructor_options_.url_.InitDefault();
  }
  return constructor_options_.url_.Mutable(      GetArenaForAllocation());
}
inline std::string* Background::release_url() {
  // @@protoc_insertion_point(field_release:content_creation.proto.Background.url)
  if (_internal_has_url()) {
    clear_has_constructor_options();
    return constructor_options_.url_.Release();
  } else {
    return nullptr;
  }
}
inline void Background::set_allocated_url(std::string* url) {
  if (has_constructor_options()) {
    clear_constructor_options();
  }
  if (url != nullptr) {
    set_has_url();
    constructor_options_.url_.InitAllocated(url, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:content_creation.proto.Background.url)
}

inline bool Background::has_constructor_options() const {
  return constructor_options_case() != CONSTRUCTOR_OPTIONS_NOT_SET;
}
inline void Background::clear_has_constructor_options() {
  _oneof_case_[0] = CONSTRUCTOR_OPTIONS_NOT_SET;
}
inline Background::ConstructorOptionsCase Background::constructor_options_case() const {
  return Background::ConstructorOptionsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TextStyle

// string name = 1;
inline void TextStyle::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TextStyle::name() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.TextStyle.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextStyle::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content_creation.proto.TextStyle.name)
}
inline std::string* TextStyle::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:content_creation.proto.TextStyle.name)
  return _s;
}
inline const std::string& TextStyle::_internal_name() const {
  return name_.Get();
}
inline void TextStyle::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* TextStyle::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* TextStyle::release_name() {
  // @@protoc_insertion_point(field_release:content_creation.proto.TextStyle.name)
  return name_.Release();
}
inline void TextStyle::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content_creation.proto.TextStyle.name)
}

// uint32 color = 2;
inline void TextStyle::clear_color() {
  color_ = 0u;
}
inline uint32_t TextStyle::_internal_color() const {
  return color_;
}
inline uint32_t TextStyle::color() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.TextStyle.color)
  return _internal_color();
}
inline void TextStyle::_internal_set_color(uint32_t value) {
  
  color_ = value;
}
inline void TextStyle::set_color(uint32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:content_creation.proto.TextStyle.color)
}

// uint32 weight = 3;
inline void TextStyle::clear_weight() {
  weight_ = 0u;
}
inline uint32_t TextStyle::_internal_weight() const {
  return weight_;
}
inline uint32_t TextStyle::weight() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.TextStyle.weight)
  return _internal_weight();
}
inline void TextStyle::_internal_set_weight(uint32_t value) {
  
  weight_ = value;
}
inline void TextStyle::set_weight(uint32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:content_creation.proto.TextStyle.weight)
}

// bool allCaps = 4;
inline void TextStyle::clear_allcaps() {
  allcaps_ = false;
}
inline bool TextStyle::_internal_allcaps() const {
  return allcaps_;
}
inline bool TextStyle::allcaps() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.TextStyle.allCaps)
  return _internal_allcaps();
}
inline void TextStyle::_internal_set_allcaps(bool value) {
  
  allcaps_ = value;
}
inline void TextStyle::set_allcaps(bool value) {
  _internal_set_allcaps(value);
  // @@protoc_insertion_point(field_set:content_creation.proto.TextStyle.allCaps)
}

// int32 alignment = 5;
inline void TextStyle::clear_alignment() {
  alignment_ = 0;
}
inline int32_t TextStyle::_internal_alignment() const {
  return alignment_;
}
inline int32_t TextStyle::alignment() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.TextStyle.alignment)
  return _internal_alignment();
}
inline void TextStyle::_internal_set_alignment(int32_t value) {
  
  alignment_ = value;
}
inline void TextStyle::set_alignment(int32_t value) {
  _internal_set_alignment(value);
  // @@protoc_insertion_point(field_set:content_creation.proto.TextStyle.alignment)
}

// int32 minTextSize = 6;
inline void TextStyle::clear_mintextsize() {
  mintextsize_ = 0;
}
inline int32_t TextStyle::_internal_mintextsize() const {
  return mintextsize_;
}
inline int32_t TextStyle::mintextsize() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.TextStyle.minTextSize)
  return _internal_mintextsize();
}
inline void TextStyle::_internal_set_mintextsize(int32_t value) {
  
  mintextsize_ = value;
}
inline void TextStyle::set_mintextsize(int32_t value) {
  _internal_set_mintextsize(value);
  // @@protoc_insertion_point(field_set:content_creation.proto.TextStyle.minTextSize)
}

// int32 maxTextSize = 7;
inline void TextStyle::clear_maxtextsize() {
  maxtextsize_ = 0;
}
inline int32_t TextStyle::_internal_maxtextsize() const {
  return maxtextsize_;
}
inline int32_t TextStyle::maxtextsize() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.TextStyle.maxTextSize)
  return _internal_maxtextsize();
}
inline void TextStyle::_internal_set_maxtextsize(int32_t value) {
  
  maxtextsize_ = value;
}
inline void TextStyle::set_maxtextsize(int32_t value) {
  _internal_set_maxtextsize(value);
  // @@protoc_insertion_point(field_set:content_creation.proto.TextStyle.maxTextSize)
}

// uint32 highlightColor = 8;
inline void TextStyle::clear_highlightcolor() {
  highlightcolor_ = 0u;
}
inline uint32_t TextStyle::_internal_highlightcolor() const {
  return highlightcolor_;
}
inline uint32_t TextStyle::highlightcolor() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.TextStyle.highlightColor)
  return _internal_highlightcolor();
}
inline void TextStyle::_internal_set_highlightcolor(uint32_t value) {
  
  highlightcolor_ = value;
}
inline void TextStyle::set_highlightcolor(uint32_t value) {
  _internal_set_highlightcolor(value);
  // @@protoc_insertion_point(field_set:content_creation.proto.TextStyle.highlightColor)
}

// int32 highlightStyle = 9;
inline void TextStyle::clear_highlightstyle() {
  highlightstyle_ = 0;
}
inline int32_t TextStyle::_internal_highlightstyle() const {
  return highlightstyle_;
}
inline int32_t TextStyle::highlightstyle() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.TextStyle.highlightStyle)
  return _internal_highlightstyle();
}
inline void TextStyle::_internal_set_highlightstyle(int32_t value) {
  
  highlightstyle_ = value;
}
inline void TextStyle::set_highlightstyle(int32_t value) {
  _internal_set_highlightstyle(value);
  // @@protoc_insertion_point(field_set:content_creation.proto.TextStyle.highlightStyle)
}

// -------------------------------------------------------------------

// FooterStyle

// uint32 textColor = 1;
inline void FooterStyle::clear_textcolor() {
  textcolor_ = 0u;
}
inline uint32_t FooterStyle::_internal_textcolor() const {
  return textcolor_;
}
inline uint32_t FooterStyle::textcolor() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.FooterStyle.textColor)
  return _internal_textcolor();
}
inline void FooterStyle::_internal_set_textcolor(uint32_t value) {
  
  textcolor_ = value;
}
inline void FooterStyle::set_textcolor(uint32_t value) {
  _internal_set_textcolor(value);
  // @@protoc_insertion_point(field_set:content_creation.proto.FooterStyle.textColor)
}

// uint32 logoColor = 2;
inline void FooterStyle::clear_logocolor() {
  logocolor_ = 0u;
}
inline uint32_t FooterStyle::_internal_logocolor() const {
  return logocolor_;
}
inline uint32_t FooterStyle::logocolor() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.FooterStyle.logoColor)
  return _internal_logocolor();
}
inline void FooterStyle::_internal_set_logocolor(uint32_t value) {
  
  logocolor_ = value;
}
inline void FooterStyle::set_logocolor(uint32_t value) {
  _internal_set_logocolor(value);
  // @@protoc_insertion_point(field_set:content_creation.proto.FooterStyle.logoColor)
}

// -------------------------------------------------------------------

// Date

// int32 month = 1;
inline void Date::clear_month() {
  month_ = 0;
}
inline int32_t Date::_internal_month() const {
  return month_;
}
inline int32_t Date::month() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.Date.month)
  return _internal_month();
}
inline void Date::_internal_set_month(int32_t value) {
  
  month_ = value;
}
inline void Date::set_month(int32_t value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:content_creation.proto.Date.month)
}

// int32 day = 2;
inline void Date::clear_day() {
  day_ = 0;
}
inline int32_t Date::_internal_day() const {
  return day_;
}
inline int32_t Date::day() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.Date.day)
  return _internal_day();
}
inline void Date::_internal_set_day(int32_t value) {
  
  day_ = value;
}
inline void Date::set_day(int32_t value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:content_creation.proto.Date.day)
}

// int32 year = 3;
inline void Date::clear_year() {
  year_ = 0;
}
inline int32_t Date::_internal_year() const {
  return year_;
}
inline int32_t Date::year() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.Date.year)
  return _internal_year();
}
inline void Date::_internal_set_year(int32_t value) {
  
  year_ = value;
}
inline void Date::set_year(int32_t value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:content_creation.proto.Date.year)
}

// -------------------------------------------------------------------

// Collection

// repeated .content_creation.proto.CollectionItem collectionItems = 1;
inline int Collection::_internal_collectionitems_size() const {
  return collectionitems_.size();
}
inline int Collection::collectionitems_size() const {
  return _internal_collectionitems_size();
}
inline void Collection::clear_collectionitems() {
  collectionitems_.Clear();
}
inline ::content_creation::proto::CollectionItem* Collection::mutable_collectionitems(int index) {
  // @@protoc_insertion_point(field_mutable:content_creation.proto.Collection.collectionItems)
  return collectionitems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content_creation::proto::CollectionItem >*
Collection::mutable_collectionitems() {
  // @@protoc_insertion_point(field_mutable_list:content_creation.proto.Collection.collectionItems)
  return &collectionitems_;
}
inline const ::content_creation::proto::CollectionItem& Collection::_internal_collectionitems(int index) const {
  return collectionitems_.Get(index);
}
inline const ::content_creation::proto::CollectionItem& Collection::collectionitems(int index) const {
  // @@protoc_insertion_point(field_get:content_creation.proto.Collection.collectionItems)
  return _internal_collectionitems(index);
}
inline ::content_creation::proto::CollectionItem* Collection::_internal_add_collectionitems() {
  return collectionitems_.Add();
}
inline ::content_creation::proto::CollectionItem* Collection::add_collectionitems() {
  ::content_creation::proto::CollectionItem* _add = _internal_add_collectionitems();
  // @@protoc_insertion_point(field_add:content_creation.proto.Collection.collectionItems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content_creation::proto::CollectionItem >&
Collection::collectionitems() const {
  // @@protoc_insertion_point(field_list:content_creation.proto.Collection.collectionItems)
  return collectionitems_;
}

// int32 max_template_number = 2;
inline void Collection::clear_max_template_number() {
  max_template_number_ = 0;
}
inline int32_t Collection::_internal_max_template_number() const {
  return max_template_number_;
}
inline int32_t Collection::max_template_number() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.Collection.max_template_number)
  return _internal_max_template_number();
}
inline void Collection::_internal_set_max_template_number(int32_t value) {
  
  max_template_number_ = value;
}
inline void Collection::set_max_template_number(int32_t value) {
  _internal_set_max_template_number(value);
  // @@protoc_insertion_point(field_set:content_creation.proto.Collection.max_template_number)
}

// -------------------------------------------------------------------

// CollectionItem

// .content_creation.proto.NoteTemplate noteTemplate = 1;
inline bool CollectionItem::_internal_has_notetemplate() const {
  return this != internal_default_instance() && notetemplate_ != nullptr;
}
inline bool CollectionItem::has_notetemplate() const {
  return _internal_has_notetemplate();
}
inline void CollectionItem::clear_notetemplate() {
  if (GetArenaForAllocation() == nullptr && notetemplate_ != nullptr) {
    delete notetemplate_;
  }
  notetemplate_ = nullptr;
}
inline const ::content_creation::proto::NoteTemplate& CollectionItem::_internal_notetemplate() const {
  const ::content_creation::proto::NoteTemplate* p = notetemplate_;
  return p != nullptr ? *p : reinterpret_cast<const ::content_creation::proto::NoteTemplate&>(
      ::content_creation::proto::_NoteTemplate_default_instance_);
}
inline const ::content_creation::proto::NoteTemplate& CollectionItem::notetemplate() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.CollectionItem.noteTemplate)
  return _internal_notetemplate();
}
inline void CollectionItem::unsafe_arena_set_allocated_notetemplate(
    ::content_creation::proto::NoteTemplate* notetemplate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(notetemplate_);
  }
  notetemplate_ = notetemplate;
  if (notetemplate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content_creation.proto.CollectionItem.noteTemplate)
}
inline ::content_creation::proto::NoteTemplate* CollectionItem::release_notetemplate() {
  
  ::content_creation::proto::NoteTemplate* temp = notetemplate_;
  notetemplate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::content_creation::proto::NoteTemplate* CollectionItem::unsafe_arena_release_notetemplate() {
  // @@protoc_insertion_point(field_release:content_creation.proto.CollectionItem.noteTemplate)
  
  ::content_creation::proto::NoteTemplate* temp = notetemplate_;
  notetemplate_ = nullptr;
  return temp;
}
inline ::content_creation::proto::NoteTemplate* CollectionItem::_internal_mutable_notetemplate() {
  
  if (notetemplate_ == nullptr) {
    auto* p = CreateMaybeMessage<::content_creation::proto::NoteTemplate>(GetArenaForAllocation());
    notetemplate_ = p;
  }
  return notetemplate_;
}
inline ::content_creation::proto::NoteTemplate* CollectionItem::mutable_notetemplate() {
  ::content_creation::proto::NoteTemplate* _msg = _internal_mutable_notetemplate();
  // @@protoc_insertion_point(field_mutable:content_creation.proto.CollectionItem.noteTemplate)
  return _msg;
}
inline void CollectionItem::set_allocated_notetemplate(::content_creation::proto::NoteTemplate* notetemplate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete notetemplate_;
  }
  if (notetemplate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(notetemplate);
    if (message_arena != submessage_arena) {
      notetemplate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notetemplate, submessage_arena);
    }
    
  } else {
    
  }
  notetemplate_ = notetemplate;
  // @@protoc_insertion_point(field_set_allocated:content_creation.proto.CollectionItem.noteTemplate)
}

// .content_creation.proto.Date activation = 2;
inline bool CollectionItem::_internal_has_activation() const {
  return this != internal_default_instance() && activation_ != nullptr;
}
inline bool CollectionItem::has_activation() const {
  return _internal_has_activation();
}
inline void CollectionItem::clear_activation() {
  if (GetArenaForAllocation() == nullptr && activation_ != nullptr) {
    delete activation_;
  }
  activation_ = nullptr;
}
inline const ::content_creation::proto::Date& CollectionItem::_internal_activation() const {
  const ::content_creation::proto::Date* p = activation_;
  return p != nullptr ? *p : reinterpret_cast<const ::content_creation::proto::Date&>(
      ::content_creation::proto::_Date_default_instance_);
}
inline const ::content_creation::proto::Date& CollectionItem::activation() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.CollectionItem.activation)
  return _internal_activation();
}
inline void CollectionItem::unsafe_arena_set_allocated_activation(
    ::content_creation::proto::Date* activation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activation_);
  }
  activation_ = activation;
  if (activation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content_creation.proto.CollectionItem.activation)
}
inline ::content_creation::proto::Date* CollectionItem::release_activation() {
  
  ::content_creation::proto::Date* temp = activation_;
  activation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::content_creation::proto::Date* CollectionItem::unsafe_arena_release_activation() {
  // @@protoc_insertion_point(field_release:content_creation.proto.CollectionItem.activation)
  
  ::content_creation::proto::Date* temp = activation_;
  activation_ = nullptr;
  return temp;
}
inline ::content_creation::proto::Date* CollectionItem::_internal_mutable_activation() {
  
  if (activation_ == nullptr) {
    auto* p = CreateMaybeMessage<::content_creation::proto::Date>(GetArenaForAllocation());
    activation_ = p;
  }
  return activation_;
}
inline ::content_creation::proto::Date* CollectionItem::mutable_activation() {
  ::content_creation::proto::Date* _msg = _internal_mutable_activation();
  // @@protoc_insertion_point(field_mutable:content_creation.proto.CollectionItem.activation)
  return _msg;
}
inline void CollectionItem::set_allocated_activation(::content_creation::proto::Date* activation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete activation_;
  }
  if (activation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(activation);
    if (message_arena != submessage_arena) {
      activation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation, submessage_arena);
    }
    
  } else {
    
  }
  activation_ = activation;
  // @@protoc_insertion_point(field_set_allocated:content_creation.proto.CollectionItem.activation)
}

// .content_creation.proto.Date expiration = 3;
inline bool CollectionItem::_internal_has_expiration() const {
  return this != internal_default_instance() && expiration_ != nullptr;
}
inline bool CollectionItem::has_expiration() const {
  return _internal_has_expiration();
}
inline void CollectionItem::clear_expiration() {
  if (GetArenaForAllocation() == nullptr && expiration_ != nullptr) {
    delete expiration_;
  }
  expiration_ = nullptr;
}
inline const ::content_creation::proto::Date& CollectionItem::_internal_expiration() const {
  const ::content_creation::proto::Date* p = expiration_;
  return p != nullptr ? *p : reinterpret_cast<const ::content_creation::proto::Date&>(
      ::content_creation::proto::_Date_default_instance_);
}
inline const ::content_creation::proto::Date& CollectionItem::expiration() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.CollectionItem.expiration)
  return _internal_expiration();
}
inline void CollectionItem::unsafe_arena_set_allocated_expiration(
    ::content_creation::proto::Date* expiration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_);
  }
  expiration_ = expiration;
  if (expiration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content_creation.proto.CollectionItem.expiration)
}
inline ::content_creation::proto::Date* CollectionItem::release_expiration() {
  
  ::content_creation::proto::Date* temp = expiration_;
  expiration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::content_creation::proto::Date* CollectionItem::unsafe_arena_release_expiration() {
  // @@protoc_insertion_point(field_release:content_creation.proto.CollectionItem.expiration)
  
  ::content_creation::proto::Date* temp = expiration_;
  expiration_ = nullptr;
  return temp;
}
inline ::content_creation::proto::Date* CollectionItem::_internal_mutable_expiration() {
  
  if (expiration_ == nullptr) {
    auto* p = CreateMaybeMessage<::content_creation::proto::Date>(GetArenaForAllocation());
    expiration_ = p;
  }
  return expiration_;
}
inline ::content_creation::proto::Date* CollectionItem::mutable_expiration() {
  ::content_creation::proto::Date* _msg = _internal_mutable_expiration();
  // @@protoc_insertion_point(field_mutable:content_creation.proto.CollectionItem.expiration)
  return _msg;
}
inline void CollectionItem::set_allocated_expiration(::content_creation::proto::Date* expiration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete expiration_;
  }
  if (expiration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(expiration);
    if (message_arena != submessage_arena) {
      expiration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration, submessage_arena);
    }
    
  } else {
    
  }
  expiration_ = expiration;
  // @@protoc_insertion_point(field_set_allocated:content_creation.proto.CollectionItem.expiration)
}

// repeated string geo = 4;
inline int CollectionItem::_internal_geo_size() const {
  return geo_.size();
}
inline int CollectionItem::geo_size() const {
  return _internal_geo_size();
}
inline void CollectionItem::clear_geo() {
  geo_.Clear();
}
inline std::string* CollectionItem::add_geo() {
  std::string* _s = _internal_add_geo();
  // @@protoc_insertion_point(field_add_mutable:content_creation.proto.CollectionItem.geo)
  return _s;
}
inline const std::string& CollectionItem::_internal_geo(int index) const {
  return geo_.Get(index);
}
inline const std::string& CollectionItem::geo(int index) const {
  // @@protoc_insertion_point(field_get:content_creation.proto.CollectionItem.geo)
  return _internal_geo(index);
}
inline std::string* CollectionItem::mutable_geo(int index) {
  // @@protoc_insertion_point(field_mutable:content_creation.proto.CollectionItem.geo)
  return geo_.Mutable(index);
}
inline void CollectionItem::set_geo(int index, const std::string& value) {
  geo_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:content_creation.proto.CollectionItem.geo)
}
inline void CollectionItem::set_geo(int index, std::string&& value) {
  geo_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:content_creation.proto.CollectionItem.geo)
}
inline void CollectionItem::set_geo(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  geo_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:content_creation.proto.CollectionItem.geo)
}
inline void CollectionItem::set_geo(int index, const char* value, size_t size) {
  geo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:content_creation.proto.CollectionItem.geo)
}
inline std::string* CollectionItem::_internal_add_geo() {
  return geo_.Add();
}
inline void CollectionItem::add_geo(const std::string& value) {
  geo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:content_creation.proto.CollectionItem.geo)
}
inline void CollectionItem::add_geo(std::string&& value) {
  geo_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:content_creation.proto.CollectionItem.geo)
}
inline void CollectionItem::add_geo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  geo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:content_creation.proto.CollectionItem.geo)
}
inline void CollectionItem::add_geo(const char* value, size_t size) {
  geo_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:content_creation.proto.CollectionItem.geo)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CollectionItem::geo() const {
  // @@protoc_insertion_point(field_list:content_creation.proto.CollectionItem.geo)
  return geo_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CollectionItem::mutable_geo() {
  // @@protoc_insertion_point(field_mutable_list:content_creation.proto.CollectionItem.geo)
  return &geo_;
}

// -------------------------------------------------------------------

// NoteTemplate

// int32 Id = 1;
inline void NoteTemplate::clear_id() {
  id_ = 0;
}
inline int32_t NoteTemplate::_internal_id() const {
  return id_;
}
inline int32_t NoteTemplate::id() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.NoteTemplate.Id)
  return _internal_id();
}
inline void NoteTemplate::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void NoteTemplate::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:content_creation.proto.NoteTemplate.Id)
}

// .content_creation.proto.Background mainBackground = 2;
inline bool NoteTemplate::_internal_has_mainbackground() const {
  return this != internal_default_instance() && mainbackground_ != nullptr;
}
inline bool NoteTemplate::has_mainbackground() const {
  return _internal_has_mainbackground();
}
inline void NoteTemplate::clear_mainbackground() {
  if (GetArenaForAllocation() == nullptr && mainbackground_ != nullptr) {
    delete mainbackground_;
  }
  mainbackground_ = nullptr;
}
inline const ::content_creation::proto::Background& NoteTemplate::_internal_mainbackground() const {
  const ::content_creation::proto::Background* p = mainbackground_;
  return p != nullptr ? *p : reinterpret_cast<const ::content_creation::proto::Background&>(
      ::content_creation::proto::_Background_default_instance_);
}
inline const ::content_creation::proto::Background& NoteTemplate::mainbackground() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.NoteTemplate.mainBackground)
  return _internal_mainbackground();
}
inline void NoteTemplate::unsafe_arena_set_allocated_mainbackground(
    ::content_creation::proto::Background* mainbackground) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mainbackground_);
  }
  mainbackground_ = mainbackground;
  if (mainbackground) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content_creation.proto.NoteTemplate.mainBackground)
}
inline ::content_creation::proto::Background* NoteTemplate::release_mainbackground() {
  
  ::content_creation::proto::Background* temp = mainbackground_;
  mainbackground_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::content_creation::proto::Background* NoteTemplate::unsafe_arena_release_mainbackground() {
  // @@protoc_insertion_point(field_release:content_creation.proto.NoteTemplate.mainBackground)
  
  ::content_creation::proto::Background* temp = mainbackground_;
  mainbackground_ = nullptr;
  return temp;
}
inline ::content_creation::proto::Background* NoteTemplate::_internal_mutable_mainbackground() {
  
  if (mainbackground_ == nullptr) {
    auto* p = CreateMaybeMessage<::content_creation::proto::Background>(GetArenaForAllocation());
    mainbackground_ = p;
  }
  return mainbackground_;
}
inline ::content_creation::proto::Background* NoteTemplate::mutable_mainbackground() {
  ::content_creation::proto::Background* _msg = _internal_mutable_mainbackground();
  // @@protoc_insertion_point(field_mutable:content_creation.proto.NoteTemplate.mainBackground)
  return _msg;
}
inline void NoteTemplate::set_allocated_mainbackground(::content_creation::proto::Background* mainbackground) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mainbackground_;
  }
  if (mainbackground) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mainbackground);
    if (message_arena != submessage_arena) {
      mainbackground = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mainbackground, submessage_arena);
    }
    
  } else {
    
  }
  mainbackground_ = mainbackground;
  // @@protoc_insertion_point(field_set_allocated:content_creation.proto.NoteTemplate.mainBackground)
}

// .content_creation.proto.Background contentBackground = 3;
inline bool NoteTemplate::_internal_has_contentbackground() const {
  return this != internal_default_instance() && contentbackground_ != nullptr;
}
inline bool NoteTemplate::has_contentbackground() const {
  return _internal_has_contentbackground();
}
inline void NoteTemplate::clear_contentbackground() {
  if (GetArenaForAllocation() == nullptr && contentbackground_ != nullptr) {
    delete contentbackground_;
  }
  contentbackground_ = nullptr;
}
inline const ::content_creation::proto::Background& NoteTemplate::_internal_contentbackground() const {
  const ::content_creation::proto::Background* p = contentbackground_;
  return p != nullptr ? *p : reinterpret_cast<const ::content_creation::proto::Background&>(
      ::content_creation::proto::_Background_default_instance_);
}
inline const ::content_creation::proto::Background& NoteTemplate::contentbackground() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.NoteTemplate.contentBackground)
  return _internal_contentbackground();
}
inline void NoteTemplate::unsafe_arena_set_allocated_contentbackground(
    ::content_creation::proto::Background* contentbackground) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contentbackground_);
  }
  contentbackground_ = contentbackground;
  if (contentbackground) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content_creation.proto.NoteTemplate.contentBackground)
}
inline ::content_creation::proto::Background* NoteTemplate::release_contentbackground() {
  
  ::content_creation::proto::Background* temp = contentbackground_;
  contentbackground_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::content_creation::proto::Background* NoteTemplate::unsafe_arena_release_contentbackground() {
  // @@protoc_insertion_point(field_release:content_creation.proto.NoteTemplate.contentBackground)
  
  ::content_creation::proto::Background* temp = contentbackground_;
  contentbackground_ = nullptr;
  return temp;
}
inline ::content_creation::proto::Background* NoteTemplate::_internal_mutable_contentbackground() {
  
  if (contentbackground_ == nullptr) {
    auto* p = CreateMaybeMessage<::content_creation::proto::Background>(GetArenaForAllocation());
    contentbackground_ = p;
  }
  return contentbackground_;
}
inline ::content_creation::proto::Background* NoteTemplate::mutable_contentbackground() {
  ::content_creation::proto::Background* _msg = _internal_mutable_contentbackground();
  // @@protoc_insertion_point(field_mutable:content_creation.proto.NoteTemplate.contentBackground)
  return _msg;
}
inline void NoteTemplate::set_allocated_contentbackground(::content_creation::proto::Background* contentbackground) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete contentbackground_;
  }
  if (contentbackground) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(contentbackground);
    if (message_arena != submessage_arena) {
      contentbackground = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contentbackground, submessage_arena);
    }
    
  } else {
    
  }
  contentbackground_ = contentbackground;
  // @@protoc_insertion_point(field_set_allocated:content_creation.proto.NoteTemplate.contentBackground)
}

// .content_creation.proto.TextStyle textStyle = 4;
inline bool NoteTemplate::_internal_has_textstyle() const {
  return this != internal_default_instance() && textstyle_ != nullptr;
}
inline bool NoteTemplate::has_textstyle() const {
  return _internal_has_textstyle();
}
inline void NoteTemplate::clear_textstyle() {
  if (GetArenaForAllocation() == nullptr && textstyle_ != nullptr) {
    delete textstyle_;
  }
  textstyle_ = nullptr;
}
inline const ::content_creation::proto::TextStyle& NoteTemplate::_internal_textstyle() const {
  const ::content_creation::proto::TextStyle* p = textstyle_;
  return p != nullptr ? *p : reinterpret_cast<const ::content_creation::proto::TextStyle&>(
      ::content_creation::proto::_TextStyle_default_instance_);
}
inline const ::content_creation::proto::TextStyle& NoteTemplate::textstyle() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.NoteTemplate.textStyle)
  return _internal_textstyle();
}
inline void NoteTemplate::unsafe_arena_set_allocated_textstyle(
    ::content_creation::proto::TextStyle* textstyle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(textstyle_);
  }
  textstyle_ = textstyle;
  if (textstyle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content_creation.proto.NoteTemplate.textStyle)
}
inline ::content_creation::proto::TextStyle* NoteTemplate::release_textstyle() {
  
  ::content_creation::proto::TextStyle* temp = textstyle_;
  textstyle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::content_creation::proto::TextStyle* NoteTemplate::unsafe_arena_release_textstyle() {
  // @@protoc_insertion_point(field_release:content_creation.proto.NoteTemplate.textStyle)
  
  ::content_creation::proto::TextStyle* temp = textstyle_;
  textstyle_ = nullptr;
  return temp;
}
inline ::content_creation::proto::TextStyle* NoteTemplate::_internal_mutable_textstyle() {
  
  if (textstyle_ == nullptr) {
    auto* p = CreateMaybeMessage<::content_creation::proto::TextStyle>(GetArenaForAllocation());
    textstyle_ = p;
  }
  return textstyle_;
}
inline ::content_creation::proto::TextStyle* NoteTemplate::mutable_textstyle() {
  ::content_creation::proto::TextStyle* _msg = _internal_mutable_textstyle();
  // @@protoc_insertion_point(field_mutable:content_creation.proto.NoteTemplate.textStyle)
  return _msg;
}
inline void NoteTemplate::set_allocated_textstyle(::content_creation::proto::TextStyle* textstyle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete textstyle_;
  }
  if (textstyle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(textstyle);
    if (message_arena != submessage_arena) {
      textstyle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, textstyle, submessage_arena);
    }
    
  } else {
    
  }
  textstyle_ = textstyle;
  // @@protoc_insertion_point(field_set_allocated:content_creation.proto.NoteTemplate.textStyle)
}

// .content_creation.proto.FooterStyle footerStyle = 5;
inline bool NoteTemplate::_internal_has_footerstyle() const {
  return this != internal_default_instance() && footerstyle_ != nullptr;
}
inline bool NoteTemplate::has_footerstyle() const {
  return _internal_has_footerstyle();
}
inline void NoteTemplate::clear_footerstyle() {
  if (GetArenaForAllocation() == nullptr && footerstyle_ != nullptr) {
    delete footerstyle_;
  }
  footerstyle_ = nullptr;
}
inline const ::content_creation::proto::FooterStyle& NoteTemplate::_internal_footerstyle() const {
  const ::content_creation::proto::FooterStyle* p = footerstyle_;
  return p != nullptr ? *p : reinterpret_cast<const ::content_creation::proto::FooterStyle&>(
      ::content_creation::proto::_FooterStyle_default_instance_);
}
inline const ::content_creation::proto::FooterStyle& NoteTemplate::footerstyle() const {
  // @@protoc_insertion_point(field_get:content_creation.proto.NoteTemplate.footerStyle)
  return _internal_footerstyle();
}
inline void NoteTemplate::unsafe_arena_set_allocated_footerstyle(
    ::content_creation::proto::FooterStyle* footerstyle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footerstyle_);
  }
  footerstyle_ = footerstyle;
  if (footerstyle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content_creation.proto.NoteTemplate.footerStyle)
}
inline ::content_creation::proto::FooterStyle* NoteTemplate::release_footerstyle() {
  
  ::content_creation::proto::FooterStyle* temp = footerstyle_;
  footerstyle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::content_creation::proto::FooterStyle* NoteTemplate::unsafe_arena_release_footerstyle() {
  // @@protoc_insertion_point(field_release:content_creation.proto.NoteTemplate.footerStyle)
  
  ::content_creation::proto::FooterStyle* temp = footerstyle_;
  footerstyle_ = nullptr;
  return temp;
}
inline ::content_creation::proto::FooterStyle* NoteTemplate::_internal_mutable_footerstyle() {
  
  if (footerstyle_ == nullptr) {
    auto* p = CreateMaybeMessage<::content_creation::proto::FooterStyle>(GetArenaForAllocation());
    footerstyle_ = p;
  }
  return footerstyle_;
}
inline ::content_creation::proto::FooterStyle* NoteTemplate::mutable_footerstyle() {
  ::content_creation::proto::FooterStyle* _msg = _internal_mutable_footerstyle();
  // @@protoc_insertion_point(field_mutable:content_creation.proto.NoteTemplate.footerStyle)
  return _msg;
}
inline void NoteTemplate::set_allocated_footerstyle(::content_creation::proto::FooterStyle* footerstyle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete footerstyle_;
  }
  if (footerstyle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(footerstyle);
    if (message_arena != submessage_arena) {
      footerstyle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footerstyle, submessage_arena);
    }
    
  } else {
    
  }
  footerstyle_ = footerstyle;
  // @@protoc_insertion_point(field_set_allocated:content_creation.proto.NoteTemplate.footerStyle)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace content_creation

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_template_5fstorage_2eproto
