// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: note.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_note_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_note_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_note_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_note_2eproto {
  static const uint32_t offsets[];
};
namespace web_notes {
class PutWebnoteRequest;
struct PutWebnoteRequestDefaultTypeInternal;
extern PutWebnoteRequestDefaultTypeInternal _PutWebnoteRequest_default_instance_;
class PutWebnoteResponse;
struct PutWebnoteResponseDefaultTypeInternal;
extern PutWebnoteResponseDefaultTypeInternal _PutWebnoteResponse_default_instance_;
class Webnote;
struct WebnoteDefaultTypeInternal;
extern WebnoteDefaultTypeInternal _Webnote_default_instance_;
class WebnoteContentId;
struct WebnoteContentIdDefaultTypeInternal;
extern WebnoteContentIdDefaultTypeInternal _WebnoteContentId_default_instance_;
}  // namespace web_notes
PROTOBUF_NAMESPACE_OPEN
template<> ::web_notes::PutWebnoteRequest* Arena::CreateMaybeMessage<::web_notes::PutWebnoteRequest>(Arena*);
template<> ::web_notes::PutWebnoteResponse* Arena::CreateMaybeMessage<::web_notes::PutWebnoteResponse>(Arena*);
template<> ::web_notes::Webnote* Arena::CreateMaybeMessage<::web_notes::Webnote>(Arena*);
template<> ::web_notes::WebnoteContentId* Arena::CreateMaybeMessage<::web_notes::WebnoteContentId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace web_notes {

// ===================================================================

class Webnote final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:web_notes.Webnote) */ {
 public:
  inline Webnote() : Webnote(nullptr) {}
  ~Webnote() override;
  explicit PROTOBUF_CONSTEXPR Webnote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Webnote(const Webnote& from);
  Webnote(Webnote&& from) noexcept
    : Webnote() {
    *this = ::std::move(from);
  }

  inline Webnote& operator=(const Webnote& from) {
    CopyFrom(from);
    return *this;
  }
  inline Webnote& operator=(Webnote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Webnote& default_instance() {
    return *internal_default_instance();
  }
  static inline const Webnote* internal_default_instance() {
    return reinterpret_cast<const Webnote*>(
               &_Webnote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Webnote& a, Webnote& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Webnote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Webnote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Webnote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Webnote>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Webnote& from);
  void MergeFrom(const Webnote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Webnote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "web_notes.Webnote";
  }
  protected:
  explicit Webnote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoteFieldNumber = 1,
    kQuoteFieldNumber = 2,
    kWebPageUrlFieldNumber = 3,
    kHighlightDirectiveFieldNumber = 4,
  };
  // string note = 1;
  void clear_note();
  const std::string& note() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_note(ArgT0&& arg0, ArgT... args);
  std::string* mutable_note();
  PROTOBUF_NODISCARD std::string* release_note();
  void set_allocated_note(std::string* note);
  private:
  const std::string& _internal_note() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note(const std::string& value);
  std::string* _internal_mutable_note();
  public:

  // string quote = 2;
  void clear_quote();
  const std::string& quote() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quote(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quote();
  PROTOBUF_NODISCARD std::string* release_quote();
  void set_allocated_quote(std::string* quote);
  private:
  const std::string& _internal_quote() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote(const std::string& value);
  std::string* _internal_mutable_quote();
  public:

  // string web_page_url = 3;
  void clear_web_page_url();
  const std::string& web_page_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_web_page_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_web_page_url();
  PROTOBUF_NODISCARD std::string* release_web_page_url();
  void set_allocated_web_page_url(std::string* web_page_url);
  private:
  const std::string& _internal_web_page_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_web_page_url(const std::string& value);
  std::string* _internal_mutable_web_page_url();
  public:

  // string highlight_directive = 4;
  void clear_highlight_directive();
  const std::string& highlight_directive() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_highlight_directive(ArgT0&& arg0, ArgT... args);
  std::string* mutable_highlight_directive();
  PROTOBUF_NODISCARD std::string* release_highlight_directive();
  void set_allocated_highlight_directive(std::string* highlight_directive);
  private:
  const std::string& _internal_highlight_directive() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_highlight_directive(const std::string& value);
  std::string* _internal_mutable_highlight_directive();
  public:

  // @@protoc_insertion_point(class_scope:web_notes.Webnote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr web_page_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr highlight_directive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_note_2eproto;
};
// -------------------------------------------------------------------

class WebnoteContentId final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:web_notes.WebnoteContentId) */ {
 public:
  inline WebnoteContentId() : WebnoteContentId(nullptr) {}
  ~WebnoteContentId() override;
  explicit PROTOBUF_CONSTEXPR WebnoteContentId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WebnoteContentId(const WebnoteContentId& from);
  WebnoteContentId(WebnoteContentId&& from) noexcept
    : WebnoteContentId() {
    *this = ::std::move(from);
  }

  inline WebnoteContentId& operator=(const WebnoteContentId& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebnoteContentId& operator=(WebnoteContentId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const WebnoteContentId& default_instance() {
    return *internal_default_instance();
  }
  static inline const WebnoteContentId* internal_default_instance() {
    return reinterpret_cast<const WebnoteContentId*>(
               &_WebnoteContentId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WebnoteContentId& a, WebnoteContentId& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WebnoteContentId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebnoteContentId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WebnoteContentId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WebnoteContentId>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WebnoteContentId& from);
  void MergeFrom(const WebnoteContentId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebnoteContentId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "web_notes.WebnoteContentId";
  }
  protected:
  explicit WebnoteContentId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kWebnoteIdFieldNumber = 2,
  };
  // string account_id = 1;
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string webnote_id = 2;
  void clear_webnote_id();
  const std::string& webnote_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_webnote_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_webnote_id();
  PROTOBUF_NODISCARD std::string* release_webnote_id();
  void set_allocated_webnote_id(std::string* webnote_id);
  private:
  const std::string& _internal_webnote_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_webnote_id(const std::string& value);
  std::string* _internal_mutable_webnote_id();
  public:

  // @@protoc_insertion_point(class_scope:web_notes.WebnoteContentId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webnote_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_note_2eproto;
};
// -------------------------------------------------------------------

class PutWebnoteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:web_notes.PutWebnoteRequest) */ {
 public:
  inline PutWebnoteRequest() : PutWebnoteRequest(nullptr) {}
  ~PutWebnoteRequest() override;
  explicit PROTOBUF_CONSTEXPR PutWebnoteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PutWebnoteRequest(const PutWebnoteRequest& from);
  PutWebnoteRequest(PutWebnoteRequest&& from) noexcept
    : PutWebnoteRequest() {
    *this = ::std::move(from);
  }

  inline PutWebnoteRequest& operator=(const PutWebnoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutWebnoteRequest& operator=(PutWebnoteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PutWebnoteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutWebnoteRequest* internal_default_instance() {
    return reinterpret_cast<const PutWebnoteRequest*>(
               &_PutWebnoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PutWebnoteRequest& a, PutWebnoteRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PutWebnoteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutWebnoteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutWebnoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutWebnoteRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PutWebnoteRequest& from);
  void MergeFrom(const PutWebnoteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PutWebnoteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "web_notes.PutWebnoteRequest";
  }
  protected:
  explicit PutWebnoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWebnoteFieldNumber = 1,
  };
  // .web_notes.Webnote webnote = 1;
  bool has_webnote() const;
  private:
  bool _internal_has_webnote() const;
  public:
  void clear_webnote();
  const ::web_notes::Webnote& webnote() const;
  PROTOBUF_NODISCARD ::web_notes::Webnote* release_webnote();
  ::web_notes::Webnote* mutable_webnote();
  void set_allocated_webnote(::web_notes::Webnote* webnote);
  private:
  const ::web_notes::Webnote& _internal_webnote() const;
  ::web_notes::Webnote* _internal_mutable_webnote();
  public:
  void unsafe_arena_set_allocated_webnote(
      ::web_notes::Webnote* webnote);
  ::web_notes::Webnote* unsafe_arena_release_webnote();

  // @@protoc_insertion_point(class_scope:web_notes.PutWebnoteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::web_notes::Webnote* webnote_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_note_2eproto;
};
// -------------------------------------------------------------------

class PutWebnoteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:web_notes.PutWebnoteResponse) */ {
 public:
  inline PutWebnoteResponse() : PutWebnoteResponse(nullptr) {}
  ~PutWebnoteResponse() override;
  explicit PROTOBUF_CONSTEXPR PutWebnoteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PutWebnoteResponse(const PutWebnoteResponse& from);
  PutWebnoteResponse(PutWebnoteResponse&& from) noexcept
    : PutWebnoteResponse() {
    *this = ::std::move(from);
  }

  inline PutWebnoteResponse& operator=(const PutWebnoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutWebnoteResponse& operator=(PutWebnoteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PutWebnoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutWebnoteResponse* internal_default_instance() {
    return reinterpret_cast<const PutWebnoteResponse*>(
               &_PutWebnoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PutWebnoteResponse& a, PutWebnoteResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PutWebnoteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutWebnoteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutWebnoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutWebnoteResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PutWebnoteResponse& from);
  void MergeFrom(const PutWebnoteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PutWebnoteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "web_notes.PutWebnoteResponse";
  }
  protected:
  explicit PutWebnoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWebnoteContentIdFieldNumber = 1,
  };
  // .web_notes.WebnoteContentId webnote_content_id = 1;
  bool has_webnote_content_id() const;
  private:
  bool _internal_has_webnote_content_id() const;
  public:
  void clear_webnote_content_id();
  const ::web_notes::WebnoteContentId& webnote_content_id() const;
  PROTOBUF_NODISCARD ::web_notes::WebnoteContentId* release_webnote_content_id();
  ::web_notes::WebnoteContentId* mutable_webnote_content_id();
  void set_allocated_webnote_content_id(::web_notes::WebnoteContentId* webnote_content_id);
  private:
  const ::web_notes::WebnoteContentId& _internal_webnote_content_id() const;
  ::web_notes::WebnoteContentId* _internal_mutable_webnote_content_id();
  public:
  void unsafe_arena_set_allocated_webnote_content_id(
      ::web_notes::WebnoteContentId* webnote_content_id);
  ::web_notes::WebnoteContentId* unsafe_arena_release_webnote_content_id();

  // @@protoc_insertion_point(class_scope:web_notes.PutWebnoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::web_notes::WebnoteContentId* webnote_content_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_note_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Webnote

// string note = 1;
inline void Webnote::clear_note() {
  note_.ClearToEmpty();
}
inline const std::string& Webnote::note() const {
  // @@protoc_insertion_point(field_get:web_notes.Webnote.note)
  return _internal_note();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Webnote::set_note(ArgT0&& arg0, ArgT... args) {
 
 note_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:web_notes.Webnote.note)
}
inline std::string* Webnote::mutable_note() {
  std::string* _s = _internal_mutable_note();
  // @@protoc_insertion_point(field_mutable:web_notes.Webnote.note)
  return _s;
}
inline const std::string& Webnote::_internal_note() const {
  return note_.Get();
}
inline void Webnote::_internal_set_note(const std::string& value) {
  
  note_.Set(value, GetArenaForAllocation());
}
inline std::string* Webnote::_internal_mutable_note() {
  
  return note_.Mutable(GetArenaForAllocation());
}
inline std::string* Webnote::release_note() {
  // @@protoc_insertion_point(field_release:web_notes.Webnote.note)
  return note_.Release();
}
inline void Webnote::set_allocated_note(std::string* note) {
  if (note != nullptr) {
    
  } else {
    
  }
  note_.SetAllocated(note, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (note_.IsDefault()) {
    note_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:web_notes.Webnote.note)
}

// string quote = 2;
inline void Webnote::clear_quote() {
  quote_.ClearToEmpty();
}
inline const std::string& Webnote::quote() const {
  // @@protoc_insertion_point(field_get:web_notes.Webnote.quote)
  return _internal_quote();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Webnote::set_quote(ArgT0&& arg0, ArgT... args) {
 
 quote_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:web_notes.Webnote.quote)
}
inline std::string* Webnote::mutable_quote() {
  std::string* _s = _internal_mutable_quote();
  // @@protoc_insertion_point(field_mutable:web_notes.Webnote.quote)
  return _s;
}
inline const std::string& Webnote::_internal_quote() const {
  return quote_.Get();
}
inline void Webnote::_internal_set_quote(const std::string& value) {
  
  quote_.Set(value, GetArenaForAllocation());
}
inline std::string* Webnote::_internal_mutable_quote() {
  
  return quote_.Mutable(GetArenaForAllocation());
}
inline std::string* Webnote::release_quote() {
  // @@protoc_insertion_point(field_release:web_notes.Webnote.quote)
  return quote_.Release();
}
inline void Webnote::set_allocated_quote(std::string* quote) {
  if (quote != nullptr) {
    
  } else {
    
  }
  quote_.SetAllocated(quote, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (quote_.IsDefault()) {
    quote_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:web_notes.Webnote.quote)
}

// string web_page_url = 3;
inline void Webnote::clear_web_page_url() {
  web_page_url_.ClearToEmpty();
}
inline const std::string& Webnote::web_page_url() const {
  // @@protoc_insertion_point(field_get:web_notes.Webnote.web_page_url)
  return _internal_web_page_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Webnote::set_web_page_url(ArgT0&& arg0, ArgT... args) {
 
 web_page_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:web_notes.Webnote.web_page_url)
}
inline std::string* Webnote::mutable_web_page_url() {
  std::string* _s = _internal_mutable_web_page_url();
  // @@protoc_insertion_point(field_mutable:web_notes.Webnote.web_page_url)
  return _s;
}
inline const std::string& Webnote::_internal_web_page_url() const {
  return web_page_url_.Get();
}
inline void Webnote::_internal_set_web_page_url(const std::string& value) {
  
  web_page_url_.Set(value, GetArenaForAllocation());
}
inline std::string* Webnote::_internal_mutable_web_page_url() {
  
  return web_page_url_.Mutable(GetArenaForAllocation());
}
inline std::string* Webnote::release_web_page_url() {
  // @@protoc_insertion_point(field_release:web_notes.Webnote.web_page_url)
  return web_page_url_.Release();
}
inline void Webnote::set_allocated_web_page_url(std::string* web_page_url) {
  if (web_page_url != nullptr) {
    
  } else {
    
  }
  web_page_url_.SetAllocated(web_page_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (web_page_url_.IsDefault()) {
    web_page_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:web_notes.Webnote.web_page_url)
}

// string highlight_directive = 4;
inline void Webnote::clear_highlight_directive() {
  highlight_directive_.ClearToEmpty();
}
inline const std::string& Webnote::highlight_directive() const {
  // @@protoc_insertion_point(field_get:web_notes.Webnote.highlight_directive)
  return _internal_highlight_directive();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Webnote::set_highlight_directive(ArgT0&& arg0, ArgT... args) {
 
 highlight_directive_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:web_notes.Webnote.highlight_directive)
}
inline std::string* Webnote::mutable_highlight_directive() {
  std::string* _s = _internal_mutable_highlight_directive();
  // @@protoc_insertion_point(field_mutable:web_notes.Webnote.highlight_directive)
  return _s;
}
inline const std::string& Webnote::_internal_highlight_directive() const {
  return highlight_directive_.Get();
}
inline void Webnote::_internal_set_highlight_directive(const std::string& value) {
  
  highlight_directive_.Set(value, GetArenaForAllocation());
}
inline std::string* Webnote::_internal_mutable_highlight_directive() {
  
  return highlight_directive_.Mutable(GetArenaForAllocation());
}
inline std::string* Webnote::release_highlight_directive() {
  // @@protoc_insertion_point(field_release:web_notes.Webnote.highlight_directive)
  return highlight_directive_.Release();
}
inline void Webnote::set_allocated_highlight_directive(std::string* highlight_directive) {
  if (highlight_directive != nullptr) {
    
  } else {
    
  }
  highlight_directive_.SetAllocated(highlight_directive, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (highlight_directive_.IsDefault()) {
    highlight_directive_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:web_notes.Webnote.highlight_directive)
}

// -------------------------------------------------------------------

// WebnoteContentId

// string account_id = 1;
inline void WebnoteContentId::clear_account_id() {
  account_id_.ClearToEmpty();
}
inline const std::string& WebnoteContentId::account_id() const {
  // @@protoc_insertion_point(field_get:web_notes.WebnoteContentId.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebnoteContentId::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:web_notes.WebnoteContentId.account_id)
}
inline std::string* WebnoteContentId::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:web_notes.WebnoteContentId.account_id)
  return _s;
}
inline const std::string& WebnoteContentId::_internal_account_id() const {
  return account_id_.Get();
}
inline void WebnoteContentId::_internal_set_account_id(const std::string& value) {
  
  account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WebnoteContentId::_internal_mutable_account_id() {
  
  return account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WebnoteContentId::release_account_id() {
  // @@protoc_insertion_point(field_release:web_notes.WebnoteContentId.account_id)
  return account_id_.Release();
}
inline void WebnoteContentId::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocated(account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_id_.IsDefault()) {
    account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:web_notes.WebnoteContentId.account_id)
}

// string webnote_id = 2;
inline void WebnoteContentId::clear_webnote_id() {
  webnote_id_.ClearToEmpty();
}
inline const std::string& WebnoteContentId::webnote_id() const {
  // @@protoc_insertion_point(field_get:web_notes.WebnoteContentId.webnote_id)
  return _internal_webnote_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebnoteContentId::set_webnote_id(ArgT0&& arg0, ArgT... args) {
 
 webnote_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:web_notes.WebnoteContentId.webnote_id)
}
inline std::string* WebnoteContentId::mutable_webnote_id() {
  std::string* _s = _internal_mutable_webnote_id();
  // @@protoc_insertion_point(field_mutable:web_notes.WebnoteContentId.webnote_id)
  return _s;
}
inline const std::string& WebnoteContentId::_internal_webnote_id() const {
  return webnote_id_.Get();
}
inline void WebnoteContentId::_internal_set_webnote_id(const std::string& value) {
  
  webnote_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WebnoteContentId::_internal_mutable_webnote_id() {
  
  return webnote_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WebnoteContentId::release_webnote_id() {
  // @@protoc_insertion_point(field_release:web_notes.WebnoteContentId.webnote_id)
  return webnote_id_.Release();
}
inline void WebnoteContentId::set_allocated_webnote_id(std::string* webnote_id) {
  if (webnote_id != nullptr) {
    
  } else {
    
  }
  webnote_id_.SetAllocated(webnote_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (webnote_id_.IsDefault()) {
    webnote_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:web_notes.WebnoteContentId.webnote_id)
}

// -------------------------------------------------------------------

// PutWebnoteRequest

// .web_notes.Webnote webnote = 1;
inline bool PutWebnoteRequest::_internal_has_webnote() const {
  return this != internal_default_instance() && webnote_ != nullptr;
}
inline bool PutWebnoteRequest::has_webnote() const {
  return _internal_has_webnote();
}
inline void PutWebnoteRequest::clear_webnote() {
  if (GetArenaForAllocation() == nullptr && webnote_ != nullptr) {
    delete webnote_;
  }
  webnote_ = nullptr;
}
inline const ::web_notes::Webnote& PutWebnoteRequest::_internal_webnote() const {
  const ::web_notes::Webnote* p = webnote_;
  return p != nullptr ? *p : reinterpret_cast<const ::web_notes::Webnote&>(
      ::web_notes::_Webnote_default_instance_);
}
inline const ::web_notes::Webnote& PutWebnoteRequest::webnote() const {
  // @@protoc_insertion_point(field_get:web_notes.PutWebnoteRequest.webnote)
  return _internal_webnote();
}
inline void PutWebnoteRequest::unsafe_arena_set_allocated_webnote(
    ::web_notes::Webnote* webnote) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(webnote_);
  }
  webnote_ = webnote;
  if (webnote) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:web_notes.PutWebnoteRequest.webnote)
}
inline ::web_notes::Webnote* PutWebnoteRequest::release_webnote() {
  
  ::web_notes::Webnote* temp = webnote_;
  webnote_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::web_notes::Webnote* PutWebnoteRequest::unsafe_arena_release_webnote() {
  // @@protoc_insertion_point(field_release:web_notes.PutWebnoteRequest.webnote)
  
  ::web_notes::Webnote* temp = webnote_;
  webnote_ = nullptr;
  return temp;
}
inline ::web_notes::Webnote* PutWebnoteRequest::_internal_mutable_webnote() {
  
  if (webnote_ == nullptr) {
    auto* p = CreateMaybeMessage<::web_notes::Webnote>(GetArenaForAllocation());
    webnote_ = p;
  }
  return webnote_;
}
inline ::web_notes::Webnote* PutWebnoteRequest::mutable_webnote() {
  ::web_notes::Webnote* _msg = _internal_mutable_webnote();
  // @@protoc_insertion_point(field_mutable:web_notes.PutWebnoteRequest.webnote)
  return _msg;
}
inline void PutWebnoteRequest::set_allocated_webnote(::web_notes::Webnote* webnote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete webnote_;
  }
  if (webnote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(webnote);
    if (message_arena != submessage_arena) {
      webnote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, webnote, submessage_arena);
    }
    
  } else {
    
  }
  webnote_ = webnote;
  // @@protoc_insertion_point(field_set_allocated:web_notes.PutWebnoteRequest.webnote)
}

// -------------------------------------------------------------------

// PutWebnoteResponse

// .web_notes.WebnoteContentId webnote_content_id = 1;
inline bool PutWebnoteResponse::_internal_has_webnote_content_id() const {
  return this != internal_default_instance() && webnote_content_id_ != nullptr;
}
inline bool PutWebnoteResponse::has_webnote_content_id() const {
  return _internal_has_webnote_content_id();
}
inline void PutWebnoteResponse::clear_webnote_content_id() {
  if (GetArenaForAllocation() == nullptr && webnote_content_id_ != nullptr) {
    delete webnote_content_id_;
  }
  webnote_content_id_ = nullptr;
}
inline const ::web_notes::WebnoteContentId& PutWebnoteResponse::_internal_webnote_content_id() const {
  const ::web_notes::WebnoteContentId* p = webnote_content_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::web_notes::WebnoteContentId&>(
      ::web_notes::_WebnoteContentId_default_instance_);
}
inline const ::web_notes::WebnoteContentId& PutWebnoteResponse::webnote_content_id() const {
  // @@protoc_insertion_point(field_get:web_notes.PutWebnoteResponse.webnote_content_id)
  return _internal_webnote_content_id();
}
inline void PutWebnoteResponse::unsafe_arena_set_allocated_webnote_content_id(
    ::web_notes::WebnoteContentId* webnote_content_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(webnote_content_id_);
  }
  webnote_content_id_ = webnote_content_id;
  if (webnote_content_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:web_notes.PutWebnoteResponse.webnote_content_id)
}
inline ::web_notes::WebnoteContentId* PutWebnoteResponse::release_webnote_content_id() {
  
  ::web_notes::WebnoteContentId* temp = webnote_content_id_;
  webnote_content_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::web_notes::WebnoteContentId* PutWebnoteResponse::unsafe_arena_release_webnote_content_id() {
  // @@protoc_insertion_point(field_release:web_notes.PutWebnoteResponse.webnote_content_id)
  
  ::web_notes::WebnoteContentId* temp = webnote_content_id_;
  webnote_content_id_ = nullptr;
  return temp;
}
inline ::web_notes::WebnoteContentId* PutWebnoteResponse::_internal_mutable_webnote_content_id() {
  
  if (webnote_content_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::web_notes::WebnoteContentId>(GetArenaForAllocation());
    webnote_content_id_ = p;
  }
  return webnote_content_id_;
}
inline ::web_notes::WebnoteContentId* PutWebnoteResponse::mutable_webnote_content_id() {
  ::web_notes::WebnoteContentId* _msg = _internal_mutable_webnote_content_id();
  // @@protoc_insertion_point(field_mutable:web_notes.PutWebnoteResponse.webnote_content_id)
  return _msg;
}
inline void PutWebnoteResponse::set_allocated_webnote_content_id(::web_notes::WebnoteContentId* webnote_content_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete webnote_content_id_;
  }
  if (webnote_content_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(webnote_content_id);
    if (message_arena != submessage_arena) {
      webnote_content_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, webnote_content_id, submessage_arena);
    }
    
  } else {
    
  }
  webnote_content_id_ = webnote_content_id;
  // @@protoc_insertion_point(field_set_allocated:web_notes.PutWebnoteResponse.webnote_content_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace web_notes

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_note_2eproto
