// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shared_db_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_shared_5fdb_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_shared_5fdb_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_shared_5fdb_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_shared_5fdb_5fmetadata_2eproto {
  static const uint32_t offsets[];
};
namespace leveldb_proto {
class SharedDBMetadataProto;
struct SharedDBMetadataProtoDefaultTypeInternal;
extern SharedDBMetadataProtoDefaultTypeInternal _SharedDBMetadataProto_default_instance_;
}  // namespace leveldb_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::leveldb_proto::SharedDBMetadataProto* Arena::CreateMaybeMessage<::leveldb_proto::SharedDBMetadataProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace leveldb_proto {

enum SharedDBMetadataProto_MigrationStatus : int {
  SharedDBMetadataProto_MigrationStatus_MIGRATION_NOT_ATTEMPTED = 0,
  SharedDBMetadataProto_MigrationStatus_MIGRATE_TO_SHARED_SUCCESSFUL = 1,
  SharedDBMetadataProto_MigrationStatus_MIGRATE_TO_SHARED_UNIQUE_TO_BE_DELETED = 2,
  SharedDBMetadataProto_MigrationStatus_MIGRATE_TO_UNIQUE_SUCCESSFUL = 3,
  SharedDBMetadataProto_MigrationStatus_MIGRATE_TO_UNIQUE_SHARED_TO_BE_DELETED = 4
};
bool SharedDBMetadataProto_MigrationStatus_IsValid(int value);
constexpr SharedDBMetadataProto_MigrationStatus SharedDBMetadataProto_MigrationStatus_MigrationStatus_MIN = SharedDBMetadataProto_MigrationStatus_MIGRATION_NOT_ATTEMPTED;
constexpr SharedDBMetadataProto_MigrationStatus SharedDBMetadataProto_MigrationStatus_MigrationStatus_MAX = SharedDBMetadataProto_MigrationStatus_MIGRATE_TO_UNIQUE_SHARED_TO_BE_DELETED;
constexpr int SharedDBMetadataProto_MigrationStatus_MigrationStatus_ARRAYSIZE = SharedDBMetadataProto_MigrationStatus_MigrationStatus_MAX + 1;

const std::string& SharedDBMetadataProto_MigrationStatus_Name(SharedDBMetadataProto_MigrationStatus value);
template<typename T>
inline const std::string& SharedDBMetadataProto_MigrationStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SharedDBMetadataProto_MigrationStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SharedDBMetadataProto_MigrationStatus_Name.");
  return SharedDBMetadataProto_MigrationStatus_Name(static_cast<SharedDBMetadataProto_MigrationStatus>(enum_t_value));
}
bool SharedDBMetadataProto_MigrationStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SharedDBMetadataProto_MigrationStatus* value);
// ===================================================================

class SharedDBMetadataProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:leveldb_proto.SharedDBMetadataProto) */ {
 public:
  inline SharedDBMetadataProto() : SharedDBMetadataProto(nullptr) {}
  ~SharedDBMetadataProto() override;
  explicit PROTOBUF_CONSTEXPR SharedDBMetadataProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharedDBMetadataProto(const SharedDBMetadataProto& from);
  SharedDBMetadataProto(SharedDBMetadataProto&& from) noexcept
    : SharedDBMetadataProto() {
    *this = ::std::move(from);
  }

  inline SharedDBMetadataProto& operator=(const SharedDBMetadataProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharedDBMetadataProto& operator=(SharedDBMetadataProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharedDBMetadataProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharedDBMetadataProto* internal_default_instance() {
    return reinterpret_cast<const SharedDBMetadataProto*>(
               &_SharedDBMetadataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SharedDBMetadataProto& a, SharedDBMetadataProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SharedDBMetadataProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharedDBMetadataProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharedDBMetadataProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharedDBMetadataProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharedDBMetadataProto& from);
  void MergeFrom(const SharedDBMetadataProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharedDBMetadataProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "leveldb_proto.SharedDBMetadataProto";
  }
  protected:
  explicit SharedDBMetadataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SharedDBMetadataProto_MigrationStatus MigrationStatus;
  static constexpr MigrationStatus MIGRATION_NOT_ATTEMPTED =
    SharedDBMetadataProto_MigrationStatus_MIGRATION_NOT_ATTEMPTED;
  static constexpr MigrationStatus MIGRATE_TO_SHARED_SUCCESSFUL =
    SharedDBMetadataProto_MigrationStatus_MIGRATE_TO_SHARED_SUCCESSFUL;
  static constexpr MigrationStatus MIGRATE_TO_SHARED_UNIQUE_TO_BE_DELETED =
    SharedDBMetadataProto_MigrationStatus_MIGRATE_TO_SHARED_UNIQUE_TO_BE_DELETED;
  static constexpr MigrationStatus MIGRATE_TO_UNIQUE_SUCCESSFUL =
    SharedDBMetadataProto_MigrationStatus_MIGRATE_TO_UNIQUE_SUCCESSFUL;
  static constexpr MigrationStatus MIGRATE_TO_UNIQUE_SHARED_TO_BE_DELETED =
    SharedDBMetadataProto_MigrationStatus_MIGRATE_TO_UNIQUE_SHARED_TO_BE_DELETED;
  static inline bool MigrationStatus_IsValid(int value) {
    return SharedDBMetadataProto_MigrationStatus_IsValid(value);
  }
  static constexpr MigrationStatus MigrationStatus_MIN =
    SharedDBMetadataProto_MigrationStatus_MigrationStatus_MIN;
  static constexpr MigrationStatus MigrationStatus_MAX =
    SharedDBMetadataProto_MigrationStatus_MigrationStatus_MAX;
  static constexpr int MigrationStatus_ARRAYSIZE =
    SharedDBMetadataProto_MigrationStatus_MigrationStatus_ARRAYSIZE;
  template<typename T>
  static inline const std::string& MigrationStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MigrationStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MigrationStatus_Name.");
    return SharedDBMetadataProto_MigrationStatus_Name(enum_t_value);
  }
  static inline bool MigrationStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MigrationStatus* value) {
    return SharedDBMetadataProto_MigrationStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCorruptionsFieldNumber = 1,
    kMigrationStatusFieldNumber = 3,
    kFailureCountFieldNumber = 4,
  };
  // optional uint64 corruptions = 1;
  bool has_corruptions() const;
  private:
  bool _internal_has_corruptions() const;
  public:
  void clear_corruptions();
  uint64_t corruptions() const;
  void set_corruptions(uint64_t value);
  private:
  uint64_t _internal_corruptions() const;
  void _internal_set_corruptions(uint64_t value);
  public:

  // optional .leveldb_proto.SharedDBMetadataProto.MigrationStatus migration_status = 3;
  bool has_migration_status() const;
  private:
  bool _internal_has_migration_status() const;
  public:
  void clear_migration_status();
  ::leveldb_proto::SharedDBMetadataProto_MigrationStatus migration_status() const;
  void set_migration_status(::leveldb_proto::SharedDBMetadataProto_MigrationStatus value);
  private:
  ::leveldb_proto::SharedDBMetadataProto_MigrationStatus _internal_migration_status() const;
  void _internal_set_migration_status(::leveldb_proto::SharedDBMetadataProto_MigrationStatus value);
  public:

  // optional uint32 failure_count = 4;
  bool has_failure_count() const;
  private:
  bool _internal_has_failure_count() const;
  public:
  void clear_failure_count();
  uint32_t failure_count() const;
  void set_failure_count(uint32_t value);
  private:
  uint32_t _internal_failure_count() const;
  void _internal_set_failure_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:leveldb_proto.SharedDBMetadataProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t corruptions_;
  int migration_status_;
  uint32_t failure_count_;
  friend struct ::TableStruct_shared_5fdb_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SharedDBMetadataProto

// optional uint64 corruptions = 1;
inline bool SharedDBMetadataProto::_internal_has_corruptions() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharedDBMetadataProto::has_corruptions() const {
  return _internal_has_corruptions();
}
inline void SharedDBMetadataProto::clear_corruptions() {
  corruptions_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t SharedDBMetadataProto::_internal_corruptions() const {
  return corruptions_;
}
inline uint64_t SharedDBMetadataProto::corruptions() const {
  // @@protoc_insertion_point(field_get:leveldb_proto.SharedDBMetadataProto.corruptions)
  return _internal_corruptions();
}
inline void SharedDBMetadataProto::_internal_set_corruptions(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  corruptions_ = value;
}
inline void SharedDBMetadataProto::set_corruptions(uint64_t value) {
  _internal_set_corruptions(value);
  // @@protoc_insertion_point(field_set:leveldb_proto.SharedDBMetadataProto.corruptions)
}

// optional .leveldb_proto.SharedDBMetadataProto.MigrationStatus migration_status = 3;
inline bool SharedDBMetadataProto::_internal_has_migration_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharedDBMetadataProto::has_migration_status() const {
  return _internal_has_migration_status();
}
inline void SharedDBMetadataProto::clear_migration_status() {
  migration_status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::leveldb_proto::SharedDBMetadataProto_MigrationStatus SharedDBMetadataProto::_internal_migration_status() const {
  return static_cast< ::leveldb_proto::SharedDBMetadataProto_MigrationStatus >(migration_status_);
}
inline ::leveldb_proto::SharedDBMetadataProto_MigrationStatus SharedDBMetadataProto::migration_status() const {
  // @@protoc_insertion_point(field_get:leveldb_proto.SharedDBMetadataProto.migration_status)
  return _internal_migration_status();
}
inline void SharedDBMetadataProto::_internal_set_migration_status(::leveldb_proto::SharedDBMetadataProto_MigrationStatus value) {
  assert(::leveldb_proto::SharedDBMetadataProto_MigrationStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  migration_status_ = value;
}
inline void SharedDBMetadataProto::set_migration_status(::leveldb_proto::SharedDBMetadataProto_MigrationStatus value) {
  _internal_set_migration_status(value);
  // @@protoc_insertion_point(field_set:leveldb_proto.SharedDBMetadataProto.migration_status)
}

// optional uint32 failure_count = 4;
inline bool SharedDBMetadataProto::_internal_has_failure_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharedDBMetadataProto::has_failure_count() const {
  return _internal_has_failure_count();
}
inline void SharedDBMetadataProto::clear_failure_count() {
  failure_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t SharedDBMetadataProto::_internal_failure_count() const {
  return failure_count_;
}
inline uint32_t SharedDBMetadataProto::failure_count() const {
  // @@protoc_insertion_point(field_get:leveldb_proto.SharedDBMetadataProto.failure_count)
  return _internal_failure_count();
}
inline void SharedDBMetadataProto::_internal_set_failure_count(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  failure_count_ = value;
}
inline void SharedDBMetadataProto::set_failure_count(uint32_t value) {
  _internal_set_failure_count(value);
  // @@protoc_insertion_point(field_set:leveldb_proto.SharedDBMetadataProto.failure_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace leveldb_proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::leveldb_proto::SharedDBMetadataProto_MigrationStatus> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_shared_5fdb_5fmetadata_2eproto
