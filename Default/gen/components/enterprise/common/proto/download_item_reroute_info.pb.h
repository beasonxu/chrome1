// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/enterprise/common/proto/download_item_reroute_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fenterprise_2fcommon_2fproto_2fdownload_5fitem_5freroute_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fenterprise_2fcommon_2fproto_2fdownload_5fitem_5freroute_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fenterprise_2fcommon_2fproto_2fdownload_5fitem_5freroute_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fenterprise_2fcommon_2fproto_2fdownload_5fitem_5freroute_5finfo_2eproto {
  static const uint32_t offsets[];
};
namespace enterprise_connectors {
class BoxInfo;
struct BoxInfoDefaultTypeInternal;
extern BoxInfoDefaultTypeInternal _BoxInfo_default_instance_;
class DownloadItemRerouteInfo;
struct DownloadItemRerouteInfoDefaultTypeInternal;
extern DownloadItemRerouteInfoDefaultTypeInternal _DownloadItemRerouteInfo_default_instance_;
class GoogleDriveInfo;
struct GoogleDriveInfoDefaultTypeInternal;
extern GoogleDriveInfoDefaultTypeInternal _GoogleDriveInfo_default_instance_;
}  // namespace enterprise_connectors
PROTOBUF_NAMESPACE_OPEN
template<> ::enterprise_connectors::BoxInfo* Arena::CreateMaybeMessage<::enterprise_connectors::BoxInfo>(Arena*);
template<> ::enterprise_connectors::DownloadItemRerouteInfo* Arena::CreateMaybeMessage<::enterprise_connectors::DownloadItemRerouteInfo>(Arena*);
template<> ::enterprise_connectors::GoogleDriveInfo* Arena::CreateMaybeMessage<::enterprise_connectors::GoogleDriveInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace enterprise_connectors {

enum FileSystemServiceProvider : int {
  BOX = 0,
  GOOGLE_DRIVE = 1
};
bool FileSystemServiceProvider_IsValid(int value);
constexpr FileSystemServiceProvider FileSystemServiceProvider_MIN = BOX;
constexpr FileSystemServiceProvider FileSystemServiceProvider_MAX = GOOGLE_DRIVE;
constexpr int FileSystemServiceProvider_ARRAYSIZE = FileSystemServiceProvider_MAX + 1;

const std::string& FileSystemServiceProvider_Name(FileSystemServiceProvider value);
template<typename T>
inline const std::string& FileSystemServiceProvider_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileSystemServiceProvider>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileSystemServiceProvider_Name.");
  return FileSystemServiceProvider_Name(static_cast<FileSystemServiceProvider>(enum_t_value));
}
bool FileSystemServiceProvider_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FileSystemServiceProvider* value);
// ===================================================================

class BoxInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_connectors.BoxInfo) */ {
 public:
  inline BoxInfo() : BoxInfo(nullptr) {}
  ~BoxInfo() override;
  explicit PROTOBUF_CONSTEXPR BoxInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoxInfo(const BoxInfo& from);
  BoxInfo(BoxInfo&& from) noexcept
    : BoxInfo() {
    *this = ::std::move(from);
  }

  inline BoxInfo& operator=(const BoxInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoxInfo& operator=(BoxInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BoxInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoxInfo* internal_default_instance() {
    return reinterpret_cast<const BoxInfo*>(
               &_BoxInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BoxInfo& a, BoxInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BoxInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoxInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoxInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoxInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BoxInfo& from);
  void MergeFrom(const BoxInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoxInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_connectors.BoxInfo";
  }
  protected:
  explicit BoxInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileIdFieldNumber = 1,
    kFolderIdFieldNumber = 2,
    kErrorMessageFieldNumber = 100,
    kAdditionalMessageFieldNumber = 101,
  };
  // optional string file_id = 1;
  bool has_file_id() const;
  private:
  bool _internal_has_file_id() const;
  public:
  void clear_file_id();
  const std::string& file_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_id();
  PROTOBUF_NODISCARD std::string* release_file_id();
  void set_allocated_file_id(std::string* file_id);
  private:
  const std::string& _internal_file_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_id(const std::string& value);
  std::string* _internal_mutable_file_id();
  public:

  // optional string folder_id = 2;
  bool has_folder_id() const;
  private:
  bool _internal_has_folder_id() const;
  public:
  void clear_folder_id();
  const std::string& folder_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_folder_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_folder_id();
  PROTOBUF_NODISCARD std::string* release_folder_id();
  void set_allocated_folder_id(std::string* folder_id);
  private:
  const std::string& _internal_folder_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_folder_id(const std::string& value);
  std::string* _internal_mutable_folder_id();
  public:

  // optional string error_message = 100;
  bool has_error_message() const;
  private:
  bool _internal_has_error_message() const;
  public:
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // optional string additional_message = 101;
  bool has_additional_message() const;
  private:
  bool _internal_has_additional_message() const;
  public:
  void clear_additional_message();
  const std::string& additional_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_additional_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_additional_message();
  PROTOBUF_NODISCARD std::string* release_additional_message();
  void set_allocated_additional_message(std::string* additional_message);
  private:
  const std::string& _internal_additional_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_additional_message(const std::string& value);
  std::string* _internal_mutable_additional_message();
  public:

  // @@protoc_insertion_point(class_scope:enterprise_connectors.BoxInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr folder_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr additional_message_;
  friend struct ::TableStruct_components_2fenterprise_2fcommon_2fproto_2fdownload_5fitem_5freroute_5finfo_2eproto;
};
// -------------------------------------------------------------------

class GoogleDriveInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_connectors.GoogleDriveInfo) */ {
 public:
  inline GoogleDriveInfo() : GoogleDriveInfo(nullptr) {}
  ~GoogleDriveInfo() override;
  explicit PROTOBUF_CONSTEXPR GoogleDriveInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GoogleDriveInfo(const GoogleDriveInfo& from);
  GoogleDriveInfo(GoogleDriveInfo&& from) noexcept
    : GoogleDriveInfo() {
    *this = ::std::move(from);
  }

  inline GoogleDriveInfo& operator=(const GoogleDriveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoogleDriveInfo& operator=(GoogleDriveInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GoogleDriveInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GoogleDriveInfo* internal_default_instance() {
    return reinterpret_cast<const GoogleDriveInfo*>(
               &_GoogleDriveInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GoogleDriveInfo& a, GoogleDriveInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(GoogleDriveInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoogleDriveInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GoogleDriveInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GoogleDriveInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GoogleDriveInfo& from);
  void MergeFrom(const GoogleDriveInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GoogleDriveInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_connectors.GoogleDriveInfo";
  }
  protected:
  explicit GoogleDriveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:enterprise_connectors.GoogleDriveInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fenterprise_2fcommon_2fproto_2fdownload_5fitem_5freroute_5finfo_2eproto;
};
// -------------------------------------------------------------------

class DownloadItemRerouteInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_connectors.DownloadItemRerouteInfo) */ {
 public:
  inline DownloadItemRerouteInfo() : DownloadItemRerouteInfo(nullptr) {}
  ~DownloadItemRerouteInfo() override;
  explicit PROTOBUF_CONSTEXPR DownloadItemRerouteInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownloadItemRerouteInfo(const DownloadItemRerouteInfo& from);
  DownloadItemRerouteInfo(DownloadItemRerouteInfo&& from) noexcept
    : DownloadItemRerouteInfo() {
    *this = ::std::move(from);
  }

  inline DownloadItemRerouteInfo& operator=(const DownloadItemRerouteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadItemRerouteInfo& operator=(DownloadItemRerouteInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DownloadItemRerouteInfo& default_instance() {
    return *internal_default_instance();
  }
  enum UploadCase {
    kBox = 100,
    kGoogleDrive = 101,
    UPLOAD_NOT_SET = 0,
  };

  static inline const DownloadItemRerouteInfo* internal_default_instance() {
    return reinterpret_cast<const DownloadItemRerouteInfo*>(
               &_DownloadItemRerouteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DownloadItemRerouteInfo& a, DownloadItemRerouteInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DownloadItemRerouteInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadItemRerouteInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DownloadItemRerouteInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DownloadItemRerouteInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DownloadItemRerouteInfo& from);
  void MergeFrom(const DownloadItemRerouteInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DownloadItemRerouteInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_connectors.DownloadItemRerouteInfo";
  }
  protected:
  explicit DownloadItemRerouteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceProviderFieldNumber = 1,
    kBoxFieldNumber = 100,
    kGoogleDriveFieldNumber = 101,
  };
  // required .enterprise_connectors.FileSystemServiceProvider service_provider = 1;
  bool has_service_provider() const;
  private:
  bool _internal_has_service_provider() const;
  public:
  void clear_service_provider();
  ::enterprise_connectors::FileSystemServiceProvider service_provider() const;
  void set_service_provider(::enterprise_connectors::FileSystemServiceProvider value);
  private:
  ::enterprise_connectors::FileSystemServiceProvider _internal_service_provider() const;
  void _internal_set_service_provider(::enterprise_connectors::FileSystemServiceProvider value);
  public:

  // .enterprise_connectors.BoxInfo box = 100;
  bool has_box() const;
  private:
  bool _internal_has_box() const;
  public:
  void clear_box();
  const ::enterprise_connectors::BoxInfo& box() const;
  PROTOBUF_NODISCARD ::enterprise_connectors::BoxInfo* release_box();
  ::enterprise_connectors::BoxInfo* mutable_box();
  void set_allocated_box(::enterprise_connectors::BoxInfo* box);
  private:
  const ::enterprise_connectors::BoxInfo& _internal_box() const;
  ::enterprise_connectors::BoxInfo* _internal_mutable_box();
  public:
  void unsafe_arena_set_allocated_box(
      ::enterprise_connectors::BoxInfo* box);
  ::enterprise_connectors::BoxInfo* unsafe_arena_release_box();

  // .enterprise_connectors.GoogleDriveInfo google_drive = 101;
  bool has_google_drive() const;
  private:
  bool _internal_has_google_drive() const;
  public:
  void clear_google_drive();
  const ::enterprise_connectors::GoogleDriveInfo& google_drive() const;
  PROTOBUF_NODISCARD ::enterprise_connectors::GoogleDriveInfo* release_google_drive();
  ::enterprise_connectors::GoogleDriveInfo* mutable_google_drive();
  void set_allocated_google_drive(::enterprise_connectors::GoogleDriveInfo* google_drive);
  private:
  const ::enterprise_connectors::GoogleDriveInfo& _internal_google_drive() const;
  ::enterprise_connectors::GoogleDriveInfo* _internal_mutable_google_drive();
  public:
  void unsafe_arena_set_allocated_google_drive(
      ::enterprise_connectors::GoogleDriveInfo* google_drive);
  ::enterprise_connectors::GoogleDriveInfo* unsafe_arena_release_google_drive();

  void clear_upload();
  UploadCase upload_case() const;
  // @@protoc_insertion_point(class_scope:enterprise_connectors.DownloadItemRerouteInfo)
 private:
  class _Internal;
  void set_has_box();
  void set_has_google_drive();

  inline bool has_upload() const;
  inline void clear_has_upload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int service_provider_;
  union UploadUnion {
    constexpr UploadUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::enterprise_connectors::BoxInfo* box_;
    ::enterprise_connectors::GoogleDriveInfo* google_drive_;
  } upload_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2fenterprise_2fcommon_2fproto_2fdownload_5fitem_5freroute_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BoxInfo

// optional string file_id = 1;
inline bool BoxInfo::_internal_has_file_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BoxInfo::has_file_id() const {
  return _internal_has_file_id();
}
inline void BoxInfo::clear_file_id() {
  file_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BoxInfo::file_id() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.BoxInfo.file_id)
  return _internal_file_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BoxInfo::set_file_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.BoxInfo.file_id)
}
inline std::string* BoxInfo::mutable_file_id() {
  std::string* _s = _internal_mutable_file_id();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.BoxInfo.file_id)
  return _s;
}
inline const std::string& BoxInfo::_internal_file_id() const {
  return file_id_.Get();
}
inline void BoxInfo::_internal_set_file_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BoxInfo::_internal_mutable_file_id() {
  _has_bits_[0] |= 0x00000001u;
  return file_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BoxInfo::release_file_id() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.BoxInfo.file_id)
  if (!_internal_has_file_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = file_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_id_.IsDefault()) {
    file_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BoxInfo::set_allocated_file_id(std::string* file_id) {
  if (file_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_id_.SetAllocated(file_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_id_.IsDefault()) {
    file_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.BoxInfo.file_id)
}

// optional string folder_id = 2;
inline bool BoxInfo::_internal_has_folder_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BoxInfo::has_folder_id() const {
  return _internal_has_folder_id();
}
inline void BoxInfo::clear_folder_id() {
  folder_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BoxInfo::folder_id() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.BoxInfo.folder_id)
  return _internal_folder_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BoxInfo::set_folder_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 folder_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.BoxInfo.folder_id)
}
inline std::string* BoxInfo::mutable_folder_id() {
  std::string* _s = _internal_mutable_folder_id();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.BoxInfo.folder_id)
  return _s;
}
inline const std::string& BoxInfo::_internal_folder_id() const {
  return folder_id_.Get();
}
inline void BoxInfo::_internal_set_folder_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  folder_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BoxInfo::_internal_mutable_folder_id() {
  _has_bits_[0] |= 0x00000002u;
  return folder_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BoxInfo::release_folder_id() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.BoxInfo.folder_id)
  if (!_internal_has_folder_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = folder_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (folder_id_.IsDefault()) {
    folder_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BoxInfo::set_allocated_folder_id(std::string* folder_id) {
  if (folder_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  folder_id_.SetAllocated(folder_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (folder_id_.IsDefault()) {
    folder_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.BoxInfo.folder_id)
}

// optional string error_message = 100;
inline bool BoxInfo::_internal_has_error_message() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BoxInfo::has_error_message() const {
  return _internal_has_error_message();
}
inline void BoxInfo::clear_error_message() {
  error_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BoxInfo::error_message() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.BoxInfo.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BoxInfo::set_error_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.BoxInfo.error_message)
}
inline std::string* BoxInfo::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.BoxInfo.error_message)
  return _s;
}
inline const std::string& BoxInfo::_internal_error_message() const {
  return error_message_.Get();
}
inline void BoxInfo::_internal_set_error_message(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* BoxInfo::_internal_mutable_error_message() {
  _has_bits_[0] |= 0x00000004u;
  return error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* BoxInfo::release_error_message() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.BoxInfo.error_message)
  if (!_internal_has_error_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = error_message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault()) {
    error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BoxInfo::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault()) {
    error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.BoxInfo.error_message)
}

// optional string additional_message = 101;
inline bool BoxInfo::_internal_has_additional_message() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BoxInfo::has_additional_message() const {
  return _internal_has_additional_message();
}
inline void BoxInfo::clear_additional_message() {
  additional_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& BoxInfo::additional_message() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.BoxInfo.additional_message)
  return _internal_additional_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BoxInfo::set_additional_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 additional_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_connectors.BoxInfo.additional_message)
}
inline std::string* BoxInfo::mutable_additional_message() {
  std::string* _s = _internal_mutable_additional_message();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.BoxInfo.additional_message)
  return _s;
}
inline const std::string& BoxInfo::_internal_additional_message() const {
  return additional_message_.Get();
}
inline void BoxInfo::_internal_set_additional_message(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  additional_message_.Set(value, GetArenaForAllocation());
}
inline std::string* BoxInfo::_internal_mutable_additional_message() {
  _has_bits_[0] |= 0x00000008u;
  return additional_message_.Mutable(GetArenaForAllocation());
}
inline std::string* BoxInfo::release_additional_message() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.BoxInfo.additional_message)
  if (!_internal_has_additional_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = additional_message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (additional_message_.IsDefault()) {
    additional_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BoxInfo::set_allocated_additional_message(std::string* additional_message) {
  if (additional_message != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  additional_message_.SetAllocated(additional_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (additional_message_.IsDefault()) {
    additional_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.BoxInfo.additional_message)
}

// -------------------------------------------------------------------

// GoogleDriveInfo

// -------------------------------------------------------------------

// DownloadItemRerouteInfo

// required .enterprise_connectors.FileSystemServiceProvider service_provider = 1;
inline bool DownloadItemRerouteInfo::_internal_has_service_provider() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DownloadItemRerouteInfo::has_service_provider() const {
  return _internal_has_service_provider();
}
inline void DownloadItemRerouteInfo::clear_service_provider() {
  service_provider_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::enterprise_connectors::FileSystemServiceProvider DownloadItemRerouteInfo::_internal_service_provider() const {
  return static_cast< ::enterprise_connectors::FileSystemServiceProvider >(service_provider_);
}
inline ::enterprise_connectors::FileSystemServiceProvider DownloadItemRerouteInfo::service_provider() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.DownloadItemRerouteInfo.service_provider)
  return _internal_service_provider();
}
inline void DownloadItemRerouteInfo::_internal_set_service_provider(::enterprise_connectors::FileSystemServiceProvider value) {
  assert(::enterprise_connectors::FileSystemServiceProvider_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  service_provider_ = value;
}
inline void DownloadItemRerouteInfo::set_service_provider(::enterprise_connectors::FileSystemServiceProvider value) {
  _internal_set_service_provider(value);
  // @@protoc_insertion_point(field_set:enterprise_connectors.DownloadItemRerouteInfo.service_provider)
}

// .enterprise_connectors.BoxInfo box = 100;
inline bool DownloadItemRerouteInfo::_internal_has_box() const {
  return upload_case() == kBox;
}
inline bool DownloadItemRerouteInfo::has_box() const {
  return _internal_has_box();
}
inline void DownloadItemRerouteInfo::set_has_box() {
  _oneof_case_[0] = kBox;
}
inline void DownloadItemRerouteInfo::clear_box() {
  if (_internal_has_box()) {
    if (GetArenaForAllocation() == nullptr) {
      delete upload_.box_;
    }
    clear_has_upload();
  }
}
inline ::enterprise_connectors::BoxInfo* DownloadItemRerouteInfo::release_box() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.DownloadItemRerouteInfo.box)
  if (_internal_has_box()) {
    clear_has_upload();
    ::enterprise_connectors::BoxInfo* temp = upload_.box_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    upload_.box_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::enterprise_connectors::BoxInfo& DownloadItemRerouteInfo::_internal_box() const {
  return _internal_has_box()
      ? *upload_.box_
      : reinterpret_cast< ::enterprise_connectors::BoxInfo&>(::enterprise_connectors::_BoxInfo_default_instance_);
}
inline const ::enterprise_connectors::BoxInfo& DownloadItemRerouteInfo::box() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.DownloadItemRerouteInfo.box)
  return _internal_box();
}
inline ::enterprise_connectors::BoxInfo* DownloadItemRerouteInfo::unsafe_arena_release_box() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_connectors.DownloadItemRerouteInfo.box)
  if (_internal_has_box()) {
    clear_has_upload();
    ::enterprise_connectors::BoxInfo* temp = upload_.box_;
    upload_.box_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DownloadItemRerouteInfo::unsafe_arena_set_allocated_box(::enterprise_connectors::BoxInfo* box) {
  clear_upload();
  if (box) {
    set_has_box();
    upload_.box_ = box;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_connectors.DownloadItemRerouteInfo.box)
}
inline ::enterprise_connectors::BoxInfo* DownloadItemRerouteInfo::_internal_mutable_box() {
  if (!_internal_has_box()) {
    clear_upload();
    set_has_box();
    upload_.box_ = CreateMaybeMessage< ::enterprise_connectors::BoxInfo >(GetArenaForAllocation());
  }
  return upload_.box_;
}
inline ::enterprise_connectors::BoxInfo* DownloadItemRerouteInfo::mutable_box() {
  ::enterprise_connectors::BoxInfo* _msg = _internal_mutable_box();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.DownloadItemRerouteInfo.box)
  return _msg;
}

// .enterprise_connectors.GoogleDriveInfo google_drive = 101;
inline bool DownloadItemRerouteInfo::_internal_has_google_drive() const {
  return upload_case() == kGoogleDrive;
}
inline bool DownloadItemRerouteInfo::has_google_drive() const {
  return _internal_has_google_drive();
}
inline void DownloadItemRerouteInfo::set_has_google_drive() {
  _oneof_case_[0] = kGoogleDrive;
}
inline void DownloadItemRerouteInfo::clear_google_drive() {
  if (_internal_has_google_drive()) {
    if (GetArenaForAllocation() == nullptr) {
      delete upload_.google_drive_;
    }
    clear_has_upload();
  }
}
inline ::enterprise_connectors::GoogleDriveInfo* DownloadItemRerouteInfo::release_google_drive() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.DownloadItemRerouteInfo.google_drive)
  if (_internal_has_google_drive()) {
    clear_has_upload();
    ::enterprise_connectors::GoogleDriveInfo* temp = upload_.google_drive_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    upload_.google_drive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::enterprise_connectors::GoogleDriveInfo& DownloadItemRerouteInfo::_internal_google_drive() const {
  return _internal_has_google_drive()
      ? *upload_.google_drive_
      : reinterpret_cast< ::enterprise_connectors::GoogleDriveInfo&>(::enterprise_connectors::_GoogleDriveInfo_default_instance_);
}
inline const ::enterprise_connectors::GoogleDriveInfo& DownloadItemRerouteInfo::google_drive() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.DownloadItemRerouteInfo.google_drive)
  return _internal_google_drive();
}
inline ::enterprise_connectors::GoogleDriveInfo* DownloadItemRerouteInfo::unsafe_arena_release_google_drive() {
  // @@protoc_insertion_point(field_unsafe_arena_release:enterprise_connectors.DownloadItemRerouteInfo.google_drive)
  if (_internal_has_google_drive()) {
    clear_has_upload();
    ::enterprise_connectors::GoogleDriveInfo* temp = upload_.google_drive_;
    upload_.google_drive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DownloadItemRerouteInfo::unsafe_arena_set_allocated_google_drive(::enterprise_connectors::GoogleDriveInfo* google_drive) {
  clear_upload();
  if (google_drive) {
    set_has_google_drive();
    upload_.google_drive_ = google_drive;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:enterprise_connectors.DownloadItemRerouteInfo.google_drive)
}
inline ::enterprise_connectors::GoogleDriveInfo* DownloadItemRerouteInfo::_internal_mutable_google_drive() {
  if (!_internal_has_google_drive()) {
    clear_upload();
    set_has_google_drive();
    upload_.google_drive_ = CreateMaybeMessage< ::enterprise_connectors::GoogleDriveInfo >(GetArenaForAllocation());
  }
  return upload_.google_drive_;
}
inline ::enterprise_connectors::GoogleDriveInfo* DownloadItemRerouteInfo::mutable_google_drive() {
  ::enterprise_connectors::GoogleDriveInfo* _msg = _internal_mutable_google_drive();
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.DownloadItemRerouteInfo.google_drive)
  return _msg;
}

inline bool DownloadItemRerouteInfo::has_upload() const {
  return upload_case() != UPLOAD_NOT_SET;
}
inline void DownloadItemRerouteInfo::clear_has_upload() {
  _oneof_case_[0] = UPLOAD_NOT_SET;
}
inline DownloadItemRerouteInfo::UploadCase DownloadItemRerouteInfo::upload_case() const {
  return DownloadItemRerouteInfo::UploadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace enterprise_connectors

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::enterprise_connectors::FileSystemServiceProvider> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fenterprise_2fcommon_2fproto_2fdownload_5fitem_5freroute_5finfo_2eproto
