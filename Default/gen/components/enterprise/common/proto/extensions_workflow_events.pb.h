// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/enterprise/common/proto/extensions_workflow_events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fenterprise_2fcommon_2fproto_2fextensions_5fworkflow_5fevents_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fenterprise_2fcommon_2fproto_2fextensions_5fworkflow_5fevents_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fenterprise_2fcommon_2fproto_2fextensions_5fworkflow_5fevents_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fenterprise_2fcommon_2fproto_2fextensions_5fworkflow_5fevents_2eproto {
  static const uint32_t offsets[];
};
namespace enterprise_reporting {
class ExtensionsWorkflowEvent;
struct ExtensionsWorkflowEventDefaultTypeInternal;
extern ExtensionsWorkflowEventDefaultTypeInternal _ExtensionsWorkflowEvent_default_instance_;
}  // namespace enterprise_reporting
PROTOBUF_NAMESPACE_OPEN
template<> ::enterprise_reporting::ExtensionsWorkflowEvent* Arena::CreateMaybeMessage<::enterprise_reporting::ExtensionsWorkflowEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace enterprise_reporting {

enum ExtensionsWorkflowEvent_ClientType : int {
  ExtensionsWorkflowEvent_ClientType_UNKNOWN = 0,
  ExtensionsWorkflowEvent_ClientType_CHROME_OS_USER = 1,
  ExtensionsWorkflowEvent_ClientType_BROWSER_DEVICE = 2
};
bool ExtensionsWorkflowEvent_ClientType_IsValid(int value);
constexpr ExtensionsWorkflowEvent_ClientType ExtensionsWorkflowEvent_ClientType_ClientType_MIN = ExtensionsWorkflowEvent_ClientType_UNKNOWN;
constexpr ExtensionsWorkflowEvent_ClientType ExtensionsWorkflowEvent_ClientType_ClientType_MAX = ExtensionsWorkflowEvent_ClientType_BROWSER_DEVICE;
constexpr int ExtensionsWorkflowEvent_ClientType_ClientType_ARRAYSIZE = ExtensionsWorkflowEvent_ClientType_ClientType_MAX + 1;

const std::string& ExtensionsWorkflowEvent_ClientType_Name(ExtensionsWorkflowEvent_ClientType value);
template<typename T>
inline const std::string& ExtensionsWorkflowEvent_ClientType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExtensionsWorkflowEvent_ClientType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExtensionsWorkflowEvent_ClientType_Name.");
  return ExtensionsWorkflowEvent_ClientType_Name(static_cast<ExtensionsWorkflowEvent_ClientType>(enum_t_value));
}
bool ExtensionsWorkflowEvent_ClientType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExtensionsWorkflowEvent_ClientType* value);
// ===================================================================

class ExtensionsWorkflowEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_reporting.ExtensionsWorkflowEvent) */ {
 public:
  inline ExtensionsWorkflowEvent() : ExtensionsWorkflowEvent(nullptr) {}
  ~ExtensionsWorkflowEvent() override;
  explicit PROTOBUF_CONSTEXPR ExtensionsWorkflowEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionsWorkflowEvent(const ExtensionsWorkflowEvent& from);
  ExtensionsWorkflowEvent(ExtensionsWorkflowEvent&& from) noexcept
    : ExtensionsWorkflowEvent() {
    *this = ::std::move(from);
  }

  inline ExtensionsWorkflowEvent& operator=(const ExtensionsWorkflowEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionsWorkflowEvent& operator=(ExtensionsWorkflowEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ExtensionsWorkflowEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionsWorkflowEvent* internal_default_instance() {
    return reinterpret_cast<const ExtensionsWorkflowEvent*>(
               &_ExtensionsWorkflowEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExtensionsWorkflowEvent& a, ExtensionsWorkflowEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ExtensionsWorkflowEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionsWorkflowEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionsWorkflowEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionsWorkflowEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ExtensionsWorkflowEvent& from);
  void MergeFrom(const ExtensionsWorkflowEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExtensionsWorkflowEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_reporting.ExtensionsWorkflowEvent";
  }
  protected:
  explicit ExtensionsWorkflowEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ExtensionsWorkflowEvent_ClientType ClientType;
  static constexpr ClientType UNKNOWN =
    ExtensionsWorkflowEvent_ClientType_UNKNOWN;
  static constexpr ClientType CHROME_OS_USER =
    ExtensionsWorkflowEvent_ClientType_CHROME_OS_USER;
  static constexpr ClientType BROWSER_DEVICE =
    ExtensionsWorkflowEvent_ClientType_BROWSER_DEVICE;
  static inline bool ClientType_IsValid(int value) {
    return ExtensionsWorkflowEvent_ClientType_IsValid(value);
  }
  static constexpr ClientType ClientType_MIN =
    ExtensionsWorkflowEvent_ClientType_ClientType_MIN;
  static constexpr ClientType ClientType_MAX =
    ExtensionsWorkflowEvent_ClientType_ClientType_MAX;
  static constexpr int ClientType_ARRAYSIZE =
    ExtensionsWorkflowEvent_ClientType_ClientType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ClientType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ClientType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ClientType_Name.");
    return ExtensionsWorkflowEvent_ClientType_Name(enum_t_value);
  }
  static inline bool ClientType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ClientType* value) {
    return ExtensionsWorkflowEvent_ClientType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kJustificationFieldNumber = 5,
    kDeviceNameFieldNumber = 6,
    kRequestTimestampMillisFieldNumber = 2,
    kRemovedFieldNumber = 3,
    kClientTypeFieldNumber = 4,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string justification = 5;
  bool has_justification() const;
  private:
  bool _internal_has_justification() const;
  public:
  void clear_justification();
  const std::string& justification() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_justification(ArgT0&& arg0, ArgT... args);
  std::string* mutable_justification();
  PROTOBUF_NODISCARD std::string* release_justification();
  void set_allocated_justification(std::string* justification);
  private:
  const std::string& _internal_justification() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_justification(const std::string& value);
  std::string* _internal_mutable_justification();
  public:

  // optional string device_name = 6;
  bool has_device_name() const;
  private:
  bool _internal_has_device_name() const;
  public:
  void clear_device_name();
  const std::string& device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // optional int64 request_timestamp_millis = 2;
  bool has_request_timestamp_millis() const;
  private:
  bool _internal_has_request_timestamp_millis() const;
  public:
  void clear_request_timestamp_millis();
  int64_t request_timestamp_millis() const;
  void set_request_timestamp_millis(int64_t value);
  private:
  int64_t _internal_request_timestamp_millis() const;
  void _internal_set_request_timestamp_millis(int64_t value);
  public:

  // optional bool removed = 3;
  bool has_removed() const;
  private:
  bool _internal_has_removed() const;
  public:
  void clear_removed();
  bool removed() const;
  void set_removed(bool value);
  private:
  bool _internal_removed() const;
  void _internal_set_removed(bool value);
  public:

  // optional .enterprise_reporting.ExtensionsWorkflowEvent.ClientType client_type = 4;
  bool has_client_type() const;
  private:
  bool _internal_has_client_type() const;
  public:
  void clear_client_type();
  ::enterprise_reporting::ExtensionsWorkflowEvent_ClientType client_type() const;
  void set_client_type(::enterprise_reporting::ExtensionsWorkflowEvent_ClientType value);
  private:
  ::enterprise_reporting::ExtensionsWorkflowEvent_ClientType _internal_client_type() const;
  void _internal_set_client_type(::enterprise_reporting::ExtensionsWorkflowEvent_ClientType value);
  public:

  // @@protoc_insertion_point(class_scope:enterprise_reporting.ExtensionsWorkflowEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr justification_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
  int64_t request_timestamp_millis_;
  bool removed_;
  int client_type_;
  friend struct ::TableStruct_components_2fenterprise_2fcommon_2fproto_2fextensions_5fworkflow_5fevents_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExtensionsWorkflowEvent

// optional string id = 1;
inline bool ExtensionsWorkflowEvent::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExtensionsWorkflowEvent::has_id() const {
  return _internal_has_id();
}
inline void ExtensionsWorkflowEvent::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExtensionsWorkflowEvent::id() const {
  // @@protoc_insertion_point(field_get:enterprise_reporting.ExtensionsWorkflowEvent.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtensionsWorkflowEvent::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_reporting.ExtensionsWorkflowEvent.id)
}
inline std::string* ExtensionsWorkflowEvent::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:enterprise_reporting.ExtensionsWorkflowEvent.id)
  return _s;
}
inline const std::string& ExtensionsWorkflowEvent::_internal_id() const {
  return id_.Get();
}
inline void ExtensionsWorkflowEvent::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtensionsWorkflowEvent::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* ExtensionsWorkflowEvent::release_id() {
  // @@protoc_insertion_point(field_release:enterprise_reporting.ExtensionsWorkflowEvent.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ExtensionsWorkflowEvent::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_reporting.ExtensionsWorkflowEvent.id)
}

// optional int64 request_timestamp_millis = 2;
inline bool ExtensionsWorkflowEvent::_internal_has_request_timestamp_millis() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ExtensionsWorkflowEvent::has_request_timestamp_millis() const {
  return _internal_has_request_timestamp_millis();
}
inline void ExtensionsWorkflowEvent::clear_request_timestamp_millis() {
  request_timestamp_millis_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t ExtensionsWorkflowEvent::_internal_request_timestamp_millis() const {
  return request_timestamp_millis_;
}
inline int64_t ExtensionsWorkflowEvent::request_timestamp_millis() const {
  // @@protoc_insertion_point(field_get:enterprise_reporting.ExtensionsWorkflowEvent.request_timestamp_millis)
  return _internal_request_timestamp_millis();
}
inline void ExtensionsWorkflowEvent::_internal_set_request_timestamp_millis(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  request_timestamp_millis_ = value;
}
inline void ExtensionsWorkflowEvent::set_request_timestamp_millis(int64_t value) {
  _internal_set_request_timestamp_millis(value);
  // @@protoc_insertion_point(field_set:enterprise_reporting.ExtensionsWorkflowEvent.request_timestamp_millis)
}

// optional bool removed = 3;
inline bool ExtensionsWorkflowEvent::_internal_has_removed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ExtensionsWorkflowEvent::has_removed() const {
  return _internal_has_removed();
}
inline void ExtensionsWorkflowEvent::clear_removed() {
  removed_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ExtensionsWorkflowEvent::_internal_removed() const {
  return removed_;
}
inline bool ExtensionsWorkflowEvent::removed() const {
  // @@protoc_insertion_point(field_get:enterprise_reporting.ExtensionsWorkflowEvent.removed)
  return _internal_removed();
}
inline void ExtensionsWorkflowEvent::_internal_set_removed(bool value) {
  _has_bits_[0] |= 0x00000010u;
  removed_ = value;
}
inline void ExtensionsWorkflowEvent::set_removed(bool value) {
  _internal_set_removed(value);
  // @@protoc_insertion_point(field_set:enterprise_reporting.ExtensionsWorkflowEvent.removed)
}

// optional .enterprise_reporting.ExtensionsWorkflowEvent.ClientType client_type = 4;
inline bool ExtensionsWorkflowEvent::_internal_has_client_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ExtensionsWorkflowEvent::has_client_type() const {
  return _internal_has_client_type();
}
inline void ExtensionsWorkflowEvent::clear_client_type() {
  client_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::enterprise_reporting::ExtensionsWorkflowEvent_ClientType ExtensionsWorkflowEvent::_internal_client_type() const {
  return static_cast< ::enterprise_reporting::ExtensionsWorkflowEvent_ClientType >(client_type_);
}
inline ::enterprise_reporting::ExtensionsWorkflowEvent_ClientType ExtensionsWorkflowEvent::client_type() const {
  // @@protoc_insertion_point(field_get:enterprise_reporting.ExtensionsWorkflowEvent.client_type)
  return _internal_client_type();
}
inline void ExtensionsWorkflowEvent::_internal_set_client_type(::enterprise_reporting::ExtensionsWorkflowEvent_ClientType value) {
  assert(::enterprise_reporting::ExtensionsWorkflowEvent_ClientType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  client_type_ = value;
}
inline void ExtensionsWorkflowEvent::set_client_type(::enterprise_reporting::ExtensionsWorkflowEvent_ClientType value) {
  _internal_set_client_type(value);
  // @@protoc_insertion_point(field_set:enterprise_reporting.ExtensionsWorkflowEvent.client_type)
}

// optional string justification = 5;
inline bool ExtensionsWorkflowEvent::_internal_has_justification() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExtensionsWorkflowEvent::has_justification() const {
  return _internal_has_justification();
}
inline void ExtensionsWorkflowEvent::clear_justification() {
  justification_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ExtensionsWorkflowEvent::justification() const {
  // @@protoc_insertion_point(field_get:enterprise_reporting.ExtensionsWorkflowEvent.justification)
  return _internal_justification();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtensionsWorkflowEvent::set_justification(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 justification_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_reporting.ExtensionsWorkflowEvent.justification)
}
inline std::string* ExtensionsWorkflowEvent::mutable_justification() {
  std::string* _s = _internal_mutable_justification();
  // @@protoc_insertion_point(field_mutable:enterprise_reporting.ExtensionsWorkflowEvent.justification)
  return _s;
}
inline const std::string& ExtensionsWorkflowEvent::_internal_justification() const {
  return justification_.Get();
}
inline void ExtensionsWorkflowEvent::_internal_set_justification(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  justification_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtensionsWorkflowEvent::_internal_mutable_justification() {
  _has_bits_[0] |= 0x00000002u;
  return justification_.Mutable(GetArenaForAllocation());
}
inline std::string* ExtensionsWorkflowEvent::release_justification() {
  // @@protoc_insertion_point(field_release:enterprise_reporting.ExtensionsWorkflowEvent.justification)
  if (!_internal_has_justification()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = justification_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (justification_.IsDefault()) {
    justification_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ExtensionsWorkflowEvent::set_allocated_justification(std::string* justification) {
  if (justification != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  justification_.SetAllocated(justification, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (justification_.IsDefault()) {
    justification_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_reporting.ExtensionsWorkflowEvent.justification)
}

// optional string device_name = 6;
inline bool ExtensionsWorkflowEvent::_internal_has_device_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExtensionsWorkflowEvent::has_device_name() const {
  return _internal_has_device_name();
}
inline void ExtensionsWorkflowEvent::clear_device_name() {
  device_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ExtensionsWorkflowEvent::device_name() const {
  // @@protoc_insertion_point(field_get:enterprise_reporting.ExtensionsWorkflowEvent.device_name)
  return _internal_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtensionsWorkflowEvent::set_device_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 device_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enterprise_reporting.ExtensionsWorkflowEvent.device_name)
}
inline std::string* ExtensionsWorkflowEvent::mutable_device_name() {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:enterprise_reporting.ExtensionsWorkflowEvent.device_name)
  return _s;
}
inline const std::string& ExtensionsWorkflowEvent::_internal_device_name() const {
  return device_name_.Get();
}
inline void ExtensionsWorkflowEvent::_internal_set_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  device_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtensionsWorkflowEvent::_internal_mutable_device_name() {
  _has_bits_[0] |= 0x00000004u;
  return device_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ExtensionsWorkflowEvent::release_device_name() {
  // @@protoc_insertion_point(field_release:enterprise_reporting.ExtensionsWorkflowEvent.device_name)
  if (!_internal_has_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = device_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_name_.IsDefault()) {
    device_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ExtensionsWorkflowEvent::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  device_name_.SetAllocated(device_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_name_.IsDefault()) {
    device_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enterprise_reporting.ExtensionsWorkflowEvent.device_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace enterprise_reporting

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::enterprise_reporting::ExtensionsWorkflowEvent_ClientType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fenterprise_2fcommon_2fproto_2fextensions_5fworkflow_5fevents_2eproto
