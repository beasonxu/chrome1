// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/enterprise/common/proto/download_item_reroute_info.proto

#include "components/enterprise/common/proto/download_item_reroute_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace enterprise_connectors {
PROTOBUF_CONSTEXPR BoxInfo::BoxInfo(
    ::_pbi::ConstantInitialized)
  : file_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , folder_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , error_message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , additional_message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct BoxInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoxInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoxInfoDefaultTypeInternal() {}
  union {
    BoxInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoxInfoDefaultTypeInternal _BoxInfo_default_instance_;
PROTOBUF_CONSTEXPR GoogleDriveInfo::GoogleDriveInfo(
    ::_pbi::ConstantInitialized){}
struct GoogleDriveInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GoogleDriveInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GoogleDriveInfoDefaultTypeInternal() {}
  union {
    GoogleDriveInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GoogleDriveInfoDefaultTypeInternal _GoogleDriveInfo_default_instance_;
PROTOBUF_CONSTEXPR DownloadItemRerouteInfo::DownloadItemRerouteInfo(
    ::_pbi::ConstantInitialized)
  : service_provider_(0)

  , _oneof_case_{}{}
struct DownloadItemRerouteInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DownloadItemRerouteInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DownloadItemRerouteInfoDefaultTypeInternal() {}
  union {
    DownloadItemRerouteInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DownloadItemRerouteInfoDefaultTypeInternal _DownloadItemRerouteInfo_default_instance_;
}  // namespace enterprise_connectors
namespace enterprise_connectors {
bool FileSystemServiceProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FileSystemServiceProvider_strings[2] = {};

static const char FileSystemServiceProvider_names[] =
  "BOX"
  "GOOGLE_DRIVE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FileSystemServiceProvider_entries[] = {
  { {FileSystemServiceProvider_names + 0, 3}, 0 },
  { {FileSystemServiceProvider_names + 3, 12}, 1 },
};

static const int FileSystemServiceProvider_entries_by_number[] = {
  0, // 0 -> BOX
  1, // 1 -> GOOGLE_DRIVE
};

const std::string& FileSystemServiceProvider_Name(
    FileSystemServiceProvider value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FileSystemServiceProvider_entries,
          FileSystemServiceProvider_entries_by_number,
          2, FileSystemServiceProvider_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FileSystemServiceProvider_entries,
      FileSystemServiceProvider_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FileSystemServiceProvider_strings[idx].get();
}
bool FileSystemServiceProvider_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FileSystemServiceProvider* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FileSystemServiceProvider_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<FileSystemServiceProvider>(int_value);
  }
  return success;
}

// ===================================================================

class BoxInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<BoxInfo>()._has_bits_);
  static void set_has_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_folder_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_additional_message(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BoxInfo::BoxInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:enterprise_connectors.BoxInfo)
}
BoxInfo::BoxInfo(const BoxInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  file_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_id()) {
    file_id_.Set(from._internal_file_id(), 
      GetArenaForAllocation());
  }
  folder_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    folder_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_folder_id()) {
    folder_id_.Set(from._internal_folder_id(), 
      GetArenaForAllocation());
  }
  error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_message()) {
    error_message_.Set(from._internal_error_message(), 
      GetArenaForAllocation());
  }
  additional_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    additional_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_additional_message()) {
    additional_message_.Set(from._internal_additional_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_connectors.BoxInfo)
}

inline void BoxInfo::SharedCtor() {
file_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
folder_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  folder_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
additional_message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  additional_message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BoxInfo::~BoxInfo() {
  // @@protoc_insertion_point(destructor:enterprise_connectors.BoxInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoxInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_id_.Destroy();
  folder_id_.Destroy();
  error_message_.Destroy();
  additional_message_.Destroy();
}

void BoxInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoxInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_connectors.BoxInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      file_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      folder_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      error_message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      additional_message_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BoxInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string folder_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_folder_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error_message = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string additional_message = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_additional_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoxInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_connectors.BoxInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_id(), target);
  }

  // optional string folder_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_folder_id(), target);
  }

  // optional string error_message = 100;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        100, this->_internal_error_message(), target);
  }

  // optional string additional_message = 101;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        101, this->_internal_additional_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_connectors.BoxInfo)
  return target;
}

size_t BoxInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_connectors.BoxInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string file_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_id());
    }

    // optional string folder_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_folder_id());
    }

    // optional string error_message = 100;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_message());
    }

    // optional string additional_message = 101;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_additional_message());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoxInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BoxInfo*>(
      &from));
}

void BoxInfo::MergeFrom(const BoxInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_connectors.BoxInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_id(from._internal_file_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_folder_id(from._internal_folder_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_error_message(from._internal_error_message());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_additional_message(from._internal_additional_message());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BoxInfo::CopyFrom(const BoxInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_connectors.BoxInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxInfo::IsInitialized() const {
  return true;
}

void BoxInfo::InternalSwap(BoxInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_id_, lhs_arena,
      &other->file_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &folder_id_, lhs_arena,
      &other->folder_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &additional_message_, lhs_arena,
      &other->additional_message_, rhs_arena
  );
}

std::string BoxInfo::GetTypeName() const {
  return "enterprise_connectors.BoxInfo";
}


// ===================================================================

class GoogleDriveInfo::_Internal {
 public:
};

GoogleDriveInfo::GoogleDriveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:enterprise_connectors.GoogleDriveInfo)
}
GoogleDriveInfo::GoogleDriveInfo(const GoogleDriveInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_connectors.GoogleDriveInfo)
}

inline void GoogleDriveInfo::SharedCtor() {
}

GoogleDriveInfo::~GoogleDriveInfo() {
  // @@protoc_insertion_point(destructor:enterprise_connectors.GoogleDriveInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GoogleDriveInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GoogleDriveInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GoogleDriveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_connectors.GoogleDriveInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GoogleDriveInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GoogleDriveInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_connectors.GoogleDriveInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_connectors.GoogleDriveInfo)
  return target;
}

size_t GoogleDriveInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_connectors.GoogleDriveInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GoogleDriveInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GoogleDriveInfo*>(
      &from));
}

void GoogleDriveInfo::MergeFrom(const GoogleDriveInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_connectors.GoogleDriveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GoogleDriveInfo::CopyFrom(const GoogleDriveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_connectors.GoogleDriveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoogleDriveInfo::IsInitialized() const {
  return true;
}

void GoogleDriveInfo::InternalSwap(GoogleDriveInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string GoogleDriveInfo::GetTypeName() const {
  return "enterprise_connectors.GoogleDriveInfo";
}


// ===================================================================

class DownloadItemRerouteInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DownloadItemRerouteInfo>()._has_bits_);
  static void set_has_service_provider(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::enterprise_connectors::BoxInfo& box(const DownloadItemRerouteInfo* msg);
  static const ::enterprise_connectors::GoogleDriveInfo& google_drive(const DownloadItemRerouteInfo* msg);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::enterprise_connectors::BoxInfo&
DownloadItemRerouteInfo::_Internal::box(const DownloadItemRerouteInfo* msg) {
  return *msg->upload_.box_;
}
const ::enterprise_connectors::GoogleDriveInfo&
DownloadItemRerouteInfo::_Internal::google_drive(const DownloadItemRerouteInfo* msg) {
  return *msg->upload_.google_drive_;
}
void DownloadItemRerouteInfo::set_allocated_box(::enterprise_connectors::BoxInfo* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_upload();
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(box);
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    set_has_box();
    upload_.box_ = box;
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.DownloadItemRerouteInfo.box)
}
void DownloadItemRerouteInfo::set_allocated_google_drive(::enterprise_connectors::GoogleDriveInfo* google_drive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_upload();
  if (google_drive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(google_drive);
    if (message_arena != submessage_arena) {
      google_drive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, google_drive, submessage_arena);
    }
    set_has_google_drive();
    upload_.google_drive_ = google_drive;
  }
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.DownloadItemRerouteInfo.google_drive)
}
DownloadItemRerouteInfo::DownloadItemRerouteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:enterprise_connectors.DownloadItemRerouteInfo)
}
DownloadItemRerouteInfo::DownloadItemRerouteInfo(const DownloadItemRerouteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  service_provider_ = from.service_provider_;
  clear_has_upload();
  switch (from.upload_case()) {
    case kBox: {
      _internal_mutable_box()->::enterprise_connectors::BoxInfo::MergeFrom(from._internal_box());
      break;
    }
    case kGoogleDrive: {
      _internal_mutable_google_drive()->::enterprise_connectors::GoogleDriveInfo::MergeFrom(from._internal_google_drive());
      break;
    }
    case UPLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_connectors.DownloadItemRerouteInfo)
}

inline void DownloadItemRerouteInfo::SharedCtor() {
service_provider_ = 0;
clear_has_upload();
}

DownloadItemRerouteInfo::~DownloadItemRerouteInfo() {
  // @@protoc_insertion_point(destructor:enterprise_connectors.DownloadItemRerouteInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DownloadItemRerouteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_upload()) {
    clear_upload();
  }
}

void DownloadItemRerouteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DownloadItemRerouteInfo::clear_upload() {
// @@protoc_insertion_point(one_of_clear_start:enterprise_connectors.DownloadItemRerouteInfo)
  switch (upload_case()) {
    case kBox: {
      if (GetArenaForAllocation() == nullptr) {
        delete upload_.box_;
      }
      break;
    }
    case kGoogleDrive: {
      if (GetArenaForAllocation() == nullptr) {
        delete upload_.google_drive_;
      }
      break;
    }
    case UPLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UPLOAD_NOT_SET;
}


void DownloadItemRerouteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_connectors.DownloadItemRerouteInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_provider_ = 0;
  clear_upload();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DownloadItemRerouteInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .enterprise_connectors.FileSystemServiceProvider service_provider = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_connectors::FileSystemServiceProvider_IsValid(val))) {
            _internal_set_service_provider(static_cast<::enterprise_connectors::FileSystemServiceProvider>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // .enterprise_connectors.BoxInfo box = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .enterprise_connectors.GoogleDriveInfo google_drive = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_google_drive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DownloadItemRerouteInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_connectors.DownloadItemRerouteInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .enterprise_connectors.FileSystemServiceProvider service_provider = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_service_provider(), target);
  }

  switch (upload_case()) {
    case kBox: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(100, _Internal::box(this),
          _Internal::box(this).GetCachedSize(), target, stream);
      break;
    }
    case kGoogleDrive: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(101, _Internal::google_drive(this),
          _Internal::google_drive(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_connectors.DownloadItemRerouteInfo)
  return target;
}

size_t DownloadItemRerouteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_connectors.DownloadItemRerouteInfo)
  size_t total_size = 0;

  // required .enterprise_connectors.FileSystemServiceProvider service_provider = 1;
  if (_internal_has_service_provider()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_service_provider());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (upload_case()) {
    // .enterprise_connectors.BoxInfo box = 100;
    case kBox: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *upload_.box_);
      break;
    }
    // .enterprise_connectors.GoogleDriveInfo google_drive = 101;
    case kGoogleDrive: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *upload_.google_drive_);
      break;
    }
    case UPLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadItemRerouteInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DownloadItemRerouteInfo*>(
      &from));
}

void DownloadItemRerouteInfo::MergeFrom(const DownloadItemRerouteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_connectors.DownloadItemRerouteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_service_provider()) {
    _internal_set_service_provider(from._internal_service_provider());
  }
  switch (from.upload_case()) {
    case kBox: {
      _internal_mutable_box()->::enterprise_connectors::BoxInfo::MergeFrom(from._internal_box());
      break;
    }
    case kGoogleDrive: {
      _internal_mutable_google_drive()->::enterprise_connectors::GoogleDriveInfo::MergeFrom(from._internal_google_drive());
      break;
    }
    case UPLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DownloadItemRerouteInfo::CopyFrom(const DownloadItemRerouteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_connectors.DownloadItemRerouteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadItemRerouteInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DownloadItemRerouteInfo::InternalSwap(DownloadItemRerouteInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(service_provider_, other->service_provider_);
  swap(upload_, other->upload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string DownloadItemRerouteInfo::GetTypeName() const {
  return "enterprise_connectors.DownloadItemRerouteInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace enterprise_connectors
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::enterprise_connectors::BoxInfo*
Arena::CreateMaybeMessage< ::enterprise_connectors::BoxInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_connectors::BoxInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_connectors::GoogleDriveInfo*
Arena::CreateMaybeMessage< ::enterprise_connectors::GoogleDriveInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_connectors::GoogleDriveInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_connectors::DownloadItemRerouteInfo*
Arena::CreateMaybeMessage< ::enterprise_connectors::DownloadItemRerouteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_connectors::DownloadItemRerouteInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
