// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paint_preview.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_paint_5fpreview_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_paint_5fpreview_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_paint_5fpreview_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_paint_5fpreview_2eproto {
  static const uint32_t offsets[];
};
namespace paint_preview {
class ChromeVersionProto;
struct ChromeVersionProtoDefaultTypeInternal;
extern ChromeVersionProtoDefaultTypeInternal _ChromeVersionProto_default_instance_;
class ContentIdEmbeddingTokenPairProto;
struct ContentIdEmbeddingTokenPairProtoDefaultTypeInternal;
extern ContentIdEmbeddingTokenPairProtoDefaultTypeInternal _ContentIdEmbeddingTokenPairProto_default_instance_;
class LinkDataProto;
struct LinkDataProtoDefaultTypeInternal;
extern LinkDataProtoDefaultTypeInternal _LinkDataProto_default_instance_;
class MetadataProto;
struct MetadataProtoDefaultTypeInternal;
extern MetadataProtoDefaultTypeInternal _MetadataProto_default_instance_;
class PaintPreviewFrameProto;
struct PaintPreviewFrameProtoDefaultTypeInternal;
extern PaintPreviewFrameProtoDefaultTypeInternal _PaintPreviewFrameProto_default_instance_;
class PaintPreviewProto;
struct PaintPreviewProtoDefaultTypeInternal;
extern PaintPreviewProtoDefaultTypeInternal _PaintPreviewProto_default_instance_;
class RectProto;
struct RectProtoDefaultTypeInternal;
extern RectProtoDefaultTypeInternal _RectProto_default_instance_;
}  // namespace paint_preview
PROTOBUF_NAMESPACE_OPEN
template<> ::paint_preview::ChromeVersionProto* Arena::CreateMaybeMessage<::paint_preview::ChromeVersionProto>(Arena*);
template<> ::paint_preview::ContentIdEmbeddingTokenPairProto* Arena::CreateMaybeMessage<::paint_preview::ContentIdEmbeddingTokenPairProto>(Arena*);
template<> ::paint_preview::LinkDataProto* Arena::CreateMaybeMessage<::paint_preview::LinkDataProto>(Arena*);
template<> ::paint_preview::MetadataProto* Arena::CreateMaybeMessage<::paint_preview::MetadataProto>(Arena*);
template<> ::paint_preview::PaintPreviewFrameProto* Arena::CreateMaybeMessage<::paint_preview::PaintPreviewFrameProto>(Arena*);
template<> ::paint_preview::PaintPreviewProto* Arena::CreateMaybeMessage<::paint_preview::PaintPreviewProto>(Arena*);
template<> ::paint_preview::RectProto* Arena::CreateMaybeMessage<::paint_preview::RectProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace paint_preview {

// ===================================================================

class RectProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:paint_preview.RectProto) */ {
 public:
  inline RectProto() : RectProto(nullptr) {}
  ~RectProto() override;
  explicit PROTOBUF_CONSTEXPR RectProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RectProto(const RectProto& from);
  RectProto(RectProto&& from) noexcept
    : RectProto() {
    *this = ::std::move(from);
  }

  inline RectProto& operator=(const RectProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RectProto& operator=(RectProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RectProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const RectProto* internal_default_instance() {
    return reinterpret_cast<const RectProto*>(
               &_RectProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RectProto& a, RectProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RectProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RectProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RectProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RectProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RectProto& from);
  void MergeFrom(const RectProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RectProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paint_preview.RectProto";
  }
  protected:
  explicit RectProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // optional int64 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int64_t x() const;
  void set_x(int64_t value);
  private:
  int64_t _internal_x() const;
  void _internal_set_x(int64_t value);
  public:

  // optional int64 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int64_t y() const;
  void set_y(int64_t value);
  private:
  int64_t _internal_y() const;
  void _internal_set_y(int64_t value);
  public:

  // optional int64 width = 3;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  int64_t width() const;
  void set_width(int64_t value);
  private:
  int64_t _internal_width() const;
  void _internal_set_width(int64_t value);
  public:

  // optional int64 height = 4;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  int64_t height() const;
  void set_height(int64_t value);
  private:
  int64_t _internal_height() const;
  void _internal_set_height(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:paint_preview.RectProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t x_;
  int64_t y_;
  int64_t width_;
  int64_t height_;
  friend struct ::TableStruct_paint_5fpreview_2eproto;
};
// -------------------------------------------------------------------

class LinkDataProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:paint_preview.LinkDataProto) */ {
 public:
  inline LinkDataProto() : LinkDataProto(nullptr) {}
  ~LinkDataProto() override;
  explicit PROTOBUF_CONSTEXPR LinkDataProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinkDataProto(const LinkDataProto& from);
  LinkDataProto(LinkDataProto&& from) noexcept
    : LinkDataProto() {
    *this = ::std::move(from);
  }

  inline LinkDataProto& operator=(const LinkDataProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkDataProto& operator=(LinkDataProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LinkDataProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinkDataProto* internal_default_instance() {
    return reinterpret_cast<const LinkDataProto*>(
               &_LinkDataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LinkDataProto& a, LinkDataProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LinkDataProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkDataProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkDataProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinkDataProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LinkDataProto& from);
  void MergeFrom(const LinkDataProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LinkDataProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paint_preview.LinkDataProto";
  }
  protected:
  explicit LinkDataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kRectFieldNumber = 1,
  };
  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional .paint_preview.RectProto rect = 1;
  bool has_rect() const;
  private:
  bool _internal_has_rect() const;
  public:
  void clear_rect();
  const ::paint_preview::RectProto& rect() const;
  PROTOBUF_NODISCARD ::paint_preview::RectProto* release_rect();
  ::paint_preview::RectProto* mutable_rect();
  void set_allocated_rect(::paint_preview::RectProto* rect);
  private:
  const ::paint_preview::RectProto& _internal_rect() const;
  ::paint_preview::RectProto* _internal_mutable_rect();
  public:
  void unsafe_arena_set_allocated_rect(
      ::paint_preview::RectProto* rect);
  ::paint_preview::RectProto* unsafe_arena_release_rect();

  // @@protoc_insertion_point(class_scope:paint_preview.LinkDataProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::paint_preview::RectProto* rect_;
  friend struct ::TableStruct_paint_5fpreview_2eproto;
};
// -------------------------------------------------------------------

class ContentIdEmbeddingTokenPairProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:paint_preview.ContentIdEmbeddingTokenPairProto) */ {
 public:
  inline ContentIdEmbeddingTokenPairProto() : ContentIdEmbeddingTokenPairProto(nullptr) {}
  ~ContentIdEmbeddingTokenPairProto() override;
  explicit PROTOBUF_CONSTEXPR ContentIdEmbeddingTokenPairProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentIdEmbeddingTokenPairProto(const ContentIdEmbeddingTokenPairProto& from);
  ContentIdEmbeddingTokenPairProto(ContentIdEmbeddingTokenPairProto&& from) noexcept
    : ContentIdEmbeddingTokenPairProto() {
    *this = ::std::move(from);
  }

  inline ContentIdEmbeddingTokenPairProto& operator=(const ContentIdEmbeddingTokenPairProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentIdEmbeddingTokenPairProto& operator=(ContentIdEmbeddingTokenPairProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ContentIdEmbeddingTokenPairProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentIdEmbeddingTokenPairProto* internal_default_instance() {
    return reinterpret_cast<const ContentIdEmbeddingTokenPairProto*>(
               &_ContentIdEmbeddingTokenPairProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ContentIdEmbeddingTokenPairProto& a, ContentIdEmbeddingTokenPairProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ContentIdEmbeddingTokenPairProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentIdEmbeddingTokenPairProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentIdEmbeddingTokenPairProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentIdEmbeddingTokenPairProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ContentIdEmbeddingTokenPairProto& from);
  void MergeFrom(const ContentIdEmbeddingTokenPairProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentIdEmbeddingTokenPairProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paint_preview.ContentIdEmbeddingTokenPairProto";
  }
  protected:
  explicit ContentIdEmbeddingTokenPairProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmbeddingTokenLowFieldNumber = 2,
    kEmbeddingTokenHighFieldNumber = 3,
    kContentIdFieldNumber = 1,
  };
  // optional uint64 embedding_token_low = 2;
  bool has_embedding_token_low() const;
  private:
  bool _internal_has_embedding_token_low() const;
  public:
  void clear_embedding_token_low();
  uint64_t embedding_token_low() const;
  void set_embedding_token_low(uint64_t value);
  private:
  uint64_t _internal_embedding_token_low() const;
  void _internal_set_embedding_token_low(uint64_t value);
  public:

  // optional uint64 embedding_token_high = 3;
  bool has_embedding_token_high() const;
  private:
  bool _internal_has_embedding_token_high() const;
  public:
  void clear_embedding_token_high();
  uint64_t embedding_token_high() const;
  void set_embedding_token_high(uint64_t value);
  private:
  uint64_t _internal_embedding_token_high() const;
  void _internal_set_embedding_token_high(uint64_t value);
  public:

  // optional uint32 content_id = 1;
  bool has_content_id() const;
  private:
  bool _internal_has_content_id() const;
  public:
  void clear_content_id();
  uint32_t content_id() const;
  void set_content_id(uint32_t value);
  private:
  uint32_t _internal_content_id() const;
  void _internal_set_content_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:paint_preview.ContentIdEmbeddingTokenPairProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t embedding_token_low_;
  uint64_t embedding_token_high_;
  uint32_t content_id_;
  friend struct ::TableStruct_paint_5fpreview_2eproto;
};
// -------------------------------------------------------------------

class PaintPreviewFrameProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:paint_preview.PaintPreviewFrameProto) */ {
 public:
  inline PaintPreviewFrameProto() : PaintPreviewFrameProto(nullptr) {}
  ~PaintPreviewFrameProto() override;
  explicit PROTOBUF_CONSTEXPR PaintPreviewFrameProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaintPreviewFrameProto(const PaintPreviewFrameProto& from);
  PaintPreviewFrameProto(PaintPreviewFrameProto&& from) noexcept
    : PaintPreviewFrameProto() {
    *this = ::std::move(from);
  }

  inline PaintPreviewFrameProto& operator=(const PaintPreviewFrameProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaintPreviewFrameProto& operator=(PaintPreviewFrameProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PaintPreviewFrameProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaintPreviewFrameProto* internal_default_instance() {
    return reinterpret_cast<const PaintPreviewFrameProto*>(
               &_PaintPreviewFrameProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PaintPreviewFrameProto& a, PaintPreviewFrameProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PaintPreviewFrameProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaintPreviewFrameProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PaintPreviewFrameProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PaintPreviewFrameProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PaintPreviewFrameProto& from);
  void MergeFrom(const PaintPreviewFrameProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PaintPreviewFrameProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paint_preview.PaintPreviewFrameProto";
  }
  protected:
  explicit PaintPreviewFrameProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 5,
    kContentIdToEmbeddingTokensFieldNumber = 6,
    kFilePathFieldNumber = 4,
    kEmbeddingTokenLowFieldNumber = 1,
    kEmbeddingTokenHighFieldNumber = 2,
    kIsMainFrameFieldNumber = 3,
    kScrollOffsetXFieldNumber = 7,
    kScrollOffsetYFieldNumber = 8,
    kFrameOffsetXFieldNumber = 9,
    kFrameOffsetYFieldNumber = 10,
  };
  // repeated .paint_preview.LinkDataProto links = 5;
  int links_size() const;
  private:
  int _internal_links_size() const;
  public:
  void clear_links();
  ::paint_preview::LinkDataProto* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::LinkDataProto >*
      mutable_links();
  private:
  const ::paint_preview::LinkDataProto& _internal_links(int index) const;
  ::paint_preview::LinkDataProto* _internal_add_links();
  public:
  const ::paint_preview::LinkDataProto& links(int index) const;
  ::paint_preview::LinkDataProto* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::LinkDataProto >&
      links() const;

  // repeated .paint_preview.ContentIdEmbeddingTokenPairProto content_id_to_embedding_tokens = 6;
  int content_id_to_embedding_tokens_size() const;
  private:
  int _internal_content_id_to_embedding_tokens_size() const;
  public:
  void clear_content_id_to_embedding_tokens();
  ::paint_preview::ContentIdEmbeddingTokenPairProto* mutable_content_id_to_embedding_tokens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::ContentIdEmbeddingTokenPairProto >*
      mutable_content_id_to_embedding_tokens();
  private:
  const ::paint_preview::ContentIdEmbeddingTokenPairProto& _internal_content_id_to_embedding_tokens(int index) const;
  ::paint_preview::ContentIdEmbeddingTokenPairProto* _internal_add_content_id_to_embedding_tokens();
  public:
  const ::paint_preview::ContentIdEmbeddingTokenPairProto& content_id_to_embedding_tokens(int index) const;
  ::paint_preview::ContentIdEmbeddingTokenPairProto* add_content_id_to_embedding_tokens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::ContentIdEmbeddingTokenPairProto >&
      content_id_to_embedding_tokens() const;

  // optional string file_path = 4;
  bool has_file_path() const;
  private:
  bool _internal_has_file_path() const;
  public:
  void clear_file_path();
  const std::string& file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_path();
  PROTOBUF_NODISCARD std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // optional uint64 embedding_token_low = 1;
  bool has_embedding_token_low() const;
  private:
  bool _internal_has_embedding_token_low() const;
  public:
  void clear_embedding_token_low();
  uint64_t embedding_token_low() const;
  void set_embedding_token_low(uint64_t value);
  private:
  uint64_t _internal_embedding_token_low() const;
  void _internal_set_embedding_token_low(uint64_t value);
  public:

  // optional uint64 embedding_token_high = 2;
  bool has_embedding_token_high() const;
  private:
  bool _internal_has_embedding_token_high() const;
  public:
  void clear_embedding_token_high();
  uint64_t embedding_token_high() const;
  void set_embedding_token_high(uint64_t value);
  private:
  uint64_t _internal_embedding_token_high() const;
  void _internal_set_embedding_token_high(uint64_t value);
  public:

  // optional bool is_main_frame = 3;
  bool has_is_main_frame() const;
  private:
  bool _internal_has_is_main_frame() const;
  public:
  void clear_is_main_frame();
  bool is_main_frame() const;
  void set_is_main_frame(bool value);
  private:
  bool _internal_is_main_frame() const;
  void _internal_set_is_main_frame(bool value);
  public:

  // optional uint32 scroll_offset_x = 7;
  bool has_scroll_offset_x() const;
  private:
  bool _internal_has_scroll_offset_x() const;
  public:
  void clear_scroll_offset_x();
  uint32_t scroll_offset_x() const;
  void set_scroll_offset_x(uint32_t value);
  private:
  uint32_t _internal_scroll_offset_x() const;
  void _internal_set_scroll_offset_x(uint32_t value);
  public:

  // optional uint32 scroll_offset_y = 8;
  bool has_scroll_offset_y() const;
  private:
  bool _internal_has_scroll_offset_y() const;
  public:
  void clear_scroll_offset_y();
  uint32_t scroll_offset_y() const;
  void set_scroll_offset_y(uint32_t value);
  private:
  uint32_t _internal_scroll_offset_y() const;
  void _internal_set_scroll_offset_y(uint32_t value);
  public:

  // optional uint32 frame_offset_x = 9;
  bool has_frame_offset_x() const;
  private:
  bool _internal_has_frame_offset_x() const;
  public:
  void clear_frame_offset_x();
  uint32_t frame_offset_x() const;
  void set_frame_offset_x(uint32_t value);
  private:
  uint32_t _internal_frame_offset_x() const;
  void _internal_set_frame_offset_x(uint32_t value);
  public:

  // optional uint32 frame_offset_y = 10;
  bool has_frame_offset_y() const;
  private:
  bool _internal_has_frame_offset_y() const;
  public:
  void clear_frame_offset_y();
  uint32_t frame_offset_y() const;
  void set_frame_offset_y(uint32_t value);
  private:
  uint32_t _internal_frame_offset_y() const;
  void _internal_set_frame_offset_y(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:paint_preview.PaintPreviewFrameProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::LinkDataProto > links_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::ContentIdEmbeddingTokenPairProto > content_id_to_embedding_tokens_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  uint64_t embedding_token_low_;
  uint64_t embedding_token_high_;
  bool is_main_frame_;
  uint32_t scroll_offset_x_;
  uint32_t scroll_offset_y_;
  uint32_t frame_offset_x_;
  uint32_t frame_offset_y_;
  friend struct ::TableStruct_paint_5fpreview_2eproto;
};
// -------------------------------------------------------------------

class ChromeVersionProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:paint_preview.ChromeVersionProto) */ {
 public:
  inline ChromeVersionProto() : ChromeVersionProto(nullptr) {}
  ~ChromeVersionProto() override;
  explicit PROTOBUF_CONSTEXPR ChromeVersionProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeVersionProto(const ChromeVersionProto& from);
  ChromeVersionProto(ChromeVersionProto&& from) noexcept
    : ChromeVersionProto() {
    *this = ::std::move(from);
  }

  inline ChromeVersionProto& operator=(const ChromeVersionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeVersionProto& operator=(ChromeVersionProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeVersionProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeVersionProto* internal_default_instance() {
    return reinterpret_cast<const ChromeVersionProto*>(
               &_ChromeVersionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChromeVersionProto& a, ChromeVersionProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeVersionProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeVersionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeVersionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeVersionProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeVersionProto& from);
  void MergeFrom(const ChromeVersionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeVersionProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paint_preview.ChromeVersionProto";
  }
  protected:
  explicit ChromeVersionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMajorFieldNumber = 1,
    kMinorFieldNumber = 2,
    kBuildFieldNumber = 3,
    kPatchFieldNumber = 4,
  };
  // optional uint64 major = 1;
  bool has_major() const;
  private:
  bool _internal_has_major() const;
  public:
  void clear_major();
  uint64_t major() const;
  void set_major(uint64_t value);
  private:
  uint64_t _internal_major() const;
  void _internal_set_major(uint64_t value);
  public:

  // optional uint64 minor = 2;
  bool has_minor() const;
  private:
  bool _internal_has_minor() const;
  public:
  void clear_minor();
  uint64_t minor() const;
  void set_minor(uint64_t value);
  private:
  uint64_t _internal_minor() const;
  void _internal_set_minor(uint64_t value);
  public:

  // optional uint64 build = 3;
  bool has_build() const;
  private:
  bool _internal_has_build() const;
  public:
  void clear_build();
  uint64_t build() const;
  void set_build(uint64_t value);
  private:
  uint64_t _internal_build() const;
  void _internal_set_build(uint64_t value);
  public:

  // optional uint64 patch = 4;
  bool has_patch() const;
  private:
  bool _internal_has_patch() const;
  public:
  void clear_patch();
  uint64_t patch() const;
  void set_patch(uint64_t value);
  private:
  uint64_t _internal_patch() const;
  void _internal_set_patch(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:paint_preview.ChromeVersionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t major_;
  uint64_t minor_;
  uint64_t build_;
  uint64_t patch_;
  friend struct ::TableStruct_paint_5fpreview_2eproto;
};
// -------------------------------------------------------------------

class MetadataProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:paint_preview.MetadataProto) */ {
 public:
  inline MetadataProto() : MetadataProto(nullptr) {}
  ~MetadataProto() override;
  explicit PROTOBUF_CONSTEXPR MetadataProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetadataProto(const MetadataProto& from);
  MetadataProto(MetadataProto&& from) noexcept
    : MetadataProto() {
    *this = ::std::move(from);
  }

  inline MetadataProto& operator=(const MetadataProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetadataProto& operator=(MetadataProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MetadataProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetadataProto* internal_default_instance() {
    return reinterpret_cast<const MetadataProto*>(
               &_MetadataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MetadataProto& a, MetadataProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(MetadataProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetadataProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetadataProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetadataProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MetadataProto& from);
  void MergeFrom(const MetadataProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MetadataProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paint_preview.MetadataProto";
  }
  protected:
  explicit MetadataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kChromeVersionFieldNumber = 3,
    kVersionFieldNumber = 2,
    kPageScaleFactorFieldNumber = 4,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional .paint_preview.ChromeVersionProto chrome_version = 3;
  bool has_chrome_version() const;
  private:
  bool _internal_has_chrome_version() const;
  public:
  void clear_chrome_version();
  const ::paint_preview::ChromeVersionProto& chrome_version() const;
  PROTOBUF_NODISCARD ::paint_preview::ChromeVersionProto* release_chrome_version();
  ::paint_preview::ChromeVersionProto* mutable_chrome_version();
  void set_allocated_chrome_version(::paint_preview::ChromeVersionProto* chrome_version);
  private:
  const ::paint_preview::ChromeVersionProto& _internal_chrome_version() const;
  ::paint_preview::ChromeVersionProto* _internal_mutable_chrome_version();
  public:
  void unsafe_arena_set_allocated_chrome_version(
      ::paint_preview::ChromeVersionProto* chrome_version);
  ::paint_preview::ChromeVersionProto* unsafe_arena_release_chrome_version();

  // optional uint64 version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint64_t version() const;
  void set_version(uint64_t value);
  private:
  uint64_t _internal_version() const;
  void _internal_set_version(uint64_t value);
  public:

  // optional float page_scale_factor = 4;
  bool has_page_scale_factor() const;
  private:
  bool _internal_has_page_scale_factor() const;
  public:
  void clear_page_scale_factor();
  float page_scale_factor() const;
  void set_page_scale_factor(float value);
  private:
  float _internal_page_scale_factor() const;
  void _internal_set_page_scale_factor(float value);
  public:

  // @@protoc_insertion_point(class_scope:paint_preview.MetadataProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::paint_preview::ChromeVersionProto* chrome_version_;
  uint64_t version_;
  float page_scale_factor_;
  friend struct ::TableStruct_paint_5fpreview_2eproto;
};
// -------------------------------------------------------------------

class PaintPreviewProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:paint_preview.PaintPreviewProto) */ {
 public:
  inline PaintPreviewProto() : PaintPreviewProto(nullptr) {}
  ~PaintPreviewProto() override;
  explicit PROTOBUF_CONSTEXPR PaintPreviewProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaintPreviewProto(const PaintPreviewProto& from);
  PaintPreviewProto(PaintPreviewProto&& from) noexcept
    : PaintPreviewProto() {
    *this = ::std::move(from);
  }

  inline PaintPreviewProto& operator=(const PaintPreviewProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaintPreviewProto& operator=(PaintPreviewProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PaintPreviewProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaintPreviewProto* internal_default_instance() {
    return reinterpret_cast<const PaintPreviewProto*>(
               &_PaintPreviewProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PaintPreviewProto& a, PaintPreviewProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PaintPreviewProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaintPreviewProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PaintPreviewProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PaintPreviewProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PaintPreviewProto& from);
  void MergeFrom(const PaintPreviewProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PaintPreviewProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paint_preview.PaintPreviewProto";
  }
  protected:
  explicit PaintPreviewProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubframesFieldNumber = 2,
    kRootFrameFieldNumber = 1,
    kMetadataFieldNumber = 3,
  };
  // repeated .paint_preview.PaintPreviewFrameProto subframes = 2;
  int subframes_size() const;
  private:
  int _internal_subframes_size() const;
  public:
  void clear_subframes();
  ::paint_preview::PaintPreviewFrameProto* mutable_subframes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::PaintPreviewFrameProto >*
      mutable_subframes();
  private:
  const ::paint_preview::PaintPreviewFrameProto& _internal_subframes(int index) const;
  ::paint_preview::PaintPreviewFrameProto* _internal_add_subframes();
  public:
  const ::paint_preview::PaintPreviewFrameProto& subframes(int index) const;
  ::paint_preview::PaintPreviewFrameProto* add_subframes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::PaintPreviewFrameProto >&
      subframes() const;

  // optional .paint_preview.PaintPreviewFrameProto root_frame = 1;
  bool has_root_frame() const;
  private:
  bool _internal_has_root_frame() const;
  public:
  void clear_root_frame();
  const ::paint_preview::PaintPreviewFrameProto& root_frame() const;
  PROTOBUF_NODISCARD ::paint_preview::PaintPreviewFrameProto* release_root_frame();
  ::paint_preview::PaintPreviewFrameProto* mutable_root_frame();
  void set_allocated_root_frame(::paint_preview::PaintPreviewFrameProto* root_frame);
  private:
  const ::paint_preview::PaintPreviewFrameProto& _internal_root_frame() const;
  ::paint_preview::PaintPreviewFrameProto* _internal_mutable_root_frame();
  public:
  void unsafe_arena_set_allocated_root_frame(
      ::paint_preview::PaintPreviewFrameProto* root_frame);
  ::paint_preview::PaintPreviewFrameProto* unsafe_arena_release_root_frame();

  // optional .paint_preview.MetadataProto metadata = 3;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::paint_preview::MetadataProto& metadata() const;
  PROTOBUF_NODISCARD ::paint_preview::MetadataProto* release_metadata();
  ::paint_preview::MetadataProto* mutable_metadata();
  void set_allocated_metadata(::paint_preview::MetadataProto* metadata);
  private:
  const ::paint_preview::MetadataProto& _internal_metadata() const;
  ::paint_preview::MetadataProto* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::paint_preview::MetadataProto* metadata);
  ::paint_preview::MetadataProto* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:paint_preview.PaintPreviewProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::PaintPreviewFrameProto > subframes_;
  ::paint_preview::PaintPreviewFrameProto* root_frame_;
  ::paint_preview::MetadataProto* metadata_;
  friend struct ::TableStruct_paint_5fpreview_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RectProto

// optional int64 x = 1;
inline bool RectProto::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RectProto::has_x() const {
  return _internal_has_x();
}
inline void RectProto::clear_x() {
  x_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t RectProto::_internal_x() const {
  return x_;
}
inline int64_t RectProto::x() const {
  // @@protoc_insertion_point(field_get:paint_preview.RectProto.x)
  return _internal_x();
}
inline void RectProto::_internal_set_x(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void RectProto::set_x(int64_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:paint_preview.RectProto.x)
}

// optional int64 y = 2;
inline bool RectProto::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RectProto::has_y() const {
  return _internal_has_y();
}
inline void RectProto::clear_y() {
  y_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t RectProto::_internal_y() const {
  return y_;
}
inline int64_t RectProto::y() const {
  // @@protoc_insertion_point(field_get:paint_preview.RectProto.y)
  return _internal_y();
}
inline void RectProto::_internal_set_y(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void RectProto::set_y(int64_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:paint_preview.RectProto.y)
}

// optional int64 width = 3;
inline bool RectProto::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RectProto::has_width() const {
  return _internal_has_width();
}
inline void RectProto::clear_width() {
  width_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t RectProto::_internal_width() const {
  return width_;
}
inline int64_t RectProto::width() const {
  // @@protoc_insertion_point(field_get:paint_preview.RectProto.width)
  return _internal_width();
}
inline void RectProto::_internal_set_width(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
}
inline void RectProto::set_width(int64_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:paint_preview.RectProto.width)
}

// optional int64 height = 4;
inline bool RectProto::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RectProto::has_height() const {
  return _internal_has_height();
}
inline void RectProto::clear_height() {
  height_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t RectProto::_internal_height() const {
  return height_;
}
inline int64_t RectProto::height() const {
  // @@protoc_insertion_point(field_get:paint_preview.RectProto.height)
  return _internal_height();
}
inline void RectProto::_internal_set_height(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  height_ = value;
}
inline void RectProto::set_height(int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:paint_preview.RectProto.height)
}

// -------------------------------------------------------------------

// LinkDataProto

// optional .paint_preview.RectProto rect = 1;
inline bool LinkDataProto::_internal_has_rect() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || rect_ != nullptr);
  return value;
}
inline bool LinkDataProto::has_rect() const {
  return _internal_has_rect();
}
inline void LinkDataProto::clear_rect() {
  if (rect_ != nullptr) rect_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::paint_preview::RectProto& LinkDataProto::_internal_rect() const {
  const ::paint_preview::RectProto* p = rect_;
  return p != nullptr ? *p : reinterpret_cast<const ::paint_preview::RectProto&>(
      ::paint_preview::_RectProto_default_instance_);
}
inline const ::paint_preview::RectProto& LinkDataProto::rect() const {
  // @@protoc_insertion_point(field_get:paint_preview.LinkDataProto.rect)
  return _internal_rect();
}
inline void LinkDataProto::unsafe_arena_set_allocated_rect(
    ::paint_preview::RectProto* rect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rect_);
  }
  rect_ = rect;
  if (rect) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:paint_preview.LinkDataProto.rect)
}
inline ::paint_preview::RectProto* LinkDataProto::release_rect() {
  _has_bits_[0] &= ~0x00000002u;
  ::paint_preview::RectProto* temp = rect_;
  rect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::paint_preview::RectProto* LinkDataProto::unsafe_arena_release_rect() {
  // @@protoc_insertion_point(field_release:paint_preview.LinkDataProto.rect)
  _has_bits_[0] &= ~0x00000002u;
  ::paint_preview::RectProto* temp = rect_;
  rect_ = nullptr;
  return temp;
}
inline ::paint_preview::RectProto* LinkDataProto::_internal_mutable_rect() {
  _has_bits_[0] |= 0x00000002u;
  if (rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::paint_preview::RectProto>(GetArenaForAllocation());
    rect_ = p;
  }
  return rect_;
}
inline ::paint_preview::RectProto* LinkDataProto::mutable_rect() {
  ::paint_preview::RectProto* _msg = _internal_mutable_rect();
  // @@protoc_insertion_point(field_mutable:paint_preview.LinkDataProto.rect)
  return _msg;
}
inline void LinkDataProto::set_allocated_rect(::paint_preview::RectProto* rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rect_;
  }
  if (rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rect);
    if (message_arena != submessage_arena) {
      rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rect_ = rect;
  // @@protoc_insertion_point(field_set_allocated:paint_preview.LinkDataProto.rect)
}

// optional string url = 2;
inline bool LinkDataProto::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LinkDataProto::has_url() const {
  return _internal_has_url();
}
inline void LinkDataProto::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LinkDataProto::url() const {
  // @@protoc_insertion_point(field_get:paint_preview.LinkDataProto.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LinkDataProto::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:paint_preview.LinkDataProto.url)
}
inline std::string* LinkDataProto::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:paint_preview.LinkDataProto.url)
  return _s;
}
inline const std::string& LinkDataProto::_internal_url() const {
  return url_.Get();
}
inline void LinkDataProto::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* LinkDataProto::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* LinkDataProto::release_url() {
  // @@protoc_insertion_point(field_release:paint_preview.LinkDataProto.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LinkDataProto::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:paint_preview.LinkDataProto.url)
}

// -------------------------------------------------------------------

// ContentIdEmbeddingTokenPairProto

// optional uint32 content_id = 1;
inline bool ContentIdEmbeddingTokenPairProto::_internal_has_content_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContentIdEmbeddingTokenPairProto::has_content_id() const {
  return _internal_has_content_id();
}
inline void ContentIdEmbeddingTokenPairProto::clear_content_id() {
  content_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ContentIdEmbeddingTokenPairProto::_internal_content_id() const {
  return content_id_;
}
inline uint32_t ContentIdEmbeddingTokenPairProto::content_id() const {
  // @@protoc_insertion_point(field_get:paint_preview.ContentIdEmbeddingTokenPairProto.content_id)
  return _internal_content_id();
}
inline void ContentIdEmbeddingTokenPairProto::_internal_set_content_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  content_id_ = value;
}
inline void ContentIdEmbeddingTokenPairProto::set_content_id(uint32_t value) {
  _internal_set_content_id(value);
  // @@protoc_insertion_point(field_set:paint_preview.ContentIdEmbeddingTokenPairProto.content_id)
}

// optional uint64 embedding_token_low = 2;
inline bool ContentIdEmbeddingTokenPairProto::_internal_has_embedding_token_low() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContentIdEmbeddingTokenPairProto::has_embedding_token_low() const {
  return _internal_has_embedding_token_low();
}
inline void ContentIdEmbeddingTokenPairProto::clear_embedding_token_low() {
  embedding_token_low_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ContentIdEmbeddingTokenPairProto::_internal_embedding_token_low() const {
  return embedding_token_low_;
}
inline uint64_t ContentIdEmbeddingTokenPairProto::embedding_token_low() const {
  // @@protoc_insertion_point(field_get:paint_preview.ContentIdEmbeddingTokenPairProto.embedding_token_low)
  return _internal_embedding_token_low();
}
inline void ContentIdEmbeddingTokenPairProto::_internal_set_embedding_token_low(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  embedding_token_low_ = value;
}
inline void ContentIdEmbeddingTokenPairProto::set_embedding_token_low(uint64_t value) {
  _internal_set_embedding_token_low(value);
  // @@protoc_insertion_point(field_set:paint_preview.ContentIdEmbeddingTokenPairProto.embedding_token_low)
}

// optional uint64 embedding_token_high = 3;
inline bool ContentIdEmbeddingTokenPairProto::_internal_has_embedding_token_high() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContentIdEmbeddingTokenPairProto::has_embedding_token_high() const {
  return _internal_has_embedding_token_high();
}
inline void ContentIdEmbeddingTokenPairProto::clear_embedding_token_high() {
  embedding_token_high_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t ContentIdEmbeddingTokenPairProto::_internal_embedding_token_high() const {
  return embedding_token_high_;
}
inline uint64_t ContentIdEmbeddingTokenPairProto::embedding_token_high() const {
  // @@protoc_insertion_point(field_get:paint_preview.ContentIdEmbeddingTokenPairProto.embedding_token_high)
  return _internal_embedding_token_high();
}
inline void ContentIdEmbeddingTokenPairProto::_internal_set_embedding_token_high(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  embedding_token_high_ = value;
}
inline void ContentIdEmbeddingTokenPairProto::set_embedding_token_high(uint64_t value) {
  _internal_set_embedding_token_high(value);
  // @@protoc_insertion_point(field_set:paint_preview.ContentIdEmbeddingTokenPairProto.embedding_token_high)
}

// -------------------------------------------------------------------

// PaintPreviewFrameProto

// optional uint64 embedding_token_low = 1;
inline bool PaintPreviewFrameProto::_internal_has_embedding_token_low() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PaintPreviewFrameProto::has_embedding_token_low() const {
  return _internal_has_embedding_token_low();
}
inline void PaintPreviewFrameProto::clear_embedding_token_low() {
  embedding_token_low_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t PaintPreviewFrameProto::_internal_embedding_token_low() const {
  return embedding_token_low_;
}
inline uint64_t PaintPreviewFrameProto::embedding_token_low() const {
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewFrameProto.embedding_token_low)
  return _internal_embedding_token_low();
}
inline void PaintPreviewFrameProto::_internal_set_embedding_token_low(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  embedding_token_low_ = value;
}
inline void PaintPreviewFrameProto::set_embedding_token_low(uint64_t value) {
  _internal_set_embedding_token_low(value);
  // @@protoc_insertion_point(field_set:paint_preview.PaintPreviewFrameProto.embedding_token_low)
}

// optional uint64 embedding_token_high = 2;
inline bool PaintPreviewFrameProto::_internal_has_embedding_token_high() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PaintPreviewFrameProto::has_embedding_token_high() const {
  return _internal_has_embedding_token_high();
}
inline void PaintPreviewFrameProto::clear_embedding_token_high() {
  embedding_token_high_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t PaintPreviewFrameProto::_internal_embedding_token_high() const {
  return embedding_token_high_;
}
inline uint64_t PaintPreviewFrameProto::embedding_token_high() const {
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewFrameProto.embedding_token_high)
  return _internal_embedding_token_high();
}
inline void PaintPreviewFrameProto::_internal_set_embedding_token_high(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  embedding_token_high_ = value;
}
inline void PaintPreviewFrameProto::set_embedding_token_high(uint64_t value) {
  _internal_set_embedding_token_high(value);
  // @@protoc_insertion_point(field_set:paint_preview.PaintPreviewFrameProto.embedding_token_high)
}

// optional bool is_main_frame = 3;
inline bool PaintPreviewFrameProto::_internal_has_is_main_frame() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PaintPreviewFrameProto::has_is_main_frame() const {
  return _internal_has_is_main_frame();
}
inline void PaintPreviewFrameProto::clear_is_main_frame() {
  is_main_frame_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PaintPreviewFrameProto::_internal_is_main_frame() const {
  return is_main_frame_;
}
inline bool PaintPreviewFrameProto::is_main_frame() const {
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewFrameProto.is_main_frame)
  return _internal_is_main_frame();
}
inline void PaintPreviewFrameProto::_internal_set_is_main_frame(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_main_frame_ = value;
}
inline void PaintPreviewFrameProto::set_is_main_frame(bool value) {
  _internal_set_is_main_frame(value);
  // @@protoc_insertion_point(field_set:paint_preview.PaintPreviewFrameProto.is_main_frame)
}

// optional string file_path = 4;
inline bool PaintPreviewFrameProto::_internal_has_file_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PaintPreviewFrameProto::has_file_path() const {
  return _internal_has_file_path();
}
inline void PaintPreviewFrameProto::clear_file_path() {
  file_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PaintPreviewFrameProto::file_path() const {
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewFrameProto.file_path)
  return _internal_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaintPreviewFrameProto::set_file_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:paint_preview.PaintPreviewFrameProto.file_path)
}
inline std::string* PaintPreviewFrameProto::mutable_file_path() {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:paint_preview.PaintPreviewFrameProto.file_path)
  return _s;
}
inline const std::string& PaintPreviewFrameProto::_internal_file_path() const {
  return file_path_.Get();
}
inline void PaintPreviewFrameProto::_internal_set_file_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_path_.Set(value, GetArenaForAllocation());
}
inline std::string* PaintPreviewFrameProto::_internal_mutable_file_path() {
  _has_bits_[0] |= 0x00000001u;
  return file_path_.Mutable(GetArenaForAllocation());
}
inline std::string* PaintPreviewFrameProto::release_file_path() {
  // @@protoc_insertion_point(field_release:paint_preview.PaintPreviewFrameProto.file_path)
  if (!_internal_has_file_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = file_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_path_.IsDefault()) {
    file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PaintPreviewFrameProto::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_path_.SetAllocated(file_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_path_.IsDefault()) {
    file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:paint_preview.PaintPreviewFrameProto.file_path)
}

// repeated .paint_preview.LinkDataProto links = 5;
inline int PaintPreviewFrameProto::_internal_links_size() const {
  return links_.size();
}
inline int PaintPreviewFrameProto::links_size() const {
  return _internal_links_size();
}
inline void PaintPreviewFrameProto::clear_links() {
  links_.Clear();
}
inline ::paint_preview::LinkDataProto* PaintPreviewFrameProto::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:paint_preview.PaintPreviewFrameProto.links)
  return links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::LinkDataProto >*
PaintPreviewFrameProto::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:paint_preview.PaintPreviewFrameProto.links)
  return &links_;
}
inline const ::paint_preview::LinkDataProto& PaintPreviewFrameProto::_internal_links(int index) const {
  return links_.Get(index);
}
inline const ::paint_preview::LinkDataProto& PaintPreviewFrameProto::links(int index) const {
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewFrameProto.links)
  return _internal_links(index);
}
inline ::paint_preview::LinkDataProto* PaintPreviewFrameProto::_internal_add_links() {
  return links_.Add();
}
inline ::paint_preview::LinkDataProto* PaintPreviewFrameProto::add_links() {
  ::paint_preview::LinkDataProto* _add = _internal_add_links();
  // @@protoc_insertion_point(field_add:paint_preview.PaintPreviewFrameProto.links)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::LinkDataProto >&
PaintPreviewFrameProto::links() const {
  // @@protoc_insertion_point(field_list:paint_preview.PaintPreviewFrameProto.links)
  return links_;
}

// repeated .paint_preview.ContentIdEmbeddingTokenPairProto content_id_to_embedding_tokens = 6;
inline int PaintPreviewFrameProto::_internal_content_id_to_embedding_tokens_size() const {
  return content_id_to_embedding_tokens_.size();
}
inline int PaintPreviewFrameProto::content_id_to_embedding_tokens_size() const {
  return _internal_content_id_to_embedding_tokens_size();
}
inline void PaintPreviewFrameProto::clear_content_id_to_embedding_tokens() {
  content_id_to_embedding_tokens_.Clear();
}
inline ::paint_preview::ContentIdEmbeddingTokenPairProto* PaintPreviewFrameProto::mutable_content_id_to_embedding_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:paint_preview.PaintPreviewFrameProto.content_id_to_embedding_tokens)
  return content_id_to_embedding_tokens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::ContentIdEmbeddingTokenPairProto >*
PaintPreviewFrameProto::mutable_content_id_to_embedding_tokens() {
  // @@protoc_insertion_point(field_mutable_list:paint_preview.PaintPreviewFrameProto.content_id_to_embedding_tokens)
  return &content_id_to_embedding_tokens_;
}
inline const ::paint_preview::ContentIdEmbeddingTokenPairProto& PaintPreviewFrameProto::_internal_content_id_to_embedding_tokens(int index) const {
  return content_id_to_embedding_tokens_.Get(index);
}
inline const ::paint_preview::ContentIdEmbeddingTokenPairProto& PaintPreviewFrameProto::content_id_to_embedding_tokens(int index) const {
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewFrameProto.content_id_to_embedding_tokens)
  return _internal_content_id_to_embedding_tokens(index);
}
inline ::paint_preview::ContentIdEmbeddingTokenPairProto* PaintPreviewFrameProto::_internal_add_content_id_to_embedding_tokens() {
  return content_id_to_embedding_tokens_.Add();
}
inline ::paint_preview::ContentIdEmbeddingTokenPairProto* PaintPreviewFrameProto::add_content_id_to_embedding_tokens() {
  ::paint_preview::ContentIdEmbeddingTokenPairProto* _add = _internal_add_content_id_to_embedding_tokens();
  // @@protoc_insertion_point(field_add:paint_preview.PaintPreviewFrameProto.content_id_to_embedding_tokens)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::ContentIdEmbeddingTokenPairProto >&
PaintPreviewFrameProto::content_id_to_embedding_tokens() const {
  // @@protoc_insertion_point(field_list:paint_preview.PaintPreviewFrameProto.content_id_to_embedding_tokens)
  return content_id_to_embedding_tokens_;
}

// optional uint32 scroll_offset_x = 7;
inline bool PaintPreviewFrameProto::_internal_has_scroll_offset_x() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PaintPreviewFrameProto::has_scroll_offset_x() const {
  return _internal_has_scroll_offset_x();
}
inline void PaintPreviewFrameProto::clear_scroll_offset_x() {
  scroll_offset_x_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t PaintPreviewFrameProto::_internal_scroll_offset_x() const {
  return scroll_offset_x_;
}
inline uint32_t PaintPreviewFrameProto::scroll_offset_x() const {
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewFrameProto.scroll_offset_x)
  return _internal_scroll_offset_x();
}
inline void PaintPreviewFrameProto::_internal_set_scroll_offset_x(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  scroll_offset_x_ = value;
}
inline void PaintPreviewFrameProto::set_scroll_offset_x(uint32_t value) {
  _internal_set_scroll_offset_x(value);
  // @@protoc_insertion_point(field_set:paint_preview.PaintPreviewFrameProto.scroll_offset_x)
}

// optional uint32 scroll_offset_y = 8;
inline bool PaintPreviewFrameProto::_internal_has_scroll_offset_y() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PaintPreviewFrameProto::has_scroll_offset_y() const {
  return _internal_has_scroll_offset_y();
}
inline void PaintPreviewFrameProto::clear_scroll_offset_y() {
  scroll_offset_y_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t PaintPreviewFrameProto::_internal_scroll_offset_y() const {
  return scroll_offset_y_;
}
inline uint32_t PaintPreviewFrameProto::scroll_offset_y() const {
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewFrameProto.scroll_offset_y)
  return _internal_scroll_offset_y();
}
inline void PaintPreviewFrameProto::_internal_set_scroll_offset_y(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  scroll_offset_y_ = value;
}
inline void PaintPreviewFrameProto::set_scroll_offset_y(uint32_t value) {
  _internal_set_scroll_offset_y(value);
  // @@protoc_insertion_point(field_set:paint_preview.PaintPreviewFrameProto.scroll_offset_y)
}

// optional uint32 frame_offset_x = 9;
inline bool PaintPreviewFrameProto::_internal_has_frame_offset_x() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PaintPreviewFrameProto::has_frame_offset_x() const {
  return _internal_has_frame_offset_x();
}
inline void PaintPreviewFrameProto::clear_frame_offset_x() {
  frame_offset_x_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t PaintPreviewFrameProto::_internal_frame_offset_x() const {
  return frame_offset_x_;
}
inline uint32_t PaintPreviewFrameProto::frame_offset_x() const {
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewFrameProto.frame_offset_x)
  return _internal_frame_offset_x();
}
inline void PaintPreviewFrameProto::_internal_set_frame_offset_x(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  frame_offset_x_ = value;
}
inline void PaintPreviewFrameProto::set_frame_offset_x(uint32_t value) {
  _internal_set_frame_offset_x(value);
  // @@protoc_insertion_point(field_set:paint_preview.PaintPreviewFrameProto.frame_offset_x)
}

// optional uint32 frame_offset_y = 10;
inline bool PaintPreviewFrameProto::_internal_has_frame_offset_y() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PaintPreviewFrameProto::has_frame_offset_y() const {
  return _internal_has_frame_offset_y();
}
inline void PaintPreviewFrameProto::clear_frame_offset_y() {
  frame_offset_y_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t PaintPreviewFrameProto::_internal_frame_offset_y() const {
  return frame_offset_y_;
}
inline uint32_t PaintPreviewFrameProto::frame_offset_y() const {
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewFrameProto.frame_offset_y)
  return _internal_frame_offset_y();
}
inline void PaintPreviewFrameProto::_internal_set_frame_offset_y(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  frame_offset_y_ = value;
}
inline void PaintPreviewFrameProto::set_frame_offset_y(uint32_t value) {
  _internal_set_frame_offset_y(value);
  // @@protoc_insertion_point(field_set:paint_preview.PaintPreviewFrameProto.frame_offset_y)
}

// -------------------------------------------------------------------

// ChromeVersionProto

// optional uint64 major = 1;
inline bool ChromeVersionProto::_internal_has_major() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChromeVersionProto::has_major() const {
  return _internal_has_major();
}
inline void ChromeVersionProto::clear_major() {
  major_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ChromeVersionProto::_internal_major() const {
  return major_;
}
inline uint64_t ChromeVersionProto::major() const {
  // @@protoc_insertion_point(field_get:paint_preview.ChromeVersionProto.major)
  return _internal_major();
}
inline void ChromeVersionProto::_internal_set_major(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  major_ = value;
}
inline void ChromeVersionProto::set_major(uint64_t value) {
  _internal_set_major(value);
  // @@protoc_insertion_point(field_set:paint_preview.ChromeVersionProto.major)
}

// optional uint64 minor = 2;
inline bool ChromeVersionProto::_internal_has_minor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChromeVersionProto::has_minor() const {
  return _internal_has_minor();
}
inline void ChromeVersionProto::clear_minor() {
  minor_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t ChromeVersionProto::_internal_minor() const {
  return minor_;
}
inline uint64_t ChromeVersionProto::minor() const {
  // @@protoc_insertion_point(field_get:paint_preview.ChromeVersionProto.minor)
  return _internal_minor();
}
inline void ChromeVersionProto::_internal_set_minor(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  minor_ = value;
}
inline void ChromeVersionProto::set_minor(uint64_t value) {
  _internal_set_minor(value);
  // @@protoc_insertion_point(field_set:paint_preview.ChromeVersionProto.minor)
}

// optional uint64 build = 3;
inline bool ChromeVersionProto::_internal_has_build() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChromeVersionProto::has_build() const {
  return _internal_has_build();
}
inline void ChromeVersionProto::clear_build() {
  build_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t ChromeVersionProto::_internal_build() const {
  return build_;
}
inline uint64_t ChromeVersionProto::build() const {
  // @@protoc_insertion_point(field_get:paint_preview.ChromeVersionProto.build)
  return _internal_build();
}
inline void ChromeVersionProto::_internal_set_build(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  build_ = value;
}
inline void ChromeVersionProto::set_build(uint64_t value) {
  _internal_set_build(value);
  // @@protoc_insertion_point(field_set:paint_preview.ChromeVersionProto.build)
}

// optional uint64 patch = 4;
inline bool ChromeVersionProto::_internal_has_patch() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChromeVersionProto::has_patch() const {
  return _internal_has_patch();
}
inline void ChromeVersionProto::clear_patch() {
  patch_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t ChromeVersionProto::_internal_patch() const {
  return patch_;
}
inline uint64_t ChromeVersionProto::patch() const {
  // @@protoc_insertion_point(field_get:paint_preview.ChromeVersionProto.patch)
  return _internal_patch();
}
inline void ChromeVersionProto::_internal_set_patch(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  patch_ = value;
}
inline void ChromeVersionProto::set_patch(uint64_t value) {
  _internal_set_patch(value);
  // @@protoc_insertion_point(field_set:paint_preview.ChromeVersionProto.patch)
}

// -------------------------------------------------------------------

// MetadataProto

// optional string url = 1;
inline bool MetadataProto::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MetadataProto::has_url() const {
  return _internal_has_url();
}
inline void MetadataProto::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MetadataProto::url() const {
  // @@protoc_insertion_point(field_get:paint_preview.MetadataProto.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetadataProto::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:paint_preview.MetadataProto.url)
}
inline std::string* MetadataProto::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:paint_preview.MetadataProto.url)
  return _s;
}
inline const std::string& MetadataProto::_internal_url() const {
  return url_.Get();
}
inline void MetadataProto::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* MetadataProto::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* MetadataProto::release_url() {
  // @@protoc_insertion_point(field_release:paint_preview.MetadataProto.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MetadataProto::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:paint_preview.MetadataProto.url)
}

// optional uint64 version = 2;
inline bool MetadataProto::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MetadataProto::has_version() const {
  return _internal_has_version();
}
inline void MetadataProto::clear_version() {
  version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t MetadataProto::_internal_version() const {
  return version_;
}
inline uint64_t MetadataProto::version() const {
  // @@protoc_insertion_point(field_get:paint_preview.MetadataProto.version)
  return _internal_version();
}
inline void MetadataProto::_internal_set_version(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
}
inline void MetadataProto::set_version(uint64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:paint_preview.MetadataProto.version)
}

// optional .paint_preview.ChromeVersionProto chrome_version = 3;
inline bool MetadataProto::_internal_has_chrome_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || chrome_version_ != nullptr);
  return value;
}
inline bool MetadataProto::has_chrome_version() const {
  return _internal_has_chrome_version();
}
inline void MetadataProto::clear_chrome_version() {
  if (chrome_version_ != nullptr) chrome_version_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::paint_preview::ChromeVersionProto& MetadataProto::_internal_chrome_version() const {
  const ::paint_preview::ChromeVersionProto* p = chrome_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::paint_preview::ChromeVersionProto&>(
      ::paint_preview::_ChromeVersionProto_default_instance_);
}
inline const ::paint_preview::ChromeVersionProto& MetadataProto::chrome_version() const {
  // @@protoc_insertion_point(field_get:paint_preview.MetadataProto.chrome_version)
  return _internal_chrome_version();
}
inline void MetadataProto::unsafe_arena_set_allocated_chrome_version(
    ::paint_preview::ChromeVersionProto* chrome_version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_version_);
  }
  chrome_version_ = chrome_version;
  if (chrome_version) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:paint_preview.MetadataProto.chrome_version)
}
inline ::paint_preview::ChromeVersionProto* MetadataProto::release_chrome_version() {
  _has_bits_[0] &= ~0x00000002u;
  ::paint_preview::ChromeVersionProto* temp = chrome_version_;
  chrome_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::paint_preview::ChromeVersionProto* MetadataProto::unsafe_arena_release_chrome_version() {
  // @@protoc_insertion_point(field_release:paint_preview.MetadataProto.chrome_version)
  _has_bits_[0] &= ~0x00000002u;
  ::paint_preview::ChromeVersionProto* temp = chrome_version_;
  chrome_version_ = nullptr;
  return temp;
}
inline ::paint_preview::ChromeVersionProto* MetadataProto::_internal_mutable_chrome_version() {
  _has_bits_[0] |= 0x00000002u;
  if (chrome_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::paint_preview::ChromeVersionProto>(GetArenaForAllocation());
    chrome_version_ = p;
  }
  return chrome_version_;
}
inline ::paint_preview::ChromeVersionProto* MetadataProto::mutable_chrome_version() {
  ::paint_preview::ChromeVersionProto* _msg = _internal_mutable_chrome_version();
  // @@protoc_insertion_point(field_mutable:paint_preview.MetadataProto.chrome_version)
  return _msg;
}
inline void MetadataProto::set_allocated_chrome_version(::paint_preview::ChromeVersionProto* chrome_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete chrome_version_;
  }
  if (chrome_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chrome_version);
    if (message_arena != submessage_arena) {
      chrome_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_version, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  chrome_version_ = chrome_version;
  // @@protoc_insertion_point(field_set_allocated:paint_preview.MetadataProto.chrome_version)
}

// optional float page_scale_factor = 4;
inline bool MetadataProto::_internal_has_page_scale_factor() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MetadataProto::has_page_scale_factor() const {
  return _internal_has_page_scale_factor();
}
inline void MetadataProto::clear_page_scale_factor() {
  page_scale_factor_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float MetadataProto::_internal_page_scale_factor() const {
  return page_scale_factor_;
}
inline float MetadataProto::page_scale_factor() const {
  // @@protoc_insertion_point(field_get:paint_preview.MetadataProto.page_scale_factor)
  return _internal_page_scale_factor();
}
inline void MetadataProto::_internal_set_page_scale_factor(float value) {
  _has_bits_[0] |= 0x00000008u;
  page_scale_factor_ = value;
}
inline void MetadataProto::set_page_scale_factor(float value) {
  _internal_set_page_scale_factor(value);
  // @@protoc_insertion_point(field_set:paint_preview.MetadataProto.page_scale_factor)
}

// -------------------------------------------------------------------

// PaintPreviewProto

// optional .paint_preview.PaintPreviewFrameProto root_frame = 1;
inline bool PaintPreviewProto::_internal_has_root_frame() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || root_frame_ != nullptr);
  return value;
}
inline bool PaintPreviewProto::has_root_frame() const {
  return _internal_has_root_frame();
}
inline void PaintPreviewProto::clear_root_frame() {
  if (root_frame_ != nullptr) root_frame_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::paint_preview::PaintPreviewFrameProto& PaintPreviewProto::_internal_root_frame() const {
  const ::paint_preview::PaintPreviewFrameProto* p = root_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::paint_preview::PaintPreviewFrameProto&>(
      ::paint_preview::_PaintPreviewFrameProto_default_instance_);
}
inline const ::paint_preview::PaintPreviewFrameProto& PaintPreviewProto::root_frame() const {
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewProto.root_frame)
  return _internal_root_frame();
}
inline void PaintPreviewProto::unsafe_arena_set_allocated_root_frame(
    ::paint_preview::PaintPreviewFrameProto* root_frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_frame_);
  }
  root_frame_ = root_frame;
  if (root_frame) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:paint_preview.PaintPreviewProto.root_frame)
}
inline ::paint_preview::PaintPreviewFrameProto* PaintPreviewProto::release_root_frame() {
  _has_bits_[0] &= ~0x00000001u;
  ::paint_preview::PaintPreviewFrameProto* temp = root_frame_;
  root_frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::paint_preview::PaintPreviewFrameProto* PaintPreviewProto::unsafe_arena_release_root_frame() {
  // @@protoc_insertion_point(field_release:paint_preview.PaintPreviewProto.root_frame)
  _has_bits_[0] &= ~0x00000001u;
  ::paint_preview::PaintPreviewFrameProto* temp = root_frame_;
  root_frame_ = nullptr;
  return temp;
}
inline ::paint_preview::PaintPreviewFrameProto* PaintPreviewProto::_internal_mutable_root_frame() {
  _has_bits_[0] |= 0x00000001u;
  if (root_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::paint_preview::PaintPreviewFrameProto>(GetArenaForAllocation());
    root_frame_ = p;
  }
  return root_frame_;
}
inline ::paint_preview::PaintPreviewFrameProto* PaintPreviewProto::mutable_root_frame() {
  ::paint_preview::PaintPreviewFrameProto* _msg = _internal_mutable_root_frame();
  // @@protoc_insertion_point(field_mutable:paint_preview.PaintPreviewProto.root_frame)
  return _msg;
}
inline void PaintPreviewProto::set_allocated_root_frame(::paint_preview::PaintPreviewFrameProto* root_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete root_frame_;
  }
  if (root_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(root_frame);
    if (message_arena != submessage_arena) {
      root_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  root_frame_ = root_frame;
  // @@protoc_insertion_point(field_set_allocated:paint_preview.PaintPreviewProto.root_frame)
}

// repeated .paint_preview.PaintPreviewFrameProto subframes = 2;
inline int PaintPreviewProto::_internal_subframes_size() const {
  return subframes_.size();
}
inline int PaintPreviewProto::subframes_size() const {
  return _internal_subframes_size();
}
inline void PaintPreviewProto::clear_subframes() {
  subframes_.Clear();
}
inline ::paint_preview::PaintPreviewFrameProto* PaintPreviewProto::mutable_subframes(int index) {
  // @@protoc_insertion_point(field_mutable:paint_preview.PaintPreviewProto.subframes)
  return subframes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::PaintPreviewFrameProto >*
PaintPreviewProto::mutable_subframes() {
  // @@protoc_insertion_point(field_mutable_list:paint_preview.PaintPreviewProto.subframes)
  return &subframes_;
}
inline const ::paint_preview::PaintPreviewFrameProto& PaintPreviewProto::_internal_subframes(int index) const {
  return subframes_.Get(index);
}
inline const ::paint_preview::PaintPreviewFrameProto& PaintPreviewProto::subframes(int index) const {
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewProto.subframes)
  return _internal_subframes(index);
}
inline ::paint_preview::PaintPreviewFrameProto* PaintPreviewProto::_internal_add_subframes() {
  return subframes_.Add();
}
inline ::paint_preview::PaintPreviewFrameProto* PaintPreviewProto::add_subframes() {
  ::paint_preview::PaintPreviewFrameProto* _add = _internal_add_subframes();
  // @@protoc_insertion_point(field_add:paint_preview.PaintPreviewProto.subframes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paint_preview::PaintPreviewFrameProto >&
PaintPreviewProto::subframes() const {
  // @@protoc_insertion_point(field_list:paint_preview.PaintPreviewProto.subframes)
  return subframes_;
}

// optional .paint_preview.MetadataProto metadata = 3;
inline bool PaintPreviewProto::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || metadata_ != nullptr);
  return value;
}
inline bool PaintPreviewProto::has_metadata() const {
  return _internal_has_metadata();
}
inline void PaintPreviewProto::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::paint_preview::MetadataProto& PaintPreviewProto::_internal_metadata() const {
  const ::paint_preview::MetadataProto* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::paint_preview::MetadataProto&>(
      ::paint_preview::_MetadataProto_default_instance_);
}
inline const ::paint_preview::MetadataProto& PaintPreviewProto::metadata() const {
  // @@protoc_insertion_point(field_get:paint_preview.PaintPreviewProto.metadata)
  return _internal_metadata();
}
inline void PaintPreviewProto::unsafe_arena_set_allocated_metadata(
    ::paint_preview::MetadataProto* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:paint_preview.PaintPreviewProto.metadata)
}
inline ::paint_preview::MetadataProto* PaintPreviewProto::release_metadata() {
  _has_bits_[0] &= ~0x00000002u;
  ::paint_preview::MetadataProto* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::paint_preview::MetadataProto* PaintPreviewProto::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:paint_preview.PaintPreviewProto.metadata)
  _has_bits_[0] &= ~0x00000002u;
  ::paint_preview::MetadataProto* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::paint_preview::MetadataProto* PaintPreviewProto::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000002u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::paint_preview::MetadataProto>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::paint_preview::MetadataProto* PaintPreviewProto::mutable_metadata() {
  ::paint_preview::MetadataProto* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:paint_preview.PaintPreviewProto.metadata)
  return _msg;
}
inline void PaintPreviewProto::set_allocated_metadata(::paint_preview::MetadataProto* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:paint_preview.PaintPreviewProto.metadata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace paint_preview

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_paint_5fpreview_2eproto
