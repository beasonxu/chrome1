// components/paint_preview/common/mojom/paint_preview_recorder.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_PAINT_PREVIEW_COMMON_MOJOM_PAINT_PREVIEW_RECORDER_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_PAINT_PREVIEW_COMMON_MOJOM_PAINT_PREVIEW_RECORDER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace paint_preview {
namespace mojom {
namespace internal {

class ValidationContext;
class  PaintPreviewRecorder_CapturePaintPreview_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PaintPreviewCaptureParams_Data> params;

 private:
  friend class mojo::internal::MessageFragment<PaintPreviewRecorder_CapturePaintPreview_Params_Data>;

  PaintPreviewRecorder_CapturePaintPreview_Params_Data();
  ~PaintPreviewRecorder_CapturePaintPreview_Params_Data() = delete;
};
static_assert(sizeof(PaintPreviewRecorder_CapturePaintPreview_Params_Data) == 16,
              "Bad sizeof(PaintPreviewRecorder_CapturePaintPreview_Params_Data)");
class  PaintPreviewRecorder_CapturePaintPreview_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t pad0_[4];
  mojo::internal::Pointer<internal::PaintPreviewCaptureResponse_Data> response;

 private:
  friend class mojo::internal::MessageFragment<PaintPreviewRecorder_CapturePaintPreview_ResponseParams_Data>;

  PaintPreviewRecorder_CapturePaintPreview_ResponseParams_Data();
  ~PaintPreviewRecorder_CapturePaintPreview_ResponseParams_Data() = delete;
};
static_assert(sizeof(PaintPreviewRecorder_CapturePaintPreview_ResponseParams_Data) == 24,
              "Bad sizeof(PaintPreviewRecorder_CapturePaintPreview_ResponseParams_Data)");

}  // namespace internal


class PaintPreviewRecorder_CapturePaintPreview_ParamsDataView {
 public:
  PaintPreviewRecorder_CapturePaintPreview_ParamsDataView() = default;

  PaintPreviewRecorder_CapturePaintPreview_ParamsDataView(
      internal::PaintPreviewRecorder_CapturePaintPreview_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetParamsDataView(
      PaintPreviewCaptureParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParams(UserType* output) {
    
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::paint_preview::mojom::PaintPreviewCaptureParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::PaintPreviewRecorder_CapturePaintPreview_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PaintPreviewRecorder_CapturePaintPreview_ResponseParamsDataView {
 public:
  PaintPreviewRecorder_CapturePaintPreview_ResponseParamsDataView() = default;

  PaintPreviewRecorder_CapturePaintPreview_ResponseParamsDataView(
      internal::PaintPreviewRecorder_CapturePaintPreview_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::paint_preview::mojom::PaintPreviewStatus>(
        data_value, output);
  }
  PaintPreviewStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::paint_preview::mojom::PaintPreviewStatus>(data_->status));
  }
  inline void GetResponseDataView(
      PaintPreviewCaptureResponseDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResponse(UserType* output) {
    
    auto* pointer = data_->response.Get();
    return mojo::internal::Deserialize<::paint_preview::mojom::PaintPreviewCaptureResponseDataView>(
        pointer, output, message_);
  }
 private:
  internal::PaintPreviewRecorder_CapturePaintPreview_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void PaintPreviewRecorder_CapturePaintPreview_ParamsDataView::GetParamsDataView(
    PaintPreviewCaptureParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = PaintPreviewCaptureParamsDataView(pointer, message_);
}


inline void PaintPreviewRecorder_CapturePaintPreview_ResponseParamsDataView::GetResponseDataView(
    PaintPreviewCaptureResponseDataView* output) {
  auto pointer = data_->response.Get();
  *output = PaintPreviewCaptureResponseDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace paint_preview

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_PAINT_PREVIEW_COMMON_MOJOM_PAINT_PREVIEW_RECORDER_MOJOM_PARAMS_DATA_H_