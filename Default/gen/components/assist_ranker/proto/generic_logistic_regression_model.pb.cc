// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: generic_logistic_regression_model.proto

#include "generic_logistic_regression_model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace assist_ranker {
PROTOBUF_CONSTEXPR SparseWeights_WeightsEntry_DoNotUse::SparseWeights_WeightsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct SparseWeights_WeightsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SparseWeights_WeightsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SparseWeights_WeightsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SparseWeights_WeightsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SparseWeights_WeightsEntry_DoNotUseDefaultTypeInternal _SparseWeights_WeightsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SparseWeights::SparseWeights(
    ::_pbi::ConstantInitialized)
  : weights_()
  , default_weight_(0){}
struct SparseWeightsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SparseWeightsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SparseWeightsDefaultTypeInternal() {}
  union {
    SparseWeights _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SparseWeightsDefaultTypeInternal _SparseWeights_default_instance_;
PROTOBUF_CONSTEXPR BucketizedWeights::BucketizedWeights(
    ::_pbi::ConstantInitialized)
  : boundaries_()
  , weights_()
  , default_weight_(0){}
struct BucketizedWeightsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BucketizedWeightsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BucketizedWeightsDefaultTypeInternal() {}
  union {
    BucketizedWeights _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BucketizedWeightsDefaultTypeInternal _BucketizedWeights_default_instance_;
PROTOBUF_CONSTEXPR FeatureWeight::FeatureWeight(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct FeatureWeightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeatureWeightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeatureWeightDefaultTypeInternal() {}
  union {
    FeatureWeight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeatureWeightDefaultTypeInternal _FeatureWeight_default_instance_;
PROTOBUF_CONSTEXPR GenericLogisticRegressionModel_WeightsEntry_DoNotUse::GenericLogisticRegressionModel_WeightsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct GenericLogisticRegressionModel_WeightsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenericLogisticRegressionModel_WeightsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenericLogisticRegressionModel_WeightsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GenericLogisticRegressionModel_WeightsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenericLogisticRegressionModel_WeightsEntry_DoNotUseDefaultTypeInternal _GenericLogisticRegressionModel_WeightsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse::GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUseDefaultTypeInternal _GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GenericLogisticRegressionModel::GenericLogisticRegressionModel(
    ::_pbi::ConstantInitialized)
  : weights_()
  , fullname_weights_()
  , preprocessor_config_(nullptr)
  , threshold_(0)
  , bias_(0)
  , is_preprocessed_model_(false){}
struct GenericLogisticRegressionModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenericLogisticRegressionModelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenericLogisticRegressionModelDefaultTypeInternal() {}
  union {
    GenericLogisticRegressionModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenericLogisticRegressionModelDefaultTypeInternal _GenericLogisticRegressionModel_default_instance_;
}  // namespace assist_ranker
namespace assist_ranker {

// ===================================================================

SparseWeights_WeightsEntry_DoNotUse::SparseWeights_WeightsEntry_DoNotUse() {}
SparseWeights_WeightsEntry_DoNotUse::SparseWeights_WeightsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SparseWeights_WeightsEntry_DoNotUse::MergeFrom(const SparseWeights_WeightsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class SparseWeights::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseWeights>()._has_bits_);
  static void set_has_default_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SparseWeights::SparseWeights(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  weights_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:assist_ranker.SparseWeights)
}
SparseWeights::SparseWeights(const SparseWeights& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  weights_.MergeFrom(from.weights_);
  default_weight_ = from.default_weight_;
  // @@protoc_insertion_point(copy_constructor:assist_ranker.SparseWeights)
}

inline void SparseWeights::SharedCtor() {
default_weight_ = 0;
}

SparseWeights::~SparseWeights() {
  // @@protoc_insertion_point(destructor:assist_ranker.SparseWeights)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SparseWeights::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  weights_.Destruct();
}

void SparseWeights::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SparseWeights::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.SparseWeights)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weights_.Clear();
  default_weight_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SparseWeights::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, float> weights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&weights_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional float default_weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_default_weight(&has_bits);
          default_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SparseWeights::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:assist_ranker.SparseWeights)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, float> weights = 1;
  if (!this->_internal_weights().empty()) {
    using MapType = ::_pb::Map<std::string, float>;
    using WireHelper = SparseWeights_WeightsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_weights();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional float default_weight = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_default_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:assist_ranker.SparseWeights)
  return target;
}

size_t SparseWeights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.SparseWeights)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, float> weights = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_weights_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->_internal_weights().begin();
      it != this->_internal_weights().end(); ++it) {
    total_size += SparseWeights_WeightsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional float default_weight = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SparseWeights::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SparseWeights*>(
      &from));
}

void SparseWeights::MergeFrom(const SparseWeights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.SparseWeights)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  weights_.MergeFrom(from.weights_);
  if (from._internal_has_default_weight()) {
    _internal_set_default_weight(from._internal_default_weight());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SparseWeights::CopyFrom(const SparseWeights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.SparseWeights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseWeights::IsInitialized() const {
  return true;
}

void SparseWeights::InternalSwap(SparseWeights* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  weights_.InternalSwap(&other->weights_);
  swap(default_weight_, other->default_weight_);
}

std::string SparseWeights::GetTypeName() const {
  return "assist_ranker.SparseWeights";
}


// ===================================================================

class BucketizedWeights::_Internal {
 public:
  using HasBits = decltype(std::declval<BucketizedWeights>()._has_bits_);
  static void set_has_default_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BucketizedWeights::BucketizedWeights(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  boundaries_(arena),
  weights_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:assist_ranker.BucketizedWeights)
}
BucketizedWeights::BucketizedWeights(const BucketizedWeights& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      boundaries_(from.boundaries_),
      weights_(from.weights_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  default_weight_ = from.default_weight_;
  // @@protoc_insertion_point(copy_constructor:assist_ranker.BucketizedWeights)
}

inline void BucketizedWeights::SharedCtor() {
default_weight_ = 0;
}

BucketizedWeights::~BucketizedWeights() {
  // @@protoc_insertion_point(destructor:assist_ranker.BucketizedWeights)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BucketizedWeights::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BucketizedWeights::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BucketizedWeights::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.BucketizedWeights)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boundaries_.Clear();
  weights_.Clear();
  default_weight_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BucketizedWeights::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float boundaries = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_boundaries(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_boundaries(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float weights = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_weights(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_weights(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float default_weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_default_weight(&has_bits);
          default_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BucketizedWeights::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:assist_ranker.BucketizedWeights)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float boundaries = 1 [packed = true];
  if (this->_internal_boundaries_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_boundaries(), target);
  }

  // repeated float weights = 2 [packed = true];
  if (this->_internal_weights_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_weights(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float default_weight = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_default_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:assist_ranker.BucketizedWeights)
  return target;
}

size_t BucketizedWeights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.BucketizedWeights)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float boundaries = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_boundaries_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float weights = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_weights_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // optional float default_weight = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BucketizedWeights::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BucketizedWeights*>(
      &from));
}

void BucketizedWeights::MergeFrom(const BucketizedWeights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.BucketizedWeights)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  boundaries_.MergeFrom(from.boundaries_);
  weights_.MergeFrom(from.weights_);
  if (from._internal_has_default_weight()) {
    _internal_set_default_weight(from._internal_default_weight());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BucketizedWeights::CopyFrom(const BucketizedWeights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.BucketizedWeights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BucketizedWeights::IsInitialized() const {
  return true;
}

void BucketizedWeights::InternalSwap(BucketizedWeights* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  boundaries_.InternalSwap(&other->boundaries_);
  weights_.InternalSwap(&other->weights_);
  swap(default_weight_, other->default_weight_);
}

std::string BucketizedWeights::GetTypeName() const {
  return "assist_ranker.BucketizedWeights";
}


// ===================================================================

class FeatureWeight::_Internal {
 public:
  static const ::assist_ranker::SparseWeights& one_hot(const FeatureWeight* msg);
  static const ::assist_ranker::SparseWeights& sparse(const FeatureWeight* msg);
  static const ::assist_ranker::BucketizedWeights& bucketized(const FeatureWeight* msg);
};

const ::assist_ranker::SparseWeights&
FeatureWeight::_Internal::one_hot(const FeatureWeight* msg) {
  return *msg->feature_type_.one_hot_;
}
const ::assist_ranker::SparseWeights&
FeatureWeight::_Internal::sparse(const FeatureWeight* msg) {
  return *msg->feature_type_.sparse_;
}
const ::assist_ranker::BucketizedWeights&
FeatureWeight::_Internal::bucketized(const FeatureWeight* msg) {
  return *msg->feature_type_.bucketized_;
}
void FeatureWeight::set_allocated_one_hot(::assist_ranker::SparseWeights* one_hot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_feature_type();
  if (one_hot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(one_hot);
    if (message_arena != submessage_arena) {
      one_hot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, one_hot, submessage_arena);
    }
    set_has_one_hot();
    feature_type_.one_hot_ = one_hot;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.FeatureWeight.one_hot)
}
void FeatureWeight::set_allocated_sparse(::assist_ranker::SparseWeights* sparse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_feature_type();
  if (sparse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sparse);
    if (message_arena != submessage_arena) {
      sparse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sparse, submessage_arena);
    }
    set_has_sparse();
    feature_type_.sparse_ = sparse;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.FeatureWeight.sparse)
}
void FeatureWeight::set_allocated_bucketized(::assist_ranker::BucketizedWeights* bucketized) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_feature_type();
  if (bucketized) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bucketized);
    if (message_arena != submessage_arena) {
      bucketized = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bucketized, submessage_arena);
    }
    set_has_bucketized();
    feature_type_.bucketized_ = bucketized;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.FeatureWeight.bucketized)
}
FeatureWeight::FeatureWeight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:assist_ranker.FeatureWeight)
}
FeatureWeight::FeatureWeight(const FeatureWeight& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_feature_type();
  switch (from.feature_type_case()) {
    case kScalar: {
      _internal_set_scalar(from._internal_scalar());
      break;
    }
    case kOneHot: {
      _internal_mutable_one_hot()->::assist_ranker::SparseWeights::MergeFrom(from._internal_one_hot());
      break;
    }
    case kSparse: {
      _internal_mutable_sparse()->::assist_ranker::SparseWeights::MergeFrom(from._internal_sparse());
      break;
    }
    case kBucketized: {
      _internal_mutable_bucketized()->::assist_ranker::BucketizedWeights::MergeFrom(from._internal_bucketized());
      break;
    }
    case FEATURE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:assist_ranker.FeatureWeight)
}

inline void FeatureWeight::SharedCtor() {
clear_has_feature_type();
}

FeatureWeight::~FeatureWeight() {
  // @@protoc_insertion_point(destructor:assist_ranker.FeatureWeight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeatureWeight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_feature_type()) {
    clear_feature_type();
  }
}

void FeatureWeight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FeatureWeight::clear_feature_type() {
// @@protoc_insertion_point(one_of_clear_start:assist_ranker.FeatureWeight)
  switch (feature_type_case()) {
    case kScalar: {
      // No need to clear
      break;
    }
    case kOneHot: {
      if (GetArenaForAllocation() == nullptr) {
        delete feature_type_.one_hot_;
      }
      break;
    }
    case kSparse: {
      if (GetArenaForAllocation() == nullptr) {
        delete feature_type_.sparse_;
      }
      break;
    }
    case kBucketized: {
      if (GetArenaForAllocation() == nullptr) {
        delete feature_type_.bucketized_;
      }
      break;
    }
    case FEATURE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FEATURE_TYPE_NOT_SET;
}


void FeatureWeight::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.FeatureWeight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_feature_type();
  _internal_metadata_.Clear<std::string>();
}

const char* FeatureWeight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float scalar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _internal_set_scalar(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .assist_ranker.SparseWeights one_hot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_one_hot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .assist_ranker.SparseWeights sparse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sparse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .assist_ranker.BucketizedWeights bucketized = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bucketized(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeatureWeight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:assist_ranker.FeatureWeight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (feature_type_case()) {
    case kScalar: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_scalar(), target);
      break;
    }
    case kOneHot: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::one_hot(this),
          _Internal::one_hot(this).GetCachedSize(), target, stream);
      break;
    }
    case kSparse: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::sparse(this),
          _Internal::sparse(this).GetCachedSize(), target, stream);
      break;
    }
    case kBucketized: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::bucketized(this),
          _Internal::bucketized(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:assist_ranker.FeatureWeight)
  return target;
}

size_t FeatureWeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.FeatureWeight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (feature_type_case()) {
    // float scalar = 1;
    case kScalar: {
      total_size += 1 + 4;
      break;
    }
    // .assist_ranker.SparseWeights one_hot = 2;
    case kOneHot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_type_.one_hot_);
      break;
    }
    // .assist_ranker.SparseWeights sparse = 3;
    case kSparse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_type_.sparse_);
      break;
    }
    // .assist_ranker.BucketizedWeights bucketized = 4;
    case kBucketized: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_type_.bucketized_);
      break;
    }
    case FEATURE_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureWeight::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FeatureWeight*>(
      &from));
}

void FeatureWeight::MergeFrom(const FeatureWeight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.FeatureWeight)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.feature_type_case()) {
    case kScalar: {
      _internal_set_scalar(from._internal_scalar());
      break;
    }
    case kOneHot: {
      _internal_mutable_one_hot()->::assist_ranker::SparseWeights::MergeFrom(from._internal_one_hot());
      break;
    }
    case kSparse: {
      _internal_mutable_sparse()->::assist_ranker::SparseWeights::MergeFrom(from._internal_sparse());
      break;
    }
    case kBucketized: {
      _internal_mutable_bucketized()->::assist_ranker::BucketizedWeights::MergeFrom(from._internal_bucketized());
      break;
    }
    case FEATURE_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FeatureWeight::CopyFrom(const FeatureWeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.FeatureWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureWeight::IsInitialized() const {
  return true;
}

void FeatureWeight::InternalSwap(FeatureWeight* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(feature_type_, other->feature_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string FeatureWeight::GetTypeName() const {
  return "assist_ranker.FeatureWeight";
}


// ===================================================================

GenericLogisticRegressionModel_WeightsEntry_DoNotUse::GenericLogisticRegressionModel_WeightsEntry_DoNotUse() {}
GenericLogisticRegressionModel_WeightsEntry_DoNotUse::GenericLogisticRegressionModel_WeightsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GenericLogisticRegressionModel_WeightsEntry_DoNotUse::MergeFrom(const GenericLogisticRegressionModel_WeightsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse::GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse() {}
GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse::GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse::MergeFrom(const GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class GenericLogisticRegressionModel::_Internal {
 public:
  using HasBits = decltype(std::declval<GenericLogisticRegressionModel>()._has_bits_);
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_preprocessed_model(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::assist_ranker::ExamplePreprocessorConfig& preprocessor_config(const GenericLogisticRegressionModel* msg);
  static void set_has_preprocessor_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::assist_ranker::ExamplePreprocessorConfig&
GenericLogisticRegressionModel::_Internal::preprocessor_config(const GenericLogisticRegressionModel* msg) {
  return *msg->preprocessor_config_;
}
void GenericLogisticRegressionModel::clear_preprocessor_config() {
  if (preprocessor_config_ != nullptr) preprocessor_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GenericLogisticRegressionModel::GenericLogisticRegressionModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  weights_(arena),
  fullname_weights_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:assist_ranker.GenericLogisticRegressionModel)
}
GenericLogisticRegressionModel::GenericLogisticRegressionModel(const GenericLogisticRegressionModel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  weights_.MergeFrom(from.weights_);
  fullname_weights_.MergeFrom(from.fullname_weights_);
  if (from._internal_has_preprocessor_config()) {
    preprocessor_config_ = new ::assist_ranker::ExamplePreprocessorConfig(*from.preprocessor_config_);
  } else {
    preprocessor_config_ = nullptr;
  }
  ::memcpy(&threshold_, &from.threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_preprocessed_model_) -
    reinterpret_cast<char*>(&threshold_)) + sizeof(is_preprocessed_model_));
  // @@protoc_insertion_point(copy_constructor:assist_ranker.GenericLogisticRegressionModel)
}

inline void GenericLogisticRegressionModel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&preprocessor_config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_preprocessed_model_) -
    reinterpret_cast<char*>(&preprocessor_config_)) + sizeof(is_preprocessed_model_));
}

GenericLogisticRegressionModel::~GenericLogisticRegressionModel() {
  // @@protoc_insertion_point(destructor:assist_ranker.GenericLogisticRegressionModel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenericLogisticRegressionModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  weights_.Destruct();
  fullname_weights_.Destruct();
  if (this != internal_default_instance()) delete preprocessor_config_;
}

void GenericLogisticRegressionModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenericLogisticRegressionModel::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.GenericLogisticRegressionModel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weights_.Clear();
  fullname_weights_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(preprocessor_config_ != nullptr);
    preprocessor_config_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_preprocessed_model_) -
        reinterpret_cast<char*>(&threshold_)) + sizeof(is_preprocessed_model_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GenericLogisticRegressionModel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float threshold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_threshold(&has_bits);
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float bias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_bias(&has_bits);
          bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // map<string, .assist_ranker.FeatureWeight> weights = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&weights_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_preprocessed_model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_preprocessed_model(&has_bits);
          is_preprocessed_model_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, float> fullname_weights = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&fullname_weights_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_preprocessor_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenericLogisticRegressionModel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:assist_ranker.GenericLogisticRegressionModel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float threshold = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_threshold(), target);
  }

  // optional float bias = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_bias(), target);
  }

  // map<string, .assist_ranker.FeatureWeight> weights = 3;
  if (!this->_internal_weights().empty()) {
    using MapType = ::_pb::Map<std::string, ::assist_ranker::FeatureWeight>;
    using WireHelper = GenericLogisticRegressionModel_WeightsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_weights();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional bool is_preprocessed_model = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_preprocessed_model(), target);
  }

  // map<string, float> fullname_weights = 5;
  if (!this->_internal_fullname_weights().empty()) {
    using MapType = ::_pb::Map<std::string, float>;
    using WireHelper = GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_fullname_weights();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::preprocessor_config(this),
        _Internal::preprocessor_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:assist_ranker.GenericLogisticRegressionModel)
  return target;
}

size_t GenericLogisticRegressionModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.GenericLogisticRegressionModel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .assist_ranker.FeatureWeight> weights = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_weights_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::FeatureWeight >::const_iterator
      it = this->_internal_weights().begin();
      it != this->_internal_weights().end(); ++it) {
    total_size += GenericLogisticRegressionModel_WeightsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, float> fullname_weights = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fullname_weights_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->_internal_fullname_weights().begin();
      it != this->_internal_fullname_weights().end(); ++it) {
    total_size += GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessor_config_);
    }

    // optional float threshold = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float bias = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional bool is_preprocessed_model = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericLogisticRegressionModel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GenericLogisticRegressionModel*>(
      &from));
}

void GenericLogisticRegressionModel::MergeFrom(const GenericLogisticRegressionModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.GenericLogisticRegressionModel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  weights_.MergeFrom(from.weights_);
  fullname_weights_.MergeFrom(from.fullname_weights_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_preprocessor_config()->::assist_ranker::ExamplePreprocessorConfig::MergeFrom(from._internal_preprocessor_config());
    }
    if (cached_has_bits & 0x00000002u) {
      threshold_ = from.threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      bias_ = from.bias_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_preprocessed_model_ = from.is_preprocessed_model_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GenericLogisticRegressionModel::CopyFrom(const GenericLogisticRegressionModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.GenericLogisticRegressionModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericLogisticRegressionModel::IsInitialized() const {
  return true;
}

void GenericLogisticRegressionModel::InternalSwap(GenericLogisticRegressionModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  weights_.InternalSwap(&other->weights_);
  fullname_weights_.InternalSwap(&other->fullname_weights_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenericLogisticRegressionModel, is_preprocessed_model_)
      + sizeof(GenericLogisticRegressionModel::is_preprocessed_model_)
      - PROTOBUF_FIELD_OFFSET(GenericLogisticRegressionModel, preprocessor_config_)>(
          reinterpret_cast<char*>(&preprocessor_config_),
          reinterpret_cast<char*>(&other->preprocessor_config_));
}

std::string GenericLogisticRegressionModel::GetTypeName() const {
  return "assist_ranker.GenericLogisticRegressionModel";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace assist_ranker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::assist_ranker::SparseWeights_WeightsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::assist_ranker::SparseWeights_WeightsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::assist_ranker::SparseWeights_WeightsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::SparseWeights*
Arena::CreateMaybeMessage< ::assist_ranker::SparseWeights >(Arena* arena) {
  return Arena::CreateMessageInternal< ::assist_ranker::SparseWeights >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::BucketizedWeights*
Arena::CreateMaybeMessage< ::assist_ranker::BucketizedWeights >(Arena* arena) {
  return Arena::CreateMessageInternal< ::assist_ranker::BucketizedWeights >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::FeatureWeight*
Arena::CreateMaybeMessage< ::assist_ranker::FeatureWeight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::assist_ranker::FeatureWeight >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::GenericLogisticRegressionModel_WeightsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::assist_ranker::GenericLogisticRegressionModel_WeightsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::assist_ranker::GenericLogisticRegressionModel_WeightsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::assist_ranker::GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::assist_ranker::GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::GenericLogisticRegressionModel*
Arena::CreateMaybeMessage< ::assist_ranker::GenericLogisticRegressionModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::assist_ranker::GenericLogisticRegressionModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
