// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ranker_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ranker_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ranker_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "nn_classifier.pb.h"
#include "translate_ranker_model.pb.h"
#include "generic_logistic_regression_model.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ranker_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ranker_5fmodel_2eproto {
  static const uint32_t offsets[];
};
namespace assist_ranker {
class RankerModelMetadata;
struct RankerModelMetadataDefaultTypeInternal;
extern RankerModelMetadataDefaultTypeInternal _RankerModelMetadata_default_instance_;
class RankerModelProto;
struct RankerModelProtoDefaultTypeInternal;
extern RankerModelProtoDefaultTypeInternal _RankerModelProto_default_instance_;
}  // namespace assist_ranker
PROTOBUF_NAMESPACE_OPEN
template<> ::assist_ranker::RankerModelMetadata* Arena::CreateMaybeMessage<::assist_ranker::RankerModelMetadata>(Arena*);
template<> ::assist_ranker::RankerModelProto* Arena::CreateMaybeMessage<::assist_ranker::RankerModelProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace assist_ranker {

// ===================================================================

class RankerModelMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:assist_ranker.RankerModelMetadata) */ {
 public:
  inline RankerModelMetadata() : RankerModelMetadata(nullptr) {}
  ~RankerModelMetadata() override;
  explicit PROTOBUF_CONSTEXPR RankerModelMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RankerModelMetadata(const RankerModelMetadata& from);
  RankerModelMetadata(RankerModelMetadata&& from) noexcept
    : RankerModelMetadata() {
    *this = ::std::move(from);
  }

  inline RankerModelMetadata& operator=(const RankerModelMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankerModelMetadata& operator=(RankerModelMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RankerModelMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const RankerModelMetadata* internal_default_instance() {
    return reinterpret_cast<const RankerModelMetadata*>(
               &_RankerModelMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RankerModelMetadata& a, RankerModelMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RankerModelMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RankerModelMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RankerModelMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RankerModelMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RankerModelMetadata& from);
  void MergeFrom(const RankerModelMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RankerModelMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "assist_ranker.RankerModelMetadata";
  }
  protected:
  explicit RankerModelMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLabelFieldNumber = 2,
    kSourceFieldNumber = 3,
    kLastModifiedSecFieldNumber = 4,
    kCacheDurationSecFieldNumber = 5,
    kModelVersionFieldNumber = 6,
    kInputFeaturesNamesAreHexHashesFieldNumber = 7,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string label = 2;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional string source = 3;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional int64 last_modified_sec = 4;
  bool has_last_modified_sec() const;
  private:
  bool _internal_has_last_modified_sec() const;
  public:
  void clear_last_modified_sec();
  int64_t last_modified_sec() const;
  void set_last_modified_sec(int64_t value);
  private:
  int64_t _internal_last_modified_sec() const;
  void _internal_set_last_modified_sec(int64_t value);
  public:

  // optional int64 cache_duration_sec = 5;
  bool has_cache_duration_sec() const;
  private:
  bool _internal_has_cache_duration_sec() const;
  public:
  void clear_cache_duration_sec();
  int64_t cache_duration_sec() const;
  void set_cache_duration_sec(int64_t value);
  private:
  int64_t _internal_cache_duration_sec() const;
  void _internal_set_cache_duration_sec(int64_t value);
  public:

  // optional uint32 model_version = 6;
  bool has_model_version() const;
  private:
  bool _internal_has_model_version() const;
  public:
  void clear_model_version();
  uint32_t model_version() const;
  void set_model_version(uint32_t value);
  private:
  uint32_t _internal_model_version() const;
  void _internal_set_model_version(uint32_t value);
  public:

  // optional bool input_features_names_are_hex_hashes = 7;
  bool has_input_features_names_are_hex_hashes() const;
  private:
  bool _internal_has_input_features_names_are_hex_hashes() const;
  public:
  void clear_input_features_names_are_hex_hashes();
  bool input_features_names_are_hex_hashes() const;
  void set_input_features_names_are_hex_hashes(bool value);
  private:
  bool _internal_input_features_names_are_hex_hashes() const;
  void _internal_set_input_features_names_are_hex_hashes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:assist_ranker.RankerModelMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  int64_t last_modified_sec_;
  int64_t cache_duration_sec_;
  uint32_t model_version_;
  bool input_features_names_are_hex_hashes_;
  friend struct ::TableStruct_ranker_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class RankerModelProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:assist_ranker.RankerModelProto) */ {
 public:
  inline RankerModelProto() : RankerModelProto(nullptr) {}
  ~RankerModelProto() override;
  explicit PROTOBUF_CONSTEXPR RankerModelProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RankerModelProto(const RankerModelProto& from);
  RankerModelProto(RankerModelProto&& from) noexcept
    : RankerModelProto() {
    *this = ::std::move(from);
  }

  inline RankerModelProto& operator=(const RankerModelProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankerModelProto& operator=(RankerModelProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RankerModelProto& default_instance() {
    return *internal_default_instance();
  }
  enum ModelCase {
    kTranslate = 2,
    kLogisticRegression = 3,
    kNnClassifier = 4,
    MODEL_NOT_SET = 0,
  };

  static inline const RankerModelProto* internal_default_instance() {
    return reinterpret_cast<const RankerModelProto*>(
               &_RankerModelProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RankerModelProto& a, RankerModelProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RankerModelProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RankerModelProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RankerModelProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RankerModelProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RankerModelProto& from);
  void MergeFrom(const RankerModelProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RankerModelProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "assist_ranker.RankerModelProto";
  }
  protected:
  explicit RankerModelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kTranslateFieldNumber = 2,
    kLogisticRegressionFieldNumber = 3,
    kNnClassifierFieldNumber = 4,
  };
  // optional .assist_ranker.RankerModelMetadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::assist_ranker::RankerModelMetadata& metadata() const;
  PROTOBUF_NODISCARD ::assist_ranker::RankerModelMetadata* release_metadata();
  ::assist_ranker::RankerModelMetadata* mutable_metadata();
  void set_allocated_metadata(::assist_ranker::RankerModelMetadata* metadata);
  private:
  const ::assist_ranker::RankerModelMetadata& _internal_metadata() const;
  ::assist_ranker::RankerModelMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::assist_ranker::RankerModelMetadata* metadata);
  ::assist_ranker::RankerModelMetadata* unsafe_arena_release_metadata();

  // .assist_ranker.TranslateRankerModel translate = 2;
  bool has_translate() const;
  private:
  bool _internal_has_translate() const;
  public:
  void clear_translate();
  const ::assist_ranker::TranslateRankerModel& translate() const;
  PROTOBUF_NODISCARD ::assist_ranker::TranslateRankerModel* release_translate();
  ::assist_ranker::TranslateRankerModel* mutable_translate();
  void set_allocated_translate(::assist_ranker::TranslateRankerModel* translate);
  private:
  const ::assist_ranker::TranslateRankerModel& _internal_translate() const;
  ::assist_ranker::TranslateRankerModel* _internal_mutable_translate();
  public:
  void unsafe_arena_set_allocated_translate(
      ::assist_ranker::TranslateRankerModel* translate);
  ::assist_ranker::TranslateRankerModel* unsafe_arena_release_translate();

  // .assist_ranker.GenericLogisticRegressionModel logistic_regression = 3;
  bool has_logistic_regression() const;
  private:
  bool _internal_has_logistic_regression() const;
  public:
  void clear_logistic_regression();
  const ::assist_ranker::GenericLogisticRegressionModel& logistic_regression() const;
  PROTOBUF_NODISCARD ::assist_ranker::GenericLogisticRegressionModel* release_logistic_regression();
  ::assist_ranker::GenericLogisticRegressionModel* mutable_logistic_regression();
  void set_allocated_logistic_regression(::assist_ranker::GenericLogisticRegressionModel* logistic_regression);
  private:
  const ::assist_ranker::GenericLogisticRegressionModel& _internal_logistic_regression() const;
  ::assist_ranker::GenericLogisticRegressionModel* _internal_mutable_logistic_regression();
  public:
  void unsafe_arena_set_allocated_logistic_regression(
      ::assist_ranker::GenericLogisticRegressionModel* logistic_regression);
  ::assist_ranker::GenericLogisticRegressionModel* unsafe_arena_release_logistic_regression();

  // .assist_ranker.NNClassifierModel nn_classifier = 4;
  bool has_nn_classifier() const;
  private:
  bool _internal_has_nn_classifier() const;
  public:
  void clear_nn_classifier();
  const ::assist_ranker::NNClassifierModel& nn_classifier() const;
  PROTOBUF_NODISCARD ::assist_ranker::NNClassifierModel* release_nn_classifier();
  ::assist_ranker::NNClassifierModel* mutable_nn_classifier();
  void set_allocated_nn_classifier(::assist_ranker::NNClassifierModel* nn_classifier);
  private:
  const ::assist_ranker::NNClassifierModel& _internal_nn_classifier() const;
  ::assist_ranker::NNClassifierModel* _internal_mutable_nn_classifier();
  public:
  void unsafe_arena_set_allocated_nn_classifier(
      ::assist_ranker::NNClassifierModel* nn_classifier);
  ::assist_ranker::NNClassifierModel* unsafe_arena_release_nn_classifier();

  void clear_model();
  ModelCase model_case() const;
  // @@protoc_insertion_point(class_scope:assist_ranker.RankerModelProto)
 private:
  class _Internal;
  void set_has_translate();
  void set_has_logistic_regression();
  void set_has_nn_classifier();

  inline bool has_model() const;
  inline void clear_has_model();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::assist_ranker::RankerModelMetadata* metadata_;
  union ModelUnion {
    constexpr ModelUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::assist_ranker::TranslateRankerModel* translate_;
    ::assist_ranker::GenericLogisticRegressionModel* logistic_regression_;
    ::assist_ranker::NNClassifierModel* nn_classifier_;
  } model_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_ranker_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RankerModelMetadata

// optional string name = 1;
inline bool RankerModelMetadata::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RankerModelMetadata::has_name() const {
  return _internal_has_name();
}
inline void RankerModelMetadata::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RankerModelMetadata::name() const {
  // @@protoc_insertion_point(field_get:assist_ranker.RankerModelMetadata.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RankerModelMetadata::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:assist_ranker.RankerModelMetadata.name)
}
inline std::string* RankerModelMetadata::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:assist_ranker.RankerModelMetadata.name)
  return _s;
}
inline const std::string& RankerModelMetadata::_internal_name() const {
  return name_.Get();
}
inline void RankerModelMetadata::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* RankerModelMetadata::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* RankerModelMetadata::release_name() {
  // @@protoc_insertion_point(field_release:assist_ranker.RankerModelMetadata.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RankerModelMetadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.RankerModelMetadata.name)
}

// optional string label = 2;
inline bool RankerModelMetadata::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RankerModelMetadata::has_label() const {
  return _internal_has_label();
}
inline void RankerModelMetadata::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RankerModelMetadata::label() const {
  // @@protoc_insertion_point(field_get:assist_ranker.RankerModelMetadata.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RankerModelMetadata::set_label(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:assist_ranker.RankerModelMetadata.label)
}
inline std::string* RankerModelMetadata::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:assist_ranker.RankerModelMetadata.label)
  return _s;
}
inline const std::string& RankerModelMetadata::_internal_label() const {
  return label_.Get();
}
inline void RankerModelMetadata::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(value, GetArenaForAllocation());
}
inline std::string* RankerModelMetadata::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000002u;
  return label_.Mutable(GetArenaForAllocation());
}
inline std::string* RankerModelMetadata::release_label() {
  // @@protoc_insertion_point(field_release:assist_ranker.RankerModelMetadata.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = label_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault()) {
    label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RankerModelMetadata::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault()) {
    label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.RankerModelMetadata.label)
}

// optional string source = 3;
inline bool RankerModelMetadata::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RankerModelMetadata::has_source() const {
  return _internal_has_source();
}
inline void RankerModelMetadata::clear_source() {
  source_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RankerModelMetadata::source() const {
  // @@protoc_insertion_point(field_get:assist_ranker.RankerModelMetadata.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RankerModelMetadata::set_source(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:assist_ranker.RankerModelMetadata.source)
}
inline std::string* RankerModelMetadata::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:assist_ranker.RankerModelMetadata.source)
  return _s;
}
inline const std::string& RankerModelMetadata::_internal_source() const {
  return source_.Get();
}
inline void RankerModelMetadata::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  source_.Set(value, GetArenaForAllocation());
}
inline std::string* RankerModelMetadata::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000004u;
  return source_.Mutable(GetArenaForAllocation());
}
inline std::string* RankerModelMetadata::release_source() {
  // @@protoc_insertion_point(field_release:assist_ranker.RankerModelMetadata.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = source_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_.IsDefault()) {
    source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RankerModelMetadata::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_.IsDefault()) {
    source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.RankerModelMetadata.source)
}

// optional int64 last_modified_sec = 4;
inline bool RankerModelMetadata::_internal_has_last_modified_sec() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RankerModelMetadata::has_last_modified_sec() const {
  return _internal_has_last_modified_sec();
}
inline void RankerModelMetadata::clear_last_modified_sec() {
  last_modified_sec_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t RankerModelMetadata::_internal_last_modified_sec() const {
  return last_modified_sec_;
}
inline int64_t RankerModelMetadata::last_modified_sec() const {
  // @@protoc_insertion_point(field_get:assist_ranker.RankerModelMetadata.last_modified_sec)
  return _internal_last_modified_sec();
}
inline void RankerModelMetadata::_internal_set_last_modified_sec(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  last_modified_sec_ = value;
}
inline void RankerModelMetadata::set_last_modified_sec(int64_t value) {
  _internal_set_last_modified_sec(value);
  // @@protoc_insertion_point(field_set:assist_ranker.RankerModelMetadata.last_modified_sec)
}

// optional int64 cache_duration_sec = 5;
inline bool RankerModelMetadata::_internal_has_cache_duration_sec() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RankerModelMetadata::has_cache_duration_sec() const {
  return _internal_has_cache_duration_sec();
}
inline void RankerModelMetadata::clear_cache_duration_sec() {
  cache_duration_sec_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t RankerModelMetadata::_internal_cache_duration_sec() const {
  return cache_duration_sec_;
}
inline int64_t RankerModelMetadata::cache_duration_sec() const {
  // @@protoc_insertion_point(field_get:assist_ranker.RankerModelMetadata.cache_duration_sec)
  return _internal_cache_duration_sec();
}
inline void RankerModelMetadata::_internal_set_cache_duration_sec(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  cache_duration_sec_ = value;
}
inline void RankerModelMetadata::set_cache_duration_sec(int64_t value) {
  _internal_set_cache_duration_sec(value);
  // @@protoc_insertion_point(field_set:assist_ranker.RankerModelMetadata.cache_duration_sec)
}

// optional uint32 model_version = 6;
inline bool RankerModelMetadata::_internal_has_model_version() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RankerModelMetadata::has_model_version() const {
  return _internal_has_model_version();
}
inline void RankerModelMetadata::clear_model_version() {
  model_version_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t RankerModelMetadata::_internal_model_version() const {
  return model_version_;
}
inline uint32_t RankerModelMetadata::model_version() const {
  // @@protoc_insertion_point(field_get:assist_ranker.RankerModelMetadata.model_version)
  return _internal_model_version();
}
inline void RankerModelMetadata::_internal_set_model_version(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  model_version_ = value;
}
inline void RankerModelMetadata::set_model_version(uint32_t value) {
  _internal_set_model_version(value);
  // @@protoc_insertion_point(field_set:assist_ranker.RankerModelMetadata.model_version)
}

// optional bool input_features_names_are_hex_hashes = 7;
inline bool RankerModelMetadata::_internal_has_input_features_names_are_hex_hashes() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RankerModelMetadata::has_input_features_names_are_hex_hashes() const {
  return _internal_has_input_features_names_are_hex_hashes();
}
inline void RankerModelMetadata::clear_input_features_names_are_hex_hashes() {
  input_features_names_are_hex_hashes_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool RankerModelMetadata::_internal_input_features_names_are_hex_hashes() const {
  return input_features_names_are_hex_hashes_;
}
inline bool RankerModelMetadata::input_features_names_are_hex_hashes() const {
  // @@protoc_insertion_point(field_get:assist_ranker.RankerModelMetadata.input_features_names_are_hex_hashes)
  return _internal_input_features_names_are_hex_hashes();
}
inline void RankerModelMetadata::_internal_set_input_features_names_are_hex_hashes(bool value) {
  _has_bits_[0] |= 0x00000040u;
  input_features_names_are_hex_hashes_ = value;
}
inline void RankerModelMetadata::set_input_features_names_are_hex_hashes(bool value) {
  _internal_set_input_features_names_are_hex_hashes(value);
  // @@protoc_insertion_point(field_set:assist_ranker.RankerModelMetadata.input_features_names_are_hex_hashes)
}

// -------------------------------------------------------------------

// RankerModelProto

// optional .assist_ranker.RankerModelMetadata metadata = 1;
inline bool RankerModelProto::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || metadata_ != nullptr);
  return value;
}
inline bool RankerModelProto::has_metadata() const {
  return _internal_has_metadata();
}
inline void RankerModelProto::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::assist_ranker::RankerModelMetadata& RankerModelProto::_internal_metadata() const {
  const ::assist_ranker::RankerModelMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::assist_ranker::RankerModelMetadata&>(
      ::assist_ranker::_RankerModelMetadata_default_instance_);
}
inline const ::assist_ranker::RankerModelMetadata& RankerModelProto::metadata() const {
  // @@protoc_insertion_point(field_get:assist_ranker.RankerModelProto.metadata)
  return _internal_metadata();
}
inline void RankerModelProto::unsafe_arena_set_allocated_metadata(
    ::assist_ranker::RankerModelMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:assist_ranker.RankerModelProto.metadata)
}
inline ::assist_ranker::RankerModelMetadata* RankerModelProto::release_metadata() {
  _has_bits_[0] &= ~0x00000001u;
  ::assist_ranker::RankerModelMetadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::assist_ranker::RankerModelMetadata* RankerModelProto::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:assist_ranker.RankerModelProto.metadata)
  _has_bits_[0] &= ~0x00000001u;
  ::assist_ranker::RankerModelMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::assist_ranker::RankerModelMetadata* RankerModelProto::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000001u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::assist_ranker::RankerModelMetadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::assist_ranker::RankerModelMetadata* RankerModelProto::mutable_metadata() {
  ::assist_ranker::RankerModelMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:assist_ranker.RankerModelProto.metadata)
  return _msg;
}
inline void RankerModelProto::set_allocated_metadata(::assist_ranker::RankerModelMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.RankerModelProto.metadata)
}

// .assist_ranker.TranslateRankerModel translate = 2;
inline bool RankerModelProto::_internal_has_translate() const {
  return model_case() == kTranslate;
}
inline bool RankerModelProto::has_translate() const {
  return _internal_has_translate();
}
inline void RankerModelProto::set_has_translate() {
  _oneof_case_[0] = kTranslate;
}
inline ::assist_ranker::TranslateRankerModel* RankerModelProto::release_translate() {
  // @@protoc_insertion_point(field_release:assist_ranker.RankerModelProto.translate)
  if (_internal_has_translate()) {
    clear_has_model();
    ::assist_ranker::TranslateRankerModel* temp = model_.translate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    model_.translate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::assist_ranker::TranslateRankerModel& RankerModelProto::_internal_translate() const {
  return _internal_has_translate()
      ? *model_.translate_
      : reinterpret_cast< ::assist_ranker::TranslateRankerModel&>(::assist_ranker::_TranslateRankerModel_default_instance_);
}
inline const ::assist_ranker::TranslateRankerModel& RankerModelProto::translate() const {
  // @@protoc_insertion_point(field_get:assist_ranker.RankerModelProto.translate)
  return _internal_translate();
}
inline ::assist_ranker::TranslateRankerModel* RankerModelProto::unsafe_arena_release_translate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:assist_ranker.RankerModelProto.translate)
  if (_internal_has_translate()) {
    clear_has_model();
    ::assist_ranker::TranslateRankerModel* temp = model_.translate_;
    model_.translate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RankerModelProto::unsafe_arena_set_allocated_translate(::assist_ranker::TranslateRankerModel* translate) {
  clear_model();
  if (translate) {
    set_has_translate();
    model_.translate_ = translate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:assist_ranker.RankerModelProto.translate)
}
inline ::assist_ranker::TranslateRankerModel* RankerModelProto::_internal_mutable_translate() {
  if (!_internal_has_translate()) {
    clear_model();
    set_has_translate();
    model_.translate_ = CreateMaybeMessage< ::assist_ranker::TranslateRankerModel >(GetArenaForAllocation());
  }
  return model_.translate_;
}
inline ::assist_ranker::TranslateRankerModel* RankerModelProto::mutable_translate() {
  ::assist_ranker::TranslateRankerModel* _msg = _internal_mutable_translate();
  // @@protoc_insertion_point(field_mutable:assist_ranker.RankerModelProto.translate)
  return _msg;
}

// .assist_ranker.GenericLogisticRegressionModel logistic_regression = 3;
inline bool RankerModelProto::_internal_has_logistic_regression() const {
  return model_case() == kLogisticRegression;
}
inline bool RankerModelProto::has_logistic_regression() const {
  return _internal_has_logistic_regression();
}
inline void RankerModelProto::set_has_logistic_regression() {
  _oneof_case_[0] = kLogisticRegression;
}
inline ::assist_ranker::GenericLogisticRegressionModel* RankerModelProto::release_logistic_regression() {
  // @@protoc_insertion_point(field_release:assist_ranker.RankerModelProto.logistic_regression)
  if (_internal_has_logistic_regression()) {
    clear_has_model();
    ::assist_ranker::GenericLogisticRegressionModel* temp = model_.logistic_regression_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    model_.logistic_regression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::assist_ranker::GenericLogisticRegressionModel& RankerModelProto::_internal_logistic_regression() const {
  return _internal_has_logistic_regression()
      ? *model_.logistic_regression_
      : reinterpret_cast< ::assist_ranker::GenericLogisticRegressionModel&>(::assist_ranker::_GenericLogisticRegressionModel_default_instance_);
}
inline const ::assist_ranker::GenericLogisticRegressionModel& RankerModelProto::logistic_regression() const {
  // @@protoc_insertion_point(field_get:assist_ranker.RankerModelProto.logistic_regression)
  return _internal_logistic_regression();
}
inline ::assist_ranker::GenericLogisticRegressionModel* RankerModelProto::unsafe_arena_release_logistic_regression() {
  // @@protoc_insertion_point(field_unsafe_arena_release:assist_ranker.RankerModelProto.logistic_regression)
  if (_internal_has_logistic_regression()) {
    clear_has_model();
    ::assist_ranker::GenericLogisticRegressionModel* temp = model_.logistic_regression_;
    model_.logistic_regression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RankerModelProto::unsafe_arena_set_allocated_logistic_regression(::assist_ranker::GenericLogisticRegressionModel* logistic_regression) {
  clear_model();
  if (logistic_regression) {
    set_has_logistic_regression();
    model_.logistic_regression_ = logistic_regression;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:assist_ranker.RankerModelProto.logistic_regression)
}
inline ::assist_ranker::GenericLogisticRegressionModel* RankerModelProto::_internal_mutable_logistic_regression() {
  if (!_internal_has_logistic_regression()) {
    clear_model();
    set_has_logistic_regression();
    model_.logistic_regression_ = CreateMaybeMessage< ::assist_ranker::GenericLogisticRegressionModel >(GetArenaForAllocation());
  }
  return model_.logistic_regression_;
}
inline ::assist_ranker::GenericLogisticRegressionModel* RankerModelProto::mutable_logistic_regression() {
  ::assist_ranker::GenericLogisticRegressionModel* _msg = _internal_mutable_logistic_regression();
  // @@protoc_insertion_point(field_mutable:assist_ranker.RankerModelProto.logistic_regression)
  return _msg;
}

// .assist_ranker.NNClassifierModel nn_classifier = 4;
inline bool RankerModelProto::_internal_has_nn_classifier() const {
  return model_case() == kNnClassifier;
}
inline bool RankerModelProto::has_nn_classifier() const {
  return _internal_has_nn_classifier();
}
inline void RankerModelProto::set_has_nn_classifier() {
  _oneof_case_[0] = kNnClassifier;
}
inline ::assist_ranker::NNClassifierModel* RankerModelProto::release_nn_classifier() {
  // @@protoc_insertion_point(field_release:assist_ranker.RankerModelProto.nn_classifier)
  if (_internal_has_nn_classifier()) {
    clear_has_model();
    ::assist_ranker::NNClassifierModel* temp = model_.nn_classifier_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    model_.nn_classifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::assist_ranker::NNClassifierModel& RankerModelProto::_internal_nn_classifier() const {
  return _internal_has_nn_classifier()
      ? *model_.nn_classifier_
      : reinterpret_cast< ::assist_ranker::NNClassifierModel&>(::assist_ranker::_NNClassifierModel_default_instance_);
}
inline const ::assist_ranker::NNClassifierModel& RankerModelProto::nn_classifier() const {
  // @@protoc_insertion_point(field_get:assist_ranker.RankerModelProto.nn_classifier)
  return _internal_nn_classifier();
}
inline ::assist_ranker::NNClassifierModel* RankerModelProto::unsafe_arena_release_nn_classifier() {
  // @@protoc_insertion_point(field_unsafe_arena_release:assist_ranker.RankerModelProto.nn_classifier)
  if (_internal_has_nn_classifier()) {
    clear_has_model();
    ::assist_ranker::NNClassifierModel* temp = model_.nn_classifier_;
    model_.nn_classifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RankerModelProto::unsafe_arena_set_allocated_nn_classifier(::assist_ranker::NNClassifierModel* nn_classifier) {
  clear_model();
  if (nn_classifier) {
    set_has_nn_classifier();
    model_.nn_classifier_ = nn_classifier;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:assist_ranker.RankerModelProto.nn_classifier)
}
inline ::assist_ranker::NNClassifierModel* RankerModelProto::_internal_mutable_nn_classifier() {
  if (!_internal_has_nn_classifier()) {
    clear_model();
    set_has_nn_classifier();
    model_.nn_classifier_ = CreateMaybeMessage< ::assist_ranker::NNClassifierModel >(GetArenaForAllocation());
  }
  return model_.nn_classifier_;
}
inline ::assist_ranker::NNClassifierModel* RankerModelProto::mutable_nn_classifier() {
  ::assist_ranker::NNClassifierModel* _msg = _internal_mutable_nn_classifier();
  // @@protoc_insertion_point(field_mutable:assist_ranker.RankerModelProto.nn_classifier)
  return _msg;
}

inline bool RankerModelProto::has_model() const {
  return model_case() != MODEL_NOT_SET;
}
inline void RankerModelProto::clear_has_model() {
  _oneof_case_[0] = MODEL_NOT_SET;
}
inline RankerModelProto::ModelCase RankerModelProto::model_case() const {
  return RankerModelProto::ModelCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace assist_ranker

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ranker_5fmodel_2eproto
