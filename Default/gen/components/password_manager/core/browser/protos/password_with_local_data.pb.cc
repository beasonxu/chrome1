// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/password_manager/core/browser/protos/password_with_local_data.proto

#include "components/password_manager/core/browser/protos/password_with_local_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace password_manager {
PROTOBUF_CONSTEXPR PasswordWithLocalData_LocalData::PasswordWithLocalData_LocalData(
    ::_pbi::ConstantInitialized)
  : opaque_metadata_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , previously_associated_sync_account_email_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct PasswordWithLocalData_LocalDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PasswordWithLocalData_LocalDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PasswordWithLocalData_LocalDataDefaultTypeInternal() {}
  union {
    PasswordWithLocalData_LocalData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PasswordWithLocalData_LocalDataDefaultTypeInternal _PasswordWithLocalData_LocalData_default_instance_;
PROTOBUF_CONSTEXPR PasswordWithLocalData::PasswordWithLocalData(
    ::_pbi::ConstantInitialized)
  : password_specifics_data_(nullptr)
  , local_data_(nullptr){}
struct PasswordWithLocalDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PasswordWithLocalDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PasswordWithLocalDataDefaultTypeInternal() {}
  union {
    PasswordWithLocalData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PasswordWithLocalDataDefaultTypeInternal _PasswordWithLocalData_default_instance_;
}  // namespace password_manager
namespace password_manager {

// ===================================================================

class PasswordWithLocalData_LocalData::_Internal {
 public:
  using HasBits = decltype(std::declval<PasswordWithLocalData_LocalData>()._has_bits_);
  static void set_has_opaque_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_previously_associated_sync_account_email(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PasswordWithLocalData_LocalData::PasswordWithLocalData_LocalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:password_manager.PasswordWithLocalData.LocalData)
}
PasswordWithLocalData_LocalData::PasswordWithLocalData_LocalData(const PasswordWithLocalData_LocalData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  opaque_metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    opaque_metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_opaque_metadata()) {
    opaque_metadata_.Set(from._internal_opaque_metadata(), 
      GetArenaForAllocation());
  }
  previously_associated_sync_account_email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    previously_associated_sync_account_email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_previously_associated_sync_account_email()) {
    previously_associated_sync_account_email_.Set(from._internal_previously_associated_sync_account_email(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:password_manager.PasswordWithLocalData.LocalData)
}

inline void PasswordWithLocalData_LocalData::SharedCtor() {
opaque_metadata_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  opaque_metadata_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
previously_associated_sync_account_email_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  previously_associated_sync_account_email_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PasswordWithLocalData_LocalData::~PasswordWithLocalData_LocalData() {
  // @@protoc_insertion_point(destructor:password_manager.PasswordWithLocalData.LocalData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PasswordWithLocalData_LocalData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  opaque_metadata_.Destroy();
  previously_associated_sync_account_email_.Destroy();
}

void PasswordWithLocalData_LocalData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PasswordWithLocalData_LocalData::Clear() {
// @@protoc_insertion_point(message_clear_start:password_manager.PasswordWithLocalData.LocalData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      opaque_metadata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      previously_associated_sync_account_email_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PasswordWithLocalData_LocalData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes opaque_metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_opaque_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string previously_associated_sync_account_email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_previously_associated_sync_account_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PasswordWithLocalData_LocalData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:password_manager.PasswordWithLocalData.LocalData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes opaque_metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_opaque_metadata(), target);
  }

  // optional string previously_associated_sync_account_email = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_previously_associated_sync_account_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:password_manager.PasswordWithLocalData.LocalData)
  return target;
}

size_t PasswordWithLocalData_LocalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:password_manager.PasswordWithLocalData.LocalData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes opaque_metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_opaque_metadata());
    }

    // optional string previously_associated_sync_account_email = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_previously_associated_sync_account_email());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PasswordWithLocalData_LocalData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PasswordWithLocalData_LocalData*>(
      &from));
}

void PasswordWithLocalData_LocalData::MergeFrom(const PasswordWithLocalData_LocalData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:password_manager.PasswordWithLocalData.LocalData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_opaque_metadata(from._internal_opaque_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_previously_associated_sync_account_email(from._internal_previously_associated_sync_account_email());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PasswordWithLocalData_LocalData::CopyFrom(const PasswordWithLocalData_LocalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:password_manager.PasswordWithLocalData.LocalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasswordWithLocalData_LocalData::IsInitialized() const {
  return true;
}

void PasswordWithLocalData_LocalData::InternalSwap(PasswordWithLocalData_LocalData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &opaque_metadata_, lhs_arena,
      &other->opaque_metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &previously_associated_sync_account_email_, lhs_arena,
      &other->previously_associated_sync_account_email_, rhs_arena
  );
}

std::string PasswordWithLocalData_LocalData::GetTypeName() const {
  return "password_manager.PasswordWithLocalData.LocalData";
}


// ===================================================================

class PasswordWithLocalData::_Internal {
 public:
  using HasBits = decltype(std::declval<PasswordWithLocalData>()._has_bits_);
  static const ::sync_pb::PasswordSpecificsData& password_specifics_data(const PasswordWithLocalData* msg);
  static void set_has_password_specifics_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::password_manager::PasswordWithLocalData_LocalData& local_data(const PasswordWithLocalData* msg);
  static void set_has_local_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sync_pb::PasswordSpecificsData&
PasswordWithLocalData::_Internal::password_specifics_data(const PasswordWithLocalData* msg) {
  return *msg->password_specifics_data_;
}
const ::password_manager::PasswordWithLocalData_LocalData&
PasswordWithLocalData::_Internal::local_data(const PasswordWithLocalData* msg) {
  return *msg->local_data_;
}
void PasswordWithLocalData::clear_password_specifics_data() {
  if (password_specifics_data_ != nullptr) password_specifics_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PasswordWithLocalData::PasswordWithLocalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:password_manager.PasswordWithLocalData)
}
PasswordWithLocalData::PasswordWithLocalData(const PasswordWithLocalData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_password_specifics_data()) {
    password_specifics_data_ = new ::sync_pb::PasswordSpecificsData(*from.password_specifics_data_);
  } else {
    password_specifics_data_ = nullptr;
  }
  if (from._internal_has_local_data()) {
    local_data_ = new ::password_manager::PasswordWithLocalData_LocalData(*from.local_data_);
  } else {
    local_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:password_manager.PasswordWithLocalData)
}

inline void PasswordWithLocalData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&password_specifics_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&local_data_) -
    reinterpret_cast<char*>(&password_specifics_data_)) + sizeof(local_data_));
}

PasswordWithLocalData::~PasswordWithLocalData() {
  // @@protoc_insertion_point(destructor:password_manager.PasswordWithLocalData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PasswordWithLocalData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete password_specifics_data_;
  if (this != internal_default_instance()) delete local_data_;
}

void PasswordWithLocalData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PasswordWithLocalData::Clear() {
// @@protoc_insertion_point(message_clear_start:password_manager.PasswordWithLocalData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(password_specifics_data_ != nullptr);
      password_specifics_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(local_data_ != nullptr);
      local_data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PasswordWithLocalData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.PasswordSpecificsData password_specifics_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_password_specifics_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .password_manager.PasswordWithLocalData.LocalData local_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PasswordWithLocalData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:password_manager.PasswordWithLocalData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.PasswordSpecificsData password_specifics_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::password_specifics_data(this),
        _Internal::password_specifics_data(this).GetCachedSize(), target, stream);
  }

  // optional .password_manager.PasswordWithLocalData.LocalData local_data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::local_data(this),
        _Internal::local_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:password_manager.PasswordWithLocalData)
  return target;
}

size_t PasswordWithLocalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:password_manager.PasswordWithLocalData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .sync_pb.PasswordSpecificsData password_specifics_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *password_specifics_data_);
    }

    // optional .password_manager.PasswordWithLocalData.LocalData local_data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *local_data_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PasswordWithLocalData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PasswordWithLocalData*>(
      &from));
}

void PasswordWithLocalData::MergeFrom(const PasswordWithLocalData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:password_manager.PasswordWithLocalData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_password_specifics_data()->::sync_pb::PasswordSpecificsData::MergeFrom(from._internal_password_specifics_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_local_data()->::password_manager::PasswordWithLocalData_LocalData::MergeFrom(from._internal_local_data());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PasswordWithLocalData::CopyFrom(const PasswordWithLocalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:password_manager.PasswordWithLocalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasswordWithLocalData::IsInitialized() const {
  return true;
}

void PasswordWithLocalData::InternalSwap(PasswordWithLocalData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PasswordWithLocalData, local_data_)
      + sizeof(PasswordWithLocalData::local_data_)
      - PROTOBUF_FIELD_OFFSET(PasswordWithLocalData, password_specifics_data_)>(
          reinterpret_cast<char*>(&password_specifics_data_),
          reinterpret_cast<char*>(&other->password_specifics_data_));
}

std::string PasswordWithLocalData::GetTypeName() const {
  return "password_manager.PasswordWithLocalData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace password_manager
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::password_manager::PasswordWithLocalData_LocalData*
Arena::CreateMaybeMessage< ::password_manager::PasswordWithLocalData_LocalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::password_manager::PasswordWithLocalData_LocalData >(arena);
}
template<> PROTOBUF_NOINLINE ::password_manager::PasswordWithLocalData*
Arena::CreateMaybeMessage< ::password_manager::PasswordWithLocalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::password_manager::PasswordWithLocalData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
