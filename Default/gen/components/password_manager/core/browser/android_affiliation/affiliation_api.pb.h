// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: affiliation_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_affiliation_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_affiliation_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_affiliation_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_affiliation_5fapi_2eproto {
  static const uint32_t offsets[];
};
namespace affiliation_pb {
class Affiliation;
struct AffiliationDefaultTypeInternal;
extern AffiliationDefaultTypeInternal _Affiliation_default_instance_;
class BrandingInfo;
struct BrandingInfoDefaultTypeInternal;
extern BrandingInfoDefaultTypeInternal _BrandingInfo_default_instance_;
class ChangePasswordInfo;
struct ChangePasswordInfoDefaultTypeInternal;
extern ChangePasswordInfoDefaultTypeInternal _ChangePasswordInfo_default_instance_;
class Facet;
struct FacetDefaultTypeInternal;
extern FacetDefaultTypeInternal _Facet_default_instance_;
class FacetGroup;
struct FacetGroupDefaultTypeInternal;
extern FacetGroupDefaultTypeInternal _FacetGroup_default_instance_;
class GroupBrandingInfo;
struct GroupBrandingInfoDefaultTypeInternal;
extern GroupBrandingInfoDefaultTypeInternal _GroupBrandingInfo_default_instance_;
class LookupAffiliationByHashPrefixRequest;
struct LookupAffiliationByHashPrefixRequestDefaultTypeInternal;
extern LookupAffiliationByHashPrefixRequestDefaultTypeInternal _LookupAffiliationByHashPrefixRequest_default_instance_;
class LookupAffiliationByHashPrefixResponse;
struct LookupAffiliationByHashPrefixResponseDefaultTypeInternal;
extern LookupAffiliationByHashPrefixResponseDefaultTypeInternal _LookupAffiliationByHashPrefixResponse_default_instance_;
class LookupAffiliationMask;
struct LookupAffiliationMaskDefaultTypeInternal;
extern LookupAffiliationMaskDefaultTypeInternal _LookupAffiliationMask_default_instance_;
class LookupAffiliationRequest;
struct LookupAffiliationRequestDefaultTypeInternal;
extern LookupAffiliationRequestDefaultTypeInternal _LookupAffiliationRequest_default_instance_;
class LookupAffiliationResponse;
struct LookupAffiliationResponseDefaultTypeInternal;
extern LookupAffiliationResponseDefaultTypeInternal _LookupAffiliationResponse_default_instance_;
}  // namespace affiliation_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::affiliation_pb::Affiliation* Arena::CreateMaybeMessage<::affiliation_pb::Affiliation>(Arena*);
template<> ::affiliation_pb::BrandingInfo* Arena::CreateMaybeMessage<::affiliation_pb::BrandingInfo>(Arena*);
template<> ::affiliation_pb::ChangePasswordInfo* Arena::CreateMaybeMessage<::affiliation_pb::ChangePasswordInfo>(Arena*);
template<> ::affiliation_pb::Facet* Arena::CreateMaybeMessage<::affiliation_pb::Facet>(Arena*);
template<> ::affiliation_pb::FacetGroup* Arena::CreateMaybeMessage<::affiliation_pb::FacetGroup>(Arena*);
template<> ::affiliation_pb::GroupBrandingInfo* Arena::CreateMaybeMessage<::affiliation_pb::GroupBrandingInfo>(Arena*);
template<> ::affiliation_pb::LookupAffiliationByHashPrefixRequest* Arena::CreateMaybeMessage<::affiliation_pb::LookupAffiliationByHashPrefixRequest>(Arena*);
template<> ::affiliation_pb::LookupAffiliationByHashPrefixResponse* Arena::CreateMaybeMessage<::affiliation_pb::LookupAffiliationByHashPrefixResponse>(Arena*);
template<> ::affiliation_pb::LookupAffiliationMask* Arena::CreateMaybeMessage<::affiliation_pb::LookupAffiliationMask>(Arena*);
template<> ::affiliation_pb::LookupAffiliationRequest* Arena::CreateMaybeMessage<::affiliation_pb::LookupAffiliationRequest>(Arena*);
template<> ::affiliation_pb::LookupAffiliationResponse* Arena::CreateMaybeMessage<::affiliation_pb::LookupAffiliationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace affiliation_pb {

enum BrandingInfo_ElideInfo : int {
  BrandingInfo_ElideInfo_UNKNOWN_ELIDE = 0,
  BrandingInfo_ElideInfo_ELIDE_FROM_FRONT = 1,
  BrandingInfo_ElideInfo_ELIDE_FROM_BACK = 2
};
bool BrandingInfo_ElideInfo_IsValid(int value);
constexpr BrandingInfo_ElideInfo BrandingInfo_ElideInfo_ElideInfo_MIN = BrandingInfo_ElideInfo_UNKNOWN_ELIDE;
constexpr BrandingInfo_ElideInfo BrandingInfo_ElideInfo_ElideInfo_MAX = BrandingInfo_ElideInfo_ELIDE_FROM_BACK;
constexpr int BrandingInfo_ElideInfo_ElideInfo_ARRAYSIZE = BrandingInfo_ElideInfo_ElideInfo_MAX + 1;

const std::string& BrandingInfo_ElideInfo_Name(BrandingInfo_ElideInfo value);
template<typename T>
inline const std::string& BrandingInfo_ElideInfo_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BrandingInfo_ElideInfo>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BrandingInfo_ElideInfo_Name.");
  return BrandingInfo_ElideInfo_Name(static_cast<BrandingInfo_ElideInfo>(enum_t_value));
}
bool BrandingInfo_ElideInfo_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BrandingInfo_ElideInfo* value);
// ===================================================================

class Affiliation final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:affiliation_pb.Affiliation) */ {
 public:
  inline Affiliation() : Affiliation(nullptr) {}
  ~Affiliation() override;
  explicit PROTOBUF_CONSTEXPR Affiliation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Affiliation(const Affiliation& from);
  Affiliation(Affiliation&& from) noexcept
    : Affiliation() {
    *this = ::std::move(from);
  }

  inline Affiliation& operator=(const Affiliation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Affiliation& operator=(Affiliation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Affiliation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Affiliation* internal_default_instance() {
    return reinterpret_cast<const Affiliation*>(
               &_Affiliation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Affiliation& a, Affiliation& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Affiliation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Affiliation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Affiliation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Affiliation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Affiliation& from);
  void MergeFrom(const Affiliation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Affiliation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "affiliation_pb.Affiliation";
  }
  protected:
  explicit Affiliation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFacetFieldNumber = 1,
  };
  // repeated .affiliation_pb.Facet facet = 1;
  int facet_size() const;
  private:
  int _internal_facet_size() const;
  public:
  void clear_facet();
  ::affiliation_pb::Facet* mutable_facet(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Facet >*
      mutable_facet();
  private:
  const ::affiliation_pb::Facet& _internal_facet(int index) const;
  ::affiliation_pb::Facet* _internal_add_facet();
  public:
  const ::affiliation_pb::Facet& facet(int index) const;
  ::affiliation_pb::Facet* add_facet();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Facet >&
      facet() const;

  // @@protoc_insertion_point(class_scope:affiliation_pb.Affiliation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Facet > facet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_affiliation_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Facet final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:affiliation_pb.Facet) */ {
 public:
  inline Facet() : Facet(nullptr) {}
  ~Facet() override;
  explicit PROTOBUF_CONSTEXPR Facet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Facet(const Facet& from);
  Facet(Facet&& from) noexcept
    : Facet() {
    *this = ::std::move(from);
  }

  inline Facet& operator=(const Facet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Facet& operator=(Facet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Facet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Facet* internal_default_instance() {
    return reinterpret_cast<const Facet*>(
               &_Facet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Facet& a, Facet& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Facet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Facet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Facet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Facet>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Facet& from);
  void MergeFrom(const Facet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Facet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "affiliation_pb.Facet";
  }
  protected:
  explicit Facet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMainDomainFieldNumber = 3,
    kBrandingInfoFieldNumber = 2,
    kChangePasswordInfoFieldNumber = 4,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string main_domain = 3;
  bool has_main_domain() const;
  private:
  bool _internal_has_main_domain() const;
  public:
  void clear_main_domain();
  const std::string& main_domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_main_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_main_domain();
  PROTOBUF_NODISCARD std::string* release_main_domain();
  void set_allocated_main_domain(std::string* main_domain);
  private:
  const std::string& _internal_main_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_main_domain(const std::string& value);
  std::string* _internal_mutable_main_domain();
  public:

  // optional .affiliation_pb.BrandingInfo branding_info = 2;
  bool has_branding_info() const;
  private:
  bool _internal_has_branding_info() const;
  public:
  void clear_branding_info();
  const ::affiliation_pb::BrandingInfo& branding_info() const;
  PROTOBUF_NODISCARD ::affiliation_pb::BrandingInfo* release_branding_info();
  ::affiliation_pb::BrandingInfo* mutable_branding_info();
  void set_allocated_branding_info(::affiliation_pb::BrandingInfo* branding_info);
  private:
  const ::affiliation_pb::BrandingInfo& _internal_branding_info() const;
  ::affiliation_pb::BrandingInfo* _internal_mutable_branding_info();
  public:
  void unsafe_arena_set_allocated_branding_info(
      ::affiliation_pb::BrandingInfo* branding_info);
  ::affiliation_pb::BrandingInfo* unsafe_arena_release_branding_info();

  // optional .affiliation_pb.ChangePasswordInfo change_password_info = 4;
  bool has_change_password_info() const;
  private:
  bool _internal_has_change_password_info() const;
  public:
  void clear_change_password_info();
  const ::affiliation_pb::ChangePasswordInfo& change_password_info() const;
  PROTOBUF_NODISCARD ::affiliation_pb::ChangePasswordInfo* release_change_password_info();
  ::affiliation_pb::ChangePasswordInfo* mutable_change_password_info();
  void set_allocated_change_password_info(::affiliation_pb::ChangePasswordInfo* change_password_info);
  private:
  const ::affiliation_pb::ChangePasswordInfo& _internal_change_password_info() const;
  ::affiliation_pb::ChangePasswordInfo* _internal_mutable_change_password_info();
  public:
  void unsafe_arena_set_allocated_change_password_info(
      ::affiliation_pb::ChangePasswordInfo* change_password_info);
  ::affiliation_pb::ChangePasswordInfo* unsafe_arena_release_change_password_info();

  // @@protoc_insertion_point(class_scope:affiliation_pb.Facet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_domain_;
  ::affiliation_pb::BrandingInfo* branding_info_;
  ::affiliation_pb::ChangePasswordInfo* change_password_info_;
  friend struct ::TableStruct_affiliation_5fapi_2eproto;
};
// -------------------------------------------------------------------

class FacetGroup final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:affiliation_pb.FacetGroup) */ {
 public:
  inline FacetGroup() : FacetGroup(nullptr) {}
  ~FacetGroup() override;
  explicit PROTOBUF_CONSTEXPR FacetGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FacetGroup(const FacetGroup& from);
  FacetGroup(FacetGroup&& from) noexcept
    : FacetGroup() {
    *this = ::std::move(from);
  }

  inline FacetGroup& operator=(const FacetGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline FacetGroup& operator=(FacetGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FacetGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const FacetGroup* internal_default_instance() {
    return reinterpret_cast<const FacetGroup*>(
               &_FacetGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FacetGroup& a, FacetGroup& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FacetGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FacetGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FacetGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FacetGroup>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FacetGroup& from);
  void MergeFrom(const FacetGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FacetGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "affiliation_pb.FacetGroup";
  }
  protected:
  explicit FacetGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFacetFieldNumber = 1,
    kGroupBrandingInfoFieldNumber = 2,
  };
  // repeated .affiliation_pb.Facet facet = 1;
  int facet_size() const;
  private:
  int _internal_facet_size() const;
  public:
  void clear_facet();
  ::affiliation_pb::Facet* mutable_facet(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Facet >*
      mutable_facet();
  private:
  const ::affiliation_pb::Facet& _internal_facet(int index) const;
  ::affiliation_pb::Facet* _internal_add_facet();
  public:
  const ::affiliation_pb::Facet& facet(int index) const;
  ::affiliation_pb::Facet* add_facet();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Facet >&
      facet() const;

  // optional .affiliation_pb.GroupBrandingInfo group_branding_info = 2;
  bool has_group_branding_info() const;
  private:
  bool _internal_has_group_branding_info() const;
  public:
  void clear_group_branding_info();
  const ::affiliation_pb::GroupBrandingInfo& group_branding_info() const;
  PROTOBUF_NODISCARD ::affiliation_pb::GroupBrandingInfo* release_group_branding_info();
  ::affiliation_pb::GroupBrandingInfo* mutable_group_branding_info();
  void set_allocated_group_branding_info(::affiliation_pb::GroupBrandingInfo* group_branding_info);
  private:
  const ::affiliation_pb::GroupBrandingInfo& _internal_group_branding_info() const;
  ::affiliation_pb::GroupBrandingInfo* _internal_mutable_group_branding_info();
  public:
  void unsafe_arena_set_allocated_group_branding_info(
      ::affiliation_pb::GroupBrandingInfo* group_branding_info);
  ::affiliation_pb::GroupBrandingInfo* unsafe_arena_release_group_branding_info();

  // @@protoc_insertion_point(class_scope:affiliation_pb.FacetGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Facet > facet_;
  ::affiliation_pb::GroupBrandingInfo* group_branding_info_;
  friend struct ::TableStruct_affiliation_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GroupBrandingInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:affiliation_pb.GroupBrandingInfo) */ {
 public:
  inline GroupBrandingInfo() : GroupBrandingInfo(nullptr) {}
  ~GroupBrandingInfo() override;
  explicit PROTOBUF_CONSTEXPR GroupBrandingInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupBrandingInfo(const GroupBrandingInfo& from);
  GroupBrandingInfo(GroupBrandingInfo&& from) noexcept
    : GroupBrandingInfo() {
    *this = ::std::move(from);
  }

  inline GroupBrandingInfo& operator=(const GroupBrandingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupBrandingInfo& operator=(GroupBrandingInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupBrandingInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupBrandingInfo* internal_default_instance() {
    return reinterpret_cast<const GroupBrandingInfo*>(
               &_GroupBrandingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GroupBrandingInfo& a, GroupBrandingInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(GroupBrandingInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupBrandingInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupBrandingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupBrandingInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupBrandingInfo& from);
  void MergeFrom(const GroupBrandingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupBrandingInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "affiliation_pb.GroupBrandingInfo";
  }
  protected:
  explicit GroupBrandingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIconUrlFieldNumber = 2,
    kIconWidthFieldNumber = 3,
    kIconHeightFieldNumber = 4,
    kElideInfoFieldNumber = 5,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string icon_url = 2;
  bool has_icon_url() const;
  private:
  bool _internal_has_icon_url() const;
  public:
  void clear_icon_url();
  const std::string& icon_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon_url();
  PROTOBUF_NODISCARD std::string* release_icon_url();
  void set_allocated_icon_url(std::string* icon_url);
  private:
  const std::string& _internal_icon_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon_url(const std::string& value);
  std::string* _internal_mutable_icon_url();
  public:

  // optional int32 icon_width = 3;
  bool has_icon_width() const;
  private:
  bool _internal_has_icon_width() const;
  public:
  void clear_icon_width();
  int32_t icon_width() const;
  void set_icon_width(int32_t value);
  private:
  int32_t _internal_icon_width() const;
  void _internal_set_icon_width(int32_t value);
  public:

  // optional int32 icon_height = 4;
  bool has_icon_height() const;
  private:
  bool _internal_has_icon_height() const;
  public:
  void clear_icon_height();
  int32_t icon_height() const;
  void set_icon_height(int32_t value);
  private:
  int32_t _internal_icon_height() const;
  void _internal_set_icon_height(int32_t value);
  public:

  // optional .affiliation_pb.BrandingInfo.ElideInfo elide_info = 5;
  bool has_elide_info() const;
  private:
  bool _internal_has_elide_info() const;
  public:
  void clear_elide_info();
  ::affiliation_pb::BrandingInfo_ElideInfo elide_info() const;
  void set_elide_info(::affiliation_pb::BrandingInfo_ElideInfo value);
  private:
  ::affiliation_pb::BrandingInfo_ElideInfo _internal_elide_info() const;
  void _internal_set_elide_info(::affiliation_pb::BrandingInfo_ElideInfo value);
  public:

  // @@protoc_insertion_point(class_scope:affiliation_pb.GroupBrandingInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_url_;
  int32_t icon_width_;
  int32_t icon_height_;
  int elide_info_;
  friend struct ::TableStruct_affiliation_5fapi_2eproto;
};
// -------------------------------------------------------------------

class BrandingInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:affiliation_pb.BrandingInfo) */ {
 public:
  inline BrandingInfo() : BrandingInfo(nullptr) {}
  ~BrandingInfo() override;
  explicit PROTOBUF_CONSTEXPR BrandingInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrandingInfo(const BrandingInfo& from);
  BrandingInfo(BrandingInfo&& from) noexcept
    : BrandingInfo() {
    *this = ::std::move(from);
  }

  inline BrandingInfo& operator=(const BrandingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrandingInfo& operator=(BrandingInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BrandingInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrandingInfo* internal_default_instance() {
    return reinterpret_cast<const BrandingInfo*>(
               &_BrandingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BrandingInfo& a, BrandingInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BrandingInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrandingInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrandingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrandingInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BrandingInfo& from);
  void MergeFrom(const BrandingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BrandingInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "affiliation_pb.BrandingInfo";
  }
  protected:
  explicit BrandingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BrandingInfo_ElideInfo ElideInfo;
  static constexpr ElideInfo UNKNOWN_ELIDE =
    BrandingInfo_ElideInfo_UNKNOWN_ELIDE;
  static constexpr ElideInfo ELIDE_FROM_FRONT =
    BrandingInfo_ElideInfo_ELIDE_FROM_FRONT;
  static constexpr ElideInfo ELIDE_FROM_BACK =
    BrandingInfo_ElideInfo_ELIDE_FROM_BACK;
  static inline bool ElideInfo_IsValid(int value) {
    return BrandingInfo_ElideInfo_IsValid(value);
  }
  static constexpr ElideInfo ElideInfo_MIN =
    BrandingInfo_ElideInfo_ElideInfo_MIN;
  static constexpr ElideInfo ElideInfo_MAX =
    BrandingInfo_ElideInfo_ElideInfo_MAX;
  static constexpr int ElideInfo_ARRAYSIZE =
    BrandingInfo_ElideInfo_ElideInfo_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ElideInfo_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ElideInfo>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ElideInfo_Name.");
    return BrandingInfo_ElideInfo_Name(enum_t_value);
  }
  static inline bool ElideInfo_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ElideInfo* value) {
    return BrandingInfo_ElideInfo_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIconUrlFieldNumber = 2,
    kIconWidthFieldNumber = 4,
    kIconHeightFieldNumber = 5,
    kElideInfoFieldNumber = 6,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string icon_url = 2;
  bool has_icon_url() const;
  private:
  bool _internal_has_icon_url() const;
  public:
  void clear_icon_url();
  const std::string& icon_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon_url();
  PROTOBUF_NODISCARD std::string* release_icon_url();
  void set_allocated_icon_url(std::string* icon_url);
  private:
  const std::string& _internal_icon_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon_url(const std::string& value);
  std::string* _internal_mutable_icon_url();
  public:

  // optional int32 icon_width = 4;
  bool has_icon_width() const;
  private:
  bool _internal_has_icon_width() const;
  public:
  void clear_icon_width();
  int32_t icon_width() const;
  void set_icon_width(int32_t value);
  private:
  int32_t _internal_icon_width() const;
  void _internal_set_icon_width(int32_t value);
  public:

  // optional int32 icon_height = 5;
  bool has_icon_height() const;
  private:
  bool _internal_has_icon_height() const;
  public:
  void clear_icon_height();
  int32_t icon_height() const;
  void set_icon_height(int32_t value);
  private:
  int32_t _internal_icon_height() const;
  void _internal_set_icon_height(int32_t value);
  public:

  // optional .affiliation_pb.BrandingInfo.ElideInfo elide_info = 6;
  bool has_elide_info() const;
  private:
  bool _internal_has_elide_info() const;
  public:
  void clear_elide_info();
  ::affiliation_pb::BrandingInfo_ElideInfo elide_info() const;
  void set_elide_info(::affiliation_pb::BrandingInfo_ElideInfo value);
  private:
  ::affiliation_pb::BrandingInfo_ElideInfo _internal_elide_info() const;
  void _internal_set_elide_info(::affiliation_pb::BrandingInfo_ElideInfo value);
  public:

  // @@protoc_insertion_point(class_scope:affiliation_pb.BrandingInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_url_;
  int32_t icon_width_;
  int32_t icon_height_;
  int elide_info_;
  friend struct ::TableStruct_affiliation_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ChangePasswordInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:affiliation_pb.ChangePasswordInfo) */ {
 public:
  inline ChangePasswordInfo() : ChangePasswordInfo(nullptr) {}
  ~ChangePasswordInfo() override;
  explicit PROTOBUF_CONSTEXPR ChangePasswordInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangePasswordInfo(const ChangePasswordInfo& from);
  ChangePasswordInfo(ChangePasswordInfo&& from) noexcept
    : ChangePasswordInfo() {
    *this = ::std::move(from);
  }

  inline ChangePasswordInfo& operator=(const ChangePasswordInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangePasswordInfo& operator=(ChangePasswordInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChangePasswordInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangePasswordInfo* internal_default_instance() {
    return reinterpret_cast<const ChangePasswordInfo*>(
               &_ChangePasswordInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChangePasswordInfo& a, ChangePasswordInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChangePasswordInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangePasswordInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangePasswordInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangePasswordInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChangePasswordInfo& from);
  void MergeFrom(const ChangePasswordInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChangePasswordInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "affiliation_pb.ChangePasswordInfo";
  }
  protected:
  explicit ChangePasswordInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangePasswordUrlFieldNumber = 1,
  };
  // optional string change_password_url = 1;
  bool has_change_password_url() const;
  private:
  bool _internal_has_change_password_url() const;
  public:
  void clear_change_password_url();
  const std::string& change_password_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_change_password_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_change_password_url();
  PROTOBUF_NODISCARD std::string* release_change_password_url();
  void set_allocated_change_password_url(std::string* change_password_url);
  private:
  const std::string& _internal_change_password_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_change_password_url(const std::string& value);
  std::string* _internal_mutable_change_password_url();
  public:

  // @@protoc_insertion_point(class_scope:affiliation_pb.ChangePasswordInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr change_password_url_;
  friend struct ::TableStruct_affiliation_5fapi_2eproto;
};
// -------------------------------------------------------------------

class LookupAffiliationMask final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:affiliation_pb.LookupAffiliationMask) */ {
 public:
  inline LookupAffiliationMask() : LookupAffiliationMask(nullptr) {}
  ~LookupAffiliationMask() override;
  explicit PROTOBUF_CONSTEXPR LookupAffiliationMask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LookupAffiliationMask(const LookupAffiliationMask& from);
  LookupAffiliationMask(LookupAffiliationMask&& from) noexcept
    : LookupAffiliationMask() {
    *this = ::std::move(from);
  }

  inline LookupAffiliationMask& operator=(const LookupAffiliationMask& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupAffiliationMask& operator=(LookupAffiliationMask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LookupAffiliationMask& default_instance() {
    return *internal_default_instance();
  }
  static inline const LookupAffiliationMask* internal_default_instance() {
    return reinterpret_cast<const LookupAffiliationMask*>(
               &_LookupAffiliationMask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LookupAffiliationMask& a, LookupAffiliationMask& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LookupAffiliationMask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupAffiliationMask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LookupAffiliationMask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LookupAffiliationMask>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LookupAffiliationMask& from);
  void MergeFrom(const LookupAffiliationMask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupAffiliationMask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "affiliation_pb.LookupAffiliationMask";
  }
  protected:
  explicit LookupAffiliationMask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocaleFieldNumber = 2,
    kBrandingInfoFieldNumber = 1,
    kInsecureAffiliationFieldNumber = 3,
    kGroupingInfoFieldNumber = 6,
    kGroupBrandingInfoFieldNumber = 5,
    kPreferredIconSizeFieldNumber = 4,
    kChangePasswordInfoFieldNumber = 7,
  };
  // optional string locale = 2;
  bool has_locale() const;
  private:
  bool _internal_has_locale() const;
  public:
  void clear_locale();
  const std::string& locale() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_locale(ArgT0&& arg0, ArgT... args);
  std::string* mutable_locale();
  PROTOBUF_NODISCARD std::string* release_locale();
  void set_allocated_locale(std::string* locale);
  private:
  const std::string& _internal_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locale(const std::string& value);
  std::string* _internal_mutable_locale();
  public:

  // optional bool branding_info = 1;
  bool has_branding_info() const;
  private:
  bool _internal_has_branding_info() const;
  public:
  void clear_branding_info();
  bool branding_info() const;
  void set_branding_info(bool value);
  private:
  bool _internal_branding_info() const;
  void _internal_set_branding_info(bool value);
  public:

  // optional bool insecure_affiliation = 3;
  bool has_insecure_affiliation() const;
  private:
  bool _internal_has_insecure_affiliation() const;
  public:
  void clear_insecure_affiliation();
  bool insecure_affiliation() const;
  void set_insecure_affiliation(bool value);
  private:
  bool _internal_insecure_affiliation() const;
  void _internal_set_insecure_affiliation(bool value);
  public:

  // optional bool grouping_info = 6;
  bool has_grouping_info() const;
  private:
  bool _internal_has_grouping_info() const;
  public:
  void clear_grouping_info();
  bool grouping_info() const;
  void set_grouping_info(bool value);
  private:
  bool _internal_grouping_info() const;
  void _internal_set_grouping_info(bool value);
  public:

  // optional bool group_branding_info = 5;
  bool has_group_branding_info() const;
  private:
  bool _internal_has_group_branding_info() const;
  public:
  void clear_group_branding_info();
  bool group_branding_info() const;
  void set_group_branding_info(bool value);
  private:
  bool _internal_group_branding_info() const;
  void _internal_set_group_branding_info(bool value);
  public:

  // optional int32 preferred_icon_size = 4;
  bool has_preferred_icon_size() const;
  private:
  bool _internal_has_preferred_icon_size() const;
  public:
  void clear_preferred_icon_size();
  int32_t preferred_icon_size() const;
  void set_preferred_icon_size(int32_t value);
  private:
  int32_t _internal_preferred_icon_size() const;
  void _internal_set_preferred_icon_size(int32_t value);
  public:

  // optional bool change_password_info = 7;
  bool has_change_password_info() const;
  private:
  bool _internal_has_change_password_info() const;
  public:
  void clear_change_password_info();
  bool change_password_info() const;
  void set_change_password_info(bool value);
  private:
  bool _internal_change_password_info() const;
  void _internal_set_change_password_info(bool value);
  public:

  // @@protoc_insertion_point(class_scope:affiliation_pb.LookupAffiliationMask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
  bool branding_info_;
  bool insecure_affiliation_;
  bool grouping_info_;
  bool group_branding_info_;
  int32_t preferred_icon_size_;
  bool change_password_info_;
  friend struct ::TableStruct_affiliation_5fapi_2eproto;
};
// -------------------------------------------------------------------

class LookupAffiliationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:affiliation_pb.LookupAffiliationRequest) */ {
 public:
  inline LookupAffiliationRequest() : LookupAffiliationRequest(nullptr) {}
  ~LookupAffiliationRequest() override;
  explicit PROTOBUF_CONSTEXPR LookupAffiliationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LookupAffiliationRequest(const LookupAffiliationRequest& from);
  LookupAffiliationRequest(LookupAffiliationRequest&& from) noexcept
    : LookupAffiliationRequest() {
    *this = ::std::move(from);
  }

  inline LookupAffiliationRequest& operator=(const LookupAffiliationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupAffiliationRequest& operator=(LookupAffiliationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LookupAffiliationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LookupAffiliationRequest* internal_default_instance() {
    return reinterpret_cast<const LookupAffiliationRequest*>(
               &_LookupAffiliationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LookupAffiliationRequest& a, LookupAffiliationRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LookupAffiliationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupAffiliationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LookupAffiliationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LookupAffiliationRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LookupAffiliationRequest& from);
  void MergeFrom(const LookupAffiliationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupAffiliationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "affiliation_pb.LookupAffiliationRequest";
  }
  protected:
  explicit LookupAffiliationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFacetFieldNumber = 1,
    kMaskFieldNumber = 2,
  };
  // repeated string facet = 1;
  int facet_size() const;
  private:
  int _internal_facet_size() const;
  public:
  void clear_facet();
  const std::string& facet(int index) const;
  std::string* mutable_facet(int index);
  void set_facet(int index, const std::string& value);
  void set_facet(int index, std::string&& value);
  void set_facet(int index, const char* value);
  void set_facet(int index, const char* value, size_t size);
  std::string* add_facet();
  void add_facet(const std::string& value);
  void add_facet(std::string&& value);
  void add_facet(const char* value);
  void add_facet(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& facet() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_facet();
  private:
  const std::string& _internal_facet(int index) const;
  std::string* _internal_add_facet();
  public:

  // optional .affiliation_pb.LookupAffiliationMask mask = 2;
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  const ::affiliation_pb::LookupAffiliationMask& mask() const;
  PROTOBUF_NODISCARD ::affiliation_pb::LookupAffiliationMask* release_mask();
  ::affiliation_pb::LookupAffiliationMask* mutable_mask();
  void set_allocated_mask(::affiliation_pb::LookupAffiliationMask* mask);
  private:
  const ::affiliation_pb::LookupAffiliationMask& _internal_mask() const;
  ::affiliation_pb::LookupAffiliationMask* _internal_mutable_mask();
  public:
  void unsafe_arena_set_allocated_mask(
      ::affiliation_pb::LookupAffiliationMask* mask);
  ::affiliation_pb::LookupAffiliationMask* unsafe_arena_release_mask();

  // @@protoc_insertion_point(class_scope:affiliation_pb.LookupAffiliationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> facet_;
  ::affiliation_pb::LookupAffiliationMask* mask_;
  friend struct ::TableStruct_affiliation_5fapi_2eproto;
};
// -------------------------------------------------------------------

class LookupAffiliationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:affiliation_pb.LookupAffiliationResponse) */ {
 public:
  inline LookupAffiliationResponse() : LookupAffiliationResponse(nullptr) {}
  ~LookupAffiliationResponse() override;
  explicit PROTOBUF_CONSTEXPR LookupAffiliationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LookupAffiliationResponse(const LookupAffiliationResponse& from);
  LookupAffiliationResponse(LookupAffiliationResponse&& from) noexcept
    : LookupAffiliationResponse() {
    *this = ::std::move(from);
  }

  inline LookupAffiliationResponse& operator=(const LookupAffiliationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupAffiliationResponse& operator=(LookupAffiliationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LookupAffiliationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LookupAffiliationResponse* internal_default_instance() {
    return reinterpret_cast<const LookupAffiliationResponse*>(
               &_LookupAffiliationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LookupAffiliationResponse& a, LookupAffiliationResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LookupAffiliationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupAffiliationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LookupAffiliationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LookupAffiliationResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LookupAffiliationResponse& from);
  void MergeFrom(const LookupAffiliationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupAffiliationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "affiliation_pb.LookupAffiliationResponse";
  }
  protected:
  explicit LookupAffiliationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAffiliationFieldNumber = 1,
    kGroupFieldNumber = 2,
  };
  // repeated .affiliation_pb.Affiliation affiliation = 1;
  int affiliation_size() const;
  private:
  int _internal_affiliation_size() const;
  public:
  void clear_affiliation();
  ::affiliation_pb::Affiliation* mutable_affiliation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Affiliation >*
      mutable_affiliation();
  private:
  const ::affiliation_pb::Affiliation& _internal_affiliation(int index) const;
  ::affiliation_pb::Affiliation* _internal_add_affiliation();
  public:
  const ::affiliation_pb::Affiliation& affiliation(int index) const;
  ::affiliation_pb::Affiliation* add_affiliation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Affiliation >&
      affiliation() const;

  // repeated .affiliation_pb.FacetGroup group = 2;
  int group_size() const;
  private:
  int _internal_group_size() const;
  public:
  void clear_group();
  ::affiliation_pb::FacetGroup* mutable_group(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::FacetGroup >*
      mutable_group();
  private:
  const ::affiliation_pb::FacetGroup& _internal_group(int index) const;
  ::affiliation_pb::FacetGroup* _internal_add_group();
  public:
  const ::affiliation_pb::FacetGroup& group(int index) const;
  ::affiliation_pb::FacetGroup* add_group();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::FacetGroup >&
      group() const;

  // @@protoc_insertion_point(class_scope:affiliation_pb.LookupAffiliationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Affiliation > affiliation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::FacetGroup > group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_affiliation_5fapi_2eproto;
};
// -------------------------------------------------------------------

class LookupAffiliationByHashPrefixRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:affiliation_pb.LookupAffiliationByHashPrefixRequest) */ {
 public:
  inline LookupAffiliationByHashPrefixRequest() : LookupAffiliationByHashPrefixRequest(nullptr) {}
  ~LookupAffiliationByHashPrefixRequest() override;
  explicit PROTOBUF_CONSTEXPR LookupAffiliationByHashPrefixRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LookupAffiliationByHashPrefixRequest(const LookupAffiliationByHashPrefixRequest& from);
  LookupAffiliationByHashPrefixRequest(LookupAffiliationByHashPrefixRequest&& from) noexcept
    : LookupAffiliationByHashPrefixRequest() {
    *this = ::std::move(from);
  }

  inline LookupAffiliationByHashPrefixRequest& operator=(const LookupAffiliationByHashPrefixRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupAffiliationByHashPrefixRequest& operator=(LookupAffiliationByHashPrefixRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LookupAffiliationByHashPrefixRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LookupAffiliationByHashPrefixRequest* internal_default_instance() {
    return reinterpret_cast<const LookupAffiliationByHashPrefixRequest*>(
               &_LookupAffiliationByHashPrefixRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LookupAffiliationByHashPrefixRequest& a, LookupAffiliationByHashPrefixRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LookupAffiliationByHashPrefixRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupAffiliationByHashPrefixRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LookupAffiliationByHashPrefixRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LookupAffiliationByHashPrefixRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LookupAffiliationByHashPrefixRequest& from);
  void MergeFrom(const LookupAffiliationByHashPrefixRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupAffiliationByHashPrefixRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "affiliation_pb.LookupAffiliationByHashPrefixRequest";
  }
  protected:
  explicit LookupAffiliationByHashPrefixRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashPrefixesFieldNumber = 3,
    kMaskFieldNumber = 1,
    kHashPrefixLengthFieldNumber = 2,
  };
  // repeated uint64 hash_prefixes = 3;
  int hash_prefixes_size() const;
  private:
  int _internal_hash_prefixes_size() const;
  public:
  void clear_hash_prefixes();
  private:
  uint64_t _internal_hash_prefixes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_hash_prefixes() const;
  void _internal_add_hash_prefixes(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_hash_prefixes();
  public:
  uint64_t hash_prefixes(int index) const;
  void set_hash_prefixes(int index, uint64_t value);
  void add_hash_prefixes(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      hash_prefixes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_hash_prefixes();

  // optional .affiliation_pb.LookupAffiliationMask mask = 1;
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  const ::affiliation_pb::LookupAffiliationMask& mask() const;
  PROTOBUF_NODISCARD ::affiliation_pb::LookupAffiliationMask* release_mask();
  ::affiliation_pb::LookupAffiliationMask* mutable_mask();
  void set_allocated_mask(::affiliation_pb::LookupAffiliationMask* mask);
  private:
  const ::affiliation_pb::LookupAffiliationMask& _internal_mask() const;
  ::affiliation_pb::LookupAffiliationMask* _internal_mutable_mask();
  public:
  void unsafe_arena_set_allocated_mask(
      ::affiliation_pb::LookupAffiliationMask* mask);
  ::affiliation_pb::LookupAffiliationMask* unsafe_arena_release_mask();

  // optional uint32 hash_prefix_length = 2;
  bool has_hash_prefix_length() const;
  private:
  bool _internal_has_hash_prefix_length() const;
  public:
  void clear_hash_prefix_length();
  uint32_t hash_prefix_length() const;
  void set_hash_prefix_length(uint32_t value);
  private:
  uint32_t _internal_hash_prefix_length() const;
  void _internal_set_hash_prefix_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:affiliation_pb.LookupAffiliationByHashPrefixRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > hash_prefixes_;
  ::affiliation_pb::LookupAffiliationMask* mask_;
  uint32_t hash_prefix_length_;
  friend struct ::TableStruct_affiliation_5fapi_2eproto;
};
// -------------------------------------------------------------------

class LookupAffiliationByHashPrefixResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:affiliation_pb.LookupAffiliationByHashPrefixResponse) */ {
 public:
  inline LookupAffiliationByHashPrefixResponse() : LookupAffiliationByHashPrefixResponse(nullptr) {}
  ~LookupAffiliationByHashPrefixResponse() override;
  explicit PROTOBUF_CONSTEXPR LookupAffiliationByHashPrefixResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LookupAffiliationByHashPrefixResponse(const LookupAffiliationByHashPrefixResponse& from);
  LookupAffiliationByHashPrefixResponse(LookupAffiliationByHashPrefixResponse&& from) noexcept
    : LookupAffiliationByHashPrefixResponse() {
    *this = ::std::move(from);
  }

  inline LookupAffiliationByHashPrefixResponse& operator=(const LookupAffiliationByHashPrefixResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupAffiliationByHashPrefixResponse& operator=(LookupAffiliationByHashPrefixResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LookupAffiliationByHashPrefixResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LookupAffiliationByHashPrefixResponse* internal_default_instance() {
    return reinterpret_cast<const LookupAffiliationByHashPrefixResponse*>(
               &_LookupAffiliationByHashPrefixResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LookupAffiliationByHashPrefixResponse& a, LookupAffiliationByHashPrefixResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LookupAffiliationByHashPrefixResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupAffiliationByHashPrefixResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LookupAffiliationByHashPrefixResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LookupAffiliationByHashPrefixResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LookupAffiliationByHashPrefixResponse& from);
  void MergeFrom(const LookupAffiliationByHashPrefixResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupAffiliationByHashPrefixResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "affiliation_pb.LookupAffiliationByHashPrefixResponse";
  }
  protected:
  explicit LookupAffiliationByHashPrefixResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAffiliationsFieldNumber = 1,
    kGroupsFieldNumber = 2,
  };
  // repeated .affiliation_pb.Affiliation affiliations = 1;
  int affiliations_size() const;
  private:
  int _internal_affiliations_size() const;
  public:
  void clear_affiliations();
  ::affiliation_pb::Affiliation* mutable_affiliations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Affiliation >*
      mutable_affiliations();
  private:
  const ::affiliation_pb::Affiliation& _internal_affiliations(int index) const;
  ::affiliation_pb::Affiliation* _internal_add_affiliations();
  public:
  const ::affiliation_pb::Affiliation& affiliations(int index) const;
  ::affiliation_pb::Affiliation* add_affiliations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Affiliation >&
      affiliations() const;

  // repeated .affiliation_pb.FacetGroup groups = 2;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::affiliation_pb::FacetGroup* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::FacetGroup >*
      mutable_groups();
  private:
  const ::affiliation_pb::FacetGroup& _internal_groups(int index) const;
  ::affiliation_pb::FacetGroup* _internal_add_groups();
  public:
  const ::affiliation_pb::FacetGroup& groups(int index) const;
  ::affiliation_pb::FacetGroup* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::FacetGroup >&
      groups() const;

  // @@protoc_insertion_point(class_scope:affiliation_pb.LookupAffiliationByHashPrefixResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Affiliation > affiliations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::FacetGroup > groups_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_affiliation_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Affiliation

// repeated .affiliation_pb.Facet facet = 1;
inline int Affiliation::_internal_facet_size() const {
  return facet_.size();
}
inline int Affiliation::facet_size() const {
  return _internal_facet_size();
}
inline void Affiliation::clear_facet() {
  facet_.Clear();
}
inline ::affiliation_pb::Facet* Affiliation::mutable_facet(int index) {
  // @@protoc_insertion_point(field_mutable:affiliation_pb.Affiliation.facet)
  return facet_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Facet >*
Affiliation::mutable_facet() {
  // @@protoc_insertion_point(field_mutable_list:affiliation_pb.Affiliation.facet)
  return &facet_;
}
inline const ::affiliation_pb::Facet& Affiliation::_internal_facet(int index) const {
  return facet_.Get(index);
}
inline const ::affiliation_pb::Facet& Affiliation::facet(int index) const {
  // @@protoc_insertion_point(field_get:affiliation_pb.Affiliation.facet)
  return _internal_facet(index);
}
inline ::affiliation_pb::Facet* Affiliation::_internal_add_facet() {
  return facet_.Add();
}
inline ::affiliation_pb::Facet* Affiliation::add_facet() {
  ::affiliation_pb::Facet* _add = _internal_add_facet();
  // @@protoc_insertion_point(field_add:affiliation_pb.Affiliation.facet)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Facet >&
Affiliation::facet() const {
  // @@protoc_insertion_point(field_list:affiliation_pb.Affiliation.facet)
  return facet_;
}

// -------------------------------------------------------------------

// Facet

// optional string id = 1;
inline bool Facet::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Facet::has_id() const {
  return _internal_has_id();
}
inline void Facet::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Facet::id() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.Facet.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Facet::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:affiliation_pb.Facet.id)
}
inline std::string* Facet::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:affiliation_pb.Facet.id)
  return _s;
}
inline const std::string& Facet::_internal_id() const {
  return id_.Get();
}
inline void Facet::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* Facet::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* Facet::release_id() {
  // @@protoc_insertion_point(field_release:affiliation_pb.Facet.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Facet::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.Facet.id)
}

// optional .affiliation_pb.BrandingInfo branding_info = 2;
inline bool Facet::_internal_has_branding_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || branding_info_ != nullptr);
  return value;
}
inline bool Facet::has_branding_info() const {
  return _internal_has_branding_info();
}
inline void Facet::clear_branding_info() {
  if (branding_info_ != nullptr) branding_info_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::affiliation_pb::BrandingInfo& Facet::_internal_branding_info() const {
  const ::affiliation_pb::BrandingInfo* p = branding_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::affiliation_pb::BrandingInfo&>(
      ::affiliation_pb::_BrandingInfo_default_instance_);
}
inline const ::affiliation_pb::BrandingInfo& Facet::branding_info() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.Facet.branding_info)
  return _internal_branding_info();
}
inline void Facet::unsafe_arena_set_allocated_branding_info(
    ::affiliation_pb::BrandingInfo* branding_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(branding_info_);
  }
  branding_info_ = branding_info;
  if (branding_info) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:affiliation_pb.Facet.branding_info)
}
inline ::affiliation_pb::BrandingInfo* Facet::release_branding_info() {
  _has_bits_[0] &= ~0x00000004u;
  ::affiliation_pb::BrandingInfo* temp = branding_info_;
  branding_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::affiliation_pb::BrandingInfo* Facet::unsafe_arena_release_branding_info() {
  // @@protoc_insertion_point(field_release:affiliation_pb.Facet.branding_info)
  _has_bits_[0] &= ~0x00000004u;
  ::affiliation_pb::BrandingInfo* temp = branding_info_;
  branding_info_ = nullptr;
  return temp;
}
inline ::affiliation_pb::BrandingInfo* Facet::_internal_mutable_branding_info() {
  _has_bits_[0] |= 0x00000004u;
  if (branding_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::affiliation_pb::BrandingInfo>(GetArenaForAllocation());
    branding_info_ = p;
  }
  return branding_info_;
}
inline ::affiliation_pb::BrandingInfo* Facet::mutable_branding_info() {
  ::affiliation_pb::BrandingInfo* _msg = _internal_mutable_branding_info();
  // @@protoc_insertion_point(field_mutable:affiliation_pb.Facet.branding_info)
  return _msg;
}
inline void Facet::set_allocated_branding_info(::affiliation_pb::BrandingInfo* branding_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete branding_info_;
  }
  if (branding_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(branding_info);
    if (message_arena != submessage_arena) {
      branding_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, branding_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  branding_info_ = branding_info;
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.Facet.branding_info)
}

// optional string main_domain = 3;
inline bool Facet::_internal_has_main_domain() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Facet::has_main_domain() const {
  return _internal_has_main_domain();
}
inline void Facet::clear_main_domain() {
  main_domain_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Facet::main_domain() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.Facet.main_domain)
  return _internal_main_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Facet::set_main_domain(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 main_domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:affiliation_pb.Facet.main_domain)
}
inline std::string* Facet::mutable_main_domain() {
  std::string* _s = _internal_mutable_main_domain();
  // @@protoc_insertion_point(field_mutable:affiliation_pb.Facet.main_domain)
  return _s;
}
inline const std::string& Facet::_internal_main_domain() const {
  return main_domain_.Get();
}
inline void Facet::_internal_set_main_domain(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  main_domain_.Set(value, GetArenaForAllocation());
}
inline std::string* Facet::_internal_mutable_main_domain() {
  _has_bits_[0] |= 0x00000002u;
  return main_domain_.Mutable(GetArenaForAllocation());
}
inline std::string* Facet::release_main_domain() {
  // @@protoc_insertion_point(field_release:affiliation_pb.Facet.main_domain)
  if (!_internal_has_main_domain()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = main_domain_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (main_domain_.IsDefault()) {
    main_domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Facet::set_allocated_main_domain(std::string* main_domain) {
  if (main_domain != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  main_domain_.SetAllocated(main_domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (main_domain_.IsDefault()) {
    main_domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.Facet.main_domain)
}

// optional .affiliation_pb.ChangePasswordInfo change_password_info = 4;
inline bool Facet::_internal_has_change_password_info() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || change_password_info_ != nullptr);
  return value;
}
inline bool Facet::has_change_password_info() const {
  return _internal_has_change_password_info();
}
inline void Facet::clear_change_password_info() {
  if (change_password_info_ != nullptr) change_password_info_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::affiliation_pb::ChangePasswordInfo& Facet::_internal_change_password_info() const {
  const ::affiliation_pb::ChangePasswordInfo* p = change_password_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::affiliation_pb::ChangePasswordInfo&>(
      ::affiliation_pb::_ChangePasswordInfo_default_instance_);
}
inline const ::affiliation_pb::ChangePasswordInfo& Facet::change_password_info() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.Facet.change_password_info)
  return _internal_change_password_info();
}
inline void Facet::unsafe_arena_set_allocated_change_password_info(
    ::affiliation_pb::ChangePasswordInfo* change_password_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(change_password_info_);
  }
  change_password_info_ = change_password_info;
  if (change_password_info) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:affiliation_pb.Facet.change_password_info)
}
inline ::affiliation_pb::ChangePasswordInfo* Facet::release_change_password_info() {
  _has_bits_[0] &= ~0x00000008u;
  ::affiliation_pb::ChangePasswordInfo* temp = change_password_info_;
  change_password_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::affiliation_pb::ChangePasswordInfo* Facet::unsafe_arena_release_change_password_info() {
  // @@protoc_insertion_point(field_release:affiliation_pb.Facet.change_password_info)
  _has_bits_[0] &= ~0x00000008u;
  ::affiliation_pb::ChangePasswordInfo* temp = change_password_info_;
  change_password_info_ = nullptr;
  return temp;
}
inline ::affiliation_pb::ChangePasswordInfo* Facet::_internal_mutable_change_password_info() {
  _has_bits_[0] |= 0x00000008u;
  if (change_password_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::affiliation_pb::ChangePasswordInfo>(GetArenaForAllocation());
    change_password_info_ = p;
  }
  return change_password_info_;
}
inline ::affiliation_pb::ChangePasswordInfo* Facet::mutable_change_password_info() {
  ::affiliation_pb::ChangePasswordInfo* _msg = _internal_mutable_change_password_info();
  // @@protoc_insertion_point(field_mutable:affiliation_pb.Facet.change_password_info)
  return _msg;
}
inline void Facet::set_allocated_change_password_info(::affiliation_pb::ChangePasswordInfo* change_password_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete change_password_info_;
  }
  if (change_password_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(change_password_info);
    if (message_arena != submessage_arena) {
      change_password_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_password_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  change_password_info_ = change_password_info;
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.Facet.change_password_info)
}

// -------------------------------------------------------------------

// FacetGroup

// repeated .affiliation_pb.Facet facet = 1;
inline int FacetGroup::_internal_facet_size() const {
  return facet_.size();
}
inline int FacetGroup::facet_size() const {
  return _internal_facet_size();
}
inline void FacetGroup::clear_facet() {
  facet_.Clear();
}
inline ::affiliation_pb::Facet* FacetGroup::mutable_facet(int index) {
  // @@protoc_insertion_point(field_mutable:affiliation_pb.FacetGroup.facet)
  return facet_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Facet >*
FacetGroup::mutable_facet() {
  // @@protoc_insertion_point(field_mutable_list:affiliation_pb.FacetGroup.facet)
  return &facet_;
}
inline const ::affiliation_pb::Facet& FacetGroup::_internal_facet(int index) const {
  return facet_.Get(index);
}
inline const ::affiliation_pb::Facet& FacetGroup::facet(int index) const {
  // @@protoc_insertion_point(field_get:affiliation_pb.FacetGroup.facet)
  return _internal_facet(index);
}
inline ::affiliation_pb::Facet* FacetGroup::_internal_add_facet() {
  return facet_.Add();
}
inline ::affiliation_pb::Facet* FacetGroup::add_facet() {
  ::affiliation_pb::Facet* _add = _internal_add_facet();
  // @@protoc_insertion_point(field_add:affiliation_pb.FacetGroup.facet)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Facet >&
FacetGroup::facet() const {
  // @@protoc_insertion_point(field_list:affiliation_pb.FacetGroup.facet)
  return facet_;
}

// optional .affiliation_pb.GroupBrandingInfo group_branding_info = 2;
inline bool FacetGroup::_internal_has_group_branding_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || group_branding_info_ != nullptr);
  return value;
}
inline bool FacetGroup::has_group_branding_info() const {
  return _internal_has_group_branding_info();
}
inline void FacetGroup::clear_group_branding_info() {
  if (group_branding_info_ != nullptr) group_branding_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::affiliation_pb::GroupBrandingInfo& FacetGroup::_internal_group_branding_info() const {
  const ::affiliation_pb::GroupBrandingInfo* p = group_branding_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::affiliation_pb::GroupBrandingInfo&>(
      ::affiliation_pb::_GroupBrandingInfo_default_instance_);
}
inline const ::affiliation_pb::GroupBrandingInfo& FacetGroup::group_branding_info() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.FacetGroup.group_branding_info)
  return _internal_group_branding_info();
}
inline void FacetGroup::unsafe_arena_set_allocated_group_branding_info(
    ::affiliation_pb::GroupBrandingInfo* group_branding_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_branding_info_);
  }
  group_branding_info_ = group_branding_info;
  if (group_branding_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:affiliation_pb.FacetGroup.group_branding_info)
}
inline ::affiliation_pb::GroupBrandingInfo* FacetGroup::release_group_branding_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::affiliation_pb::GroupBrandingInfo* temp = group_branding_info_;
  group_branding_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::affiliation_pb::GroupBrandingInfo* FacetGroup::unsafe_arena_release_group_branding_info() {
  // @@protoc_insertion_point(field_release:affiliation_pb.FacetGroup.group_branding_info)
  _has_bits_[0] &= ~0x00000001u;
  ::affiliation_pb::GroupBrandingInfo* temp = group_branding_info_;
  group_branding_info_ = nullptr;
  return temp;
}
inline ::affiliation_pb::GroupBrandingInfo* FacetGroup::_internal_mutable_group_branding_info() {
  _has_bits_[0] |= 0x00000001u;
  if (group_branding_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::affiliation_pb::GroupBrandingInfo>(GetArenaForAllocation());
    group_branding_info_ = p;
  }
  return group_branding_info_;
}
inline ::affiliation_pb::GroupBrandingInfo* FacetGroup::mutable_group_branding_info() {
  ::affiliation_pb::GroupBrandingInfo* _msg = _internal_mutable_group_branding_info();
  // @@protoc_insertion_point(field_mutable:affiliation_pb.FacetGroup.group_branding_info)
  return _msg;
}
inline void FacetGroup::set_allocated_group_branding_info(::affiliation_pb::GroupBrandingInfo* group_branding_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete group_branding_info_;
  }
  if (group_branding_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(group_branding_info);
    if (message_arena != submessage_arena) {
      group_branding_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_branding_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  group_branding_info_ = group_branding_info;
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.FacetGroup.group_branding_info)
}

// -------------------------------------------------------------------

// GroupBrandingInfo

// optional string name = 1;
inline bool GroupBrandingInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupBrandingInfo::has_name() const {
  return _internal_has_name();
}
inline void GroupBrandingInfo::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupBrandingInfo::name() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.GroupBrandingInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupBrandingInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:affiliation_pb.GroupBrandingInfo.name)
}
inline std::string* GroupBrandingInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:affiliation_pb.GroupBrandingInfo.name)
  return _s;
}
inline const std::string& GroupBrandingInfo::_internal_name() const {
  return name_.Get();
}
inline void GroupBrandingInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupBrandingInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupBrandingInfo::release_name() {
  // @@protoc_insertion_point(field_release:affiliation_pb.GroupBrandingInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupBrandingInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.GroupBrandingInfo.name)
}

// optional .affiliation_pb.BrandingInfo.ElideInfo elide_info = 5;
inline bool GroupBrandingInfo::_internal_has_elide_info() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GroupBrandingInfo::has_elide_info() const {
  return _internal_has_elide_info();
}
inline void GroupBrandingInfo::clear_elide_info() {
  elide_info_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::affiliation_pb::BrandingInfo_ElideInfo GroupBrandingInfo::_internal_elide_info() const {
  return static_cast< ::affiliation_pb::BrandingInfo_ElideInfo >(elide_info_);
}
inline ::affiliation_pb::BrandingInfo_ElideInfo GroupBrandingInfo::elide_info() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.GroupBrandingInfo.elide_info)
  return _internal_elide_info();
}
inline void GroupBrandingInfo::_internal_set_elide_info(::affiliation_pb::BrandingInfo_ElideInfo value) {
  assert(::affiliation_pb::BrandingInfo_ElideInfo_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  elide_info_ = value;
}
inline void GroupBrandingInfo::set_elide_info(::affiliation_pb::BrandingInfo_ElideInfo value) {
  _internal_set_elide_info(value);
  // @@protoc_insertion_point(field_set:affiliation_pb.GroupBrandingInfo.elide_info)
}

// optional string icon_url = 2;
inline bool GroupBrandingInfo::_internal_has_icon_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupBrandingInfo::has_icon_url() const {
  return _internal_has_icon_url();
}
inline void GroupBrandingInfo::clear_icon_url() {
  icon_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GroupBrandingInfo::icon_url() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.GroupBrandingInfo.icon_url)
  return _internal_icon_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupBrandingInfo::set_icon_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 icon_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:affiliation_pb.GroupBrandingInfo.icon_url)
}
inline std::string* GroupBrandingInfo::mutable_icon_url() {
  std::string* _s = _internal_mutable_icon_url();
  // @@protoc_insertion_point(field_mutable:affiliation_pb.GroupBrandingInfo.icon_url)
  return _s;
}
inline const std::string& GroupBrandingInfo::_internal_icon_url() const {
  return icon_url_.Get();
}
inline void GroupBrandingInfo::_internal_set_icon_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  icon_url_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupBrandingInfo::_internal_mutable_icon_url() {
  _has_bits_[0] |= 0x00000002u;
  return icon_url_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupBrandingInfo::release_icon_url() {
  // @@protoc_insertion_point(field_release:affiliation_pb.GroupBrandingInfo.icon_url)
  if (!_internal_has_icon_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = icon_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_url_.IsDefault()) {
    icon_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupBrandingInfo::set_allocated_icon_url(std::string* icon_url) {
  if (icon_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  icon_url_.SetAllocated(icon_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_url_.IsDefault()) {
    icon_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.GroupBrandingInfo.icon_url)
}

// optional int32 icon_width = 3;
inline bool GroupBrandingInfo::_internal_has_icon_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupBrandingInfo::has_icon_width() const {
  return _internal_has_icon_width();
}
inline void GroupBrandingInfo::clear_icon_width() {
  icon_width_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t GroupBrandingInfo::_internal_icon_width() const {
  return icon_width_;
}
inline int32_t GroupBrandingInfo::icon_width() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.GroupBrandingInfo.icon_width)
  return _internal_icon_width();
}
inline void GroupBrandingInfo::_internal_set_icon_width(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  icon_width_ = value;
}
inline void GroupBrandingInfo::set_icon_width(int32_t value) {
  _internal_set_icon_width(value);
  // @@protoc_insertion_point(field_set:affiliation_pb.GroupBrandingInfo.icon_width)
}

// optional int32 icon_height = 4;
inline bool GroupBrandingInfo::_internal_has_icon_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupBrandingInfo::has_icon_height() const {
  return _internal_has_icon_height();
}
inline void GroupBrandingInfo::clear_icon_height() {
  icon_height_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t GroupBrandingInfo::_internal_icon_height() const {
  return icon_height_;
}
inline int32_t GroupBrandingInfo::icon_height() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.GroupBrandingInfo.icon_height)
  return _internal_icon_height();
}
inline void GroupBrandingInfo::_internal_set_icon_height(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  icon_height_ = value;
}
inline void GroupBrandingInfo::set_icon_height(int32_t value) {
  _internal_set_icon_height(value);
  // @@protoc_insertion_point(field_set:affiliation_pb.GroupBrandingInfo.icon_height)
}

// -------------------------------------------------------------------

// BrandingInfo

// optional string name = 1;
inline bool BrandingInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BrandingInfo::has_name() const {
  return _internal_has_name();
}
inline void BrandingInfo::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BrandingInfo::name() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.BrandingInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrandingInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:affiliation_pb.BrandingInfo.name)
}
inline std::string* BrandingInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:affiliation_pb.BrandingInfo.name)
  return _s;
}
inline const std::string& BrandingInfo::_internal_name() const {
  return name_.Get();
}
inline void BrandingInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* BrandingInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* BrandingInfo::release_name() {
  // @@protoc_insertion_point(field_release:affiliation_pb.BrandingInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BrandingInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.BrandingInfo.name)
}

// optional .affiliation_pb.BrandingInfo.ElideInfo elide_info = 6;
inline bool BrandingInfo::_internal_has_elide_info() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BrandingInfo::has_elide_info() const {
  return _internal_has_elide_info();
}
inline void BrandingInfo::clear_elide_info() {
  elide_info_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::affiliation_pb::BrandingInfo_ElideInfo BrandingInfo::_internal_elide_info() const {
  return static_cast< ::affiliation_pb::BrandingInfo_ElideInfo >(elide_info_);
}
inline ::affiliation_pb::BrandingInfo_ElideInfo BrandingInfo::elide_info() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.BrandingInfo.elide_info)
  return _internal_elide_info();
}
inline void BrandingInfo::_internal_set_elide_info(::affiliation_pb::BrandingInfo_ElideInfo value) {
  assert(::affiliation_pb::BrandingInfo_ElideInfo_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  elide_info_ = value;
}
inline void BrandingInfo::set_elide_info(::affiliation_pb::BrandingInfo_ElideInfo value) {
  _internal_set_elide_info(value);
  // @@protoc_insertion_point(field_set:affiliation_pb.BrandingInfo.elide_info)
}

// optional string icon_url = 2;
inline bool BrandingInfo::_internal_has_icon_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BrandingInfo::has_icon_url() const {
  return _internal_has_icon_url();
}
inline void BrandingInfo::clear_icon_url() {
  icon_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BrandingInfo::icon_url() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.BrandingInfo.icon_url)
  return _internal_icon_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrandingInfo::set_icon_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 icon_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:affiliation_pb.BrandingInfo.icon_url)
}
inline std::string* BrandingInfo::mutable_icon_url() {
  std::string* _s = _internal_mutable_icon_url();
  // @@protoc_insertion_point(field_mutable:affiliation_pb.BrandingInfo.icon_url)
  return _s;
}
inline const std::string& BrandingInfo::_internal_icon_url() const {
  return icon_url_.Get();
}
inline void BrandingInfo::_internal_set_icon_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  icon_url_.Set(value, GetArenaForAllocation());
}
inline std::string* BrandingInfo::_internal_mutable_icon_url() {
  _has_bits_[0] |= 0x00000002u;
  return icon_url_.Mutable(GetArenaForAllocation());
}
inline std::string* BrandingInfo::release_icon_url() {
  // @@protoc_insertion_point(field_release:affiliation_pb.BrandingInfo.icon_url)
  if (!_internal_has_icon_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = icon_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_url_.IsDefault()) {
    icon_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BrandingInfo::set_allocated_icon_url(std::string* icon_url) {
  if (icon_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  icon_url_.SetAllocated(icon_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_url_.IsDefault()) {
    icon_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.BrandingInfo.icon_url)
}

// optional int32 icon_width = 4;
inline bool BrandingInfo::_internal_has_icon_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BrandingInfo::has_icon_width() const {
  return _internal_has_icon_width();
}
inline void BrandingInfo::clear_icon_width() {
  icon_width_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t BrandingInfo::_internal_icon_width() const {
  return icon_width_;
}
inline int32_t BrandingInfo::icon_width() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.BrandingInfo.icon_width)
  return _internal_icon_width();
}
inline void BrandingInfo::_internal_set_icon_width(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  icon_width_ = value;
}
inline void BrandingInfo::set_icon_width(int32_t value) {
  _internal_set_icon_width(value);
  // @@protoc_insertion_point(field_set:affiliation_pb.BrandingInfo.icon_width)
}

// optional int32 icon_height = 5;
inline bool BrandingInfo::_internal_has_icon_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BrandingInfo::has_icon_height() const {
  return _internal_has_icon_height();
}
inline void BrandingInfo::clear_icon_height() {
  icon_height_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t BrandingInfo::_internal_icon_height() const {
  return icon_height_;
}
inline int32_t BrandingInfo::icon_height() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.BrandingInfo.icon_height)
  return _internal_icon_height();
}
inline void BrandingInfo::_internal_set_icon_height(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  icon_height_ = value;
}
inline void BrandingInfo::set_icon_height(int32_t value) {
  _internal_set_icon_height(value);
  // @@protoc_insertion_point(field_set:affiliation_pb.BrandingInfo.icon_height)
}

// -------------------------------------------------------------------

// ChangePasswordInfo

// optional string change_password_url = 1;
inline bool ChangePasswordInfo::_internal_has_change_password_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChangePasswordInfo::has_change_password_url() const {
  return _internal_has_change_password_url();
}
inline void ChangePasswordInfo::clear_change_password_url() {
  change_password_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChangePasswordInfo::change_password_url() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.ChangePasswordInfo.change_password_url)
  return _internal_change_password_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangePasswordInfo::set_change_password_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 change_password_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:affiliation_pb.ChangePasswordInfo.change_password_url)
}
inline std::string* ChangePasswordInfo::mutable_change_password_url() {
  std::string* _s = _internal_mutable_change_password_url();
  // @@protoc_insertion_point(field_mutable:affiliation_pb.ChangePasswordInfo.change_password_url)
  return _s;
}
inline const std::string& ChangePasswordInfo::_internal_change_password_url() const {
  return change_password_url_.Get();
}
inline void ChangePasswordInfo::_internal_set_change_password_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  change_password_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ChangePasswordInfo::_internal_mutable_change_password_url() {
  _has_bits_[0] |= 0x00000001u;
  return change_password_url_.Mutable(GetArenaForAllocation());
}
inline std::string* ChangePasswordInfo::release_change_password_url() {
  // @@protoc_insertion_point(field_release:affiliation_pb.ChangePasswordInfo.change_password_url)
  if (!_internal_has_change_password_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = change_password_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (change_password_url_.IsDefault()) {
    change_password_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChangePasswordInfo::set_allocated_change_password_url(std::string* change_password_url) {
  if (change_password_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  change_password_url_.SetAllocated(change_password_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (change_password_url_.IsDefault()) {
    change_password_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.ChangePasswordInfo.change_password_url)
}

// -------------------------------------------------------------------

// LookupAffiliationMask

// optional bool branding_info = 1;
inline bool LookupAffiliationMask::_internal_has_branding_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LookupAffiliationMask::has_branding_info() const {
  return _internal_has_branding_info();
}
inline void LookupAffiliationMask::clear_branding_info() {
  branding_info_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LookupAffiliationMask::_internal_branding_info() const {
  return branding_info_;
}
inline bool LookupAffiliationMask::branding_info() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationMask.branding_info)
  return _internal_branding_info();
}
inline void LookupAffiliationMask::_internal_set_branding_info(bool value) {
  _has_bits_[0] |= 0x00000002u;
  branding_info_ = value;
}
inline void LookupAffiliationMask::set_branding_info(bool value) {
  _internal_set_branding_info(value);
  // @@protoc_insertion_point(field_set:affiliation_pb.LookupAffiliationMask.branding_info)
}

// optional int32 preferred_icon_size = 4;
inline bool LookupAffiliationMask::_internal_has_preferred_icon_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LookupAffiliationMask::has_preferred_icon_size() const {
  return _internal_has_preferred_icon_size();
}
inline void LookupAffiliationMask::clear_preferred_icon_size() {
  preferred_icon_size_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t LookupAffiliationMask::_internal_preferred_icon_size() const {
  return preferred_icon_size_;
}
inline int32_t LookupAffiliationMask::preferred_icon_size() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationMask.preferred_icon_size)
  return _internal_preferred_icon_size();
}
inline void LookupAffiliationMask::_internal_set_preferred_icon_size(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  preferred_icon_size_ = value;
}
inline void LookupAffiliationMask::set_preferred_icon_size(int32_t value) {
  _internal_set_preferred_icon_size(value);
  // @@protoc_insertion_point(field_set:affiliation_pb.LookupAffiliationMask.preferred_icon_size)
}

// optional string locale = 2;
inline bool LookupAffiliationMask::_internal_has_locale() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LookupAffiliationMask::has_locale() const {
  return _internal_has_locale();
}
inline void LookupAffiliationMask::clear_locale() {
  locale_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LookupAffiliationMask::locale() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationMask.locale)
  return _internal_locale();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LookupAffiliationMask::set_locale(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 locale_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:affiliation_pb.LookupAffiliationMask.locale)
}
inline std::string* LookupAffiliationMask::mutable_locale() {
  std::string* _s = _internal_mutable_locale();
  // @@protoc_insertion_point(field_mutable:affiliation_pb.LookupAffiliationMask.locale)
  return _s;
}
inline const std::string& LookupAffiliationMask::_internal_locale() const {
  return locale_.Get();
}
inline void LookupAffiliationMask::_internal_set_locale(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  locale_.Set(value, GetArenaForAllocation());
}
inline std::string* LookupAffiliationMask::_internal_mutable_locale() {
  _has_bits_[0] |= 0x00000001u;
  return locale_.Mutable(GetArenaForAllocation());
}
inline std::string* LookupAffiliationMask::release_locale() {
  // @@protoc_insertion_point(field_release:affiliation_pb.LookupAffiliationMask.locale)
  if (!_internal_has_locale()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = locale_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (locale_.IsDefault()) {
    locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LookupAffiliationMask::set_allocated_locale(std::string* locale) {
  if (locale != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  locale_.SetAllocated(locale, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (locale_.IsDefault()) {
    locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.LookupAffiliationMask.locale)
}

// optional bool insecure_affiliation = 3;
inline bool LookupAffiliationMask::_internal_has_insecure_affiliation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LookupAffiliationMask::has_insecure_affiliation() const {
  return _internal_has_insecure_affiliation();
}
inline void LookupAffiliationMask::clear_insecure_affiliation() {
  insecure_affiliation_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool LookupAffiliationMask::_internal_insecure_affiliation() const {
  return insecure_affiliation_;
}
inline bool LookupAffiliationMask::insecure_affiliation() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationMask.insecure_affiliation)
  return _internal_insecure_affiliation();
}
inline void LookupAffiliationMask::_internal_set_insecure_affiliation(bool value) {
  _has_bits_[0] |= 0x00000004u;
  insecure_affiliation_ = value;
}
inline void LookupAffiliationMask::set_insecure_affiliation(bool value) {
  _internal_set_insecure_affiliation(value);
  // @@protoc_insertion_point(field_set:affiliation_pb.LookupAffiliationMask.insecure_affiliation)
}

// optional bool grouping_info = 6;
inline bool LookupAffiliationMask::_internal_has_grouping_info() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LookupAffiliationMask::has_grouping_info() const {
  return _internal_has_grouping_info();
}
inline void LookupAffiliationMask::clear_grouping_info() {
  grouping_info_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool LookupAffiliationMask::_internal_grouping_info() const {
  return grouping_info_;
}
inline bool LookupAffiliationMask::grouping_info() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationMask.grouping_info)
  return _internal_grouping_info();
}
inline void LookupAffiliationMask::_internal_set_grouping_info(bool value) {
  _has_bits_[0] |= 0x00000008u;
  grouping_info_ = value;
}
inline void LookupAffiliationMask::set_grouping_info(bool value) {
  _internal_set_grouping_info(value);
  // @@protoc_insertion_point(field_set:affiliation_pb.LookupAffiliationMask.grouping_info)
}

// optional bool group_branding_info = 5;
inline bool LookupAffiliationMask::_internal_has_group_branding_info() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LookupAffiliationMask::has_group_branding_info() const {
  return _internal_has_group_branding_info();
}
inline void LookupAffiliationMask::clear_group_branding_info() {
  group_branding_info_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool LookupAffiliationMask::_internal_group_branding_info() const {
  return group_branding_info_;
}
inline bool LookupAffiliationMask::group_branding_info() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationMask.group_branding_info)
  return _internal_group_branding_info();
}
inline void LookupAffiliationMask::_internal_set_group_branding_info(bool value) {
  _has_bits_[0] |= 0x00000010u;
  group_branding_info_ = value;
}
inline void LookupAffiliationMask::set_group_branding_info(bool value) {
  _internal_set_group_branding_info(value);
  // @@protoc_insertion_point(field_set:affiliation_pb.LookupAffiliationMask.group_branding_info)
}

// optional bool change_password_info = 7;
inline bool LookupAffiliationMask::_internal_has_change_password_info() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LookupAffiliationMask::has_change_password_info() const {
  return _internal_has_change_password_info();
}
inline void LookupAffiliationMask::clear_change_password_info() {
  change_password_info_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool LookupAffiliationMask::_internal_change_password_info() const {
  return change_password_info_;
}
inline bool LookupAffiliationMask::change_password_info() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationMask.change_password_info)
  return _internal_change_password_info();
}
inline void LookupAffiliationMask::_internal_set_change_password_info(bool value) {
  _has_bits_[0] |= 0x00000040u;
  change_password_info_ = value;
}
inline void LookupAffiliationMask::set_change_password_info(bool value) {
  _internal_set_change_password_info(value);
  // @@protoc_insertion_point(field_set:affiliation_pb.LookupAffiliationMask.change_password_info)
}

// -------------------------------------------------------------------

// LookupAffiliationRequest

// repeated string facet = 1;
inline int LookupAffiliationRequest::_internal_facet_size() const {
  return facet_.size();
}
inline int LookupAffiliationRequest::facet_size() const {
  return _internal_facet_size();
}
inline void LookupAffiliationRequest::clear_facet() {
  facet_.Clear();
}
inline std::string* LookupAffiliationRequest::add_facet() {
  std::string* _s = _internal_add_facet();
  // @@protoc_insertion_point(field_add_mutable:affiliation_pb.LookupAffiliationRequest.facet)
  return _s;
}
inline const std::string& LookupAffiliationRequest::_internal_facet(int index) const {
  return facet_.Get(index);
}
inline const std::string& LookupAffiliationRequest::facet(int index) const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationRequest.facet)
  return _internal_facet(index);
}
inline std::string* LookupAffiliationRequest::mutable_facet(int index) {
  // @@protoc_insertion_point(field_mutable:affiliation_pb.LookupAffiliationRequest.facet)
  return facet_.Mutable(index);
}
inline void LookupAffiliationRequest::set_facet(int index, const std::string& value) {
  facet_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:affiliation_pb.LookupAffiliationRequest.facet)
}
inline void LookupAffiliationRequest::set_facet(int index, std::string&& value) {
  facet_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:affiliation_pb.LookupAffiliationRequest.facet)
}
inline void LookupAffiliationRequest::set_facet(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  facet_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:affiliation_pb.LookupAffiliationRequest.facet)
}
inline void LookupAffiliationRequest::set_facet(int index, const char* value, size_t size) {
  facet_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:affiliation_pb.LookupAffiliationRequest.facet)
}
inline std::string* LookupAffiliationRequest::_internal_add_facet() {
  return facet_.Add();
}
inline void LookupAffiliationRequest::add_facet(const std::string& value) {
  facet_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:affiliation_pb.LookupAffiliationRequest.facet)
}
inline void LookupAffiliationRequest::add_facet(std::string&& value) {
  facet_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:affiliation_pb.LookupAffiliationRequest.facet)
}
inline void LookupAffiliationRequest::add_facet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  facet_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:affiliation_pb.LookupAffiliationRequest.facet)
}
inline void LookupAffiliationRequest::add_facet(const char* value, size_t size) {
  facet_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:affiliation_pb.LookupAffiliationRequest.facet)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LookupAffiliationRequest::facet() const {
  // @@protoc_insertion_point(field_list:affiliation_pb.LookupAffiliationRequest.facet)
  return facet_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LookupAffiliationRequest::mutable_facet() {
  // @@protoc_insertion_point(field_mutable_list:affiliation_pb.LookupAffiliationRequest.facet)
  return &facet_;
}

// optional .affiliation_pb.LookupAffiliationMask mask = 2;
inline bool LookupAffiliationRequest::_internal_has_mask() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mask_ != nullptr);
  return value;
}
inline bool LookupAffiliationRequest::has_mask() const {
  return _internal_has_mask();
}
inline void LookupAffiliationRequest::clear_mask() {
  if (mask_ != nullptr) mask_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::affiliation_pb::LookupAffiliationMask& LookupAffiliationRequest::_internal_mask() const {
  const ::affiliation_pb::LookupAffiliationMask* p = mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::affiliation_pb::LookupAffiliationMask&>(
      ::affiliation_pb::_LookupAffiliationMask_default_instance_);
}
inline const ::affiliation_pb::LookupAffiliationMask& LookupAffiliationRequest::mask() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationRequest.mask)
  return _internal_mask();
}
inline void LookupAffiliationRequest::unsafe_arena_set_allocated_mask(
    ::affiliation_pb::LookupAffiliationMask* mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask_);
  }
  mask_ = mask;
  if (mask) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:affiliation_pb.LookupAffiliationRequest.mask)
}
inline ::affiliation_pb::LookupAffiliationMask* LookupAffiliationRequest::release_mask() {
  _has_bits_[0] &= ~0x00000001u;
  ::affiliation_pb::LookupAffiliationMask* temp = mask_;
  mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::affiliation_pb::LookupAffiliationMask* LookupAffiliationRequest::unsafe_arena_release_mask() {
  // @@protoc_insertion_point(field_release:affiliation_pb.LookupAffiliationRequest.mask)
  _has_bits_[0] &= ~0x00000001u;
  ::affiliation_pb::LookupAffiliationMask* temp = mask_;
  mask_ = nullptr;
  return temp;
}
inline ::affiliation_pb::LookupAffiliationMask* LookupAffiliationRequest::_internal_mutable_mask() {
  _has_bits_[0] |= 0x00000001u;
  if (mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::affiliation_pb::LookupAffiliationMask>(GetArenaForAllocation());
    mask_ = p;
  }
  return mask_;
}
inline ::affiliation_pb::LookupAffiliationMask* LookupAffiliationRequest::mutable_mask() {
  ::affiliation_pb::LookupAffiliationMask* _msg = _internal_mutable_mask();
  // @@protoc_insertion_point(field_mutable:affiliation_pb.LookupAffiliationRequest.mask)
  return _msg;
}
inline void LookupAffiliationRequest::set_allocated_mask(::affiliation_pb::LookupAffiliationMask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mask_;
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mask);
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.LookupAffiliationRequest.mask)
}

// -------------------------------------------------------------------

// LookupAffiliationResponse

// repeated .affiliation_pb.Affiliation affiliation = 1;
inline int LookupAffiliationResponse::_internal_affiliation_size() const {
  return affiliation_.size();
}
inline int LookupAffiliationResponse::affiliation_size() const {
  return _internal_affiliation_size();
}
inline void LookupAffiliationResponse::clear_affiliation() {
  affiliation_.Clear();
}
inline ::affiliation_pb::Affiliation* LookupAffiliationResponse::mutable_affiliation(int index) {
  // @@protoc_insertion_point(field_mutable:affiliation_pb.LookupAffiliationResponse.affiliation)
  return affiliation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Affiliation >*
LookupAffiliationResponse::mutable_affiliation() {
  // @@protoc_insertion_point(field_mutable_list:affiliation_pb.LookupAffiliationResponse.affiliation)
  return &affiliation_;
}
inline const ::affiliation_pb::Affiliation& LookupAffiliationResponse::_internal_affiliation(int index) const {
  return affiliation_.Get(index);
}
inline const ::affiliation_pb::Affiliation& LookupAffiliationResponse::affiliation(int index) const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationResponse.affiliation)
  return _internal_affiliation(index);
}
inline ::affiliation_pb::Affiliation* LookupAffiliationResponse::_internal_add_affiliation() {
  return affiliation_.Add();
}
inline ::affiliation_pb::Affiliation* LookupAffiliationResponse::add_affiliation() {
  ::affiliation_pb::Affiliation* _add = _internal_add_affiliation();
  // @@protoc_insertion_point(field_add:affiliation_pb.LookupAffiliationResponse.affiliation)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Affiliation >&
LookupAffiliationResponse::affiliation() const {
  // @@protoc_insertion_point(field_list:affiliation_pb.LookupAffiliationResponse.affiliation)
  return affiliation_;
}

// repeated .affiliation_pb.FacetGroup group = 2;
inline int LookupAffiliationResponse::_internal_group_size() const {
  return group_.size();
}
inline int LookupAffiliationResponse::group_size() const {
  return _internal_group_size();
}
inline void LookupAffiliationResponse::clear_group() {
  group_.Clear();
}
inline ::affiliation_pb::FacetGroup* LookupAffiliationResponse::mutable_group(int index) {
  // @@protoc_insertion_point(field_mutable:affiliation_pb.LookupAffiliationResponse.group)
  return group_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::FacetGroup >*
LookupAffiliationResponse::mutable_group() {
  // @@protoc_insertion_point(field_mutable_list:affiliation_pb.LookupAffiliationResponse.group)
  return &group_;
}
inline const ::affiliation_pb::FacetGroup& LookupAffiliationResponse::_internal_group(int index) const {
  return group_.Get(index);
}
inline const ::affiliation_pb::FacetGroup& LookupAffiliationResponse::group(int index) const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationResponse.group)
  return _internal_group(index);
}
inline ::affiliation_pb::FacetGroup* LookupAffiliationResponse::_internal_add_group() {
  return group_.Add();
}
inline ::affiliation_pb::FacetGroup* LookupAffiliationResponse::add_group() {
  ::affiliation_pb::FacetGroup* _add = _internal_add_group();
  // @@protoc_insertion_point(field_add:affiliation_pb.LookupAffiliationResponse.group)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::FacetGroup >&
LookupAffiliationResponse::group() const {
  // @@protoc_insertion_point(field_list:affiliation_pb.LookupAffiliationResponse.group)
  return group_;
}

// -------------------------------------------------------------------

// LookupAffiliationByHashPrefixRequest

// optional .affiliation_pb.LookupAffiliationMask mask = 1;
inline bool LookupAffiliationByHashPrefixRequest::_internal_has_mask() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mask_ != nullptr);
  return value;
}
inline bool LookupAffiliationByHashPrefixRequest::has_mask() const {
  return _internal_has_mask();
}
inline void LookupAffiliationByHashPrefixRequest::clear_mask() {
  if (mask_ != nullptr) mask_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::affiliation_pb::LookupAffiliationMask& LookupAffiliationByHashPrefixRequest::_internal_mask() const {
  const ::affiliation_pb::LookupAffiliationMask* p = mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::affiliation_pb::LookupAffiliationMask&>(
      ::affiliation_pb::_LookupAffiliationMask_default_instance_);
}
inline const ::affiliation_pb::LookupAffiliationMask& LookupAffiliationByHashPrefixRequest::mask() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationByHashPrefixRequest.mask)
  return _internal_mask();
}
inline void LookupAffiliationByHashPrefixRequest::unsafe_arena_set_allocated_mask(
    ::affiliation_pb::LookupAffiliationMask* mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask_);
  }
  mask_ = mask;
  if (mask) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:affiliation_pb.LookupAffiliationByHashPrefixRequest.mask)
}
inline ::affiliation_pb::LookupAffiliationMask* LookupAffiliationByHashPrefixRequest::release_mask() {
  _has_bits_[0] &= ~0x00000001u;
  ::affiliation_pb::LookupAffiliationMask* temp = mask_;
  mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::affiliation_pb::LookupAffiliationMask* LookupAffiliationByHashPrefixRequest::unsafe_arena_release_mask() {
  // @@protoc_insertion_point(field_release:affiliation_pb.LookupAffiliationByHashPrefixRequest.mask)
  _has_bits_[0] &= ~0x00000001u;
  ::affiliation_pb::LookupAffiliationMask* temp = mask_;
  mask_ = nullptr;
  return temp;
}
inline ::affiliation_pb::LookupAffiliationMask* LookupAffiliationByHashPrefixRequest::_internal_mutable_mask() {
  _has_bits_[0] |= 0x00000001u;
  if (mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::affiliation_pb::LookupAffiliationMask>(GetArenaForAllocation());
    mask_ = p;
  }
  return mask_;
}
inline ::affiliation_pb::LookupAffiliationMask* LookupAffiliationByHashPrefixRequest::mutable_mask() {
  ::affiliation_pb::LookupAffiliationMask* _msg = _internal_mutable_mask();
  // @@protoc_insertion_point(field_mutable:affiliation_pb.LookupAffiliationByHashPrefixRequest.mask)
  return _msg;
}
inline void LookupAffiliationByHashPrefixRequest::set_allocated_mask(::affiliation_pb::LookupAffiliationMask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mask_;
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mask);
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:affiliation_pb.LookupAffiliationByHashPrefixRequest.mask)
}

// optional uint32 hash_prefix_length = 2;
inline bool LookupAffiliationByHashPrefixRequest::_internal_has_hash_prefix_length() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LookupAffiliationByHashPrefixRequest::has_hash_prefix_length() const {
  return _internal_has_hash_prefix_length();
}
inline void LookupAffiliationByHashPrefixRequest::clear_hash_prefix_length() {
  hash_prefix_length_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t LookupAffiliationByHashPrefixRequest::_internal_hash_prefix_length() const {
  return hash_prefix_length_;
}
inline uint32_t LookupAffiliationByHashPrefixRequest::hash_prefix_length() const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationByHashPrefixRequest.hash_prefix_length)
  return _internal_hash_prefix_length();
}
inline void LookupAffiliationByHashPrefixRequest::_internal_set_hash_prefix_length(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  hash_prefix_length_ = value;
}
inline void LookupAffiliationByHashPrefixRequest::set_hash_prefix_length(uint32_t value) {
  _internal_set_hash_prefix_length(value);
  // @@protoc_insertion_point(field_set:affiliation_pb.LookupAffiliationByHashPrefixRequest.hash_prefix_length)
}

// repeated uint64 hash_prefixes = 3;
inline int LookupAffiliationByHashPrefixRequest::_internal_hash_prefixes_size() const {
  return hash_prefixes_.size();
}
inline int LookupAffiliationByHashPrefixRequest::hash_prefixes_size() const {
  return _internal_hash_prefixes_size();
}
inline void LookupAffiliationByHashPrefixRequest::clear_hash_prefixes() {
  hash_prefixes_.Clear();
}
inline uint64_t LookupAffiliationByHashPrefixRequest::_internal_hash_prefixes(int index) const {
  return hash_prefixes_.Get(index);
}
inline uint64_t LookupAffiliationByHashPrefixRequest::hash_prefixes(int index) const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationByHashPrefixRequest.hash_prefixes)
  return _internal_hash_prefixes(index);
}
inline void LookupAffiliationByHashPrefixRequest::set_hash_prefixes(int index, uint64_t value) {
  hash_prefixes_.Set(index, value);
  // @@protoc_insertion_point(field_set:affiliation_pb.LookupAffiliationByHashPrefixRequest.hash_prefixes)
}
inline void LookupAffiliationByHashPrefixRequest::_internal_add_hash_prefixes(uint64_t value) {
  hash_prefixes_.Add(value);
}
inline void LookupAffiliationByHashPrefixRequest::add_hash_prefixes(uint64_t value) {
  _internal_add_hash_prefixes(value);
  // @@protoc_insertion_point(field_add:affiliation_pb.LookupAffiliationByHashPrefixRequest.hash_prefixes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
LookupAffiliationByHashPrefixRequest::_internal_hash_prefixes() const {
  return hash_prefixes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
LookupAffiliationByHashPrefixRequest::hash_prefixes() const {
  // @@protoc_insertion_point(field_list:affiliation_pb.LookupAffiliationByHashPrefixRequest.hash_prefixes)
  return _internal_hash_prefixes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
LookupAffiliationByHashPrefixRequest::_internal_mutable_hash_prefixes() {
  return &hash_prefixes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
LookupAffiliationByHashPrefixRequest::mutable_hash_prefixes() {
  // @@protoc_insertion_point(field_mutable_list:affiliation_pb.LookupAffiliationByHashPrefixRequest.hash_prefixes)
  return _internal_mutable_hash_prefixes();
}

// -------------------------------------------------------------------

// LookupAffiliationByHashPrefixResponse

// repeated .affiliation_pb.Affiliation affiliations = 1;
inline int LookupAffiliationByHashPrefixResponse::_internal_affiliations_size() const {
  return affiliations_.size();
}
inline int LookupAffiliationByHashPrefixResponse::affiliations_size() const {
  return _internal_affiliations_size();
}
inline void LookupAffiliationByHashPrefixResponse::clear_affiliations() {
  affiliations_.Clear();
}
inline ::affiliation_pb::Affiliation* LookupAffiliationByHashPrefixResponse::mutable_affiliations(int index) {
  // @@protoc_insertion_point(field_mutable:affiliation_pb.LookupAffiliationByHashPrefixResponse.affiliations)
  return affiliations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Affiliation >*
LookupAffiliationByHashPrefixResponse::mutable_affiliations() {
  // @@protoc_insertion_point(field_mutable_list:affiliation_pb.LookupAffiliationByHashPrefixResponse.affiliations)
  return &affiliations_;
}
inline const ::affiliation_pb::Affiliation& LookupAffiliationByHashPrefixResponse::_internal_affiliations(int index) const {
  return affiliations_.Get(index);
}
inline const ::affiliation_pb::Affiliation& LookupAffiliationByHashPrefixResponse::affiliations(int index) const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationByHashPrefixResponse.affiliations)
  return _internal_affiliations(index);
}
inline ::affiliation_pb::Affiliation* LookupAffiliationByHashPrefixResponse::_internal_add_affiliations() {
  return affiliations_.Add();
}
inline ::affiliation_pb::Affiliation* LookupAffiliationByHashPrefixResponse::add_affiliations() {
  ::affiliation_pb::Affiliation* _add = _internal_add_affiliations();
  // @@protoc_insertion_point(field_add:affiliation_pb.LookupAffiliationByHashPrefixResponse.affiliations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::Affiliation >&
LookupAffiliationByHashPrefixResponse::affiliations() const {
  // @@protoc_insertion_point(field_list:affiliation_pb.LookupAffiliationByHashPrefixResponse.affiliations)
  return affiliations_;
}

// repeated .affiliation_pb.FacetGroup groups = 2;
inline int LookupAffiliationByHashPrefixResponse::_internal_groups_size() const {
  return groups_.size();
}
inline int LookupAffiliationByHashPrefixResponse::groups_size() const {
  return _internal_groups_size();
}
inline void LookupAffiliationByHashPrefixResponse::clear_groups() {
  groups_.Clear();
}
inline ::affiliation_pb::FacetGroup* LookupAffiliationByHashPrefixResponse::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:affiliation_pb.LookupAffiliationByHashPrefixResponse.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::FacetGroup >*
LookupAffiliationByHashPrefixResponse::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:affiliation_pb.LookupAffiliationByHashPrefixResponse.groups)
  return &groups_;
}
inline const ::affiliation_pb::FacetGroup& LookupAffiliationByHashPrefixResponse::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::affiliation_pb::FacetGroup& LookupAffiliationByHashPrefixResponse::groups(int index) const {
  // @@protoc_insertion_point(field_get:affiliation_pb.LookupAffiliationByHashPrefixResponse.groups)
  return _internal_groups(index);
}
inline ::affiliation_pb::FacetGroup* LookupAffiliationByHashPrefixResponse::_internal_add_groups() {
  return groups_.Add();
}
inline ::affiliation_pb::FacetGroup* LookupAffiliationByHashPrefixResponse::add_groups() {
  ::affiliation_pb::FacetGroup* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:affiliation_pb.LookupAffiliationByHashPrefixResponse.groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::affiliation_pb::FacetGroup >&
LookupAffiliationByHashPrefixResponse::groups() const {
  // @@protoc_insertion_point(field_list:affiliation_pb.LookupAffiliationByHashPrefixResponse.groups)
  return groups_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace affiliation_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::affiliation_pb::BrandingInfo_ElideInfo> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_affiliation_5fapi_2eproto
