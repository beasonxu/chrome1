// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: affiliation_api.proto

#include "affiliation_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace affiliation_pb {
PROTOBUF_CONSTEXPR Affiliation::Affiliation(
    ::_pbi::ConstantInitialized)
  : facet_(){}
struct AffiliationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AffiliationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AffiliationDefaultTypeInternal() {}
  union {
    Affiliation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AffiliationDefaultTypeInternal _Affiliation_default_instance_;
PROTOBUF_CONSTEXPR Facet::Facet(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , main_domain_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , branding_info_(nullptr)
  , change_password_info_(nullptr){}
struct FacetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FacetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FacetDefaultTypeInternal() {}
  union {
    Facet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FacetDefaultTypeInternal _Facet_default_instance_;
PROTOBUF_CONSTEXPR FacetGroup::FacetGroup(
    ::_pbi::ConstantInitialized)
  : facet_()
  , group_branding_info_(nullptr){}
struct FacetGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FacetGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FacetGroupDefaultTypeInternal() {}
  union {
    FacetGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FacetGroupDefaultTypeInternal _FacetGroup_default_instance_;
PROTOBUF_CONSTEXPR GroupBrandingInfo::GroupBrandingInfo(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , icon_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , icon_width_(0)
  , icon_height_(0)
  , elide_info_(0)
{}
struct GroupBrandingInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupBrandingInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupBrandingInfoDefaultTypeInternal() {}
  union {
    GroupBrandingInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupBrandingInfoDefaultTypeInternal _GroupBrandingInfo_default_instance_;
PROTOBUF_CONSTEXPR BrandingInfo::BrandingInfo(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , icon_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , icon_width_(0)
  , icon_height_(0)
  , elide_info_(0)
{}
struct BrandingInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrandingInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrandingInfoDefaultTypeInternal() {}
  union {
    BrandingInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrandingInfoDefaultTypeInternal _BrandingInfo_default_instance_;
PROTOBUF_CONSTEXPR ChangePasswordInfo::ChangePasswordInfo(
    ::_pbi::ConstantInitialized)
  : change_password_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ChangePasswordInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangePasswordInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangePasswordInfoDefaultTypeInternal() {}
  union {
    ChangePasswordInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangePasswordInfoDefaultTypeInternal _ChangePasswordInfo_default_instance_;
PROTOBUF_CONSTEXPR LookupAffiliationMask::LookupAffiliationMask(
    ::_pbi::ConstantInitialized)
  : locale_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , branding_info_(false)
  , insecure_affiliation_(false)
  , grouping_info_(false)
  , group_branding_info_(false)
  , preferred_icon_size_(0)
  , change_password_info_(false){}
struct LookupAffiliationMaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LookupAffiliationMaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LookupAffiliationMaskDefaultTypeInternal() {}
  union {
    LookupAffiliationMask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LookupAffiliationMaskDefaultTypeInternal _LookupAffiliationMask_default_instance_;
PROTOBUF_CONSTEXPR LookupAffiliationRequest::LookupAffiliationRequest(
    ::_pbi::ConstantInitialized)
  : facet_()
  , mask_(nullptr){}
struct LookupAffiliationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LookupAffiliationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LookupAffiliationRequestDefaultTypeInternal() {}
  union {
    LookupAffiliationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LookupAffiliationRequestDefaultTypeInternal _LookupAffiliationRequest_default_instance_;
PROTOBUF_CONSTEXPR LookupAffiliationResponse::LookupAffiliationResponse(
    ::_pbi::ConstantInitialized)
  : affiliation_()
  , group_(){}
struct LookupAffiliationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LookupAffiliationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LookupAffiliationResponseDefaultTypeInternal() {}
  union {
    LookupAffiliationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LookupAffiliationResponseDefaultTypeInternal _LookupAffiliationResponse_default_instance_;
PROTOBUF_CONSTEXPR LookupAffiliationByHashPrefixRequest::LookupAffiliationByHashPrefixRequest(
    ::_pbi::ConstantInitialized)
  : hash_prefixes_()
  , mask_(nullptr)
  , hash_prefix_length_(0u){}
struct LookupAffiliationByHashPrefixRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LookupAffiliationByHashPrefixRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LookupAffiliationByHashPrefixRequestDefaultTypeInternal() {}
  union {
    LookupAffiliationByHashPrefixRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LookupAffiliationByHashPrefixRequestDefaultTypeInternal _LookupAffiliationByHashPrefixRequest_default_instance_;
PROTOBUF_CONSTEXPR LookupAffiliationByHashPrefixResponse::LookupAffiliationByHashPrefixResponse(
    ::_pbi::ConstantInitialized)
  : affiliations_()
  , groups_(){}
struct LookupAffiliationByHashPrefixResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LookupAffiliationByHashPrefixResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LookupAffiliationByHashPrefixResponseDefaultTypeInternal() {}
  union {
    LookupAffiliationByHashPrefixResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LookupAffiliationByHashPrefixResponseDefaultTypeInternal _LookupAffiliationByHashPrefixResponse_default_instance_;
}  // namespace affiliation_pb
namespace affiliation_pb {
bool BrandingInfo_ElideInfo_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BrandingInfo_ElideInfo_strings[3] = {};

static const char BrandingInfo_ElideInfo_names[] =
  "ELIDE_FROM_BACK"
  "ELIDE_FROM_FRONT"
  "UNKNOWN_ELIDE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BrandingInfo_ElideInfo_entries[] = {
  { {BrandingInfo_ElideInfo_names + 0, 15}, 2 },
  { {BrandingInfo_ElideInfo_names + 15, 16}, 1 },
  { {BrandingInfo_ElideInfo_names + 31, 13}, 0 },
};

static const int BrandingInfo_ElideInfo_entries_by_number[] = {
  2, // 0 -> UNKNOWN_ELIDE
  1, // 1 -> ELIDE_FROM_FRONT
  0, // 2 -> ELIDE_FROM_BACK
};

const std::string& BrandingInfo_ElideInfo_Name(
    BrandingInfo_ElideInfo value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BrandingInfo_ElideInfo_entries,
          BrandingInfo_ElideInfo_entries_by_number,
          3, BrandingInfo_ElideInfo_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BrandingInfo_ElideInfo_entries,
      BrandingInfo_ElideInfo_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BrandingInfo_ElideInfo_strings[idx].get();
}
bool BrandingInfo_ElideInfo_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BrandingInfo_ElideInfo* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BrandingInfo_ElideInfo_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<BrandingInfo_ElideInfo>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BrandingInfo_ElideInfo BrandingInfo::UNKNOWN_ELIDE;
constexpr BrandingInfo_ElideInfo BrandingInfo::ELIDE_FROM_FRONT;
constexpr BrandingInfo_ElideInfo BrandingInfo::ELIDE_FROM_BACK;
constexpr BrandingInfo_ElideInfo BrandingInfo::ElideInfo_MIN;
constexpr BrandingInfo_ElideInfo BrandingInfo::ElideInfo_MAX;
constexpr int BrandingInfo::ElideInfo_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Affiliation::_Internal {
 public:
};

Affiliation::Affiliation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  facet_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:affiliation_pb.Affiliation)
}
Affiliation::Affiliation(const Affiliation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      facet_(from.facet_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:affiliation_pb.Affiliation)
}

inline void Affiliation::SharedCtor() {
}

Affiliation::~Affiliation() {
  // @@protoc_insertion_point(destructor:affiliation_pb.Affiliation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Affiliation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Affiliation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Affiliation::Clear() {
// @@protoc_insertion_point(message_clear_start:affiliation_pb.Affiliation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  facet_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Affiliation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .affiliation_pb.Facet facet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_facet(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Affiliation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:affiliation_pb.Affiliation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .affiliation_pb.Facet facet = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_facet_size()); i < n; i++) {
    const auto& repfield = this->_internal_facet(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:affiliation_pb.Affiliation)
  return target;
}

size_t Affiliation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:affiliation_pb.Affiliation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .affiliation_pb.Facet facet = 1;
  total_size += 1UL * this->_internal_facet_size();
  for (const auto& msg : this->facet_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Affiliation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Affiliation*>(
      &from));
}

void Affiliation::MergeFrom(const Affiliation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:affiliation_pb.Affiliation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  facet_.MergeFrom(from.facet_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Affiliation::CopyFrom(const Affiliation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:affiliation_pb.Affiliation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Affiliation::IsInitialized() const {
  return true;
}

void Affiliation::InternalSwap(Affiliation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  facet_.InternalSwap(&other->facet_);
}

std::string Affiliation::GetTypeName() const {
  return "affiliation_pb.Affiliation";
}


// ===================================================================

class Facet::_Internal {
 public:
  using HasBits = decltype(std::declval<Facet>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::affiliation_pb::BrandingInfo& branding_info(const Facet* msg);
  static void set_has_branding_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_main_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::affiliation_pb::ChangePasswordInfo& change_password_info(const Facet* msg);
  static void set_has_change_password_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::affiliation_pb::BrandingInfo&
Facet::_Internal::branding_info(const Facet* msg) {
  return *msg->branding_info_;
}
const ::affiliation_pb::ChangePasswordInfo&
Facet::_Internal::change_password_info(const Facet* msg) {
  return *msg->change_password_info_;
}
Facet::Facet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:affiliation_pb.Facet)
}
Facet::Facet(const Facet& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  main_domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    main_domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_main_domain()) {
    main_domain_.Set(from._internal_main_domain(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_branding_info()) {
    branding_info_ = new ::affiliation_pb::BrandingInfo(*from.branding_info_);
  } else {
    branding_info_ = nullptr;
  }
  if (from._internal_has_change_password_info()) {
    change_password_info_ = new ::affiliation_pb::ChangePasswordInfo(*from.change_password_info_);
  } else {
    change_password_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:affiliation_pb.Facet)
}

inline void Facet::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
main_domain_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  main_domain_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&branding_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&change_password_info_) -
    reinterpret_cast<char*>(&branding_info_)) + sizeof(change_password_info_));
}

Facet::~Facet() {
  // @@protoc_insertion_point(destructor:affiliation_pb.Facet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Facet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  main_domain_.Destroy();
  if (this != internal_default_instance()) delete branding_info_;
  if (this != internal_default_instance()) delete change_password_info_;
}

void Facet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Facet::Clear() {
// @@protoc_insertion_point(message_clear_start:affiliation_pb.Facet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      main_domain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(branding_info_ != nullptr);
      branding_info_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(change_password_info_ != nullptr);
      change_password_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Facet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .affiliation_pb.BrandingInfo branding_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_branding_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string main_domain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_main_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .affiliation_pb.ChangePasswordInfo change_password_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_password_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Facet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:affiliation_pb.Facet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional .affiliation_pb.BrandingInfo branding_info = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::branding_info(this),
        _Internal::branding_info(this).GetCachedSize(), target, stream);
  }

  // optional string main_domain = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_main_domain(), target);
  }

  // optional .affiliation_pb.ChangePasswordInfo change_password_info = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::change_password_info(this),
        _Internal::change_password_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:affiliation_pb.Facet)
  return target;
}

size_t Facet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:affiliation_pb.Facet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string main_domain = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_main_domain());
    }

    // optional .affiliation_pb.BrandingInfo branding_info = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *branding_info_);
    }

    // optional .affiliation_pb.ChangePasswordInfo change_password_info = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_password_info_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Facet::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Facet*>(
      &from));
}

void Facet::MergeFrom(const Facet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:affiliation_pb.Facet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_main_domain(from._internal_main_domain());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_branding_info()->::affiliation_pb::BrandingInfo::MergeFrom(from._internal_branding_info());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_change_password_info()->::affiliation_pb::ChangePasswordInfo::MergeFrom(from._internal_change_password_info());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Facet::CopyFrom(const Facet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:affiliation_pb.Facet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Facet::IsInitialized() const {
  return true;
}

void Facet::InternalSwap(Facet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &main_domain_, lhs_arena,
      &other->main_domain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Facet, change_password_info_)
      + sizeof(Facet::change_password_info_)
      - PROTOBUF_FIELD_OFFSET(Facet, branding_info_)>(
          reinterpret_cast<char*>(&branding_info_),
          reinterpret_cast<char*>(&other->branding_info_));
}

std::string Facet::GetTypeName() const {
  return "affiliation_pb.Facet";
}


// ===================================================================

class FacetGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<FacetGroup>()._has_bits_);
  static const ::affiliation_pb::GroupBrandingInfo& group_branding_info(const FacetGroup* msg);
  static void set_has_group_branding_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::affiliation_pb::GroupBrandingInfo&
FacetGroup::_Internal::group_branding_info(const FacetGroup* msg) {
  return *msg->group_branding_info_;
}
FacetGroup::FacetGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  facet_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:affiliation_pb.FacetGroup)
}
FacetGroup::FacetGroup(const FacetGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      facet_(from.facet_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_group_branding_info()) {
    group_branding_info_ = new ::affiliation_pb::GroupBrandingInfo(*from.group_branding_info_);
  } else {
    group_branding_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:affiliation_pb.FacetGroup)
}

inline void FacetGroup::SharedCtor() {
group_branding_info_ = nullptr;
}

FacetGroup::~FacetGroup() {
  // @@protoc_insertion_point(destructor:affiliation_pb.FacetGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FacetGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete group_branding_info_;
}

void FacetGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FacetGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:affiliation_pb.FacetGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  facet_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(group_branding_info_ != nullptr);
    group_branding_info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FacetGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .affiliation_pb.Facet facet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_facet(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .affiliation_pb.GroupBrandingInfo group_branding_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_branding_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FacetGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:affiliation_pb.FacetGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .affiliation_pb.Facet facet = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_facet_size()); i < n; i++) {
    const auto& repfield = this->_internal_facet(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .affiliation_pb.GroupBrandingInfo group_branding_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::group_branding_info(this),
        _Internal::group_branding_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:affiliation_pb.FacetGroup)
  return target;
}

size_t FacetGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:affiliation_pb.FacetGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .affiliation_pb.Facet facet = 1;
  total_size += 1UL * this->_internal_facet_size();
  for (const auto& msg : this->facet_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .affiliation_pb.GroupBrandingInfo group_branding_info = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_branding_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FacetGroup::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FacetGroup*>(
      &from));
}

void FacetGroup::MergeFrom(const FacetGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:affiliation_pb.FacetGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  facet_.MergeFrom(from.facet_);
  if (from._internal_has_group_branding_info()) {
    _internal_mutable_group_branding_info()->::affiliation_pb::GroupBrandingInfo::MergeFrom(from._internal_group_branding_info());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FacetGroup::CopyFrom(const FacetGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:affiliation_pb.FacetGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacetGroup::IsInitialized() const {
  return true;
}

void FacetGroup::InternalSwap(FacetGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  facet_.InternalSwap(&other->facet_);
  swap(group_branding_info_, other->group_branding_info_);
}

std::string FacetGroup::GetTypeName() const {
  return "affiliation_pb.FacetGroup";
}


// ===================================================================

class GroupBrandingInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupBrandingInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elide_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_icon_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_icon_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_icon_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GroupBrandingInfo::GroupBrandingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:affiliation_pb.GroupBrandingInfo)
}
GroupBrandingInfo::GroupBrandingInfo(const GroupBrandingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  icon_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon_url()) {
    icon_url_.Set(from._internal_icon_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&icon_width_, &from.icon_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&elide_info_) -
    reinterpret_cast<char*>(&icon_width_)) + sizeof(elide_info_));
  // @@protoc_insertion_point(copy_constructor:affiliation_pb.GroupBrandingInfo)
}

inline void GroupBrandingInfo::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&icon_width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&elide_info_) -
    reinterpret_cast<char*>(&icon_width_)) + sizeof(elide_info_));
}

GroupBrandingInfo::~GroupBrandingInfo() {
  // @@protoc_insertion_point(destructor:affiliation_pb.GroupBrandingInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupBrandingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  icon_url_.Destroy();
}

void GroupBrandingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroupBrandingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:affiliation_pb.GroupBrandingInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      icon_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&icon_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&elide_info_) -
        reinterpret_cast<char*>(&icon_width_)) + sizeof(elide_info_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GroupBrandingInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_icon_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 icon_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_icon_width(&has_bits);
          icon_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 icon_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_icon_height(&has_bits);
          icon_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .affiliation_pb.BrandingInfo.ElideInfo elide_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::affiliation_pb::BrandingInfo_ElideInfo_IsValid(val))) {
            _internal_set_elide_info(static_cast<::affiliation_pb::BrandingInfo_ElideInfo>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupBrandingInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:affiliation_pb.GroupBrandingInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string icon_url = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_icon_url(), target);
  }

  // optional int32 icon_width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_icon_width(), target);
  }

  // optional int32 icon_height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_icon_height(), target);
  }

  // optional .affiliation_pb.BrandingInfo.ElideInfo elide_info = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_elide_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:affiliation_pb.GroupBrandingInfo)
  return target;
}

size_t GroupBrandingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:affiliation_pb.GroupBrandingInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string icon_url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon_url());
    }

    // optional int32 icon_width = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_icon_width());
    }

    // optional int32 icon_height = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_icon_height());
    }

    // optional .affiliation_pb.BrandingInfo.ElideInfo elide_info = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_elide_info());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupBrandingInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GroupBrandingInfo*>(
      &from));
}

void GroupBrandingInfo::MergeFrom(const GroupBrandingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:affiliation_pb.GroupBrandingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_icon_url(from._internal_icon_url());
    }
    if (cached_has_bits & 0x00000004u) {
      icon_width_ = from.icon_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      icon_height_ = from.icon_height_;
    }
    if (cached_has_bits & 0x00000010u) {
      elide_info_ = from.elide_info_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GroupBrandingInfo::CopyFrom(const GroupBrandingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:affiliation_pb.GroupBrandingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupBrandingInfo::IsInitialized() const {
  return true;
}

void GroupBrandingInfo::InternalSwap(GroupBrandingInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &icon_url_, lhs_arena,
      &other->icon_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupBrandingInfo, elide_info_)
      + sizeof(GroupBrandingInfo::elide_info_)
      - PROTOBUF_FIELD_OFFSET(GroupBrandingInfo, icon_width_)>(
          reinterpret_cast<char*>(&icon_width_),
          reinterpret_cast<char*>(&other->icon_width_));
}

std::string GroupBrandingInfo::GetTypeName() const {
  return "affiliation_pb.GroupBrandingInfo";
}


// ===================================================================

class BrandingInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<BrandingInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elide_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_icon_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_icon_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_icon_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BrandingInfo::BrandingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:affiliation_pb.BrandingInfo)
}
BrandingInfo::BrandingInfo(const BrandingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  icon_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon_url()) {
    icon_url_.Set(from._internal_icon_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&icon_width_, &from.icon_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&elide_info_) -
    reinterpret_cast<char*>(&icon_width_)) + sizeof(elide_info_));
  // @@protoc_insertion_point(copy_constructor:affiliation_pb.BrandingInfo)
}

inline void BrandingInfo::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&icon_width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&elide_info_) -
    reinterpret_cast<char*>(&icon_width_)) + sizeof(elide_info_));
}

BrandingInfo::~BrandingInfo() {
  // @@protoc_insertion_point(destructor:affiliation_pb.BrandingInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BrandingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  icon_url_.Destroy();
}

void BrandingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BrandingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:affiliation_pb.BrandingInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      icon_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&icon_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&elide_info_) -
        reinterpret_cast<char*>(&icon_width_)) + sizeof(elide_info_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BrandingInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_icon_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 icon_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_icon_width(&has_bits);
          icon_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 icon_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_icon_height(&has_bits);
          icon_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .affiliation_pb.BrandingInfo.ElideInfo elide_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::affiliation_pb::BrandingInfo_ElideInfo_IsValid(val))) {
            _internal_set_elide_info(static_cast<::affiliation_pb::BrandingInfo_ElideInfo>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BrandingInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:affiliation_pb.BrandingInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string icon_url = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_icon_url(), target);
  }

  // optional int32 icon_width = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_icon_width(), target);
  }

  // optional int32 icon_height = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_icon_height(), target);
  }

  // optional .affiliation_pb.BrandingInfo.ElideInfo elide_info = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_elide_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:affiliation_pb.BrandingInfo)
  return target;
}

size_t BrandingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:affiliation_pb.BrandingInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string icon_url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon_url());
    }

    // optional int32 icon_width = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_icon_width());
    }

    // optional int32 icon_height = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_icon_height());
    }

    // optional .affiliation_pb.BrandingInfo.ElideInfo elide_info = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_elide_info());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BrandingInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BrandingInfo*>(
      &from));
}

void BrandingInfo::MergeFrom(const BrandingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:affiliation_pb.BrandingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_icon_url(from._internal_icon_url());
    }
    if (cached_has_bits & 0x00000004u) {
      icon_width_ = from.icon_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      icon_height_ = from.icon_height_;
    }
    if (cached_has_bits & 0x00000010u) {
      elide_info_ = from.elide_info_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BrandingInfo::CopyFrom(const BrandingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:affiliation_pb.BrandingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrandingInfo::IsInitialized() const {
  return true;
}

void BrandingInfo::InternalSwap(BrandingInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &icon_url_, lhs_arena,
      &other->icon_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BrandingInfo, elide_info_)
      + sizeof(BrandingInfo::elide_info_)
      - PROTOBUF_FIELD_OFFSET(BrandingInfo, icon_width_)>(
          reinterpret_cast<char*>(&icon_width_),
          reinterpret_cast<char*>(&other->icon_width_));
}

std::string BrandingInfo::GetTypeName() const {
  return "affiliation_pb.BrandingInfo";
}


// ===================================================================

class ChangePasswordInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangePasswordInfo>()._has_bits_);
  static void set_has_change_password_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChangePasswordInfo::ChangePasswordInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:affiliation_pb.ChangePasswordInfo)
}
ChangePasswordInfo::ChangePasswordInfo(const ChangePasswordInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  change_password_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    change_password_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_change_password_url()) {
    change_password_url_.Set(from._internal_change_password_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:affiliation_pb.ChangePasswordInfo)
}

inline void ChangePasswordInfo::SharedCtor() {
change_password_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  change_password_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChangePasswordInfo::~ChangePasswordInfo() {
  // @@protoc_insertion_point(destructor:affiliation_pb.ChangePasswordInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangePasswordInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  change_password_url_.Destroy();
}

void ChangePasswordInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangePasswordInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:affiliation_pb.ChangePasswordInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    change_password_url_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChangePasswordInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string change_password_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_change_password_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangePasswordInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:affiliation_pb.ChangePasswordInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string change_password_url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_change_password_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:affiliation_pb.ChangePasswordInfo)
  return target;
}

size_t ChangePasswordInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:affiliation_pb.ChangePasswordInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string change_password_url = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_change_password_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangePasswordInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChangePasswordInfo*>(
      &from));
}

void ChangePasswordInfo::MergeFrom(const ChangePasswordInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:affiliation_pb.ChangePasswordInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_change_password_url()) {
    _internal_set_change_password_url(from._internal_change_password_url());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChangePasswordInfo::CopyFrom(const ChangePasswordInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:affiliation_pb.ChangePasswordInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePasswordInfo::IsInitialized() const {
  return true;
}

void ChangePasswordInfo::InternalSwap(ChangePasswordInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &change_password_url_, lhs_arena,
      &other->change_password_url_, rhs_arena
  );
}

std::string ChangePasswordInfo::GetTypeName() const {
  return "affiliation_pb.ChangePasswordInfo";
}


// ===================================================================

class LookupAffiliationMask::_Internal {
 public:
  using HasBits = decltype(std::declval<LookupAffiliationMask>()._has_bits_);
  static void set_has_branding_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_preferred_icon_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_insecure_affiliation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_grouping_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_group_branding_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_change_password_info(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

LookupAffiliationMask::LookupAffiliationMask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:affiliation_pb.LookupAffiliationMask)
}
LookupAffiliationMask::LookupAffiliationMask(const LookupAffiliationMask& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_locale()) {
    locale_.Set(from._internal_locale(), 
      GetArenaForAllocation());
  }
  ::memcpy(&branding_info_, &from.branding_info_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_password_info_) -
    reinterpret_cast<char*>(&branding_info_)) + sizeof(change_password_info_));
  // @@protoc_insertion_point(copy_constructor:affiliation_pb.LookupAffiliationMask)
}

inline void LookupAffiliationMask::SharedCtor() {
locale_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  locale_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&branding_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&change_password_info_) -
    reinterpret_cast<char*>(&branding_info_)) + sizeof(change_password_info_));
}

LookupAffiliationMask::~LookupAffiliationMask() {
  // @@protoc_insertion_point(destructor:affiliation_pb.LookupAffiliationMask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LookupAffiliationMask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  locale_.Destroy();
}

void LookupAffiliationMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LookupAffiliationMask::Clear() {
// @@protoc_insertion_point(message_clear_start:affiliation_pb.LookupAffiliationMask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    locale_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&branding_info_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&change_password_info_) -
        reinterpret_cast<char*>(&branding_info_)) + sizeof(change_password_info_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LookupAffiliationMask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool branding_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_branding_info(&has_bits);
          branding_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string locale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool insecure_affiliation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_insecure_affiliation(&has_bits);
          insecure_affiliation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 preferred_icon_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_preferred_icon_size(&has_bits);
          preferred_icon_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool group_branding_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_group_branding_info(&has_bits);
          group_branding_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool grouping_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_grouping_info(&has_bits);
          grouping_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool change_password_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_change_password_info(&has_bits);
          change_password_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LookupAffiliationMask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:affiliation_pb.LookupAffiliationMask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool branding_info = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_branding_info(), target);
  }

  // optional string locale = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_locale(), target);
  }

  // optional bool insecure_affiliation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_insecure_affiliation(), target);
  }

  // optional int32 preferred_icon_size = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_preferred_icon_size(), target);
  }

  // optional bool group_branding_info = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_group_branding_info(), target);
  }

  // optional bool grouping_info = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_grouping_info(), target);
  }

  // optional bool change_password_info = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_change_password_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:affiliation_pb.LookupAffiliationMask)
  return target;
}

size_t LookupAffiliationMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:affiliation_pb.LookupAffiliationMask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string locale = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_locale());
    }

    // optional bool branding_info = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool insecure_affiliation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool grouping_info = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool group_branding_info = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 preferred_icon_size = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_preferred_icon_size());
    }

    // optional bool change_password_info = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupAffiliationMask::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LookupAffiliationMask*>(
      &from));
}

void LookupAffiliationMask::MergeFrom(const LookupAffiliationMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:affiliation_pb.LookupAffiliationMask)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_locale(from._internal_locale());
    }
    if (cached_has_bits & 0x00000002u) {
      branding_info_ = from.branding_info_;
    }
    if (cached_has_bits & 0x00000004u) {
      insecure_affiliation_ = from.insecure_affiliation_;
    }
    if (cached_has_bits & 0x00000008u) {
      grouping_info_ = from.grouping_info_;
    }
    if (cached_has_bits & 0x00000010u) {
      group_branding_info_ = from.group_branding_info_;
    }
    if (cached_has_bits & 0x00000020u) {
      preferred_icon_size_ = from.preferred_icon_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      change_password_info_ = from.change_password_info_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LookupAffiliationMask::CopyFrom(const LookupAffiliationMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:affiliation_pb.LookupAffiliationMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupAffiliationMask::IsInitialized() const {
  return true;
}

void LookupAffiliationMask::InternalSwap(LookupAffiliationMask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &locale_, lhs_arena,
      &other->locale_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LookupAffiliationMask, change_password_info_)
      + sizeof(LookupAffiliationMask::change_password_info_)
      - PROTOBUF_FIELD_OFFSET(LookupAffiliationMask, branding_info_)>(
          reinterpret_cast<char*>(&branding_info_),
          reinterpret_cast<char*>(&other->branding_info_));
}

std::string LookupAffiliationMask::GetTypeName() const {
  return "affiliation_pb.LookupAffiliationMask";
}


// ===================================================================

class LookupAffiliationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<LookupAffiliationRequest>()._has_bits_);
  static const ::affiliation_pb::LookupAffiliationMask& mask(const LookupAffiliationRequest* msg);
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::affiliation_pb::LookupAffiliationMask&
LookupAffiliationRequest::_Internal::mask(const LookupAffiliationRequest* msg) {
  return *msg->mask_;
}
LookupAffiliationRequest::LookupAffiliationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  facet_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:affiliation_pb.LookupAffiliationRequest)
}
LookupAffiliationRequest::LookupAffiliationRequest(const LookupAffiliationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      facet_(from.facet_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_mask()) {
    mask_ = new ::affiliation_pb::LookupAffiliationMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:affiliation_pb.LookupAffiliationRequest)
}

inline void LookupAffiliationRequest::SharedCtor() {
mask_ = nullptr;
}

LookupAffiliationRequest::~LookupAffiliationRequest() {
  // @@protoc_insertion_point(destructor:affiliation_pb.LookupAffiliationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LookupAffiliationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mask_;
}

void LookupAffiliationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LookupAffiliationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:affiliation_pb.LookupAffiliationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  facet_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(mask_ != nullptr);
    mask_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LookupAffiliationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string facet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_facet();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .affiliation_pb.LookupAffiliationMask mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LookupAffiliationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:affiliation_pb.LookupAffiliationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string facet = 1;
  for (int i = 0, n = this->_internal_facet_size(); i < n; i++) {
    const auto& s = this->_internal_facet(i);
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .affiliation_pb.LookupAffiliationMask mask = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mask(this),
        _Internal::mask(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:affiliation_pb.LookupAffiliationRequest)
  return target;
}

size_t LookupAffiliationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:affiliation_pb.LookupAffiliationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string facet = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(facet_.size());
  for (int i = 0, n = facet_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      facet_.Get(i));
  }

  // optional .affiliation_pb.LookupAffiliationMask mask = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupAffiliationRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LookupAffiliationRequest*>(
      &from));
}

void LookupAffiliationRequest::MergeFrom(const LookupAffiliationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:affiliation_pb.LookupAffiliationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  facet_.MergeFrom(from.facet_);
  if (from._internal_has_mask()) {
    _internal_mutable_mask()->::affiliation_pb::LookupAffiliationMask::MergeFrom(from._internal_mask());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LookupAffiliationRequest::CopyFrom(const LookupAffiliationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:affiliation_pb.LookupAffiliationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupAffiliationRequest::IsInitialized() const {
  return true;
}

void LookupAffiliationRequest::InternalSwap(LookupAffiliationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  facet_.InternalSwap(&other->facet_);
  swap(mask_, other->mask_);
}

std::string LookupAffiliationRequest::GetTypeName() const {
  return "affiliation_pb.LookupAffiliationRequest";
}


// ===================================================================

class LookupAffiliationResponse::_Internal {
 public:
};

LookupAffiliationResponse::LookupAffiliationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  affiliation_(arena),
  group_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:affiliation_pb.LookupAffiliationResponse)
}
LookupAffiliationResponse::LookupAffiliationResponse(const LookupAffiliationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      affiliation_(from.affiliation_),
      group_(from.group_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:affiliation_pb.LookupAffiliationResponse)
}

inline void LookupAffiliationResponse::SharedCtor() {
}

LookupAffiliationResponse::~LookupAffiliationResponse() {
  // @@protoc_insertion_point(destructor:affiliation_pb.LookupAffiliationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LookupAffiliationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LookupAffiliationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LookupAffiliationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:affiliation_pb.LookupAffiliationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  affiliation_.Clear();
  group_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LookupAffiliationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .affiliation_pb.Affiliation affiliation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_affiliation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .affiliation_pb.FacetGroup group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LookupAffiliationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:affiliation_pb.LookupAffiliationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .affiliation_pb.Affiliation affiliation = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_affiliation_size()); i < n; i++) {
    const auto& repfield = this->_internal_affiliation(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .affiliation_pb.FacetGroup group = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group_size()); i < n; i++) {
    const auto& repfield = this->_internal_group(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:affiliation_pb.LookupAffiliationResponse)
  return target;
}

size_t LookupAffiliationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:affiliation_pb.LookupAffiliationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .affiliation_pb.Affiliation affiliation = 1;
  total_size += 1UL * this->_internal_affiliation_size();
  for (const auto& msg : this->affiliation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .affiliation_pb.FacetGroup group = 2;
  total_size += 1UL * this->_internal_group_size();
  for (const auto& msg : this->group_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupAffiliationResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LookupAffiliationResponse*>(
      &from));
}

void LookupAffiliationResponse::MergeFrom(const LookupAffiliationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:affiliation_pb.LookupAffiliationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  affiliation_.MergeFrom(from.affiliation_);
  group_.MergeFrom(from.group_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LookupAffiliationResponse::CopyFrom(const LookupAffiliationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:affiliation_pb.LookupAffiliationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupAffiliationResponse::IsInitialized() const {
  return true;
}

void LookupAffiliationResponse::InternalSwap(LookupAffiliationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  affiliation_.InternalSwap(&other->affiliation_);
  group_.InternalSwap(&other->group_);
}

std::string LookupAffiliationResponse::GetTypeName() const {
  return "affiliation_pb.LookupAffiliationResponse";
}


// ===================================================================

class LookupAffiliationByHashPrefixRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<LookupAffiliationByHashPrefixRequest>()._has_bits_);
  static const ::affiliation_pb::LookupAffiliationMask& mask(const LookupAffiliationByHashPrefixRequest* msg);
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hash_prefix_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::affiliation_pb::LookupAffiliationMask&
LookupAffiliationByHashPrefixRequest::_Internal::mask(const LookupAffiliationByHashPrefixRequest* msg) {
  return *msg->mask_;
}
LookupAffiliationByHashPrefixRequest::LookupAffiliationByHashPrefixRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  hash_prefixes_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:affiliation_pb.LookupAffiliationByHashPrefixRequest)
}
LookupAffiliationByHashPrefixRequest::LookupAffiliationByHashPrefixRequest(const LookupAffiliationByHashPrefixRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      hash_prefixes_(from.hash_prefixes_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_mask()) {
    mask_ = new ::affiliation_pb::LookupAffiliationMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  hash_prefix_length_ = from.hash_prefix_length_;
  // @@protoc_insertion_point(copy_constructor:affiliation_pb.LookupAffiliationByHashPrefixRequest)
}

inline void LookupAffiliationByHashPrefixRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mask_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hash_prefix_length_) -
    reinterpret_cast<char*>(&mask_)) + sizeof(hash_prefix_length_));
}

LookupAffiliationByHashPrefixRequest::~LookupAffiliationByHashPrefixRequest() {
  // @@protoc_insertion_point(destructor:affiliation_pb.LookupAffiliationByHashPrefixRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LookupAffiliationByHashPrefixRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mask_;
}

void LookupAffiliationByHashPrefixRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LookupAffiliationByHashPrefixRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:affiliation_pb.LookupAffiliationByHashPrefixRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_prefixes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(mask_ != nullptr);
    mask_->Clear();
  }
  hash_prefix_length_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LookupAffiliationByHashPrefixRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .affiliation_pb.LookupAffiliationMask mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hash_prefix_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hash_prefix_length(&has_bits);
          hash_prefix_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 hash_prefixes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hash_prefixes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_hash_prefixes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LookupAffiliationByHashPrefixRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:affiliation_pb.LookupAffiliationByHashPrefixRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .affiliation_pb.LookupAffiliationMask mask = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mask(this),
        _Internal::mask(this).GetCachedSize(), target, stream);
  }

  // optional uint32 hash_prefix_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hash_prefix_length(), target);
  }

  // repeated uint64 hash_prefixes = 3;
  for (int i = 0, n = this->_internal_hash_prefixes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_hash_prefixes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:affiliation_pb.LookupAffiliationByHashPrefixRequest)
  return target;
}

size_t LookupAffiliationByHashPrefixRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:affiliation_pb.LookupAffiliationByHashPrefixRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 hash_prefixes = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->hash_prefixes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_hash_prefixes_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .affiliation_pb.LookupAffiliationMask mask = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mask_);
    }

    // optional uint32 hash_prefix_length = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hash_prefix_length());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupAffiliationByHashPrefixRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LookupAffiliationByHashPrefixRequest*>(
      &from));
}

void LookupAffiliationByHashPrefixRequest::MergeFrom(const LookupAffiliationByHashPrefixRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:affiliation_pb.LookupAffiliationByHashPrefixRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  hash_prefixes_.MergeFrom(from.hash_prefixes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_mask()->::affiliation_pb::LookupAffiliationMask::MergeFrom(from._internal_mask());
    }
    if (cached_has_bits & 0x00000002u) {
      hash_prefix_length_ = from.hash_prefix_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LookupAffiliationByHashPrefixRequest::CopyFrom(const LookupAffiliationByHashPrefixRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:affiliation_pb.LookupAffiliationByHashPrefixRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupAffiliationByHashPrefixRequest::IsInitialized() const {
  return true;
}

void LookupAffiliationByHashPrefixRequest::InternalSwap(LookupAffiliationByHashPrefixRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hash_prefixes_.InternalSwap(&other->hash_prefixes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LookupAffiliationByHashPrefixRequest, hash_prefix_length_)
      + sizeof(LookupAffiliationByHashPrefixRequest::hash_prefix_length_)
      - PROTOBUF_FIELD_OFFSET(LookupAffiliationByHashPrefixRequest, mask_)>(
          reinterpret_cast<char*>(&mask_),
          reinterpret_cast<char*>(&other->mask_));
}

std::string LookupAffiliationByHashPrefixRequest::GetTypeName() const {
  return "affiliation_pb.LookupAffiliationByHashPrefixRequest";
}


// ===================================================================

class LookupAffiliationByHashPrefixResponse::_Internal {
 public:
};

LookupAffiliationByHashPrefixResponse::LookupAffiliationByHashPrefixResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  affiliations_(arena),
  groups_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:affiliation_pb.LookupAffiliationByHashPrefixResponse)
}
LookupAffiliationByHashPrefixResponse::LookupAffiliationByHashPrefixResponse(const LookupAffiliationByHashPrefixResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      affiliations_(from.affiliations_),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:affiliation_pb.LookupAffiliationByHashPrefixResponse)
}

inline void LookupAffiliationByHashPrefixResponse::SharedCtor() {
}

LookupAffiliationByHashPrefixResponse::~LookupAffiliationByHashPrefixResponse() {
  // @@protoc_insertion_point(destructor:affiliation_pb.LookupAffiliationByHashPrefixResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LookupAffiliationByHashPrefixResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LookupAffiliationByHashPrefixResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LookupAffiliationByHashPrefixResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:affiliation_pb.LookupAffiliationByHashPrefixResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  affiliations_.Clear();
  groups_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LookupAffiliationByHashPrefixResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .affiliation_pb.Affiliation affiliations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_affiliations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .affiliation_pb.FacetGroup groups = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LookupAffiliationByHashPrefixResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:affiliation_pb.LookupAffiliationByHashPrefixResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .affiliation_pb.Affiliation affiliations = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_affiliations_size()); i < n; i++) {
    const auto& repfield = this->_internal_affiliations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .affiliation_pb.FacetGroup groups = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:affiliation_pb.LookupAffiliationByHashPrefixResponse)
  return target;
}

size_t LookupAffiliationByHashPrefixResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:affiliation_pb.LookupAffiliationByHashPrefixResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .affiliation_pb.Affiliation affiliations = 1;
  total_size += 1UL * this->_internal_affiliations_size();
  for (const auto& msg : this->affiliations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .affiliation_pb.FacetGroup groups = 2;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupAffiliationByHashPrefixResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LookupAffiliationByHashPrefixResponse*>(
      &from));
}

void LookupAffiliationByHashPrefixResponse::MergeFrom(const LookupAffiliationByHashPrefixResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:affiliation_pb.LookupAffiliationByHashPrefixResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  affiliations_.MergeFrom(from.affiliations_);
  groups_.MergeFrom(from.groups_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LookupAffiliationByHashPrefixResponse::CopyFrom(const LookupAffiliationByHashPrefixResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:affiliation_pb.LookupAffiliationByHashPrefixResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupAffiliationByHashPrefixResponse::IsInitialized() const {
  return true;
}

void LookupAffiliationByHashPrefixResponse::InternalSwap(LookupAffiliationByHashPrefixResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  affiliations_.InternalSwap(&other->affiliations_);
  groups_.InternalSwap(&other->groups_);
}

std::string LookupAffiliationByHashPrefixResponse::GetTypeName() const {
  return "affiliation_pb.LookupAffiliationByHashPrefixResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace affiliation_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::affiliation_pb::Affiliation*
Arena::CreateMaybeMessage< ::affiliation_pb::Affiliation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::affiliation_pb::Affiliation >(arena);
}
template<> PROTOBUF_NOINLINE ::affiliation_pb::Facet*
Arena::CreateMaybeMessage< ::affiliation_pb::Facet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::affiliation_pb::Facet >(arena);
}
template<> PROTOBUF_NOINLINE ::affiliation_pb::FacetGroup*
Arena::CreateMaybeMessage< ::affiliation_pb::FacetGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::affiliation_pb::FacetGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::affiliation_pb::GroupBrandingInfo*
Arena::CreateMaybeMessage< ::affiliation_pb::GroupBrandingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::affiliation_pb::GroupBrandingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::affiliation_pb::BrandingInfo*
Arena::CreateMaybeMessage< ::affiliation_pb::BrandingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::affiliation_pb::BrandingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::affiliation_pb::ChangePasswordInfo*
Arena::CreateMaybeMessage< ::affiliation_pb::ChangePasswordInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::affiliation_pb::ChangePasswordInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::affiliation_pb::LookupAffiliationMask*
Arena::CreateMaybeMessage< ::affiliation_pb::LookupAffiliationMask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::affiliation_pb::LookupAffiliationMask >(arena);
}
template<> PROTOBUF_NOINLINE ::affiliation_pb::LookupAffiliationRequest*
Arena::CreateMaybeMessage< ::affiliation_pb::LookupAffiliationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::affiliation_pb::LookupAffiliationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::affiliation_pb::LookupAffiliationResponse*
Arena::CreateMaybeMessage< ::affiliation_pb::LookupAffiliationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::affiliation_pb::LookupAffiliationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::affiliation_pb::LookupAffiliationByHashPrefixRequest*
Arena::CreateMaybeMessage< ::affiliation_pb::LookupAffiliationByHashPrefixRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::affiliation_pb::LookupAffiliationByHashPrefixRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::affiliation_pb::LookupAffiliationByHashPrefixResponse*
Arena::CreateMaybeMessage< ::affiliation_pb::LookupAffiliationByHashPrefixResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::affiliation_pb::LookupAffiliationByHashPrefixResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
