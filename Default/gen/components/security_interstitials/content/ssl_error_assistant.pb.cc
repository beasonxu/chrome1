// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_error_assistant.proto

#include "ssl_error_assistant.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace chrome_browser_ssl {
PROTOBUF_CONSTEXPR CaptivePortalCert::CaptivePortalCert(
    ::_pbi::ConstantInitialized)
  : sha256_hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CaptivePortalCertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CaptivePortalCertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CaptivePortalCertDefaultTypeInternal() {}
  union {
    CaptivePortalCert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CaptivePortalCertDefaultTypeInternal _CaptivePortalCert_default_instance_;
PROTOBUF_CONSTEXPR MITMSoftware::MITMSoftware(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , issuer_common_name_regex_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , issuer_organization_regex_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct MITMSoftwareDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MITMSoftwareDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MITMSoftwareDefaultTypeInternal() {}
  union {
    MITMSoftware _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MITMSoftwareDefaultTypeInternal _MITMSoftware_default_instance_;
PROTOBUF_CONSTEXPR DynamicInterstitial::DynamicInterstitial(
    ::_pbi::ConstantInitialized)
  : sha256_hash_()
  , issuer_common_name_regex_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , issuer_organization_regex_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mitm_software_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , support_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cert_error_(0)

  , interstitial_type_(0)

  , show_only_for_nonoverridable_errors_(false){}
struct DynamicInterstitialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DynamicInterstitialDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DynamicInterstitialDefaultTypeInternal() {}
  union {
    DynamicInterstitial _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DynamicInterstitialDefaultTypeInternal _DynamicInterstitial_default_instance_;
PROTOBUF_CONSTEXPR SSLErrorAssistantConfig::SSLErrorAssistantConfig(
    ::_pbi::ConstantInitialized)
  : captive_portal_cert_()
  , mitm_software_()
  , dynamic_interstitial_()
  , version_id_(0u){}
struct SSLErrorAssistantConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSLErrorAssistantConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSLErrorAssistantConfigDefaultTypeInternal() {}
  union {
    SSLErrorAssistantConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSLErrorAssistantConfigDefaultTypeInternal _SSLErrorAssistantConfig_default_instance_;
}  // namespace chrome_browser_ssl
namespace chrome_browser_ssl {
bool DynamicInterstitial_InterstitialPageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DynamicInterstitial_InterstitialPageType_strings[4] = {};

static const char DynamicInterstitial_InterstitialPageType_names[] =
  "INTERSTITIAL_PAGE_CAPTIVE_PORTAL"
  "INTERSTITIAL_PAGE_MITM_SOFTWARE"
  "INTERSTITIAL_PAGE_NONE"
  "INTERSTITIAL_PAGE_SSL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DynamicInterstitial_InterstitialPageType_entries[] = {
  { {DynamicInterstitial_InterstitialPageType_names + 0, 32}, 2 },
  { {DynamicInterstitial_InterstitialPageType_names + 32, 31}, 3 },
  { {DynamicInterstitial_InterstitialPageType_names + 63, 22}, 0 },
  { {DynamicInterstitial_InterstitialPageType_names + 85, 21}, 1 },
};

static const int DynamicInterstitial_InterstitialPageType_entries_by_number[] = {
  2, // 0 -> INTERSTITIAL_PAGE_NONE
  3, // 1 -> INTERSTITIAL_PAGE_SSL
  0, // 2 -> INTERSTITIAL_PAGE_CAPTIVE_PORTAL
  1, // 3 -> INTERSTITIAL_PAGE_MITM_SOFTWARE
};

const std::string& DynamicInterstitial_InterstitialPageType_Name(
    DynamicInterstitial_InterstitialPageType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DynamicInterstitial_InterstitialPageType_entries,
          DynamicInterstitial_InterstitialPageType_entries_by_number,
          4, DynamicInterstitial_InterstitialPageType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DynamicInterstitial_InterstitialPageType_entries,
      DynamicInterstitial_InterstitialPageType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DynamicInterstitial_InterstitialPageType_strings[idx].get();
}
bool DynamicInterstitial_InterstitialPageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DynamicInterstitial_InterstitialPageType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DynamicInterstitial_InterstitialPageType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DynamicInterstitial_InterstitialPageType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DynamicInterstitial_InterstitialPageType DynamicInterstitial::INTERSTITIAL_PAGE_NONE;
constexpr DynamicInterstitial_InterstitialPageType DynamicInterstitial::INTERSTITIAL_PAGE_SSL;
constexpr DynamicInterstitial_InterstitialPageType DynamicInterstitial::INTERSTITIAL_PAGE_CAPTIVE_PORTAL;
constexpr DynamicInterstitial_InterstitialPageType DynamicInterstitial::INTERSTITIAL_PAGE_MITM_SOFTWARE;
constexpr DynamicInterstitial_InterstitialPageType DynamicInterstitial::InterstitialPageType_MIN;
constexpr DynamicInterstitial_InterstitialPageType DynamicInterstitial::InterstitialPageType_MAX;
constexpr int DynamicInterstitial::InterstitialPageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool DynamicInterstitial_CertError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DynamicInterstitial_CertError_strings[17] = {};

static const char DynamicInterstitial_CertError_names[] =
  "ERR_CERTIFICATE_TRANSPARENCY_REQUIRED"
  "ERR_CERT_AUTHORITY_INVALID"
  "ERR_CERT_COMMON_NAME_INVALID"
  "ERR_CERT_DATE_INVALID"
  "ERR_CERT_INVALID"
  "ERR_CERT_KNOWN_INTERCEPTION_BLOCKED"
  "ERR_CERT_NAME_CONSTRAINT_VIOLATION"
  "ERR_CERT_NON_UNIQUE_NAME"
  "ERR_CERT_NO_REVOCATION_MECHANISM"
  "ERR_CERT_REVOKED"
  "ERR_CERT_SYMANTEC_LEGACY"
  "ERR_CERT_UNABLE_TO_CHECK_REVOCATION"
  "ERR_CERT_VALIDITY_TOO_LONG"
  "ERR_CERT_WEAK_KEY"
  "ERR_CERT_WEAK_SIGNATURE_ALGORITHM"
  "ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN"
  "UNKNOWN_CERT_ERROR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DynamicInterstitial_CertError_entries[] = {
  { {DynamicInterstitial_CertError_names + 0, 37}, 14 },
  { {DynamicInterstitial_CertError_names + 37, 26}, 4 },
  { {DynamicInterstitial_CertError_names + 63, 28}, 5 },
  { {DynamicInterstitial_CertError_names + 91, 21}, 9 },
  { {DynamicInterstitial_CertError_names + 112, 16}, 2 },
  { {DynamicInterstitial_CertError_names + 128, 35}, 16 },
  { {DynamicInterstitial_CertError_names + 163, 34}, 6 },
  { {DynamicInterstitial_CertError_names + 197, 24}, 13 },
  { {DynamicInterstitial_CertError_names + 221, 32}, 12 },
  { {DynamicInterstitial_CertError_names + 253, 16}, 1 },
  { {DynamicInterstitial_CertError_names + 269, 24}, 15 },
  { {DynamicInterstitial_CertError_names + 293, 35}, 11 },
  { {DynamicInterstitial_CertError_names + 328, 26}, 10 },
  { {DynamicInterstitial_CertError_names + 354, 17}, 8 },
  { {DynamicInterstitial_CertError_names + 371, 33}, 7 },
  { {DynamicInterstitial_CertError_names + 404, 36}, 3 },
  { {DynamicInterstitial_CertError_names + 440, 18}, 0 },
};

static const int DynamicInterstitial_CertError_entries_by_number[] = {
  16, // 0 -> UNKNOWN_CERT_ERROR
  9, // 1 -> ERR_CERT_REVOKED
  4, // 2 -> ERR_CERT_INVALID
  15, // 3 -> ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN
  1, // 4 -> ERR_CERT_AUTHORITY_INVALID
  2, // 5 -> ERR_CERT_COMMON_NAME_INVALID
  6, // 6 -> ERR_CERT_NAME_CONSTRAINT_VIOLATION
  14, // 7 -> ERR_CERT_WEAK_SIGNATURE_ALGORITHM
  13, // 8 -> ERR_CERT_WEAK_KEY
  3, // 9 -> ERR_CERT_DATE_INVALID
  12, // 10 -> ERR_CERT_VALIDITY_TOO_LONG
  11, // 11 -> ERR_CERT_UNABLE_TO_CHECK_REVOCATION
  8, // 12 -> ERR_CERT_NO_REVOCATION_MECHANISM
  7, // 13 -> ERR_CERT_NON_UNIQUE_NAME
  0, // 14 -> ERR_CERTIFICATE_TRANSPARENCY_REQUIRED
  10, // 15 -> ERR_CERT_SYMANTEC_LEGACY
  5, // 16 -> ERR_CERT_KNOWN_INTERCEPTION_BLOCKED
};

const std::string& DynamicInterstitial_CertError_Name(
    DynamicInterstitial_CertError value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DynamicInterstitial_CertError_entries,
          DynamicInterstitial_CertError_entries_by_number,
          17, DynamicInterstitial_CertError_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DynamicInterstitial_CertError_entries,
      DynamicInterstitial_CertError_entries_by_number,
      17, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DynamicInterstitial_CertError_strings[idx].get();
}
bool DynamicInterstitial_CertError_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DynamicInterstitial_CertError* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DynamicInterstitial_CertError_entries, 17, name, &int_value);
  if (success) {
    *value = static_cast<DynamicInterstitial_CertError>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DynamicInterstitial_CertError DynamicInterstitial::UNKNOWN_CERT_ERROR;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_REVOKED;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_INVALID;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_AUTHORITY_INVALID;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_COMMON_NAME_INVALID;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_NAME_CONSTRAINT_VIOLATION;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_WEAK_SIGNATURE_ALGORITHM;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_WEAK_KEY;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_DATE_INVALID;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_VALIDITY_TOO_LONG;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_UNABLE_TO_CHECK_REVOCATION;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_NO_REVOCATION_MECHANISM;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_NON_UNIQUE_NAME;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERTIFICATE_TRANSPARENCY_REQUIRED;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_SYMANTEC_LEGACY;
constexpr DynamicInterstitial_CertError DynamicInterstitial::ERR_CERT_KNOWN_INTERCEPTION_BLOCKED;
constexpr DynamicInterstitial_CertError DynamicInterstitial::CertError_MIN;
constexpr DynamicInterstitial_CertError DynamicInterstitial::CertError_MAX;
constexpr int DynamicInterstitial::CertError_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CaptivePortalCert::_Internal {
 public:
  using HasBits = decltype(std::declval<CaptivePortalCert>()._has_bits_);
  static void set_has_sha256_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CaptivePortalCert::CaptivePortalCert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_ssl.CaptivePortalCert)
}
CaptivePortalCert::CaptivePortalCert(const CaptivePortalCert& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  sha256_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sha256_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha256_hash()) {
    sha256_hash_.Set(from._internal_sha256_hash(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_ssl.CaptivePortalCert)
}

inline void CaptivePortalCert::SharedCtor() {
sha256_hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sha256_hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CaptivePortalCert::~CaptivePortalCert() {
  // @@protoc_insertion_point(destructor:chrome_browser_ssl.CaptivePortalCert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CaptivePortalCert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sha256_hash_.Destroy();
}

void CaptivePortalCert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CaptivePortalCert::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_ssl.CaptivePortalCert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sha256_hash_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CaptivePortalCert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string sha256_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sha256_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CaptivePortalCert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_ssl.CaptivePortalCert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sha256_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sha256_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_ssl.CaptivePortalCert)
  return target;
}

size_t CaptivePortalCert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_ssl.CaptivePortalCert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string sha256_hash = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sha256_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CaptivePortalCert::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CaptivePortalCert*>(
      &from));
}

void CaptivePortalCert::MergeFrom(const CaptivePortalCert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_ssl.CaptivePortalCert)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sha256_hash()) {
    _internal_set_sha256_hash(from._internal_sha256_hash());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CaptivePortalCert::CopyFrom(const CaptivePortalCert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_ssl.CaptivePortalCert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptivePortalCert::IsInitialized() const {
  return true;
}

void CaptivePortalCert::InternalSwap(CaptivePortalCert* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sha256_hash_, lhs_arena,
      &other->sha256_hash_, rhs_arena
  );
}

std::string CaptivePortalCert::GetTypeName() const {
  return "chrome_browser_ssl.CaptivePortalCert";
}


// ===================================================================

class MITMSoftware::_Internal {
 public:
  using HasBits = decltype(std::declval<MITMSoftware>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_issuer_common_name_regex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_issuer_organization_regex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MITMSoftware::MITMSoftware(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_ssl.MITMSoftware)
}
MITMSoftware::MITMSoftware(const MITMSoftware& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  issuer_common_name_regex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    issuer_common_name_regex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_issuer_common_name_regex()) {
    issuer_common_name_regex_.Set(from._internal_issuer_common_name_regex(), 
      GetArenaForAllocation());
  }
  issuer_organization_regex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    issuer_organization_regex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_issuer_organization_regex()) {
    issuer_organization_regex_.Set(from._internal_issuer_organization_regex(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_ssl.MITMSoftware)
}

inline void MITMSoftware::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
issuer_common_name_regex_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  issuer_common_name_regex_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
issuer_organization_regex_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  issuer_organization_regex_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MITMSoftware::~MITMSoftware() {
  // @@protoc_insertion_point(destructor:chrome_browser_ssl.MITMSoftware)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MITMSoftware::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  issuer_common_name_regex_.Destroy();
  issuer_organization_regex_.Destroy();
}

void MITMSoftware::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MITMSoftware::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_ssl.MITMSoftware)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      issuer_common_name_regex_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      issuer_organization_regex_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MITMSoftware::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string issuer_common_name_regex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_issuer_common_name_regex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string issuer_organization_regex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_issuer_organization_regex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MITMSoftware::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_ssl.MITMSoftware)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string issuer_common_name_regex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_issuer_common_name_regex(), target);
  }

  // optional string issuer_organization_regex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_issuer_organization_regex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_ssl.MITMSoftware)
  return target;
}

size_t MITMSoftware::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_ssl.MITMSoftware)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string issuer_common_name_regex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_issuer_common_name_regex());
    }

    // optional string issuer_organization_regex = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_issuer_organization_regex());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MITMSoftware::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MITMSoftware*>(
      &from));
}

void MITMSoftware::MergeFrom(const MITMSoftware& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_ssl.MITMSoftware)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_issuer_common_name_regex(from._internal_issuer_common_name_regex());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_issuer_organization_regex(from._internal_issuer_organization_regex());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MITMSoftware::CopyFrom(const MITMSoftware& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_ssl.MITMSoftware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MITMSoftware::IsInitialized() const {
  return true;
}

void MITMSoftware::InternalSwap(MITMSoftware* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &issuer_common_name_regex_, lhs_arena,
      &other->issuer_common_name_regex_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &issuer_organization_regex_, lhs_arena,
      &other->issuer_organization_regex_, rhs_arena
  );
}

std::string MITMSoftware::GetTypeName() const {
  return "chrome_browser_ssl.MITMSoftware";
}


// ===================================================================

class DynamicInterstitial::_Internal {
 public:
  using HasBits = decltype(std::declval<DynamicInterstitial>()._has_bits_);
  static void set_has_issuer_common_name_regex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_issuer_organization_regex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mitm_software_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cert_error(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_interstitial_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_support_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_show_only_for_nonoverridable_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

DynamicInterstitial::DynamicInterstitial(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  sha256_hash_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_ssl.DynamicInterstitial)
}
DynamicInterstitial::DynamicInterstitial(const DynamicInterstitial& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      sha256_hash_(from.sha256_hash_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  issuer_common_name_regex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    issuer_common_name_regex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_issuer_common_name_regex()) {
    issuer_common_name_regex_.Set(from._internal_issuer_common_name_regex(), 
      GetArenaForAllocation());
  }
  issuer_organization_regex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    issuer_organization_regex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_issuer_organization_regex()) {
    issuer_organization_regex_.Set(from._internal_issuer_organization_regex(), 
      GetArenaForAllocation());
  }
  mitm_software_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mitm_software_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mitm_software_name()) {
    mitm_software_name_.Set(from._internal_mitm_software_name(), 
      GetArenaForAllocation());
  }
  support_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    support_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_support_url()) {
    support_url_.Set(from._internal_support_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&cert_error_, &from.cert_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_only_for_nonoverridable_errors_) -
    reinterpret_cast<char*>(&cert_error_)) + sizeof(show_only_for_nonoverridable_errors_));
  // @@protoc_insertion_point(copy_constructor:chrome_browser_ssl.DynamicInterstitial)
}

inline void DynamicInterstitial::SharedCtor() {
issuer_common_name_regex_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  issuer_common_name_regex_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
issuer_organization_regex_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  issuer_organization_regex_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mitm_software_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mitm_software_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
support_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  support_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cert_error_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&show_only_for_nonoverridable_errors_) -
    reinterpret_cast<char*>(&cert_error_)) + sizeof(show_only_for_nonoverridable_errors_));
}

DynamicInterstitial::~DynamicInterstitial() {
  // @@protoc_insertion_point(destructor:chrome_browser_ssl.DynamicInterstitial)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DynamicInterstitial::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  issuer_common_name_regex_.Destroy();
  issuer_organization_regex_.Destroy();
  mitm_software_name_.Destroy();
  support_url_.Destroy();
}

void DynamicInterstitial::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DynamicInterstitial::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_ssl.DynamicInterstitial)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sha256_hash_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      issuer_common_name_regex_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      issuer_organization_regex_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      mitm_software_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      support_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&cert_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_only_for_nonoverridable_errors_) -
        reinterpret_cast<char*>(&cert_error_)) + sizeof(show_only_for_nonoverridable_errors_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DynamicInterstitial::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string sha256_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sha256_hash();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string issuer_common_name_regex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_issuer_common_name_regex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string issuer_organization_regex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_issuer_organization_regex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mitm_software_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mitm_software_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .chrome_browser_ssl.DynamicInterstitial.CertError cert_error = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::chrome_browser_ssl::DynamicInterstitial_CertError_IsValid(val))) {
            _internal_set_cert_error(static_cast<::chrome_browser_ssl::DynamicInterstitial_CertError>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .chrome_browser_ssl.DynamicInterstitial.InterstitialPageType interstitial_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType_IsValid(val))) {
            _internal_set_interstitial_type(static_cast<::chrome_browser_ssl::DynamicInterstitial_InterstitialPageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string support_url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_support_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_only_for_nonoverridable_errors = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_show_only_for_nonoverridable_errors(&has_bits);
          show_only_for_nonoverridable_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DynamicInterstitial::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_ssl.DynamicInterstitial)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string sha256_hash = 1;
  for (int i = 0, n = this->_internal_sha256_hash_size(); i < n; i++) {
    const auto& s = this->_internal_sha256_hash(i);
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string issuer_common_name_regex = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_issuer_common_name_regex(), target);
  }

  // optional string issuer_organization_regex = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_issuer_organization_regex(), target);
  }

  // optional string mitm_software_name = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mitm_software_name(), target);
  }

  // optional .chrome_browser_ssl.DynamicInterstitial.CertError cert_error = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_cert_error(), target);
  }

  // optional .chrome_browser_ssl.DynamicInterstitial.InterstitialPageType interstitial_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_interstitial_type(), target);
  }

  // optional string support_url = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_support_url(), target);
  }

  // optional bool show_only_for_nonoverridable_errors = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_show_only_for_nonoverridable_errors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_ssl.DynamicInterstitial)
  return target;
}

size_t DynamicInterstitial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_ssl.DynamicInterstitial)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string sha256_hash = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(sha256_hash_.size());
  for (int i = 0, n = sha256_hash_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      sha256_hash_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string issuer_common_name_regex = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_issuer_common_name_regex());
    }

    // optional string issuer_organization_regex = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_issuer_organization_regex());
    }

    // optional string mitm_software_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mitm_software_name());
    }

    // optional string support_url = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_support_url());
    }

    // optional .chrome_browser_ssl.DynamicInterstitial.CertError cert_error = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_cert_error());
    }

    // optional .chrome_browser_ssl.DynamicInterstitial.InterstitialPageType interstitial_type = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_interstitial_type());
    }

    // optional bool show_only_for_nonoverridable_errors = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicInterstitial::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DynamicInterstitial*>(
      &from));
}

void DynamicInterstitial::MergeFrom(const DynamicInterstitial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_ssl.DynamicInterstitial)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sha256_hash_.MergeFrom(from.sha256_hash_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_issuer_common_name_regex(from._internal_issuer_common_name_regex());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_issuer_organization_regex(from._internal_issuer_organization_regex());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_mitm_software_name(from._internal_mitm_software_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_support_url(from._internal_support_url());
    }
    if (cached_has_bits & 0x00000010u) {
      cert_error_ = from.cert_error_;
    }
    if (cached_has_bits & 0x00000020u) {
      interstitial_type_ = from.interstitial_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      show_only_for_nonoverridable_errors_ = from.show_only_for_nonoverridable_errors_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DynamicInterstitial::CopyFrom(const DynamicInterstitial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_ssl.DynamicInterstitial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicInterstitial::IsInitialized() const {
  return true;
}

void DynamicInterstitial::InternalSwap(DynamicInterstitial* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sha256_hash_.InternalSwap(&other->sha256_hash_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &issuer_common_name_regex_, lhs_arena,
      &other->issuer_common_name_regex_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &issuer_organization_regex_, lhs_arena,
      &other->issuer_organization_regex_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mitm_software_name_, lhs_arena,
      &other->mitm_software_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &support_url_, lhs_arena,
      &other->support_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DynamicInterstitial, show_only_for_nonoverridable_errors_)
      + sizeof(DynamicInterstitial::show_only_for_nonoverridable_errors_)
      - PROTOBUF_FIELD_OFFSET(DynamicInterstitial, cert_error_)>(
          reinterpret_cast<char*>(&cert_error_),
          reinterpret_cast<char*>(&other->cert_error_));
}

std::string DynamicInterstitial::GetTypeName() const {
  return "chrome_browser_ssl.DynamicInterstitial";
}


// ===================================================================

class SSLErrorAssistantConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SSLErrorAssistantConfig>()._has_bits_);
  static void set_has_version_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SSLErrorAssistantConfig::SSLErrorAssistantConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  captive_portal_cert_(arena),
  mitm_software_(arena),
  dynamic_interstitial_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_ssl.SSLErrorAssistantConfig)
}
SSLErrorAssistantConfig::SSLErrorAssistantConfig(const SSLErrorAssistantConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      captive_portal_cert_(from.captive_portal_cert_),
      mitm_software_(from.mitm_software_),
      dynamic_interstitial_(from.dynamic_interstitial_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  version_id_ = from.version_id_;
  // @@protoc_insertion_point(copy_constructor:chrome_browser_ssl.SSLErrorAssistantConfig)
}

inline void SSLErrorAssistantConfig::SharedCtor() {
version_id_ = 0u;
}

SSLErrorAssistantConfig::~SSLErrorAssistantConfig() {
  // @@protoc_insertion_point(destructor:chrome_browser_ssl.SSLErrorAssistantConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSLErrorAssistantConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SSLErrorAssistantConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSLErrorAssistantConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_ssl.SSLErrorAssistantConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  captive_portal_cert_.Clear();
  mitm_software_.Clear();
  dynamic_interstitial_.Clear();
  version_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SSLErrorAssistantConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 version_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version_id(&has_bits);
          version_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .chrome_browser_ssl.CaptivePortalCert captive_portal_cert = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_captive_portal_cert(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .chrome_browser_ssl.MITMSoftware mitm_software = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mitm_software(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .chrome_browser_ssl.DynamicInterstitial dynamic_interstitial = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dynamic_interstitial(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSLErrorAssistantConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_ssl.SSLErrorAssistantConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version_id(), target);
  }

  // repeated .chrome_browser_ssl.CaptivePortalCert captive_portal_cert = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_captive_portal_cert_size()); i < n; i++) {
    const auto& repfield = this->_internal_captive_portal_cert(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .chrome_browser_ssl.MITMSoftware mitm_software = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mitm_software_size()); i < n; i++) {
    const auto& repfield = this->_internal_mitm_software(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .chrome_browser_ssl.DynamicInterstitial dynamic_interstitial = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dynamic_interstitial_size()); i < n; i++) {
    const auto& repfield = this->_internal_dynamic_interstitial(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_ssl.SSLErrorAssistantConfig)
  return target;
}

size_t SSLErrorAssistantConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_ssl.SSLErrorAssistantConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chrome_browser_ssl.CaptivePortalCert captive_portal_cert = 2;
  total_size += 1UL * this->_internal_captive_portal_cert_size();
  for (const auto& msg : this->captive_portal_cert_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .chrome_browser_ssl.MITMSoftware mitm_software = 3;
  total_size += 1UL * this->_internal_mitm_software_size();
  for (const auto& msg : this->mitm_software_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .chrome_browser_ssl.DynamicInterstitial dynamic_interstitial = 4;
  total_size += 1UL * this->_internal_dynamic_interstitial_size();
  for (const auto& msg : this->dynamic_interstitial_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 version_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSLErrorAssistantConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SSLErrorAssistantConfig*>(
      &from));
}

void SSLErrorAssistantConfig::MergeFrom(const SSLErrorAssistantConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_ssl.SSLErrorAssistantConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  captive_portal_cert_.MergeFrom(from.captive_portal_cert_);
  mitm_software_.MergeFrom(from.mitm_software_);
  dynamic_interstitial_.MergeFrom(from.dynamic_interstitial_);
  if (from._internal_has_version_id()) {
    _internal_set_version_id(from._internal_version_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SSLErrorAssistantConfig::CopyFrom(const SSLErrorAssistantConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_ssl.SSLErrorAssistantConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSLErrorAssistantConfig::IsInitialized() const {
  return true;
}

void SSLErrorAssistantConfig::InternalSwap(SSLErrorAssistantConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  captive_portal_cert_.InternalSwap(&other->captive_portal_cert_);
  mitm_software_.InternalSwap(&other->mitm_software_);
  dynamic_interstitial_.InternalSwap(&other->dynamic_interstitial_);
  swap(version_id_, other->version_id_);
}

std::string SSLErrorAssistantConfig::GetTypeName() const {
  return "chrome_browser_ssl.SSLErrorAssistantConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chrome_browser_ssl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chrome_browser_ssl::CaptivePortalCert*
Arena::CreateMaybeMessage< ::chrome_browser_ssl::CaptivePortalCert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_ssl::CaptivePortalCert >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_ssl::MITMSoftware*
Arena::CreateMaybeMessage< ::chrome_browser_ssl::MITMSoftware >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_ssl::MITMSoftware >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_ssl::DynamicInterstitial*
Arena::CreateMaybeMessage< ::chrome_browser_ssl::DynamicInterstitial >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_ssl::DynamicInterstitial >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_ssl::SSLErrorAssistantConfig*
Arena::CreateMaybeMessage< ::chrome_browser_ssl::SSLErrorAssistantConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_ssl::SSLErrorAssistantConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
