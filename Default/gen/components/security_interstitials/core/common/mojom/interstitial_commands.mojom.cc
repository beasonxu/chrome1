// components/security_interstitials/core/common/mojom/interstitial_commands.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "components/security_interstitials/core/common/mojom/interstitial_commands.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/security_interstitials/core/common/mojom/interstitial_commands.mojom-params-data.h"
#include "components/security_interstitials/core/common/mojom/interstitial_commands.mojom-shared-message-ids.h"

#include "components/security_interstitials/core/common/mojom/interstitial_commands.mojom-import-headers.h"
#include "components/security_interstitials/core/common/mojom/interstitial_commands.mojom-test-utils.h"


#ifndef COMPONENTS_SECURITY_INTERSTITIALS_CORE_COMMON_MOJOM_INTERSTITIAL_COMMANDS_MOJOM_JUMBO_H_
#define COMPONENTS_SECURITY_INTERSTITIALS_CORE_COMMON_MOJOM_INTERSTITIAL_COMMANDS_MOJOM_JUMBO_H_
#endif



namespace security_interstitials {
namespace mojom {
const char InterstitialCommands::Name_[] = "security_interstitials.mojom.InterstitialCommands";

InterstitialCommands::IPCStableHashFunction InterstitialCommands::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kInterstitialCommands_DontProceed_Name: {
      return &InterstitialCommands::DontProceed_Sym::IPCStableHash;
    }
    case internal::kInterstitialCommands_Proceed_Name: {
      return &InterstitialCommands::Proceed_Sym::IPCStableHash;
    }
    case internal::kInterstitialCommands_ShowMoreSection_Name: {
      return &InterstitialCommands::ShowMoreSection_Sym::IPCStableHash;
    }
    case internal::kInterstitialCommands_OpenHelpCenter_Name: {
      return &InterstitialCommands::OpenHelpCenter_Sym::IPCStableHash;
    }
    case internal::kInterstitialCommands_OpenDiagnostic_Name: {
      return &InterstitialCommands::OpenDiagnostic_Sym::IPCStableHash;
    }
    case internal::kInterstitialCommands_Reload_Name: {
      return &InterstitialCommands::Reload_Sym::IPCStableHash;
    }
    case internal::kInterstitialCommands_OpenDateSettings_Name: {
      return &InterstitialCommands::OpenDateSettings_Sym::IPCStableHash;
    }
    case internal::kInterstitialCommands_OpenLogin_Name: {
      return &InterstitialCommands::OpenLogin_Sym::IPCStableHash;
    }
    case internal::kInterstitialCommands_DoReport_Name: {
      return &InterstitialCommands::DoReport_Sym::IPCStableHash;
    }
    case internal::kInterstitialCommands_DontReport_Name: {
      return &InterstitialCommands::DontReport_Sym::IPCStableHash;
    }
    case internal::kInterstitialCommands_OpenReportingPrivacy_Name: {
      return &InterstitialCommands::OpenReportingPrivacy_Sym::IPCStableHash;
    }
    case internal::kInterstitialCommands_OpenWhitepaper_Name: {
      return &InterstitialCommands::OpenWhitepaper_Sym::IPCStableHash;
    }
    case internal::kInterstitialCommands_ReportPhishingError_Name: {
      return &InterstitialCommands::ReportPhishingError_Sym::IPCStableHash;
    }
    case internal::kInterstitialCommands_OpenEnhancedProtectionSettings_Name: {
      return &InterstitialCommands::OpenEnhancedProtectionSettings_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* InterstitialCommands::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kInterstitialCommands_DontProceed_Name:
            return "Receive security_interstitials::mojom::InterstitialCommands::DontProceed";
      case internal::kInterstitialCommands_Proceed_Name:
            return "Receive security_interstitials::mojom::InterstitialCommands::Proceed";
      case internal::kInterstitialCommands_ShowMoreSection_Name:
            return "Receive security_interstitials::mojom::InterstitialCommands::ShowMoreSection";
      case internal::kInterstitialCommands_OpenHelpCenter_Name:
            return "Receive security_interstitials::mojom::InterstitialCommands::OpenHelpCenter";
      case internal::kInterstitialCommands_OpenDiagnostic_Name:
            return "Receive security_interstitials::mojom::InterstitialCommands::OpenDiagnostic";
      case internal::kInterstitialCommands_Reload_Name:
            return "Receive security_interstitials::mojom::InterstitialCommands::Reload";
      case internal::kInterstitialCommands_OpenDateSettings_Name:
            return "Receive security_interstitials::mojom::InterstitialCommands::OpenDateSettings";
      case internal::kInterstitialCommands_OpenLogin_Name:
            return "Receive security_interstitials::mojom::InterstitialCommands::OpenLogin";
      case internal::kInterstitialCommands_DoReport_Name:
            return "Receive security_interstitials::mojom::InterstitialCommands::DoReport";
      case internal::kInterstitialCommands_DontReport_Name:
            return "Receive security_interstitials::mojom::InterstitialCommands::DontReport";
      case internal::kInterstitialCommands_OpenReportingPrivacy_Name:
            return "Receive security_interstitials::mojom::InterstitialCommands::OpenReportingPrivacy";
      case internal::kInterstitialCommands_OpenWhitepaper_Name:
            return "Receive security_interstitials::mojom::InterstitialCommands::OpenWhitepaper";
      case internal::kInterstitialCommands_ReportPhishingError_Name:
            return "Receive security_interstitials::mojom::InterstitialCommands::ReportPhishingError";
      case internal::kInterstitialCommands_OpenEnhancedProtectionSettings_Name:
            return "Receive security_interstitials::mojom::InterstitialCommands::OpenEnhancedProtectionSettings";
    }
  } else {
    switch (message.name()) {
      case internal::kInterstitialCommands_DontProceed_Name:
            return "Receive reply security_interstitials::mojom::InterstitialCommands::DontProceed";
      case internal::kInterstitialCommands_Proceed_Name:
            return "Receive reply security_interstitials::mojom::InterstitialCommands::Proceed";
      case internal::kInterstitialCommands_ShowMoreSection_Name:
            return "Receive reply security_interstitials::mojom::InterstitialCommands::ShowMoreSection";
      case internal::kInterstitialCommands_OpenHelpCenter_Name:
            return "Receive reply security_interstitials::mojom::InterstitialCommands::OpenHelpCenter";
      case internal::kInterstitialCommands_OpenDiagnostic_Name:
            return "Receive reply security_interstitials::mojom::InterstitialCommands::OpenDiagnostic";
      case internal::kInterstitialCommands_Reload_Name:
            return "Receive reply security_interstitials::mojom::InterstitialCommands::Reload";
      case internal::kInterstitialCommands_OpenDateSettings_Name:
            return "Receive reply security_interstitials::mojom::InterstitialCommands::OpenDateSettings";
      case internal::kInterstitialCommands_OpenLogin_Name:
            return "Receive reply security_interstitials::mojom::InterstitialCommands::OpenLogin";
      case internal::kInterstitialCommands_DoReport_Name:
            return "Receive reply security_interstitials::mojom::InterstitialCommands::DoReport";
      case internal::kInterstitialCommands_DontReport_Name:
            return "Receive reply security_interstitials::mojom::InterstitialCommands::DontReport";
      case internal::kInterstitialCommands_OpenReportingPrivacy_Name:
            return "Receive reply security_interstitials::mojom::InterstitialCommands::OpenReportingPrivacy";
      case internal::kInterstitialCommands_OpenWhitepaper_Name:
            return "Receive reply security_interstitials::mojom::InterstitialCommands::OpenWhitepaper";
      case internal::kInterstitialCommands_ReportPhishingError_Name:
            return "Receive reply security_interstitials::mojom::InterstitialCommands::ReportPhishingError";
      case internal::kInterstitialCommands_OpenEnhancedProtectionSettings_Name:
            return "Receive reply security_interstitials::mojom::InterstitialCommands::OpenEnhancedProtectionSettings";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t InterstitialCommands::DontProceed_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)security_interstitials::mojom::InterstitialCommands::DontProceed");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t InterstitialCommands::Proceed_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)security_interstitials::mojom::InterstitialCommands::Proceed");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t InterstitialCommands::ShowMoreSection_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)security_interstitials::mojom::InterstitialCommands::ShowMoreSection");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t InterstitialCommands::OpenHelpCenter_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)security_interstitials::mojom::InterstitialCommands::OpenHelpCenter");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t InterstitialCommands::OpenDiagnostic_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)security_interstitials::mojom::InterstitialCommands::OpenDiagnostic");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t InterstitialCommands::Reload_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)security_interstitials::mojom::InterstitialCommands::Reload");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t InterstitialCommands::OpenDateSettings_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)security_interstitials::mojom::InterstitialCommands::OpenDateSettings");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t InterstitialCommands::OpenLogin_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)security_interstitials::mojom::InterstitialCommands::OpenLogin");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t InterstitialCommands::DoReport_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)security_interstitials::mojom::InterstitialCommands::DoReport");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t InterstitialCommands::DontReport_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)security_interstitials::mojom::InterstitialCommands::DontReport");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t InterstitialCommands::OpenReportingPrivacy_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)security_interstitials::mojom::InterstitialCommands::OpenReportingPrivacy");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t InterstitialCommands::OpenWhitepaper_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)security_interstitials::mojom::InterstitialCommands::OpenWhitepaper");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t InterstitialCommands::ReportPhishingError_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)security_interstitials::mojom::InterstitialCommands::ReportPhishingError");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t InterstitialCommands::OpenEnhancedProtectionSettings_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)security_interstitials::mojom::InterstitialCommands::OpenEnhancedProtectionSettings");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

InterstitialCommandsProxy::InterstitialCommandsProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void InterstitialCommandsProxy::DontProceed(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send security_interstitials::mojom::InterstitialCommands::DontProceed");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterstitialCommands_DontProceed_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::security_interstitials::mojom::internal::InterstitialCommands_DontProceed_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterstitialCommands::Name_);
  message.set_method_name("DontProceed");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void InterstitialCommandsProxy::Proceed(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send security_interstitials::mojom::InterstitialCommands::Proceed");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterstitialCommands_Proceed_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::security_interstitials::mojom::internal::InterstitialCommands_Proceed_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterstitialCommands::Name_);
  message.set_method_name("Proceed");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void InterstitialCommandsProxy::ShowMoreSection(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send security_interstitials::mojom::InterstitialCommands::ShowMoreSection");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterstitialCommands_ShowMoreSection_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::security_interstitials::mojom::internal::InterstitialCommands_ShowMoreSection_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterstitialCommands::Name_);
  message.set_method_name("ShowMoreSection");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void InterstitialCommandsProxy::OpenHelpCenter(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send security_interstitials::mojom::InterstitialCommands::OpenHelpCenter");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterstitialCommands_OpenHelpCenter_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::security_interstitials::mojom::internal::InterstitialCommands_OpenHelpCenter_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterstitialCommands::Name_);
  message.set_method_name("OpenHelpCenter");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void InterstitialCommandsProxy::OpenDiagnostic(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send security_interstitials::mojom::InterstitialCommands::OpenDiagnostic");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterstitialCommands_OpenDiagnostic_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::security_interstitials::mojom::internal::InterstitialCommands_OpenDiagnostic_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterstitialCommands::Name_);
  message.set_method_name("OpenDiagnostic");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void InterstitialCommandsProxy::Reload(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send security_interstitials::mojom::InterstitialCommands::Reload");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterstitialCommands_Reload_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::security_interstitials::mojom::internal::InterstitialCommands_Reload_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterstitialCommands::Name_);
  message.set_method_name("Reload");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void InterstitialCommandsProxy::OpenDateSettings(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send security_interstitials::mojom::InterstitialCommands::OpenDateSettings");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterstitialCommands_OpenDateSettings_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::security_interstitials::mojom::internal::InterstitialCommands_OpenDateSettings_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterstitialCommands::Name_);
  message.set_method_name("OpenDateSettings");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void InterstitialCommandsProxy::OpenLogin(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send security_interstitials::mojom::InterstitialCommands::OpenLogin");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterstitialCommands_OpenLogin_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::security_interstitials::mojom::internal::InterstitialCommands_OpenLogin_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterstitialCommands::Name_);
  message.set_method_name("OpenLogin");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void InterstitialCommandsProxy::DoReport(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send security_interstitials::mojom::InterstitialCommands::DoReport");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterstitialCommands_DoReport_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::security_interstitials::mojom::internal::InterstitialCommands_DoReport_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterstitialCommands::Name_);
  message.set_method_name("DoReport");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void InterstitialCommandsProxy::DontReport(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send security_interstitials::mojom::InterstitialCommands::DontReport");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterstitialCommands_DontReport_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::security_interstitials::mojom::internal::InterstitialCommands_DontReport_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterstitialCommands::Name_);
  message.set_method_name("DontReport");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void InterstitialCommandsProxy::OpenReportingPrivacy(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send security_interstitials::mojom::InterstitialCommands::OpenReportingPrivacy");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterstitialCommands_OpenReportingPrivacy_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::security_interstitials::mojom::internal::InterstitialCommands_OpenReportingPrivacy_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterstitialCommands::Name_);
  message.set_method_name("OpenReportingPrivacy");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void InterstitialCommandsProxy::OpenWhitepaper(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send security_interstitials::mojom::InterstitialCommands::OpenWhitepaper");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterstitialCommands_OpenWhitepaper_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::security_interstitials::mojom::internal::InterstitialCommands_OpenWhitepaper_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterstitialCommands::Name_);
  message.set_method_name("OpenWhitepaper");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void InterstitialCommandsProxy::ReportPhishingError(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send security_interstitials::mojom::InterstitialCommands::ReportPhishingError");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterstitialCommands_ReportPhishingError_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::security_interstitials::mojom::internal::InterstitialCommands_ReportPhishingError_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterstitialCommands::Name_);
  message.set_method_name("ReportPhishingError");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void InterstitialCommandsProxy::OpenEnhancedProtectionSettings(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send security_interstitials::mojom::InterstitialCommands::OpenEnhancedProtectionSettings");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterstitialCommands_OpenEnhancedProtectionSettings_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::security_interstitials::mojom::internal::InterstitialCommands_OpenEnhancedProtectionSettings_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterstitialCommands::Name_);
  message.set_method_name("OpenEnhancedProtectionSettings");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool InterstitialCommandsStubDispatch::Accept(
    InterstitialCommands* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kInterstitialCommands_DontProceed_Name: {

      DCHECK(message->is_serialized());
      internal::InterstitialCommands_DontProceed_Params_Data* params =
          reinterpret_cast<internal::InterstitialCommands_DontProceed_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      InterstitialCommands_DontProceed_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterstitialCommands::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DontProceed();
      return true;
    }
    case internal::kInterstitialCommands_Proceed_Name: {

      DCHECK(message->is_serialized());
      internal::InterstitialCommands_Proceed_Params_Data* params =
          reinterpret_cast<internal::InterstitialCommands_Proceed_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      InterstitialCommands_Proceed_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterstitialCommands::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Proceed();
      return true;
    }
    case internal::kInterstitialCommands_ShowMoreSection_Name: {

      DCHECK(message->is_serialized());
      internal::InterstitialCommands_ShowMoreSection_Params_Data* params =
          reinterpret_cast<internal::InterstitialCommands_ShowMoreSection_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      InterstitialCommands_ShowMoreSection_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterstitialCommands::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ShowMoreSection();
      return true;
    }
    case internal::kInterstitialCommands_OpenHelpCenter_Name: {

      DCHECK(message->is_serialized());
      internal::InterstitialCommands_OpenHelpCenter_Params_Data* params =
          reinterpret_cast<internal::InterstitialCommands_OpenHelpCenter_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      InterstitialCommands_OpenHelpCenter_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterstitialCommands::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OpenHelpCenter();
      return true;
    }
    case internal::kInterstitialCommands_OpenDiagnostic_Name: {

      DCHECK(message->is_serialized());
      internal::InterstitialCommands_OpenDiagnostic_Params_Data* params =
          reinterpret_cast<internal::InterstitialCommands_OpenDiagnostic_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      InterstitialCommands_OpenDiagnostic_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterstitialCommands::Name_, 4, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OpenDiagnostic();
      return true;
    }
    case internal::kInterstitialCommands_Reload_Name: {

      DCHECK(message->is_serialized());
      internal::InterstitialCommands_Reload_Params_Data* params =
          reinterpret_cast<internal::InterstitialCommands_Reload_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      InterstitialCommands_Reload_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterstitialCommands::Name_, 5, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Reload();
      return true;
    }
    case internal::kInterstitialCommands_OpenDateSettings_Name: {

      DCHECK(message->is_serialized());
      internal::InterstitialCommands_OpenDateSettings_Params_Data* params =
          reinterpret_cast<internal::InterstitialCommands_OpenDateSettings_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      InterstitialCommands_OpenDateSettings_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterstitialCommands::Name_, 6, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OpenDateSettings();
      return true;
    }
    case internal::kInterstitialCommands_OpenLogin_Name: {

      DCHECK(message->is_serialized());
      internal::InterstitialCommands_OpenLogin_Params_Data* params =
          reinterpret_cast<internal::InterstitialCommands_OpenLogin_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      InterstitialCommands_OpenLogin_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterstitialCommands::Name_, 7, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OpenLogin();
      return true;
    }
    case internal::kInterstitialCommands_DoReport_Name: {

      DCHECK(message->is_serialized());
      internal::InterstitialCommands_DoReport_Params_Data* params =
          reinterpret_cast<internal::InterstitialCommands_DoReport_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      InterstitialCommands_DoReport_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterstitialCommands::Name_, 8, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DoReport();
      return true;
    }
    case internal::kInterstitialCommands_DontReport_Name: {

      DCHECK(message->is_serialized());
      internal::InterstitialCommands_DontReport_Params_Data* params =
          reinterpret_cast<internal::InterstitialCommands_DontReport_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      InterstitialCommands_DontReport_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterstitialCommands::Name_, 9, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DontReport();
      return true;
    }
    case internal::kInterstitialCommands_OpenReportingPrivacy_Name: {

      DCHECK(message->is_serialized());
      internal::InterstitialCommands_OpenReportingPrivacy_Params_Data* params =
          reinterpret_cast<internal::InterstitialCommands_OpenReportingPrivacy_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      InterstitialCommands_OpenReportingPrivacy_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterstitialCommands::Name_, 10, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OpenReportingPrivacy();
      return true;
    }
    case internal::kInterstitialCommands_OpenWhitepaper_Name: {

      DCHECK(message->is_serialized());
      internal::InterstitialCommands_OpenWhitepaper_Params_Data* params =
          reinterpret_cast<internal::InterstitialCommands_OpenWhitepaper_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      InterstitialCommands_OpenWhitepaper_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterstitialCommands::Name_, 11, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OpenWhitepaper();
      return true;
    }
    case internal::kInterstitialCommands_ReportPhishingError_Name: {

      DCHECK(message->is_serialized());
      internal::InterstitialCommands_ReportPhishingError_Params_Data* params =
          reinterpret_cast<internal::InterstitialCommands_ReportPhishingError_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      InterstitialCommands_ReportPhishingError_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterstitialCommands::Name_, 12, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ReportPhishingError();
      return true;
    }
    case internal::kInterstitialCommands_OpenEnhancedProtectionSettings_Name: {

      DCHECK(message->is_serialized());
      internal::InterstitialCommands_OpenEnhancedProtectionSettings_Params_Data* params =
          reinterpret_cast<internal::InterstitialCommands_OpenEnhancedProtectionSettings_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      InterstitialCommands_OpenEnhancedProtectionSettings_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterstitialCommands::Name_, 13, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OpenEnhancedProtectionSettings();
      return true;
    }
  }
  return false;
}

// static
bool InterstitialCommandsStubDispatch::AcceptWithResponder(
    InterstitialCommands* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kInterstitialCommands_DontProceed_Name: {
      break;
    }
    case internal::kInterstitialCommands_Proceed_Name: {
      break;
    }
    case internal::kInterstitialCommands_ShowMoreSection_Name: {
      break;
    }
    case internal::kInterstitialCommands_OpenHelpCenter_Name: {
      break;
    }
    case internal::kInterstitialCommands_OpenDiagnostic_Name: {
      break;
    }
    case internal::kInterstitialCommands_Reload_Name: {
      break;
    }
    case internal::kInterstitialCommands_OpenDateSettings_Name: {
      break;
    }
    case internal::kInterstitialCommands_OpenLogin_Name: {
      break;
    }
    case internal::kInterstitialCommands_DoReport_Name: {
      break;
    }
    case internal::kInterstitialCommands_DontReport_Name: {
      break;
    }
    case internal::kInterstitialCommands_OpenReportingPrivacy_Name: {
      break;
    }
    case internal::kInterstitialCommands_OpenWhitepaper_Name: {
      break;
    }
    case internal::kInterstitialCommands_ReportPhishingError_Name: {
      break;
    }
    case internal::kInterstitialCommands_OpenEnhancedProtectionSettings_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kInterstitialCommandsValidationInfo[] = {
    {&internal::InterstitialCommands_DontProceed_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::InterstitialCommands_Proceed_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::InterstitialCommands_ShowMoreSection_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::InterstitialCommands_OpenHelpCenter_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::InterstitialCommands_OpenDiagnostic_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::InterstitialCommands_Reload_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::InterstitialCommands_OpenDateSettings_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::InterstitialCommands_OpenLogin_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::InterstitialCommands_DoReport_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::InterstitialCommands_DontReport_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::InterstitialCommands_OpenReportingPrivacy_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::InterstitialCommands_OpenWhitepaper_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::InterstitialCommands_ReportPhishingError_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::InterstitialCommands_OpenEnhancedProtectionSettings_Params_Data::Validate,
     nullptr /* no response */},
};

bool InterstitialCommandsRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::security_interstitials::mojom::InterstitialCommands::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kInterstitialCommandsValidationInfo);
}



}  // namespace mojom
}  // namespace security_interstitials


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace security_interstitials {
namespace mojom {


void InterstitialCommandsInterceptorForTesting::DontProceed() {
  GetForwardingInterface()->DontProceed();
}
void InterstitialCommandsInterceptorForTesting::Proceed() {
  GetForwardingInterface()->Proceed();
}
void InterstitialCommandsInterceptorForTesting::ShowMoreSection() {
  GetForwardingInterface()->ShowMoreSection();
}
void InterstitialCommandsInterceptorForTesting::OpenHelpCenter() {
  GetForwardingInterface()->OpenHelpCenter();
}
void InterstitialCommandsInterceptorForTesting::OpenDiagnostic() {
  GetForwardingInterface()->OpenDiagnostic();
}
void InterstitialCommandsInterceptorForTesting::Reload() {
  GetForwardingInterface()->Reload();
}
void InterstitialCommandsInterceptorForTesting::OpenDateSettings() {
  GetForwardingInterface()->OpenDateSettings();
}
void InterstitialCommandsInterceptorForTesting::OpenLogin() {
  GetForwardingInterface()->OpenLogin();
}
void InterstitialCommandsInterceptorForTesting::DoReport() {
  GetForwardingInterface()->DoReport();
}
void InterstitialCommandsInterceptorForTesting::DontReport() {
  GetForwardingInterface()->DontReport();
}
void InterstitialCommandsInterceptorForTesting::OpenReportingPrivacy() {
  GetForwardingInterface()->OpenReportingPrivacy();
}
void InterstitialCommandsInterceptorForTesting::OpenWhitepaper() {
  GetForwardingInterface()->OpenWhitepaper();
}
void InterstitialCommandsInterceptorForTesting::ReportPhishingError() {
  GetForwardingInterface()->ReportPhishingError();
}
void InterstitialCommandsInterceptorForTesting::OpenEnhancedProtectionSettings() {
  GetForwardingInterface()->OpenEnhancedProtectionSettings();
}
InterstitialCommandsAsyncWaiter::InterstitialCommandsAsyncWaiter(
    InterstitialCommands* proxy) : proxy_(proxy) {}

InterstitialCommandsAsyncWaiter::~InterstitialCommandsAsyncWaiter() = default;






}  // namespace mojom
}  // namespace security_interstitials


#if defined(__clang__)
#pragma clang diagnostic pop
#endif