// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entry.proto

#include "entry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protodb {
PROTOBUF_CONSTEXPR CustomData::CustomData(
    ::_pbi::ConstantInitialized)
  : key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CustomDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomDataDefaultTypeInternal() {}
  union {
    CustomData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomDataDefaultTypeInternal _CustomData_default_instance_;
PROTOBUF_CONSTEXPR Entry::Entry(
    ::_pbi::ConstantInitialized)
  : url_chain_()
  , custom_data_()
  , guid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , target_file_path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , response_headers_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , scheduling_params_(nullptr)
  , request_params_(nullptr)
  , name_space_(0)

  , state_(0)

  , create_time_(int64_t{0})
  , completion_time_(int64_t{0})
  , attempt_count_(0u)
  , traffic_annotation_(0)
  , bytes_downloaded_(uint64_t{0u})
  , last_cleanup_check_time_(int64_t{0})
  , resumption_count_(0u)
  , has_upload_data_(false)
  , did_received_response_(false)
  , require_response_headers_(false){}
struct EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntryDefaultTypeInternal() {}
  union {
    Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntryDefaultTypeInternal _Entry_default_instance_;
}  // namespace protodb
namespace protodb {
bool Entry_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Entry_State_strings[5] = {};

static const char Entry_State_names[] =
  "ACTIVE"
  "AVAILABLE"
  "COMPLETE"
  "NEW"
  "PAUSED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Entry_State_entries[] = {
  { {Entry_State_names + 0, 6}, 2 },
  { {Entry_State_names + 6, 9}, 1 },
  { {Entry_State_names + 15, 8}, 4 },
  { {Entry_State_names + 23, 3}, 0 },
  { {Entry_State_names + 26, 6}, 3 },
};

static const int Entry_State_entries_by_number[] = {
  3, // 0 -> NEW
  1, // 1 -> AVAILABLE
  0, // 2 -> ACTIVE
  4, // 3 -> PAUSED
  2, // 4 -> COMPLETE
};

const std::string& Entry_State_Name(
    Entry_State value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Entry_State_entries,
          Entry_State_entries_by_number,
          5, Entry_State_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Entry_State_entries,
      Entry_State_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Entry_State_strings[idx].get();
}
bool Entry_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Entry_State* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Entry_State_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<Entry_State>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Entry_State Entry::NEW;
constexpr Entry_State Entry::AVAILABLE;
constexpr Entry_State Entry::ACTIVE;
constexpr Entry_State Entry::PAUSED;
constexpr Entry_State Entry::COMPLETE;
constexpr Entry_State Entry::State_MIN;
constexpr Entry_State Entry::State_MAX;
constexpr int Entry::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool DownloadClient_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DownloadClient_strings[11] = {};

static const char DownloadClient_names[] =
  "BACKGROUND_FETCH"
  "BOUNDARY"
  "DEBUGGING"
  "INVALID"
  "MOUNTAIN_INTERNAL"
  "OFFLINE_PAGE_PREFETCH"
  "OPTIMIZATION_GUIDE_PREDICTION_MODELS"
  "PLUGIN_VM_IMAGE"
  "TEST"
  "TEST_2"
  "TEST_3";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DownloadClient_entries[] = {
  { {DownloadClient_names + 0, 16}, 5 },
  { {DownloadClient_names + 16, 8}, 10 },
  { {DownloadClient_names + 24, 9}, 6 },
  { {DownloadClient_names + 33, 7}, 0 },
  { {DownloadClient_names + 40, 17}, 7 },
  { {DownloadClient_names + 57, 21}, 4 },
  { {DownloadClient_names + 78, 36}, 9 },
  { {DownloadClient_names + 114, 15}, 8 },
  { {DownloadClient_names + 129, 4}, 1 },
  { {DownloadClient_names + 133, 6}, 2 },
  { {DownloadClient_names + 139, 6}, 3 },
};

static const int DownloadClient_entries_by_number[] = {
  3, // 0 -> INVALID
  8, // 1 -> TEST
  9, // 2 -> TEST_2
  10, // 3 -> TEST_3
  5, // 4 -> OFFLINE_PAGE_PREFETCH
  0, // 5 -> BACKGROUND_FETCH
  2, // 6 -> DEBUGGING
  4, // 7 -> MOUNTAIN_INTERNAL
  7, // 8 -> PLUGIN_VM_IMAGE
  6, // 9 -> OPTIMIZATION_GUIDE_PREDICTION_MODELS
  1, // 10 -> BOUNDARY
};

const std::string& DownloadClient_Name(
    DownloadClient value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DownloadClient_entries,
          DownloadClient_entries_by_number,
          11, DownloadClient_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DownloadClient_entries,
      DownloadClient_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DownloadClient_strings[idx].get();
}
bool DownloadClient_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DownloadClient* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DownloadClient_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<DownloadClient>(int_value);
  }
  return success;
}

// ===================================================================

class CustomData::_Internal {
 public:
  using HasBits = decltype(std::declval<CustomData>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CustomData::CustomData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protodb.CustomData)
}
CustomData::CustomData(const CustomData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protodb.CustomData)
}

inline void CustomData::SharedCtor() {
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CustomData::~CustomData() {
  // @@protoc_insertion_point(destructor:protodb.CustomData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.Destroy();
  value_.Destroy();
}

void CustomData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CustomData::Clear() {
// @@protoc_insertion_point(message_clear_start:protodb.CustomData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CustomData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protodb.CustomData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protodb.CustomData)
  return target;
}

size_t CustomData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protodb.CustomData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CustomData*>(
      &from));
}

void CustomData::MergeFrom(const CustomData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protodb.CustomData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CustomData::CopyFrom(const CustomData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protodb.CustomData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomData::IsInitialized() const {
  return true;
}

void CustomData::InternalSwap(CustomData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

std::string CustomData::GetTypeName() const {
  return "protodb.CustomData";
}


// ===================================================================

class Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<Entry>()._has_bits_);
  static void set_has_name_space(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protodb::SchedulingParams& scheduling_params(const Entry* msg);
  static void set_has_scheduling_params(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::protodb::RequestParams& request_params(const Entry* msg);
  static void set_has_request_params(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_target_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_create_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_completion_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_attempt_count(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_traffic_annotation(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bytes_downloaded(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_last_cleanup_check_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_resumption_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_has_upload_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_response_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_did_received_response(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_require_response_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::protodb::SchedulingParams&
Entry::_Internal::scheduling_params(const Entry* msg) {
  return *msg->scheduling_params_;
}
const ::protodb::RequestParams&
Entry::_Internal::request_params(const Entry* msg) {
  return *msg->request_params_;
}
void Entry::clear_scheduling_params() {
  if (scheduling_params_ != nullptr) scheduling_params_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Entry::clear_request_params() {
  if (request_params_ != nullptr) request_params_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
Entry::Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  url_chain_(arena),
  custom_data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protodb.Entry)
}
Entry::Entry(const Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      url_chain_(from.url_chain_),
      custom_data_(from.custom_data_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_guid()) {
    guid_.Set(from._internal_guid(), 
      GetArenaForAllocation());
  }
  target_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    target_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_target_file_path()) {
    target_file_path_.Set(from._internal_target_file_path(), 
      GetArenaForAllocation());
  }
  response_headers_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    response_headers_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_response_headers()) {
    response_headers_.Set(from._internal_response_headers(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_scheduling_params()) {
    scheduling_params_ = new ::protodb::SchedulingParams(*from.scheduling_params_);
  } else {
    scheduling_params_ = nullptr;
  }
  if (from._internal_has_request_params()) {
    request_params_ = new ::protodb::RequestParams(*from.request_params_);
  } else {
    request_params_ = nullptr;
  }
  ::memcpy(&name_space_, &from.name_space_,
    static_cast<size_t>(reinterpret_cast<char*>(&require_response_headers_) -
    reinterpret_cast<char*>(&name_space_)) + sizeof(require_response_headers_));
  // @@protoc_insertion_point(copy_constructor:protodb.Entry)
}

inline void Entry::SharedCtor() {
guid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  guid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
target_file_path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  target_file_path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
response_headers_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  response_headers_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scheduling_params_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&require_response_headers_) -
    reinterpret_cast<char*>(&scheduling_params_)) + sizeof(require_response_headers_));
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:protodb.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  guid_.Destroy();
  target_file_path_.Destroy();
  response_headers_.Destroy();
  if (this != internal_default_instance()) delete scheduling_params_;
  if (this != internal_default_instance()) delete request_params_;
}

void Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:protodb.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_chain_.Clear();
  custom_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      guid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      target_file_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      response_headers_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(scheduling_params_ != nullptr);
      scheduling_params_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(request_params_ != nullptr);
      request_params_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&name_space_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&create_time_) -
        reinterpret_cast<char*>(&name_space_)) + sizeof(create_time_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&completion_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&did_received_response_) -
        reinterpret_cast<char*>(&completion_time_)) + sizeof(did_received_response_));
  }
  require_response_headers_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protodb.DownloadClient name_space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protodb::DownloadClient_IsValid(val))) {
            _internal_set_name_space(static_cast<::protodb::DownloadClient>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protodb.SchedulingParams scheduling_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_scheduling_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protodb.RequestParams request_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protodb.Entry.State state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protodb::Entry_State_IsValid(val))) {
            _internal_set_state(static_cast<::protodb::Entry_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string target_file_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_target_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 create_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_create_time(&has_bits);
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 completion_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_completion_time(&has_bits);
          completion_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 attempt_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_attempt_count(&has_bits);
          attempt_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 traffic_annotation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_traffic_annotation(&has_bits);
          traffic_annotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_downloaded = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_bytes_downloaded(&has_bits);
          bytes_downloaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 last_cleanup_check_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_last_cleanup_check_time(&has_bits);
          last_cleanup_check_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 resumption_count = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_resumption_count(&has_bits);
          resumption_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_upload_data = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_has_upload_data(&has_bits);
          has_upload_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string url_chain = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_url_chain();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string response_headers = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_response_headers();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool did_received_response = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_did_received_response(&has_bits);
          did_received_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool require_response_headers = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_require_response_headers(&has_bits);
          require_response_headers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protodb.CustomData custom_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_custom_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protodb.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protodb.DownloadClient name_space = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_name_space(), target);
  }

  // optional string guid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_guid(), target);
  }

  // optional .protodb.SchedulingParams scheduling_params = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::scheduling_params(this),
        _Internal::scheduling_params(this).GetCachedSize(), target, stream);
  }

  // optional .protodb.RequestParams request_params = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::request_params(this),
        _Internal::request_params(this).GetCachedSize(), target, stream);
  }

  // optional .protodb.Entry.State state = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_state(), target);
  }

  // optional string target_file_path = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_target_file_path(), target);
  }

  // optional int64 create_time = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_create_time(), target);
  }

  // optional int64 completion_time = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_completion_time(), target);
  }

  // optional uint32 attempt_count = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_attempt_count(), target);
  }

  // optional int32 traffic_annotation = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_traffic_annotation(), target);
  }

  // optional uint64 bytes_downloaded = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_bytes_downloaded(), target);
  }

  // optional int64 last_cleanup_check_time = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_last_cleanup_check_time(), target);
  }

  // optional uint32 resumption_count = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_resumption_count(), target);
  }

  // optional bool has_upload_data = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_has_upload_data(), target);
  }

  // repeated string url_chain = 16;
  for (int i = 0, n = this->_internal_url_chain_size(); i < n; i++) {
    const auto& s = this->_internal_url_chain(i);
    target = stream->WriteString(16, s, target);
  }

  // optional string response_headers = 17;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_response_headers(), target);
  }

  // optional bool did_received_response = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_did_received_response(), target);
  }

  // optional bool require_response_headers = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_require_response_headers(), target);
  }

  // repeated .protodb.CustomData custom_data = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protodb.Entry)
  return target;
}

size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protodb.Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string url_chain = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(url_chain_.size());
  for (int i = 0, n = url_chain_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      url_chain_.Get(i));
  }

  // repeated .protodb.CustomData custom_data = 20;
  total_size += 2UL * this->_internal_custom_data_size();
  for (const auto& msg : this->custom_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string guid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guid());
    }

    // optional string target_file_path = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target_file_path());
    }

    // optional string response_headers = 17;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_response_headers());
    }

    // optional .protodb.SchedulingParams scheduling_params = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scheduling_params_);
    }

    // optional .protodb.RequestParams request_params = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_params_);
    }

    // optional .protodb.DownloadClient name_space = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_name_space());
    }

    // optional .protodb.Entry.State state = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional int64 create_time = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_create_time());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 completion_time = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_completion_time());
    }

    // optional uint32 attempt_count = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attempt_count());
    }

    // optional int32 traffic_annotation = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_traffic_annotation());
    }

    // optional uint64 bytes_downloaded = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_downloaded());
    }

    // optional int64 last_cleanup_check_time = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_cleanup_check_time());
    }

    // optional uint32 resumption_count = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_resumption_count());
    }

    // optional bool has_upload_data = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool did_received_response = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  // optional bool require_response_headers = 19;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Entry*>(
      &from));
}

void Entry::MergeFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protodb.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  url_chain_.MergeFrom(from.url_chain_);
  custom_data_.MergeFrom(from.custom_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_guid(from._internal_guid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_target_file_path(from._internal_target_file_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_response_headers(from._internal_response_headers());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_scheduling_params()->::protodb::SchedulingParams::MergeFrom(from._internal_scheduling_params());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_request_params()->::protodb::RequestParams::MergeFrom(from._internal_request_params());
    }
    if (cached_has_bits & 0x00000020u) {
      name_space_ = from.name_space_;
    }
    if (cached_has_bits & 0x00000040u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000080u) {
      create_time_ = from.create_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      completion_time_ = from.completion_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      attempt_count_ = from.attempt_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      traffic_annotation_ = from.traffic_annotation_;
    }
    if (cached_has_bits & 0x00000800u) {
      bytes_downloaded_ = from.bytes_downloaded_;
    }
    if (cached_has_bits & 0x00001000u) {
      last_cleanup_check_time_ = from.last_cleanup_check_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      resumption_count_ = from.resumption_count_;
    }
    if (cached_has_bits & 0x00004000u) {
      has_upload_data_ = from.has_upload_data_;
    }
    if (cached_has_bits & 0x00008000u) {
      did_received_response_ = from.did_received_response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_require_response_headers(from._internal_require_response_headers());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protodb.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  return true;
}

void Entry::InternalSwap(Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_chain_.InternalSwap(&other->url_chain_);
  custom_data_.InternalSwap(&other->custom_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &guid_, lhs_arena,
      &other->guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &target_file_path_, lhs_arena,
      &other->target_file_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &response_headers_, lhs_arena,
      &other->response_headers_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Entry, require_response_headers_)
      + sizeof(Entry::require_response_headers_)
      - PROTOBUF_FIELD_OFFSET(Entry, scheduling_params_)>(
          reinterpret_cast<char*>(&scheduling_params_),
          reinterpret_cast<char*>(&other->scheduling_params_));
}

std::string Entry::GetTypeName() const {
  return "protodb.Entry";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protodb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protodb::CustomData*
Arena::CreateMaybeMessage< ::protodb::CustomData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protodb::CustomData >(arena);
}
template<> PROTOBUF_NOINLINE ::protodb::Entry*
Arena::CreateMaybeMessage< ::protodb::Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protodb::Entry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
