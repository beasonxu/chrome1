// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scheduling.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scheduling_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scheduling_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scheduling_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scheduling_2eproto {
  static const uint32_t offsets[];
};
namespace protodb {
class SchedulingParams;
struct SchedulingParamsDefaultTypeInternal;
extern SchedulingParamsDefaultTypeInternal _SchedulingParams_default_instance_;
}  // namespace protodb
PROTOBUF_NAMESPACE_OPEN
template<> ::protodb::SchedulingParams* Arena::CreateMaybeMessage<::protodb::SchedulingParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protodb {

enum SchedulingParams_NetworkRequirements : int {
  SchedulingParams_NetworkRequirements_NONE = 0,
  SchedulingParams_NetworkRequirements_OPTIMISTIC = 1,
  SchedulingParams_NetworkRequirements_UNMETERED = 2
};
bool SchedulingParams_NetworkRequirements_IsValid(int value);
constexpr SchedulingParams_NetworkRequirements SchedulingParams_NetworkRequirements_NetworkRequirements_MIN = SchedulingParams_NetworkRequirements_NONE;
constexpr SchedulingParams_NetworkRequirements SchedulingParams_NetworkRequirements_NetworkRequirements_MAX = SchedulingParams_NetworkRequirements_UNMETERED;
constexpr int SchedulingParams_NetworkRequirements_NetworkRequirements_ARRAYSIZE = SchedulingParams_NetworkRequirements_NetworkRequirements_MAX + 1;

const std::string& SchedulingParams_NetworkRequirements_Name(SchedulingParams_NetworkRequirements value);
template<typename T>
inline const std::string& SchedulingParams_NetworkRequirements_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SchedulingParams_NetworkRequirements>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SchedulingParams_NetworkRequirements_Name.");
  return SchedulingParams_NetworkRequirements_Name(static_cast<SchedulingParams_NetworkRequirements>(enum_t_value));
}
bool SchedulingParams_NetworkRequirements_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SchedulingParams_NetworkRequirements* value);
enum SchedulingParams_BatteryRequirements : int {
  SchedulingParams_BatteryRequirements_BATTERY_INSENSITIVE = 0,
  SchedulingParams_BatteryRequirements_BATTERY_SENSITIVE = 1,
  SchedulingParams_BatteryRequirements_BATTERY_CHARGING = 2
};
bool SchedulingParams_BatteryRequirements_IsValid(int value);
constexpr SchedulingParams_BatteryRequirements SchedulingParams_BatteryRequirements_BatteryRequirements_MIN = SchedulingParams_BatteryRequirements_BATTERY_INSENSITIVE;
constexpr SchedulingParams_BatteryRequirements SchedulingParams_BatteryRequirements_BatteryRequirements_MAX = SchedulingParams_BatteryRequirements_BATTERY_CHARGING;
constexpr int SchedulingParams_BatteryRequirements_BatteryRequirements_ARRAYSIZE = SchedulingParams_BatteryRequirements_BatteryRequirements_MAX + 1;

const std::string& SchedulingParams_BatteryRequirements_Name(SchedulingParams_BatteryRequirements value);
template<typename T>
inline const std::string& SchedulingParams_BatteryRequirements_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SchedulingParams_BatteryRequirements>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SchedulingParams_BatteryRequirements_Name.");
  return SchedulingParams_BatteryRequirements_Name(static_cast<SchedulingParams_BatteryRequirements>(enum_t_value));
}
bool SchedulingParams_BatteryRequirements_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SchedulingParams_BatteryRequirements* value);
enum SchedulingParams_Priority : int {
  SchedulingParams_Priority_LOW = 0,
  SchedulingParams_Priority_NORMAL = 1,
  SchedulingParams_Priority_HIGH = 2,
  SchedulingParams_Priority_UI = 3
};
bool SchedulingParams_Priority_IsValid(int value);
constexpr SchedulingParams_Priority SchedulingParams_Priority_Priority_MIN = SchedulingParams_Priority_LOW;
constexpr SchedulingParams_Priority SchedulingParams_Priority_Priority_MAX = SchedulingParams_Priority_UI;
constexpr int SchedulingParams_Priority_Priority_ARRAYSIZE = SchedulingParams_Priority_Priority_MAX + 1;

const std::string& SchedulingParams_Priority_Name(SchedulingParams_Priority value);
template<typename T>
inline const std::string& SchedulingParams_Priority_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SchedulingParams_Priority>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SchedulingParams_Priority_Name.");
  return SchedulingParams_Priority_Name(static_cast<SchedulingParams_Priority>(enum_t_value));
}
bool SchedulingParams_Priority_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SchedulingParams_Priority* value);
// ===================================================================

class SchedulingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protodb.SchedulingParams) */ {
 public:
  inline SchedulingParams() : SchedulingParams(nullptr) {}
  ~SchedulingParams() override;
  explicit PROTOBUF_CONSTEXPR SchedulingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SchedulingParams(const SchedulingParams& from);
  SchedulingParams(SchedulingParams&& from) noexcept
    : SchedulingParams() {
    *this = ::std::move(from);
  }

  inline SchedulingParams& operator=(const SchedulingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchedulingParams& operator=(SchedulingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SchedulingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SchedulingParams* internal_default_instance() {
    return reinterpret_cast<const SchedulingParams*>(
               &_SchedulingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SchedulingParams& a, SchedulingParams& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SchedulingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchedulingParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SchedulingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SchedulingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SchedulingParams& from);
  void MergeFrom(const SchedulingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SchedulingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protodb.SchedulingParams";
  }
  protected:
  explicit SchedulingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SchedulingParams_NetworkRequirements NetworkRequirements;
  static constexpr NetworkRequirements NONE =
    SchedulingParams_NetworkRequirements_NONE;
  static constexpr NetworkRequirements OPTIMISTIC =
    SchedulingParams_NetworkRequirements_OPTIMISTIC;
  static constexpr NetworkRequirements UNMETERED =
    SchedulingParams_NetworkRequirements_UNMETERED;
  static inline bool NetworkRequirements_IsValid(int value) {
    return SchedulingParams_NetworkRequirements_IsValid(value);
  }
  static constexpr NetworkRequirements NetworkRequirements_MIN =
    SchedulingParams_NetworkRequirements_NetworkRequirements_MIN;
  static constexpr NetworkRequirements NetworkRequirements_MAX =
    SchedulingParams_NetworkRequirements_NetworkRequirements_MAX;
  static constexpr int NetworkRequirements_ARRAYSIZE =
    SchedulingParams_NetworkRequirements_NetworkRequirements_ARRAYSIZE;
  template<typename T>
  static inline const std::string& NetworkRequirements_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NetworkRequirements>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NetworkRequirements_Name.");
    return SchedulingParams_NetworkRequirements_Name(enum_t_value);
  }
  static inline bool NetworkRequirements_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NetworkRequirements* value) {
    return SchedulingParams_NetworkRequirements_Parse(name, value);
  }

  typedef SchedulingParams_BatteryRequirements BatteryRequirements;
  static constexpr BatteryRequirements BATTERY_INSENSITIVE =
    SchedulingParams_BatteryRequirements_BATTERY_INSENSITIVE;
  static constexpr BatteryRequirements BATTERY_SENSITIVE =
    SchedulingParams_BatteryRequirements_BATTERY_SENSITIVE;
  static constexpr BatteryRequirements BATTERY_CHARGING =
    SchedulingParams_BatteryRequirements_BATTERY_CHARGING;
  static inline bool BatteryRequirements_IsValid(int value) {
    return SchedulingParams_BatteryRequirements_IsValid(value);
  }
  static constexpr BatteryRequirements BatteryRequirements_MIN =
    SchedulingParams_BatteryRequirements_BatteryRequirements_MIN;
  static constexpr BatteryRequirements BatteryRequirements_MAX =
    SchedulingParams_BatteryRequirements_BatteryRequirements_MAX;
  static constexpr int BatteryRequirements_ARRAYSIZE =
    SchedulingParams_BatteryRequirements_BatteryRequirements_ARRAYSIZE;
  template<typename T>
  static inline const std::string& BatteryRequirements_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BatteryRequirements>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BatteryRequirements_Name.");
    return SchedulingParams_BatteryRequirements_Name(enum_t_value);
  }
  static inline bool BatteryRequirements_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BatteryRequirements* value) {
    return SchedulingParams_BatteryRequirements_Parse(name, value);
  }

  typedef SchedulingParams_Priority Priority;
  static constexpr Priority LOW =
    SchedulingParams_Priority_LOW;
  static constexpr Priority NORMAL =
    SchedulingParams_Priority_NORMAL;
  static constexpr Priority HIGH =
    SchedulingParams_Priority_HIGH;
  static constexpr Priority UI =
    SchedulingParams_Priority_UI;
  static inline bool Priority_IsValid(int value) {
    return SchedulingParams_Priority_IsValid(value);
  }
  static constexpr Priority Priority_MIN =
    SchedulingParams_Priority_Priority_MIN;
  static constexpr Priority Priority_MAX =
    SchedulingParams_Priority_Priority_MAX;
  static constexpr int Priority_ARRAYSIZE =
    SchedulingParams_Priority_Priority_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Priority_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Priority>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Priority_Name.");
    return SchedulingParams_Priority_Name(enum_t_value);
  }
  static inline bool Priority_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Priority* value) {
    return SchedulingParams_Priority_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCancelTimeFieldNumber = 2,
    kPriorityFieldNumber = 3,
    kNetworkRequirementsFieldNumber = 4,
    kBatteryRequirementsFieldNumber = 5,
  };
  // optional int64 cancel_time = 2;
  bool has_cancel_time() const;
  private:
  bool _internal_has_cancel_time() const;
  public:
  void clear_cancel_time();
  int64_t cancel_time() const;
  void set_cancel_time(int64_t value);
  private:
  int64_t _internal_cancel_time() const;
  void _internal_set_cancel_time(int64_t value);
  public:

  // optional .protodb.SchedulingParams.Priority priority = 3;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  ::protodb::SchedulingParams_Priority priority() const;
  void set_priority(::protodb::SchedulingParams_Priority value);
  private:
  ::protodb::SchedulingParams_Priority _internal_priority() const;
  void _internal_set_priority(::protodb::SchedulingParams_Priority value);
  public:

  // optional .protodb.SchedulingParams.NetworkRequirements network_requirements = 4;
  bool has_network_requirements() const;
  private:
  bool _internal_has_network_requirements() const;
  public:
  void clear_network_requirements();
  ::protodb::SchedulingParams_NetworkRequirements network_requirements() const;
  void set_network_requirements(::protodb::SchedulingParams_NetworkRequirements value);
  private:
  ::protodb::SchedulingParams_NetworkRequirements _internal_network_requirements() const;
  void _internal_set_network_requirements(::protodb::SchedulingParams_NetworkRequirements value);
  public:

  // optional .protodb.SchedulingParams.BatteryRequirements battery_requirements = 5;
  bool has_battery_requirements() const;
  private:
  bool _internal_has_battery_requirements() const;
  public:
  void clear_battery_requirements();
  ::protodb::SchedulingParams_BatteryRequirements battery_requirements() const;
  void set_battery_requirements(::protodb::SchedulingParams_BatteryRequirements value);
  private:
  ::protodb::SchedulingParams_BatteryRequirements _internal_battery_requirements() const;
  void _internal_set_battery_requirements(::protodb::SchedulingParams_BatteryRequirements value);
  public:

  // @@protoc_insertion_point(class_scope:protodb.SchedulingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t cancel_time_;
  int priority_;
  int network_requirements_;
  int battery_requirements_;
  friend struct ::TableStruct_scheduling_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SchedulingParams

// optional int64 cancel_time = 2;
inline bool SchedulingParams::_internal_has_cancel_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchedulingParams::has_cancel_time() const {
  return _internal_has_cancel_time();
}
inline void SchedulingParams::clear_cancel_time() {
  cancel_time_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t SchedulingParams::_internal_cancel_time() const {
  return cancel_time_;
}
inline int64_t SchedulingParams::cancel_time() const {
  // @@protoc_insertion_point(field_get:protodb.SchedulingParams.cancel_time)
  return _internal_cancel_time();
}
inline void SchedulingParams::_internal_set_cancel_time(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  cancel_time_ = value;
}
inline void SchedulingParams::set_cancel_time(int64_t value) {
  _internal_set_cancel_time(value);
  // @@protoc_insertion_point(field_set:protodb.SchedulingParams.cancel_time)
}

// optional .protodb.SchedulingParams.Priority priority = 3;
inline bool SchedulingParams::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SchedulingParams::has_priority() const {
  return _internal_has_priority();
}
inline void SchedulingParams::clear_priority() {
  priority_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::protodb::SchedulingParams_Priority SchedulingParams::_internal_priority() const {
  return static_cast< ::protodb::SchedulingParams_Priority >(priority_);
}
inline ::protodb::SchedulingParams_Priority SchedulingParams::priority() const {
  // @@protoc_insertion_point(field_get:protodb.SchedulingParams.priority)
  return _internal_priority();
}
inline void SchedulingParams::_internal_set_priority(::protodb::SchedulingParams_Priority value) {
  assert(::protodb::SchedulingParams_Priority_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  priority_ = value;
}
inline void SchedulingParams::set_priority(::protodb::SchedulingParams_Priority value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:protodb.SchedulingParams.priority)
}

// optional .protodb.SchedulingParams.NetworkRequirements network_requirements = 4;
inline bool SchedulingParams::_internal_has_network_requirements() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SchedulingParams::has_network_requirements() const {
  return _internal_has_network_requirements();
}
inline void SchedulingParams::clear_network_requirements() {
  network_requirements_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::protodb::SchedulingParams_NetworkRequirements SchedulingParams::_internal_network_requirements() const {
  return static_cast< ::protodb::SchedulingParams_NetworkRequirements >(network_requirements_);
}
inline ::protodb::SchedulingParams_NetworkRequirements SchedulingParams::network_requirements() const {
  // @@protoc_insertion_point(field_get:protodb.SchedulingParams.network_requirements)
  return _internal_network_requirements();
}
inline void SchedulingParams::_internal_set_network_requirements(::protodb::SchedulingParams_NetworkRequirements value) {
  assert(::protodb::SchedulingParams_NetworkRequirements_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  network_requirements_ = value;
}
inline void SchedulingParams::set_network_requirements(::protodb::SchedulingParams_NetworkRequirements value) {
  _internal_set_network_requirements(value);
  // @@protoc_insertion_point(field_set:protodb.SchedulingParams.network_requirements)
}

// optional .protodb.SchedulingParams.BatteryRequirements battery_requirements = 5;
inline bool SchedulingParams::_internal_has_battery_requirements() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SchedulingParams::has_battery_requirements() const {
  return _internal_has_battery_requirements();
}
inline void SchedulingParams::clear_battery_requirements() {
  battery_requirements_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::protodb::SchedulingParams_BatteryRequirements SchedulingParams::_internal_battery_requirements() const {
  return static_cast< ::protodb::SchedulingParams_BatteryRequirements >(battery_requirements_);
}
inline ::protodb::SchedulingParams_BatteryRequirements SchedulingParams::battery_requirements() const {
  // @@protoc_insertion_point(field_get:protodb.SchedulingParams.battery_requirements)
  return _internal_battery_requirements();
}
inline void SchedulingParams::_internal_set_battery_requirements(::protodb::SchedulingParams_BatteryRequirements value) {
  assert(::protodb::SchedulingParams_BatteryRequirements_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  battery_requirements_ = value;
}
inline void SchedulingParams::set_battery_requirements(::protodb::SchedulingParams_BatteryRequirements value) {
  _internal_set_battery_requirements(value);
  // @@protoc_insertion_point(field_set:protodb.SchedulingParams.battery_requirements)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protodb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protodb::SchedulingParams_NetworkRequirements> : ::std::true_type {};
template <> struct is_proto_enum< ::protodb::SchedulingParams_BatteryRequirements> : ::std::true_type {};
template <> struct is_proto_enum< ::protodb::SchedulingParams_Priority> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scheduling_2eproto
