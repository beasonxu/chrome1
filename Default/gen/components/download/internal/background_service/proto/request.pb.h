// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_request_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_request_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_request_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_request_2eproto {
  static const uint32_t offsets[];
};
namespace protodb {
class RequestHeader;
struct RequestHeaderDefaultTypeInternal;
extern RequestHeaderDefaultTypeInternal _RequestHeader_default_instance_;
class RequestParams;
struct RequestParamsDefaultTypeInternal;
extern RequestParamsDefaultTypeInternal _RequestParams_default_instance_;
}  // namespace protodb
PROTOBUF_NAMESPACE_OPEN
template<> ::protodb::RequestHeader* Arena::CreateMaybeMessage<::protodb::RequestHeader>(Arena*);
template<> ::protodb::RequestParams* Arena::CreateMaybeMessage<::protodb::RequestParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protodb {

// ===================================================================

class RequestHeader final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protodb.RequestHeader) */ {
 public:
  inline RequestHeader() : RequestHeader(nullptr) {}
  ~RequestHeader() override;
  explicit PROTOBUF_CONSTEXPR RequestHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestHeader(const RequestHeader& from);
  RequestHeader(RequestHeader&& from) noexcept
    : RequestHeader() {
    *this = ::std::move(from);
  }

  inline RequestHeader& operator=(const RequestHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestHeader& operator=(RequestHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RequestHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestHeader* internal_default_instance() {
    return reinterpret_cast<const RequestHeader*>(
               &_RequestHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestHeader& a, RequestHeader& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RequestHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestHeader>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RequestHeader& from);
  void MergeFrom(const RequestHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protodb.RequestHeader";
  }
  protected:
  explicit RequestHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:protodb.RequestHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class RequestParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protodb.RequestParams) */ {
 public:
  inline RequestParams() : RequestParams(nullptr) {}
  ~RequestParams() override;
  explicit PROTOBUF_CONSTEXPR RequestParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestParams(const RequestParams& from);
  RequestParams(RequestParams&& from) noexcept
    : RequestParams() {
    *this = ::std::move(from);
  }

  inline RequestParams& operator=(const RequestParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestParams& operator=(RequestParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RequestParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestParams* internal_default_instance() {
    return reinterpret_cast<const RequestParams*>(
               &_RequestParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestParams& a, RequestParams& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RequestParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RequestParams& from);
  void MergeFrom(const RequestParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protodb.RequestParams";
  }
  protected:
  explicit RequestParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 3,
    kUrlFieldNumber = 1,
    kMethodFieldNumber = 2,
    kFetchErrorBodyFieldNumber = 4,
    kCredentialsModeFieldNumber = 6,
    kRequireSafetyChecksFieldNumber = 5,
  };
  // repeated .protodb.RequestHeader headers = 3;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::protodb::RequestHeader* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protodb::RequestHeader >*
      mutable_headers();
  private:
  const ::protodb::RequestHeader& _internal_headers(int index) const;
  ::protodb::RequestHeader* _internal_add_headers();
  public:
  const ::protodb::RequestHeader& headers(int index) const;
  ::protodb::RequestHeader* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protodb::RequestHeader >&
      headers() const;

  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string method = 2;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // optional bool fetch_error_body = 4;
  bool has_fetch_error_body() const;
  private:
  bool _internal_has_fetch_error_body() const;
  public:
  void clear_fetch_error_body();
  bool fetch_error_body() const;
  void set_fetch_error_body(bool value);
  private:
  bool _internal_fetch_error_body() const;
  void _internal_set_fetch_error_body(bool value);
  public:

  // optional int32 credentials_mode = 6;
  bool has_credentials_mode() const;
  private:
  bool _internal_has_credentials_mode() const;
  public:
  void clear_credentials_mode();
  int32_t credentials_mode() const;
  void set_credentials_mode(int32_t value);
  private:
  int32_t _internal_credentials_mode() const;
  void _internal_set_credentials_mode(int32_t value);
  public:

  // optional bool require_safety_checks = 5 [default = true];
  bool has_require_safety_checks() const;
  private:
  bool _internal_has_require_safety_checks() const;
  public:
  void clear_require_safety_checks();
  bool require_safety_checks() const;
  void set_require_safety_checks(bool value);
  private:
  bool _internal_require_safety_checks() const;
  void _internal_set_require_safety_checks(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protodb.RequestParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protodb::RequestHeader > headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  bool fetch_error_body_;
  int32_t credentials_mode_;
  bool require_safety_checks_;
  friend struct ::TableStruct_request_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestHeader

// optional string key = 1;
inline bool RequestHeader::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestHeader::has_key() const {
  return _internal_has_key();
}
inline void RequestHeader::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RequestHeader::key() const {
  // @@protoc_insertion_point(field_get:protodb.RequestHeader.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestHeader::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protodb.RequestHeader.key)
}
inline std::string* RequestHeader::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:protodb.RequestHeader.key)
  return _s;
}
inline const std::string& RequestHeader::_internal_key() const {
  return key_.Get();
}
inline void RequestHeader::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestHeader::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestHeader::release_key() {
  // @@protoc_insertion_point(field_release:protodb.RequestHeader.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RequestHeader::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protodb.RequestHeader.key)
}

// optional string value = 2;
inline bool RequestHeader::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RequestHeader::has_value() const {
  return _internal_has_value();
}
inline void RequestHeader::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RequestHeader::value() const {
  // @@protoc_insertion_point(field_get:protodb.RequestHeader.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestHeader::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protodb.RequestHeader.value)
}
inline std::string* RequestHeader::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:protodb.RequestHeader.value)
  return _s;
}
inline const std::string& RequestHeader::_internal_value() const {
  return value_.Get();
}
inline void RequestHeader::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestHeader::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestHeader::release_value() {
  // @@protoc_insertion_point(field_release:protodb.RequestHeader.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RequestHeader::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protodb.RequestHeader.value)
}

// -------------------------------------------------------------------

// RequestParams

// optional string url = 1;
inline bool RequestParams::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestParams::has_url() const {
  return _internal_has_url();
}
inline void RequestParams::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RequestParams::url() const {
  // @@protoc_insertion_point(field_get:protodb.RequestParams.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestParams::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protodb.RequestParams.url)
}
inline std::string* RequestParams::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:protodb.RequestParams.url)
  return _s;
}
inline const std::string& RequestParams::_internal_url() const {
  return url_.Get();
}
inline void RequestParams::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestParams::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestParams::release_url() {
  // @@protoc_insertion_point(field_release:protodb.RequestParams.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RequestParams::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protodb.RequestParams.url)
}

// optional string method = 2;
inline bool RequestParams::_internal_has_method() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RequestParams::has_method() const {
  return _internal_has_method();
}
inline void RequestParams::clear_method() {
  method_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RequestParams::method() const {
  // @@protoc_insertion_point(field_get:protodb.RequestParams.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestParams::set_method(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protodb.RequestParams.method)
}
inline std::string* RequestParams::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:protodb.RequestParams.method)
  return _s;
}
inline const std::string& RequestParams::_internal_method() const {
  return method_.Get();
}
inline void RequestParams::_internal_set_method(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  method_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestParams::_internal_mutable_method() {
  _has_bits_[0] |= 0x00000002u;
  return method_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestParams::release_method() {
  // @@protoc_insertion_point(field_release:protodb.RequestParams.method)
  if (!_internal_has_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = method_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_.IsDefault()) {
    method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RequestParams::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  method_.SetAllocated(method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_.IsDefault()) {
    method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protodb.RequestParams.method)
}

// repeated .protodb.RequestHeader headers = 3;
inline int RequestParams::_internal_headers_size() const {
  return headers_.size();
}
inline int RequestParams::headers_size() const {
  return _internal_headers_size();
}
inline void RequestParams::clear_headers() {
  headers_.Clear();
}
inline ::protodb::RequestHeader* RequestParams::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:protodb.RequestParams.headers)
  return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protodb::RequestHeader >*
RequestParams::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:protodb.RequestParams.headers)
  return &headers_;
}
inline const ::protodb::RequestHeader& RequestParams::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const ::protodb::RequestHeader& RequestParams::headers(int index) const {
  // @@protoc_insertion_point(field_get:protodb.RequestParams.headers)
  return _internal_headers(index);
}
inline ::protodb::RequestHeader* RequestParams::_internal_add_headers() {
  return headers_.Add();
}
inline ::protodb::RequestHeader* RequestParams::add_headers() {
  ::protodb::RequestHeader* _add = _internal_add_headers();
  // @@protoc_insertion_point(field_add:protodb.RequestParams.headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protodb::RequestHeader >&
RequestParams::headers() const {
  // @@protoc_insertion_point(field_list:protodb.RequestParams.headers)
  return headers_;
}

// optional bool fetch_error_body = 4;
inline bool RequestParams::_internal_has_fetch_error_body() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RequestParams::has_fetch_error_body() const {
  return _internal_has_fetch_error_body();
}
inline void RequestParams::clear_fetch_error_body() {
  fetch_error_body_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool RequestParams::_internal_fetch_error_body() const {
  return fetch_error_body_;
}
inline bool RequestParams::fetch_error_body() const {
  // @@protoc_insertion_point(field_get:protodb.RequestParams.fetch_error_body)
  return _internal_fetch_error_body();
}
inline void RequestParams::_internal_set_fetch_error_body(bool value) {
  _has_bits_[0] |= 0x00000004u;
  fetch_error_body_ = value;
}
inline void RequestParams::set_fetch_error_body(bool value) {
  _internal_set_fetch_error_body(value);
  // @@protoc_insertion_point(field_set:protodb.RequestParams.fetch_error_body)
}

// optional bool require_safety_checks = 5 [default = true];
inline bool RequestParams::_internal_has_require_safety_checks() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RequestParams::has_require_safety_checks() const {
  return _internal_has_require_safety_checks();
}
inline void RequestParams::clear_require_safety_checks() {
  require_safety_checks_ = true;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool RequestParams::_internal_require_safety_checks() const {
  return require_safety_checks_;
}
inline bool RequestParams::require_safety_checks() const {
  // @@protoc_insertion_point(field_get:protodb.RequestParams.require_safety_checks)
  return _internal_require_safety_checks();
}
inline void RequestParams::_internal_set_require_safety_checks(bool value) {
  _has_bits_[0] |= 0x00000010u;
  require_safety_checks_ = value;
}
inline void RequestParams::set_require_safety_checks(bool value) {
  _internal_set_require_safety_checks(value);
  // @@protoc_insertion_point(field_set:protodb.RequestParams.require_safety_checks)
}

// optional int32 credentials_mode = 6;
inline bool RequestParams::_internal_has_credentials_mode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RequestParams::has_credentials_mode() const {
  return _internal_has_credentials_mode();
}
inline void RequestParams::clear_credentials_mode() {
  credentials_mode_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t RequestParams::_internal_credentials_mode() const {
  return credentials_mode_;
}
inline int32_t RequestParams::credentials_mode() const {
  // @@protoc_insertion_point(field_get:protodb.RequestParams.credentials_mode)
  return _internal_credentials_mode();
}
inline void RequestParams::_internal_set_credentials_mode(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  credentials_mode_ = value;
}
inline void RequestParams::set_credentials_mode(int32_t value) {
  _internal_set_credentials_mode(value);
  // @@protoc_insertion_point(field_set:protodb.RequestParams.credentials_mode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protodb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_request_2eproto
