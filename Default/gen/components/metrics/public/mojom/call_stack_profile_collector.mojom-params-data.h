// components/metrics/public/mojom/call_stack_profile_collector.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_METRICS_PUBLIC_MOJOM_CALL_STACK_PROFILE_COLLECTOR_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_METRICS_PUBLIC_MOJOM_CALL_STACK_PROFILE_COLLECTOR_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace metrics {
namespace mojom {
namespace internal {

class ValidationContext;
class  CallStackProfileCollector_Collect_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> start_timestamp;
  int32_t profile_type;
  uint8_t pad1_[4];
  mojo::internal::Pointer<internal::SampledProfile_Data> profile;

 private:
  friend class mojo::internal::MessageFragment<CallStackProfileCollector_Collect_Params_Data>;

  CallStackProfileCollector_Collect_Params_Data();
  ~CallStackProfileCollector_Collect_Params_Data() = delete;
};
static_assert(sizeof(CallStackProfileCollector_Collect_Params_Data) == 32,
              "Bad sizeof(CallStackProfileCollector_Collect_Params_Data)");

}  // namespace internal


class CallStackProfileCollector_Collect_ParamsDataView {
 public:
  CallStackProfileCollector_Collect_ParamsDataView() = default;

  CallStackProfileCollector_Collect_ParamsDataView(
      internal::CallStackProfileCollector_Collect_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStartTimestampDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStartTimestamp(UserType* output) {
    
    auto* pointer = data_->start_timestamp.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadProfileType(UserType* output) const {
    auto data_value = data_->profile_type;
    return mojo::internal::Deserialize<::metrics::mojom::ProfileType>(
        data_value, output);
  }
  ProfileType profile_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::metrics::mojom::ProfileType>(data_->profile_type));
  }
  inline void GetProfileDataView(
      SampledProfileDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadProfile(UserType* output) {
    
    auto* pointer = data_->profile.Get();
    return mojo::internal::Deserialize<::metrics::mojom::SampledProfileDataView>(
        pointer, output, message_);
  }
 private:
  internal::CallStackProfileCollector_Collect_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void CallStackProfileCollector_Collect_ParamsDataView::GetStartTimestampDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->start_timestamp.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}
inline void CallStackProfileCollector_Collect_ParamsDataView::GetProfileDataView(
    SampledProfileDataView* output) {
  auto pointer = data_->profile.Get();
  *output = SampledProfileDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace metrics

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_METRICS_PUBLIC_MOJOM_CALL_STACK_PROFILE_COLLECTOR_MOJOM_PARAMS_DATA_H_