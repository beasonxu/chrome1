// components/metrics/public/mojom/single_sample_metrics.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_METRICS_PUBLIC_MOJOM_SINGLE_SAMPLE_METRICS_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_METRICS_PUBLIC_MOJOM_SINGLE_SAMPLE_METRICS_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace metrics {
namespace mojom {
namespace internal {

class ValidationContext;
class  SingleSampleMetricsProvider_AcquireSingleSampleMetric_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> histogram_name;
  int32_t min;
  int32_t max;
  uint32_t bucket_count;
  int32_t flags;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SingleSampleMetricsProvider_AcquireSingleSampleMetric_Params_Data>;

  SingleSampleMetricsProvider_AcquireSingleSampleMetric_Params_Data();
  ~SingleSampleMetricsProvider_AcquireSingleSampleMetric_Params_Data() = delete;
};
static_assert(sizeof(SingleSampleMetricsProvider_AcquireSingleSampleMetric_Params_Data) == 40,
              "Bad sizeof(SingleSampleMetricsProvider_AcquireSingleSampleMetric_Params_Data)");
class  SingleSampleMetric_SetSample_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t sample;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SingleSampleMetric_SetSample_Params_Data>;

  SingleSampleMetric_SetSample_Params_Data();
  ~SingleSampleMetric_SetSample_Params_Data() = delete;
};
static_assert(sizeof(SingleSampleMetric_SetSample_Params_Data) == 16,
              "Bad sizeof(SingleSampleMetric_SetSample_Params_Data)");

}  // namespace internal


class SingleSampleMetricsProvider_AcquireSingleSampleMetric_ParamsDataView {
 public:
  SingleSampleMetricsProvider_AcquireSingleSampleMetric_ParamsDataView() = default;

  SingleSampleMetricsProvider_AcquireSingleSampleMetric_ParamsDataView(
      internal::SingleSampleMetricsProvider_AcquireSingleSampleMetric_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetHistogramNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHistogramName(UserType* output) {
    
    auto* pointer = data_->histogram_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  int32_t min() const {
    return data_->min;
  }
  int32_t max() const {
    return data_->max;
  }
  uint32_t bucket_count() const {
    return data_->bucket_count;
  }
  int32_t flags() const {
    return data_->flags;
  }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::metrics::mojom::SingleSampleMetricInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::SingleSampleMetricsProvider_AcquireSingleSampleMetric_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SingleSampleMetric_SetSample_ParamsDataView {
 public:
  SingleSampleMetric_SetSample_ParamsDataView() = default;

  SingleSampleMetric_SetSample_ParamsDataView(
      internal::SingleSampleMetric_SetSample_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t sample() const {
    return data_->sample;
  }
 private:
  internal::SingleSampleMetric_SetSample_Params_Data* data_ = nullptr;
};


inline void SingleSampleMetricsProvider_AcquireSingleSampleMetric_ParamsDataView::GetHistogramNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->histogram_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace metrics

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_METRICS_PUBLIC_MOJOM_SINGLE_SAMPLE_METRICS_MOJOM_PARAMS_DATA_H_