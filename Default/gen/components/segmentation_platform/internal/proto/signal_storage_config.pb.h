// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/segmentation_platform/internal/proto/signal_storage_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsegmentation_5fplatform_2finternal_2fproto_2fsignal_5fstorage_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsegmentation_5fplatform_2finternal_2fproto_2fsignal_5fstorage_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "components/segmentation_platform/public/proto/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsegmentation_5fplatform_2finternal_2fproto_2fsignal_5fstorage_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsegmentation_5fplatform_2finternal_2fproto_2fsignal_5fstorage_5fconfig_2eproto {
  static const uint32_t offsets[];
};
namespace segmentation_platform {
namespace proto {
class SignalStorageConfig;
struct SignalStorageConfigDefaultTypeInternal;
extern SignalStorageConfigDefaultTypeInternal _SignalStorageConfig_default_instance_;
class SignalStorageConfigs;
struct SignalStorageConfigsDefaultTypeInternal;
extern SignalStorageConfigsDefaultTypeInternal _SignalStorageConfigs_default_instance_;
}  // namespace proto
}  // namespace segmentation_platform
PROTOBUF_NAMESPACE_OPEN
template<> ::segmentation_platform::proto::SignalStorageConfig* Arena::CreateMaybeMessage<::segmentation_platform::proto::SignalStorageConfig>(Arena*);
template<> ::segmentation_platform::proto::SignalStorageConfigs* Arena::CreateMaybeMessage<::segmentation_platform::proto::SignalStorageConfigs>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace segmentation_platform {
namespace proto {

// ===================================================================

class SignalStorageConfig final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:segmentation_platform.proto.SignalStorageConfig) */ {
 public:
  inline SignalStorageConfig() : SignalStorageConfig(nullptr) {}
  ~SignalStorageConfig() override;
  explicit PROTOBUF_CONSTEXPR SignalStorageConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignalStorageConfig(const SignalStorageConfig& from);
  SignalStorageConfig(SignalStorageConfig&& from) noexcept
    : SignalStorageConfig() {
    *this = ::std::move(from);
  }

  inline SignalStorageConfig& operator=(const SignalStorageConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalStorageConfig& operator=(SignalStorageConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SignalStorageConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignalStorageConfig* internal_default_instance() {
    return reinterpret_cast<const SignalStorageConfig*>(
               &_SignalStorageConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SignalStorageConfig& a, SignalStorageConfig& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SignalStorageConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalStorageConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignalStorageConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignalStorageConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SignalStorageConfig& from);
  void MergeFrom(const SignalStorageConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SignalStorageConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "segmentation_platform.proto.SignalStorageConfig";
  }
  protected:
  explicit SignalStorageConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameHashFieldNumber = 1,
    kStorageLengthSFieldNumber = 3,
    kCollectionStartTimeSFieldNumber = 4,
    kEventHashFieldNumber = 5,
    kSignalTypeFieldNumber = 2,
  };
  // optional uint64 name_hash = 1;
  bool has_name_hash() const;
  private:
  bool _internal_has_name_hash() const;
  public:
  void clear_name_hash();
  uint64_t name_hash() const;
  void set_name_hash(uint64_t value);
  private:
  uint64_t _internal_name_hash() const;
  void _internal_set_name_hash(uint64_t value);
  public:

  // optional int64 storage_length_s = 3;
  bool has_storage_length_s() const;
  private:
  bool _internal_has_storage_length_s() const;
  public:
  void clear_storage_length_s();
  int64_t storage_length_s() const;
  void set_storage_length_s(int64_t value);
  private:
  int64_t _internal_storage_length_s() const;
  void _internal_set_storage_length_s(int64_t value);
  public:

  // optional int64 collection_start_time_s = 4;
  bool has_collection_start_time_s() const;
  private:
  bool _internal_has_collection_start_time_s() const;
  public:
  void clear_collection_start_time_s();
  int64_t collection_start_time_s() const;
  void set_collection_start_time_s(int64_t value);
  private:
  int64_t _internal_collection_start_time_s() const;
  void _internal_set_collection_start_time_s(int64_t value);
  public:

  // optional uint64 event_hash = 5;
  bool has_event_hash() const;
  private:
  bool _internal_has_event_hash() const;
  public:
  void clear_event_hash();
  uint64_t event_hash() const;
  void set_event_hash(uint64_t value);
  private:
  uint64_t _internal_event_hash() const;
  void _internal_set_event_hash(uint64_t value);
  public:

  // optional .segmentation_platform.proto.SignalType signal_type = 2;
  bool has_signal_type() const;
  private:
  bool _internal_has_signal_type() const;
  public:
  void clear_signal_type();
  ::segmentation_platform::proto::SignalType signal_type() const;
  void set_signal_type(::segmentation_platform::proto::SignalType value);
  private:
  ::segmentation_platform::proto::SignalType _internal_signal_type() const;
  void _internal_set_signal_type(::segmentation_platform::proto::SignalType value);
  public:

  // @@protoc_insertion_point(class_scope:segmentation_platform.proto.SignalStorageConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t name_hash_;
  int64_t storage_length_s_;
  int64_t collection_start_time_s_;
  uint64_t event_hash_;
  int signal_type_;
  friend struct ::TableStruct_components_2fsegmentation_5fplatform_2finternal_2fproto_2fsignal_5fstorage_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SignalStorageConfigs final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:segmentation_platform.proto.SignalStorageConfigs) */ {
 public:
  inline SignalStorageConfigs() : SignalStorageConfigs(nullptr) {}
  ~SignalStorageConfigs() override;
  explicit PROTOBUF_CONSTEXPR SignalStorageConfigs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignalStorageConfigs(const SignalStorageConfigs& from);
  SignalStorageConfigs(SignalStorageConfigs&& from) noexcept
    : SignalStorageConfigs() {
    *this = ::std::move(from);
  }

  inline SignalStorageConfigs& operator=(const SignalStorageConfigs& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalStorageConfigs& operator=(SignalStorageConfigs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SignalStorageConfigs& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignalStorageConfigs* internal_default_instance() {
    return reinterpret_cast<const SignalStorageConfigs*>(
               &_SignalStorageConfigs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SignalStorageConfigs& a, SignalStorageConfigs& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SignalStorageConfigs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalStorageConfigs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignalStorageConfigs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignalStorageConfigs>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SignalStorageConfigs& from);
  void MergeFrom(const SignalStorageConfigs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SignalStorageConfigs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "segmentation_platform.proto.SignalStorageConfigs";
  }
  protected:
  explicit SignalStorageConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalsFieldNumber = 1,
  };
  // repeated .segmentation_platform.proto.SignalStorageConfig signals = 1;
  int signals_size() const;
  private:
  int _internal_signals_size() const;
  public:
  void clear_signals();
  ::segmentation_platform::proto::SignalStorageConfig* mutable_signals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::segmentation_platform::proto::SignalStorageConfig >*
      mutable_signals();
  private:
  const ::segmentation_platform::proto::SignalStorageConfig& _internal_signals(int index) const;
  ::segmentation_platform::proto::SignalStorageConfig* _internal_add_signals();
  public:
  const ::segmentation_platform::proto::SignalStorageConfig& signals(int index) const;
  ::segmentation_platform::proto::SignalStorageConfig* add_signals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::segmentation_platform::proto::SignalStorageConfig >&
      signals() const;

  // @@protoc_insertion_point(class_scope:segmentation_platform.proto.SignalStorageConfigs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::segmentation_platform::proto::SignalStorageConfig > signals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsegmentation_5fplatform_2finternal_2fproto_2fsignal_5fstorage_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SignalStorageConfig

// optional uint64 name_hash = 1;
inline bool SignalStorageConfig::_internal_has_name_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SignalStorageConfig::has_name_hash() const {
  return _internal_has_name_hash();
}
inline void SignalStorageConfig::clear_name_hash() {
  name_hash_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t SignalStorageConfig::_internal_name_hash() const {
  return name_hash_;
}
inline uint64_t SignalStorageConfig::name_hash() const {
  // @@protoc_insertion_point(field_get:segmentation_platform.proto.SignalStorageConfig.name_hash)
  return _internal_name_hash();
}
inline void SignalStorageConfig::_internal_set_name_hash(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  name_hash_ = value;
}
inline void SignalStorageConfig::set_name_hash(uint64_t value) {
  _internal_set_name_hash(value);
  // @@protoc_insertion_point(field_set:segmentation_platform.proto.SignalStorageConfig.name_hash)
}

// optional uint64 event_hash = 5;
inline bool SignalStorageConfig::_internal_has_event_hash() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SignalStorageConfig::has_event_hash() const {
  return _internal_has_event_hash();
}
inline void SignalStorageConfig::clear_event_hash() {
  event_hash_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t SignalStorageConfig::_internal_event_hash() const {
  return event_hash_;
}
inline uint64_t SignalStorageConfig::event_hash() const {
  // @@protoc_insertion_point(field_get:segmentation_platform.proto.SignalStorageConfig.event_hash)
  return _internal_event_hash();
}
inline void SignalStorageConfig::_internal_set_event_hash(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  event_hash_ = value;
}
inline void SignalStorageConfig::set_event_hash(uint64_t value) {
  _internal_set_event_hash(value);
  // @@protoc_insertion_point(field_set:segmentation_platform.proto.SignalStorageConfig.event_hash)
}

// optional .segmentation_platform.proto.SignalType signal_type = 2;
inline bool SignalStorageConfig::_internal_has_signal_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SignalStorageConfig::has_signal_type() const {
  return _internal_has_signal_type();
}
inline void SignalStorageConfig::clear_signal_type() {
  signal_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::segmentation_platform::proto::SignalType SignalStorageConfig::_internal_signal_type() const {
  return static_cast< ::segmentation_platform::proto::SignalType >(signal_type_);
}
inline ::segmentation_platform::proto::SignalType SignalStorageConfig::signal_type() const {
  // @@protoc_insertion_point(field_get:segmentation_platform.proto.SignalStorageConfig.signal_type)
  return _internal_signal_type();
}
inline void SignalStorageConfig::_internal_set_signal_type(::segmentation_platform::proto::SignalType value) {
  assert(::segmentation_platform::proto::SignalType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  signal_type_ = value;
}
inline void SignalStorageConfig::set_signal_type(::segmentation_platform::proto::SignalType value) {
  _internal_set_signal_type(value);
  // @@protoc_insertion_point(field_set:segmentation_platform.proto.SignalStorageConfig.signal_type)
}

// optional int64 storage_length_s = 3;
inline bool SignalStorageConfig::_internal_has_storage_length_s() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SignalStorageConfig::has_storage_length_s() const {
  return _internal_has_storage_length_s();
}
inline void SignalStorageConfig::clear_storage_length_s() {
  storage_length_s_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t SignalStorageConfig::_internal_storage_length_s() const {
  return storage_length_s_;
}
inline int64_t SignalStorageConfig::storage_length_s() const {
  // @@protoc_insertion_point(field_get:segmentation_platform.proto.SignalStorageConfig.storage_length_s)
  return _internal_storage_length_s();
}
inline void SignalStorageConfig::_internal_set_storage_length_s(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  storage_length_s_ = value;
}
inline void SignalStorageConfig::set_storage_length_s(int64_t value) {
  _internal_set_storage_length_s(value);
  // @@protoc_insertion_point(field_set:segmentation_platform.proto.SignalStorageConfig.storage_length_s)
}

// optional int64 collection_start_time_s = 4;
inline bool SignalStorageConfig::_internal_has_collection_start_time_s() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SignalStorageConfig::has_collection_start_time_s() const {
  return _internal_has_collection_start_time_s();
}
inline void SignalStorageConfig::clear_collection_start_time_s() {
  collection_start_time_s_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t SignalStorageConfig::_internal_collection_start_time_s() const {
  return collection_start_time_s_;
}
inline int64_t SignalStorageConfig::collection_start_time_s() const {
  // @@protoc_insertion_point(field_get:segmentation_platform.proto.SignalStorageConfig.collection_start_time_s)
  return _internal_collection_start_time_s();
}
inline void SignalStorageConfig::_internal_set_collection_start_time_s(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  collection_start_time_s_ = value;
}
inline void SignalStorageConfig::set_collection_start_time_s(int64_t value) {
  _internal_set_collection_start_time_s(value);
  // @@protoc_insertion_point(field_set:segmentation_platform.proto.SignalStorageConfig.collection_start_time_s)
}

// -------------------------------------------------------------------

// SignalStorageConfigs

// repeated .segmentation_platform.proto.SignalStorageConfig signals = 1;
inline int SignalStorageConfigs::_internal_signals_size() const {
  return signals_.size();
}
inline int SignalStorageConfigs::signals_size() const {
  return _internal_signals_size();
}
inline void SignalStorageConfigs::clear_signals() {
  signals_.Clear();
}
inline ::segmentation_platform::proto::SignalStorageConfig* SignalStorageConfigs::mutable_signals(int index) {
  // @@protoc_insertion_point(field_mutable:segmentation_platform.proto.SignalStorageConfigs.signals)
  return signals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::segmentation_platform::proto::SignalStorageConfig >*
SignalStorageConfigs::mutable_signals() {
  // @@protoc_insertion_point(field_mutable_list:segmentation_platform.proto.SignalStorageConfigs.signals)
  return &signals_;
}
inline const ::segmentation_platform::proto::SignalStorageConfig& SignalStorageConfigs::_internal_signals(int index) const {
  return signals_.Get(index);
}
inline const ::segmentation_platform::proto::SignalStorageConfig& SignalStorageConfigs::signals(int index) const {
  // @@protoc_insertion_point(field_get:segmentation_platform.proto.SignalStorageConfigs.signals)
  return _internal_signals(index);
}
inline ::segmentation_platform::proto::SignalStorageConfig* SignalStorageConfigs::_internal_add_signals() {
  return signals_.Add();
}
inline ::segmentation_platform::proto::SignalStorageConfig* SignalStorageConfigs::add_signals() {
  ::segmentation_platform::proto::SignalStorageConfig* _add = _internal_add_signals();
  // @@protoc_insertion_point(field_add:segmentation_platform.proto.SignalStorageConfigs.signals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::segmentation_platform::proto::SignalStorageConfig >&
SignalStorageConfigs::signals() const {
  // @@protoc_insertion_point(field_list:segmentation_platform.proto.SignalStorageConfigs.signals)
  return signals_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace segmentation_platform

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsegmentation_5fplatform_2finternal_2fproto_2fsignal_5fstorage_5fconfig_2eproto
