// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/segmentation_platform/internal/proto/signal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsegmentation_5fplatform_2finternal_2fproto_2fsignal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsegmentation_5fplatform_2finternal_2fproto_2fsignal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsegmentation_5fplatform_2finternal_2fproto_2fsignal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsegmentation_5fplatform_2finternal_2fproto_2fsignal_2eproto {
  static const uint32_t offsets[];
};
namespace segmentation_platform {
namespace proto {
class Sample;
struct SampleDefaultTypeInternal;
extern SampleDefaultTypeInternal _Sample_default_instance_;
class SignalData;
struct SignalDataDefaultTypeInternal;
extern SignalDataDefaultTypeInternal _SignalData_default_instance_;
}  // namespace proto
}  // namespace segmentation_platform
PROTOBUF_NAMESPACE_OPEN
template<> ::segmentation_platform::proto::Sample* Arena::CreateMaybeMessage<::segmentation_platform::proto::Sample>(Arena*);
template<> ::segmentation_platform::proto::SignalData* Arena::CreateMaybeMessage<::segmentation_platform::proto::SignalData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace segmentation_platform {
namespace proto {

// ===================================================================

class SignalData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:segmentation_platform.proto.SignalData) */ {
 public:
  inline SignalData() : SignalData(nullptr) {}
  ~SignalData() override;
  explicit PROTOBUF_CONSTEXPR SignalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignalData(const SignalData& from);
  SignalData(SignalData&& from) noexcept
    : SignalData() {
    *this = ::std::move(from);
  }

  inline SignalData& operator=(const SignalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalData& operator=(SignalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SignalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignalData* internal_default_instance() {
    return reinterpret_cast<const SignalData*>(
               &_SignalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SignalData& a, SignalData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SignalData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignalData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SignalData& from);
  void MergeFrom(const SignalData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SignalData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "segmentation_platform.proto.SignalData";
  }
  protected:
  explicit SignalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSamplesFieldNumber = 1,
  };
  // repeated .segmentation_platform.proto.Sample samples = 1;
  int samples_size() const;
  private:
  int _internal_samples_size() const;
  public:
  void clear_samples();
  ::segmentation_platform::proto::Sample* mutable_samples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::segmentation_platform::proto::Sample >*
      mutable_samples();
  private:
  const ::segmentation_platform::proto::Sample& _internal_samples(int index) const;
  ::segmentation_platform::proto::Sample* _internal_add_samples();
  public:
  const ::segmentation_platform::proto::Sample& samples(int index) const;
  ::segmentation_platform::proto::Sample* add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::segmentation_platform::proto::Sample >&
      samples() const;

  // @@protoc_insertion_point(class_scope:segmentation_platform.proto.SignalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::segmentation_platform::proto::Sample > samples_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsegmentation_5fplatform_2finternal_2fproto_2fsignal_2eproto;
};
// -------------------------------------------------------------------

class Sample final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:segmentation_platform.proto.Sample) */ {
 public:
  inline Sample() : Sample(nullptr) {}
  ~Sample() override;
  explicit PROTOBUF_CONSTEXPR Sample(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sample(const Sample& from);
  Sample(Sample&& from) noexcept
    : Sample() {
    *this = ::std::move(from);
  }

  inline Sample& operator=(const Sample& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sample& operator=(Sample&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Sample& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sample* internal_default_instance() {
    return reinterpret_cast<const Sample*>(
               &_Sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Sample& a, Sample& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Sample* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sample* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sample>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Sample& from);
  void MergeFrom(const Sample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Sample* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "segmentation_platform.proto.Sample";
  }
  protected:
  explicit Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kTimeSecDeltaFieldNumber = 2,
  };
  // optional int32 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // optional int32 time_sec_delta = 2;
  bool has_time_sec_delta() const;
  private:
  bool _internal_has_time_sec_delta() const;
  public:
  void clear_time_sec_delta();
  int32_t time_sec_delta() const;
  void set_time_sec_delta(int32_t value);
  private:
  int32_t _internal_time_sec_delta() const;
  void _internal_set_time_sec_delta(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:segmentation_platform.proto.Sample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t value_;
  int32_t time_sec_delta_;
  friend struct ::TableStruct_components_2fsegmentation_5fplatform_2finternal_2fproto_2fsignal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SignalData

// repeated .segmentation_platform.proto.Sample samples = 1;
inline int SignalData::_internal_samples_size() const {
  return samples_.size();
}
inline int SignalData::samples_size() const {
  return _internal_samples_size();
}
inline void SignalData::clear_samples() {
  samples_.Clear();
}
inline ::segmentation_platform::proto::Sample* SignalData::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:segmentation_platform.proto.SignalData.samples)
  return samples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::segmentation_platform::proto::Sample >*
SignalData::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:segmentation_platform.proto.SignalData.samples)
  return &samples_;
}
inline const ::segmentation_platform::proto::Sample& SignalData::_internal_samples(int index) const {
  return samples_.Get(index);
}
inline const ::segmentation_platform::proto::Sample& SignalData::samples(int index) const {
  // @@protoc_insertion_point(field_get:segmentation_platform.proto.SignalData.samples)
  return _internal_samples(index);
}
inline ::segmentation_platform::proto::Sample* SignalData::_internal_add_samples() {
  return samples_.Add();
}
inline ::segmentation_platform::proto::Sample* SignalData::add_samples() {
  ::segmentation_platform::proto::Sample* _add = _internal_add_samples();
  // @@protoc_insertion_point(field_add:segmentation_platform.proto.SignalData.samples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::segmentation_platform::proto::Sample >&
SignalData::samples() const {
  // @@protoc_insertion_point(field_list:segmentation_platform.proto.SignalData.samples)
  return samples_;
}

// -------------------------------------------------------------------

// Sample

// optional int32 value = 1;
inline bool Sample::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Sample::has_value() const {
  return _internal_has_value();
}
inline void Sample::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t Sample::_internal_value() const {
  return value_;
}
inline int32_t Sample::value() const {
  // @@protoc_insertion_point(field_get:segmentation_platform.proto.Sample.value)
  return _internal_value();
}
inline void Sample::_internal_set_value(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void Sample::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:segmentation_platform.proto.Sample.value)
}

// optional int32 time_sec_delta = 2;
inline bool Sample::_internal_has_time_sec_delta() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Sample::has_time_sec_delta() const {
  return _internal_has_time_sec_delta();
}
inline void Sample::clear_time_sec_delta() {
  time_sec_delta_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Sample::_internal_time_sec_delta() const {
  return time_sec_delta_;
}
inline int32_t Sample::time_sec_delta() const {
  // @@protoc_insertion_point(field_get:segmentation_platform.proto.Sample.time_sec_delta)
  return _internal_time_sec_delta();
}
inline void Sample::_internal_set_time_sec_delta(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  time_sec_delta_ = value;
}
inline void Sample::set_time_sec_delta(int32_t value) {
  _internal_set_time_sec_delta(value);
  // @@protoc_insertion_point(field_set:segmentation_platform.proto.Sample.time_sec_delta)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace segmentation_platform

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsegmentation_5fplatform_2finternal_2fproto_2fsignal_2eproto
