// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/segmentation_platform/internal/proto/signal_storage_config.proto

#include "components/segmentation_platform/internal/proto/signal_storage_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace segmentation_platform {
namespace proto {
PROTOBUF_CONSTEXPR SignalStorageConfig::SignalStorageConfig(
    ::_pbi::ConstantInitialized)
  : name_hash_(uint64_t{0u})
  , storage_length_s_(int64_t{0})
  , collection_start_time_s_(int64_t{0})
  , event_hash_(uint64_t{0u})
  , signal_type_(0)
{}
struct SignalStorageConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalStorageConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalStorageConfigDefaultTypeInternal() {}
  union {
    SignalStorageConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalStorageConfigDefaultTypeInternal _SignalStorageConfig_default_instance_;
PROTOBUF_CONSTEXPR SignalStorageConfigs::SignalStorageConfigs(
    ::_pbi::ConstantInitialized)
  : signals_(){}
struct SignalStorageConfigsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalStorageConfigsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalStorageConfigsDefaultTypeInternal() {}
  union {
    SignalStorageConfigs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalStorageConfigsDefaultTypeInternal _SignalStorageConfigs_default_instance_;
}  // namespace proto
}  // namespace segmentation_platform
namespace segmentation_platform {
namespace proto {

// ===================================================================

class SignalStorageConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SignalStorageConfig>()._has_bits_);
  static void set_has_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_signal_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_storage_length_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_collection_start_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SignalStorageConfig::SignalStorageConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:segmentation_platform.proto.SignalStorageConfig)
}
SignalStorageConfig::SignalStorageConfig(const SignalStorageConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&name_hash_, &from.name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_type_) -
    reinterpret_cast<char*>(&name_hash_)) + sizeof(signal_type_));
  // @@protoc_insertion_point(copy_constructor:segmentation_platform.proto.SignalStorageConfig)
}

inline void SignalStorageConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&name_hash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signal_type_) -
    reinterpret_cast<char*>(&name_hash_)) + sizeof(signal_type_));
}

SignalStorageConfig::~SignalStorageConfig() {
  // @@protoc_insertion_point(destructor:segmentation_platform.proto.SignalStorageConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignalStorageConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SignalStorageConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignalStorageConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:segmentation_platform.proto.SignalStorageConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&signal_type_) -
        reinterpret_cast<char*>(&name_hash_)) + sizeof(signal_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SignalStorageConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 name_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_name_hash(&has_bits);
          name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .segmentation_platform.proto.SignalType signal_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::segmentation_platform::proto::SignalType_IsValid(val))) {
            _internal_set_signal_type(static_cast<::segmentation_platform::proto::SignalType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 storage_length_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_storage_length_s(&has_bits);
          storage_length_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 collection_start_time_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_collection_start_time_s(&has_bits);
          collection_start_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 event_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_event_hash(&has_bits);
          event_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignalStorageConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:segmentation_platform.proto.SignalStorageConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 name_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_name_hash(), target);
  }

  // optional .segmentation_platform.proto.SignalType signal_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_signal_type(), target);
  }

  // optional int64 storage_length_s = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_storage_length_s(), target);
  }

  // optional int64 collection_start_time_s = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_collection_start_time_s(), target);
  }

  // optional uint64 event_hash = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_event_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:segmentation_platform.proto.SignalStorageConfig)
  return target;
}

size_t SignalStorageConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:segmentation_platform.proto.SignalStorageConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 name_hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_name_hash());
    }

    // optional int64 storage_length_s = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_storage_length_s());
    }

    // optional int64 collection_start_time_s = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_collection_start_time_s());
    }

    // optional uint64 event_hash = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_event_hash());
    }

    // optional .segmentation_platform.proto.SignalType signal_type = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_signal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalStorageConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SignalStorageConfig*>(
      &from));
}

void SignalStorageConfig::MergeFrom(const SignalStorageConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:segmentation_platform.proto.SignalStorageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      name_hash_ = from.name_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      storage_length_s_ = from.storage_length_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      collection_start_time_s_ = from.collection_start_time_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_hash_ = from.event_hash_;
    }
    if (cached_has_bits & 0x00000010u) {
      signal_type_ = from.signal_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SignalStorageConfig::CopyFrom(const SignalStorageConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:segmentation_platform.proto.SignalStorageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalStorageConfig::IsInitialized() const {
  return true;
}

void SignalStorageConfig::InternalSwap(SignalStorageConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalStorageConfig, signal_type_)
      + sizeof(SignalStorageConfig::signal_type_)
      - PROTOBUF_FIELD_OFFSET(SignalStorageConfig, name_hash_)>(
          reinterpret_cast<char*>(&name_hash_),
          reinterpret_cast<char*>(&other->name_hash_));
}

std::string SignalStorageConfig::GetTypeName() const {
  return "segmentation_platform.proto.SignalStorageConfig";
}


// ===================================================================

class SignalStorageConfigs::_Internal {
 public:
};

SignalStorageConfigs::SignalStorageConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  signals_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:segmentation_platform.proto.SignalStorageConfigs)
}
SignalStorageConfigs::SignalStorageConfigs(const SignalStorageConfigs& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      signals_(from.signals_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:segmentation_platform.proto.SignalStorageConfigs)
}

inline void SignalStorageConfigs::SharedCtor() {
}

SignalStorageConfigs::~SignalStorageConfigs() {
  // @@protoc_insertion_point(destructor:segmentation_platform.proto.SignalStorageConfigs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignalStorageConfigs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SignalStorageConfigs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignalStorageConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:segmentation_platform.proto.SignalStorageConfigs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signals_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SignalStorageConfigs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .segmentation_platform.proto.SignalStorageConfig signals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignalStorageConfigs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:segmentation_platform.proto.SignalStorageConfigs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .segmentation_platform.proto.SignalStorageConfig signals = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signals_size()); i < n; i++) {
    const auto& repfield = this->_internal_signals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:segmentation_platform.proto.SignalStorageConfigs)
  return target;
}

size_t SignalStorageConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:segmentation_platform.proto.SignalStorageConfigs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .segmentation_platform.proto.SignalStorageConfig signals = 1;
  total_size += 1UL * this->_internal_signals_size();
  for (const auto& msg : this->signals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalStorageConfigs::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SignalStorageConfigs*>(
      &from));
}

void SignalStorageConfigs::MergeFrom(const SignalStorageConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:segmentation_platform.proto.SignalStorageConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  signals_.MergeFrom(from.signals_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SignalStorageConfigs::CopyFrom(const SignalStorageConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:segmentation_platform.proto.SignalStorageConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalStorageConfigs::IsInitialized() const {
  return true;
}

void SignalStorageConfigs::InternalSwap(SignalStorageConfigs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  signals_.InternalSwap(&other->signals_);
}

std::string SignalStorageConfigs::GetTypeName() const {
  return "segmentation_platform.proto.SignalStorageConfigs";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace segmentation_platform
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::segmentation_platform::proto::SignalStorageConfig*
Arena::CreateMaybeMessage< ::segmentation_platform::proto::SignalStorageConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::segmentation_platform::proto::SignalStorageConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::segmentation_platform::proto::SignalStorageConfigs*
Arena::CreateMaybeMessage< ::segmentation_platform::proto::SignalStorageConfigs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::segmentation_platform::proto::SignalStorageConfigs >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
