// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/segmentation_platform/SegmentationPlatformServiceImpl

#ifndef org_chromium_components_segmentation_platform_SegmentationPlatformServiceImpl_JNI
#define org_chromium_components_segmentation_platform_SegmentationPlatformServiceImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_segmentation_1platform_SegmentationPlatformServiceImpl[];
const char
    kClassPath_org_chromium_components_segmentation_1platform_SegmentationPlatformServiceImpl[] =
    "org/chromium/components/segmentation_platform/SegmentationPlatformServiceImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_segmentation_1platform_SegmentationPlatformServiceImpl_clazz(nullptr);
#ifndef org_chromium_components_segmentation_1platform_SegmentationPlatformServiceImpl_clazz_defined
#define org_chromium_components_segmentation_1platform_SegmentationPlatformServiceImpl_clazz_defined
inline jclass
    org_chromium_components_segmentation_1platform_SegmentationPlatformServiceImpl_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_segmentation_1platform_SegmentationPlatformServiceImpl,
      &g_org_chromium_components_segmentation_1platform_SegmentationPlatformServiceImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace segmentation_platform {

JNI_GENERATOR_EXPORT void Java_J_N_Mv7niEOS(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSegmentationPlatformServiceAndroid,
    jobject caller,
    jstring segmentationKey,
    jobject callback) {
  SegmentationPlatformServiceAndroid* native =
      reinterpret_cast<SegmentationPlatformServiceAndroid*>(nativeSegmentationPlatformServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetSelectedSegment");
  return native->GetSelectedSegment(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, segmentationKey),
      base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MoSpmdy8(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSegmentationPlatformServiceAndroid,
    jobject caller,
    jstring segmentationKey) {
  SegmentationPlatformServiceAndroid* native =
      reinterpret_cast<SegmentationPlatformServiceAndroid*>(nativeSegmentationPlatformServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetCachedSegmentResult", NULL);
  return native->GetCachedSegmentResult(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, segmentationKey)).Release();
}

JNI_GENERATOR_EXPORT jint Java_J_N_MsHsiuQm(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSegmentationPlatformServiceAndroid,
    jobject caller,
    jstring segmentationKey,
    jobject callback) {
  SegmentationPlatformServiceAndroid* native =
      reinterpret_cast<SegmentationPlatformServiceAndroid*>(nativeSegmentationPlatformServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "RegisterOnDemandSegmentSelectionCallback", 0);
  return native->RegisterOnDemandSegmentSelectionCallback(env,
      base::android::JavaParamRef<jobject>(env, caller), base::android::JavaParamRef<jstring>(env,
      segmentationKey), base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_M3dNsttn(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSegmentationPlatformServiceAndroid,
    jobject caller,
    jstring segmentationKey,
    jint callbackId) {
  SegmentationPlatformServiceAndroid* native =
      reinterpret_cast<SegmentationPlatformServiceAndroid*>(nativeSegmentationPlatformServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "UnregisterOnDemandSegmentSelectionCallback");
  return native->UnregisterOnDemandSegmentSelectionCallback(env,
      base::android::JavaParamRef<jobject>(env, caller), base::android::JavaParamRef<jstring>(env,
      segmentationKey), callbackId);
}


static std::atomic<jmethodID>
    g_org_chromium_components_segmentation_1platform_SegmentationPlatformServiceImpl_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_SegmentationPlatformServiceImpl_create(JNIEnv* env, jlong nativePtr) {
  jclass clazz =
      org_chromium_components_segmentation_1platform_SegmentationPlatformServiceImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_segmentation_1platform_SegmentationPlatformServiceImpl_clazz(env),
          NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/components/segmentation_platform/SegmentationPlatformServiceImpl;",
          &g_org_chromium_components_segmentation_1platform_SegmentationPlatformServiceImpl_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativePtr);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_segmentation_1platform_SegmentationPlatformServiceImpl_clearNativePtr(nullptr);
static void Java_SegmentationPlatformServiceImpl_clearNativePtr(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz =
      org_chromium_components_segmentation_1platform_SegmentationPlatformServiceImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_segmentation_1platform_SegmentationPlatformServiceImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "clearNativePtr",
          "()V",
&g_org_chromium_components_segmentation_1platform_SegmentationPlatformServiceImpl_clearNativePtr);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace segmentation_platform

#endif  // org_chromium_components_segmentation_platform_SegmentationPlatformServiceImpl_JNI
