// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/segmentation_platform/public/proto/segmentation_platform.proto

package org.chromium.components.segmentation_platform.proto;

public final class SegmentationProto {
  private SegmentationProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * <pre>
   * List of user segment types.
   * Any segment that needs a server provided model should have an entry in
   * OptimizationTarget. If the segment only uses default model, then the segment
   * should have a value higher than `MAX_OPTIMIZATION_TARGET`.
   * </pre>
   *
   * Protobuf enum {@code segmentation_platform.proto.SegmentId}
   */
  public enum SegmentId
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>OPTIMIZATION_TARGET_UNKNOWN = 0;</code>
     */
    OPTIMIZATION_TARGET_UNKNOWN(0),
    /**
     * <pre>
     * Should only be applied when the page load is predicted to be painful.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_PAINFUL_PAGE_LOAD = 1;</code>
     */
    OPTIMIZATION_TARGET_PAINFUL_PAGE_LOAD(1),
    /**
     * <pre>
     * Target for supplying the language detection model via the model downloader.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_LANGUAGE_DETECTION = 2;</code>
     */
    OPTIMIZATION_TARGET_LANGUAGE_DETECTION(2),
    /**
     * <pre>
     * Target for determining topics present on a page.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_PAGE_TOPICS = 3;</code>
     */
    OPTIMIZATION_TARGET_PAGE_TOPICS(3),
    /**
     * <pre>
     * Target for segmentation: New tab page user.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_SEGMENTATION_NEW_TAB = 4;</code>
     */
    OPTIMIZATION_TARGET_SEGMENTATION_NEW_TAB(4),
    /**
     * <pre>
     * Target for segmentation: Share user.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_SEGMENTATION_SHARE = 5;</code>
     */
    OPTIMIZATION_TARGET_SEGMENTATION_SHARE(5),
    /**
     * <pre>
     * Target for segmentation: Voice user.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_SEGMENTATION_VOICE = 6;</code>
     */
    OPTIMIZATION_TARGET_SEGMENTATION_VOICE(6),
    /**
     * <pre>
     * Target for model validation.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_MODEL_VALIDATION = 7;</code>
     */
    OPTIMIZATION_TARGET_MODEL_VALIDATION(7),
    /**
     * <pre>
     * Target for determining entities present on a page.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_PAGE_ENTITIES = 8;</code>
     */
    OPTIMIZATION_TARGET_PAGE_ENTITIES(8),
    /**
     * <pre>
     * Target for Chrome Permissions Suggestions Service: Notification permission.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_NOTIFICATION_PERMISSION_PREDICTIONS = 9;</code>
     */
    OPTIMIZATION_TARGET_NOTIFICATION_PERMISSION_PREDICTIONS(9),
    /**
     * <pre>
     * Target that enables data collection on client side for various experiments.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_SEGMENTATION_DUMMY = 10;</code>
     */
    OPTIMIZATION_TARGET_SEGMENTATION_DUMMY(10),
    /**
     * <pre>
     * Target for segmentation: Chrome Android Start user.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_SEGMENTATION_CHROME_START_ANDROID = 11;</code>
     */
    OPTIMIZATION_TARGET_SEGMENTATION_CHROME_START_ANDROID(11),
    /**
     * <pre>
     * Target for segmentation: Query Tiles user.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_SEGMENTATION_QUERY_TILES = 12;</code>
     */
    OPTIMIZATION_TARGET_SEGMENTATION_QUERY_TILES(12),
    /**
     * <pre>
     * Target for determining the UI visibility of a page.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_PAGE_VISIBILITY = 13;</code>
     */
    OPTIMIZATION_TARGET_PAGE_VISIBILITY(13),
    /**
     * <pre>
     * Target for supplying the Autofill Assistant annotate DOM model via the
     * model downloader.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_AUTOFILL_ASSISTANT = 14;</code>
     */
    OPTIMIZATION_TARGET_AUTOFILL_ASSISTANT(14),
    /**
     * <pre>
     * Target for determining topics present on a page.
     * TODO(crbug/1266504): Remove PAGE_TOPICS in favor of this target.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_PAGE_TOPICS_V2 = 15;</code>
     */
    OPTIMIZATION_TARGET_PAGE_TOPICS_V2(15),
    /**
     * <pre>
     * Target for segmentation: Determine users with low engagement with chrome.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_SEGMENTATION_CHROME_LOW_USER_ENGAGEMENT = 16;</code>
     */
    OPTIMIZATION_TARGET_SEGMENTATION_CHROME_LOW_USER_ENGAGEMENT(16),
    /**
     * <pre>
     * Target for segmentation: Determine users who prefer to use Feed.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_SEGMENTATION_FEED_USER = 17;</code>
     */
    OPTIMIZATION_TARGET_SEGMENTATION_FEED_USER(17),
    /**
     * <pre>
     * Target for price tracking action when shown as a contextual page action.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_CONTEXTUAL_PAGE_ACTION_PRICE_TRACKING = 18;</code>
     */
    OPTIMIZATION_TARGET_CONTEXTUAL_PAGE_ACTION_PRICE_TRACKING(18),
    /**
     * <pre>
     * Target for segmentation: Determine users who are interested in shopping.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_SEGMENTATION_SHOPPING_USER = 19;</code>
     */
    OPTIMIZATION_TARGET_SEGMENTATION_SHOPPING_USER(19),
    /**
     * <pre>
     * New entries should start from a 1000 if OptimizationTarget does not
     * have a corresponding type.
     * </pre>
     *
     * <code>MAX_OPTIMIZATION_TARGET = 999;</code>
     */
    MAX_OPTIMIZATION_TARGET(999),
    ;

    /**
     * <code>OPTIMIZATION_TARGET_UNKNOWN = 0;</code>
     */
    public static final int OPTIMIZATION_TARGET_UNKNOWN_VALUE = 0;
    /**
     * <pre>
     * Should only be applied when the page load is predicted to be painful.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_PAINFUL_PAGE_LOAD = 1;</code>
     */
    public static final int OPTIMIZATION_TARGET_PAINFUL_PAGE_LOAD_VALUE = 1;
    /**
     * <pre>
     * Target for supplying the language detection model via the model downloader.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_LANGUAGE_DETECTION = 2;</code>
     */
    public static final int OPTIMIZATION_TARGET_LANGUAGE_DETECTION_VALUE = 2;
    /**
     * <pre>
     * Target for determining topics present on a page.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_PAGE_TOPICS = 3;</code>
     */
    public static final int OPTIMIZATION_TARGET_PAGE_TOPICS_VALUE = 3;
    /**
     * <pre>
     * Target for segmentation: New tab page user.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_SEGMENTATION_NEW_TAB = 4;</code>
     */
    public static final int OPTIMIZATION_TARGET_SEGMENTATION_NEW_TAB_VALUE = 4;
    /**
     * <pre>
     * Target for segmentation: Share user.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_SEGMENTATION_SHARE = 5;</code>
     */
    public static final int OPTIMIZATION_TARGET_SEGMENTATION_SHARE_VALUE = 5;
    /**
     * <pre>
     * Target for segmentation: Voice user.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_SEGMENTATION_VOICE = 6;</code>
     */
    public static final int OPTIMIZATION_TARGET_SEGMENTATION_VOICE_VALUE = 6;
    /**
     * <pre>
     * Target for model validation.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_MODEL_VALIDATION = 7;</code>
     */
    public static final int OPTIMIZATION_TARGET_MODEL_VALIDATION_VALUE = 7;
    /**
     * <pre>
     * Target for determining entities present on a page.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_PAGE_ENTITIES = 8;</code>
     */
    public static final int OPTIMIZATION_TARGET_PAGE_ENTITIES_VALUE = 8;
    /**
     * <pre>
     * Target for Chrome Permissions Suggestions Service: Notification permission.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_NOTIFICATION_PERMISSION_PREDICTIONS = 9;</code>
     */
    public static final int OPTIMIZATION_TARGET_NOTIFICATION_PERMISSION_PREDICTIONS_VALUE = 9;
    /**
     * <pre>
     * Target that enables data collection on client side for various experiments.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_SEGMENTATION_DUMMY = 10;</code>
     */
    public static final int OPTIMIZATION_TARGET_SEGMENTATION_DUMMY_VALUE = 10;
    /**
     * <pre>
     * Target for segmentation: Chrome Android Start user.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_SEGMENTATION_CHROME_START_ANDROID = 11;</code>
     */
    public static final int OPTIMIZATION_TARGET_SEGMENTATION_CHROME_START_ANDROID_VALUE = 11;
    /**
     * <pre>
     * Target for segmentation: Query Tiles user.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_SEGMENTATION_QUERY_TILES = 12;</code>
     */
    public static final int OPTIMIZATION_TARGET_SEGMENTATION_QUERY_TILES_VALUE = 12;
    /**
     * <pre>
     * Target for determining the UI visibility of a page.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_PAGE_VISIBILITY = 13;</code>
     */
    public static final int OPTIMIZATION_TARGET_PAGE_VISIBILITY_VALUE = 13;
    /**
     * <pre>
     * Target for supplying the Autofill Assistant annotate DOM model via the
     * model downloader.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_AUTOFILL_ASSISTANT = 14;</code>
     */
    public static final int OPTIMIZATION_TARGET_AUTOFILL_ASSISTANT_VALUE = 14;
    /**
     * <pre>
     * Target for determining topics present on a page.
     * TODO(crbug/1266504): Remove PAGE_TOPICS in favor of this target.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_PAGE_TOPICS_V2 = 15;</code>
     */
    public static final int OPTIMIZATION_TARGET_PAGE_TOPICS_V2_VALUE = 15;
    /**
     * <pre>
     * Target for segmentation: Determine users with low engagement with chrome.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_SEGMENTATION_CHROME_LOW_USER_ENGAGEMENT = 16;</code>
     */
    public static final int OPTIMIZATION_TARGET_SEGMENTATION_CHROME_LOW_USER_ENGAGEMENT_VALUE = 16;
    /**
     * <pre>
     * Target for segmentation: Determine users who prefer to use Feed.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_SEGMENTATION_FEED_USER = 17;</code>
     */
    public static final int OPTIMIZATION_TARGET_SEGMENTATION_FEED_USER_VALUE = 17;
    /**
     * <pre>
     * Target for price tracking action when shown as a contextual page action.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_CONTEXTUAL_PAGE_ACTION_PRICE_TRACKING = 18;</code>
     */
    public static final int OPTIMIZATION_TARGET_CONTEXTUAL_PAGE_ACTION_PRICE_TRACKING_VALUE = 18;
    /**
     * <pre>
     * Target for segmentation: Determine users who are interested in shopping.
     * </pre>
     *
     * <code>OPTIMIZATION_TARGET_SEGMENTATION_SHOPPING_USER = 19;</code>
     */
    public static final int OPTIMIZATION_TARGET_SEGMENTATION_SHOPPING_USER_VALUE = 19;
    /**
     * <pre>
     * New entries should start from a 1000 if OptimizationTarget does not
     * have a corresponding type.
     * </pre>
     *
     * <code>MAX_OPTIMIZATION_TARGET = 999;</code>
     */
    public static final int MAX_OPTIMIZATION_TARGET_VALUE = 999;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SegmentId valueOf(int value) {
      return forNumber(value);
    }

    public static SegmentId forNumber(int value) {
      switch (value) {
        case 0: return OPTIMIZATION_TARGET_UNKNOWN;
        case 1: return OPTIMIZATION_TARGET_PAINFUL_PAGE_LOAD;
        case 2: return OPTIMIZATION_TARGET_LANGUAGE_DETECTION;
        case 3: return OPTIMIZATION_TARGET_PAGE_TOPICS;
        case 4: return OPTIMIZATION_TARGET_SEGMENTATION_NEW_TAB;
        case 5: return OPTIMIZATION_TARGET_SEGMENTATION_SHARE;
        case 6: return OPTIMIZATION_TARGET_SEGMENTATION_VOICE;
        case 7: return OPTIMIZATION_TARGET_MODEL_VALIDATION;
        case 8: return OPTIMIZATION_TARGET_PAGE_ENTITIES;
        case 9: return OPTIMIZATION_TARGET_NOTIFICATION_PERMISSION_PREDICTIONS;
        case 10: return OPTIMIZATION_TARGET_SEGMENTATION_DUMMY;
        case 11: return OPTIMIZATION_TARGET_SEGMENTATION_CHROME_START_ANDROID;
        case 12: return OPTIMIZATION_TARGET_SEGMENTATION_QUERY_TILES;
        case 13: return OPTIMIZATION_TARGET_PAGE_VISIBILITY;
        case 14: return OPTIMIZATION_TARGET_AUTOFILL_ASSISTANT;
        case 15: return OPTIMIZATION_TARGET_PAGE_TOPICS_V2;
        case 16: return OPTIMIZATION_TARGET_SEGMENTATION_CHROME_LOW_USER_ENGAGEMENT;
        case 17: return OPTIMIZATION_TARGET_SEGMENTATION_FEED_USER;
        case 18: return OPTIMIZATION_TARGET_CONTEXTUAL_PAGE_ACTION_PRICE_TRACKING;
        case 19: return OPTIMIZATION_TARGET_SEGMENTATION_SHOPPING_USER;
        case 999: return MAX_OPTIMIZATION_TARGET;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SegmentId>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SegmentId> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SegmentId>() {
            @java.lang.Override
            public SegmentId findValueByNumber(int number) {
              return SegmentId.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return SegmentIdVerifier.INSTANCE;
    }

    private static final class SegmentIdVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new SegmentIdVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return SegmentId.forNumber(number) != null;
            }
          };

    private final int value;

    private SegmentId(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:segmentation_platform.proto.SegmentId)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
