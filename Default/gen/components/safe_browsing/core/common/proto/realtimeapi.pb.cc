// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/safe_browsing/core/common/proto/realtimeapi.proto

#include "components/safe_browsing/core/common/proto/realtimeapi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace safe_browsing {
PROTOBUF_CONSTEXPR RTLookupRequest::RTLookupRequest(
    ::_pbi::ConstantInitialized)
  : referrer_chain_()
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , deprecated_scoped_oauth_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , dm_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , population_(nullptr)
  , lookup_type_(0)

  , version_(0)
  , os_type_(0)

  , report_type_(0)

  , frame_type_(0)
{}
struct RTLookupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTLookupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTLookupRequestDefaultTypeInternal() {}
  union {
    RTLookupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTLookupRequestDefaultTypeInternal _RTLookupRequest_default_instance_;
PROTOBUF_CONSTEXPR RTLookupResponse_ThreatInfo::RTLookupResponse_ThreatInfo(
    ::_pbi::ConstantInitialized)
  : cache_expression_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cache_expression_using_match_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cache_duration_sec_(int64_t{0})
  , threat_type_(0)

  , verdict_type_(0)

  , cache_expression_match_type_(0)
{}
struct RTLookupResponse_ThreatInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTLookupResponse_ThreatInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTLookupResponse_ThreatInfoDefaultTypeInternal() {}
  union {
    RTLookupResponse_ThreatInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTLookupResponse_ThreatInfoDefaultTypeInternal _RTLookupResponse_ThreatInfo_default_instance_;
PROTOBUF_CONSTEXPR RTLookupResponse::RTLookupResponse(
    ::_pbi::ConstantInitialized)
  : threat_info_(){}
struct RTLookupResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTLookupResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTLookupResponseDefaultTypeInternal() {}
  union {
    RTLookupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTLookupResponseDefaultTypeInternal _RTLookupResponse_default_instance_;
}  // namespace safe_browsing
namespace safe_browsing {
bool RTLookupRequest_LookupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RTLookupRequest_LookupType_strings[3] = {};

static const char RTLookupRequest_LookupType_names[] =
  "DOWNLOAD"
  "LOOKUP_TYPE_UNSPECIFIED"
  "NAVIGATION";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RTLookupRequest_LookupType_entries[] = {
  { {RTLookupRequest_LookupType_names + 0, 8}, 2 },
  { {RTLookupRequest_LookupType_names + 8, 23}, 0 },
  { {RTLookupRequest_LookupType_names + 31, 10}, 1 },
};

static const int RTLookupRequest_LookupType_entries_by_number[] = {
  1, // 0 -> LOOKUP_TYPE_UNSPECIFIED
  2, // 1 -> NAVIGATION
  0, // 2 -> DOWNLOAD
};

const std::string& RTLookupRequest_LookupType_Name(
    RTLookupRequest_LookupType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RTLookupRequest_LookupType_entries,
          RTLookupRequest_LookupType_entries_by_number,
          3, RTLookupRequest_LookupType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RTLookupRequest_LookupType_entries,
      RTLookupRequest_LookupType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RTLookupRequest_LookupType_strings[idx].get();
}
bool RTLookupRequest_LookupType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RTLookupRequest_LookupType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RTLookupRequest_LookupType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<RTLookupRequest_LookupType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RTLookupRequest_LookupType RTLookupRequest::LOOKUP_TYPE_UNSPECIFIED;
constexpr RTLookupRequest_LookupType RTLookupRequest::NAVIGATION;
constexpr RTLookupRequest_LookupType RTLookupRequest::DOWNLOAD;
constexpr RTLookupRequest_LookupType RTLookupRequest::LookupType_MIN;
constexpr RTLookupRequest_LookupType RTLookupRequest::LookupType_MAX;
constexpr int RTLookupRequest::LookupType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool RTLookupRequest_OSType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RTLookupRequest_OSType_strings[8] = {};

static const char RTLookupRequest_OSType_names[] =
  "OS_TYPE_ANDROID"
  "OS_TYPE_CHROME_OS"
  "OS_TYPE_FUCHSIA"
  "OS_TYPE_IOS"
  "OS_TYPE_LINUX"
  "OS_TYPE_MAC"
  "OS_TYPE_UNSPECIFIED"
  "OS_TYPE_WINDOWS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RTLookupRequest_OSType_entries[] = {
  { {RTLookupRequest_OSType_names + 0, 15}, 1 },
  { {RTLookupRequest_OSType_names + 15, 17}, 2 },
  { {RTLookupRequest_OSType_names + 32, 15}, 3 },
  { {RTLookupRequest_OSType_names + 47, 11}, 4 },
  { {RTLookupRequest_OSType_names + 58, 13}, 5 },
  { {RTLookupRequest_OSType_names + 71, 11}, 6 },
  { {RTLookupRequest_OSType_names + 82, 19}, 0 },
  { {RTLookupRequest_OSType_names + 101, 15}, 7 },
};

static const int RTLookupRequest_OSType_entries_by_number[] = {
  6, // 0 -> OS_TYPE_UNSPECIFIED
  0, // 1 -> OS_TYPE_ANDROID
  1, // 2 -> OS_TYPE_CHROME_OS
  2, // 3 -> OS_TYPE_FUCHSIA
  3, // 4 -> OS_TYPE_IOS
  4, // 5 -> OS_TYPE_LINUX
  5, // 6 -> OS_TYPE_MAC
  7, // 7 -> OS_TYPE_WINDOWS
};

const std::string& RTLookupRequest_OSType_Name(
    RTLookupRequest_OSType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RTLookupRequest_OSType_entries,
          RTLookupRequest_OSType_entries_by_number,
          8, RTLookupRequest_OSType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RTLookupRequest_OSType_entries,
      RTLookupRequest_OSType_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RTLookupRequest_OSType_strings[idx].get();
}
bool RTLookupRequest_OSType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RTLookupRequest_OSType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RTLookupRequest_OSType_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<RTLookupRequest_OSType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RTLookupRequest_OSType RTLookupRequest::OS_TYPE_UNSPECIFIED;
constexpr RTLookupRequest_OSType RTLookupRequest::OS_TYPE_ANDROID;
constexpr RTLookupRequest_OSType RTLookupRequest::OS_TYPE_CHROME_OS;
constexpr RTLookupRequest_OSType RTLookupRequest::OS_TYPE_FUCHSIA;
constexpr RTLookupRequest_OSType RTLookupRequest::OS_TYPE_IOS;
constexpr RTLookupRequest_OSType RTLookupRequest::OS_TYPE_LINUX;
constexpr RTLookupRequest_OSType RTLookupRequest::OS_TYPE_MAC;
constexpr RTLookupRequest_OSType RTLookupRequest::OS_TYPE_WINDOWS;
constexpr RTLookupRequest_OSType RTLookupRequest::OSType_MIN;
constexpr RTLookupRequest_OSType RTLookupRequest::OSType_MAX;
constexpr int RTLookupRequest::OSType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool RTLookupRequest_ReportType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RTLookupRequest_ReportType_strings[3] = {};

static const char RTLookupRequest_ReportType_names[] =
  "FULL_REPORT"
  "REPORT_TYPE_UNSPECIFIED"
  "SAMPLED_REPORT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RTLookupRequest_ReportType_entries[] = {
  { {RTLookupRequest_ReportType_names + 0, 11}, 1 },
  { {RTLookupRequest_ReportType_names + 11, 23}, 0 },
  { {RTLookupRequest_ReportType_names + 34, 14}, 2 },
};

static const int RTLookupRequest_ReportType_entries_by_number[] = {
  1, // 0 -> REPORT_TYPE_UNSPECIFIED
  0, // 1 -> FULL_REPORT
  2, // 2 -> SAMPLED_REPORT
};

const std::string& RTLookupRequest_ReportType_Name(
    RTLookupRequest_ReportType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RTLookupRequest_ReportType_entries,
          RTLookupRequest_ReportType_entries_by_number,
          3, RTLookupRequest_ReportType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RTLookupRequest_ReportType_entries,
      RTLookupRequest_ReportType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RTLookupRequest_ReportType_strings[idx].get();
}
bool RTLookupRequest_ReportType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RTLookupRequest_ReportType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RTLookupRequest_ReportType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<RTLookupRequest_ReportType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RTLookupRequest_ReportType RTLookupRequest::REPORT_TYPE_UNSPECIFIED;
constexpr RTLookupRequest_ReportType RTLookupRequest::FULL_REPORT;
constexpr RTLookupRequest_ReportType RTLookupRequest::SAMPLED_REPORT;
constexpr RTLookupRequest_ReportType RTLookupRequest::ReportType_MIN;
constexpr RTLookupRequest_ReportType RTLookupRequest::ReportType_MAX;
constexpr int RTLookupRequest::ReportType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool RTLookupRequest_FrameType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RTLookupRequest_FrameType_strings[3] = {};

static const char RTLookupRequest_FrameType_names[] =
  "FRAME_TYPE_UNSPECIFIED"
  "MAIN_FRAME"
  "SUB_FRAME";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RTLookupRequest_FrameType_entries[] = {
  { {RTLookupRequest_FrameType_names + 0, 22}, 0 },
  { {RTLookupRequest_FrameType_names + 22, 10}, 1 },
  { {RTLookupRequest_FrameType_names + 32, 9}, 2 },
};

static const int RTLookupRequest_FrameType_entries_by_number[] = {
  0, // 0 -> FRAME_TYPE_UNSPECIFIED
  1, // 1 -> MAIN_FRAME
  2, // 2 -> SUB_FRAME
};

const std::string& RTLookupRequest_FrameType_Name(
    RTLookupRequest_FrameType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RTLookupRequest_FrameType_entries,
          RTLookupRequest_FrameType_entries_by_number,
          3, RTLookupRequest_FrameType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RTLookupRequest_FrameType_entries,
      RTLookupRequest_FrameType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RTLookupRequest_FrameType_strings[idx].get();
}
bool RTLookupRequest_FrameType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RTLookupRequest_FrameType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RTLookupRequest_FrameType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<RTLookupRequest_FrameType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RTLookupRequest_FrameType RTLookupRequest::FRAME_TYPE_UNSPECIFIED;
constexpr RTLookupRequest_FrameType RTLookupRequest::MAIN_FRAME;
constexpr RTLookupRequest_FrameType RTLookupRequest::SUB_FRAME;
constexpr RTLookupRequest_FrameType RTLookupRequest::FrameType_MIN;
constexpr RTLookupRequest_FrameType RTLookupRequest::FrameType_MAX;
constexpr int RTLookupRequest::FrameType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool RTLookupResponse_ThreatInfo_ThreatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RTLookupResponse_ThreatInfo_ThreatType_strings[5] = {};

static const char RTLookupResponse_ThreatInfo_ThreatType_names[] =
  "SOCIAL_ENGINEERING"
  "THREAT_TYPE_UNSPECIFIED"
  "UNCLEAR_BILLING"
  "UNWANTED_SOFTWARE"
  "WEB_MALWARE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RTLookupResponse_ThreatInfo_ThreatType_entries[] = {
  { {RTLookupResponse_ThreatInfo_ThreatType_names + 0, 18}, 3 },
  { {RTLookupResponse_ThreatInfo_ThreatType_names + 18, 23}, 0 },
  { {RTLookupResponse_ThreatInfo_ThreatType_names + 41, 15}, 5 },
  { {RTLookupResponse_ThreatInfo_ThreatType_names + 56, 17}, 4 },
  { {RTLookupResponse_ThreatInfo_ThreatType_names + 73, 11}, 1 },
};

static const int RTLookupResponse_ThreatInfo_ThreatType_entries_by_number[] = {
  1, // 0 -> THREAT_TYPE_UNSPECIFIED
  4, // 1 -> WEB_MALWARE
  0, // 3 -> SOCIAL_ENGINEERING
  3, // 4 -> UNWANTED_SOFTWARE
  2, // 5 -> UNCLEAR_BILLING
};

const std::string& RTLookupResponse_ThreatInfo_ThreatType_Name(
    RTLookupResponse_ThreatInfo_ThreatType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RTLookupResponse_ThreatInfo_ThreatType_entries,
          RTLookupResponse_ThreatInfo_ThreatType_entries_by_number,
          5, RTLookupResponse_ThreatInfo_ThreatType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RTLookupResponse_ThreatInfo_ThreatType_entries,
      RTLookupResponse_ThreatInfo_ThreatType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RTLookupResponse_ThreatInfo_ThreatType_strings[idx].get();
}
bool RTLookupResponse_ThreatInfo_ThreatType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RTLookupResponse_ThreatInfo_ThreatType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RTLookupResponse_ThreatInfo_ThreatType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<RTLookupResponse_ThreatInfo_ThreatType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo::THREAT_TYPE_UNSPECIFIED;
constexpr RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo::WEB_MALWARE;
constexpr RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo::SOCIAL_ENGINEERING;
constexpr RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo::UNWANTED_SOFTWARE;
constexpr RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo::UNCLEAR_BILLING;
constexpr RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo::ThreatType_MIN;
constexpr RTLookupResponse_ThreatInfo_ThreatType RTLookupResponse_ThreatInfo::ThreatType_MAX;
constexpr int RTLookupResponse_ThreatInfo::ThreatType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool RTLookupResponse_ThreatInfo_VerdictType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 100:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RTLookupResponse_ThreatInfo_VerdictType_strings[3] = {};

static const char RTLookupResponse_ThreatInfo_VerdictType_names[] =
  "DANGEROUS"
  "SAFE"
  "VERDICT_TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RTLookupResponse_ThreatInfo_VerdictType_entries[] = {
  { {RTLookupResponse_ThreatInfo_VerdictType_names + 0, 9}, 100 },
  { {RTLookupResponse_ThreatInfo_VerdictType_names + 9, 4}, 1 },
  { {RTLookupResponse_ThreatInfo_VerdictType_names + 13, 24}, 0 },
};

static const int RTLookupResponse_ThreatInfo_VerdictType_entries_by_number[] = {
  2, // 0 -> VERDICT_TYPE_UNSPECIFIED
  1, // 1 -> SAFE
  0, // 100 -> DANGEROUS
};

const std::string& RTLookupResponse_ThreatInfo_VerdictType_Name(
    RTLookupResponse_ThreatInfo_VerdictType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RTLookupResponse_ThreatInfo_VerdictType_entries,
          RTLookupResponse_ThreatInfo_VerdictType_entries_by_number,
          3, RTLookupResponse_ThreatInfo_VerdictType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RTLookupResponse_ThreatInfo_VerdictType_entries,
      RTLookupResponse_ThreatInfo_VerdictType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RTLookupResponse_ThreatInfo_VerdictType_strings[idx].get();
}
bool RTLookupResponse_ThreatInfo_VerdictType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RTLookupResponse_ThreatInfo_VerdictType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RTLookupResponse_ThreatInfo_VerdictType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<RTLookupResponse_ThreatInfo_VerdictType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RTLookupResponse_ThreatInfo_VerdictType RTLookupResponse_ThreatInfo::VERDICT_TYPE_UNSPECIFIED;
constexpr RTLookupResponse_ThreatInfo_VerdictType RTLookupResponse_ThreatInfo::SAFE;
constexpr RTLookupResponse_ThreatInfo_VerdictType RTLookupResponse_ThreatInfo::DANGEROUS;
constexpr RTLookupResponse_ThreatInfo_VerdictType RTLookupResponse_ThreatInfo::VerdictType_MIN;
constexpr RTLookupResponse_ThreatInfo_VerdictType RTLookupResponse_ThreatInfo::VerdictType_MAX;
constexpr int RTLookupResponse_ThreatInfo::VerdictType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool RTLookupResponse_ThreatInfo_CacheExpressionMatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RTLookupResponse_ThreatInfo_CacheExpressionMatchType_strings[3] = {};

static const char RTLookupResponse_ThreatInfo_CacheExpressionMatchType_names[] =
  "COVERING_MATCH"
  "EXACT_MATCH"
  "MATCH_TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RTLookupResponse_ThreatInfo_CacheExpressionMatchType_entries[] = {
  { {RTLookupResponse_ThreatInfo_CacheExpressionMatchType_names + 0, 14}, 1 },
  { {RTLookupResponse_ThreatInfo_CacheExpressionMatchType_names + 14, 11}, 2 },
  { {RTLookupResponse_ThreatInfo_CacheExpressionMatchType_names + 25, 22}, 0 },
};

static const int RTLookupResponse_ThreatInfo_CacheExpressionMatchType_entries_by_number[] = {
  2, // 0 -> MATCH_TYPE_UNSPECIFIED
  0, // 1 -> COVERING_MATCH
  1, // 2 -> EXACT_MATCH
};

const std::string& RTLookupResponse_ThreatInfo_CacheExpressionMatchType_Name(
    RTLookupResponse_ThreatInfo_CacheExpressionMatchType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RTLookupResponse_ThreatInfo_CacheExpressionMatchType_entries,
          RTLookupResponse_ThreatInfo_CacheExpressionMatchType_entries_by_number,
          3, RTLookupResponse_ThreatInfo_CacheExpressionMatchType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RTLookupResponse_ThreatInfo_CacheExpressionMatchType_entries,
      RTLookupResponse_ThreatInfo_CacheExpressionMatchType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RTLookupResponse_ThreatInfo_CacheExpressionMatchType_strings[idx].get();
}
bool RTLookupResponse_ThreatInfo_CacheExpressionMatchType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RTLookupResponse_ThreatInfo_CacheExpressionMatchType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RTLookupResponse_ThreatInfo_CacheExpressionMatchType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<RTLookupResponse_ThreatInfo_CacheExpressionMatchType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RTLookupResponse_ThreatInfo_CacheExpressionMatchType RTLookupResponse_ThreatInfo::MATCH_TYPE_UNSPECIFIED;
constexpr RTLookupResponse_ThreatInfo_CacheExpressionMatchType RTLookupResponse_ThreatInfo::COVERING_MATCH;
constexpr RTLookupResponse_ThreatInfo_CacheExpressionMatchType RTLookupResponse_ThreatInfo::EXACT_MATCH;
constexpr RTLookupResponse_ThreatInfo_CacheExpressionMatchType RTLookupResponse_ThreatInfo::CacheExpressionMatchType_MIN;
constexpr RTLookupResponse_ThreatInfo_CacheExpressionMatchType RTLookupResponse_ThreatInfo::CacheExpressionMatchType_MAX;
constexpr int RTLookupResponse_ThreatInfo::CacheExpressionMatchType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class RTLookupRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RTLookupRequest>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lookup_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::safe_browsing::ChromeUserPopulation& population(const RTLookupRequest* msg);
  static void set_has_population(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_deprecated_scoped_oauth_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dm_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_os_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_report_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_frame_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::safe_browsing::ChromeUserPopulation&
RTLookupRequest::_Internal::population(const RTLookupRequest* msg) {
  return *msg->population_;
}
void RTLookupRequest::clear_population() {
  if (population_ != nullptr) population_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void RTLookupRequest::clear_referrer_chain() {
  referrer_chain_.Clear();
}
RTLookupRequest::RTLookupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  referrer_chain_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.RTLookupRequest)
}
RTLookupRequest::RTLookupRequest(const RTLookupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      referrer_chain_(from.referrer_chain_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  deprecated_scoped_oauth_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    deprecated_scoped_oauth_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deprecated_scoped_oauth_token()) {
    deprecated_scoped_oauth_token_.Set(from._internal_deprecated_scoped_oauth_token(), 
      GetArenaForAllocation());
  }
  dm_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dm_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dm_token()) {
    dm_token_.Set(from._internal_dm_token(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_population()) {
    population_ = new ::safe_browsing::ChromeUserPopulation(*from.population_);
  } else {
    population_ = nullptr;
  }
  ::memcpy(&lookup_type_, &from.lookup_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_type_) -
    reinterpret_cast<char*>(&lookup_type_)) + sizeof(frame_type_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.RTLookupRequest)
}

inline void RTLookupRequest::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
deprecated_scoped_oauth_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  deprecated_scoped_oauth_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dm_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dm_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&population_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frame_type_) -
    reinterpret_cast<char*>(&population_)) + sizeof(frame_type_));
}

RTLookupRequest::~RTLookupRequest() {
  // @@protoc_insertion_point(destructor:safe_browsing.RTLookupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RTLookupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  deprecated_scoped_oauth_token_.Destroy();
  dm_token_.Destroy();
  if (this != internal_default_instance()) delete population_;
}

void RTLookupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RTLookupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.RTLookupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  referrer_chain_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      deprecated_scoped_oauth_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      dm_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(population_ != nullptr);
      population_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&lookup_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&report_type_) -
        reinterpret_cast<char*>(&lookup_type_)) + sizeof(report_type_));
  }
  frame_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RTLookupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.RTLookupRequest.LookupType lookup_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::RTLookupRequest_LookupType_IsValid(val))) {
            _internal_set_lookup_type(static_cast<::safe_browsing::RTLookupRequest_LookupType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.ChromeUserPopulation population = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_population(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string DEPRECATED_scoped_oauth_token = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_deprecated_scoped_oauth_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string dm_token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_dm_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 version = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.RTLookupRequest.OSType os_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::RTLookupRequest_OSType_IsValid(val))) {
            _internal_set_os_type(static_cast<::safe_browsing::RTLookupRequest_OSType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_referrer_chain(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.RTLookupRequest.ReportType report_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::RTLookupRequest_ReportType_IsValid(val))) {
            _internal_set_report_type(static_cast<::safe_browsing::RTLookupRequest_ReportType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.RTLookupRequest.FrameType frame_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::RTLookupRequest_FrameType_IsValid(val))) {
            _internal_set_frame_type(static_cast<::safe_browsing::RTLookupRequest_FrameType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RTLookupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.RTLookupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional .safe_browsing.RTLookupRequest.LookupType lookup_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_lookup_type(), target);
  }

  // optional .safe_browsing.ChromeUserPopulation population = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::population(this),
        _Internal::population(this).GetCachedSize(), target, stream);
  }

  // optional string DEPRECATED_scoped_oauth_token = 4 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_deprecated_scoped_oauth_token(), target);
  }

  // optional string dm_token = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_dm_token(), target);
  }

  // optional int32 version = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_version(), target);
  }

  // optional .safe_browsing.RTLookupRequest.OSType os_type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_os_type(), target);
  }

  // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_referrer_chain_size()); i < n; i++) {
    const auto& repfield = this->_internal_referrer_chain(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .safe_browsing.RTLookupRequest.ReportType report_type = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_report_type(), target);
  }

  // optional .safe_browsing.RTLookupRequest.FrameType frame_type = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_frame_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.RTLookupRequest)
  return target;
}

size_t RTLookupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.RTLookupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.ReferrerChainEntry referrer_chain = 8;
  total_size += 1UL * this->_internal_referrer_chain_size();
  for (const auto& msg : this->referrer_chain_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string DEPRECATED_scoped_oauth_token = 4 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deprecated_scoped_oauth_token());
    }

    // optional string dm_token = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dm_token());
    }

    // optional .safe_browsing.ChromeUserPopulation population = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *population_);
    }

    // optional .safe_browsing.RTLookupRequest.LookupType lookup_type = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_lookup_type());
    }

    // optional int32 version = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
    }

    // optional .safe_browsing.RTLookupRequest.OSType os_type = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_os_type());
    }

    // optional .safe_browsing.RTLookupRequest.ReportType report_type = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_report_type());
    }

  }
  // optional .safe_browsing.RTLookupRequest.FrameType frame_type = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_frame_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTLookupRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RTLookupRequest*>(
      &from));
}

void RTLookupRequest::MergeFrom(const RTLookupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.RTLookupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  referrer_chain_.MergeFrom(from.referrer_chain_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_deprecated_scoped_oauth_token(from._internal_deprecated_scoped_oauth_token());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_dm_token(from._internal_dm_token());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_population()->::safe_browsing::ChromeUserPopulation::MergeFrom(from._internal_population());
    }
    if (cached_has_bits & 0x00000010u) {
      lookup_type_ = from.lookup_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000040u) {
      os_type_ = from.os_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      report_type_ = from.report_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_frame_type(from._internal_frame_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RTLookupRequest::CopyFrom(const RTLookupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.RTLookupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTLookupRequest::IsInitialized() const {
  return true;
}

void RTLookupRequest::InternalSwap(RTLookupRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  referrer_chain_.InternalSwap(&other->referrer_chain_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &deprecated_scoped_oauth_token_, lhs_arena,
      &other->deprecated_scoped_oauth_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &dm_token_, lhs_arena,
      &other->dm_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RTLookupRequest, frame_type_)
      + sizeof(RTLookupRequest::frame_type_)
      - PROTOBUF_FIELD_OFFSET(RTLookupRequest, population_)>(
          reinterpret_cast<char*>(&population_),
          reinterpret_cast<char*>(&other->population_));
}

std::string RTLookupRequest::GetTypeName() const {
  return "safe_browsing.RTLookupRequest";
}


// ===================================================================

class RTLookupResponse_ThreatInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RTLookupResponse_ThreatInfo>()._has_bits_);
  static void set_has_threat_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cache_duration_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cache_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_verdict_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cache_expression_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cache_expression_using_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RTLookupResponse_ThreatInfo::RTLookupResponse_ThreatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.RTLookupResponse.ThreatInfo)
}
RTLookupResponse_ThreatInfo::RTLookupResponse_ThreatInfo(const RTLookupResponse_ThreatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  cache_expression_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cache_expression_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cache_expression()) {
    cache_expression_.Set(from._internal_cache_expression(), 
      GetArenaForAllocation());
  }
  cache_expression_using_match_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cache_expression_using_match_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cache_expression_using_match_type()) {
    cache_expression_using_match_type_.Set(from._internal_cache_expression_using_match_type(), 
      GetArenaForAllocation());
  }
  ::memcpy(&cache_duration_sec_, &from.cache_duration_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&cache_expression_match_type_) -
    reinterpret_cast<char*>(&cache_duration_sec_)) + sizeof(cache_expression_match_type_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.RTLookupResponse.ThreatInfo)
}

inline void RTLookupResponse_ThreatInfo::SharedCtor() {
cache_expression_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cache_expression_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cache_expression_using_match_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cache_expression_using_match_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cache_duration_sec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cache_expression_match_type_) -
    reinterpret_cast<char*>(&cache_duration_sec_)) + sizeof(cache_expression_match_type_));
}

RTLookupResponse_ThreatInfo::~RTLookupResponse_ThreatInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.RTLookupResponse.ThreatInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RTLookupResponse_ThreatInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cache_expression_.Destroy();
  cache_expression_using_match_type_.Destroy();
}

void RTLookupResponse_ThreatInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RTLookupResponse_ThreatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.RTLookupResponse.ThreatInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cache_expression_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      cache_expression_using_match_type_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&cache_duration_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cache_expression_match_type_) -
        reinterpret_cast<char*>(&cache_duration_sec_)) + sizeof(cache_expression_match_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RTLookupResponse_ThreatInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .safe_browsing.RTLookupResponse.ThreatInfo.ThreatType threat_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType_IsValid(val))) {
            _internal_set_threat_type(static_cast<::safe_browsing::RTLookupResponse_ThreatInfo_ThreatType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 cache_duration_sec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cache_duration_sec(&has_bits);
          cache_duration_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cache_expression = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cache_expression();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.RTLookupResponse.ThreatInfo.VerdictType verdict_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType_IsValid(val))) {
            _internal_set_verdict_type(static_cast<::safe_browsing::RTLookupResponse_ThreatInfo_VerdictType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .safe_browsing.RTLookupResponse.ThreatInfo.CacheExpressionMatchType cache_expression_match_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType_IsValid(val))) {
            _internal_set_cache_expression_match_type(static_cast<::safe_browsing::RTLookupResponse_ThreatInfo_CacheExpressionMatchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string cache_expression_using_match_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_cache_expression_using_match_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RTLookupResponse_ThreatInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.RTLookupResponse.ThreatInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.RTLookupResponse.ThreatInfo.ThreatType threat_type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_threat_type(), target);
  }

  // optional int64 cache_duration_sec = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_cache_duration_sec(), target);
  }

  // optional string cache_expression = 3 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cache_expression(), target);
  }

  // optional .safe_browsing.RTLookupResponse.ThreatInfo.VerdictType verdict_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_verdict_type(), target);
  }

  // optional .safe_browsing.RTLookupResponse.ThreatInfo.CacheExpressionMatchType cache_expression_match_type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_cache_expression_match_type(), target);
  }

  // optional string cache_expression_using_match_type = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cache_expression_using_match_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.RTLookupResponse.ThreatInfo)
  return target;
}

size_t RTLookupResponse_ThreatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.RTLookupResponse.ThreatInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string cache_expression = 3 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cache_expression());
    }

    // optional string cache_expression_using_match_type = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cache_expression_using_match_type());
    }

    // optional int64 cache_duration_sec = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cache_duration_sec());
    }

    // optional .safe_browsing.RTLookupResponse.ThreatInfo.ThreatType threat_type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_threat_type());
    }

    // optional .safe_browsing.RTLookupResponse.ThreatInfo.VerdictType verdict_type = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_verdict_type());
    }

    // optional .safe_browsing.RTLookupResponse.ThreatInfo.CacheExpressionMatchType cache_expression_match_type = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_cache_expression_match_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTLookupResponse_ThreatInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RTLookupResponse_ThreatInfo*>(
      &from));
}

void RTLookupResponse_ThreatInfo::MergeFrom(const RTLookupResponse_ThreatInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.RTLookupResponse.ThreatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cache_expression(from._internal_cache_expression());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_cache_expression_using_match_type(from._internal_cache_expression_using_match_type());
    }
    if (cached_has_bits & 0x00000004u) {
      cache_duration_sec_ = from.cache_duration_sec_;
    }
    if (cached_has_bits & 0x00000008u) {
      threat_type_ = from.threat_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      verdict_type_ = from.verdict_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      cache_expression_match_type_ = from.cache_expression_match_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RTLookupResponse_ThreatInfo::CopyFrom(const RTLookupResponse_ThreatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.RTLookupResponse.ThreatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTLookupResponse_ThreatInfo::IsInitialized() const {
  return true;
}

void RTLookupResponse_ThreatInfo::InternalSwap(RTLookupResponse_ThreatInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cache_expression_, lhs_arena,
      &other->cache_expression_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cache_expression_using_match_type_, lhs_arena,
      &other->cache_expression_using_match_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RTLookupResponse_ThreatInfo, cache_expression_match_type_)
      + sizeof(RTLookupResponse_ThreatInfo::cache_expression_match_type_)
      - PROTOBUF_FIELD_OFFSET(RTLookupResponse_ThreatInfo, cache_duration_sec_)>(
          reinterpret_cast<char*>(&cache_duration_sec_),
          reinterpret_cast<char*>(&other->cache_duration_sec_));
}

std::string RTLookupResponse_ThreatInfo::GetTypeName() const {
  return "safe_browsing.RTLookupResponse.ThreatInfo";
}


// ===================================================================

class RTLookupResponse::_Internal {
 public:
};

RTLookupResponse::RTLookupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  threat_info_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.RTLookupResponse)
}
RTLookupResponse::RTLookupResponse(const RTLookupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      threat_info_(from.threat_info_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:safe_browsing.RTLookupResponse)
}

inline void RTLookupResponse::SharedCtor() {
}

RTLookupResponse::~RTLookupResponse() {
  // @@protoc_insertion_point(destructor:safe_browsing.RTLookupResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RTLookupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RTLookupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RTLookupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.RTLookupResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  threat_info_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RTLookupResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .safe_browsing.RTLookupResponse.ThreatInfo threat_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_threat_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RTLookupResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.RTLookupResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .safe_browsing.RTLookupResponse.ThreatInfo threat_info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_threat_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_threat_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.RTLookupResponse)
  return target;
}

size_t RTLookupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.RTLookupResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.RTLookupResponse.ThreatInfo threat_info = 1;
  total_size += 1UL * this->_internal_threat_info_size();
  for (const auto& msg : this->threat_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTLookupResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RTLookupResponse*>(
      &from));
}

void RTLookupResponse::MergeFrom(const RTLookupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.RTLookupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  threat_info_.MergeFrom(from.threat_info_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RTLookupResponse::CopyFrom(const RTLookupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.RTLookupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTLookupResponse::IsInitialized() const {
  return true;
}

void RTLookupResponse::InternalSwap(RTLookupResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  threat_info_.InternalSwap(&other->threat_info_);
}

std::string RTLookupResponse::GetTypeName() const {
  return "safe_browsing.RTLookupResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace safe_browsing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safe_browsing::RTLookupRequest*
Arena::CreateMaybeMessage< ::safe_browsing::RTLookupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::RTLookupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::RTLookupResponse_ThreatInfo*
Arena::CreateMaybeMessage< ::safe_browsing::RTLookupResponse_ThreatInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::RTLookupResponse_ThreatInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::RTLookupResponse*
Arena::CreateMaybeMessage< ::safe_browsing::RTLookupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::RTLookupResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
