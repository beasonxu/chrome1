// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata.proto

#include "metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace safe_browsing {
PROTOBUF_CONSTEXPR MalwarePatternType::MalwarePatternType(
    ::_pbi::ConstantInitialized)
  : pattern_type_(0)
{}
struct MalwarePatternTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MalwarePatternTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MalwarePatternTypeDefaultTypeInternal() {}
  union {
    MalwarePatternType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MalwarePatternTypeDefaultTypeInternal _MalwarePatternType_default_instance_;
PROTOBUF_CONSTEXPR SocialEngineeringPatternType::SocialEngineeringPatternType(
    ::_pbi::ConstantInitialized)
  : pattern_type_(0)
{}
struct SocialEngineeringPatternTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SocialEngineeringPatternTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SocialEngineeringPatternTypeDefaultTypeInternal() {}
  union {
    SocialEngineeringPatternType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SocialEngineeringPatternTypeDefaultTypeInternal _SocialEngineeringPatternType_default_instance_;
}  // namespace safe_browsing
namespace safe_browsing {
bool MalwarePatternType_PATTERN_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MalwarePatternType_PATTERN_TYPE_strings[3] = {};

static const char MalwarePatternType_PATTERN_TYPE_names[] =
  "DISTRIBUTION"
  "LANDING"
  "TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MalwarePatternType_PATTERN_TYPE_entries[] = {
  { {MalwarePatternType_PATTERN_TYPE_names + 0, 12}, 2 },
  { {MalwarePatternType_PATTERN_TYPE_names + 12, 7}, 1 },
  { {MalwarePatternType_PATTERN_TYPE_names + 19, 16}, 0 },
};

static const int MalwarePatternType_PATTERN_TYPE_entries_by_number[] = {
  2, // 0 -> TYPE_UNSPECIFIED
  1, // 1 -> LANDING
  0, // 2 -> DISTRIBUTION
};

const std::string& MalwarePatternType_PATTERN_TYPE_Name(
    MalwarePatternType_PATTERN_TYPE value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MalwarePatternType_PATTERN_TYPE_entries,
          MalwarePatternType_PATTERN_TYPE_entries_by_number,
          3, MalwarePatternType_PATTERN_TYPE_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MalwarePatternType_PATTERN_TYPE_entries,
      MalwarePatternType_PATTERN_TYPE_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MalwarePatternType_PATTERN_TYPE_strings[idx].get();
}
bool MalwarePatternType_PATTERN_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MalwarePatternType_PATTERN_TYPE* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MalwarePatternType_PATTERN_TYPE_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<MalwarePatternType_PATTERN_TYPE>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MalwarePatternType_PATTERN_TYPE MalwarePatternType::TYPE_UNSPECIFIED;
constexpr MalwarePatternType_PATTERN_TYPE MalwarePatternType::LANDING;
constexpr MalwarePatternType_PATTERN_TYPE MalwarePatternType::DISTRIBUTION;
constexpr MalwarePatternType_PATTERN_TYPE MalwarePatternType::PATTERN_TYPE_MIN;
constexpr MalwarePatternType_PATTERN_TYPE MalwarePatternType::PATTERN_TYPE_MAX;
constexpr int MalwarePatternType::PATTERN_TYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool SocialEngineeringPatternType_PATTERN_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SocialEngineeringPatternType_PATTERN_TYPE_strings[4] = {};

static const char SocialEngineeringPatternType_PATTERN_TYPE_names[] =
  "PHISHING"
  "SOCIAL_ENGINEERING_ADS"
  "SOCIAL_ENGINEERING_LANDING"
  "TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SocialEngineeringPatternType_PATTERN_TYPE_entries[] = {
  { {SocialEngineeringPatternType_PATTERN_TYPE_names + 0, 8}, 3 },
  { {SocialEngineeringPatternType_PATTERN_TYPE_names + 8, 22}, 1 },
  { {SocialEngineeringPatternType_PATTERN_TYPE_names + 30, 26}, 2 },
  { {SocialEngineeringPatternType_PATTERN_TYPE_names + 56, 16}, 0 },
};

static const int SocialEngineeringPatternType_PATTERN_TYPE_entries_by_number[] = {
  3, // 0 -> TYPE_UNSPECIFIED
  1, // 1 -> SOCIAL_ENGINEERING_ADS
  2, // 2 -> SOCIAL_ENGINEERING_LANDING
  0, // 3 -> PHISHING
};

const std::string& SocialEngineeringPatternType_PATTERN_TYPE_Name(
    SocialEngineeringPatternType_PATTERN_TYPE value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SocialEngineeringPatternType_PATTERN_TYPE_entries,
          SocialEngineeringPatternType_PATTERN_TYPE_entries_by_number,
          4, SocialEngineeringPatternType_PATTERN_TYPE_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SocialEngineeringPatternType_PATTERN_TYPE_entries,
      SocialEngineeringPatternType_PATTERN_TYPE_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SocialEngineeringPatternType_PATTERN_TYPE_strings[idx].get();
}
bool SocialEngineeringPatternType_PATTERN_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SocialEngineeringPatternType_PATTERN_TYPE* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SocialEngineeringPatternType_PATTERN_TYPE_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<SocialEngineeringPatternType_PATTERN_TYPE>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SocialEngineeringPatternType_PATTERN_TYPE SocialEngineeringPatternType::TYPE_UNSPECIFIED;
constexpr SocialEngineeringPatternType_PATTERN_TYPE SocialEngineeringPatternType::SOCIAL_ENGINEERING_ADS;
constexpr SocialEngineeringPatternType_PATTERN_TYPE SocialEngineeringPatternType::SOCIAL_ENGINEERING_LANDING;
constexpr SocialEngineeringPatternType_PATTERN_TYPE SocialEngineeringPatternType::PHISHING;
constexpr SocialEngineeringPatternType_PATTERN_TYPE SocialEngineeringPatternType::PATTERN_TYPE_MIN;
constexpr SocialEngineeringPatternType_PATTERN_TYPE SocialEngineeringPatternType::PATTERN_TYPE_MAX;
constexpr int SocialEngineeringPatternType::PATTERN_TYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class MalwarePatternType::_Internal {
 public:
  using HasBits = decltype(std::declval<MalwarePatternType>()._has_bits_);
  static void set_has_pattern_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

MalwarePatternType::MalwarePatternType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.MalwarePatternType)
}
MalwarePatternType::MalwarePatternType(const MalwarePatternType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  pattern_type_ = from.pattern_type_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.MalwarePatternType)
}

inline void MalwarePatternType::SharedCtor() {
pattern_type_ = 0;
}

MalwarePatternType::~MalwarePatternType() {
  // @@protoc_insertion_point(destructor:safe_browsing.MalwarePatternType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MalwarePatternType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MalwarePatternType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MalwarePatternType::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.MalwarePatternType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pattern_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MalwarePatternType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .safe_browsing.MalwarePatternType.PATTERN_TYPE pattern_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::MalwarePatternType_PATTERN_TYPE_IsValid(val))) {
            _internal_set_pattern_type(static_cast<::safe_browsing::MalwarePatternType_PATTERN_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MalwarePatternType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.MalwarePatternType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .safe_browsing.MalwarePatternType.PATTERN_TYPE pattern_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pattern_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.MalwarePatternType)
  return target;
}

size_t MalwarePatternType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.MalwarePatternType)
  size_t total_size = 0;

  // required .safe_browsing.MalwarePatternType.PATTERN_TYPE pattern_type = 1;
  if (_internal_has_pattern_type()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_pattern_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MalwarePatternType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MalwarePatternType*>(
      &from));
}

void MalwarePatternType::MergeFrom(const MalwarePatternType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.MalwarePatternType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pattern_type()) {
    _internal_set_pattern_type(from._internal_pattern_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MalwarePatternType::CopyFrom(const MalwarePatternType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.MalwarePatternType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MalwarePatternType::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MalwarePatternType::InternalSwap(MalwarePatternType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pattern_type_, other->pattern_type_);
}

std::string MalwarePatternType::GetTypeName() const {
  return "safe_browsing.MalwarePatternType";
}


// ===================================================================

class SocialEngineeringPatternType::_Internal {
 public:
  using HasBits = decltype(std::declval<SocialEngineeringPatternType>()._has_bits_);
  static void set_has_pattern_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SocialEngineeringPatternType::SocialEngineeringPatternType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safe_browsing.SocialEngineeringPatternType)
}
SocialEngineeringPatternType::SocialEngineeringPatternType(const SocialEngineeringPatternType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  pattern_type_ = from.pattern_type_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.SocialEngineeringPatternType)
}

inline void SocialEngineeringPatternType::SharedCtor() {
pattern_type_ = 0;
}

SocialEngineeringPatternType::~SocialEngineeringPatternType() {
  // @@protoc_insertion_point(destructor:safe_browsing.SocialEngineeringPatternType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SocialEngineeringPatternType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SocialEngineeringPatternType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SocialEngineeringPatternType::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.SocialEngineeringPatternType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pattern_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SocialEngineeringPatternType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .safe_browsing.SocialEngineeringPatternType.PATTERN_TYPE pattern_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::SocialEngineeringPatternType_PATTERN_TYPE_IsValid(val))) {
            _internal_set_pattern_type(static_cast<::safe_browsing::SocialEngineeringPatternType_PATTERN_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SocialEngineeringPatternType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safe_browsing.SocialEngineeringPatternType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.SocialEngineeringPatternType.PATTERN_TYPE pattern_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pattern_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safe_browsing.SocialEngineeringPatternType)
  return target;
}

size_t SocialEngineeringPatternType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.SocialEngineeringPatternType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .safe_browsing.SocialEngineeringPatternType.PATTERN_TYPE pattern_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_pattern_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocialEngineeringPatternType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SocialEngineeringPatternType*>(
      &from));
}

void SocialEngineeringPatternType::MergeFrom(const SocialEngineeringPatternType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.SocialEngineeringPatternType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pattern_type()) {
    _internal_set_pattern_type(from._internal_pattern_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SocialEngineeringPatternType::CopyFrom(const SocialEngineeringPatternType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.SocialEngineeringPatternType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocialEngineeringPatternType::IsInitialized() const {
  return true;
}

void SocialEngineeringPatternType::InternalSwap(SocialEngineeringPatternType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pattern_type_, other->pattern_type_);
}

std::string SocialEngineeringPatternType::GetTypeName() const {
  return "safe_browsing.SocialEngineeringPatternType";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace safe_browsing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safe_browsing::MalwarePatternType*
Arena::CreateMaybeMessage< ::safe_browsing::MalwarePatternType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::MalwarePatternType >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::SocialEngineeringPatternType*
Arena::CreateMaybeMessage< ::safe_browsing::SocialEngineeringPatternType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safe_browsing::SocialEngineeringPatternType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
