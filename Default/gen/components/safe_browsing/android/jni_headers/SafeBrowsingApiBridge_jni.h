// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/safe_browsing/SafeBrowsingApiBridge

#ifndef org_chromium_components_safe_browsing_SafeBrowsingApiBridge_JNI
#define org_chromium_components_safe_browsing_SafeBrowsingApiBridge_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_safe_1browsing_SafeBrowsingApiBridge[];
const char kClassPath_org_chromium_components_safe_1browsing_SafeBrowsingApiBridge[] =
    "org/chromium/components/safe_browsing/SafeBrowsingApiBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_safe_1browsing_SafeBrowsingApiBridge_clazz(nullptr);
#ifndef org_chromium_components_safe_1browsing_SafeBrowsingApiBridge_clazz_defined
#define org_chromium_components_safe_1browsing_SafeBrowsingApiBridge_clazz_defined
inline jclass org_chromium_components_safe_1browsing_SafeBrowsingApiBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_safe_1browsing_SafeBrowsingApiBridge,
      &g_org_chromium_components_safe_1browsing_SafeBrowsingApiBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace safe_browsing {

static void JNI_SafeBrowsingApiBridge_OnUrlCheckDone(JNIEnv* env, jlong callbackId,
    jint resultStatus,
    const base::android::JavaParamRef<jstring>& metadata,
    jlong checkDelta);

JNI_GENERATOR_EXPORT void Java_J_N_M3tDaVsh(
    JNIEnv* env,
    jclass jcaller,
    jlong callbackId,
    jint resultStatus,
    jstring metadata,
    jlong checkDelta) {
  return JNI_SafeBrowsingApiBridge_OnUrlCheckDone(env, callbackId, resultStatus,
      base::android::JavaParamRef<jstring>(env, metadata), checkDelta);
}


static std::atomic<jmethodID>
    g_org_chromium_components_safe_1browsing_SafeBrowsingApiBridge_ensureInitialized(nullptr);
static jboolean Java_SafeBrowsingApiBridge_ensureInitialized(JNIEnv* env) {
  jclass clazz = org_chromium_components_safe_1browsing_SafeBrowsingApiBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_safe_1browsing_SafeBrowsingApiBridge_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "ensureInitialized",
          "()Z",
          &g_org_chromium_components_safe_1browsing_SafeBrowsingApiBridge_ensureInitialized);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_components_safe_1browsing_SafeBrowsingApiBridge_startUriLookup(nullptr);
static void Java_SafeBrowsingApiBridge_startUriLookup(JNIEnv* env, jlong callbackId,
    const base::android::JavaRef<jstring>& uri,
    const base::android::JavaRef<jintArray>& threatsOfInterest) {
  jclass clazz = org_chromium_components_safe_1browsing_SafeBrowsingApiBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_safe_1browsing_SafeBrowsingApiBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "startUriLookup",
          "(JLjava/lang/String;[I)V",
          &g_org_chromium_components_safe_1browsing_SafeBrowsingApiBridge_startUriLookup);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, callbackId, uri.obj(), threatsOfInterest.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_components_safe_1browsing_SafeBrowsingApiBridge_startAllowlistLookup(nullptr);
static jboolean Java_SafeBrowsingApiBridge_startAllowlistLookup(JNIEnv* env, const
    base::android::JavaRef<jstring>& uri,
    JniIntWrapper threatType) {
  jclass clazz = org_chromium_components_safe_1browsing_SafeBrowsingApiBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_safe_1browsing_SafeBrowsingApiBridge_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "startAllowlistLookup",
          "(Ljava/lang/String;I)Z",
          &g_org_chromium_components_safe_1browsing_SafeBrowsingApiBridge_startAllowlistLookup);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, uri.obj(), as_jint(threatType));
  return ret;
}

}  // namespace safe_browsing

#endif  // org_chromium_components_safe_browsing_SafeBrowsingApiBridge_JNI
