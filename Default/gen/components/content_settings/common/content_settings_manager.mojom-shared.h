// components/content_settings/common/content_settings_manager.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_CONTENT_SETTINGS_COMMON_CONTENT_SETTINGS_MANAGER_MOJOM_SHARED_H_
#define COMPONENTS_CONTENT_SETTINGS_COMMON_CONTENT_SETTINGS_MANAGER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/content_settings/common/content_settings_manager.mojom-shared-internal.h"
#include "components/content_settings/core/common/content_settings.mojom-shared.h"
#include "services/network/public/mojom/site_for_cookies.mojom-shared.h"
#include "url/mojom/origin.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace content_settings {
namespace mojom {


}  // namespace mojom
}  // namespace content_settings

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace content_settings {
namespace mojom {


enum class ContentSettingsManager_StorageType : int32_t {
  
  DATABASE = 0,
  
  LOCAL_STORAGE = 1,
  
  SESSION_STORAGE = 2,
  
  FILE_SYSTEM = 3,
  
  INDEXED_DB = 4,
  
  CACHE = 5,
  
  WEB_LOCKS = 6,
  kMinValue = 0,
  kMaxValue = 6,
};

 std::ostream& operator<<(std::ostream& os, ContentSettingsManager_StorageType value);
inline bool IsKnownEnumValue(ContentSettingsManager_StorageType value) {
  return internal::ContentSettingsManager_StorageType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class ContentSettingsManagerInterfaceBase {};

using ContentSettingsManagerPtrDataView =
    mojo::InterfacePtrDataView<ContentSettingsManagerInterfaceBase>;
using ContentSettingsManagerRequestDataView =
    mojo::InterfaceRequestDataView<ContentSettingsManagerInterfaceBase>;
using ContentSettingsManagerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<ContentSettingsManagerInterfaceBase>;
using ContentSettingsManagerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<ContentSettingsManagerInterfaceBase>;


}  // namespace mojom
}  // namespace content_settings

namespace std {

template <>
struct hash<::content_settings::mojom::ContentSettingsManager_StorageType>
    : public mojo::internal::EnumHashImpl<::content_settings::mojom::ContentSettingsManager_StorageType> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content_settings::mojom::ContentSettingsManager_StorageType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::content_settings::mojom::ContentSettingsManager_StorageType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::content_settings::mojom::ContentSettingsManager_StorageType>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace content_settings {
namespace mojom {


}  // namespace mojom
}  // namespace content_settings

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::content_settings::mojom::ContentSettingsManager_StorageType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::content_settings::mojom::ContentSettingsManager_StorageType value);
};

} // namespace perfetto

#endif  // COMPONENTS_CONTENT_SETTINGS_COMMON_CONTENT_SETTINGS_MANAGER_MOJOM_SHARED_H_