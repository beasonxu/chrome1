// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/content_settings/CookieControlsBridge

#ifndef org_chromium_components_content_settings_CookieControlsBridge_JNI
#define org_chromium_components_content_settings_CookieControlsBridge_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_content_1settings_CookieControlsBridge[];
const char kClassPath_org_chromium_components_content_1settings_CookieControlsBridge[] =
    "org/chromium/components/content_settings/CookieControlsBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_content_1settings_CookieControlsBridge_clazz(nullptr);
#ifndef org_chromium_components_content_1settings_CookieControlsBridge_clazz_defined
#define org_chromium_components_content_1settings_CookieControlsBridge_clazz_defined
inline jclass org_chromium_components_content_1settings_CookieControlsBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_content_1settings_CookieControlsBridge,
      &g_org_chromium_components_content_1settings_CookieControlsBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content_settings {

static jlong JNI_CookieControlsBridge_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller,
    const base::android::JavaParamRef<jobject>& webContents,
    const base::android::JavaParamRef<jobject>& originalContextHandle);

JNI_GENERATOR_EXPORT jlong Java_J_N_Ma648rK8(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobject webContents,
    jobject originalContextHandle) {
  return JNI_CookieControlsBridge_Init(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, webContents),
      base::android::JavaParamRef<jobject>(env, originalContextHandle));
}

JNI_GENERATOR_EXPORT void Java_J_N_MupWWV0Q(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCookieControlsBridge,
    jobject caller) {
  CookieControlsBridge* native =
      reinterpret_cast<CookieControlsBridge*>(nativeCookieControlsBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MTF7msU_1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCookieControlsBridge,
    jboolean blockCookies) {
  CookieControlsBridge* native =
      reinterpret_cast<CookieControlsBridge*>(nativeCookieControlsBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetThirdPartyCookieBlockingEnabledForSite");
  return native->SetThirdPartyCookieBlockingEnabledForSite(env, blockCookies);
}

JNI_GENERATOR_EXPORT void Java_J_N_MGYjAHK4(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCookieControlsBridge) {
  CookieControlsBridge* native =
      reinterpret_cast<CookieControlsBridge*>(nativeCookieControlsBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnUiClosing");
  return native->OnUiClosing(env);
}

static jboolean JNI_CookieControlsBridge_IsCookieControlsEnabled(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& browserContextHandle);

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mvm8S6US(
    JNIEnv* env,
    jclass jcaller,
    jobject browserContextHandle) {
  return JNI_CookieControlsBridge_IsCookieControlsEnabled(env,
      base::android::JavaParamRef<jobject>(env, browserContextHandle));
}


static std::atomic<jmethodID>
    g_org_chromium_components_content_1settings_CookieControlsBridge_onCookieBlockingStatusChanged(nullptr);
static void Java_CookieControlsBridge_onCookieBlockingStatusChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper status,
    JniIntWrapper enforcement) {
  jclass clazz = org_chromium_components_content_1settings_CookieControlsBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_content_1settings_CookieControlsBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onCookieBlockingStatusChanged",
          "(II)V",
&g_org_chromium_components_content_1settings_CookieControlsBridge_onCookieBlockingStatusChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(status), as_jint(enforcement));
}

static std::atomic<jmethodID>
    g_org_chromium_components_content_1settings_CookieControlsBridge_onCookiesCountChanged(nullptr);
static void Java_CookieControlsBridge_onCookiesCountChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper allowedCookies,
    JniIntWrapper blockedCookies) {
  jclass clazz = org_chromium_components_content_1settings_CookieControlsBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_content_1settings_CookieControlsBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onCookiesCountChanged",
          "(II)V",
          &g_org_chromium_components_content_1settings_CookieControlsBridge_onCookiesCountChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(allowedCookies), as_jint(blockedCookies));
}

}  // namespace content_settings

#endif  // org_chromium_components_content_settings_CookieControlsBridge_JNI
