// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction_service_messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_prediction_5fservice_5fmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_prediction_5fservice_5fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_prediction_5fservice_5fmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_prediction_5fservice_5fmessages_2eproto {
  static const uint32_t offsets[];
};
namespace permissions {
class ClientFeatures;
struct ClientFeaturesDefaultTypeInternal;
extern ClientFeaturesDefaultTypeInternal _ClientFeatures_default_instance_;
class GeneratePredictionsRequest;
struct GeneratePredictionsRequestDefaultTypeInternal;
extern GeneratePredictionsRequestDefaultTypeInternal _GeneratePredictionsRequest_default_instance_;
class GeneratePredictionsResponse;
struct GeneratePredictionsResponseDefaultTypeInternal;
extern GeneratePredictionsResponseDefaultTypeInternal _GeneratePredictionsResponse_default_instance_;
class PermissionFeatures;
struct PermissionFeaturesDefaultTypeInternal;
extern PermissionFeaturesDefaultTypeInternal _PermissionFeatures_default_instance_;
class PermissionFeatures_GeolocationPermission;
struct PermissionFeatures_GeolocationPermissionDefaultTypeInternal;
extern PermissionFeatures_GeolocationPermissionDefaultTypeInternal _PermissionFeatures_GeolocationPermission_default_instance_;
class PermissionFeatures_NotificationPermission;
struct PermissionFeatures_NotificationPermissionDefaultTypeInternal;
extern PermissionFeatures_NotificationPermissionDefaultTypeInternal _PermissionFeatures_NotificationPermission_default_instance_;
class PermissionPrediction;
struct PermissionPredictionDefaultTypeInternal;
extern PermissionPredictionDefaultTypeInternal _PermissionPrediction_default_instance_;
class PermissionPrediction_GeolocationPrediction;
struct PermissionPrediction_GeolocationPredictionDefaultTypeInternal;
extern PermissionPrediction_GeolocationPredictionDefaultTypeInternal _PermissionPrediction_GeolocationPrediction_default_instance_;
class PermissionPrediction_Likelihood;
struct PermissionPrediction_LikelihoodDefaultTypeInternal;
extern PermissionPrediction_LikelihoodDefaultTypeInternal _PermissionPrediction_Likelihood_default_instance_;
class PermissionPrediction_NotificationPrediction;
struct PermissionPrediction_NotificationPredictionDefaultTypeInternal;
extern PermissionPrediction_NotificationPredictionDefaultTypeInternal _PermissionPrediction_NotificationPrediction_default_instance_;
class SiteFeatures;
struct SiteFeaturesDefaultTypeInternal;
extern SiteFeaturesDefaultTypeInternal _SiteFeatures_default_instance_;
class StatsFeatures;
struct StatsFeaturesDefaultTypeInternal;
extern StatsFeaturesDefaultTypeInternal _StatsFeatures_default_instance_;
}  // namespace permissions
PROTOBUF_NAMESPACE_OPEN
template<> ::permissions::ClientFeatures* Arena::CreateMaybeMessage<::permissions::ClientFeatures>(Arena*);
template<> ::permissions::GeneratePredictionsRequest* Arena::CreateMaybeMessage<::permissions::GeneratePredictionsRequest>(Arena*);
template<> ::permissions::GeneratePredictionsResponse* Arena::CreateMaybeMessage<::permissions::GeneratePredictionsResponse>(Arena*);
template<> ::permissions::PermissionFeatures* Arena::CreateMaybeMessage<::permissions::PermissionFeatures>(Arena*);
template<> ::permissions::PermissionFeatures_GeolocationPermission* Arena::CreateMaybeMessage<::permissions::PermissionFeatures_GeolocationPermission>(Arena*);
template<> ::permissions::PermissionFeatures_NotificationPermission* Arena::CreateMaybeMessage<::permissions::PermissionFeatures_NotificationPermission>(Arena*);
template<> ::permissions::PermissionPrediction* Arena::CreateMaybeMessage<::permissions::PermissionPrediction>(Arena*);
template<> ::permissions::PermissionPrediction_GeolocationPrediction* Arena::CreateMaybeMessage<::permissions::PermissionPrediction_GeolocationPrediction>(Arena*);
template<> ::permissions::PermissionPrediction_Likelihood* Arena::CreateMaybeMessage<::permissions::PermissionPrediction_Likelihood>(Arena*);
template<> ::permissions::PermissionPrediction_NotificationPrediction* Arena::CreateMaybeMessage<::permissions::PermissionPrediction_NotificationPrediction>(Arena*);
template<> ::permissions::SiteFeatures* Arena::CreateMaybeMessage<::permissions::SiteFeatures>(Arena*);
template<> ::permissions::StatsFeatures* Arena::CreateMaybeMessage<::permissions::StatsFeatures>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace permissions {

enum ClientFeatures_Platform : int {
  ClientFeatures_Platform_PLATFORM_UNSPECIFIED = 0,
  ClientFeatures_Platform_PLATFORM_MOBILE = 1,
  ClientFeatures_Platform_PLATFORM_DESKTOP = 2
};
bool ClientFeatures_Platform_IsValid(int value);
constexpr ClientFeatures_Platform ClientFeatures_Platform_Platform_MIN = ClientFeatures_Platform_PLATFORM_UNSPECIFIED;
constexpr ClientFeatures_Platform ClientFeatures_Platform_Platform_MAX = ClientFeatures_Platform_PLATFORM_DESKTOP;
constexpr int ClientFeatures_Platform_Platform_ARRAYSIZE = ClientFeatures_Platform_Platform_MAX + 1;

const std::string& ClientFeatures_Platform_Name(ClientFeatures_Platform value);
template<typename T>
inline const std::string& ClientFeatures_Platform_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientFeatures_Platform>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientFeatures_Platform_Name.");
  return ClientFeatures_Platform_Name(static_cast<ClientFeatures_Platform>(enum_t_value));
}
bool ClientFeatures_Platform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientFeatures_Platform* value);
enum ClientFeatures_Gesture : int {
  ClientFeatures_Gesture_GESTURE_UNSPECIFIED = 0,
  ClientFeatures_Gesture_NO_GESTURE = 1,
  ClientFeatures_Gesture_GESTURE = 2
};
bool ClientFeatures_Gesture_IsValid(int value);
constexpr ClientFeatures_Gesture ClientFeatures_Gesture_Gesture_MIN = ClientFeatures_Gesture_GESTURE_UNSPECIFIED;
constexpr ClientFeatures_Gesture ClientFeatures_Gesture_Gesture_MAX = ClientFeatures_Gesture_GESTURE;
constexpr int ClientFeatures_Gesture_Gesture_ARRAYSIZE = ClientFeatures_Gesture_Gesture_MAX + 1;

const std::string& ClientFeatures_Gesture_Name(ClientFeatures_Gesture value);
template<typename T>
inline const std::string& ClientFeatures_Gesture_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientFeatures_Gesture>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientFeatures_Gesture_Name.");
  return ClientFeatures_Gesture_Name(static_cast<ClientFeatures_Gesture>(enum_t_value));
}
bool ClientFeatures_Gesture_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientFeatures_Gesture* value);
enum ClientFeatures_GestureEnum : int {
  ClientFeatures_GestureEnum_GESTURE_V2 = 0,
  ClientFeatures_GestureEnum_GESTURE_UNSPECIFIED_V2 = 1
};
bool ClientFeatures_GestureEnum_IsValid(int value);
constexpr ClientFeatures_GestureEnum ClientFeatures_GestureEnum_GestureEnum_MIN = ClientFeatures_GestureEnum_GESTURE_V2;
constexpr ClientFeatures_GestureEnum ClientFeatures_GestureEnum_GestureEnum_MAX = ClientFeatures_GestureEnum_GESTURE_UNSPECIFIED_V2;
constexpr int ClientFeatures_GestureEnum_GestureEnum_ARRAYSIZE = ClientFeatures_GestureEnum_GestureEnum_MAX + 1;

const std::string& ClientFeatures_GestureEnum_Name(ClientFeatures_GestureEnum value);
template<typename T>
inline const std::string& ClientFeatures_GestureEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientFeatures_GestureEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientFeatures_GestureEnum_Name.");
  return ClientFeatures_GestureEnum_Name(static_cast<ClientFeatures_GestureEnum>(enum_t_value));
}
bool ClientFeatures_GestureEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientFeatures_GestureEnum* value);
enum ClientFeatures_PlatformEnum : int {
  ClientFeatures_PlatformEnum_PLATFORM_MOBILE_V2 = 0,
  ClientFeatures_PlatformEnum_PLATFORM_DESKTOP_V2 = 1,
  ClientFeatures_PlatformEnum_PLATFORM_UNSPECIFIED_V2 = 3
};
bool ClientFeatures_PlatformEnum_IsValid(int value);
constexpr ClientFeatures_PlatformEnum ClientFeatures_PlatformEnum_PlatformEnum_MIN = ClientFeatures_PlatformEnum_PLATFORM_MOBILE_V2;
constexpr ClientFeatures_PlatformEnum ClientFeatures_PlatformEnum_PlatformEnum_MAX = ClientFeatures_PlatformEnum_PLATFORM_UNSPECIFIED_V2;
constexpr int ClientFeatures_PlatformEnum_PlatformEnum_ARRAYSIZE = ClientFeatures_PlatformEnum_PlatformEnum_MAX + 1;

const std::string& ClientFeatures_PlatformEnum_Name(ClientFeatures_PlatformEnum value);
template<typename T>
inline const std::string& ClientFeatures_PlatformEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientFeatures_PlatformEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientFeatures_PlatformEnum_Name.");
  return ClientFeatures_PlatformEnum_Name(static_cast<ClientFeatures_PlatformEnum>(enum_t_value));
}
bool ClientFeatures_PlatformEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientFeatures_PlatformEnum* value);
enum PermissionPrediction_Likelihood_DiscretizedLikelihood : int {
  PermissionPrediction_Likelihood_DiscretizedLikelihood_DISCRETIZED_LIKELIHOOD_UNSPECIFIED = 0,
  PermissionPrediction_Likelihood_DiscretizedLikelihood_VERY_UNLIKELY = 1,
  PermissionPrediction_Likelihood_DiscretizedLikelihood_UNLIKELY = 2,
  PermissionPrediction_Likelihood_DiscretizedLikelihood_NEUTRAL = 3,
  PermissionPrediction_Likelihood_DiscretizedLikelihood_LIKELY = 4,
  PermissionPrediction_Likelihood_DiscretizedLikelihood_VERY_LIKELY = 5
};
bool PermissionPrediction_Likelihood_DiscretizedLikelihood_IsValid(int value);
constexpr PermissionPrediction_Likelihood_DiscretizedLikelihood PermissionPrediction_Likelihood_DiscretizedLikelihood_DiscretizedLikelihood_MIN = PermissionPrediction_Likelihood_DiscretizedLikelihood_DISCRETIZED_LIKELIHOOD_UNSPECIFIED;
constexpr PermissionPrediction_Likelihood_DiscretizedLikelihood PermissionPrediction_Likelihood_DiscretizedLikelihood_DiscretizedLikelihood_MAX = PermissionPrediction_Likelihood_DiscretizedLikelihood_VERY_LIKELY;
constexpr int PermissionPrediction_Likelihood_DiscretizedLikelihood_DiscretizedLikelihood_ARRAYSIZE = PermissionPrediction_Likelihood_DiscretizedLikelihood_DiscretizedLikelihood_MAX + 1;

const std::string& PermissionPrediction_Likelihood_DiscretizedLikelihood_Name(PermissionPrediction_Likelihood_DiscretizedLikelihood value);
template<typename T>
inline const std::string& PermissionPrediction_Likelihood_DiscretizedLikelihood_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PermissionPrediction_Likelihood_DiscretizedLikelihood>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PermissionPrediction_Likelihood_DiscretizedLikelihood_Name.");
  return PermissionPrediction_Likelihood_DiscretizedLikelihood_Name(static_cast<PermissionPrediction_Likelihood_DiscretizedLikelihood>(enum_t_value));
}
bool PermissionPrediction_Likelihood_DiscretizedLikelihood_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PermissionPrediction_Likelihood_DiscretizedLikelihood* value);
// ===================================================================

class SiteFeatures final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:permissions.SiteFeatures) */ {
 public:
  inline SiteFeatures() : SiteFeatures(nullptr) {}
  ~SiteFeatures() override;
  explicit PROTOBUF_CONSTEXPR SiteFeatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteFeatures(const SiteFeatures& from);
  SiteFeatures(SiteFeatures&& from) noexcept
    : SiteFeatures() {
    *this = ::std::move(from);
  }

  inline SiteFeatures& operator=(const SiteFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteFeatures& operator=(SiteFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SiteFeatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteFeatures* internal_default_instance() {
    return reinterpret_cast<const SiteFeatures*>(
               &_SiteFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SiteFeatures& a, SiteFeatures& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SiteFeatures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteFeatures>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SiteFeatures& from);
  void MergeFrom(const SiteFeatures& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SiteFeatures* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "permissions.SiteFeatures";
  }
  protected:
  explicit SiteFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:permissions.SiteFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class StatsFeatures final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:permissions.StatsFeatures) */ {
 public:
  inline StatsFeatures() : StatsFeatures(nullptr) {}
  ~StatsFeatures() override;
  explicit PROTOBUF_CONSTEXPR StatsFeatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatsFeatures(const StatsFeatures& from);
  StatsFeatures(StatsFeatures&& from) noexcept
    : StatsFeatures() {
    *this = ::std::move(from);
  }

  inline StatsFeatures& operator=(const StatsFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsFeatures& operator=(StatsFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StatsFeatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatsFeatures* internal_default_instance() {
    return reinterpret_cast<const StatsFeatures*>(
               &_StatsFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StatsFeatures& a, StatsFeatures& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StatsFeatures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatsFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatsFeatures>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StatsFeatures& from);
  void MergeFrom(const StatsFeatures& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StatsFeatures* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "permissions.StatsFeatures";
  }
  protected:
  explicit StatsFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvgDenyRateFieldNumber = 1,
    kAvgGrantRateFieldNumber = 2,
    kAvgDismissRateFieldNumber = 3,
    kAvgIgnoreRateFieldNumber = 4,
    kPromptsCountFieldNumber = 5,
  };
  // optional float avg_deny_rate = 1;
  bool has_avg_deny_rate() const;
  private:
  bool _internal_has_avg_deny_rate() const;
  public:
  void clear_avg_deny_rate();
  float avg_deny_rate() const;
  void set_avg_deny_rate(float value);
  private:
  float _internal_avg_deny_rate() const;
  void _internal_set_avg_deny_rate(float value);
  public:

  // optional float avg_grant_rate = 2;
  bool has_avg_grant_rate() const;
  private:
  bool _internal_has_avg_grant_rate() const;
  public:
  void clear_avg_grant_rate();
  float avg_grant_rate() const;
  void set_avg_grant_rate(float value);
  private:
  float _internal_avg_grant_rate() const;
  void _internal_set_avg_grant_rate(float value);
  public:

  // optional float avg_dismiss_rate = 3;
  bool has_avg_dismiss_rate() const;
  private:
  bool _internal_has_avg_dismiss_rate() const;
  public:
  void clear_avg_dismiss_rate();
  float avg_dismiss_rate() const;
  void set_avg_dismiss_rate(float value);
  private:
  float _internal_avg_dismiss_rate() const;
  void _internal_set_avg_dismiss_rate(float value);
  public:

  // optional float avg_ignore_rate = 4;
  bool has_avg_ignore_rate() const;
  private:
  bool _internal_has_avg_ignore_rate() const;
  public:
  void clear_avg_ignore_rate();
  float avg_ignore_rate() const;
  void set_avg_ignore_rate(float value);
  private:
  float _internal_avg_ignore_rate() const;
  void _internal_set_avg_ignore_rate(float value);
  public:

  // optional int32 prompts_count = 5;
  bool has_prompts_count() const;
  private:
  bool _internal_has_prompts_count() const;
  public:
  void clear_prompts_count();
  int32_t prompts_count() const;
  void set_prompts_count(int32_t value);
  private:
  int32_t _internal_prompts_count() const;
  void _internal_set_prompts_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:permissions.StatsFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float avg_deny_rate_;
  float avg_grant_rate_;
  float avg_dismiss_rate_;
  float avg_ignore_rate_;
  int32_t prompts_count_;
  friend struct ::TableStruct_prediction_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class ClientFeatures final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:permissions.ClientFeatures) */ {
 public:
  inline ClientFeatures() : ClientFeatures(nullptr) {}
  ~ClientFeatures() override;
  explicit PROTOBUF_CONSTEXPR ClientFeatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientFeatures(const ClientFeatures& from);
  ClientFeatures(ClientFeatures&& from) noexcept
    : ClientFeatures() {
    *this = ::std::move(from);
  }

  inline ClientFeatures& operator=(const ClientFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientFeatures& operator=(ClientFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientFeatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientFeatures* internal_default_instance() {
    return reinterpret_cast<const ClientFeatures*>(
               &_ClientFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientFeatures& a, ClientFeatures& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientFeatures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientFeatures>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientFeatures& from);
  void MergeFrom(const ClientFeatures& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientFeatures* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "permissions.ClientFeatures";
  }
  protected:
  explicit ClientFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientFeatures_Platform Platform;
  static constexpr Platform PLATFORM_UNSPECIFIED =
    ClientFeatures_Platform_PLATFORM_UNSPECIFIED;
  static constexpr Platform PLATFORM_MOBILE =
    ClientFeatures_Platform_PLATFORM_MOBILE;
  static constexpr Platform PLATFORM_DESKTOP =
    ClientFeatures_Platform_PLATFORM_DESKTOP;
  static inline bool Platform_IsValid(int value) {
    return ClientFeatures_Platform_IsValid(value);
  }
  static constexpr Platform Platform_MIN =
    ClientFeatures_Platform_Platform_MIN;
  static constexpr Platform Platform_MAX =
    ClientFeatures_Platform_Platform_MAX;
  static constexpr int Platform_ARRAYSIZE =
    ClientFeatures_Platform_Platform_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Platform_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Platform>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Platform_Name.");
    return ClientFeatures_Platform_Name(enum_t_value);
  }
  static inline bool Platform_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Platform* value) {
    return ClientFeatures_Platform_Parse(name, value);
  }

  typedef ClientFeatures_Gesture Gesture;
  static constexpr Gesture GESTURE_UNSPECIFIED =
    ClientFeatures_Gesture_GESTURE_UNSPECIFIED;
  static constexpr Gesture NO_GESTURE =
    ClientFeatures_Gesture_NO_GESTURE;
  static constexpr Gesture GESTURE =
    ClientFeatures_Gesture_GESTURE;
  static inline bool Gesture_IsValid(int value) {
    return ClientFeatures_Gesture_IsValid(value);
  }
  static constexpr Gesture Gesture_MIN =
    ClientFeatures_Gesture_Gesture_MIN;
  static constexpr Gesture Gesture_MAX =
    ClientFeatures_Gesture_Gesture_MAX;
  static constexpr int Gesture_ARRAYSIZE =
    ClientFeatures_Gesture_Gesture_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Gesture_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Gesture>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Gesture_Name.");
    return ClientFeatures_Gesture_Name(enum_t_value);
  }
  static inline bool Gesture_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Gesture* value) {
    return ClientFeatures_Gesture_Parse(name, value);
  }

  typedef ClientFeatures_GestureEnum GestureEnum;
  static constexpr GestureEnum GESTURE_V2 =
    ClientFeatures_GestureEnum_GESTURE_V2;
  static constexpr GestureEnum GESTURE_UNSPECIFIED_V2 =
    ClientFeatures_GestureEnum_GESTURE_UNSPECIFIED_V2;
  static inline bool GestureEnum_IsValid(int value) {
    return ClientFeatures_GestureEnum_IsValid(value);
  }
  static constexpr GestureEnum GestureEnum_MIN =
    ClientFeatures_GestureEnum_GestureEnum_MIN;
  static constexpr GestureEnum GestureEnum_MAX =
    ClientFeatures_GestureEnum_GestureEnum_MAX;
  static constexpr int GestureEnum_ARRAYSIZE =
    ClientFeatures_GestureEnum_GestureEnum_ARRAYSIZE;
  template<typename T>
  static inline const std::string& GestureEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GestureEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GestureEnum_Name.");
    return ClientFeatures_GestureEnum_Name(enum_t_value);
  }
  static inline bool GestureEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GestureEnum* value) {
    return ClientFeatures_GestureEnum_Parse(name, value);
  }

  typedef ClientFeatures_PlatformEnum PlatformEnum;
  static constexpr PlatformEnum PLATFORM_MOBILE_V2 =
    ClientFeatures_PlatformEnum_PLATFORM_MOBILE_V2;
  static constexpr PlatformEnum PLATFORM_DESKTOP_V2 =
    ClientFeatures_PlatformEnum_PLATFORM_DESKTOP_V2;
  static constexpr PlatformEnum PLATFORM_UNSPECIFIED_V2 =
    ClientFeatures_PlatformEnum_PLATFORM_UNSPECIFIED_V2;
  static inline bool PlatformEnum_IsValid(int value) {
    return ClientFeatures_PlatformEnum_IsValid(value);
  }
  static constexpr PlatformEnum PlatformEnum_MIN =
    ClientFeatures_PlatformEnum_PlatformEnum_MIN;
  static constexpr PlatformEnum PlatformEnum_MAX =
    ClientFeatures_PlatformEnum_PlatformEnum_MAX;
  static constexpr int PlatformEnum_ARRAYSIZE =
    ClientFeatures_PlatformEnum_PlatformEnum_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PlatformEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PlatformEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PlatformEnum_Name.");
    return ClientFeatures_PlatformEnum_Name(enum_t_value);
  }
  static inline bool PlatformEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PlatformEnum* value) {
    return ClientFeatures_PlatformEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kClientStatsFieldNumber = 1,
    kPlatformFieldNumber = 2,
    kGestureFieldNumber = 3,
    kGestureEnumFieldNumber = 4,
    kPlatformEnumFieldNumber = 5,
  };
  // optional .permissions.StatsFeatures client_stats = 1;
  bool has_client_stats() const;
  private:
  bool _internal_has_client_stats() const;
  public:
  void clear_client_stats();
  const ::permissions::StatsFeatures& client_stats() const;
  PROTOBUF_NODISCARD ::permissions::StatsFeatures* release_client_stats();
  ::permissions::StatsFeatures* mutable_client_stats();
  void set_allocated_client_stats(::permissions::StatsFeatures* client_stats);
  private:
  const ::permissions::StatsFeatures& _internal_client_stats() const;
  ::permissions::StatsFeatures* _internal_mutable_client_stats();
  public:
  void unsafe_arena_set_allocated_client_stats(
      ::permissions::StatsFeatures* client_stats);
  ::permissions::StatsFeatures* unsafe_arena_release_client_stats();

  // optional .permissions.ClientFeatures.Platform platform = 2;
  bool has_platform() const;
  private:
  bool _internal_has_platform() const;
  public:
  void clear_platform();
  ::permissions::ClientFeatures_Platform platform() const;
  void set_platform(::permissions::ClientFeatures_Platform value);
  private:
  ::permissions::ClientFeatures_Platform _internal_platform() const;
  void _internal_set_platform(::permissions::ClientFeatures_Platform value);
  public:

  // optional .permissions.ClientFeatures.Gesture gesture = 3;
  bool has_gesture() const;
  private:
  bool _internal_has_gesture() const;
  public:
  void clear_gesture();
  ::permissions::ClientFeatures_Gesture gesture() const;
  void set_gesture(::permissions::ClientFeatures_Gesture value);
  private:
  ::permissions::ClientFeatures_Gesture _internal_gesture() const;
  void _internal_set_gesture(::permissions::ClientFeatures_Gesture value);
  public:

  // optional .permissions.ClientFeatures.GestureEnum gesture_enum = 4;
  bool has_gesture_enum() const;
  private:
  bool _internal_has_gesture_enum() const;
  public:
  void clear_gesture_enum();
  ::permissions::ClientFeatures_GestureEnum gesture_enum() const;
  void set_gesture_enum(::permissions::ClientFeatures_GestureEnum value);
  private:
  ::permissions::ClientFeatures_GestureEnum _internal_gesture_enum() const;
  void _internal_set_gesture_enum(::permissions::ClientFeatures_GestureEnum value);
  public:

  // optional .permissions.ClientFeatures.PlatformEnum platform_enum = 5;
  bool has_platform_enum() const;
  private:
  bool _internal_has_platform_enum() const;
  public:
  void clear_platform_enum();
  ::permissions::ClientFeatures_PlatformEnum platform_enum() const;
  void set_platform_enum(::permissions::ClientFeatures_PlatformEnum value);
  private:
  ::permissions::ClientFeatures_PlatformEnum _internal_platform_enum() const;
  void _internal_set_platform_enum(::permissions::ClientFeatures_PlatformEnum value);
  public:

  // @@protoc_insertion_point(class_scope:permissions.ClientFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::permissions::StatsFeatures* client_stats_;
  int platform_;
  int gesture_;
  int gesture_enum_;
  int platform_enum_;
  friend struct ::TableStruct_prediction_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class PermissionFeatures_NotificationPermission final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:permissions.PermissionFeatures.NotificationPermission) */ {
 public:
  inline PermissionFeatures_NotificationPermission() : PermissionFeatures_NotificationPermission(nullptr) {}
  ~PermissionFeatures_NotificationPermission() override;
  explicit PROTOBUF_CONSTEXPR PermissionFeatures_NotificationPermission(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermissionFeatures_NotificationPermission(const PermissionFeatures_NotificationPermission& from);
  PermissionFeatures_NotificationPermission(PermissionFeatures_NotificationPermission&& from) noexcept
    : PermissionFeatures_NotificationPermission() {
    *this = ::std::move(from);
  }

  inline PermissionFeatures_NotificationPermission& operator=(const PermissionFeatures_NotificationPermission& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionFeatures_NotificationPermission& operator=(PermissionFeatures_NotificationPermission&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PermissionFeatures_NotificationPermission& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermissionFeatures_NotificationPermission* internal_default_instance() {
    return reinterpret_cast<const PermissionFeatures_NotificationPermission*>(
               &_PermissionFeatures_NotificationPermission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PermissionFeatures_NotificationPermission& a, PermissionFeatures_NotificationPermission& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PermissionFeatures_NotificationPermission* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionFeatures_NotificationPermission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermissionFeatures_NotificationPermission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermissionFeatures_NotificationPermission>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PermissionFeatures_NotificationPermission& from);
  void MergeFrom(const PermissionFeatures_NotificationPermission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PermissionFeatures_NotificationPermission* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "permissions.PermissionFeatures.NotificationPermission";
  }
  protected:
  explicit PermissionFeatures_NotificationPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:permissions.PermissionFeatures.NotificationPermission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class PermissionFeatures_GeolocationPermission final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:permissions.PermissionFeatures.GeolocationPermission) */ {
 public:
  inline PermissionFeatures_GeolocationPermission() : PermissionFeatures_GeolocationPermission(nullptr) {}
  ~PermissionFeatures_GeolocationPermission() override;
  explicit PROTOBUF_CONSTEXPR PermissionFeatures_GeolocationPermission(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermissionFeatures_GeolocationPermission(const PermissionFeatures_GeolocationPermission& from);
  PermissionFeatures_GeolocationPermission(PermissionFeatures_GeolocationPermission&& from) noexcept
    : PermissionFeatures_GeolocationPermission() {
    *this = ::std::move(from);
  }

  inline PermissionFeatures_GeolocationPermission& operator=(const PermissionFeatures_GeolocationPermission& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionFeatures_GeolocationPermission& operator=(PermissionFeatures_GeolocationPermission&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PermissionFeatures_GeolocationPermission& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermissionFeatures_GeolocationPermission* internal_default_instance() {
    return reinterpret_cast<const PermissionFeatures_GeolocationPermission*>(
               &_PermissionFeatures_GeolocationPermission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PermissionFeatures_GeolocationPermission& a, PermissionFeatures_GeolocationPermission& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PermissionFeatures_GeolocationPermission* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionFeatures_GeolocationPermission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermissionFeatures_GeolocationPermission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermissionFeatures_GeolocationPermission>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PermissionFeatures_GeolocationPermission& from);
  void MergeFrom(const PermissionFeatures_GeolocationPermission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PermissionFeatures_GeolocationPermission* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "permissions.PermissionFeatures.GeolocationPermission";
  }
  protected:
  explicit PermissionFeatures_GeolocationPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:permissions.PermissionFeatures.GeolocationPermission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class PermissionFeatures final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:permissions.PermissionFeatures) */ {
 public:
  inline PermissionFeatures() : PermissionFeatures(nullptr) {}
  ~PermissionFeatures() override;
  explicit PROTOBUF_CONSTEXPR PermissionFeatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermissionFeatures(const PermissionFeatures& from);
  PermissionFeatures(PermissionFeatures&& from) noexcept
    : PermissionFeatures() {
    *this = ::std::move(from);
  }

  inline PermissionFeatures& operator=(const PermissionFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionFeatures& operator=(PermissionFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PermissionFeatures& default_instance() {
    return *internal_default_instance();
  }
  enum PermissionTypeCase {
    kNotificationPermission = 2,
    kGeolocationPermission = 3,
    PERMISSION_TYPE_NOT_SET = 0,
  };

  static inline const PermissionFeatures* internal_default_instance() {
    return reinterpret_cast<const PermissionFeatures*>(
               &_PermissionFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PermissionFeatures& a, PermissionFeatures& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PermissionFeatures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermissionFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermissionFeatures>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PermissionFeatures& from);
  void MergeFrom(const PermissionFeatures& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PermissionFeatures* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "permissions.PermissionFeatures";
  }
  protected:
  explicit PermissionFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PermissionFeatures_NotificationPermission NotificationPermission;
  typedef PermissionFeatures_GeolocationPermission GeolocationPermission;

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionStatsFieldNumber = 1,
    kNotificationPermissionFieldNumber = 2,
    kGeolocationPermissionFieldNumber = 3,
  };
  // optional .permissions.StatsFeatures permission_stats = 1;
  bool has_permission_stats() const;
  private:
  bool _internal_has_permission_stats() const;
  public:
  void clear_permission_stats();
  const ::permissions::StatsFeatures& permission_stats() const;
  PROTOBUF_NODISCARD ::permissions::StatsFeatures* release_permission_stats();
  ::permissions::StatsFeatures* mutable_permission_stats();
  void set_allocated_permission_stats(::permissions::StatsFeatures* permission_stats);
  private:
  const ::permissions::StatsFeatures& _internal_permission_stats() const;
  ::permissions::StatsFeatures* _internal_mutable_permission_stats();
  public:
  void unsafe_arena_set_allocated_permission_stats(
      ::permissions::StatsFeatures* permission_stats);
  ::permissions::StatsFeatures* unsafe_arena_release_permission_stats();

  // .permissions.PermissionFeatures.NotificationPermission notification_permission = 2;
  bool has_notification_permission() const;
  private:
  bool _internal_has_notification_permission() const;
  public:
  void clear_notification_permission();
  const ::permissions::PermissionFeatures_NotificationPermission& notification_permission() const;
  PROTOBUF_NODISCARD ::permissions::PermissionFeatures_NotificationPermission* release_notification_permission();
  ::permissions::PermissionFeatures_NotificationPermission* mutable_notification_permission();
  void set_allocated_notification_permission(::permissions::PermissionFeatures_NotificationPermission* notification_permission);
  private:
  const ::permissions::PermissionFeatures_NotificationPermission& _internal_notification_permission() const;
  ::permissions::PermissionFeatures_NotificationPermission* _internal_mutable_notification_permission();
  public:
  void unsafe_arena_set_allocated_notification_permission(
      ::permissions::PermissionFeatures_NotificationPermission* notification_permission);
  ::permissions::PermissionFeatures_NotificationPermission* unsafe_arena_release_notification_permission();

  // .permissions.PermissionFeatures.GeolocationPermission geolocation_permission = 3;
  bool has_geolocation_permission() const;
  private:
  bool _internal_has_geolocation_permission() const;
  public:
  void clear_geolocation_permission();
  const ::permissions::PermissionFeatures_GeolocationPermission& geolocation_permission() const;
  PROTOBUF_NODISCARD ::permissions::PermissionFeatures_GeolocationPermission* release_geolocation_permission();
  ::permissions::PermissionFeatures_GeolocationPermission* mutable_geolocation_permission();
  void set_allocated_geolocation_permission(::permissions::PermissionFeatures_GeolocationPermission* geolocation_permission);
  private:
  const ::permissions::PermissionFeatures_GeolocationPermission& _internal_geolocation_permission() const;
  ::permissions::PermissionFeatures_GeolocationPermission* _internal_mutable_geolocation_permission();
  public:
  void unsafe_arena_set_allocated_geolocation_permission(
      ::permissions::PermissionFeatures_GeolocationPermission* geolocation_permission);
  ::permissions::PermissionFeatures_GeolocationPermission* unsafe_arena_release_geolocation_permission();

  void clear_permission_type();
  PermissionTypeCase permission_type_case() const;
  // @@protoc_insertion_point(class_scope:permissions.PermissionFeatures)
 private:
  class _Internal;
  void set_has_notification_permission();
  void set_has_geolocation_permission();

  inline bool has_permission_type() const;
  inline void clear_has_permission_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::permissions::StatsFeatures* permission_stats_;
  union PermissionTypeUnion {
    constexpr PermissionTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::permissions::PermissionFeatures_NotificationPermission* notification_permission_;
    ::permissions::PermissionFeatures_GeolocationPermission* geolocation_permission_;
  } permission_type_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_prediction_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class PermissionPrediction_NotificationPrediction final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:permissions.PermissionPrediction.NotificationPrediction) */ {
 public:
  inline PermissionPrediction_NotificationPrediction() : PermissionPrediction_NotificationPrediction(nullptr) {}
  ~PermissionPrediction_NotificationPrediction() override;
  explicit PROTOBUF_CONSTEXPR PermissionPrediction_NotificationPrediction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermissionPrediction_NotificationPrediction(const PermissionPrediction_NotificationPrediction& from);
  PermissionPrediction_NotificationPrediction(PermissionPrediction_NotificationPrediction&& from) noexcept
    : PermissionPrediction_NotificationPrediction() {
    *this = ::std::move(from);
  }

  inline PermissionPrediction_NotificationPrediction& operator=(const PermissionPrediction_NotificationPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionPrediction_NotificationPrediction& operator=(PermissionPrediction_NotificationPrediction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PermissionPrediction_NotificationPrediction& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermissionPrediction_NotificationPrediction* internal_default_instance() {
    return reinterpret_cast<const PermissionPrediction_NotificationPrediction*>(
               &_PermissionPrediction_NotificationPrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PermissionPrediction_NotificationPrediction& a, PermissionPrediction_NotificationPrediction& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PermissionPrediction_NotificationPrediction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionPrediction_NotificationPrediction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermissionPrediction_NotificationPrediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermissionPrediction_NotificationPrediction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PermissionPrediction_NotificationPrediction& from);
  void MergeFrom(const PermissionPrediction_NotificationPrediction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PermissionPrediction_NotificationPrediction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "permissions.PermissionPrediction.NotificationPrediction";
  }
  protected:
  explicit PermissionPrediction_NotificationPrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:permissions.PermissionPrediction.NotificationPrediction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class PermissionPrediction_GeolocationPrediction final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:permissions.PermissionPrediction.GeolocationPrediction) */ {
 public:
  inline PermissionPrediction_GeolocationPrediction() : PermissionPrediction_GeolocationPrediction(nullptr) {}
  ~PermissionPrediction_GeolocationPrediction() override;
  explicit PROTOBUF_CONSTEXPR PermissionPrediction_GeolocationPrediction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermissionPrediction_GeolocationPrediction(const PermissionPrediction_GeolocationPrediction& from);
  PermissionPrediction_GeolocationPrediction(PermissionPrediction_GeolocationPrediction&& from) noexcept
    : PermissionPrediction_GeolocationPrediction() {
    *this = ::std::move(from);
  }

  inline PermissionPrediction_GeolocationPrediction& operator=(const PermissionPrediction_GeolocationPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionPrediction_GeolocationPrediction& operator=(PermissionPrediction_GeolocationPrediction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PermissionPrediction_GeolocationPrediction& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermissionPrediction_GeolocationPrediction* internal_default_instance() {
    return reinterpret_cast<const PermissionPrediction_GeolocationPrediction*>(
               &_PermissionPrediction_GeolocationPrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PermissionPrediction_GeolocationPrediction& a, PermissionPrediction_GeolocationPrediction& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PermissionPrediction_GeolocationPrediction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionPrediction_GeolocationPrediction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermissionPrediction_GeolocationPrediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermissionPrediction_GeolocationPrediction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PermissionPrediction_GeolocationPrediction& from);
  void MergeFrom(const PermissionPrediction_GeolocationPrediction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PermissionPrediction_GeolocationPrediction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "permissions.PermissionPrediction.GeolocationPrediction";
  }
  protected:
  explicit PermissionPrediction_GeolocationPrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:permissions.PermissionPrediction.GeolocationPrediction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class PermissionPrediction_Likelihood final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:permissions.PermissionPrediction.Likelihood) */ {
 public:
  inline PermissionPrediction_Likelihood() : PermissionPrediction_Likelihood(nullptr) {}
  ~PermissionPrediction_Likelihood() override;
  explicit PROTOBUF_CONSTEXPR PermissionPrediction_Likelihood(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermissionPrediction_Likelihood(const PermissionPrediction_Likelihood& from);
  PermissionPrediction_Likelihood(PermissionPrediction_Likelihood&& from) noexcept
    : PermissionPrediction_Likelihood() {
    *this = ::std::move(from);
  }

  inline PermissionPrediction_Likelihood& operator=(const PermissionPrediction_Likelihood& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionPrediction_Likelihood& operator=(PermissionPrediction_Likelihood&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PermissionPrediction_Likelihood& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermissionPrediction_Likelihood* internal_default_instance() {
    return reinterpret_cast<const PermissionPrediction_Likelihood*>(
               &_PermissionPrediction_Likelihood_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PermissionPrediction_Likelihood& a, PermissionPrediction_Likelihood& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PermissionPrediction_Likelihood* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionPrediction_Likelihood* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermissionPrediction_Likelihood* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermissionPrediction_Likelihood>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PermissionPrediction_Likelihood& from);
  void MergeFrom(const PermissionPrediction_Likelihood& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PermissionPrediction_Likelihood* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "permissions.PermissionPrediction.Likelihood";
  }
  protected:
  explicit PermissionPrediction_Likelihood(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PermissionPrediction_Likelihood_DiscretizedLikelihood DiscretizedLikelihood;
  static constexpr DiscretizedLikelihood DISCRETIZED_LIKELIHOOD_UNSPECIFIED =
    PermissionPrediction_Likelihood_DiscretizedLikelihood_DISCRETIZED_LIKELIHOOD_UNSPECIFIED;
  static constexpr DiscretizedLikelihood VERY_UNLIKELY =
    PermissionPrediction_Likelihood_DiscretizedLikelihood_VERY_UNLIKELY;
  static constexpr DiscretizedLikelihood UNLIKELY =
    PermissionPrediction_Likelihood_DiscretizedLikelihood_UNLIKELY;
  static constexpr DiscretizedLikelihood NEUTRAL =
    PermissionPrediction_Likelihood_DiscretizedLikelihood_NEUTRAL;
  static constexpr DiscretizedLikelihood LIKELY =
    PermissionPrediction_Likelihood_DiscretizedLikelihood_LIKELY;
  static constexpr DiscretizedLikelihood VERY_LIKELY =
    PermissionPrediction_Likelihood_DiscretizedLikelihood_VERY_LIKELY;
  static inline bool DiscretizedLikelihood_IsValid(int value) {
    return PermissionPrediction_Likelihood_DiscretizedLikelihood_IsValid(value);
  }
  static constexpr DiscretizedLikelihood DiscretizedLikelihood_MIN =
    PermissionPrediction_Likelihood_DiscretizedLikelihood_DiscretizedLikelihood_MIN;
  static constexpr DiscretizedLikelihood DiscretizedLikelihood_MAX =
    PermissionPrediction_Likelihood_DiscretizedLikelihood_DiscretizedLikelihood_MAX;
  static constexpr int DiscretizedLikelihood_ARRAYSIZE =
    PermissionPrediction_Likelihood_DiscretizedLikelihood_DiscretizedLikelihood_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DiscretizedLikelihood_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DiscretizedLikelihood>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DiscretizedLikelihood_Name.");
    return PermissionPrediction_Likelihood_DiscretizedLikelihood_Name(enum_t_value);
  }
  static inline bool DiscretizedLikelihood_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DiscretizedLikelihood* value) {
    return PermissionPrediction_Likelihood_DiscretizedLikelihood_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDiscretizedLikelihoodFieldNumber = 1,
  };
  // optional .permissions.PermissionPrediction.Likelihood.DiscretizedLikelihood discretized_likelihood = 1;
  bool has_discretized_likelihood() const;
  private:
  bool _internal_has_discretized_likelihood() const;
  public:
  void clear_discretized_likelihood();
  ::permissions::PermissionPrediction_Likelihood_DiscretizedLikelihood discretized_likelihood() const;
  void set_discretized_likelihood(::permissions::PermissionPrediction_Likelihood_DiscretizedLikelihood value);
  private:
  ::permissions::PermissionPrediction_Likelihood_DiscretizedLikelihood _internal_discretized_likelihood() const;
  void _internal_set_discretized_likelihood(::permissions::PermissionPrediction_Likelihood_DiscretizedLikelihood value);
  public:

  // @@protoc_insertion_point(class_scope:permissions.PermissionPrediction.Likelihood)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int discretized_likelihood_;
  friend struct ::TableStruct_prediction_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class PermissionPrediction final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:permissions.PermissionPrediction) */ {
 public:
  inline PermissionPrediction() : PermissionPrediction(nullptr) {}
  ~PermissionPrediction() override;
  explicit PROTOBUF_CONSTEXPR PermissionPrediction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermissionPrediction(const PermissionPrediction& from);
  PermissionPrediction(PermissionPrediction&& from) noexcept
    : PermissionPrediction() {
    *this = ::std::move(from);
  }

  inline PermissionPrediction& operator=(const PermissionPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionPrediction& operator=(PermissionPrediction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PermissionPrediction& default_instance() {
    return *internal_default_instance();
  }
  enum PredictionTypeCase {
    kNotificationPrediction = 1,
    kGeolocationPrediction = 3,
    PREDICTION_TYPE_NOT_SET = 0,
  };

  static inline const PermissionPrediction* internal_default_instance() {
    return reinterpret_cast<const PermissionPrediction*>(
               &_PermissionPrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PermissionPrediction& a, PermissionPrediction& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PermissionPrediction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionPrediction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermissionPrediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermissionPrediction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PermissionPrediction& from);
  void MergeFrom(const PermissionPrediction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PermissionPrediction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "permissions.PermissionPrediction";
  }
  protected:
  explicit PermissionPrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PermissionPrediction_NotificationPrediction NotificationPrediction;
  typedef PermissionPrediction_GeolocationPrediction GeolocationPrediction;
  typedef PermissionPrediction_Likelihood Likelihood;

  // accessors -------------------------------------------------------

  enum : int {
    kGrantLikelihoodFieldNumber = 2,
    kNotificationPredictionFieldNumber = 1,
    kGeolocationPredictionFieldNumber = 3,
  };
  // optional .permissions.PermissionPrediction.Likelihood grant_likelihood = 2;
  bool has_grant_likelihood() const;
  private:
  bool _internal_has_grant_likelihood() const;
  public:
  void clear_grant_likelihood();
  const ::permissions::PermissionPrediction_Likelihood& grant_likelihood() const;
  PROTOBUF_NODISCARD ::permissions::PermissionPrediction_Likelihood* release_grant_likelihood();
  ::permissions::PermissionPrediction_Likelihood* mutable_grant_likelihood();
  void set_allocated_grant_likelihood(::permissions::PermissionPrediction_Likelihood* grant_likelihood);
  private:
  const ::permissions::PermissionPrediction_Likelihood& _internal_grant_likelihood() const;
  ::permissions::PermissionPrediction_Likelihood* _internal_mutable_grant_likelihood();
  public:
  void unsafe_arena_set_allocated_grant_likelihood(
      ::permissions::PermissionPrediction_Likelihood* grant_likelihood);
  ::permissions::PermissionPrediction_Likelihood* unsafe_arena_release_grant_likelihood();

  // .permissions.PermissionPrediction.NotificationPrediction notification_prediction = 1;
  bool has_notification_prediction() const;
  private:
  bool _internal_has_notification_prediction() const;
  public:
  void clear_notification_prediction();
  const ::permissions::PermissionPrediction_NotificationPrediction& notification_prediction() const;
  PROTOBUF_NODISCARD ::permissions::PermissionPrediction_NotificationPrediction* release_notification_prediction();
  ::permissions::PermissionPrediction_NotificationPrediction* mutable_notification_prediction();
  void set_allocated_notification_prediction(::permissions::PermissionPrediction_NotificationPrediction* notification_prediction);
  private:
  const ::permissions::PermissionPrediction_NotificationPrediction& _internal_notification_prediction() const;
  ::permissions::PermissionPrediction_NotificationPrediction* _internal_mutable_notification_prediction();
  public:
  void unsafe_arena_set_allocated_notification_prediction(
      ::permissions::PermissionPrediction_NotificationPrediction* notification_prediction);
  ::permissions::PermissionPrediction_NotificationPrediction* unsafe_arena_release_notification_prediction();

  // .permissions.PermissionPrediction.GeolocationPrediction geolocation_prediction = 3;
  bool has_geolocation_prediction() const;
  private:
  bool _internal_has_geolocation_prediction() const;
  public:
  void clear_geolocation_prediction();
  const ::permissions::PermissionPrediction_GeolocationPrediction& geolocation_prediction() const;
  PROTOBUF_NODISCARD ::permissions::PermissionPrediction_GeolocationPrediction* release_geolocation_prediction();
  ::permissions::PermissionPrediction_GeolocationPrediction* mutable_geolocation_prediction();
  void set_allocated_geolocation_prediction(::permissions::PermissionPrediction_GeolocationPrediction* geolocation_prediction);
  private:
  const ::permissions::PermissionPrediction_GeolocationPrediction& _internal_geolocation_prediction() const;
  ::permissions::PermissionPrediction_GeolocationPrediction* _internal_mutable_geolocation_prediction();
  public:
  void unsafe_arena_set_allocated_geolocation_prediction(
      ::permissions::PermissionPrediction_GeolocationPrediction* geolocation_prediction);
  ::permissions::PermissionPrediction_GeolocationPrediction* unsafe_arena_release_geolocation_prediction();

  void clear_prediction_type();
  PredictionTypeCase prediction_type_case() const;
  // @@protoc_insertion_point(class_scope:permissions.PermissionPrediction)
 private:
  class _Internal;
  void set_has_notification_prediction();
  void set_has_geolocation_prediction();

  inline bool has_prediction_type() const;
  inline void clear_has_prediction_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::permissions::PermissionPrediction_Likelihood* grant_likelihood_;
  union PredictionTypeUnion {
    constexpr PredictionTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::permissions::PermissionPrediction_NotificationPrediction* notification_prediction_;
    ::permissions::PermissionPrediction_GeolocationPrediction* geolocation_prediction_;
  } prediction_type_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_prediction_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class GeneratePredictionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:permissions.GeneratePredictionsRequest) */ {
 public:
  inline GeneratePredictionsRequest() : GeneratePredictionsRequest(nullptr) {}
  ~GeneratePredictionsRequest() override;
  explicit PROTOBUF_CONSTEXPR GeneratePredictionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeneratePredictionsRequest(const GeneratePredictionsRequest& from);
  GeneratePredictionsRequest(GeneratePredictionsRequest&& from) noexcept
    : GeneratePredictionsRequest() {
    *this = ::std::move(from);
  }

  inline GeneratePredictionsRequest& operator=(const GeneratePredictionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneratePredictionsRequest& operator=(GeneratePredictionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GeneratePredictionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeneratePredictionsRequest* internal_default_instance() {
    return reinterpret_cast<const GeneratePredictionsRequest*>(
               &_GeneratePredictionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GeneratePredictionsRequest& a, GeneratePredictionsRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(GeneratePredictionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeneratePredictionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeneratePredictionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GeneratePredictionsRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GeneratePredictionsRequest& from);
  void MergeFrom(const GeneratePredictionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GeneratePredictionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "permissions.GeneratePredictionsRequest";
  }
  protected:
  explicit GeneratePredictionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionFeaturesFieldNumber = 3,
    kClientFeaturesFieldNumber = 1,
    kSiteFeaturesFieldNumber = 2,
  };
  // repeated .permissions.PermissionFeatures permission_features = 3;
  int permission_features_size() const;
  private:
  int _internal_permission_features_size() const;
  public:
  void clear_permission_features();
  ::permissions::PermissionFeatures* mutable_permission_features(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::permissions::PermissionFeatures >*
      mutable_permission_features();
  private:
  const ::permissions::PermissionFeatures& _internal_permission_features(int index) const;
  ::permissions::PermissionFeatures* _internal_add_permission_features();
  public:
  const ::permissions::PermissionFeatures& permission_features(int index) const;
  ::permissions::PermissionFeatures* add_permission_features();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::permissions::PermissionFeatures >&
      permission_features() const;

  // optional .permissions.ClientFeatures client_features = 1;
  bool has_client_features() const;
  private:
  bool _internal_has_client_features() const;
  public:
  void clear_client_features();
  const ::permissions::ClientFeatures& client_features() const;
  PROTOBUF_NODISCARD ::permissions::ClientFeatures* release_client_features();
  ::permissions::ClientFeatures* mutable_client_features();
  void set_allocated_client_features(::permissions::ClientFeatures* client_features);
  private:
  const ::permissions::ClientFeatures& _internal_client_features() const;
  ::permissions::ClientFeatures* _internal_mutable_client_features();
  public:
  void unsafe_arena_set_allocated_client_features(
      ::permissions::ClientFeatures* client_features);
  ::permissions::ClientFeatures* unsafe_arena_release_client_features();

  // optional .permissions.SiteFeatures site_features = 2;
  bool has_site_features() const;
  private:
  bool _internal_has_site_features() const;
  public:
  void clear_site_features();
  const ::permissions::SiteFeatures& site_features() const;
  PROTOBUF_NODISCARD ::permissions::SiteFeatures* release_site_features();
  ::permissions::SiteFeatures* mutable_site_features();
  void set_allocated_site_features(::permissions::SiteFeatures* site_features);
  private:
  const ::permissions::SiteFeatures& _internal_site_features() const;
  ::permissions::SiteFeatures* _internal_mutable_site_features();
  public:
  void unsafe_arena_set_allocated_site_features(
      ::permissions::SiteFeatures* site_features);
  ::permissions::SiteFeatures* unsafe_arena_release_site_features();

  // @@protoc_insertion_point(class_scope:permissions.GeneratePredictionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::permissions::PermissionFeatures > permission_features_;
  ::permissions::ClientFeatures* client_features_;
  ::permissions::SiteFeatures* site_features_;
  friend struct ::TableStruct_prediction_5fservice_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class GeneratePredictionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:permissions.GeneratePredictionsResponse) */ {
 public:
  inline GeneratePredictionsResponse() : GeneratePredictionsResponse(nullptr) {}
  ~GeneratePredictionsResponse() override;
  explicit PROTOBUF_CONSTEXPR GeneratePredictionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeneratePredictionsResponse(const GeneratePredictionsResponse& from);
  GeneratePredictionsResponse(GeneratePredictionsResponse&& from) noexcept
    : GeneratePredictionsResponse() {
    *this = ::std::move(from);
  }

  inline GeneratePredictionsResponse& operator=(const GeneratePredictionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneratePredictionsResponse& operator=(GeneratePredictionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GeneratePredictionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeneratePredictionsResponse* internal_default_instance() {
    return reinterpret_cast<const GeneratePredictionsResponse*>(
               &_GeneratePredictionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GeneratePredictionsResponse& a, GeneratePredictionsResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(GeneratePredictionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeneratePredictionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeneratePredictionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GeneratePredictionsResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GeneratePredictionsResponse& from);
  void MergeFrom(const GeneratePredictionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GeneratePredictionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "permissions.GeneratePredictionsResponse";
  }
  protected:
  explicit GeneratePredictionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictionFieldNumber = 1,
  };
  // repeated .permissions.PermissionPrediction prediction = 1;
  int prediction_size() const;
  private:
  int _internal_prediction_size() const;
  public:
  void clear_prediction();
  ::permissions::PermissionPrediction* mutable_prediction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::permissions::PermissionPrediction >*
      mutable_prediction();
  private:
  const ::permissions::PermissionPrediction& _internal_prediction(int index) const;
  ::permissions::PermissionPrediction* _internal_add_prediction();
  public:
  const ::permissions::PermissionPrediction& prediction(int index) const;
  ::permissions::PermissionPrediction* add_prediction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::permissions::PermissionPrediction >&
      prediction() const;

  // @@protoc_insertion_point(class_scope:permissions.GeneratePredictionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::permissions::PermissionPrediction > prediction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_5fservice_5fmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SiteFeatures

// -------------------------------------------------------------------

// StatsFeatures

// optional float avg_deny_rate = 1;
inline bool StatsFeatures::_internal_has_avg_deny_rate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StatsFeatures::has_avg_deny_rate() const {
  return _internal_has_avg_deny_rate();
}
inline void StatsFeatures::clear_avg_deny_rate() {
  avg_deny_rate_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float StatsFeatures::_internal_avg_deny_rate() const {
  return avg_deny_rate_;
}
inline float StatsFeatures::avg_deny_rate() const {
  // @@protoc_insertion_point(field_get:permissions.StatsFeatures.avg_deny_rate)
  return _internal_avg_deny_rate();
}
inline void StatsFeatures::_internal_set_avg_deny_rate(float value) {
  _has_bits_[0] |= 0x00000001u;
  avg_deny_rate_ = value;
}
inline void StatsFeatures::set_avg_deny_rate(float value) {
  _internal_set_avg_deny_rate(value);
  // @@protoc_insertion_point(field_set:permissions.StatsFeatures.avg_deny_rate)
}

// optional float avg_grant_rate = 2;
inline bool StatsFeatures::_internal_has_avg_grant_rate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StatsFeatures::has_avg_grant_rate() const {
  return _internal_has_avg_grant_rate();
}
inline void StatsFeatures::clear_avg_grant_rate() {
  avg_grant_rate_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float StatsFeatures::_internal_avg_grant_rate() const {
  return avg_grant_rate_;
}
inline float StatsFeatures::avg_grant_rate() const {
  // @@protoc_insertion_point(field_get:permissions.StatsFeatures.avg_grant_rate)
  return _internal_avg_grant_rate();
}
inline void StatsFeatures::_internal_set_avg_grant_rate(float value) {
  _has_bits_[0] |= 0x00000002u;
  avg_grant_rate_ = value;
}
inline void StatsFeatures::set_avg_grant_rate(float value) {
  _internal_set_avg_grant_rate(value);
  // @@protoc_insertion_point(field_set:permissions.StatsFeatures.avg_grant_rate)
}

// optional float avg_dismiss_rate = 3;
inline bool StatsFeatures::_internal_has_avg_dismiss_rate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StatsFeatures::has_avg_dismiss_rate() const {
  return _internal_has_avg_dismiss_rate();
}
inline void StatsFeatures::clear_avg_dismiss_rate() {
  avg_dismiss_rate_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float StatsFeatures::_internal_avg_dismiss_rate() const {
  return avg_dismiss_rate_;
}
inline float StatsFeatures::avg_dismiss_rate() const {
  // @@protoc_insertion_point(field_get:permissions.StatsFeatures.avg_dismiss_rate)
  return _internal_avg_dismiss_rate();
}
inline void StatsFeatures::_internal_set_avg_dismiss_rate(float value) {
  _has_bits_[0] |= 0x00000004u;
  avg_dismiss_rate_ = value;
}
inline void StatsFeatures::set_avg_dismiss_rate(float value) {
  _internal_set_avg_dismiss_rate(value);
  // @@protoc_insertion_point(field_set:permissions.StatsFeatures.avg_dismiss_rate)
}

// optional float avg_ignore_rate = 4;
inline bool StatsFeatures::_internal_has_avg_ignore_rate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StatsFeatures::has_avg_ignore_rate() const {
  return _internal_has_avg_ignore_rate();
}
inline void StatsFeatures::clear_avg_ignore_rate() {
  avg_ignore_rate_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float StatsFeatures::_internal_avg_ignore_rate() const {
  return avg_ignore_rate_;
}
inline float StatsFeatures::avg_ignore_rate() const {
  // @@protoc_insertion_point(field_get:permissions.StatsFeatures.avg_ignore_rate)
  return _internal_avg_ignore_rate();
}
inline void StatsFeatures::_internal_set_avg_ignore_rate(float value) {
  _has_bits_[0] |= 0x00000008u;
  avg_ignore_rate_ = value;
}
inline void StatsFeatures::set_avg_ignore_rate(float value) {
  _internal_set_avg_ignore_rate(value);
  // @@protoc_insertion_point(field_set:permissions.StatsFeatures.avg_ignore_rate)
}

// optional int32 prompts_count = 5;
inline bool StatsFeatures::_internal_has_prompts_count() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StatsFeatures::has_prompts_count() const {
  return _internal_has_prompts_count();
}
inline void StatsFeatures::clear_prompts_count() {
  prompts_count_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t StatsFeatures::_internal_prompts_count() const {
  return prompts_count_;
}
inline int32_t StatsFeatures::prompts_count() const {
  // @@protoc_insertion_point(field_get:permissions.StatsFeatures.prompts_count)
  return _internal_prompts_count();
}
inline void StatsFeatures::_internal_set_prompts_count(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  prompts_count_ = value;
}
inline void StatsFeatures::set_prompts_count(int32_t value) {
  _internal_set_prompts_count(value);
  // @@protoc_insertion_point(field_set:permissions.StatsFeatures.prompts_count)
}

// -------------------------------------------------------------------

// ClientFeatures

// optional .permissions.StatsFeatures client_stats = 1;
inline bool ClientFeatures::_internal_has_client_stats() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || client_stats_ != nullptr);
  return value;
}
inline bool ClientFeatures::has_client_stats() const {
  return _internal_has_client_stats();
}
inline void ClientFeatures::clear_client_stats() {
  if (client_stats_ != nullptr) client_stats_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::permissions::StatsFeatures& ClientFeatures::_internal_client_stats() const {
  const ::permissions::StatsFeatures* p = client_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::permissions::StatsFeatures&>(
      ::permissions::_StatsFeatures_default_instance_);
}
inline const ::permissions::StatsFeatures& ClientFeatures::client_stats() const {
  // @@protoc_insertion_point(field_get:permissions.ClientFeatures.client_stats)
  return _internal_client_stats();
}
inline void ClientFeatures::unsafe_arena_set_allocated_client_stats(
    ::permissions::StatsFeatures* client_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_stats_);
  }
  client_stats_ = client_stats;
  if (client_stats) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:permissions.ClientFeatures.client_stats)
}
inline ::permissions::StatsFeatures* ClientFeatures::release_client_stats() {
  _has_bits_[0] &= ~0x00000001u;
  ::permissions::StatsFeatures* temp = client_stats_;
  client_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::permissions::StatsFeatures* ClientFeatures::unsafe_arena_release_client_stats() {
  // @@protoc_insertion_point(field_release:permissions.ClientFeatures.client_stats)
  _has_bits_[0] &= ~0x00000001u;
  ::permissions::StatsFeatures* temp = client_stats_;
  client_stats_ = nullptr;
  return temp;
}
inline ::permissions::StatsFeatures* ClientFeatures::_internal_mutable_client_stats() {
  _has_bits_[0] |= 0x00000001u;
  if (client_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::permissions::StatsFeatures>(GetArenaForAllocation());
    client_stats_ = p;
  }
  return client_stats_;
}
inline ::permissions::StatsFeatures* ClientFeatures::mutable_client_stats() {
  ::permissions::StatsFeatures* _msg = _internal_mutable_client_stats();
  // @@protoc_insertion_point(field_mutable:permissions.ClientFeatures.client_stats)
  return _msg;
}
inline void ClientFeatures::set_allocated_client_stats(::permissions::StatsFeatures* client_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete client_stats_;
  }
  if (client_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(client_stats);
    if (message_arena != submessage_arena) {
      client_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_stats_ = client_stats;
  // @@protoc_insertion_point(field_set_allocated:permissions.ClientFeatures.client_stats)
}

// optional .permissions.ClientFeatures.Platform platform = 2;
inline bool ClientFeatures::_internal_has_platform() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientFeatures::has_platform() const {
  return _internal_has_platform();
}
inline void ClientFeatures::clear_platform() {
  platform_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::permissions::ClientFeatures_Platform ClientFeatures::_internal_platform() const {
  return static_cast< ::permissions::ClientFeatures_Platform >(platform_);
}
inline ::permissions::ClientFeatures_Platform ClientFeatures::platform() const {
  // @@protoc_insertion_point(field_get:permissions.ClientFeatures.platform)
  return _internal_platform();
}
inline void ClientFeatures::_internal_set_platform(::permissions::ClientFeatures_Platform value) {
  assert(::permissions::ClientFeatures_Platform_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  platform_ = value;
}
inline void ClientFeatures::set_platform(::permissions::ClientFeatures_Platform value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:permissions.ClientFeatures.platform)
}

// optional .permissions.ClientFeatures.Gesture gesture = 3;
inline bool ClientFeatures::_internal_has_gesture() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientFeatures::has_gesture() const {
  return _internal_has_gesture();
}
inline void ClientFeatures::clear_gesture() {
  gesture_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::permissions::ClientFeatures_Gesture ClientFeatures::_internal_gesture() const {
  return static_cast< ::permissions::ClientFeatures_Gesture >(gesture_);
}
inline ::permissions::ClientFeatures_Gesture ClientFeatures::gesture() const {
  // @@protoc_insertion_point(field_get:permissions.ClientFeatures.gesture)
  return _internal_gesture();
}
inline void ClientFeatures::_internal_set_gesture(::permissions::ClientFeatures_Gesture value) {
  assert(::permissions::ClientFeatures_Gesture_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  gesture_ = value;
}
inline void ClientFeatures::set_gesture(::permissions::ClientFeatures_Gesture value) {
  _internal_set_gesture(value);
  // @@protoc_insertion_point(field_set:permissions.ClientFeatures.gesture)
}

// optional .permissions.ClientFeatures.GestureEnum gesture_enum = 4;
inline bool ClientFeatures::_internal_has_gesture_enum() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientFeatures::has_gesture_enum() const {
  return _internal_has_gesture_enum();
}
inline void ClientFeatures::clear_gesture_enum() {
  gesture_enum_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::permissions::ClientFeatures_GestureEnum ClientFeatures::_internal_gesture_enum() const {
  return static_cast< ::permissions::ClientFeatures_GestureEnum >(gesture_enum_);
}
inline ::permissions::ClientFeatures_GestureEnum ClientFeatures::gesture_enum() const {
  // @@protoc_insertion_point(field_get:permissions.ClientFeatures.gesture_enum)
  return _internal_gesture_enum();
}
inline void ClientFeatures::_internal_set_gesture_enum(::permissions::ClientFeatures_GestureEnum value) {
  assert(::permissions::ClientFeatures_GestureEnum_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  gesture_enum_ = value;
}
inline void ClientFeatures::set_gesture_enum(::permissions::ClientFeatures_GestureEnum value) {
  _internal_set_gesture_enum(value);
  // @@protoc_insertion_point(field_set:permissions.ClientFeatures.gesture_enum)
}

// optional .permissions.ClientFeatures.PlatformEnum platform_enum = 5;
inline bool ClientFeatures::_internal_has_platform_enum() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientFeatures::has_platform_enum() const {
  return _internal_has_platform_enum();
}
inline void ClientFeatures::clear_platform_enum() {
  platform_enum_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::permissions::ClientFeatures_PlatformEnum ClientFeatures::_internal_platform_enum() const {
  return static_cast< ::permissions::ClientFeatures_PlatformEnum >(platform_enum_);
}
inline ::permissions::ClientFeatures_PlatformEnum ClientFeatures::platform_enum() const {
  // @@protoc_insertion_point(field_get:permissions.ClientFeatures.platform_enum)
  return _internal_platform_enum();
}
inline void ClientFeatures::_internal_set_platform_enum(::permissions::ClientFeatures_PlatformEnum value) {
  assert(::permissions::ClientFeatures_PlatformEnum_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  platform_enum_ = value;
}
inline void ClientFeatures::set_platform_enum(::permissions::ClientFeatures_PlatformEnum value) {
  _internal_set_platform_enum(value);
  // @@protoc_insertion_point(field_set:permissions.ClientFeatures.platform_enum)
}

// -------------------------------------------------------------------

// PermissionFeatures_NotificationPermission

// -------------------------------------------------------------------

// PermissionFeatures_GeolocationPermission

// -------------------------------------------------------------------

// PermissionFeatures

// optional .permissions.StatsFeatures permission_stats = 1;
inline bool PermissionFeatures::_internal_has_permission_stats() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || permission_stats_ != nullptr);
  return value;
}
inline bool PermissionFeatures::has_permission_stats() const {
  return _internal_has_permission_stats();
}
inline void PermissionFeatures::clear_permission_stats() {
  if (permission_stats_ != nullptr) permission_stats_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::permissions::StatsFeatures& PermissionFeatures::_internal_permission_stats() const {
  const ::permissions::StatsFeatures* p = permission_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::permissions::StatsFeatures&>(
      ::permissions::_StatsFeatures_default_instance_);
}
inline const ::permissions::StatsFeatures& PermissionFeatures::permission_stats() const {
  // @@protoc_insertion_point(field_get:permissions.PermissionFeatures.permission_stats)
  return _internal_permission_stats();
}
inline void PermissionFeatures::unsafe_arena_set_allocated_permission_stats(
    ::permissions::StatsFeatures* permission_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(permission_stats_);
  }
  permission_stats_ = permission_stats;
  if (permission_stats) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:permissions.PermissionFeatures.permission_stats)
}
inline ::permissions::StatsFeatures* PermissionFeatures::release_permission_stats() {
  _has_bits_[0] &= ~0x00000001u;
  ::permissions::StatsFeatures* temp = permission_stats_;
  permission_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::permissions::StatsFeatures* PermissionFeatures::unsafe_arena_release_permission_stats() {
  // @@protoc_insertion_point(field_release:permissions.PermissionFeatures.permission_stats)
  _has_bits_[0] &= ~0x00000001u;
  ::permissions::StatsFeatures* temp = permission_stats_;
  permission_stats_ = nullptr;
  return temp;
}
inline ::permissions::StatsFeatures* PermissionFeatures::_internal_mutable_permission_stats() {
  _has_bits_[0] |= 0x00000001u;
  if (permission_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::permissions::StatsFeatures>(GetArenaForAllocation());
    permission_stats_ = p;
  }
  return permission_stats_;
}
inline ::permissions::StatsFeatures* PermissionFeatures::mutable_permission_stats() {
  ::permissions::StatsFeatures* _msg = _internal_mutable_permission_stats();
  // @@protoc_insertion_point(field_mutable:permissions.PermissionFeatures.permission_stats)
  return _msg;
}
inline void PermissionFeatures::set_allocated_permission_stats(::permissions::StatsFeatures* permission_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete permission_stats_;
  }
  if (permission_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(permission_stats);
    if (message_arena != submessage_arena) {
      permission_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, permission_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  permission_stats_ = permission_stats;
  // @@protoc_insertion_point(field_set_allocated:permissions.PermissionFeatures.permission_stats)
}

// .permissions.PermissionFeatures.NotificationPermission notification_permission = 2;
inline bool PermissionFeatures::_internal_has_notification_permission() const {
  return permission_type_case() == kNotificationPermission;
}
inline bool PermissionFeatures::has_notification_permission() const {
  return _internal_has_notification_permission();
}
inline void PermissionFeatures::set_has_notification_permission() {
  _oneof_case_[0] = kNotificationPermission;
}
inline void PermissionFeatures::clear_notification_permission() {
  if (_internal_has_notification_permission()) {
    if (GetArenaForAllocation() == nullptr) {
      delete permission_type_.notification_permission_;
    }
    clear_has_permission_type();
  }
}
inline ::permissions::PermissionFeatures_NotificationPermission* PermissionFeatures::release_notification_permission() {
  // @@protoc_insertion_point(field_release:permissions.PermissionFeatures.notification_permission)
  if (_internal_has_notification_permission()) {
    clear_has_permission_type();
    ::permissions::PermissionFeatures_NotificationPermission* temp = permission_type_.notification_permission_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    permission_type_.notification_permission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::permissions::PermissionFeatures_NotificationPermission& PermissionFeatures::_internal_notification_permission() const {
  return _internal_has_notification_permission()
      ? *permission_type_.notification_permission_
      : reinterpret_cast< ::permissions::PermissionFeatures_NotificationPermission&>(::permissions::_PermissionFeatures_NotificationPermission_default_instance_);
}
inline const ::permissions::PermissionFeatures_NotificationPermission& PermissionFeatures::notification_permission() const {
  // @@protoc_insertion_point(field_get:permissions.PermissionFeatures.notification_permission)
  return _internal_notification_permission();
}
inline ::permissions::PermissionFeatures_NotificationPermission* PermissionFeatures::unsafe_arena_release_notification_permission() {
  // @@protoc_insertion_point(field_unsafe_arena_release:permissions.PermissionFeatures.notification_permission)
  if (_internal_has_notification_permission()) {
    clear_has_permission_type();
    ::permissions::PermissionFeatures_NotificationPermission* temp = permission_type_.notification_permission_;
    permission_type_.notification_permission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PermissionFeatures::unsafe_arena_set_allocated_notification_permission(::permissions::PermissionFeatures_NotificationPermission* notification_permission) {
  clear_permission_type();
  if (notification_permission) {
    set_has_notification_permission();
    permission_type_.notification_permission_ = notification_permission;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:permissions.PermissionFeatures.notification_permission)
}
inline ::permissions::PermissionFeatures_NotificationPermission* PermissionFeatures::_internal_mutable_notification_permission() {
  if (!_internal_has_notification_permission()) {
    clear_permission_type();
    set_has_notification_permission();
    permission_type_.notification_permission_ = CreateMaybeMessage< ::permissions::PermissionFeatures_NotificationPermission >(GetArenaForAllocation());
  }
  return permission_type_.notification_permission_;
}
inline ::permissions::PermissionFeatures_NotificationPermission* PermissionFeatures::mutable_notification_permission() {
  ::permissions::PermissionFeatures_NotificationPermission* _msg = _internal_mutable_notification_permission();
  // @@protoc_insertion_point(field_mutable:permissions.PermissionFeatures.notification_permission)
  return _msg;
}

// .permissions.PermissionFeatures.GeolocationPermission geolocation_permission = 3;
inline bool PermissionFeatures::_internal_has_geolocation_permission() const {
  return permission_type_case() == kGeolocationPermission;
}
inline bool PermissionFeatures::has_geolocation_permission() const {
  return _internal_has_geolocation_permission();
}
inline void PermissionFeatures::set_has_geolocation_permission() {
  _oneof_case_[0] = kGeolocationPermission;
}
inline void PermissionFeatures::clear_geolocation_permission() {
  if (_internal_has_geolocation_permission()) {
    if (GetArenaForAllocation() == nullptr) {
      delete permission_type_.geolocation_permission_;
    }
    clear_has_permission_type();
  }
}
inline ::permissions::PermissionFeatures_GeolocationPermission* PermissionFeatures::release_geolocation_permission() {
  // @@protoc_insertion_point(field_release:permissions.PermissionFeatures.geolocation_permission)
  if (_internal_has_geolocation_permission()) {
    clear_has_permission_type();
    ::permissions::PermissionFeatures_GeolocationPermission* temp = permission_type_.geolocation_permission_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    permission_type_.geolocation_permission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::permissions::PermissionFeatures_GeolocationPermission& PermissionFeatures::_internal_geolocation_permission() const {
  return _internal_has_geolocation_permission()
      ? *permission_type_.geolocation_permission_
      : reinterpret_cast< ::permissions::PermissionFeatures_GeolocationPermission&>(::permissions::_PermissionFeatures_GeolocationPermission_default_instance_);
}
inline const ::permissions::PermissionFeatures_GeolocationPermission& PermissionFeatures::geolocation_permission() const {
  // @@protoc_insertion_point(field_get:permissions.PermissionFeatures.geolocation_permission)
  return _internal_geolocation_permission();
}
inline ::permissions::PermissionFeatures_GeolocationPermission* PermissionFeatures::unsafe_arena_release_geolocation_permission() {
  // @@protoc_insertion_point(field_unsafe_arena_release:permissions.PermissionFeatures.geolocation_permission)
  if (_internal_has_geolocation_permission()) {
    clear_has_permission_type();
    ::permissions::PermissionFeatures_GeolocationPermission* temp = permission_type_.geolocation_permission_;
    permission_type_.geolocation_permission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PermissionFeatures::unsafe_arena_set_allocated_geolocation_permission(::permissions::PermissionFeatures_GeolocationPermission* geolocation_permission) {
  clear_permission_type();
  if (geolocation_permission) {
    set_has_geolocation_permission();
    permission_type_.geolocation_permission_ = geolocation_permission;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:permissions.PermissionFeatures.geolocation_permission)
}
inline ::permissions::PermissionFeatures_GeolocationPermission* PermissionFeatures::_internal_mutable_geolocation_permission() {
  if (!_internal_has_geolocation_permission()) {
    clear_permission_type();
    set_has_geolocation_permission();
    permission_type_.geolocation_permission_ = CreateMaybeMessage< ::permissions::PermissionFeatures_GeolocationPermission >(GetArenaForAllocation());
  }
  return permission_type_.geolocation_permission_;
}
inline ::permissions::PermissionFeatures_GeolocationPermission* PermissionFeatures::mutable_geolocation_permission() {
  ::permissions::PermissionFeatures_GeolocationPermission* _msg = _internal_mutable_geolocation_permission();
  // @@protoc_insertion_point(field_mutable:permissions.PermissionFeatures.geolocation_permission)
  return _msg;
}

inline bool PermissionFeatures::has_permission_type() const {
  return permission_type_case() != PERMISSION_TYPE_NOT_SET;
}
inline void PermissionFeatures::clear_has_permission_type() {
  _oneof_case_[0] = PERMISSION_TYPE_NOT_SET;
}
inline PermissionFeatures::PermissionTypeCase PermissionFeatures::permission_type_case() const {
  return PermissionFeatures::PermissionTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PermissionPrediction_NotificationPrediction

// -------------------------------------------------------------------

// PermissionPrediction_GeolocationPrediction

// -------------------------------------------------------------------

// PermissionPrediction_Likelihood

// optional .permissions.PermissionPrediction.Likelihood.DiscretizedLikelihood discretized_likelihood = 1;
inline bool PermissionPrediction_Likelihood::_internal_has_discretized_likelihood() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PermissionPrediction_Likelihood::has_discretized_likelihood() const {
  return _internal_has_discretized_likelihood();
}
inline void PermissionPrediction_Likelihood::clear_discretized_likelihood() {
  discretized_likelihood_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::permissions::PermissionPrediction_Likelihood_DiscretizedLikelihood PermissionPrediction_Likelihood::_internal_discretized_likelihood() const {
  return static_cast< ::permissions::PermissionPrediction_Likelihood_DiscretizedLikelihood >(discretized_likelihood_);
}
inline ::permissions::PermissionPrediction_Likelihood_DiscretizedLikelihood PermissionPrediction_Likelihood::discretized_likelihood() const {
  // @@protoc_insertion_point(field_get:permissions.PermissionPrediction.Likelihood.discretized_likelihood)
  return _internal_discretized_likelihood();
}
inline void PermissionPrediction_Likelihood::_internal_set_discretized_likelihood(::permissions::PermissionPrediction_Likelihood_DiscretizedLikelihood value) {
  assert(::permissions::PermissionPrediction_Likelihood_DiscretizedLikelihood_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  discretized_likelihood_ = value;
}
inline void PermissionPrediction_Likelihood::set_discretized_likelihood(::permissions::PermissionPrediction_Likelihood_DiscretizedLikelihood value) {
  _internal_set_discretized_likelihood(value);
  // @@protoc_insertion_point(field_set:permissions.PermissionPrediction.Likelihood.discretized_likelihood)
}

// -------------------------------------------------------------------

// PermissionPrediction

// .permissions.PermissionPrediction.NotificationPrediction notification_prediction = 1;
inline bool PermissionPrediction::_internal_has_notification_prediction() const {
  return prediction_type_case() == kNotificationPrediction;
}
inline bool PermissionPrediction::has_notification_prediction() const {
  return _internal_has_notification_prediction();
}
inline void PermissionPrediction::set_has_notification_prediction() {
  _oneof_case_[0] = kNotificationPrediction;
}
inline void PermissionPrediction::clear_notification_prediction() {
  if (_internal_has_notification_prediction()) {
    if (GetArenaForAllocation() == nullptr) {
      delete prediction_type_.notification_prediction_;
    }
    clear_has_prediction_type();
  }
}
inline ::permissions::PermissionPrediction_NotificationPrediction* PermissionPrediction::release_notification_prediction() {
  // @@protoc_insertion_point(field_release:permissions.PermissionPrediction.notification_prediction)
  if (_internal_has_notification_prediction()) {
    clear_has_prediction_type();
    ::permissions::PermissionPrediction_NotificationPrediction* temp = prediction_type_.notification_prediction_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    prediction_type_.notification_prediction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::permissions::PermissionPrediction_NotificationPrediction& PermissionPrediction::_internal_notification_prediction() const {
  return _internal_has_notification_prediction()
      ? *prediction_type_.notification_prediction_
      : reinterpret_cast< ::permissions::PermissionPrediction_NotificationPrediction&>(::permissions::_PermissionPrediction_NotificationPrediction_default_instance_);
}
inline const ::permissions::PermissionPrediction_NotificationPrediction& PermissionPrediction::notification_prediction() const {
  // @@protoc_insertion_point(field_get:permissions.PermissionPrediction.notification_prediction)
  return _internal_notification_prediction();
}
inline ::permissions::PermissionPrediction_NotificationPrediction* PermissionPrediction::unsafe_arena_release_notification_prediction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:permissions.PermissionPrediction.notification_prediction)
  if (_internal_has_notification_prediction()) {
    clear_has_prediction_type();
    ::permissions::PermissionPrediction_NotificationPrediction* temp = prediction_type_.notification_prediction_;
    prediction_type_.notification_prediction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PermissionPrediction::unsafe_arena_set_allocated_notification_prediction(::permissions::PermissionPrediction_NotificationPrediction* notification_prediction) {
  clear_prediction_type();
  if (notification_prediction) {
    set_has_notification_prediction();
    prediction_type_.notification_prediction_ = notification_prediction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:permissions.PermissionPrediction.notification_prediction)
}
inline ::permissions::PermissionPrediction_NotificationPrediction* PermissionPrediction::_internal_mutable_notification_prediction() {
  if (!_internal_has_notification_prediction()) {
    clear_prediction_type();
    set_has_notification_prediction();
    prediction_type_.notification_prediction_ = CreateMaybeMessage< ::permissions::PermissionPrediction_NotificationPrediction >(GetArenaForAllocation());
  }
  return prediction_type_.notification_prediction_;
}
inline ::permissions::PermissionPrediction_NotificationPrediction* PermissionPrediction::mutable_notification_prediction() {
  ::permissions::PermissionPrediction_NotificationPrediction* _msg = _internal_mutable_notification_prediction();
  // @@protoc_insertion_point(field_mutable:permissions.PermissionPrediction.notification_prediction)
  return _msg;
}

// .permissions.PermissionPrediction.GeolocationPrediction geolocation_prediction = 3;
inline bool PermissionPrediction::_internal_has_geolocation_prediction() const {
  return prediction_type_case() == kGeolocationPrediction;
}
inline bool PermissionPrediction::has_geolocation_prediction() const {
  return _internal_has_geolocation_prediction();
}
inline void PermissionPrediction::set_has_geolocation_prediction() {
  _oneof_case_[0] = kGeolocationPrediction;
}
inline void PermissionPrediction::clear_geolocation_prediction() {
  if (_internal_has_geolocation_prediction()) {
    if (GetArenaForAllocation() == nullptr) {
      delete prediction_type_.geolocation_prediction_;
    }
    clear_has_prediction_type();
  }
}
inline ::permissions::PermissionPrediction_GeolocationPrediction* PermissionPrediction::release_geolocation_prediction() {
  // @@protoc_insertion_point(field_release:permissions.PermissionPrediction.geolocation_prediction)
  if (_internal_has_geolocation_prediction()) {
    clear_has_prediction_type();
    ::permissions::PermissionPrediction_GeolocationPrediction* temp = prediction_type_.geolocation_prediction_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    prediction_type_.geolocation_prediction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::permissions::PermissionPrediction_GeolocationPrediction& PermissionPrediction::_internal_geolocation_prediction() const {
  return _internal_has_geolocation_prediction()
      ? *prediction_type_.geolocation_prediction_
      : reinterpret_cast< ::permissions::PermissionPrediction_GeolocationPrediction&>(::permissions::_PermissionPrediction_GeolocationPrediction_default_instance_);
}
inline const ::permissions::PermissionPrediction_GeolocationPrediction& PermissionPrediction::geolocation_prediction() const {
  // @@protoc_insertion_point(field_get:permissions.PermissionPrediction.geolocation_prediction)
  return _internal_geolocation_prediction();
}
inline ::permissions::PermissionPrediction_GeolocationPrediction* PermissionPrediction::unsafe_arena_release_geolocation_prediction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:permissions.PermissionPrediction.geolocation_prediction)
  if (_internal_has_geolocation_prediction()) {
    clear_has_prediction_type();
    ::permissions::PermissionPrediction_GeolocationPrediction* temp = prediction_type_.geolocation_prediction_;
    prediction_type_.geolocation_prediction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PermissionPrediction::unsafe_arena_set_allocated_geolocation_prediction(::permissions::PermissionPrediction_GeolocationPrediction* geolocation_prediction) {
  clear_prediction_type();
  if (geolocation_prediction) {
    set_has_geolocation_prediction();
    prediction_type_.geolocation_prediction_ = geolocation_prediction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:permissions.PermissionPrediction.geolocation_prediction)
}
inline ::permissions::PermissionPrediction_GeolocationPrediction* PermissionPrediction::_internal_mutable_geolocation_prediction() {
  if (!_internal_has_geolocation_prediction()) {
    clear_prediction_type();
    set_has_geolocation_prediction();
    prediction_type_.geolocation_prediction_ = CreateMaybeMessage< ::permissions::PermissionPrediction_GeolocationPrediction >(GetArenaForAllocation());
  }
  return prediction_type_.geolocation_prediction_;
}
inline ::permissions::PermissionPrediction_GeolocationPrediction* PermissionPrediction::mutable_geolocation_prediction() {
  ::permissions::PermissionPrediction_GeolocationPrediction* _msg = _internal_mutable_geolocation_prediction();
  // @@protoc_insertion_point(field_mutable:permissions.PermissionPrediction.geolocation_prediction)
  return _msg;
}

// optional .permissions.PermissionPrediction.Likelihood grant_likelihood = 2;
inline bool PermissionPrediction::_internal_has_grant_likelihood() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || grant_likelihood_ != nullptr);
  return value;
}
inline bool PermissionPrediction::has_grant_likelihood() const {
  return _internal_has_grant_likelihood();
}
inline void PermissionPrediction::clear_grant_likelihood() {
  if (grant_likelihood_ != nullptr) grant_likelihood_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::permissions::PermissionPrediction_Likelihood& PermissionPrediction::_internal_grant_likelihood() const {
  const ::permissions::PermissionPrediction_Likelihood* p = grant_likelihood_;
  return p != nullptr ? *p : reinterpret_cast<const ::permissions::PermissionPrediction_Likelihood&>(
      ::permissions::_PermissionPrediction_Likelihood_default_instance_);
}
inline const ::permissions::PermissionPrediction_Likelihood& PermissionPrediction::grant_likelihood() const {
  // @@protoc_insertion_point(field_get:permissions.PermissionPrediction.grant_likelihood)
  return _internal_grant_likelihood();
}
inline void PermissionPrediction::unsafe_arena_set_allocated_grant_likelihood(
    ::permissions::PermissionPrediction_Likelihood* grant_likelihood) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grant_likelihood_);
  }
  grant_likelihood_ = grant_likelihood;
  if (grant_likelihood) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:permissions.PermissionPrediction.grant_likelihood)
}
inline ::permissions::PermissionPrediction_Likelihood* PermissionPrediction::release_grant_likelihood() {
  _has_bits_[0] &= ~0x00000001u;
  ::permissions::PermissionPrediction_Likelihood* temp = grant_likelihood_;
  grant_likelihood_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::permissions::PermissionPrediction_Likelihood* PermissionPrediction::unsafe_arena_release_grant_likelihood() {
  // @@protoc_insertion_point(field_release:permissions.PermissionPrediction.grant_likelihood)
  _has_bits_[0] &= ~0x00000001u;
  ::permissions::PermissionPrediction_Likelihood* temp = grant_likelihood_;
  grant_likelihood_ = nullptr;
  return temp;
}
inline ::permissions::PermissionPrediction_Likelihood* PermissionPrediction::_internal_mutable_grant_likelihood() {
  _has_bits_[0] |= 0x00000001u;
  if (grant_likelihood_ == nullptr) {
    auto* p = CreateMaybeMessage<::permissions::PermissionPrediction_Likelihood>(GetArenaForAllocation());
    grant_likelihood_ = p;
  }
  return grant_likelihood_;
}
inline ::permissions::PermissionPrediction_Likelihood* PermissionPrediction::mutable_grant_likelihood() {
  ::permissions::PermissionPrediction_Likelihood* _msg = _internal_mutable_grant_likelihood();
  // @@protoc_insertion_point(field_mutable:permissions.PermissionPrediction.grant_likelihood)
  return _msg;
}
inline void PermissionPrediction::set_allocated_grant_likelihood(::permissions::PermissionPrediction_Likelihood* grant_likelihood) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete grant_likelihood_;
  }
  if (grant_likelihood) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(grant_likelihood);
    if (message_arena != submessage_arena) {
      grant_likelihood = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grant_likelihood, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  grant_likelihood_ = grant_likelihood;
  // @@protoc_insertion_point(field_set_allocated:permissions.PermissionPrediction.grant_likelihood)
}

inline bool PermissionPrediction::has_prediction_type() const {
  return prediction_type_case() != PREDICTION_TYPE_NOT_SET;
}
inline void PermissionPrediction::clear_has_prediction_type() {
  _oneof_case_[0] = PREDICTION_TYPE_NOT_SET;
}
inline PermissionPrediction::PredictionTypeCase PermissionPrediction::prediction_type_case() const {
  return PermissionPrediction::PredictionTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GeneratePredictionsRequest

// optional .permissions.ClientFeatures client_features = 1;
inline bool GeneratePredictionsRequest::_internal_has_client_features() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || client_features_ != nullptr);
  return value;
}
inline bool GeneratePredictionsRequest::has_client_features() const {
  return _internal_has_client_features();
}
inline void GeneratePredictionsRequest::clear_client_features() {
  if (client_features_ != nullptr) client_features_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::permissions::ClientFeatures& GeneratePredictionsRequest::_internal_client_features() const {
  const ::permissions::ClientFeatures* p = client_features_;
  return p != nullptr ? *p : reinterpret_cast<const ::permissions::ClientFeatures&>(
      ::permissions::_ClientFeatures_default_instance_);
}
inline const ::permissions::ClientFeatures& GeneratePredictionsRequest::client_features() const {
  // @@protoc_insertion_point(field_get:permissions.GeneratePredictionsRequest.client_features)
  return _internal_client_features();
}
inline void GeneratePredictionsRequest::unsafe_arena_set_allocated_client_features(
    ::permissions::ClientFeatures* client_features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_features_);
  }
  client_features_ = client_features;
  if (client_features) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:permissions.GeneratePredictionsRequest.client_features)
}
inline ::permissions::ClientFeatures* GeneratePredictionsRequest::release_client_features() {
  _has_bits_[0] &= ~0x00000001u;
  ::permissions::ClientFeatures* temp = client_features_;
  client_features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::permissions::ClientFeatures* GeneratePredictionsRequest::unsafe_arena_release_client_features() {
  // @@protoc_insertion_point(field_release:permissions.GeneratePredictionsRequest.client_features)
  _has_bits_[0] &= ~0x00000001u;
  ::permissions::ClientFeatures* temp = client_features_;
  client_features_ = nullptr;
  return temp;
}
inline ::permissions::ClientFeatures* GeneratePredictionsRequest::_internal_mutable_client_features() {
  _has_bits_[0] |= 0x00000001u;
  if (client_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::permissions::ClientFeatures>(GetArenaForAllocation());
    client_features_ = p;
  }
  return client_features_;
}
inline ::permissions::ClientFeatures* GeneratePredictionsRequest::mutable_client_features() {
  ::permissions::ClientFeatures* _msg = _internal_mutable_client_features();
  // @@protoc_insertion_point(field_mutable:permissions.GeneratePredictionsRequest.client_features)
  return _msg;
}
inline void GeneratePredictionsRequest::set_allocated_client_features(::permissions::ClientFeatures* client_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete client_features_;
  }
  if (client_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(client_features);
    if (message_arena != submessage_arena) {
      client_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_features, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_features_ = client_features;
  // @@protoc_insertion_point(field_set_allocated:permissions.GeneratePredictionsRequest.client_features)
}

// optional .permissions.SiteFeatures site_features = 2;
inline bool GeneratePredictionsRequest::_internal_has_site_features() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || site_features_ != nullptr);
  return value;
}
inline bool GeneratePredictionsRequest::has_site_features() const {
  return _internal_has_site_features();
}
inline void GeneratePredictionsRequest::clear_site_features() {
  if (site_features_ != nullptr) site_features_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::permissions::SiteFeatures& GeneratePredictionsRequest::_internal_site_features() const {
  const ::permissions::SiteFeatures* p = site_features_;
  return p != nullptr ? *p : reinterpret_cast<const ::permissions::SiteFeatures&>(
      ::permissions::_SiteFeatures_default_instance_);
}
inline const ::permissions::SiteFeatures& GeneratePredictionsRequest::site_features() const {
  // @@protoc_insertion_point(field_get:permissions.GeneratePredictionsRequest.site_features)
  return _internal_site_features();
}
inline void GeneratePredictionsRequest::unsafe_arena_set_allocated_site_features(
    ::permissions::SiteFeatures* site_features) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(site_features_);
  }
  site_features_ = site_features;
  if (site_features) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:permissions.GeneratePredictionsRequest.site_features)
}
inline ::permissions::SiteFeatures* GeneratePredictionsRequest::release_site_features() {
  _has_bits_[0] &= ~0x00000002u;
  ::permissions::SiteFeatures* temp = site_features_;
  site_features_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::permissions::SiteFeatures* GeneratePredictionsRequest::unsafe_arena_release_site_features() {
  // @@protoc_insertion_point(field_release:permissions.GeneratePredictionsRequest.site_features)
  _has_bits_[0] &= ~0x00000002u;
  ::permissions::SiteFeatures* temp = site_features_;
  site_features_ = nullptr;
  return temp;
}
inline ::permissions::SiteFeatures* GeneratePredictionsRequest::_internal_mutable_site_features() {
  _has_bits_[0] |= 0x00000002u;
  if (site_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::permissions::SiteFeatures>(GetArenaForAllocation());
    site_features_ = p;
  }
  return site_features_;
}
inline ::permissions::SiteFeatures* GeneratePredictionsRequest::mutable_site_features() {
  ::permissions::SiteFeatures* _msg = _internal_mutable_site_features();
  // @@protoc_insertion_point(field_mutable:permissions.GeneratePredictionsRequest.site_features)
  return _msg;
}
inline void GeneratePredictionsRequest::set_allocated_site_features(::permissions::SiteFeatures* site_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete site_features_;
  }
  if (site_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(site_features);
    if (message_arena != submessage_arena) {
      site_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site_features, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  site_features_ = site_features;
  // @@protoc_insertion_point(field_set_allocated:permissions.GeneratePredictionsRequest.site_features)
}

// repeated .permissions.PermissionFeatures permission_features = 3;
inline int GeneratePredictionsRequest::_internal_permission_features_size() const {
  return permission_features_.size();
}
inline int GeneratePredictionsRequest::permission_features_size() const {
  return _internal_permission_features_size();
}
inline void GeneratePredictionsRequest::clear_permission_features() {
  permission_features_.Clear();
}
inline ::permissions::PermissionFeatures* GeneratePredictionsRequest::mutable_permission_features(int index) {
  // @@protoc_insertion_point(field_mutable:permissions.GeneratePredictionsRequest.permission_features)
  return permission_features_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::permissions::PermissionFeatures >*
GeneratePredictionsRequest::mutable_permission_features() {
  // @@protoc_insertion_point(field_mutable_list:permissions.GeneratePredictionsRequest.permission_features)
  return &permission_features_;
}
inline const ::permissions::PermissionFeatures& GeneratePredictionsRequest::_internal_permission_features(int index) const {
  return permission_features_.Get(index);
}
inline const ::permissions::PermissionFeatures& GeneratePredictionsRequest::permission_features(int index) const {
  // @@protoc_insertion_point(field_get:permissions.GeneratePredictionsRequest.permission_features)
  return _internal_permission_features(index);
}
inline ::permissions::PermissionFeatures* GeneratePredictionsRequest::_internal_add_permission_features() {
  return permission_features_.Add();
}
inline ::permissions::PermissionFeatures* GeneratePredictionsRequest::add_permission_features() {
  ::permissions::PermissionFeatures* _add = _internal_add_permission_features();
  // @@protoc_insertion_point(field_add:permissions.GeneratePredictionsRequest.permission_features)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::permissions::PermissionFeatures >&
GeneratePredictionsRequest::permission_features() const {
  // @@protoc_insertion_point(field_list:permissions.GeneratePredictionsRequest.permission_features)
  return permission_features_;
}

// -------------------------------------------------------------------

// GeneratePredictionsResponse

// repeated .permissions.PermissionPrediction prediction = 1;
inline int GeneratePredictionsResponse::_internal_prediction_size() const {
  return prediction_.size();
}
inline int GeneratePredictionsResponse::prediction_size() const {
  return _internal_prediction_size();
}
inline void GeneratePredictionsResponse::clear_prediction() {
  prediction_.Clear();
}
inline ::permissions::PermissionPrediction* GeneratePredictionsResponse::mutable_prediction(int index) {
  // @@protoc_insertion_point(field_mutable:permissions.GeneratePredictionsResponse.prediction)
  return prediction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::permissions::PermissionPrediction >*
GeneratePredictionsResponse::mutable_prediction() {
  // @@protoc_insertion_point(field_mutable_list:permissions.GeneratePredictionsResponse.prediction)
  return &prediction_;
}
inline const ::permissions::PermissionPrediction& GeneratePredictionsResponse::_internal_prediction(int index) const {
  return prediction_.Get(index);
}
inline const ::permissions::PermissionPrediction& GeneratePredictionsResponse::prediction(int index) const {
  // @@protoc_insertion_point(field_get:permissions.GeneratePredictionsResponse.prediction)
  return _internal_prediction(index);
}
inline ::permissions::PermissionPrediction* GeneratePredictionsResponse::_internal_add_prediction() {
  return prediction_.Add();
}
inline ::permissions::PermissionPrediction* GeneratePredictionsResponse::add_prediction() {
  ::permissions::PermissionPrediction* _add = _internal_add_prediction();
  // @@protoc_insertion_point(field_add:permissions.GeneratePredictionsResponse.prediction)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::permissions::PermissionPrediction >&
GeneratePredictionsResponse::prediction() const {
  // @@protoc_insertion_point(field_list:permissions.GeneratePredictionsResponse.prediction)
  return prediction_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace permissions

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::permissions::ClientFeatures_Platform> : ::std::true_type {};
template <> struct is_proto_enum< ::permissions::ClientFeatures_Gesture> : ::std::true_type {};
template <> struct is_proto_enum< ::permissions::ClientFeatures_GestureEnum> : ::std::true_type {};
template <> struct is_proto_enum< ::permissions::ClientFeatures_PlatformEnum> : ::std::true_type {};
template <> struct is_proto_enum< ::permissions::PermissionPrediction_Likelihood_DiscretizedLikelihood> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_prediction_5fservice_5fmessages_2eproto
