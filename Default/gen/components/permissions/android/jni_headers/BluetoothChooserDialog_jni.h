// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/permissions/BluetoothChooserDialog

#ifndef org_chromium_components_permissions_BluetoothChooserDialog_JNI
#define org_chromium_components_permissions_BluetoothChooserDialog_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_permissions_BluetoothChooserDialog[];
const char kClassPath_org_chromium_components_permissions_BluetoothChooserDialog[] =
    "org/chromium/components/permissions/BluetoothChooserDialog";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_permissions_BluetoothChooserDialog_clazz(nullptr);
#ifndef org_chromium_components_permissions_BluetoothChooserDialog_clazz_defined
#define org_chromium_components_permissions_BluetoothChooserDialog_clazz_defined
inline jclass org_chromium_components_permissions_BluetoothChooserDialog_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_permissions_BluetoothChooserDialog,
      &g_org_chromium_components_permissions_BluetoothChooserDialog_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace permissions {

JNI_GENERATOR_EXPORT void Java_J_N_Mv9CbWE_1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBluetoothChooserAndroid,
    jint eventType,
    jstring deviceId) {
  BluetoothChooserAndroid* native =
      reinterpret_cast<BluetoothChooserAndroid*>(nativeBluetoothChooserAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnDialogFinished");
  return native->OnDialogFinished(env, eventType, base::android::JavaParamRef<jstring>(env,
      deviceId));
}

JNI_GENERATOR_EXPORT void Java_J_N_MsAog9yr(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBluetoothChooserAndroid) {
  BluetoothChooserAndroid* native =
      reinterpret_cast<BluetoothChooserAndroid*>(nativeBluetoothChooserAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "RestartSearch");
  return native->RestartSearch(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MNZ4441F(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBluetoothChooserAndroid) {
  BluetoothChooserAndroid* native =
      reinterpret_cast<BluetoothChooserAndroid*>(nativeBluetoothChooserAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ShowBluetoothOverviewLink");
  return native->ShowBluetoothOverviewLink(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_Myj_0002417aV(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBluetoothChooserAndroid) {
  BluetoothChooserAndroid* native =
      reinterpret_cast<BluetoothChooserAndroid*>(nativeBluetoothChooserAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ShowBluetoothAdapterOffLink");
  return native->ShowBluetoothAdapterOffLink(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_M7w2qGR3(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeBluetoothChooserAndroid) {
  BluetoothChooserAndroid* native =
      reinterpret_cast<BluetoothChooserAndroid*>(nativeBluetoothChooserAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ShowNeedLocationPermissionLink");
  return native->ShowNeedLocationPermissionLink(env);
}


static std::atomic<jmethodID>
    g_org_chromium_components_permissions_BluetoothChooserDialog_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_BluetoothChooserDialog_create(JNIEnv* env,
    const base::android::JavaRef<jobject>& windowAndroid,
    const base::android::JavaRef<jstring>& origin,
    JniIntWrapper securityLevel,
    const base::android::JavaRef<jobject>& delegate,
    jlong nativeBluetoothChooserDialogPtr) {
  jclass clazz = org_chromium_components_permissions_BluetoothChooserDialog_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_permissions_BluetoothChooserDialog_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
"(Lorg/chromium/ui/base/WindowAndroid;Ljava/lang/String;ILorg/chromium/components/permissions/BluetoothChooserAndroidDelegate;J)Lorg/chromium/components/permissions/BluetoothChooserDialog;",
          &g_org_chromium_components_permissions_BluetoothChooserDialog_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, windowAndroid.obj(), origin.obj(), as_jint(securityLevel),
              delegate.obj(), nativeBluetoothChooserDialogPtr);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_permissions_BluetoothChooserDialog_addOrUpdateDevice(nullptr);
static void Java_BluetoothChooserDialog_addOrUpdateDevice(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& deviceId,
    const base::android::JavaRef<jstring>& deviceName,
    jboolean isGATTConnected,
    JniIntWrapper signalStrengthLevel) {
  jclass clazz = org_chromium_components_permissions_BluetoothChooserDialog_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_permissions_BluetoothChooserDialog_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "addOrUpdateDevice",
          "(Ljava/lang/String;Ljava/lang/String;ZI)V",
          &g_org_chromium_components_permissions_BluetoothChooserDialog_addOrUpdateDevice);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, deviceId.obj(), deviceName.obj(), isGATTConnected,
              as_jint(signalStrengthLevel));
}

static std::atomic<jmethodID>
    g_org_chromium_components_permissions_BluetoothChooserDialog_closeDialog(nullptr);
static void Java_BluetoothChooserDialog_closeDialog(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_permissions_BluetoothChooserDialog_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_permissions_BluetoothChooserDialog_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "closeDialog",
          "()V",
          &g_org_chromium_components_permissions_BluetoothChooserDialog_closeDialog);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_components_permissions_BluetoothChooserDialog_notifyAdapterTurnedOff(nullptr);
static void Java_BluetoothChooserDialog_notifyAdapterTurnedOff(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_permissions_BluetoothChooserDialog_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_permissions_BluetoothChooserDialog_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "notifyAdapterTurnedOff",
          "()V",
          &g_org_chromium_components_permissions_BluetoothChooserDialog_notifyAdapterTurnedOff);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_components_permissions_BluetoothChooserDialog_notifyAdapterTurnedOn(nullptr);
static void Java_BluetoothChooserDialog_notifyAdapterTurnedOn(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_permissions_BluetoothChooserDialog_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_permissions_BluetoothChooserDialog_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "notifyAdapterTurnedOn",
          "()V",
          &g_org_chromium_components_permissions_BluetoothChooserDialog_notifyAdapterTurnedOn);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_components_permissions_BluetoothChooserDialog_notifyDiscoveryState(nullptr);
static void Java_BluetoothChooserDialog_notifyDiscoveryState(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper discoveryState) {
  jclass clazz = org_chromium_components_permissions_BluetoothChooserDialog_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_permissions_BluetoothChooserDialog_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "notifyDiscoveryState",
          "(I)V",
          &g_org_chromium_components_permissions_BluetoothChooserDialog_notifyDiscoveryState);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(discoveryState));
}

}  // namespace permissions

#endif  // org_chromium_components_permissions_BluetoothChooserDialog_JNI
