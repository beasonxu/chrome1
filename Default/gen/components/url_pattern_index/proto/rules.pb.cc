// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rules.proto

#include "rules.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace url_pattern_index {
namespace proto {
PROTOBUF_CONSTEXPR DomainListItem::DomainListItem(
    ::_pbi::ConstantInitialized)
  : domain_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , exclude_(false){}
struct DomainListItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DomainListItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DomainListItemDefaultTypeInternal() {}
  union {
    DomainListItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DomainListItemDefaultTypeInternal _DomainListItem_default_instance_;
PROTOBUF_CONSTEXPR UrlRule::UrlRule(
    ::_pbi::ConstantInitialized)
  : initiator_domains_()
  , request_domains_()
  , url_pattern_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , semantics_(0)

  , source_type_(0)

  , element_types_(0)
  , activation_types_(0)
  , url_pattern_type_(0)

  , anchor_left_(0)

  , anchor_right_(0)

  , match_case_(false){}
struct UrlRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UrlRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UrlRuleDefaultTypeInternal() {}
  union {
    UrlRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UrlRuleDefaultTypeInternal _UrlRule_default_instance_;
PROTOBUF_CONSTEXPR CssRule::CssRule(
    ::_pbi::ConstantInitialized)
  : domains_()
  , css_selector_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , semantics_(0)
{}
struct CssRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CssRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CssRuleDefaultTypeInternal() {}
  union {
    CssRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CssRuleDefaultTypeInternal _CssRule_default_instance_;
PROTOBUF_CONSTEXPR Comment::Comment(
    ::_pbi::ConstantInitialized)
  : text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CommentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommentDefaultTypeInternal() {}
  union {
    Comment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommentDefaultTypeInternal _Comment_default_instance_;
PROTOBUF_CONSTEXPR FilteringRules::FilteringRules(
    ::_pbi::ConstantInitialized)
  : url_rules_()
  , css_rules_(){}
struct FilteringRulesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FilteringRulesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FilteringRulesDefaultTypeInternal() {}
  union {
    FilteringRules _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FilteringRulesDefaultTypeInternal _FilteringRules_default_instance_;
}  // namespace proto
}  // namespace url_pattern_index
namespace url_pattern_index {
namespace proto {
bool RuleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RuleType_strings[4] = {};

static const char RuleType_names[] =
  "RULE_TYPE_COMMENT"
  "RULE_TYPE_CSS"
  "RULE_TYPE_UNSPECIFIED"
  "RULE_TYPE_URL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RuleType_entries[] = {
  { {RuleType_names + 0, 17}, 1 },
  { {RuleType_names + 17, 13}, 3 },
  { {RuleType_names + 30, 21}, 0 },
  { {RuleType_names + 51, 13}, 2 },
};

static const int RuleType_entries_by_number[] = {
  2, // 0 -> RULE_TYPE_UNSPECIFIED
  0, // 1 -> RULE_TYPE_COMMENT
  3, // 2 -> RULE_TYPE_URL
  1, // 3 -> RULE_TYPE_CSS
};

const std::string& RuleType_Name(
    RuleType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RuleType_entries,
          RuleType_entries_by_number,
          4, RuleType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RuleType_entries,
      RuleType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RuleType_strings[idx].get();
}
bool RuleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RuleType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RuleType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<RuleType>(int_value);
  }
  return success;
}
bool UrlPatternType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> UrlPatternType_strings[4] = {};

static const char UrlPatternType_names[] =
  "URL_PATTERN_TYPE_REGEXP"
  "URL_PATTERN_TYPE_SUBSTRING"
  "URL_PATTERN_TYPE_UNSPECIFIED"
  "URL_PATTERN_TYPE_WILDCARDED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry UrlPatternType_entries[] = {
  { {UrlPatternType_names + 0, 23}, 3 },
  { {UrlPatternType_names + 23, 26}, 1 },
  { {UrlPatternType_names + 49, 28}, 0 },
  { {UrlPatternType_names + 77, 27}, 2 },
};

static const int UrlPatternType_entries_by_number[] = {
  2, // 0 -> URL_PATTERN_TYPE_UNSPECIFIED
  1, // 1 -> URL_PATTERN_TYPE_SUBSTRING
  3, // 2 -> URL_PATTERN_TYPE_WILDCARDED
  0, // 3 -> URL_PATTERN_TYPE_REGEXP
};

const std::string& UrlPatternType_Name(
    UrlPatternType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          UrlPatternType_entries,
          UrlPatternType_entries_by_number,
          4, UrlPatternType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      UrlPatternType_entries,
      UrlPatternType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     UrlPatternType_strings[idx].get();
}
bool UrlPatternType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UrlPatternType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      UrlPatternType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<UrlPatternType>(int_value);
  }
  return success;
}
bool AnchorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AnchorType_strings[4] = {};

static const char AnchorType_names[] =
  "ANCHOR_TYPE_BOUNDARY"
  "ANCHOR_TYPE_NONE"
  "ANCHOR_TYPE_SUBDOMAIN"
  "ANCHOR_TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AnchorType_entries[] = {
  { {AnchorType_names + 0, 20}, 2 },
  { {AnchorType_names + 20, 16}, 1 },
  { {AnchorType_names + 36, 21}, 3 },
  { {AnchorType_names + 57, 23}, 0 },
};

static const int AnchorType_entries_by_number[] = {
  3, // 0 -> ANCHOR_TYPE_UNSPECIFIED
  1, // 1 -> ANCHOR_TYPE_NONE
  0, // 2 -> ANCHOR_TYPE_BOUNDARY
  2, // 3 -> ANCHOR_TYPE_SUBDOMAIN
};

const std::string& AnchorType_Name(
    AnchorType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AnchorType_entries,
          AnchorType_entries_by_number,
          4, AnchorType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AnchorType_entries,
      AnchorType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AnchorType_strings[idx].get();
}
bool AnchorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AnchorType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AnchorType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<AnchorType>(int_value);
  }
  return success;
}
bool ElementType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32767:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ElementType_strings[17] = {};

static const char ElementType_names[] =
  "ELEMENT_TYPE_ALL"
  "ELEMENT_TYPE_FONT"
  "ELEMENT_TYPE_IMAGE"
  "ELEMENT_TYPE_MAX"
  "ELEMENT_TYPE_MEDIA"
  "ELEMENT_TYPE_OBJECT"
  "ELEMENT_TYPE_OBJECT_SUBREQUEST"
  "ELEMENT_TYPE_OTHER"
  "ELEMENT_TYPE_PING"
  "ELEMENT_TYPE_POPUP"
  "ELEMENT_TYPE_SCRIPT"
  "ELEMENT_TYPE_STYLESHEET"
  "ELEMENT_TYPE_SUBDOCUMENT"
  "ELEMENT_TYPE_UNSPECIFIED"
  "ELEMENT_TYPE_WEBBUNDLE"
  "ELEMENT_TYPE_WEBSOCKET"
  "ELEMENT_TYPE_WEBTRANSPORT"
  "ELEMENT_TYPE_XMLHTTPREQUEST";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ElementType_entries[] = {
  { {ElementType_names + 0, 16}, 32767 },
  { {ElementType_names + 16, 17}, 1024 },
  { {ElementType_names + 33, 18}, 4 },
  { {ElementType_names + 51, 16}, 16384 },
  { {ElementType_names + 67, 18}, 512 },
  { {ElementType_names + 85, 19}, 16 },
  { {ElementType_names + 104, 30}, 64 },
  { {ElementType_names + 134, 18}, 1 },
  { {ElementType_names + 152, 17}, 256 },
  { {ElementType_names + 169, 18}, 2048 },
  { {ElementType_names + 187, 19}, 2 },
  { {ElementType_names + 206, 23}, 8 },
  { {ElementType_names + 229, 24}, 128 },
  { {ElementType_names + 253, 24}, 0 },
  { {ElementType_names + 277, 22}, 16384 },
  { {ElementType_names + 299, 22}, 4096 },
  { {ElementType_names + 321, 25}, 8192 },
  { {ElementType_names + 346, 27}, 32 },
};

static const int ElementType_entries_by_number[] = {
  13, // 0 -> ELEMENT_TYPE_UNSPECIFIED
  7, // 1 -> ELEMENT_TYPE_OTHER
  10, // 2 -> ELEMENT_TYPE_SCRIPT
  2, // 4 -> ELEMENT_TYPE_IMAGE
  11, // 8 -> ELEMENT_TYPE_STYLESHEET
  5, // 16 -> ELEMENT_TYPE_OBJECT
  17, // 32 -> ELEMENT_TYPE_XMLHTTPREQUEST
  6, // 64 -> ELEMENT_TYPE_OBJECT_SUBREQUEST
  12, // 128 -> ELEMENT_TYPE_SUBDOCUMENT
  8, // 256 -> ELEMENT_TYPE_PING
  4, // 512 -> ELEMENT_TYPE_MEDIA
  1, // 1024 -> ELEMENT_TYPE_FONT
  9, // 2048 -> ELEMENT_TYPE_POPUP
  15, // 4096 -> ELEMENT_TYPE_WEBSOCKET
  16, // 8192 -> ELEMENT_TYPE_WEBTRANSPORT
  14, // 16384 -> ELEMENT_TYPE_WEBBUNDLE
  0, // 32767 -> ELEMENT_TYPE_ALL
};

const std::string& ElementType_Name(
    ElementType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ElementType_entries,
          ElementType_entries_by_number,
          17, ElementType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ElementType_entries,
      ElementType_entries_by_number,
      17, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ElementType_strings[idx].get();
}
bool ElementType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ElementType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ElementType_entries, 18, name, &int_value);
  if (success) {
    *value = static_cast<ElementType>(int_value);
  }
  return success;
}
bool ActivationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 15:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ActivationType_strings[6] = {};

static const char ActivationType_names[] =
  "ACTIVATION_TYPE_ALL"
  "ACTIVATION_TYPE_DOCUMENT"
  "ACTIVATION_TYPE_ELEMHIDE"
  "ACTIVATION_TYPE_GENERICBLOCK"
  "ACTIVATION_TYPE_GENERICHIDE"
  "ACTIVATION_TYPE_MAX"
  "ACTIVATION_TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ActivationType_entries[] = {
  { {ActivationType_names + 0, 19}, 15 },
  { {ActivationType_names + 19, 24}, 1 },
  { {ActivationType_names + 43, 24}, 2 },
  { {ActivationType_names + 67, 28}, 8 },
  { {ActivationType_names + 95, 27}, 4 },
  { {ActivationType_names + 122, 19}, 8 },
  { {ActivationType_names + 141, 27}, 0 },
};

static const int ActivationType_entries_by_number[] = {
  6, // 0 -> ACTIVATION_TYPE_UNSPECIFIED
  1, // 1 -> ACTIVATION_TYPE_DOCUMENT
  2, // 2 -> ACTIVATION_TYPE_ELEMHIDE
  4, // 4 -> ACTIVATION_TYPE_GENERICHIDE
  3, // 8 -> ACTIVATION_TYPE_GENERICBLOCK
  0, // 15 -> ACTIVATION_TYPE_ALL
};

const std::string& ActivationType_Name(
    ActivationType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ActivationType_entries,
          ActivationType_entries_by_number,
          6, ActivationType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ActivationType_entries,
      ActivationType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ActivationType_strings[idx].get();
}
bool ActivationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActivationType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ActivationType_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<ActivationType>(int_value);
  }
  return success;
}
bool RuleSemantics_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RuleSemantics_strings[3] = {};

static const char RuleSemantics_names[] =
  "RULE_SEMANTICS_ALLOWLIST"
  "RULE_SEMANTICS_BLOCKLIST"
  "RULE_SEMANTICS_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RuleSemantics_entries[] = {
  { {RuleSemantics_names + 0, 24}, 2 },
  { {RuleSemantics_names + 24, 24}, 1 },
  { {RuleSemantics_names + 48, 26}, 0 },
};

static const int RuleSemantics_entries_by_number[] = {
  2, // 0 -> RULE_SEMANTICS_UNSPECIFIED
  1, // 1 -> RULE_SEMANTICS_BLOCKLIST
  0, // 2 -> RULE_SEMANTICS_ALLOWLIST
};

const std::string& RuleSemantics_Name(
    RuleSemantics value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RuleSemantics_entries,
          RuleSemantics_entries_by_number,
          3, RuleSemantics_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RuleSemantics_entries,
      RuleSemantics_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RuleSemantics_strings[idx].get();
}
bool RuleSemantics_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RuleSemantics* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RuleSemantics_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<RuleSemantics>(int_value);
  }
  return success;
}
bool SourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SourceType_strings[4] = {};

static const char SourceType_names[] =
  "SOURCE_TYPE_ANY"
  "SOURCE_TYPE_FIRST_PARTY"
  "SOURCE_TYPE_THIRD_PARTY"
  "SOURCE_TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SourceType_entries[] = {
  { {SourceType_names + 0, 15}, 1 },
  { {SourceType_names + 15, 23}, 3 },
  { {SourceType_names + 38, 23}, 2 },
  { {SourceType_names + 61, 23}, 0 },
};

static const int SourceType_entries_by_number[] = {
  3, // 0 -> SOURCE_TYPE_UNSPECIFIED
  0, // 1 -> SOURCE_TYPE_ANY
  2, // 2 -> SOURCE_TYPE_THIRD_PARTY
  1, // 3 -> SOURCE_TYPE_FIRST_PARTY
};

const std::string& SourceType_Name(
    SourceType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SourceType_entries,
          SourceType_entries_by_number,
          4, SourceType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SourceType_entries,
      SourceType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SourceType_strings[idx].get();
}
bool SourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SourceType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SourceType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<SourceType>(int_value);
  }
  return success;
}

// ===================================================================

class DomainListItem::_Internal {
 public:
  using HasBits = decltype(std::declval<DomainListItem>()._has_bits_);
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_exclude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DomainListItem::DomainListItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:url_pattern_index.proto.DomainListItem)
}
DomainListItem::DomainListItem(const DomainListItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_domain()) {
    domain_.Set(from._internal_domain(), 
      GetArenaForAllocation());
  }
  exclude_ = from.exclude_;
  // @@protoc_insertion_point(copy_constructor:url_pattern_index.proto.DomainListItem)
}

inline void DomainListItem::SharedCtor() {
domain_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  domain_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
exclude_ = false;
}

DomainListItem::~DomainListItem() {
  // @@protoc_insertion_point(destructor:url_pattern_index.proto.DomainListItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DomainListItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  domain_.Destroy();
}

void DomainListItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DomainListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:url_pattern_index.proto.DomainListItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    domain_.ClearNonDefaultToEmpty();
  }
  exclude_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DomainListItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool exclude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_exclude(&has_bits);
          exclude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DomainListItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:url_pattern_index.proto.DomainListItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string domain = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_domain(), target);
  }

  // optional bool exclude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_exclude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:url_pattern_index.proto.DomainListItem)
  return target;
}

size_t DomainListItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:url_pattern_index.proto.DomainListItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string domain = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_domain());
    }

    // optional bool exclude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DomainListItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DomainListItem*>(
      &from));
}

void DomainListItem::MergeFrom(const DomainListItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:url_pattern_index.proto.DomainListItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000002u) {
      exclude_ = from.exclude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DomainListItem::CopyFrom(const DomainListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:url_pattern_index.proto.DomainListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomainListItem::IsInitialized() const {
  return true;
}

void DomainListItem::InternalSwap(DomainListItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &domain_, lhs_arena,
      &other->domain_, rhs_arena
  );
  swap(exclude_, other->exclude_);
}

std::string DomainListItem::GetTypeName() const {
  return "url_pattern_index.proto.DomainListItem";
}


// ===================================================================

class UrlRule::_Internal {
 public:
  using HasBits = decltype(std::declval<UrlRule>()._has_bits_);
  static void set_has_semantics(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_element_types(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_activation_types(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_url_pattern_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_anchor_left(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_anchor_right(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_match_case(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_url_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UrlRule::UrlRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  initiator_domains_(arena),
  request_domains_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:url_pattern_index.proto.UrlRule)
}
UrlRule::UrlRule(const UrlRule& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      initiator_domains_(from.initiator_domains_),
      request_domains_(from.request_domains_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url_pattern()) {
    url_pattern_.Set(from._internal_url_pattern(), 
      GetArenaForAllocation());
  }
  ::memcpy(&semantics_, &from.semantics_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_case_) -
    reinterpret_cast<char*>(&semantics_)) + sizeof(match_case_));
  // @@protoc_insertion_point(copy_constructor:url_pattern_index.proto.UrlRule)
}

inline void UrlRule::SharedCtor() {
url_pattern_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_pattern_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&semantics_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&match_case_) -
    reinterpret_cast<char*>(&semantics_)) + sizeof(match_case_));
}

UrlRule::~UrlRule() {
  // @@protoc_insertion_point(destructor:url_pattern_index.proto.UrlRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UrlRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_pattern_.Destroy();
}

void UrlRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UrlRule::Clear() {
// @@protoc_insertion_point(message_clear_start:url_pattern_index.proto.UrlRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  initiator_domains_.Clear();
  request_domains_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_pattern_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&semantics_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&anchor_right_) -
        reinterpret_cast<char*>(&semantics_)) + sizeof(anchor_right_));
  }
  match_case_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UrlRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .url_pattern_index.proto.RuleSemantics semantics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::url_pattern_index::proto::RuleSemantics_IsValid(val))) {
            _internal_set_semantics(static_cast<::url_pattern_index::proto::RuleSemantics>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .url_pattern_index.proto.SourceType source_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::url_pattern_index::proto::SourceType_IsValid(val))) {
            _internal_set_source_type(static_cast<::url_pattern_index::proto::SourceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 element_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_element_types(&has_bits);
          element_types_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 activation_types = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_activation_types(&has_bits);
          activation_types_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .url_pattern_index.proto.DomainListItem initiator_domains = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_initiator_domains(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .url_pattern_index.proto.UrlPatternType url_pattern_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::url_pattern_index::proto::UrlPatternType_IsValid(val))) {
            _internal_set_url_pattern_type(static_cast<::url_pattern_index::proto::UrlPatternType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .url_pattern_index.proto.AnchorType anchor_left = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::url_pattern_index::proto::AnchorType_IsValid(val))) {
            _internal_set_anchor_left(static_cast<::url_pattern_index::proto::AnchorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .url_pattern_index.proto.AnchorType anchor_right = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::url_pattern_index::proto::AnchorType_IsValid(val))) {
            _internal_set_anchor_right(static_cast<::url_pattern_index::proto::AnchorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool match_case = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_match_case(&has_bits);
          match_case_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url_pattern = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_url_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .url_pattern_index.proto.DomainListItem request_domains = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request_domains(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UrlRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:url_pattern_index.proto.UrlRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .url_pattern_index.proto.RuleSemantics semantics = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_semantics(), target);
  }

  // optional .url_pattern_index.proto.SourceType source_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_source_type(), target);
  }

  // optional int32 element_types = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_element_types(), target);
  }

  // optional int32 activation_types = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_activation_types(), target);
  }

  // repeated .url_pattern_index.proto.DomainListItem initiator_domains = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_initiator_domains_size()); i < n; i++) {
    const auto& repfield = this->_internal_initiator_domains(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .url_pattern_index.proto.UrlPatternType url_pattern_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_url_pattern_type(), target);
  }

  // optional .url_pattern_index.proto.AnchorType anchor_left = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_anchor_left(), target);
  }

  // optional .url_pattern_index.proto.AnchorType anchor_right = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_anchor_right(), target);
  }

  // optional bool match_case = 9 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_match_case(), target);
  }

  // optional string url_pattern = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_url_pattern(), target);
  }

  // repeated .url_pattern_index.proto.DomainListItem request_domains = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_request_domains_size()); i < n; i++) {
    const auto& repfield = this->_internal_request_domains(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:url_pattern_index.proto.UrlRule)
  return target;
}

size_t UrlRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:url_pattern_index.proto.UrlRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .url_pattern_index.proto.DomainListItem initiator_domains = 5;
  total_size += 1UL * this->_internal_initiator_domains_size();
  for (const auto& msg : this->initiator_domains_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .url_pattern_index.proto.DomainListItem request_domains = 11;
  total_size += 1UL * this->_internal_request_domains_size();
  for (const auto& msg : this->request_domains_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url_pattern = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_pattern());
    }

    // optional .url_pattern_index.proto.RuleSemantics semantics = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_semantics());
    }

    // optional .url_pattern_index.proto.SourceType source_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_source_type());
    }

    // optional int32 element_types = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_element_types());
    }

    // optional int32 activation_types = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_activation_types());
    }

    // optional .url_pattern_index.proto.UrlPatternType url_pattern_type = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_url_pattern_type());
    }

    // optional .url_pattern_index.proto.AnchorType anchor_left = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_anchor_left());
    }

    // optional .url_pattern_index.proto.AnchorType anchor_right = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_anchor_right());
    }

  }
  // optional bool match_case = 9 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UrlRule::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UrlRule*>(
      &from));
}

void UrlRule::MergeFrom(const UrlRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:url_pattern_index.proto.UrlRule)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  initiator_domains_.MergeFrom(from.initiator_domains_);
  request_domains_.MergeFrom(from.request_domains_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url_pattern(from._internal_url_pattern());
    }
    if (cached_has_bits & 0x00000002u) {
      semantics_ = from.semantics_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_type_ = from.source_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      element_types_ = from.element_types_;
    }
    if (cached_has_bits & 0x00000010u) {
      activation_types_ = from.activation_types_;
    }
    if (cached_has_bits & 0x00000020u) {
      url_pattern_type_ = from.url_pattern_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      anchor_left_ = from.anchor_left_;
    }
    if (cached_has_bits & 0x00000080u) {
      anchor_right_ = from.anchor_right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_match_case(from._internal_match_case());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UrlRule::CopyFrom(const UrlRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:url_pattern_index.proto.UrlRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlRule::IsInitialized() const {
  return true;
}

void UrlRule::InternalSwap(UrlRule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  initiator_domains_.InternalSwap(&other->initiator_domains_);
  request_domains_.InternalSwap(&other->request_domains_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_pattern_, lhs_arena,
      &other->url_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UrlRule, match_case_)
      + sizeof(UrlRule::match_case_)
      - PROTOBUF_FIELD_OFFSET(UrlRule, semantics_)>(
          reinterpret_cast<char*>(&semantics_),
          reinterpret_cast<char*>(&other->semantics_));
}

std::string UrlRule::GetTypeName() const {
  return "url_pattern_index.proto.UrlRule";
}


// ===================================================================

class CssRule::_Internal {
 public:
  using HasBits = decltype(std::declval<CssRule>()._has_bits_);
  static void set_has_semantics(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_css_selector(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CssRule::CssRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  domains_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:url_pattern_index.proto.CssRule)
}
CssRule::CssRule(const CssRule& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      domains_(from.domains_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  css_selector_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    css_selector_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_css_selector()) {
    css_selector_.Set(from._internal_css_selector(), 
      GetArenaForAllocation());
  }
  semantics_ = from.semantics_;
  // @@protoc_insertion_point(copy_constructor:url_pattern_index.proto.CssRule)
}

inline void CssRule::SharedCtor() {
css_selector_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  css_selector_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
semantics_ = 0;
}

CssRule::~CssRule() {
  // @@protoc_insertion_point(destructor:url_pattern_index.proto.CssRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CssRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  css_selector_.Destroy();
}

void CssRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CssRule::Clear() {
// @@protoc_insertion_point(message_clear_start:url_pattern_index.proto.CssRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  domains_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    css_selector_.ClearNonDefaultToEmpty();
  }
  semantics_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CssRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .url_pattern_index.proto.RuleSemantics semantics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::url_pattern_index::proto::RuleSemantics_IsValid(val))) {
            _internal_set_semantics(static_cast<::url_pattern_index::proto::RuleSemantics>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .url_pattern_index.proto.DomainListItem domains = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_domains(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string css_selector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_css_selector();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CssRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:url_pattern_index.proto.CssRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .url_pattern_index.proto.RuleSemantics semantics = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_semantics(), target);
  }

  // repeated .url_pattern_index.proto.DomainListItem domains = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_domains_size()); i < n; i++) {
    const auto& repfield = this->_internal_domains(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string css_selector = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_css_selector(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:url_pattern_index.proto.CssRule)
  return target;
}

size_t CssRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:url_pattern_index.proto.CssRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .url_pattern_index.proto.DomainListItem domains = 2;
  total_size += 1UL * this->_internal_domains_size();
  for (const auto& msg : this->domains_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string css_selector = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_css_selector());
    }

    // optional .url_pattern_index.proto.RuleSemantics semantics = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_semantics());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CssRule::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CssRule*>(
      &from));
}

void CssRule::MergeFrom(const CssRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:url_pattern_index.proto.CssRule)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  domains_.MergeFrom(from.domains_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_css_selector(from._internal_css_selector());
    }
    if (cached_has_bits & 0x00000002u) {
      semantics_ = from.semantics_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CssRule::CopyFrom(const CssRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:url_pattern_index.proto.CssRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CssRule::IsInitialized() const {
  return true;
}

void CssRule::InternalSwap(CssRule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  domains_.InternalSwap(&other->domains_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &css_selector_, lhs_arena,
      &other->css_selector_, rhs_arena
  );
  swap(semantics_, other->semantics_);
}

std::string CssRule::GetTypeName() const {
  return "url_pattern_index.proto.CssRule";
}


// ===================================================================

class Comment::_Internal {
 public:
  using HasBits = decltype(std::declval<Comment>()._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Comment::Comment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:url_pattern_index.proto.Comment)
}
Comment::Comment(const Comment& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    text_.Set(from._internal_text(), 
      GetArenaForAllocation());
  }
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:url_pattern_index.proto.Comment)
}

inline void Comment::SharedCtor() {
text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Comment::~Comment() {
  // @@protoc_insertion_point(destructor:url_pattern_index.proto.Comment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Comment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.Destroy();
  key_.Destroy();
  value_.Destroy();
}

void Comment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Comment::Clear() {
// @@protoc_insertion_point(message_clear_start:url_pattern_index.proto.Comment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Comment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Comment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:url_pattern_index.proto.Comment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // optional string key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // optional string value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:url_pattern_index.proto.Comment)
  return target;
}

size_t Comment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:url_pattern_index.proto.Comment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string text = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional string key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Comment::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Comment*>(
      &from));
}

void Comment::MergeFrom(const Comment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:url_pattern_index.proto.Comment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Comment::CopyFrom(const Comment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:url_pattern_index.proto.Comment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Comment::IsInitialized() const {
  return true;
}

void Comment::InternalSwap(Comment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

std::string Comment::GetTypeName() const {
  return "url_pattern_index.proto.Comment";
}


// ===================================================================

class FilteringRules::_Internal {
 public:
};

FilteringRules::FilteringRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  url_rules_(arena),
  css_rules_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:url_pattern_index.proto.FilteringRules)
}
FilteringRules::FilteringRules(const FilteringRules& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      url_rules_(from.url_rules_),
      css_rules_(from.css_rules_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:url_pattern_index.proto.FilteringRules)
}

inline void FilteringRules::SharedCtor() {
}

FilteringRules::~FilteringRules() {
  // @@protoc_insertion_point(destructor:url_pattern_index.proto.FilteringRules)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FilteringRules::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FilteringRules::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FilteringRules::Clear() {
// @@protoc_insertion_point(message_clear_start:url_pattern_index.proto.FilteringRules)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_rules_.Clear();
  css_rules_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FilteringRules::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .url_pattern_index.proto.UrlRule url_rules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_url_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .url_pattern_index.proto.CssRule css_rules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_css_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FilteringRules::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:url_pattern_index.proto.FilteringRules)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .url_pattern_index.proto.UrlRule url_rules = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_url_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_url_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .url_pattern_index.proto.CssRule css_rules = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_css_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_css_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:url_pattern_index.proto.FilteringRules)
  return target;
}

size_t FilteringRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:url_pattern_index.proto.FilteringRules)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .url_pattern_index.proto.UrlRule url_rules = 1;
  total_size += 1UL * this->_internal_url_rules_size();
  for (const auto& msg : this->url_rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .url_pattern_index.proto.CssRule css_rules = 2;
  total_size += 1UL * this->_internal_css_rules_size();
  for (const auto& msg : this->css_rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilteringRules::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FilteringRules*>(
      &from));
}

void FilteringRules::MergeFrom(const FilteringRules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:url_pattern_index.proto.FilteringRules)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  url_rules_.MergeFrom(from.url_rules_);
  css_rules_.MergeFrom(from.css_rules_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FilteringRules::CopyFrom(const FilteringRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:url_pattern_index.proto.FilteringRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilteringRules::IsInitialized() const {
  return true;
}

void FilteringRules::InternalSwap(FilteringRules* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  url_rules_.InternalSwap(&other->url_rules_);
  css_rules_.InternalSwap(&other->css_rules_);
}

std::string FilteringRules::GetTypeName() const {
  return "url_pattern_index.proto.FilteringRules";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace url_pattern_index
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::url_pattern_index::proto::DomainListItem*
Arena::CreateMaybeMessage< ::url_pattern_index::proto::DomainListItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::url_pattern_index::proto::DomainListItem >(arena);
}
template<> PROTOBUF_NOINLINE ::url_pattern_index::proto::UrlRule*
Arena::CreateMaybeMessage< ::url_pattern_index::proto::UrlRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::url_pattern_index::proto::UrlRule >(arena);
}
template<> PROTOBUF_NOINLINE ::url_pattern_index::proto::CssRule*
Arena::CreateMaybeMessage< ::url_pattern_index::proto::CssRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::url_pattern_index::proto::CssRule >(arena);
}
template<> PROTOBUF_NOINLINE ::url_pattern_index::proto::Comment*
Arena::CreateMaybeMessage< ::url_pattern_index::proto::Comment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::url_pattern_index::proto::Comment >(arena);
}
template<> PROTOBUF_NOINLINE ::url_pattern_index::proto::FilteringRules*
Arena::CreateMaybeMessage< ::url_pattern_index::proto::FilteringRules >(Arena* arena) {
  return Arena::CreateMessageInternal< ::url_pattern_index::proto::FilteringRules >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
