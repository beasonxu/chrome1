// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/signin/base/AccountCapabilities

#ifndef org_chromium_components_signin_base_AccountCapabilities_JNI
#define org_chromium_components_signin_base_AccountCapabilities_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_signin_base_AccountCapabilities[];
const char kClassPath_org_chromium_components_signin_base_AccountCapabilities[] =
    "org/chromium/components/signin/base/AccountCapabilities";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_signin_base_AccountCapabilities_clazz(nullptr);
#ifndef org_chromium_components_signin_base_AccountCapabilities_clazz_defined
#define org_chromium_components_signin_base_AccountCapabilities_clazz_defined
inline jclass org_chromium_components_signin_base_AccountCapabilities_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_signin_base_AccountCapabilities,
      &g_org_chromium_components_signin_base_AccountCapabilities_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace  signin {


static std::atomic<jmethodID>
    g_org_chromium_components_signin_base_AccountCapabilities_Constructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_AccountCapabilities_Constructor(JNIEnv* env,
    const base::android::JavaRef<jobjectArray>& capabilityNames,
    const base::android::JavaRef<jbooleanArray>& capabilityValues) {
  jclass clazz = org_chromium_components_signin_base_AccountCapabilities_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_signin_base_AccountCapabilities_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "<init>",
          "([Ljava/lang/String;[Z)V",
          &g_org_chromium_components_signin_base_AccountCapabilities_Constructor);

  jobject ret =
      env->NewObject(clazz,
          call_context.base.method_id, capabilityNames.obj(), capabilityValues.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_components_signin_base_AccountCapabilities_getCapabilityByName(nullptr);
static jint Java_AccountCapabilities_getCapabilityByName(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& capabilityName) {
  jclass clazz = org_chromium_components_signin_base_AccountCapabilities_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_signin_base_AccountCapabilities_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getCapabilityByName",
          "(Ljava/lang/String;)I",
          &g_org_chromium_components_signin_base_AccountCapabilities_getCapabilityByName);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id, capabilityName.obj());
  return ret;
}

}  // namespace  signin

#endif  // org_chromium_components_signin_base_AccountCapabilities_JNI
