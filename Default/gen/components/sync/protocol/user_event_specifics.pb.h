// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/user_event_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fuser_5fevent_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fuser_5fevent_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/sync/protocol/user_consent_types.pb.h"
#include "components/sync/protocol/gaia_password_reuse.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fuser_5fevent_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fuser_5fevent_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class UserEventSpecifics;
struct UserEventSpecificsDefaultTypeInternal;
extern UserEventSpecificsDefaultTypeInternal _UserEventSpecifics_default_instance_;
class UserEventSpecifics_FlocIdComputed;
struct UserEventSpecifics_FlocIdComputedDefaultTypeInternal;
extern UserEventSpecifics_FlocIdComputedDefaultTypeInternal _UserEventSpecifics_FlocIdComputed_default_instance_;
class UserEventSpecifics_GaiaPasswordCaptured;
struct UserEventSpecifics_GaiaPasswordCapturedDefaultTypeInternal;
extern UserEventSpecifics_GaiaPasswordCapturedDefaultTypeInternal _UserEventSpecifics_GaiaPasswordCaptured_default_instance_;
class UserEventSpecifics_LanguageDetection;
struct UserEventSpecifics_LanguageDetectionDefaultTypeInternal;
extern UserEventSpecifics_LanguageDetectionDefaultTypeInternal _UserEventSpecifics_LanguageDetection_default_instance_;
class UserEventSpecifics_LanguageDetection_Language;
struct UserEventSpecifics_LanguageDetection_LanguageDefaultTypeInternal;
extern UserEventSpecifics_LanguageDetection_LanguageDefaultTypeInternal _UserEventSpecifics_LanguageDetection_Language_default_instance_;
class UserEventSpecifics_Test;
struct UserEventSpecifics_TestDefaultTypeInternal;
extern UserEventSpecifics_TestDefaultTypeInternal _UserEventSpecifics_Test_default_instance_;
class UserEventSpecifics_Translation;
struct UserEventSpecifics_TranslationDefaultTypeInternal;
extern UserEventSpecifics_TranslationDefaultTypeInternal _UserEventSpecifics_Translation_default_instance_;
class UserEventSpecifics_UserConsent;
struct UserEventSpecifics_UserConsentDefaultTypeInternal;
extern UserEventSpecifics_UserConsentDefaultTypeInternal _UserEventSpecifics_UserConsent_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::UserEventSpecifics* Arena::CreateMaybeMessage<::sync_pb::UserEventSpecifics>(Arena*);
template<> ::sync_pb::UserEventSpecifics_FlocIdComputed* Arena::CreateMaybeMessage<::sync_pb::UserEventSpecifics_FlocIdComputed>(Arena*);
template<> ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* Arena::CreateMaybeMessage<::sync_pb::UserEventSpecifics_GaiaPasswordCaptured>(Arena*);
template<> ::sync_pb::UserEventSpecifics_LanguageDetection* Arena::CreateMaybeMessage<::sync_pb::UserEventSpecifics_LanguageDetection>(Arena*);
template<> ::sync_pb::UserEventSpecifics_LanguageDetection_Language* Arena::CreateMaybeMessage<::sync_pb::UserEventSpecifics_LanguageDetection_Language>(Arena*);
template<> ::sync_pb::UserEventSpecifics_Test* Arena::CreateMaybeMessage<::sync_pb::UserEventSpecifics_Test>(Arena*);
template<> ::sync_pb::UserEventSpecifics_Translation* Arena::CreateMaybeMessage<::sync_pb::UserEventSpecifics_Translation>(Arena*);
template<> ::sync_pb::UserEventSpecifics_UserConsent* Arena::CreateMaybeMessage<::sync_pb::UserEventSpecifics_UserConsent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum UserEventSpecifics_Translation_Interaction : int {
  UserEventSpecifics_Translation_Interaction_UNKNOWN = 0,
  UserEventSpecifics_Translation_Interaction_ACCEPT = 1,
  UserEventSpecifics_Translation_Interaction_DECLINE = 2,
  UserEventSpecifics_Translation_Interaction_IGNORED = 3,
  UserEventSpecifics_Translation_Interaction_DISMISSED = 4,
  UserEventSpecifics_Translation_Interaction_MANUAL = 5,
  UserEventSpecifics_Translation_Interaction_TRANSLATION_REVERTED = 6,
  UserEventSpecifics_Translation_Interaction_AUTO_TRANSLATION_BY_PREF = 7,
  UserEventSpecifics_Translation_Interaction_AUTO_TRANSLATION_BY_LINK = 8,
  UserEventSpecifics_Translation_Interaction_INITIALIZATION_ERROR = 9
};
bool UserEventSpecifics_Translation_Interaction_IsValid(int value);
constexpr UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation_Interaction_Interaction_MIN = UserEventSpecifics_Translation_Interaction_UNKNOWN;
constexpr UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation_Interaction_Interaction_MAX = UserEventSpecifics_Translation_Interaction_INITIALIZATION_ERROR;
constexpr int UserEventSpecifics_Translation_Interaction_Interaction_ARRAYSIZE = UserEventSpecifics_Translation_Interaction_Interaction_MAX + 1;

const std::string& UserEventSpecifics_Translation_Interaction_Name(UserEventSpecifics_Translation_Interaction value);
template<typename T>
inline const std::string& UserEventSpecifics_Translation_Interaction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserEventSpecifics_Translation_Interaction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserEventSpecifics_Translation_Interaction_Name.");
  return UserEventSpecifics_Translation_Interaction_Name(static_cast<UserEventSpecifics_Translation_Interaction>(enum_t_value));
}
bool UserEventSpecifics_Translation_Interaction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserEventSpecifics_Translation_Interaction* value);
enum UserEventSpecifics_UserConsent_Feature : int {
  UserEventSpecifics_UserConsent_Feature_FEATURE_UNSPECIFIED = 0,
  UserEventSpecifics_UserConsent_Feature_CHROME_SYNC = 1,
  UserEventSpecifics_UserConsent_Feature_PLAY_STORE = 2,
  UserEventSpecifics_UserConsent_Feature_BACKUP_AND_RESTORE = 3,
  UserEventSpecifics_UserConsent_Feature_GOOGLE_LOCATION_SERVICE = 4,
  UserEventSpecifics_UserConsent_Feature_CHROME_UNIFIED_CONSENT = 5,
  UserEventSpecifics_UserConsent_Feature_ASSISTANT_ACTIVITY_CONTROL = 6
};
bool UserEventSpecifics_UserConsent_Feature_IsValid(int value);
constexpr UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent_Feature_Feature_MIN = UserEventSpecifics_UserConsent_Feature_FEATURE_UNSPECIFIED;
constexpr UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent_Feature_Feature_MAX = UserEventSpecifics_UserConsent_Feature_ASSISTANT_ACTIVITY_CONTROL;
constexpr int UserEventSpecifics_UserConsent_Feature_Feature_ARRAYSIZE = UserEventSpecifics_UserConsent_Feature_Feature_MAX + 1;

const std::string& UserEventSpecifics_UserConsent_Feature_Name(UserEventSpecifics_UserConsent_Feature value);
template<typename T>
inline const std::string& UserEventSpecifics_UserConsent_Feature_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserEventSpecifics_UserConsent_Feature>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserEventSpecifics_UserConsent_Feature_Name.");
  return UserEventSpecifics_UserConsent_Feature_Name(static_cast<UserEventSpecifics_UserConsent_Feature>(enum_t_value));
}
bool UserEventSpecifics_UserConsent_Feature_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserEventSpecifics_UserConsent_Feature* value);
enum UserEventSpecifics_GaiaPasswordCaptured_EventTrigger : int {
  UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_UNSPECIFIED = 0,
  UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_USER_LOGGED_IN = 1,
  UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_EXPIRED_28D_TIMER = 2
};
bool UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_IsValid(int value);
constexpr UserEventSpecifics_GaiaPasswordCaptured_EventTrigger UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_EventTrigger_MIN = UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_UNSPECIFIED;
constexpr UserEventSpecifics_GaiaPasswordCaptured_EventTrigger UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_EventTrigger_MAX = UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_EXPIRED_28D_TIMER;
constexpr int UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_EventTrigger_ARRAYSIZE = UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_EventTrigger_MAX + 1;

const std::string& UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_Name(UserEventSpecifics_GaiaPasswordCaptured_EventTrigger value);
template<typename T>
inline const std::string& UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserEventSpecifics_GaiaPasswordCaptured_EventTrigger>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_Name.");
  return UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_Name(static_cast<UserEventSpecifics_GaiaPasswordCaptured_EventTrigger>(enum_t_value));
}
bool UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserEventSpecifics_GaiaPasswordCaptured_EventTrigger* value);
enum UserEventSpecifics_FlocIdComputed_EventTrigger : int {
  UserEventSpecifics_FlocIdComputed_EventTrigger_UNSPECIFIED = 0,
  UserEventSpecifics_FlocIdComputed_EventTrigger_NEW = 1,
  UserEventSpecifics_FlocIdComputed_EventTrigger_REFRESHED = 2,
  UserEventSpecifics_FlocIdComputed_EventTrigger_HISTORY_DELETE = 3
};
bool UserEventSpecifics_FlocIdComputed_EventTrigger_IsValid(int value);
constexpr UserEventSpecifics_FlocIdComputed_EventTrigger UserEventSpecifics_FlocIdComputed_EventTrigger_EventTrigger_MIN = UserEventSpecifics_FlocIdComputed_EventTrigger_UNSPECIFIED;
constexpr UserEventSpecifics_FlocIdComputed_EventTrigger UserEventSpecifics_FlocIdComputed_EventTrigger_EventTrigger_MAX = UserEventSpecifics_FlocIdComputed_EventTrigger_HISTORY_DELETE;
constexpr int UserEventSpecifics_FlocIdComputed_EventTrigger_EventTrigger_ARRAYSIZE = UserEventSpecifics_FlocIdComputed_EventTrigger_EventTrigger_MAX + 1;

const std::string& UserEventSpecifics_FlocIdComputed_EventTrigger_Name(UserEventSpecifics_FlocIdComputed_EventTrigger value);
template<typename T>
inline const std::string& UserEventSpecifics_FlocIdComputed_EventTrigger_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserEventSpecifics_FlocIdComputed_EventTrigger>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserEventSpecifics_FlocIdComputed_EventTrigger_Name.");
  return UserEventSpecifics_FlocIdComputed_EventTrigger_Name(static_cast<UserEventSpecifics_FlocIdComputed_EventTrigger>(enum_t_value));
}
bool UserEventSpecifics_FlocIdComputed_EventTrigger_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserEventSpecifics_FlocIdComputed_EventTrigger* value);
// ===================================================================

class UserEventSpecifics_Test final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.Test) */ {
 public:
  inline UserEventSpecifics_Test() : UserEventSpecifics_Test(nullptr) {}
  ~UserEventSpecifics_Test() override;
  explicit PROTOBUF_CONSTEXPR UserEventSpecifics_Test(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserEventSpecifics_Test(const UserEventSpecifics_Test& from);
  UserEventSpecifics_Test(UserEventSpecifics_Test&& from) noexcept
    : UserEventSpecifics_Test() {
    *this = ::std::move(from);
  }

  inline UserEventSpecifics_Test& operator=(const UserEventSpecifics_Test& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEventSpecifics_Test& operator=(UserEventSpecifics_Test&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UserEventSpecifics_Test& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserEventSpecifics_Test* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_Test*>(
               &_UserEventSpecifics_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserEventSpecifics_Test& a, UserEventSpecifics_Test& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(UserEventSpecifics_Test* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserEventSpecifics_Test* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserEventSpecifics_Test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserEventSpecifics_Test>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UserEventSpecifics_Test& from);
  void MergeFrom(const UserEventSpecifics_Test& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_Test* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserEventSpecifics.Test";
  }
  protected:
  explicit UserEventSpecifics_Test(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.Test)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fuser_5fevent_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class UserEventSpecifics_LanguageDetection_Language final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.LanguageDetection.Language) */ {
 public:
  inline UserEventSpecifics_LanguageDetection_Language() : UserEventSpecifics_LanguageDetection_Language(nullptr) {}
  ~UserEventSpecifics_LanguageDetection_Language() override;
  explicit PROTOBUF_CONSTEXPR UserEventSpecifics_LanguageDetection_Language(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserEventSpecifics_LanguageDetection_Language(const UserEventSpecifics_LanguageDetection_Language& from);
  UserEventSpecifics_LanguageDetection_Language(UserEventSpecifics_LanguageDetection_Language&& from) noexcept
    : UserEventSpecifics_LanguageDetection_Language() {
    *this = ::std::move(from);
  }

  inline UserEventSpecifics_LanguageDetection_Language& operator=(const UserEventSpecifics_LanguageDetection_Language& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEventSpecifics_LanguageDetection_Language& operator=(UserEventSpecifics_LanguageDetection_Language&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UserEventSpecifics_LanguageDetection_Language& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserEventSpecifics_LanguageDetection_Language* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_LanguageDetection_Language*>(
               &_UserEventSpecifics_LanguageDetection_Language_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserEventSpecifics_LanguageDetection_Language& a, UserEventSpecifics_LanguageDetection_Language& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(UserEventSpecifics_LanguageDetection_Language* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserEventSpecifics_LanguageDetection_Language* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserEventSpecifics_LanguageDetection_Language* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserEventSpecifics_LanguageDetection_Language>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UserEventSpecifics_LanguageDetection_Language& from);
  void MergeFrom(const UserEventSpecifics_LanguageDetection_Language& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_LanguageDetection_Language* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserEventSpecifics.LanguageDetection.Language";
  }
  protected:
  explicit UserEventSpecifics_LanguageDetection_Language(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageCodeFieldNumber = 1,
    kIsReliableFieldNumber = 2,
  };
  // optional string language_code = 1;
  bool has_language_code() const;
  private:
  bool _internal_has_language_code() const;
  public:
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // optional bool is_reliable = 2;
  bool has_is_reliable() const;
  private:
  bool _internal_has_is_reliable() const;
  public:
  void clear_is_reliable();
  bool is_reliable() const;
  void set_is_reliable(bool value);
  private:
  bool _internal_is_reliable() const;
  void _internal_set_is_reliable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.LanguageDetection.Language)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  bool is_reliable_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fuser_5fevent_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class UserEventSpecifics_LanguageDetection final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.LanguageDetection) */ {
 public:
  inline UserEventSpecifics_LanguageDetection() : UserEventSpecifics_LanguageDetection(nullptr) {}
  ~UserEventSpecifics_LanguageDetection() override;
  explicit PROTOBUF_CONSTEXPR UserEventSpecifics_LanguageDetection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserEventSpecifics_LanguageDetection(const UserEventSpecifics_LanguageDetection& from);
  UserEventSpecifics_LanguageDetection(UserEventSpecifics_LanguageDetection&& from) noexcept
    : UserEventSpecifics_LanguageDetection() {
    *this = ::std::move(from);
  }

  inline UserEventSpecifics_LanguageDetection& operator=(const UserEventSpecifics_LanguageDetection& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEventSpecifics_LanguageDetection& operator=(UserEventSpecifics_LanguageDetection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UserEventSpecifics_LanguageDetection& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserEventSpecifics_LanguageDetection* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_LanguageDetection*>(
               &_UserEventSpecifics_LanguageDetection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserEventSpecifics_LanguageDetection& a, UserEventSpecifics_LanguageDetection& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(UserEventSpecifics_LanguageDetection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserEventSpecifics_LanguageDetection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserEventSpecifics_LanguageDetection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserEventSpecifics_LanguageDetection>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UserEventSpecifics_LanguageDetection& from);
  void MergeFrom(const UserEventSpecifics_LanguageDetection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_LanguageDetection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserEventSpecifics.LanguageDetection";
  }
  protected:
  explicit UserEventSpecifics_LanguageDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UserEventSpecifics_LanguageDetection_Language Language;

  // accessors -------------------------------------------------------

  enum : int {
    kDetectedLanguagesFieldNumber = 1,
    kAdoptedLanguageCodeFieldNumber = 2,
  };
  // repeated .sync_pb.UserEventSpecifics.LanguageDetection.Language detected_languages = 1;
  int detected_languages_size() const;
  private:
  int _internal_detected_languages_size() const;
  public:
  void clear_detected_languages();
  ::sync_pb::UserEventSpecifics_LanguageDetection_Language* mutable_detected_languages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::UserEventSpecifics_LanguageDetection_Language >*
      mutable_detected_languages();
  private:
  const ::sync_pb::UserEventSpecifics_LanguageDetection_Language& _internal_detected_languages(int index) const;
  ::sync_pb::UserEventSpecifics_LanguageDetection_Language* _internal_add_detected_languages();
  public:
  const ::sync_pb::UserEventSpecifics_LanguageDetection_Language& detected_languages(int index) const;
  ::sync_pb::UserEventSpecifics_LanguageDetection_Language* add_detected_languages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::UserEventSpecifics_LanguageDetection_Language >&
      detected_languages() const;

  // optional string adopted_language_code = 2;
  bool has_adopted_language_code() const;
  private:
  bool _internal_has_adopted_language_code() const;
  public:
  void clear_adopted_language_code();
  const std::string& adopted_language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_adopted_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_adopted_language_code();
  PROTOBUF_NODISCARD std::string* release_adopted_language_code();
  void set_allocated_adopted_language_code(std::string* adopted_language_code);
  private:
  const std::string& _internal_adopted_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_adopted_language_code(const std::string& value);
  std::string* _internal_mutable_adopted_language_code();
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.LanguageDetection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::UserEventSpecifics_LanguageDetection_Language > detected_languages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adopted_language_code_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fuser_5fevent_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class UserEventSpecifics_Translation final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.Translation) */ {
 public:
  inline UserEventSpecifics_Translation() : UserEventSpecifics_Translation(nullptr) {}
  ~UserEventSpecifics_Translation() override;
  explicit PROTOBUF_CONSTEXPR UserEventSpecifics_Translation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserEventSpecifics_Translation(const UserEventSpecifics_Translation& from);
  UserEventSpecifics_Translation(UserEventSpecifics_Translation&& from) noexcept
    : UserEventSpecifics_Translation() {
    *this = ::std::move(from);
  }

  inline UserEventSpecifics_Translation& operator=(const UserEventSpecifics_Translation& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEventSpecifics_Translation& operator=(UserEventSpecifics_Translation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UserEventSpecifics_Translation& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserEventSpecifics_Translation* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_Translation*>(
               &_UserEventSpecifics_Translation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserEventSpecifics_Translation& a, UserEventSpecifics_Translation& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(UserEventSpecifics_Translation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserEventSpecifics_Translation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserEventSpecifics_Translation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserEventSpecifics_Translation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UserEventSpecifics_Translation& from);
  void MergeFrom(const UserEventSpecifics_Translation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_Translation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserEventSpecifics.Translation";
  }
  protected:
  explicit UserEventSpecifics_Translation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UserEventSpecifics_Translation_Interaction Interaction;
  static constexpr Interaction UNKNOWN =
    UserEventSpecifics_Translation_Interaction_UNKNOWN;
  static constexpr Interaction ACCEPT =
    UserEventSpecifics_Translation_Interaction_ACCEPT;
  static constexpr Interaction DECLINE =
    UserEventSpecifics_Translation_Interaction_DECLINE;
  static constexpr Interaction IGNORED =
    UserEventSpecifics_Translation_Interaction_IGNORED;
  static constexpr Interaction DISMISSED =
    UserEventSpecifics_Translation_Interaction_DISMISSED;
  static constexpr Interaction MANUAL =
    UserEventSpecifics_Translation_Interaction_MANUAL;
  static constexpr Interaction TRANSLATION_REVERTED =
    UserEventSpecifics_Translation_Interaction_TRANSLATION_REVERTED;
  static constexpr Interaction AUTO_TRANSLATION_BY_PREF =
    UserEventSpecifics_Translation_Interaction_AUTO_TRANSLATION_BY_PREF;
  static constexpr Interaction AUTO_TRANSLATION_BY_LINK =
    UserEventSpecifics_Translation_Interaction_AUTO_TRANSLATION_BY_LINK;
  static constexpr Interaction INITIALIZATION_ERROR =
    UserEventSpecifics_Translation_Interaction_INITIALIZATION_ERROR;
  static inline bool Interaction_IsValid(int value) {
    return UserEventSpecifics_Translation_Interaction_IsValid(value);
  }
  static constexpr Interaction Interaction_MIN =
    UserEventSpecifics_Translation_Interaction_Interaction_MIN;
  static constexpr Interaction Interaction_MAX =
    UserEventSpecifics_Translation_Interaction_Interaction_MAX;
  static constexpr int Interaction_ARRAYSIZE =
    UserEventSpecifics_Translation_Interaction_Interaction_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Interaction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Interaction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Interaction_Name.");
    return UserEventSpecifics_Translation_Interaction_Name(enum_t_value);
  }
  static inline bool Interaction_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Interaction* value) {
    return UserEventSpecifics_Translation_Interaction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFromLanguageCodeFieldNumber = 1,
    kToLanguageCodeFieldNumber = 2,
    kInteractionFieldNumber = 3,
  };
  // optional string from_language_code = 1;
  bool has_from_language_code() const;
  private:
  bool _internal_has_from_language_code() const;
  public:
  void clear_from_language_code();
  const std::string& from_language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_language_code();
  PROTOBUF_NODISCARD std::string* release_from_language_code();
  void set_allocated_from_language_code(std::string* from_language_code);
  private:
  const std::string& _internal_from_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_language_code(const std::string& value);
  std::string* _internal_mutable_from_language_code();
  public:

  // optional string to_language_code = 2;
  bool has_to_language_code() const;
  private:
  bool _internal_has_to_language_code() const;
  public:
  void clear_to_language_code();
  const std::string& to_language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_language_code();
  PROTOBUF_NODISCARD std::string* release_to_language_code();
  void set_allocated_to_language_code(std::string* to_language_code);
  private:
  const std::string& _internal_to_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_language_code(const std::string& value);
  std::string* _internal_mutable_to_language_code();
  public:

  // optional .sync_pb.UserEventSpecifics.Translation.Interaction interaction = 3;
  bool has_interaction() const;
  private:
  bool _internal_has_interaction() const;
  public:
  void clear_interaction();
  ::sync_pb::UserEventSpecifics_Translation_Interaction interaction() const;
  void set_interaction(::sync_pb::UserEventSpecifics_Translation_Interaction value);
  private:
  ::sync_pb::UserEventSpecifics_Translation_Interaction _internal_interaction() const;
  void _internal_set_interaction(::sync_pb::UserEventSpecifics_Translation_Interaction value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.Translation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_language_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_language_code_;
  int interaction_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fuser_5fevent_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class UserEventSpecifics_UserConsent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.UserConsent) */ {
 public:
  inline UserEventSpecifics_UserConsent() : UserEventSpecifics_UserConsent(nullptr) {}
  ~UserEventSpecifics_UserConsent() override;
  explicit PROTOBUF_CONSTEXPR UserEventSpecifics_UserConsent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserEventSpecifics_UserConsent(const UserEventSpecifics_UserConsent& from);
  UserEventSpecifics_UserConsent(UserEventSpecifics_UserConsent&& from) noexcept
    : UserEventSpecifics_UserConsent() {
    *this = ::std::move(from);
  }

  inline UserEventSpecifics_UserConsent& operator=(const UserEventSpecifics_UserConsent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEventSpecifics_UserConsent& operator=(UserEventSpecifics_UserConsent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UserEventSpecifics_UserConsent& default_instance() {
    return *internal_default_instance();
  }
  enum ConsentCase {
    kSyncConsent = 7,
    kArcBackupAndRestoreConsent = 8,
    kArcLocationServiceConsent = 9,
    kArcPlayTermsOfServiceConsent = 10,
    kUnifiedConsent = 13,
    CONSENT_NOT_SET = 0,
  };

  static inline const UserEventSpecifics_UserConsent* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_UserConsent*>(
               &_UserEventSpecifics_UserConsent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserEventSpecifics_UserConsent& a, UserEventSpecifics_UserConsent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(UserEventSpecifics_UserConsent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserEventSpecifics_UserConsent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserEventSpecifics_UserConsent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserEventSpecifics_UserConsent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UserEventSpecifics_UserConsent& from);
  void MergeFrom(const UserEventSpecifics_UserConsent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_UserConsent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserEventSpecifics.UserConsent";
  }
  protected:
  explicit UserEventSpecifics_UserConsent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UserEventSpecifics_UserConsent_Feature Feature;
  static constexpr Feature FEATURE_UNSPECIFIED =
    UserEventSpecifics_UserConsent_Feature_FEATURE_UNSPECIFIED;
  static constexpr Feature CHROME_SYNC =
    UserEventSpecifics_UserConsent_Feature_CHROME_SYNC;
  static constexpr Feature PLAY_STORE =
    UserEventSpecifics_UserConsent_Feature_PLAY_STORE;
  static constexpr Feature BACKUP_AND_RESTORE =
    UserEventSpecifics_UserConsent_Feature_BACKUP_AND_RESTORE;
  static constexpr Feature GOOGLE_LOCATION_SERVICE =
    UserEventSpecifics_UserConsent_Feature_GOOGLE_LOCATION_SERVICE;
  static constexpr Feature CHROME_UNIFIED_CONSENT =
    UserEventSpecifics_UserConsent_Feature_CHROME_UNIFIED_CONSENT;
  static constexpr Feature ASSISTANT_ACTIVITY_CONTROL =
    UserEventSpecifics_UserConsent_Feature_ASSISTANT_ACTIVITY_CONTROL;
  static inline bool Feature_IsValid(int value) {
    return UserEventSpecifics_UserConsent_Feature_IsValid(value);
  }
  static constexpr Feature Feature_MIN =
    UserEventSpecifics_UserConsent_Feature_Feature_MIN;
  static constexpr Feature Feature_MAX =
    UserEventSpecifics_UserConsent_Feature_Feature_MAX;
  static constexpr int Feature_ARRAYSIZE =
    UserEventSpecifics_UserConsent_Feature_Feature_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Feature_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Feature>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Feature_Name.");
    return UserEventSpecifics_UserConsent_Feature_Name(enum_t_value);
  }
  static inline bool Feature_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Feature* value) {
    return UserEventSpecifics_UserConsent_Feature_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionGrdIdsFieldNumber = 2,
    kLocaleFieldNumber = 4,
    kFeatureFieldNumber = 1,
    kConfirmationGrdIdFieldNumber = 3,
    kClientConsentTimeUsecFieldNumber = 12,
    kStatusFieldNumber = 5,
    kSyncConsentFieldNumber = 7,
    kArcBackupAndRestoreConsentFieldNumber = 8,
    kArcLocationServiceConsentFieldNumber = 9,
    kArcPlayTermsOfServiceConsentFieldNumber = 10,
    kUnifiedConsentFieldNumber = 13,
  };
  // repeated int32 description_grd_ids = 2 [deprecated = true];
  PROTOBUF_DEPRECATED int description_grd_ids_size() const;
  private:
  int _internal_description_grd_ids_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_description_grd_ids();
  private:
  int32_t _internal_description_grd_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_description_grd_ids() const;
  void _internal_add_description_grd_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_description_grd_ids();
  public:
  PROTOBUF_DEPRECATED int32_t description_grd_ids(int index) const;
  PROTOBUF_DEPRECATED void set_description_grd_ids(int index, int32_t value);
  PROTOBUF_DEPRECATED void add_description_grd_ids(int32_t value);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      description_grd_ids() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_description_grd_ids();

  // optional string locale = 4;
  bool has_locale() const;
  private:
  bool _internal_has_locale() const;
  public:
  void clear_locale();
  const std::string& locale() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_locale(ArgT0&& arg0, ArgT... args);
  std::string* mutable_locale();
  PROTOBUF_NODISCARD std::string* release_locale();
  void set_allocated_locale(std::string* locale);
  private:
  const std::string& _internal_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locale(const std::string& value);
  std::string* _internal_mutable_locale();
  public:

  // optional .sync_pb.UserEventSpecifics.UserConsent.Feature feature = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_feature() const;
  private:
  bool _internal_has_feature() const;
  public:
  PROTOBUF_DEPRECATED void clear_feature();
  PROTOBUF_DEPRECATED ::sync_pb::UserEventSpecifics_UserConsent_Feature feature() const;
  PROTOBUF_DEPRECATED void set_feature(::sync_pb::UserEventSpecifics_UserConsent_Feature value);
  private:
  ::sync_pb::UserEventSpecifics_UserConsent_Feature _internal_feature() const;
  void _internal_set_feature(::sync_pb::UserEventSpecifics_UserConsent_Feature value);
  public:

  // optional int32 confirmation_grd_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_confirmation_grd_id() const;
  private:
  bool _internal_has_confirmation_grd_id() const;
  public:
  PROTOBUF_DEPRECATED void clear_confirmation_grd_id();
  PROTOBUF_DEPRECATED int32_t confirmation_grd_id() const;
  PROTOBUF_DEPRECATED void set_confirmation_grd_id(int32_t value);
  private:
  int32_t _internal_confirmation_grd_id() const;
  void _internal_set_confirmation_grd_id(int32_t value);
  public:

  // optional int64 client_consent_time_usec = 12;
  bool has_client_consent_time_usec() const;
  private:
  bool _internal_has_client_consent_time_usec() const;
  public:
  void clear_client_consent_time_usec();
  int64_t client_consent_time_usec() const;
  void set_client_consent_time_usec(int64_t value);
  private:
  int64_t _internal_client_consent_time_usec() const;
  void _internal_set_client_consent_time_usec(int64_t value);
  public:

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  PROTOBUF_DEPRECATED void clear_status();
  PROTOBUF_DEPRECATED ::sync_pb::UserConsentTypes_ConsentStatus status() const;
  PROTOBUF_DEPRECATED void set_status(::sync_pb::UserConsentTypes_ConsentStatus value);
  private:
  ::sync_pb::UserConsentTypes_ConsentStatus _internal_status() const;
  void _internal_set_status(::sync_pb::UserConsentTypes_ConsentStatus value);
  public:

  // .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
  bool has_sync_consent() const;
  private:
  bool _internal_has_sync_consent() const;
  public:
  void clear_sync_consent();
  const ::sync_pb::UserConsentTypes_SyncConsent& sync_consent() const;
  PROTOBUF_NODISCARD ::sync_pb::UserConsentTypes_SyncConsent* release_sync_consent();
  ::sync_pb::UserConsentTypes_SyncConsent* mutable_sync_consent();
  void set_allocated_sync_consent(::sync_pb::UserConsentTypes_SyncConsent* sync_consent);
  private:
  const ::sync_pb::UserConsentTypes_SyncConsent& _internal_sync_consent() const;
  ::sync_pb::UserConsentTypes_SyncConsent* _internal_mutable_sync_consent();
  public:
  void unsafe_arena_set_allocated_sync_consent(
      ::sync_pb::UserConsentTypes_SyncConsent* sync_consent);
  ::sync_pb::UserConsentTypes_SyncConsent* unsafe_arena_release_sync_consent();

  // .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
  bool has_arc_backup_and_restore_consent() const;
  private:
  bool _internal_has_arc_backup_and_restore_consent() const;
  public:
  void clear_arc_backup_and_restore_consent();
  const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent& arc_backup_and_restore_consent() const;
  PROTOBUF_NODISCARD ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* release_arc_backup_and_restore_consent();
  ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* mutable_arc_backup_and_restore_consent();
  void set_allocated_arc_backup_and_restore_consent(::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent);
  private:
  const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent& _internal_arc_backup_and_restore_consent() const;
  ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* _internal_mutable_arc_backup_and_restore_consent();
  public:
  void unsafe_arena_set_allocated_arc_backup_and_restore_consent(
      ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent);
  ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* unsafe_arena_release_arc_backup_and_restore_consent();

  // .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
  bool has_arc_location_service_consent() const;
  private:
  bool _internal_has_arc_location_service_consent() const;
  public:
  void clear_arc_location_service_consent();
  const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent& arc_location_service_consent() const;
  PROTOBUF_NODISCARD ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* release_arc_location_service_consent();
  ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* mutable_arc_location_service_consent();
  void set_allocated_arc_location_service_consent(::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent);
  private:
  const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent& _internal_arc_location_service_consent() const;
  ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* _internal_mutable_arc_location_service_consent();
  public:
  void unsafe_arena_set_allocated_arc_location_service_consent(
      ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent);
  ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* unsafe_arena_release_arc_location_service_consent();

  // .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
  bool has_arc_play_terms_of_service_consent() const;
  private:
  bool _internal_has_arc_play_terms_of_service_consent() const;
  public:
  void clear_arc_play_terms_of_service_consent();
  const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent& arc_play_terms_of_service_consent() const;
  PROTOBUF_NODISCARD ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* release_arc_play_terms_of_service_consent();
  ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* mutable_arc_play_terms_of_service_consent();
  void set_allocated_arc_play_terms_of_service_consent(::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent);
  private:
  const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent& _internal_arc_play_terms_of_service_consent() const;
  ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* _internal_mutable_arc_play_terms_of_service_consent();
  public:
  void unsafe_arena_set_allocated_arc_play_terms_of_service_consent(
      ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent);
  ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* unsafe_arena_release_arc_play_terms_of_service_consent();

  // .sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13;
  bool has_unified_consent() const;
  private:
  bool _internal_has_unified_consent() const;
  public:
  void clear_unified_consent();
  const ::sync_pb::UserConsentTypes_UnifiedConsent& unified_consent() const;
  PROTOBUF_NODISCARD ::sync_pb::UserConsentTypes_UnifiedConsent* release_unified_consent();
  ::sync_pb::UserConsentTypes_UnifiedConsent* mutable_unified_consent();
  void set_allocated_unified_consent(::sync_pb::UserConsentTypes_UnifiedConsent* unified_consent);
  private:
  const ::sync_pb::UserConsentTypes_UnifiedConsent& _internal_unified_consent() const;
  ::sync_pb::UserConsentTypes_UnifiedConsent* _internal_mutable_unified_consent();
  public:
  void unsafe_arena_set_allocated_unified_consent(
      ::sync_pb::UserConsentTypes_UnifiedConsent* unified_consent);
  ::sync_pb::UserConsentTypes_UnifiedConsent* unsafe_arena_release_unified_consent();

  void clear_consent();
  ConsentCase consent_case() const;
  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.UserConsent)
 private:
  class _Internal;
  void set_has_sync_consent();
  void set_has_arc_backup_and_restore_consent();
  void set_has_arc_location_service_consent();
  void set_has_arc_play_terms_of_service_consent();
  void set_has_unified_consent();

  inline bool has_consent() const;
  inline void clear_has_consent();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > description_grd_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
  int feature_;
  int32_t confirmation_grd_id_;
  int64_t client_consent_time_usec_;
  int status_;
  union ConsentUnion {
    constexpr ConsentUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::sync_pb::UserConsentTypes_SyncConsent* sync_consent_;
    ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent_;
    ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent_;
    ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent_;
    ::sync_pb::UserConsentTypes_UnifiedConsent* unified_consent_;
  } consent_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2fsync_2fprotocol_2fuser_5fevent_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class UserEventSpecifics_GaiaPasswordCaptured final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.GaiaPasswordCaptured) */ {
 public:
  inline UserEventSpecifics_GaiaPasswordCaptured() : UserEventSpecifics_GaiaPasswordCaptured(nullptr) {}
  ~UserEventSpecifics_GaiaPasswordCaptured() override;
  explicit PROTOBUF_CONSTEXPR UserEventSpecifics_GaiaPasswordCaptured(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserEventSpecifics_GaiaPasswordCaptured(const UserEventSpecifics_GaiaPasswordCaptured& from);
  UserEventSpecifics_GaiaPasswordCaptured(UserEventSpecifics_GaiaPasswordCaptured&& from) noexcept
    : UserEventSpecifics_GaiaPasswordCaptured() {
    *this = ::std::move(from);
  }

  inline UserEventSpecifics_GaiaPasswordCaptured& operator=(const UserEventSpecifics_GaiaPasswordCaptured& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEventSpecifics_GaiaPasswordCaptured& operator=(UserEventSpecifics_GaiaPasswordCaptured&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UserEventSpecifics_GaiaPasswordCaptured& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserEventSpecifics_GaiaPasswordCaptured* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_GaiaPasswordCaptured*>(
               &_UserEventSpecifics_GaiaPasswordCaptured_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserEventSpecifics_GaiaPasswordCaptured& a, UserEventSpecifics_GaiaPasswordCaptured& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(UserEventSpecifics_GaiaPasswordCaptured* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserEventSpecifics_GaiaPasswordCaptured* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserEventSpecifics_GaiaPasswordCaptured* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserEventSpecifics_GaiaPasswordCaptured>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UserEventSpecifics_GaiaPasswordCaptured& from);
  void MergeFrom(const UserEventSpecifics_GaiaPasswordCaptured& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_GaiaPasswordCaptured* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserEventSpecifics.GaiaPasswordCaptured";
  }
  protected:
  explicit UserEventSpecifics_GaiaPasswordCaptured(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UserEventSpecifics_GaiaPasswordCaptured_EventTrigger EventTrigger;
  static constexpr EventTrigger UNSPECIFIED =
    UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_UNSPECIFIED;
  static constexpr EventTrigger USER_LOGGED_IN =
    UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_USER_LOGGED_IN;
  static constexpr EventTrigger EXPIRED_28D_TIMER =
    UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_EXPIRED_28D_TIMER;
  static inline bool EventTrigger_IsValid(int value) {
    return UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_IsValid(value);
  }
  static constexpr EventTrigger EventTrigger_MIN =
    UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_EventTrigger_MIN;
  static constexpr EventTrigger EventTrigger_MAX =
    UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_EventTrigger_MAX;
  static constexpr int EventTrigger_ARRAYSIZE =
    UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_EventTrigger_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EventTrigger_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventTrigger>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventTrigger_Name.");
    return UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_Name(enum_t_value);
  }
  static inline bool EventTrigger_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EventTrigger* value) {
    return UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEventTriggerFieldNumber = 1,
  };
  // optional .sync_pb.UserEventSpecifics.GaiaPasswordCaptured.EventTrigger event_trigger = 1;
  bool has_event_trigger() const;
  private:
  bool _internal_has_event_trigger() const;
  public:
  void clear_event_trigger();
  ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger event_trigger() const;
  void set_event_trigger(::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger value);
  private:
  ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger _internal_event_trigger() const;
  void _internal_set_event_trigger(::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.GaiaPasswordCaptured)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int event_trigger_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fuser_5fevent_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class UserEventSpecifics_FlocIdComputed final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics.FlocIdComputed) */ {
 public:
  inline UserEventSpecifics_FlocIdComputed() : UserEventSpecifics_FlocIdComputed(nullptr) {}
  ~UserEventSpecifics_FlocIdComputed() override;
  explicit PROTOBUF_CONSTEXPR UserEventSpecifics_FlocIdComputed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserEventSpecifics_FlocIdComputed(const UserEventSpecifics_FlocIdComputed& from);
  UserEventSpecifics_FlocIdComputed(UserEventSpecifics_FlocIdComputed&& from) noexcept
    : UserEventSpecifics_FlocIdComputed() {
    *this = ::std::move(from);
  }

  inline UserEventSpecifics_FlocIdComputed& operator=(const UserEventSpecifics_FlocIdComputed& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEventSpecifics_FlocIdComputed& operator=(UserEventSpecifics_FlocIdComputed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UserEventSpecifics_FlocIdComputed& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserEventSpecifics_FlocIdComputed* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics_FlocIdComputed*>(
               &_UserEventSpecifics_FlocIdComputed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserEventSpecifics_FlocIdComputed& a, UserEventSpecifics_FlocIdComputed& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(UserEventSpecifics_FlocIdComputed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserEventSpecifics_FlocIdComputed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserEventSpecifics_FlocIdComputed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserEventSpecifics_FlocIdComputed>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UserEventSpecifics_FlocIdComputed& from);
  void MergeFrom(const UserEventSpecifics_FlocIdComputed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics_FlocIdComputed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserEventSpecifics.FlocIdComputed";
  }
  protected:
  explicit UserEventSpecifics_FlocIdComputed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UserEventSpecifics_FlocIdComputed_EventTrigger EventTrigger;
  static constexpr EventTrigger UNSPECIFIED =
    UserEventSpecifics_FlocIdComputed_EventTrigger_UNSPECIFIED;
  static constexpr EventTrigger NEW =
    UserEventSpecifics_FlocIdComputed_EventTrigger_NEW;
  static constexpr EventTrigger REFRESHED =
    UserEventSpecifics_FlocIdComputed_EventTrigger_REFRESHED;
  static constexpr EventTrigger HISTORY_DELETE =
    UserEventSpecifics_FlocIdComputed_EventTrigger_HISTORY_DELETE;
  static inline bool EventTrigger_IsValid(int value) {
    return UserEventSpecifics_FlocIdComputed_EventTrigger_IsValid(value);
  }
  static constexpr EventTrigger EventTrigger_MIN =
    UserEventSpecifics_FlocIdComputed_EventTrigger_EventTrigger_MIN;
  static constexpr EventTrigger EventTrigger_MAX =
    UserEventSpecifics_FlocIdComputed_EventTrigger_EventTrigger_MAX;
  static constexpr int EventTrigger_ARRAYSIZE =
    UserEventSpecifics_FlocIdComputed_EventTrigger_EventTrigger_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EventTrigger_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventTrigger>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventTrigger_Name.");
    return UserEventSpecifics_FlocIdComputed_EventTrigger_Name(enum_t_value);
  }
  static inline bool EventTrigger_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EventTrigger* value) {
    return UserEventSpecifics_FlocIdComputed_EventTrigger_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFlocIdFieldNumber = 2,
  };
  // optional uint64 floc_id = 2;
  bool has_floc_id() const;
  private:
  bool _internal_has_floc_id() const;
  public:
  void clear_floc_id();
  uint64_t floc_id() const;
  void set_floc_id(uint64_t value);
  private:
  uint64_t _internal_floc_id() const;
  void _internal_set_floc_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics.FlocIdComputed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t floc_id_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fuser_5fevent_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class UserEventSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.UserEventSpecifics) */ {
 public:
  inline UserEventSpecifics() : UserEventSpecifics(nullptr) {}
  ~UserEventSpecifics() override;
  explicit PROTOBUF_CONSTEXPR UserEventSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserEventSpecifics(const UserEventSpecifics& from);
  UserEventSpecifics(UserEventSpecifics&& from) noexcept
    : UserEventSpecifics() {
    *this = ::std::move(from);
  }

  inline UserEventSpecifics& operator=(const UserEventSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEventSpecifics& operator=(UserEventSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UserEventSpecifics& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kTestEvent = 8,
    kLanguageDetectionEvent = 10,
    kTranslationEvent = 11,
    kUserConsent = 12,
    kGaiaPasswordReuseEvent = 104,
    kGaiaPasswordCapturedEvent = 15,
    kFlocIdComputedEvent = 16,
    EVENT_NOT_SET = 0,
  };

  static inline const UserEventSpecifics* internal_default_instance() {
    return reinterpret_cast<const UserEventSpecifics*>(
               &_UserEventSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserEventSpecifics& a, UserEventSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(UserEventSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserEventSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserEventSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserEventSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UserEventSpecifics& from);
  void MergeFrom(const UserEventSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserEventSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.UserEventSpecifics";
  }
  protected:
  explicit UserEventSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UserEventSpecifics_Test Test;
  typedef UserEventSpecifics_LanguageDetection LanguageDetection;
  typedef UserEventSpecifics_Translation Translation;
  typedef UserEventSpecifics_UserConsent UserConsent;
  typedef UserEventSpecifics_GaiaPasswordCaptured GaiaPasswordCaptured;
  typedef UserEventSpecifics_FlocIdComputed FlocIdComputed;

  // accessors -------------------------------------------------------

  enum : int {
    kEventTimeUsecFieldNumber = 1,
    kNavigationIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kTestEventFieldNumber = 8,
    kLanguageDetectionEventFieldNumber = 10,
    kTranslationEventFieldNumber = 11,
    kUserConsentFieldNumber = 12,
    kGaiaPasswordReuseEventFieldNumber = 104,
    kGaiaPasswordCapturedEventFieldNumber = 15,
    kFlocIdComputedEventFieldNumber = 16,
  };
  // optional int64 event_time_usec = 1;
  bool has_event_time_usec() const;
  private:
  bool _internal_has_event_time_usec() const;
  public:
  void clear_event_time_usec();
  int64_t event_time_usec() const;
  void set_event_time_usec(int64_t value);
  private:
  int64_t _internal_event_time_usec() const;
  void _internal_set_event_time_usec(int64_t value);
  public:

  // optional int64 navigation_id = 2;
  bool has_navigation_id() const;
  private:
  bool _internal_has_navigation_id() const;
  public:
  void clear_navigation_id();
  int64_t navigation_id() const;
  void set_navigation_id(int64_t value);
  private:
  int64_t _internal_navigation_id() const;
  void _internal_set_navigation_id(int64_t value);
  public:

  // optional fixed64 session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  uint64_t session_id() const;
  void set_session_id(uint64_t value);
  private:
  uint64_t _internal_session_id() const;
  void _internal_set_session_id(uint64_t value);
  public:

  // .sync_pb.UserEventSpecifics.Test test_event = 8;
  bool has_test_event() const;
  private:
  bool _internal_has_test_event() const;
  public:
  void clear_test_event();
  const ::sync_pb::UserEventSpecifics_Test& test_event() const;
  PROTOBUF_NODISCARD ::sync_pb::UserEventSpecifics_Test* release_test_event();
  ::sync_pb::UserEventSpecifics_Test* mutable_test_event();
  void set_allocated_test_event(::sync_pb::UserEventSpecifics_Test* test_event);
  private:
  const ::sync_pb::UserEventSpecifics_Test& _internal_test_event() const;
  ::sync_pb::UserEventSpecifics_Test* _internal_mutable_test_event();
  public:
  void unsafe_arena_set_allocated_test_event(
      ::sync_pb::UserEventSpecifics_Test* test_event);
  ::sync_pb::UserEventSpecifics_Test* unsafe_arena_release_test_event();

  // .sync_pb.UserEventSpecifics.LanguageDetection language_detection_event = 10 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_language_detection_event() const;
  private:
  bool _internal_has_language_detection_event() const;
  public:
  PROTOBUF_DEPRECATED void clear_language_detection_event();
  PROTOBUF_DEPRECATED const ::sync_pb::UserEventSpecifics_LanguageDetection& language_detection_event() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::sync_pb::UserEventSpecifics_LanguageDetection* release_language_detection_event();
  PROTOBUF_DEPRECATED ::sync_pb::UserEventSpecifics_LanguageDetection* mutable_language_detection_event();
  PROTOBUF_DEPRECATED void set_allocated_language_detection_event(::sync_pb::UserEventSpecifics_LanguageDetection* language_detection_event);
  private:
  const ::sync_pb::UserEventSpecifics_LanguageDetection& _internal_language_detection_event() const;
  ::sync_pb::UserEventSpecifics_LanguageDetection* _internal_mutable_language_detection_event();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_language_detection_event(
      ::sync_pb::UserEventSpecifics_LanguageDetection* language_detection_event);
  PROTOBUF_DEPRECATED ::sync_pb::UserEventSpecifics_LanguageDetection* unsafe_arena_release_language_detection_event();

  // .sync_pb.UserEventSpecifics.Translation translation_event = 11 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_translation_event() const;
  private:
  bool _internal_has_translation_event() const;
  public:
  PROTOBUF_DEPRECATED void clear_translation_event();
  PROTOBUF_DEPRECATED const ::sync_pb::UserEventSpecifics_Translation& translation_event() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::sync_pb::UserEventSpecifics_Translation* release_translation_event();
  PROTOBUF_DEPRECATED ::sync_pb::UserEventSpecifics_Translation* mutable_translation_event();
  PROTOBUF_DEPRECATED void set_allocated_translation_event(::sync_pb::UserEventSpecifics_Translation* translation_event);
  private:
  const ::sync_pb::UserEventSpecifics_Translation& _internal_translation_event() const;
  ::sync_pb::UserEventSpecifics_Translation* _internal_mutable_translation_event();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_translation_event(
      ::sync_pb::UserEventSpecifics_Translation* translation_event);
  PROTOBUF_DEPRECATED ::sync_pb::UserEventSpecifics_Translation* unsafe_arena_release_translation_event();

  // .sync_pb.UserEventSpecifics.UserConsent user_consent = 12 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_user_consent() const;
  private:
  bool _internal_has_user_consent() const;
  public:
  PROTOBUF_DEPRECATED void clear_user_consent();
  PROTOBUF_DEPRECATED const ::sync_pb::UserEventSpecifics_UserConsent& user_consent() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::sync_pb::UserEventSpecifics_UserConsent* release_user_consent();
  PROTOBUF_DEPRECATED ::sync_pb::UserEventSpecifics_UserConsent* mutable_user_consent();
  PROTOBUF_DEPRECATED void set_allocated_user_consent(::sync_pb::UserEventSpecifics_UserConsent* user_consent);
  private:
  const ::sync_pb::UserEventSpecifics_UserConsent& _internal_user_consent() const;
  ::sync_pb::UserEventSpecifics_UserConsent* _internal_mutable_user_consent();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_user_consent(
      ::sync_pb::UserEventSpecifics_UserConsent* user_consent);
  PROTOBUF_DEPRECATED ::sync_pb::UserEventSpecifics_UserConsent* unsafe_arena_release_user_consent();

  // .sync_pb.GaiaPasswordReuse gaia_password_reuse_event = 104;
  bool has_gaia_password_reuse_event() const;
  private:
  bool _internal_has_gaia_password_reuse_event() const;
  public:
  void clear_gaia_password_reuse_event();
  const ::sync_pb::GaiaPasswordReuse& gaia_password_reuse_event() const;
  PROTOBUF_NODISCARD ::sync_pb::GaiaPasswordReuse* release_gaia_password_reuse_event();
  ::sync_pb::GaiaPasswordReuse* mutable_gaia_password_reuse_event();
  void set_allocated_gaia_password_reuse_event(::sync_pb::GaiaPasswordReuse* gaia_password_reuse_event);
  private:
  const ::sync_pb::GaiaPasswordReuse& _internal_gaia_password_reuse_event() const;
  ::sync_pb::GaiaPasswordReuse* _internal_mutable_gaia_password_reuse_event();
  public:
  void unsafe_arena_set_allocated_gaia_password_reuse_event(
      ::sync_pb::GaiaPasswordReuse* gaia_password_reuse_event);
  ::sync_pb::GaiaPasswordReuse* unsafe_arena_release_gaia_password_reuse_event();

  // .sync_pb.UserEventSpecifics.GaiaPasswordCaptured gaia_password_captured_event = 15;
  bool has_gaia_password_captured_event() const;
  private:
  bool _internal_has_gaia_password_captured_event() const;
  public:
  void clear_gaia_password_captured_event();
  const ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured& gaia_password_captured_event() const;
  PROTOBUF_NODISCARD ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* release_gaia_password_captured_event();
  ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* mutable_gaia_password_captured_event();
  void set_allocated_gaia_password_captured_event(::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* gaia_password_captured_event);
  private:
  const ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured& _internal_gaia_password_captured_event() const;
  ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* _internal_mutable_gaia_password_captured_event();
  public:
  void unsafe_arena_set_allocated_gaia_password_captured_event(
      ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* gaia_password_captured_event);
  ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* unsafe_arena_release_gaia_password_captured_event();

  // .sync_pb.UserEventSpecifics.FlocIdComputed floc_id_computed_event = 16;
  bool has_floc_id_computed_event() const;
  private:
  bool _internal_has_floc_id_computed_event() const;
  public:
  void clear_floc_id_computed_event();
  const ::sync_pb::UserEventSpecifics_FlocIdComputed& floc_id_computed_event() const;
  PROTOBUF_NODISCARD ::sync_pb::UserEventSpecifics_FlocIdComputed* release_floc_id_computed_event();
  ::sync_pb::UserEventSpecifics_FlocIdComputed* mutable_floc_id_computed_event();
  void set_allocated_floc_id_computed_event(::sync_pb::UserEventSpecifics_FlocIdComputed* floc_id_computed_event);
  private:
  const ::sync_pb::UserEventSpecifics_FlocIdComputed& _internal_floc_id_computed_event() const;
  ::sync_pb::UserEventSpecifics_FlocIdComputed* _internal_mutable_floc_id_computed_event();
  public:
  void unsafe_arena_set_allocated_floc_id_computed_event(
      ::sync_pb::UserEventSpecifics_FlocIdComputed* floc_id_computed_event);
  ::sync_pb::UserEventSpecifics_FlocIdComputed* unsafe_arena_release_floc_id_computed_event();

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:sync_pb.UserEventSpecifics)
 private:
  class _Internal;
  void set_has_test_event();
  void set_has_language_detection_event();
  void set_has_translation_event();
  void set_has_user_consent();
  void set_has_gaia_password_reuse_event();
  void set_has_gaia_password_captured_event();
  void set_has_floc_id_computed_event();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t event_time_usec_;
  int64_t navigation_id_;
  uint64_t session_id_;
  union EventUnion {
    constexpr EventUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::sync_pb::UserEventSpecifics_Test* test_event_;
    ::sync_pb::UserEventSpecifics_LanguageDetection* language_detection_event_;
    ::sync_pb::UserEventSpecifics_Translation* translation_event_;
    ::sync_pb::UserEventSpecifics_UserConsent* user_consent_;
    ::sync_pb::GaiaPasswordReuse* gaia_password_reuse_event_;
    ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* gaia_password_captured_event_;
    ::sync_pb::UserEventSpecifics_FlocIdComputed* floc_id_computed_event_;
  } event_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2fsync_2fprotocol_2fuser_5fevent_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserEventSpecifics_Test

// -------------------------------------------------------------------

// UserEventSpecifics_LanguageDetection_Language

// optional string language_code = 1;
inline bool UserEventSpecifics_LanguageDetection_Language::_internal_has_language_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserEventSpecifics_LanguageDetection_Language::has_language_code() const {
  return _internal_has_language_code();
}
inline void UserEventSpecifics_LanguageDetection_Language::clear_language_code() {
  language_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserEventSpecifics_LanguageDetection_Language::language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEventSpecifics_LanguageDetection_Language::set_language_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
}
inline std::string* UserEventSpecifics_LanguageDetection_Language::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
  return _s;
}
inline const std::string& UserEventSpecifics_LanguageDetection_Language::_internal_language_code() const {
  return language_code_.Get();
}
inline void UserEventSpecifics_LanguageDetection_Language::_internal_set_language_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* UserEventSpecifics_LanguageDetection_Language::_internal_mutable_language_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* UserEventSpecifics_LanguageDetection_Language::release_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
  if (!_internal_has_language_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = language_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_code_.IsDefault()) {
    language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserEventSpecifics_LanguageDetection_Language::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_code_.IsDefault()) {
    language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
}

// optional bool is_reliable = 2;
inline bool UserEventSpecifics_LanguageDetection_Language::_internal_has_is_reliable() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserEventSpecifics_LanguageDetection_Language::has_is_reliable() const {
  return _internal_has_is_reliable();
}
inline void UserEventSpecifics_LanguageDetection_Language::clear_is_reliable() {
  is_reliable_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool UserEventSpecifics_LanguageDetection_Language::_internal_is_reliable() const {
  return is_reliable_;
}
inline bool UserEventSpecifics_LanguageDetection_Language::is_reliable() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.LanguageDetection.Language.is_reliable)
  return _internal_is_reliable();
}
inline void UserEventSpecifics_LanguageDetection_Language::_internal_set_is_reliable(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_reliable_ = value;
}
inline void UserEventSpecifics_LanguageDetection_Language::set_is_reliable(bool value) {
  _internal_set_is_reliable(value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.LanguageDetection.Language.is_reliable)
}

// -------------------------------------------------------------------

// UserEventSpecifics_LanguageDetection

// repeated .sync_pb.UserEventSpecifics.LanguageDetection.Language detected_languages = 1;
inline int UserEventSpecifics_LanguageDetection::_internal_detected_languages_size() const {
  return detected_languages_.size();
}
inline int UserEventSpecifics_LanguageDetection::detected_languages_size() const {
  return _internal_detected_languages_size();
}
inline void UserEventSpecifics_LanguageDetection::clear_detected_languages() {
  detected_languages_.Clear();
}
inline ::sync_pb::UserEventSpecifics_LanguageDetection_Language* UserEventSpecifics_LanguageDetection::mutable_detected_languages(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.LanguageDetection.detected_languages)
  return detected_languages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::UserEventSpecifics_LanguageDetection_Language >*
UserEventSpecifics_LanguageDetection::mutable_detected_languages() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserEventSpecifics.LanguageDetection.detected_languages)
  return &detected_languages_;
}
inline const ::sync_pb::UserEventSpecifics_LanguageDetection_Language& UserEventSpecifics_LanguageDetection::_internal_detected_languages(int index) const {
  return detected_languages_.Get(index);
}
inline const ::sync_pb::UserEventSpecifics_LanguageDetection_Language& UserEventSpecifics_LanguageDetection::detected_languages(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.LanguageDetection.detected_languages)
  return _internal_detected_languages(index);
}
inline ::sync_pb::UserEventSpecifics_LanguageDetection_Language* UserEventSpecifics_LanguageDetection::_internal_add_detected_languages() {
  return detected_languages_.Add();
}
inline ::sync_pb::UserEventSpecifics_LanguageDetection_Language* UserEventSpecifics_LanguageDetection::add_detected_languages() {
  ::sync_pb::UserEventSpecifics_LanguageDetection_Language* _add = _internal_add_detected_languages();
  // @@protoc_insertion_point(field_add:sync_pb.UserEventSpecifics.LanguageDetection.detected_languages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::UserEventSpecifics_LanguageDetection_Language >&
UserEventSpecifics_LanguageDetection::detected_languages() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserEventSpecifics.LanguageDetection.detected_languages)
  return detected_languages_;
}

// optional string adopted_language_code = 2;
inline bool UserEventSpecifics_LanguageDetection::_internal_has_adopted_language_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserEventSpecifics_LanguageDetection::has_adopted_language_code() const {
  return _internal_has_adopted_language_code();
}
inline void UserEventSpecifics_LanguageDetection::clear_adopted_language_code() {
  adopted_language_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserEventSpecifics_LanguageDetection::adopted_language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
  return _internal_adopted_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEventSpecifics_LanguageDetection::set_adopted_language_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 adopted_language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
}
inline std::string* UserEventSpecifics_LanguageDetection::mutable_adopted_language_code() {
  std::string* _s = _internal_mutable_adopted_language_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
  return _s;
}
inline const std::string& UserEventSpecifics_LanguageDetection::_internal_adopted_language_code() const {
  return adopted_language_code_.Get();
}
inline void UserEventSpecifics_LanguageDetection::_internal_set_adopted_language_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  adopted_language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* UserEventSpecifics_LanguageDetection::_internal_mutable_adopted_language_code() {
  _has_bits_[0] |= 0x00000001u;
  return adopted_language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* UserEventSpecifics_LanguageDetection::release_adopted_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
  if (!_internal_has_adopted_language_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = adopted_language_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (adopted_language_code_.IsDefault()) {
    adopted_language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserEventSpecifics_LanguageDetection::set_allocated_adopted_language_code(std::string* adopted_language_code) {
  if (adopted_language_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  adopted_language_code_.SetAllocated(adopted_language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (adopted_language_code_.IsDefault()) {
    adopted_language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
}

// -------------------------------------------------------------------

// UserEventSpecifics_Translation

// optional string from_language_code = 1;
inline bool UserEventSpecifics_Translation::_internal_has_from_language_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserEventSpecifics_Translation::has_from_language_code() const {
  return _internal_has_from_language_code();
}
inline void UserEventSpecifics_Translation::clear_from_language_code() {
  from_language_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserEventSpecifics_Translation::from_language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.Translation.from_language_code)
  return _internal_from_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEventSpecifics_Translation::set_from_language_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 from_language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.Translation.from_language_code)
}
inline std::string* UserEventSpecifics_Translation::mutable_from_language_code() {
  std::string* _s = _internal_mutable_from_language_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.Translation.from_language_code)
  return _s;
}
inline const std::string& UserEventSpecifics_Translation::_internal_from_language_code() const {
  return from_language_code_.Get();
}
inline void UserEventSpecifics_Translation::_internal_set_from_language_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  from_language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* UserEventSpecifics_Translation::_internal_mutable_from_language_code() {
  _has_bits_[0] |= 0x00000001u;
  return from_language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* UserEventSpecifics_Translation::release_from_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.Translation.from_language_code)
  if (!_internal_has_from_language_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = from_language_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_language_code_.IsDefault()) {
    from_language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserEventSpecifics_Translation::set_allocated_from_language_code(std::string* from_language_code) {
  if (from_language_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  from_language_code_.SetAllocated(from_language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_language_code_.IsDefault()) {
    from_language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.Translation.from_language_code)
}

// optional string to_language_code = 2;
inline bool UserEventSpecifics_Translation::_internal_has_to_language_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserEventSpecifics_Translation::has_to_language_code() const {
  return _internal_has_to_language_code();
}
inline void UserEventSpecifics_Translation::clear_to_language_code() {
  to_language_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserEventSpecifics_Translation::to_language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.Translation.to_language_code)
  return _internal_to_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEventSpecifics_Translation::set_to_language_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 to_language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.Translation.to_language_code)
}
inline std::string* UserEventSpecifics_Translation::mutable_to_language_code() {
  std::string* _s = _internal_mutable_to_language_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.Translation.to_language_code)
  return _s;
}
inline const std::string& UserEventSpecifics_Translation::_internal_to_language_code() const {
  return to_language_code_.Get();
}
inline void UserEventSpecifics_Translation::_internal_set_to_language_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  to_language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* UserEventSpecifics_Translation::_internal_mutable_to_language_code() {
  _has_bits_[0] |= 0x00000002u;
  return to_language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* UserEventSpecifics_Translation::release_to_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.Translation.to_language_code)
  if (!_internal_has_to_language_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = to_language_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_language_code_.IsDefault()) {
    to_language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserEventSpecifics_Translation::set_allocated_to_language_code(std::string* to_language_code) {
  if (to_language_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  to_language_code_.SetAllocated(to_language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_language_code_.IsDefault()) {
    to_language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.Translation.to_language_code)
}

// optional .sync_pb.UserEventSpecifics.Translation.Interaction interaction = 3;
inline bool UserEventSpecifics_Translation::_internal_has_interaction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserEventSpecifics_Translation::has_interaction() const {
  return _internal_has_interaction();
}
inline void UserEventSpecifics_Translation::clear_interaction() {
  interaction_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::sync_pb::UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::_internal_interaction() const {
  return static_cast< ::sync_pb::UserEventSpecifics_Translation_Interaction >(interaction_);
}
inline ::sync_pb::UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::interaction() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.Translation.interaction)
  return _internal_interaction();
}
inline void UserEventSpecifics_Translation::_internal_set_interaction(::sync_pb::UserEventSpecifics_Translation_Interaction value) {
  assert(::sync_pb::UserEventSpecifics_Translation_Interaction_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  interaction_ = value;
}
inline void UserEventSpecifics_Translation::set_interaction(::sync_pb::UserEventSpecifics_Translation_Interaction value) {
  _internal_set_interaction(value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.Translation.interaction)
}

// -------------------------------------------------------------------

// UserEventSpecifics_UserConsent

// optional string locale = 4;
inline bool UserEventSpecifics_UserConsent::_internal_has_locale() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserEventSpecifics_UserConsent::has_locale() const {
  return _internal_has_locale();
}
inline void UserEventSpecifics_UserConsent::clear_locale() {
  locale_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserEventSpecifics_UserConsent::locale() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.locale)
  return _internal_locale();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEventSpecifics_UserConsent::set_locale(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 locale_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.locale)
}
inline std::string* UserEventSpecifics_UserConsent::mutable_locale() {
  std::string* _s = _internal_mutable_locale();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.locale)
  return _s;
}
inline const std::string& UserEventSpecifics_UserConsent::_internal_locale() const {
  return locale_.Get();
}
inline void UserEventSpecifics_UserConsent::_internal_set_locale(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  locale_.Set(value, GetArenaForAllocation());
}
inline std::string* UserEventSpecifics_UserConsent::_internal_mutable_locale() {
  _has_bits_[0] |= 0x00000001u;
  return locale_.Mutable(GetArenaForAllocation());
}
inline std::string* UserEventSpecifics_UserConsent::release_locale() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.locale)
  if (!_internal_has_locale()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = locale_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (locale_.IsDefault()) {
    locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserEventSpecifics_UserConsent::set_allocated_locale(std::string* locale) {
  if (locale != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  locale_.SetAllocated(locale, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (locale_.IsDefault()) {
    locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.locale)
}

// optional int64 client_consent_time_usec = 12;
inline bool UserEventSpecifics_UserConsent::_internal_has_client_consent_time_usec() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UserEventSpecifics_UserConsent::has_client_consent_time_usec() const {
  return _internal_has_client_consent_time_usec();
}
inline void UserEventSpecifics_UserConsent::clear_client_consent_time_usec() {
  client_consent_time_usec_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t UserEventSpecifics_UserConsent::_internal_client_consent_time_usec() const {
  return client_consent_time_usec_;
}
inline int64_t UserEventSpecifics_UserConsent::client_consent_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.client_consent_time_usec)
  return _internal_client_consent_time_usec();
}
inline void UserEventSpecifics_UserConsent::_internal_set_client_consent_time_usec(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  client_consent_time_usec_ = value;
}
inline void UserEventSpecifics_UserConsent::set_client_consent_time_usec(int64_t value) {
  _internal_set_client_consent_time_usec(value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.client_consent_time_usec)
}

// .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
inline bool UserEventSpecifics_UserConsent::_internal_has_sync_consent() const {
  return consent_case() == kSyncConsent;
}
inline bool UserEventSpecifics_UserConsent::has_sync_consent() const {
  return _internal_has_sync_consent();
}
inline void UserEventSpecifics_UserConsent::set_has_sync_consent() {
  _oneof_case_[0] = kSyncConsent;
}
inline ::sync_pb::UserConsentTypes_SyncConsent* UserEventSpecifics_UserConsent::release_sync_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.sync_consent)
  if (_internal_has_sync_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_SyncConsent* temp = consent_.sync_consent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    consent_.sync_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentTypes_SyncConsent& UserEventSpecifics_UserConsent::_internal_sync_consent() const {
  return _internal_has_sync_consent()
      ? *consent_.sync_consent_
      : reinterpret_cast< ::sync_pb::UserConsentTypes_SyncConsent&>(::sync_pb::_UserConsentTypes_SyncConsent_default_instance_);
}
inline const ::sync_pb::UserConsentTypes_SyncConsent& UserEventSpecifics_UserConsent::sync_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.sync_consent)
  return _internal_sync_consent();
}
inline ::sync_pb::UserConsentTypes_SyncConsent* UserEventSpecifics_UserConsent::unsafe_arena_release_sync_consent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.UserEventSpecifics.UserConsent.sync_consent)
  if (_internal_has_sync_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_SyncConsent* temp = consent_.sync_consent_;
    consent_.sync_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserEventSpecifics_UserConsent::unsafe_arena_set_allocated_sync_consent(::sync_pb::UserConsentTypes_SyncConsent* sync_consent) {
  clear_consent();
  if (sync_consent) {
    set_has_sync_consent();
    consent_.sync_consent_ = sync_consent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.UserEventSpecifics.UserConsent.sync_consent)
}
inline ::sync_pb::UserConsentTypes_SyncConsent* UserEventSpecifics_UserConsent::_internal_mutable_sync_consent() {
  if (!_internal_has_sync_consent()) {
    clear_consent();
    set_has_sync_consent();
    consent_.sync_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentTypes_SyncConsent >(GetArenaForAllocation());
  }
  return consent_.sync_consent_;
}
inline ::sync_pb::UserConsentTypes_SyncConsent* UserEventSpecifics_UserConsent::mutable_sync_consent() {
  ::sync_pb::UserConsentTypes_SyncConsent* _msg = _internal_mutable_sync_consent();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.sync_consent)
  return _msg;
}

// .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
inline bool UserEventSpecifics_UserConsent::_internal_has_arc_backup_and_restore_consent() const {
  return consent_case() == kArcBackupAndRestoreConsent;
}
inline bool UserEventSpecifics_UserConsent::has_arc_backup_and_restore_consent() const {
  return _internal_has_arc_backup_and_restore_consent();
}
inline void UserEventSpecifics_UserConsent::set_has_arc_backup_and_restore_consent() {
  _oneof_case_[0] = kArcBackupAndRestoreConsent;
}
inline ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* UserEventSpecifics_UserConsent::release_arc_backup_and_restore_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.arc_backup_and_restore_consent)
  if (_internal_has_arc_backup_and_restore_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* temp = consent_.arc_backup_and_restore_consent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    consent_.arc_backup_and_restore_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent& UserEventSpecifics_UserConsent::_internal_arc_backup_and_restore_consent() const {
  return _internal_has_arc_backup_and_restore_consent()
      ? *consent_.arc_backup_and_restore_consent_
      : reinterpret_cast< ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent&>(::sync_pb::_UserConsentTypes_ArcBackupAndRestoreConsent_default_instance_);
}
inline const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent& UserEventSpecifics_UserConsent::arc_backup_and_restore_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.arc_backup_and_restore_consent)
  return _internal_arc_backup_and_restore_consent();
}
inline ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* UserEventSpecifics_UserConsent::unsafe_arena_release_arc_backup_and_restore_consent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.UserEventSpecifics.UserConsent.arc_backup_and_restore_consent)
  if (_internal_has_arc_backup_and_restore_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* temp = consent_.arc_backup_and_restore_consent_;
    consent_.arc_backup_and_restore_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserEventSpecifics_UserConsent::unsafe_arena_set_allocated_arc_backup_and_restore_consent(::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent) {
  clear_consent();
  if (arc_backup_and_restore_consent) {
    set_has_arc_backup_and_restore_consent();
    consent_.arc_backup_and_restore_consent_ = arc_backup_and_restore_consent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.UserEventSpecifics.UserConsent.arc_backup_and_restore_consent)
}
inline ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* UserEventSpecifics_UserConsent::_internal_mutable_arc_backup_and_restore_consent() {
  if (!_internal_has_arc_backup_and_restore_consent()) {
    clear_consent();
    set_has_arc_backup_and_restore_consent();
    consent_.arc_backup_and_restore_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent >(GetArenaForAllocation());
  }
  return consent_.arc_backup_and_restore_consent_;
}
inline ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* UserEventSpecifics_UserConsent::mutable_arc_backup_and_restore_consent() {
  ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* _msg = _internal_mutable_arc_backup_and_restore_consent();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.arc_backup_and_restore_consent)
  return _msg;
}

// .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
inline bool UserEventSpecifics_UserConsent::_internal_has_arc_location_service_consent() const {
  return consent_case() == kArcLocationServiceConsent;
}
inline bool UserEventSpecifics_UserConsent::has_arc_location_service_consent() const {
  return _internal_has_arc_location_service_consent();
}
inline void UserEventSpecifics_UserConsent::set_has_arc_location_service_consent() {
  _oneof_case_[0] = kArcLocationServiceConsent;
}
inline ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* UserEventSpecifics_UserConsent::release_arc_location_service_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.arc_location_service_consent)
  if (_internal_has_arc_location_service_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* temp = consent_.arc_location_service_consent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    consent_.arc_location_service_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent& UserEventSpecifics_UserConsent::_internal_arc_location_service_consent() const {
  return _internal_has_arc_location_service_consent()
      ? *consent_.arc_location_service_consent_
      : reinterpret_cast< ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent&>(::sync_pb::_UserConsentTypes_ArcGoogleLocationServiceConsent_default_instance_);
}
inline const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent& UserEventSpecifics_UserConsent::arc_location_service_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.arc_location_service_consent)
  return _internal_arc_location_service_consent();
}
inline ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* UserEventSpecifics_UserConsent::unsafe_arena_release_arc_location_service_consent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.UserEventSpecifics.UserConsent.arc_location_service_consent)
  if (_internal_has_arc_location_service_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* temp = consent_.arc_location_service_consent_;
    consent_.arc_location_service_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserEventSpecifics_UserConsent::unsafe_arena_set_allocated_arc_location_service_consent(::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent) {
  clear_consent();
  if (arc_location_service_consent) {
    set_has_arc_location_service_consent();
    consent_.arc_location_service_consent_ = arc_location_service_consent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.UserEventSpecifics.UserConsent.arc_location_service_consent)
}
inline ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* UserEventSpecifics_UserConsent::_internal_mutable_arc_location_service_consent() {
  if (!_internal_has_arc_location_service_consent()) {
    clear_consent();
    set_has_arc_location_service_consent();
    consent_.arc_location_service_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent >(GetArenaForAllocation());
  }
  return consent_.arc_location_service_consent_;
}
inline ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* UserEventSpecifics_UserConsent::mutable_arc_location_service_consent() {
  ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* _msg = _internal_mutable_arc_location_service_consent();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.arc_location_service_consent)
  return _msg;
}

// .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
inline bool UserEventSpecifics_UserConsent::_internal_has_arc_play_terms_of_service_consent() const {
  return consent_case() == kArcPlayTermsOfServiceConsent;
}
inline bool UserEventSpecifics_UserConsent::has_arc_play_terms_of_service_consent() const {
  return _internal_has_arc_play_terms_of_service_consent();
}
inline void UserEventSpecifics_UserConsent::set_has_arc_play_terms_of_service_consent() {
  _oneof_case_[0] = kArcPlayTermsOfServiceConsent;
}
inline ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* UserEventSpecifics_UserConsent::release_arc_play_terms_of_service_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.arc_play_terms_of_service_consent)
  if (_internal_has_arc_play_terms_of_service_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* temp = consent_.arc_play_terms_of_service_consent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    consent_.arc_play_terms_of_service_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent& UserEventSpecifics_UserConsent::_internal_arc_play_terms_of_service_consent() const {
  return _internal_has_arc_play_terms_of_service_consent()
      ? *consent_.arc_play_terms_of_service_consent_
      : reinterpret_cast< ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent&>(::sync_pb::_UserConsentTypes_ArcPlayTermsOfServiceConsent_default_instance_);
}
inline const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent& UserEventSpecifics_UserConsent::arc_play_terms_of_service_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.arc_play_terms_of_service_consent)
  return _internal_arc_play_terms_of_service_consent();
}
inline ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* UserEventSpecifics_UserConsent::unsafe_arena_release_arc_play_terms_of_service_consent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.UserEventSpecifics.UserConsent.arc_play_terms_of_service_consent)
  if (_internal_has_arc_play_terms_of_service_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* temp = consent_.arc_play_terms_of_service_consent_;
    consent_.arc_play_terms_of_service_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserEventSpecifics_UserConsent::unsafe_arena_set_allocated_arc_play_terms_of_service_consent(::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent) {
  clear_consent();
  if (arc_play_terms_of_service_consent) {
    set_has_arc_play_terms_of_service_consent();
    consent_.arc_play_terms_of_service_consent_ = arc_play_terms_of_service_consent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.UserEventSpecifics.UserConsent.arc_play_terms_of_service_consent)
}
inline ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* UserEventSpecifics_UserConsent::_internal_mutable_arc_play_terms_of_service_consent() {
  if (!_internal_has_arc_play_terms_of_service_consent()) {
    clear_consent();
    set_has_arc_play_terms_of_service_consent();
    consent_.arc_play_terms_of_service_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent >(GetArenaForAllocation());
  }
  return consent_.arc_play_terms_of_service_consent_;
}
inline ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* UserEventSpecifics_UserConsent::mutable_arc_play_terms_of_service_consent() {
  ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* _msg = _internal_mutable_arc_play_terms_of_service_consent();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.arc_play_terms_of_service_consent)
  return _msg;
}

// .sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13;
inline bool UserEventSpecifics_UserConsent::_internal_has_unified_consent() const {
  return consent_case() == kUnifiedConsent;
}
inline bool UserEventSpecifics_UserConsent::has_unified_consent() const {
  return _internal_has_unified_consent();
}
inline void UserEventSpecifics_UserConsent::set_has_unified_consent() {
  _oneof_case_[0] = kUnifiedConsent;
}
inline ::sync_pb::UserConsentTypes_UnifiedConsent* UserEventSpecifics_UserConsent::release_unified_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.unified_consent)
  if (_internal_has_unified_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_UnifiedConsent* temp = consent_.unified_consent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    consent_.unified_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserConsentTypes_UnifiedConsent& UserEventSpecifics_UserConsent::_internal_unified_consent() const {
  return _internal_has_unified_consent()
      ? *consent_.unified_consent_
      : reinterpret_cast< ::sync_pb::UserConsentTypes_UnifiedConsent&>(::sync_pb::_UserConsentTypes_UnifiedConsent_default_instance_);
}
inline const ::sync_pb::UserConsentTypes_UnifiedConsent& UserEventSpecifics_UserConsent::unified_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.unified_consent)
  return _internal_unified_consent();
}
inline ::sync_pb::UserConsentTypes_UnifiedConsent* UserEventSpecifics_UserConsent::unsafe_arena_release_unified_consent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.UserEventSpecifics.UserConsent.unified_consent)
  if (_internal_has_unified_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_UnifiedConsent* temp = consent_.unified_consent_;
    consent_.unified_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserEventSpecifics_UserConsent::unsafe_arena_set_allocated_unified_consent(::sync_pb::UserConsentTypes_UnifiedConsent* unified_consent) {
  clear_consent();
  if (unified_consent) {
    set_has_unified_consent();
    consent_.unified_consent_ = unified_consent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.UserEventSpecifics.UserConsent.unified_consent)
}
inline ::sync_pb::UserConsentTypes_UnifiedConsent* UserEventSpecifics_UserConsent::_internal_mutable_unified_consent() {
  if (!_internal_has_unified_consent()) {
    clear_consent();
    set_has_unified_consent();
    consent_.unified_consent_ = CreateMaybeMessage< ::sync_pb::UserConsentTypes_UnifiedConsent >(GetArenaForAllocation());
  }
  return consent_.unified_consent_;
}
inline ::sync_pb::UserConsentTypes_UnifiedConsent* UserEventSpecifics_UserConsent::mutable_unified_consent() {
  ::sync_pb::UserConsentTypes_UnifiedConsent* _msg = _internal_mutable_unified_consent();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.unified_consent)
  return _msg;
}

// optional .sync_pb.UserEventSpecifics.UserConsent.Feature feature = 1 [deprecated = true];
inline bool UserEventSpecifics_UserConsent::_internal_has_feature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserEventSpecifics_UserConsent::has_feature() const {
  return _internal_has_feature();
}
inline void UserEventSpecifics_UserConsent::clear_feature() {
  feature_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::sync_pb::UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::_internal_feature() const {
  return static_cast< ::sync_pb::UserEventSpecifics_UserConsent_Feature >(feature_);
}
inline ::sync_pb::UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::feature() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.feature)
  return _internal_feature();
}
inline void UserEventSpecifics_UserConsent::_internal_set_feature(::sync_pb::UserEventSpecifics_UserConsent_Feature value) {
  assert(::sync_pb::UserEventSpecifics_UserConsent_Feature_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  feature_ = value;
}
inline void UserEventSpecifics_UserConsent::set_feature(::sync_pb::UserEventSpecifics_UserConsent_Feature value) {
  _internal_set_feature(value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.feature)
}

// repeated int32 description_grd_ids = 2 [deprecated = true];
inline int UserEventSpecifics_UserConsent::_internal_description_grd_ids_size() const {
  return description_grd_ids_.size();
}
inline int UserEventSpecifics_UserConsent::description_grd_ids_size() const {
  return _internal_description_grd_ids_size();
}
inline void UserEventSpecifics_UserConsent::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
inline int32_t UserEventSpecifics_UserConsent::_internal_description_grd_ids(int index) const {
  return description_grd_ids_.Get(index);
}
inline int32_t UserEventSpecifics_UserConsent::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.description_grd_ids)
  return _internal_description_grd_ids(index);
}
inline void UserEventSpecifics_UserConsent::set_description_grd_ids(int index, int32_t value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.description_grd_ids)
}
inline void UserEventSpecifics_UserConsent::_internal_add_description_grd_ids(int32_t value) {
  description_grd_ids_.Add(value);
}
inline void UserEventSpecifics_UserConsent::add_description_grd_ids(int32_t value) {
  _internal_add_description_grd_ids(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserEventSpecifics.UserConsent.description_grd_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UserEventSpecifics_UserConsent::_internal_description_grd_ids() const {
  return description_grd_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UserEventSpecifics_UserConsent::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserEventSpecifics.UserConsent.description_grd_ids)
  return _internal_description_grd_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UserEventSpecifics_UserConsent::_internal_mutable_description_grd_ids() {
  return &description_grd_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UserEventSpecifics_UserConsent::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserEventSpecifics.UserConsent.description_grd_ids)
  return _internal_mutable_description_grd_ids();
}

// optional int32 confirmation_grd_id = 3 [deprecated = true];
inline bool UserEventSpecifics_UserConsent::_internal_has_confirmation_grd_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserEventSpecifics_UserConsent::has_confirmation_grd_id() const {
  return _internal_has_confirmation_grd_id();
}
inline void UserEventSpecifics_UserConsent::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t UserEventSpecifics_UserConsent::_internal_confirmation_grd_id() const {
  return confirmation_grd_id_;
}
inline int32_t UserEventSpecifics_UserConsent::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.confirmation_grd_id)
  return _internal_confirmation_grd_id();
}
inline void UserEventSpecifics_UserConsent::_internal_set_confirmation_grd_id(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  confirmation_grd_id_ = value;
}
inline void UserEventSpecifics_UserConsent::set_confirmation_grd_id(int32_t value) {
  _internal_set_confirmation_grd_id(value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
inline bool UserEventSpecifics_UserConsent::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UserEventSpecifics_UserConsent::has_status() const {
  return _internal_has_status();
}
inline void UserEventSpecifics_UserConsent::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::sync_pb::UserConsentTypes_ConsentStatus UserEventSpecifics_UserConsent::_internal_status() const {
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
inline ::sync_pb::UserConsentTypes_ConsentStatus UserEventSpecifics_UserConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.status)
  return _internal_status();
}
inline void UserEventSpecifics_UserConsent::_internal_set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  status_ = value;
}
inline void UserEventSpecifics_UserConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.status)
}

inline bool UserEventSpecifics_UserConsent::has_consent() const {
  return consent_case() != CONSENT_NOT_SET;
}
inline void UserEventSpecifics_UserConsent::clear_has_consent() {
  _oneof_case_[0] = CONSENT_NOT_SET;
}
inline UserEventSpecifics_UserConsent::ConsentCase UserEventSpecifics_UserConsent::consent_case() const {
  return UserEventSpecifics_UserConsent::ConsentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UserEventSpecifics_GaiaPasswordCaptured

// optional .sync_pb.UserEventSpecifics.GaiaPasswordCaptured.EventTrigger event_trigger = 1;
inline bool UserEventSpecifics_GaiaPasswordCaptured::_internal_has_event_trigger() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserEventSpecifics_GaiaPasswordCaptured::has_event_trigger() const {
  return _internal_has_event_trigger();
}
inline void UserEventSpecifics_GaiaPasswordCaptured::clear_event_trigger() {
  event_trigger_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger UserEventSpecifics_GaiaPasswordCaptured::_internal_event_trigger() const {
  return static_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger >(event_trigger_);
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger UserEventSpecifics_GaiaPasswordCaptured::event_trigger() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordCaptured.event_trigger)
  return _internal_event_trigger();
}
inline void UserEventSpecifics_GaiaPasswordCaptured::_internal_set_event_trigger(::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger value) {
  assert(::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  event_trigger_ = value;
}
inline void UserEventSpecifics_GaiaPasswordCaptured::set_event_trigger(::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger value) {
  _internal_set_event_trigger(value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.GaiaPasswordCaptured.event_trigger)
}

// -------------------------------------------------------------------

// UserEventSpecifics_FlocIdComputed

// optional uint64 floc_id = 2;
inline bool UserEventSpecifics_FlocIdComputed::_internal_has_floc_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserEventSpecifics_FlocIdComputed::has_floc_id() const {
  return _internal_has_floc_id();
}
inline void UserEventSpecifics_FlocIdComputed::clear_floc_id() {
  floc_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t UserEventSpecifics_FlocIdComputed::_internal_floc_id() const {
  return floc_id_;
}
inline uint64_t UserEventSpecifics_FlocIdComputed::floc_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.FlocIdComputed.floc_id)
  return _internal_floc_id();
}
inline void UserEventSpecifics_FlocIdComputed::_internal_set_floc_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  floc_id_ = value;
}
inline void UserEventSpecifics_FlocIdComputed::set_floc_id(uint64_t value) {
  _internal_set_floc_id(value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.FlocIdComputed.floc_id)
}

// -------------------------------------------------------------------

// UserEventSpecifics

// optional int64 event_time_usec = 1;
inline bool UserEventSpecifics::_internal_has_event_time_usec() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserEventSpecifics::has_event_time_usec() const {
  return _internal_has_event_time_usec();
}
inline void UserEventSpecifics::clear_event_time_usec() {
  event_time_usec_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UserEventSpecifics::_internal_event_time_usec() const {
  return event_time_usec_;
}
inline int64_t UserEventSpecifics::event_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.event_time_usec)
  return _internal_event_time_usec();
}
inline void UserEventSpecifics::_internal_set_event_time_usec(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  event_time_usec_ = value;
}
inline void UserEventSpecifics::set_event_time_usec(int64_t value) {
  _internal_set_event_time_usec(value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.event_time_usec)
}

// optional int64 navigation_id = 2;
inline bool UserEventSpecifics::_internal_has_navigation_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserEventSpecifics::has_navigation_id() const {
  return _internal_has_navigation_id();
}
inline void UserEventSpecifics::clear_navigation_id() {
  navigation_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t UserEventSpecifics::_internal_navigation_id() const {
  return navigation_id_;
}
inline int64_t UserEventSpecifics::navigation_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.navigation_id)
  return _internal_navigation_id();
}
inline void UserEventSpecifics::_internal_set_navigation_id(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  navigation_id_ = value;
}
inline void UserEventSpecifics::set_navigation_id(int64_t value) {
  _internal_set_navigation_id(value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.navigation_id)
}

// optional fixed64 session_id = 3;
inline bool UserEventSpecifics::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserEventSpecifics::has_session_id() const {
  return _internal_has_session_id();
}
inline void UserEventSpecifics::clear_session_id() {
  session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t UserEventSpecifics::_internal_session_id() const {
  return session_id_;
}
inline uint64_t UserEventSpecifics::session_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.session_id)
  return _internal_session_id();
}
inline void UserEventSpecifics::_internal_set_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  session_id_ = value;
}
inline void UserEventSpecifics::set_session_id(uint64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.session_id)
}

// .sync_pb.UserEventSpecifics.Test test_event = 8;
inline bool UserEventSpecifics::_internal_has_test_event() const {
  return event_case() == kTestEvent;
}
inline bool UserEventSpecifics::has_test_event() const {
  return _internal_has_test_event();
}
inline void UserEventSpecifics::set_has_test_event() {
  _oneof_case_[0] = kTestEvent;
}
inline void UserEventSpecifics::clear_test_event() {
  if (_internal_has_test_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.test_event_;
    }
    clear_has_event();
  }
}
inline ::sync_pb::UserEventSpecifics_Test* UserEventSpecifics::release_test_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.test_event)
  if (_internal_has_test_event()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_Test* temp = event_.test_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.test_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserEventSpecifics_Test& UserEventSpecifics::_internal_test_event() const {
  return _internal_has_test_event()
      ? *event_.test_event_
      : reinterpret_cast< ::sync_pb::UserEventSpecifics_Test&>(::sync_pb::_UserEventSpecifics_Test_default_instance_);
}
inline const ::sync_pb::UserEventSpecifics_Test& UserEventSpecifics::test_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.test_event)
  return _internal_test_event();
}
inline ::sync_pb::UserEventSpecifics_Test* UserEventSpecifics::unsafe_arena_release_test_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.UserEventSpecifics.test_event)
  if (_internal_has_test_event()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_Test* temp = event_.test_event_;
    event_.test_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserEventSpecifics::unsafe_arena_set_allocated_test_event(::sync_pb::UserEventSpecifics_Test* test_event) {
  clear_event();
  if (test_event) {
    set_has_test_event();
    event_.test_event_ = test_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.UserEventSpecifics.test_event)
}
inline ::sync_pb::UserEventSpecifics_Test* UserEventSpecifics::_internal_mutable_test_event() {
  if (!_internal_has_test_event()) {
    clear_event();
    set_has_test_event();
    event_.test_event_ = CreateMaybeMessage< ::sync_pb::UserEventSpecifics_Test >(GetArenaForAllocation());
  }
  return event_.test_event_;
}
inline ::sync_pb::UserEventSpecifics_Test* UserEventSpecifics::mutable_test_event() {
  ::sync_pb::UserEventSpecifics_Test* _msg = _internal_mutable_test_event();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.test_event)
  return _msg;
}

// .sync_pb.UserEventSpecifics.LanguageDetection language_detection_event = 10 [deprecated = true];
inline bool UserEventSpecifics::_internal_has_language_detection_event() const {
  return event_case() == kLanguageDetectionEvent;
}
inline bool UserEventSpecifics::has_language_detection_event() const {
  return _internal_has_language_detection_event();
}
inline void UserEventSpecifics::set_has_language_detection_event() {
  _oneof_case_[0] = kLanguageDetectionEvent;
}
inline void UserEventSpecifics::clear_language_detection_event() {
  if (_internal_has_language_detection_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.language_detection_event_;
    }
    clear_has_event();
  }
}
inline ::sync_pb::UserEventSpecifics_LanguageDetection* UserEventSpecifics::release_language_detection_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.language_detection_event)
  if (_internal_has_language_detection_event()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_LanguageDetection* temp = event_.language_detection_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.language_detection_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserEventSpecifics_LanguageDetection& UserEventSpecifics::_internal_language_detection_event() const {
  return _internal_has_language_detection_event()
      ? *event_.language_detection_event_
      : reinterpret_cast< ::sync_pb::UserEventSpecifics_LanguageDetection&>(::sync_pb::_UserEventSpecifics_LanguageDetection_default_instance_);
}
inline const ::sync_pb::UserEventSpecifics_LanguageDetection& UserEventSpecifics::language_detection_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.language_detection_event)
  return _internal_language_detection_event();
}
inline ::sync_pb::UserEventSpecifics_LanguageDetection* UserEventSpecifics::unsafe_arena_release_language_detection_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.UserEventSpecifics.language_detection_event)
  if (_internal_has_language_detection_event()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_LanguageDetection* temp = event_.language_detection_event_;
    event_.language_detection_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserEventSpecifics::unsafe_arena_set_allocated_language_detection_event(::sync_pb::UserEventSpecifics_LanguageDetection* language_detection_event) {
  clear_event();
  if (language_detection_event) {
    set_has_language_detection_event();
    event_.language_detection_event_ = language_detection_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.UserEventSpecifics.language_detection_event)
}
inline ::sync_pb::UserEventSpecifics_LanguageDetection* UserEventSpecifics::_internal_mutable_language_detection_event() {
  if (!_internal_has_language_detection_event()) {
    clear_event();
    set_has_language_detection_event();
    event_.language_detection_event_ = CreateMaybeMessage< ::sync_pb::UserEventSpecifics_LanguageDetection >(GetArenaForAllocation());
  }
  return event_.language_detection_event_;
}
inline ::sync_pb::UserEventSpecifics_LanguageDetection* UserEventSpecifics::mutable_language_detection_event() {
  ::sync_pb::UserEventSpecifics_LanguageDetection* _msg = _internal_mutable_language_detection_event();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.language_detection_event)
  return _msg;
}

// .sync_pb.UserEventSpecifics.Translation translation_event = 11 [deprecated = true];
inline bool UserEventSpecifics::_internal_has_translation_event() const {
  return event_case() == kTranslationEvent;
}
inline bool UserEventSpecifics::has_translation_event() const {
  return _internal_has_translation_event();
}
inline void UserEventSpecifics::set_has_translation_event() {
  _oneof_case_[0] = kTranslationEvent;
}
inline void UserEventSpecifics::clear_translation_event() {
  if (_internal_has_translation_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.translation_event_;
    }
    clear_has_event();
  }
}
inline ::sync_pb::UserEventSpecifics_Translation* UserEventSpecifics::release_translation_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.translation_event)
  if (_internal_has_translation_event()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_Translation* temp = event_.translation_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.translation_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserEventSpecifics_Translation& UserEventSpecifics::_internal_translation_event() const {
  return _internal_has_translation_event()
      ? *event_.translation_event_
      : reinterpret_cast< ::sync_pb::UserEventSpecifics_Translation&>(::sync_pb::_UserEventSpecifics_Translation_default_instance_);
}
inline const ::sync_pb::UserEventSpecifics_Translation& UserEventSpecifics::translation_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.translation_event)
  return _internal_translation_event();
}
inline ::sync_pb::UserEventSpecifics_Translation* UserEventSpecifics::unsafe_arena_release_translation_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.UserEventSpecifics.translation_event)
  if (_internal_has_translation_event()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_Translation* temp = event_.translation_event_;
    event_.translation_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserEventSpecifics::unsafe_arena_set_allocated_translation_event(::sync_pb::UserEventSpecifics_Translation* translation_event) {
  clear_event();
  if (translation_event) {
    set_has_translation_event();
    event_.translation_event_ = translation_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.UserEventSpecifics.translation_event)
}
inline ::sync_pb::UserEventSpecifics_Translation* UserEventSpecifics::_internal_mutable_translation_event() {
  if (!_internal_has_translation_event()) {
    clear_event();
    set_has_translation_event();
    event_.translation_event_ = CreateMaybeMessage< ::sync_pb::UserEventSpecifics_Translation >(GetArenaForAllocation());
  }
  return event_.translation_event_;
}
inline ::sync_pb::UserEventSpecifics_Translation* UserEventSpecifics::mutable_translation_event() {
  ::sync_pb::UserEventSpecifics_Translation* _msg = _internal_mutable_translation_event();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.translation_event)
  return _msg;
}

// .sync_pb.UserEventSpecifics.UserConsent user_consent = 12 [deprecated = true];
inline bool UserEventSpecifics::_internal_has_user_consent() const {
  return event_case() == kUserConsent;
}
inline bool UserEventSpecifics::has_user_consent() const {
  return _internal_has_user_consent();
}
inline void UserEventSpecifics::set_has_user_consent() {
  _oneof_case_[0] = kUserConsent;
}
inline void UserEventSpecifics::clear_user_consent() {
  if (_internal_has_user_consent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.user_consent_;
    }
    clear_has_event();
  }
}
inline ::sync_pb::UserEventSpecifics_UserConsent* UserEventSpecifics::release_user_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.user_consent)
  if (_internal_has_user_consent()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_UserConsent* temp = event_.user_consent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.user_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserEventSpecifics_UserConsent& UserEventSpecifics::_internal_user_consent() const {
  return _internal_has_user_consent()
      ? *event_.user_consent_
      : reinterpret_cast< ::sync_pb::UserEventSpecifics_UserConsent&>(::sync_pb::_UserEventSpecifics_UserConsent_default_instance_);
}
inline const ::sync_pb::UserEventSpecifics_UserConsent& UserEventSpecifics::user_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.user_consent)
  return _internal_user_consent();
}
inline ::sync_pb::UserEventSpecifics_UserConsent* UserEventSpecifics::unsafe_arena_release_user_consent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.UserEventSpecifics.user_consent)
  if (_internal_has_user_consent()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_UserConsent* temp = event_.user_consent_;
    event_.user_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserEventSpecifics::unsafe_arena_set_allocated_user_consent(::sync_pb::UserEventSpecifics_UserConsent* user_consent) {
  clear_event();
  if (user_consent) {
    set_has_user_consent();
    event_.user_consent_ = user_consent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.UserEventSpecifics.user_consent)
}
inline ::sync_pb::UserEventSpecifics_UserConsent* UserEventSpecifics::_internal_mutable_user_consent() {
  if (!_internal_has_user_consent()) {
    clear_event();
    set_has_user_consent();
    event_.user_consent_ = CreateMaybeMessage< ::sync_pb::UserEventSpecifics_UserConsent >(GetArenaForAllocation());
  }
  return event_.user_consent_;
}
inline ::sync_pb::UserEventSpecifics_UserConsent* UserEventSpecifics::mutable_user_consent() {
  ::sync_pb::UserEventSpecifics_UserConsent* _msg = _internal_mutable_user_consent();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.user_consent)
  return _msg;
}

// .sync_pb.GaiaPasswordReuse gaia_password_reuse_event = 104;
inline bool UserEventSpecifics::_internal_has_gaia_password_reuse_event() const {
  return event_case() == kGaiaPasswordReuseEvent;
}
inline bool UserEventSpecifics::has_gaia_password_reuse_event() const {
  return _internal_has_gaia_password_reuse_event();
}
inline void UserEventSpecifics::set_has_gaia_password_reuse_event() {
  _oneof_case_[0] = kGaiaPasswordReuseEvent;
}
inline ::sync_pb::GaiaPasswordReuse* UserEventSpecifics::release_gaia_password_reuse_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.gaia_password_reuse_event)
  if (_internal_has_gaia_password_reuse_event()) {
    clear_has_event();
    ::sync_pb::GaiaPasswordReuse* temp = event_.gaia_password_reuse_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.gaia_password_reuse_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::GaiaPasswordReuse& UserEventSpecifics::_internal_gaia_password_reuse_event() const {
  return _internal_has_gaia_password_reuse_event()
      ? *event_.gaia_password_reuse_event_
      : reinterpret_cast< ::sync_pb::GaiaPasswordReuse&>(::sync_pb::_GaiaPasswordReuse_default_instance_);
}
inline const ::sync_pb::GaiaPasswordReuse& UserEventSpecifics::gaia_password_reuse_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.gaia_password_reuse_event)
  return _internal_gaia_password_reuse_event();
}
inline ::sync_pb::GaiaPasswordReuse* UserEventSpecifics::unsafe_arena_release_gaia_password_reuse_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.UserEventSpecifics.gaia_password_reuse_event)
  if (_internal_has_gaia_password_reuse_event()) {
    clear_has_event();
    ::sync_pb::GaiaPasswordReuse* temp = event_.gaia_password_reuse_event_;
    event_.gaia_password_reuse_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserEventSpecifics::unsafe_arena_set_allocated_gaia_password_reuse_event(::sync_pb::GaiaPasswordReuse* gaia_password_reuse_event) {
  clear_event();
  if (gaia_password_reuse_event) {
    set_has_gaia_password_reuse_event();
    event_.gaia_password_reuse_event_ = gaia_password_reuse_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.UserEventSpecifics.gaia_password_reuse_event)
}
inline ::sync_pb::GaiaPasswordReuse* UserEventSpecifics::_internal_mutable_gaia_password_reuse_event() {
  if (!_internal_has_gaia_password_reuse_event()) {
    clear_event();
    set_has_gaia_password_reuse_event();
    event_.gaia_password_reuse_event_ = CreateMaybeMessage< ::sync_pb::GaiaPasswordReuse >(GetArenaForAllocation());
  }
  return event_.gaia_password_reuse_event_;
}
inline ::sync_pb::GaiaPasswordReuse* UserEventSpecifics::mutable_gaia_password_reuse_event() {
  ::sync_pb::GaiaPasswordReuse* _msg = _internal_mutable_gaia_password_reuse_event();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.gaia_password_reuse_event)
  return _msg;
}

// .sync_pb.UserEventSpecifics.GaiaPasswordCaptured gaia_password_captured_event = 15;
inline bool UserEventSpecifics::_internal_has_gaia_password_captured_event() const {
  return event_case() == kGaiaPasswordCapturedEvent;
}
inline bool UserEventSpecifics::has_gaia_password_captured_event() const {
  return _internal_has_gaia_password_captured_event();
}
inline void UserEventSpecifics::set_has_gaia_password_captured_event() {
  _oneof_case_[0] = kGaiaPasswordCapturedEvent;
}
inline void UserEventSpecifics::clear_gaia_password_captured_event() {
  if (_internal_has_gaia_password_captured_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.gaia_password_captured_event_;
    }
    clear_has_event();
  }
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* UserEventSpecifics::release_gaia_password_captured_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.gaia_password_captured_event)
  if (_internal_has_gaia_password_captured_event()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* temp = event_.gaia_password_captured_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.gaia_password_captured_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured& UserEventSpecifics::_internal_gaia_password_captured_event() const {
  return _internal_has_gaia_password_captured_event()
      ? *event_.gaia_password_captured_event_
      : reinterpret_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured&>(::sync_pb::_UserEventSpecifics_GaiaPasswordCaptured_default_instance_);
}
inline const ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured& UserEventSpecifics::gaia_password_captured_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.gaia_password_captured_event)
  return _internal_gaia_password_captured_event();
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* UserEventSpecifics::unsafe_arena_release_gaia_password_captured_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.UserEventSpecifics.gaia_password_captured_event)
  if (_internal_has_gaia_password_captured_event()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* temp = event_.gaia_password_captured_event_;
    event_.gaia_password_captured_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserEventSpecifics::unsafe_arena_set_allocated_gaia_password_captured_event(::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* gaia_password_captured_event) {
  clear_event();
  if (gaia_password_captured_event) {
    set_has_gaia_password_captured_event();
    event_.gaia_password_captured_event_ = gaia_password_captured_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.UserEventSpecifics.gaia_password_captured_event)
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* UserEventSpecifics::_internal_mutable_gaia_password_captured_event() {
  if (!_internal_has_gaia_password_captured_event()) {
    clear_event();
    set_has_gaia_password_captured_event();
    event_.gaia_password_captured_event_ = CreateMaybeMessage< ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured >(GetArenaForAllocation());
  }
  return event_.gaia_password_captured_event_;
}
inline ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* UserEventSpecifics::mutable_gaia_password_captured_event() {
  ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured* _msg = _internal_mutable_gaia_password_captured_event();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.gaia_password_captured_event)
  return _msg;
}

// .sync_pb.UserEventSpecifics.FlocIdComputed floc_id_computed_event = 16;
inline bool UserEventSpecifics::_internal_has_floc_id_computed_event() const {
  return event_case() == kFlocIdComputedEvent;
}
inline bool UserEventSpecifics::has_floc_id_computed_event() const {
  return _internal_has_floc_id_computed_event();
}
inline void UserEventSpecifics::set_has_floc_id_computed_event() {
  _oneof_case_[0] = kFlocIdComputedEvent;
}
inline void UserEventSpecifics::clear_floc_id_computed_event() {
  if (_internal_has_floc_id_computed_event()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.floc_id_computed_event_;
    }
    clear_has_event();
  }
}
inline ::sync_pb::UserEventSpecifics_FlocIdComputed* UserEventSpecifics::release_floc_id_computed_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.floc_id_computed_event)
  if (_internal_has_floc_id_computed_event()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_FlocIdComputed* temp = event_.floc_id_computed_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.floc_id_computed_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::UserEventSpecifics_FlocIdComputed& UserEventSpecifics::_internal_floc_id_computed_event() const {
  return _internal_has_floc_id_computed_event()
      ? *event_.floc_id_computed_event_
      : reinterpret_cast< ::sync_pb::UserEventSpecifics_FlocIdComputed&>(::sync_pb::_UserEventSpecifics_FlocIdComputed_default_instance_);
}
inline const ::sync_pb::UserEventSpecifics_FlocIdComputed& UserEventSpecifics::floc_id_computed_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.floc_id_computed_event)
  return _internal_floc_id_computed_event();
}
inline ::sync_pb::UserEventSpecifics_FlocIdComputed* UserEventSpecifics::unsafe_arena_release_floc_id_computed_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.UserEventSpecifics.floc_id_computed_event)
  if (_internal_has_floc_id_computed_event()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_FlocIdComputed* temp = event_.floc_id_computed_event_;
    event_.floc_id_computed_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserEventSpecifics::unsafe_arena_set_allocated_floc_id_computed_event(::sync_pb::UserEventSpecifics_FlocIdComputed* floc_id_computed_event) {
  clear_event();
  if (floc_id_computed_event) {
    set_has_floc_id_computed_event();
    event_.floc_id_computed_event_ = floc_id_computed_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.UserEventSpecifics.floc_id_computed_event)
}
inline ::sync_pb::UserEventSpecifics_FlocIdComputed* UserEventSpecifics::_internal_mutable_floc_id_computed_event() {
  if (!_internal_has_floc_id_computed_event()) {
    clear_event();
    set_has_floc_id_computed_event();
    event_.floc_id_computed_event_ = CreateMaybeMessage< ::sync_pb::UserEventSpecifics_FlocIdComputed >(GetArenaForAllocation());
  }
  return event_.floc_id_computed_event_;
}
inline ::sync_pb::UserEventSpecifics_FlocIdComputed* UserEventSpecifics::mutable_floc_id_computed_event() {
  ::sync_pb::UserEventSpecifics_FlocIdComputed* _msg = _internal_mutable_floc_id_computed_event();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.floc_id_computed_event)
  return _msg;
}

inline bool UserEventSpecifics::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void UserEventSpecifics::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline UserEventSpecifics::EventCase UserEventSpecifics::event_case() const {
  return UserEventSpecifics::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::UserEventSpecifics_Translation_Interaction> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::UserEventSpecifics_UserConsent_Feature> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::UserEventSpecifics_GaiaPasswordCaptured_EventTrigger> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::UserEventSpecifics_FlocIdComputed_EventTrigger> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fuser_5fevent_5fspecifics_2eproto
