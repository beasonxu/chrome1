// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/autofill_wallet_usage_specifics.proto

#include "components/sync/protocol/autofill_wallet_usage_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR AutofillWalletUsageSpecifics_VirtualCardUsageData::AutofillWalletUsageSpecifics_VirtualCardUsageData(
    ::_pbi::ConstantInitialized)
  : virtual_card_last_four_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , merchant_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , merchant_app_package_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , instrument_id_(int64_t{0}){}
struct AutofillWalletUsageSpecifics_VirtualCardUsageDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillWalletUsageSpecifics_VirtualCardUsageDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillWalletUsageSpecifics_VirtualCardUsageDataDefaultTypeInternal() {}
  union {
    AutofillWalletUsageSpecifics_VirtualCardUsageData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillWalletUsageSpecifics_VirtualCardUsageDataDefaultTypeInternal _AutofillWalletUsageSpecifics_VirtualCardUsageData_default_instance_;
PROTOBUF_CONSTEXPR AutofillWalletUsageSpecifics::AutofillWalletUsageSpecifics(
    ::_pbi::ConstantInitialized)
  : retrieval_time_unix_epoch_micros_()
  , _retrieval_time_unix_epoch_micros_cached_byte_size_(0)
  , guid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , _oneof_case_{}{}
struct AutofillWalletUsageSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillWalletUsageSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillWalletUsageSpecificsDefaultTypeInternal() {}
  union {
    AutofillWalletUsageSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillWalletUsageSpecificsDefaultTypeInternal _AutofillWalletUsageSpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class AutofillWalletUsageSpecifics_VirtualCardUsageData::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillWalletUsageSpecifics_VirtualCardUsageData>()._has_bits_);
  static void set_has_instrument_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_virtual_card_last_four(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_merchant_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_merchant_app_package(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AutofillWalletUsageSpecifics_VirtualCardUsageData::AutofillWalletUsageSpecifics_VirtualCardUsageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData)
}
AutofillWalletUsageSpecifics_VirtualCardUsageData::AutofillWalletUsageSpecifics_VirtualCardUsageData(const AutofillWalletUsageSpecifics_VirtualCardUsageData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  virtual_card_last_four_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    virtual_card_last_four_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_virtual_card_last_four()) {
    virtual_card_last_four_.Set(from._internal_virtual_card_last_four(), 
      GetArenaForAllocation());
  }
  merchant_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    merchant_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_merchant_url()) {
    merchant_url_.Set(from._internal_merchant_url(), 
      GetArenaForAllocation());
  }
  merchant_app_package_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    merchant_app_package_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_merchant_app_package()) {
    merchant_app_package_.Set(from._internal_merchant_app_package(), 
      GetArenaForAllocation());
  }
  instrument_id_ = from.instrument_id_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData)
}

inline void AutofillWalletUsageSpecifics_VirtualCardUsageData::SharedCtor() {
virtual_card_last_four_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  virtual_card_last_four_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
merchant_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  merchant_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
merchant_app_package_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  merchant_app_package_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instrument_id_ = int64_t{0};
}

AutofillWalletUsageSpecifics_VirtualCardUsageData::~AutofillWalletUsageSpecifics_VirtualCardUsageData() {
  // @@protoc_insertion_point(destructor:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillWalletUsageSpecifics_VirtualCardUsageData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  virtual_card_last_four_.Destroy();
  merchant_url_.Destroy();
  merchant_app_package_.Destroy();
}

void AutofillWalletUsageSpecifics_VirtualCardUsageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillWalletUsageSpecifics_VirtualCardUsageData::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      virtual_card_last_four_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      merchant_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      merchant_app_package_.ClearNonDefaultToEmpty();
    }
  }
  instrument_id_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillWalletUsageSpecifics_VirtualCardUsageData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 instrument_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_instrument_id(&has_bits);
          instrument_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string virtual_card_last_four = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_virtual_card_last_four();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string merchant_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_merchant_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string merchant_app_package = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_merchant_app_package();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillWalletUsageSpecifics_VirtualCardUsageData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 instrument_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_instrument_id(), target);
  }

  // optional string virtual_card_last_four = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_virtual_card_last_four(), target);
  }

  // optional string merchant_url = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_merchant_url(), target);
  }

  // optional string merchant_app_package = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_merchant_app_package(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData)
  return target;
}

size_t AutofillWalletUsageSpecifics_VirtualCardUsageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string virtual_card_last_four = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_virtual_card_last_four());
    }

    // optional string merchant_url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_merchant_url());
    }

    // optional string merchant_app_package = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_merchant_app_package());
    }

    // optional int64 instrument_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_instrument_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillWalletUsageSpecifics_VirtualCardUsageData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillWalletUsageSpecifics_VirtualCardUsageData*>(
      &from));
}

void AutofillWalletUsageSpecifics_VirtualCardUsageData::MergeFrom(const AutofillWalletUsageSpecifics_VirtualCardUsageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_virtual_card_last_four(from._internal_virtual_card_last_four());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_merchant_url(from._internal_merchant_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_merchant_app_package(from._internal_merchant_app_package());
    }
    if (cached_has_bits & 0x00000008u) {
      instrument_id_ = from.instrument_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillWalletUsageSpecifics_VirtualCardUsageData::CopyFrom(const AutofillWalletUsageSpecifics_VirtualCardUsageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillWalletUsageSpecifics_VirtualCardUsageData::IsInitialized() const {
  return true;
}

void AutofillWalletUsageSpecifics_VirtualCardUsageData::InternalSwap(AutofillWalletUsageSpecifics_VirtualCardUsageData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &virtual_card_last_four_, lhs_arena,
      &other->virtual_card_last_four_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &merchant_url_, lhs_arena,
      &other->merchant_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &merchant_app_package_, lhs_arena,
      &other->merchant_app_package_, rhs_arena
  );
  swap(instrument_id_, other->instrument_id_);
}

std::string AutofillWalletUsageSpecifics_VirtualCardUsageData::GetTypeName() const {
  return "sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData";
}


// ===================================================================

class AutofillWalletUsageSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillWalletUsageSpecifics>()._has_bits_);
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData& virtual_card_usage_data(const AutofillWalletUsageSpecifics* msg);
};

const ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData&
AutofillWalletUsageSpecifics::_Internal::virtual_card_usage_data(const AutofillWalletUsageSpecifics* msg) {
  return *msg->usage_data_type_.virtual_card_usage_data_;
}
void AutofillWalletUsageSpecifics::set_allocated_virtual_card_usage_data(::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData* virtual_card_usage_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_usage_data_type();
  if (virtual_card_usage_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(virtual_card_usage_data);
    if (message_arena != submessage_arena) {
      virtual_card_usage_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtual_card_usage_data, submessage_arena);
    }
    set_has_virtual_card_usage_data();
    usage_data_type_.virtual_card_usage_data_ = virtual_card_usage_data;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillWalletUsageSpecifics.virtual_card_usage_data)
}
AutofillWalletUsageSpecifics::AutofillWalletUsageSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  retrieval_time_unix_epoch_micros_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.AutofillWalletUsageSpecifics)
}
AutofillWalletUsageSpecifics::AutofillWalletUsageSpecifics(const AutofillWalletUsageSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      retrieval_time_unix_epoch_micros_(from.retrieval_time_unix_epoch_micros_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_guid()) {
    guid_.Set(from._internal_guid(), 
      GetArenaForAllocation());
  }
  clear_has_usage_data_type();
  switch (from.usage_data_type_case()) {
    case kVirtualCardUsageData: {
      _internal_mutable_virtual_card_usage_data()->::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData::MergeFrom(from._internal_virtual_card_usage_data());
      break;
    }
    case USAGE_DATA_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.AutofillWalletUsageSpecifics)
}

inline void AutofillWalletUsageSpecifics::SharedCtor() {
guid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  guid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_usage_data_type();
}

AutofillWalletUsageSpecifics::~AutofillWalletUsageSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.AutofillWalletUsageSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillWalletUsageSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  guid_.Destroy();
  if (has_usage_data_type()) {
    clear_usage_data_type();
  }
}

void AutofillWalletUsageSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillWalletUsageSpecifics::clear_usage_data_type() {
// @@protoc_insertion_point(one_of_clear_start:sync_pb.AutofillWalletUsageSpecifics)
  switch (usage_data_type_case()) {
    case kVirtualCardUsageData: {
      if (GetArenaForAllocation() == nullptr) {
        delete usage_data_type_.virtual_card_usage_data_;
      }
      break;
    }
    case USAGE_DATA_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = USAGE_DATA_TYPE_NOT_SET;
}


void AutofillWalletUsageSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AutofillWalletUsageSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retrieval_time_unix_epoch_micros_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    guid_.ClearNonDefaultToEmpty();
  }
  clear_usage_data_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillWalletUsageSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData virtual_card_usage_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtual_card_usage_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 retrieval_time_unix_epoch_micros = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_retrieval_time_unix_epoch_micros(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_retrieval_time_unix_epoch_micros(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillWalletUsageSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.AutofillWalletUsageSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_guid(), target);
  }

  // .sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData virtual_card_usage_data = 2;
  if (_internal_has_virtual_card_usage_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::virtual_card_usage_data(this),
        _Internal::virtual_card_usage_data(this).GetCachedSize(), target, stream);
  }

  // repeated int64 retrieval_time_unix_epoch_micros = 3 [packed = true];
  {
    int byte_size = _retrieval_time_unix_epoch_micros_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_retrieval_time_unix_epoch_micros(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.AutofillWalletUsageSpecifics)
  return target;
}

size_t AutofillWalletUsageSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AutofillWalletUsageSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 retrieval_time_unix_epoch_micros = 3 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->retrieval_time_unix_epoch_micros_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _retrieval_time_unix_epoch_micros_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional string guid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guid());
  }

  switch (usage_data_type_case()) {
    // .sync_pb.AutofillWalletUsageSpecifics.VirtualCardUsageData virtual_card_usage_data = 2;
    case kVirtualCardUsageData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *usage_data_type_.virtual_card_usage_data_);
      break;
    }
    case USAGE_DATA_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillWalletUsageSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillWalletUsageSpecifics*>(
      &from));
}

void AutofillWalletUsageSpecifics::MergeFrom(const AutofillWalletUsageSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AutofillWalletUsageSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  retrieval_time_unix_epoch_micros_.MergeFrom(from.retrieval_time_unix_epoch_micros_);
  if (from._internal_has_guid()) {
    _internal_set_guid(from._internal_guid());
  }
  switch (from.usage_data_type_case()) {
    case kVirtualCardUsageData: {
      _internal_mutable_virtual_card_usage_data()->::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData::MergeFrom(from._internal_virtual_card_usage_data());
      break;
    }
    case USAGE_DATA_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillWalletUsageSpecifics::CopyFrom(const AutofillWalletUsageSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AutofillWalletUsageSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillWalletUsageSpecifics::IsInitialized() const {
  return true;
}

void AutofillWalletUsageSpecifics::InternalSwap(AutofillWalletUsageSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  retrieval_time_unix_epoch_micros_.InternalSwap(&other->retrieval_time_unix_epoch_micros_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &guid_, lhs_arena,
      &other->guid_, rhs_arena
  );
  swap(usage_data_type_, other->usage_data_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string AutofillWalletUsageSpecifics::GetTypeName() const {
  return "sync_pb.AutofillWalletUsageSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData*
Arena::CreateMaybeMessage< ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::AutofillWalletUsageSpecifics_VirtualCardUsageData >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::AutofillWalletUsageSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::AutofillWalletUsageSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::AutofillWalletUsageSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
