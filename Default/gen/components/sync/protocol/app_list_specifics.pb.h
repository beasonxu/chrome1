// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/app_list_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fapp_5flist_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fapp_5flist_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fapp_5flist_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fapp_5flist_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class AppListSpecifics;
struct AppListSpecificsDefaultTypeInternal;
extern AppListSpecificsDefaultTypeInternal _AppListSpecifics_default_instance_;
class AppListSpecifics_IconColor;
struct AppListSpecifics_IconColorDefaultTypeInternal;
extern AppListSpecifics_IconColorDefaultTypeInternal _AppListSpecifics_IconColor_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::AppListSpecifics* Arena::CreateMaybeMessage<::sync_pb::AppListSpecifics>(Arena*);
template<> ::sync_pb::AppListSpecifics_IconColor* Arena::CreateMaybeMessage<::sync_pb::AppListSpecifics_IconColor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum AppListSpecifics_AppListItemType : int {
  AppListSpecifics_AppListItemType_TYPE_APP = 1,
  AppListSpecifics_AppListItemType_TYPE_REMOVE_DEFAULT_APP = 2,
  AppListSpecifics_AppListItemType_TYPE_FOLDER = 3,
  AppListSpecifics_AppListItemType_TYPE_OBSOLETE_URL = 4,
  AppListSpecifics_AppListItemType_TYPE_PAGE_BREAK = 5
};
bool AppListSpecifics_AppListItemType_IsValid(int value);
constexpr AppListSpecifics_AppListItemType AppListSpecifics_AppListItemType_AppListItemType_MIN = AppListSpecifics_AppListItemType_TYPE_APP;
constexpr AppListSpecifics_AppListItemType AppListSpecifics_AppListItemType_AppListItemType_MAX = AppListSpecifics_AppListItemType_TYPE_PAGE_BREAK;
constexpr int AppListSpecifics_AppListItemType_AppListItemType_ARRAYSIZE = AppListSpecifics_AppListItemType_AppListItemType_MAX + 1;

const std::string& AppListSpecifics_AppListItemType_Name(AppListSpecifics_AppListItemType value);
template<typename T>
inline const std::string& AppListSpecifics_AppListItemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AppListSpecifics_AppListItemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AppListSpecifics_AppListItemType_Name.");
  return AppListSpecifics_AppListItemType_Name(static_cast<AppListSpecifics_AppListItemType>(enum_t_value));
}
bool AppListSpecifics_AppListItemType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AppListSpecifics_AppListItemType* value);
enum AppListSpecifics_ColorGroup : int {
  AppListSpecifics_ColorGroup_COLOR_EMPTY = 0,
  AppListSpecifics_ColorGroup_COLOR_WHITE = 1,
  AppListSpecifics_ColorGroup_COLOR_RED = 2,
  AppListSpecifics_ColorGroup_COLOR_ORANGE = 3,
  AppListSpecifics_ColorGroup_COLOR_YELLOW = 4,
  AppListSpecifics_ColorGroup_COLOR_GREEN = 5,
  AppListSpecifics_ColorGroup_COLOR_BLUE = 6,
  AppListSpecifics_ColorGroup_COLOR_MAGENTA = 7,
  AppListSpecifics_ColorGroup_COLOR_BLACK = 8
};
bool AppListSpecifics_ColorGroup_IsValid(int value);
constexpr AppListSpecifics_ColorGroup AppListSpecifics_ColorGroup_ColorGroup_MIN = AppListSpecifics_ColorGroup_COLOR_EMPTY;
constexpr AppListSpecifics_ColorGroup AppListSpecifics_ColorGroup_ColorGroup_MAX = AppListSpecifics_ColorGroup_COLOR_BLACK;
constexpr int AppListSpecifics_ColorGroup_ColorGroup_ARRAYSIZE = AppListSpecifics_ColorGroup_ColorGroup_MAX + 1;

const std::string& AppListSpecifics_ColorGroup_Name(AppListSpecifics_ColorGroup value);
template<typename T>
inline const std::string& AppListSpecifics_ColorGroup_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AppListSpecifics_ColorGroup>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AppListSpecifics_ColorGroup_Name.");
  return AppListSpecifics_ColorGroup_Name(static_cast<AppListSpecifics_ColorGroup>(enum_t_value));
}
bool AppListSpecifics_ColorGroup_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AppListSpecifics_ColorGroup* value);
// ===================================================================

class AppListSpecifics_IconColor final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AppListSpecifics.IconColor) */ {
 public:
  inline AppListSpecifics_IconColor() : AppListSpecifics_IconColor(nullptr) {}
  ~AppListSpecifics_IconColor() override;
  explicit PROTOBUF_CONSTEXPR AppListSpecifics_IconColor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppListSpecifics_IconColor(const AppListSpecifics_IconColor& from);
  AppListSpecifics_IconColor(AppListSpecifics_IconColor&& from) noexcept
    : AppListSpecifics_IconColor() {
    *this = ::std::move(from);
  }

  inline AppListSpecifics_IconColor& operator=(const AppListSpecifics_IconColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppListSpecifics_IconColor& operator=(AppListSpecifics_IconColor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AppListSpecifics_IconColor& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppListSpecifics_IconColor* internal_default_instance() {
    return reinterpret_cast<const AppListSpecifics_IconColor*>(
               &_AppListSpecifics_IconColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AppListSpecifics_IconColor& a, AppListSpecifics_IconColor& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AppListSpecifics_IconColor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppListSpecifics_IconColor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppListSpecifics_IconColor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppListSpecifics_IconColor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AppListSpecifics_IconColor& from);
  void MergeFrom(const AppListSpecifics_IconColor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppListSpecifics_IconColor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AppListSpecifics.IconColor";
  }
  protected:
  explicit AppListSpecifics_IconColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackgroundColorFieldNumber = 1,
    kHueFieldNumber = 2,
  };
  // optional .sync_pb.AppListSpecifics.ColorGroup background_color = 1;
  bool has_background_color() const;
  private:
  bool _internal_has_background_color() const;
  public:
  void clear_background_color();
  ::sync_pb::AppListSpecifics_ColorGroup background_color() const;
  void set_background_color(::sync_pb::AppListSpecifics_ColorGroup value);
  private:
  ::sync_pb::AppListSpecifics_ColorGroup _internal_background_color() const;
  void _internal_set_background_color(::sync_pb::AppListSpecifics_ColorGroup value);
  public:

  // optional int32 hue = 2;
  bool has_hue() const;
  private:
  bool _internal_has_hue() const;
  public:
  void clear_hue();
  int32_t hue() const;
  void set_hue(int32_t value);
  private:
  int32_t _internal_hue() const;
  void _internal_set_hue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.AppListSpecifics.IconColor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int background_color_;
  int32_t hue_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fapp_5flist_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class AppListSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AppListSpecifics) */ {
 public:
  inline AppListSpecifics() : AppListSpecifics(nullptr) {}
  ~AppListSpecifics() override;
  explicit PROTOBUF_CONSTEXPR AppListSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppListSpecifics(const AppListSpecifics& from);
  AppListSpecifics(AppListSpecifics&& from) noexcept
    : AppListSpecifics() {
    *this = ::std::move(from);
  }

  inline AppListSpecifics& operator=(const AppListSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppListSpecifics& operator=(AppListSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AppListSpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppListSpecifics* internal_default_instance() {
    return reinterpret_cast<const AppListSpecifics*>(
               &_AppListSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AppListSpecifics& a, AppListSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AppListSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppListSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppListSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppListSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AppListSpecifics& from);
  void MergeFrom(const AppListSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppListSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AppListSpecifics";
  }
  protected:
  explicit AppListSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AppListSpecifics_IconColor IconColor;

  typedef AppListSpecifics_AppListItemType AppListItemType;
  static constexpr AppListItemType TYPE_APP =
    AppListSpecifics_AppListItemType_TYPE_APP;
  static constexpr AppListItemType TYPE_REMOVE_DEFAULT_APP =
    AppListSpecifics_AppListItemType_TYPE_REMOVE_DEFAULT_APP;
  static constexpr AppListItemType TYPE_FOLDER =
    AppListSpecifics_AppListItemType_TYPE_FOLDER;
  static constexpr AppListItemType TYPE_OBSOLETE_URL =
    AppListSpecifics_AppListItemType_TYPE_OBSOLETE_URL;
  static constexpr AppListItemType TYPE_PAGE_BREAK =
    AppListSpecifics_AppListItemType_TYPE_PAGE_BREAK;
  static inline bool AppListItemType_IsValid(int value) {
    return AppListSpecifics_AppListItemType_IsValid(value);
  }
  static constexpr AppListItemType AppListItemType_MIN =
    AppListSpecifics_AppListItemType_AppListItemType_MIN;
  static constexpr AppListItemType AppListItemType_MAX =
    AppListSpecifics_AppListItemType_AppListItemType_MAX;
  static constexpr int AppListItemType_ARRAYSIZE =
    AppListSpecifics_AppListItemType_AppListItemType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AppListItemType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AppListItemType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AppListItemType_Name.");
    return AppListSpecifics_AppListItemType_Name(enum_t_value);
  }
  static inline bool AppListItemType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AppListItemType* value) {
    return AppListSpecifics_AppListItemType_Parse(name, value);
  }

  typedef AppListSpecifics_ColorGroup ColorGroup;
  static constexpr ColorGroup COLOR_EMPTY =
    AppListSpecifics_ColorGroup_COLOR_EMPTY;
  static constexpr ColorGroup COLOR_WHITE =
    AppListSpecifics_ColorGroup_COLOR_WHITE;
  static constexpr ColorGroup COLOR_RED =
    AppListSpecifics_ColorGroup_COLOR_RED;
  static constexpr ColorGroup COLOR_ORANGE =
    AppListSpecifics_ColorGroup_COLOR_ORANGE;
  static constexpr ColorGroup COLOR_YELLOW =
    AppListSpecifics_ColorGroup_COLOR_YELLOW;
  static constexpr ColorGroup COLOR_GREEN =
    AppListSpecifics_ColorGroup_COLOR_GREEN;
  static constexpr ColorGroup COLOR_BLUE =
    AppListSpecifics_ColorGroup_COLOR_BLUE;
  static constexpr ColorGroup COLOR_MAGENTA =
    AppListSpecifics_ColorGroup_COLOR_MAGENTA;
  static constexpr ColorGroup COLOR_BLACK =
    AppListSpecifics_ColorGroup_COLOR_BLACK;
  static inline bool ColorGroup_IsValid(int value) {
    return AppListSpecifics_ColorGroup_IsValid(value);
  }
  static constexpr ColorGroup ColorGroup_MIN =
    AppListSpecifics_ColorGroup_ColorGroup_MIN;
  static constexpr ColorGroup ColorGroup_MAX =
    AppListSpecifics_ColorGroup_ColorGroup_MAX;
  static constexpr int ColorGroup_ARRAYSIZE =
    AppListSpecifics_ColorGroup_ColorGroup_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ColorGroup_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ColorGroup>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ColorGroup_Name.");
    return AppListSpecifics_ColorGroup_Name(enum_t_value);
  }
  static inline bool ColorGroup_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ColorGroup* value) {
    return AppListSpecifics_ColorGroup_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kItemNameFieldNumber = 3,
    kParentIdFieldNumber = 4,
    kOBSOLETEPageOrdinalFieldNumber = 5,
    kItemOrdinalFieldNumber = 6,
    kItemPinOrdinalFieldNumber = 7,
    kItemColorFieldNumber = 8,
    kItemTypeFieldNumber = 2,
  };
  // optional string item_id = 1;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  const std::string& item_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_id();
  PROTOBUF_NODISCARD std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);
  private:
  const std::string& _internal_item_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_id(const std::string& value);
  std::string* _internal_mutable_item_id();
  public:

  // optional string item_name = 3;
  bool has_item_name() const;
  private:
  bool _internal_has_item_name() const;
  public:
  void clear_item_name();
  const std::string& item_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_name();
  PROTOBUF_NODISCARD std::string* release_item_name();
  void set_allocated_item_name(std::string* item_name);
  private:
  const std::string& _internal_item_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_name(const std::string& value);
  std::string* _internal_mutable_item_name();
  public:

  // optional string parent_id = 4;
  bool has_parent_id() const;
  private:
  bool _internal_has_parent_id() const;
  public:
  void clear_parent_id();
  const std::string& parent_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent_id();
  PROTOBUF_NODISCARD std::string* release_parent_id();
  void set_allocated_parent_id(std::string* parent_id);
  private:
  const std::string& _internal_parent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_id(const std::string& value);
  std::string* _internal_mutable_parent_id();
  public:

  // optional string OBSOLETE_page_ordinal = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_obsolete_page_ordinal() const;
  private:
  bool _internal_has_obsolete_page_ordinal() const;
  public:
  PROTOBUF_DEPRECATED void clear_obsolete_page_ordinal();
  PROTOBUF_DEPRECATED const std::string& obsolete_page_ordinal() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_obsolete_page_ordinal(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_obsolete_page_ordinal();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_obsolete_page_ordinal();
  PROTOBUF_DEPRECATED void set_allocated_obsolete_page_ordinal(std::string* obsolete_page_ordinal);
  private:
  const std::string& _internal_obsolete_page_ordinal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_obsolete_page_ordinal(const std::string& value);
  std::string* _internal_mutable_obsolete_page_ordinal();
  public:

  // optional string item_ordinal = 6;
  bool has_item_ordinal() const;
  private:
  bool _internal_has_item_ordinal() const;
  public:
  void clear_item_ordinal();
  const std::string& item_ordinal() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_ordinal(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_ordinal();
  PROTOBUF_NODISCARD std::string* release_item_ordinal();
  void set_allocated_item_ordinal(std::string* item_ordinal);
  private:
  const std::string& _internal_item_ordinal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_ordinal(const std::string& value);
  std::string* _internal_mutable_item_ordinal();
  public:

  // optional string item_pin_ordinal = 7;
  bool has_item_pin_ordinal() const;
  private:
  bool _internal_has_item_pin_ordinal() const;
  public:
  void clear_item_pin_ordinal();
  const std::string& item_pin_ordinal() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_pin_ordinal(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_pin_ordinal();
  PROTOBUF_NODISCARD std::string* release_item_pin_ordinal();
  void set_allocated_item_pin_ordinal(std::string* item_pin_ordinal);
  private:
  const std::string& _internal_item_pin_ordinal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_pin_ordinal(const std::string& value);
  std::string* _internal_mutable_item_pin_ordinal();
  public:

  // optional .sync_pb.AppListSpecifics.IconColor item_color = 8;
  bool has_item_color() const;
  private:
  bool _internal_has_item_color() const;
  public:
  void clear_item_color();
  const ::sync_pb::AppListSpecifics_IconColor& item_color() const;
  PROTOBUF_NODISCARD ::sync_pb::AppListSpecifics_IconColor* release_item_color();
  ::sync_pb::AppListSpecifics_IconColor* mutable_item_color();
  void set_allocated_item_color(::sync_pb::AppListSpecifics_IconColor* item_color);
  private:
  const ::sync_pb::AppListSpecifics_IconColor& _internal_item_color() const;
  ::sync_pb::AppListSpecifics_IconColor* _internal_mutable_item_color();
  public:
  void unsafe_arena_set_allocated_item_color(
      ::sync_pb::AppListSpecifics_IconColor* item_color);
  ::sync_pb::AppListSpecifics_IconColor* unsafe_arena_release_item_color();

  // optional .sync_pb.AppListSpecifics.AppListItemType item_type = 2;
  bool has_item_type() const;
  private:
  bool _internal_has_item_type() const;
  public:
  void clear_item_type();
  ::sync_pb::AppListSpecifics_AppListItemType item_type() const;
  void set_item_type(::sync_pb::AppListSpecifics_AppListItemType value);
  private:
  ::sync_pb::AppListSpecifics_AppListItemType _internal_item_type() const;
  void _internal_set_item_type(::sync_pb::AppListSpecifics_AppListItemType value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.AppListSpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obsolete_page_ordinal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_ordinal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_pin_ordinal_;
  ::sync_pb::AppListSpecifics_IconColor* item_color_;
  int item_type_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fapp_5flist_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AppListSpecifics_IconColor

// optional .sync_pb.AppListSpecifics.ColorGroup background_color = 1;
inline bool AppListSpecifics_IconColor::_internal_has_background_color() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppListSpecifics_IconColor::has_background_color() const {
  return _internal_has_background_color();
}
inline void AppListSpecifics_IconColor::clear_background_color() {
  background_color_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::sync_pb::AppListSpecifics_ColorGroup AppListSpecifics_IconColor::_internal_background_color() const {
  return static_cast< ::sync_pb::AppListSpecifics_ColorGroup >(background_color_);
}
inline ::sync_pb::AppListSpecifics_ColorGroup AppListSpecifics_IconColor::background_color() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppListSpecifics.IconColor.background_color)
  return _internal_background_color();
}
inline void AppListSpecifics_IconColor::_internal_set_background_color(::sync_pb::AppListSpecifics_ColorGroup value) {
  assert(::sync_pb::AppListSpecifics_ColorGroup_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  background_color_ = value;
}
inline void AppListSpecifics_IconColor::set_background_color(::sync_pb::AppListSpecifics_ColorGroup value) {
  _internal_set_background_color(value);
  // @@protoc_insertion_point(field_set:sync_pb.AppListSpecifics.IconColor.background_color)
}

// optional int32 hue = 2;
inline bool AppListSpecifics_IconColor::_internal_has_hue() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppListSpecifics_IconColor::has_hue() const {
  return _internal_has_hue();
}
inline void AppListSpecifics_IconColor::clear_hue() {
  hue_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t AppListSpecifics_IconColor::_internal_hue() const {
  return hue_;
}
inline int32_t AppListSpecifics_IconColor::hue() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppListSpecifics.IconColor.hue)
  return _internal_hue();
}
inline void AppListSpecifics_IconColor::_internal_set_hue(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  hue_ = value;
}
inline void AppListSpecifics_IconColor::set_hue(int32_t value) {
  _internal_set_hue(value);
  // @@protoc_insertion_point(field_set:sync_pb.AppListSpecifics.IconColor.hue)
}

// -------------------------------------------------------------------

// AppListSpecifics

// optional string item_id = 1;
inline bool AppListSpecifics::_internal_has_item_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppListSpecifics::has_item_id() const {
  return _internal_has_item_id();
}
inline void AppListSpecifics::clear_item_id() {
  item_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppListSpecifics::item_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppListSpecifics.item_id)
  return _internal_item_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppListSpecifics::set_item_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 item_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AppListSpecifics.item_id)
}
inline std::string* AppListSpecifics::mutable_item_id() {
  std::string* _s = _internal_mutable_item_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppListSpecifics.item_id)
  return _s;
}
inline const std::string& AppListSpecifics::_internal_item_id() const {
  return item_id_.Get();
}
inline void AppListSpecifics::_internal_set_item_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  item_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AppListSpecifics::_internal_mutable_item_id() {
  _has_bits_[0] |= 0x00000001u;
  return item_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AppListSpecifics::release_item_id() {
  // @@protoc_insertion_point(field_release:sync_pb.AppListSpecifics.item_id)
  if (!_internal_has_item_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = item_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_id_.IsDefault()) {
    item_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppListSpecifics::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  item_id_.SetAllocated(item_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_id_.IsDefault()) {
    item_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppListSpecifics.item_id)
}

// optional .sync_pb.AppListSpecifics.AppListItemType item_type = 2;
inline bool AppListSpecifics::_internal_has_item_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AppListSpecifics::has_item_type() const {
  return _internal_has_item_type();
}
inline void AppListSpecifics::clear_item_type() {
  item_type_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::sync_pb::AppListSpecifics_AppListItemType AppListSpecifics::_internal_item_type() const {
  return static_cast< ::sync_pb::AppListSpecifics_AppListItemType >(item_type_);
}
inline ::sync_pb::AppListSpecifics_AppListItemType AppListSpecifics::item_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppListSpecifics.item_type)
  return _internal_item_type();
}
inline void AppListSpecifics::_internal_set_item_type(::sync_pb::AppListSpecifics_AppListItemType value) {
  assert(::sync_pb::AppListSpecifics_AppListItemType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  item_type_ = value;
}
inline void AppListSpecifics::set_item_type(::sync_pb::AppListSpecifics_AppListItemType value) {
  _internal_set_item_type(value);
  // @@protoc_insertion_point(field_set:sync_pb.AppListSpecifics.item_type)
}

// optional string item_name = 3;
inline bool AppListSpecifics::_internal_has_item_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppListSpecifics::has_item_name() const {
  return _internal_has_item_name();
}
inline void AppListSpecifics::clear_item_name() {
  item_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AppListSpecifics::item_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppListSpecifics.item_name)
  return _internal_item_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppListSpecifics::set_item_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 item_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AppListSpecifics.item_name)
}
inline std::string* AppListSpecifics::mutable_item_name() {
  std::string* _s = _internal_mutable_item_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppListSpecifics.item_name)
  return _s;
}
inline const std::string& AppListSpecifics::_internal_item_name() const {
  return item_name_.Get();
}
inline void AppListSpecifics::_internal_set_item_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  item_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AppListSpecifics::_internal_mutable_item_name() {
  _has_bits_[0] |= 0x00000002u;
  return item_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AppListSpecifics::release_item_name() {
  // @@protoc_insertion_point(field_release:sync_pb.AppListSpecifics.item_name)
  if (!_internal_has_item_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = item_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_name_.IsDefault()) {
    item_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppListSpecifics::set_allocated_item_name(std::string* item_name) {
  if (item_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  item_name_.SetAllocated(item_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_name_.IsDefault()) {
    item_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppListSpecifics.item_name)
}

// optional string parent_id = 4;
inline bool AppListSpecifics::_internal_has_parent_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppListSpecifics::has_parent_id() const {
  return _internal_has_parent_id();
}
inline void AppListSpecifics::clear_parent_id() {
  parent_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AppListSpecifics::parent_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppListSpecifics.parent_id)
  return _internal_parent_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppListSpecifics::set_parent_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 parent_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AppListSpecifics.parent_id)
}
inline std::string* AppListSpecifics::mutable_parent_id() {
  std::string* _s = _internal_mutable_parent_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppListSpecifics.parent_id)
  return _s;
}
inline const std::string& AppListSpecifics::_internal_parent_id() const {
  return parent_id_.Get();
}
inline void AppListSpecifics::_internal_set_parent_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  parent_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AppListSpecifics::_internal_mutable_parent_id() {
  _has_bits_[0] |= 0x00000004u;
  return parent_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AppListSpecifics::release_parent_id() {
  // @@protoc_insertion_point(field_release:sync_pb.AppListSpecifics.parent_id)
  if (!_internal_has_parent_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = parent_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_id_.IsDefault()) {
    parent_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppListSpecifics::set_allocated_parent_id(std::string* parent_id) {
  if (parent_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  parent_id_.SetAllocated(parent_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_id_.IsDefault()) {
    parent_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppListSpecifics.parent_id)
}

// optional string OBSOLETE_page_ordinal = 5 [deprecated = true];
inline bool AppListSpecifics::_internal_has_obsolete_page_ordinal() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AppListSpecifics::has_obsolete_page_ordinal() const {
  return _internal_has_obsolete_page_ordinal();
}
inline void AppListSpecifics::clear_obsolete_page_ordinal() {
  obsolete_page_ordinal_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AppListSpecifics::obsolete_page_ordinal() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppListSpecifics.OBSOLETE_page_ordinal)
  return _internal_obsolete_page_ordinal();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppListSpecifics::set_obsolete_page_ordinal(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 obsolete_page_ordinal_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AppListSpecifics.OBSOLETE_page_ordinal)
}
inline std::string* AppListSpecifics::mutable_obsolete_page_ordinal() {
  std::string* _s = _internal_mutable_obsolete_page_ordinal();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppListSpecifics.OBSOLETE_page_ordinal)
  return _s;
}
inline const std::string& AppListSpecifics::_internal_obsolete_page_ordinal() const {
  return obsolete_page_ordinal_.Get();
}
inline void AppListSpecifics::_internal_set_obsolete_page_ordinal(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  obsolete_page_ordinal_.Set(value, GetArenaForAllocation());
}
inline std::string* AppListSpecifics::_internal_mutable_obsolete_page_ordinal() {
  _has_bits_[0] |= 0x00000008u;
  return obsolete_page_ordinal_.Mutable(GetArenaForAllocation());
}
inline std::string* AppListSpecifics::release_obsolete_page_ordinal() {
  // @@protoc_insertion_point(field_release:sync_pb.AppListSpecifics.OBSOLETE_page_ordinal)
  if (!_internal_has_obsolete_page_ordinal()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = obsolete_page_ordinal_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (obsolete_page_ordinal_.IsDefault()) {
    obsolete_page_ordinal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppListSpecifics::set_allocated_obsolete_page_ordinal(std::string* obsolete_page_ordinal) {
  if (obsolete_page_ordinal != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  obsolete_page_ordinal_.SetAllocated(obsolete_page_ordinal, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (obsolete_page_ordinal_.IsDefault()) {
    obsolete_page_ordinal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppListSpecifics.OBSOLETE_page_ordinal)
}

// optional string item_ordinal = 6;
inline bool AppListSpecifics::_internal_has_item_ordinal() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AppListSpecifics::has_item_ordinal() const {
  return _internal_has_item_ordinal();
}
inline void AppListSpecifics::clear_item_ordinal() {
  item_ordinal_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AppListSpecifics::item_ordinal() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppListSpecifics.item_ordinal)
  return _internal_item_ordinal();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppListSpecifics::set_item_ordinal(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 item_ordinal_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AppListSpecifics.item_ordinal)
}
inline std::string* AppListSpecifics::mutable_item_ordinal() {
  std::string* _s = _internal_mutable_item_ordinal();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppListSpecifics.item_ordinal)
  return _s;
}
inline const std::string& AppListSpecifics::_internal_item_ordinal() const {
  return item_ordinal_.Get();
}
inline void AppListSpecifics::_internal_set_item_ordinal(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  item_ordinal_.Set(value, GetArenaForAllocation());
}
inline std::string* AppListSpecifics::_internal_mutable_item_ordinal() {
  _has_bits_[0] |= 0x00000010u;
  return item_ordinal_.Mutable(GetArenaForAllocation());
}
inline std::string* AppListSpecifics::release_item_ordinal() {
  // @@protoc_insertion_point(field_release:sync_pb.AppListSpecifics.item_ordinal)
  if (!_internal_has_item_ordinal()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = item_ordinal_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_ordinal_.IsDefault()) {
    item_ordinal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppListSpecifics::set_allocated_item_ordinal(std::string* item_ordinal) {
  if (item_ordinal != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  item_ordinal_.SetAllocated(item_ordinal, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_ordinal_.IsDefault()) {
    item_ordinal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppListSpecifics.item_ordinal)
}

// optional string item_pin_ordinal = 7;
inline bool AppListSpecifics::_internal_has_item_pin_ordinal() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AppListSpecifics::has_item_pin_ordinal() const {
  return _internal_has_item_pin_ordinal();
}
inline void AppListSpecifics::clear_item_pin_ordinal() {
  item_pin_ordinal_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AppListSpecifics::item_pin_ordinal() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppListSpecifics.item_pin_ordinal)
  return _internal_item_pin_ordinal();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppListSpecifics::set_item_pin_ordinal(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 item_pin_ordinal_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AppListSpecifics.item_pin_ordinal)
}
inline std::string* AppListSpecifics::mutable_item_pin_ordinal() {
  std::string* _s = _internal_mutable_item_pin_ordinal();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppListSpecifics.item_pin_ordinal)
  return _s;
}
inline const std::string& AppListSpecifics::_internal_item_pin_ordinal() const {
  return item_pin_ordinal_.Get();
}
inline void AppListSpecifics::_internal_set_item_pin_ordinal(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  item_pin_ordinal_.Set(value, GetArenaForAllocation());
}
inline std::string* AppListSpecifics::_internal_mutable_item_pin_ordinal() {
  _has_bits_[0] |= 0x00000020u;
  return item_pin_ordinal_.Mutable(GetArenaForAllocation());
}
inline std::string* AppListSpecifics::release_item_pin_ordinal() {
  // @@protoc_insertion_point(field_release:sync_pb.AppListSpecifics.item_pin_ordinal)
  if (!_internal_has_item_pin_ordinal()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = item_pin_ordinal_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_pin_ordinal_.IsDefault()) {
    item_pin_ordinal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppListSpecifics::set_allocated_item_pin_ordinal(std::string* item_pin_ordinal) {
  if (item_pin_ordinal != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  item_pin_ordinal_.SetAllocated(item_pin_ordinal, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_pin_ordinal_.IsDefault()) {
    item_pin_ordinal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppListSpecifics.item_pin_ordinal)
}

// optional .sync_pb.AppListSpecifics.IconColor item_color = 8;
inline bool AppListSpecifics::_internal_has_item_color() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || item_color_ != nullptr);
  return value;
}
inline bool AppListSpecifics::has_item_color() const {
  return _internal_has_item_color();
}
inline void AppListSpecifics::clear_item_color() {
  if (item_color_ != nullptr) item_color_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::sync_pb::AppListSpecifics_IconColor& AppListSpecifics::_internal_item_color() const {
  const ::sync_pb::AppListSpecifics_IconColor* p = item_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::AppListSpecifics_IconColor&>(
      ::sync_pb::_AppListSpecifics_IconColor_default_instance_);
}
inline const ::sync_pb::AppListSpecifics_IconColor& AppListSpecifics::item_color() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppListSpecifics.item_color)
  return _internal_item_color();
}
inline void AppListSpecifics::unsafe_arena_set_allocated_item_color(
    ::sync_pb::AppListSpecifics_IconColor* item_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_color_);
  }
  item_color_ = item_color;
  if (item_color) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.AppListSpecifics.item_color)
}
inline ::sync_pb::AppListSpecifics_IconColor* AppListSpecifics::release_item_color() {
  _has_bits_[0] &= ~0x00000040u;
  ::sync_pb::AppListSpecifics_IconColor* temp = item_color_;
  item_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::AppListSpecifics_IconColor* AppListSpecifics::unsafe_arena_release_item_color() {
  // @@protoc_insertion_point(field_release:sync_pb.AppListSpecifics.item_color)
  _has_bits_[0] &= ~0x00000040u;
  ::sync_pb::AppListSpecifics_IconColor* temp = item_color_;
  item_color_ = nullptr;
  return temp;
}
inline ::sync_pb::AppListSpecifics_IconColor* AppListSpecifics::_internal_mutable_item_color() {
  _has_bits_[0] |= 0x00000040u;
  if (item_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::AppListSpecifics_IconColor>(GetArenaForAllocation());
    item_color_ = p;
  }
  return item_color_;
}
inline ::sync_pb::AppListSpecifics_IconColor* AppListSpecifics::mutable_item_color() {
  ::sync_pb::AppListSpecifics_IconColor* _msg = _internal_mutable_item_color();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppListSpecifics.item_color)
  return _msg;
}
inline void AppListSpecifics::set_allocated_item_color(::sync_pb::AppListSpecifics_IconColor* item_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete item_color_;
  }
  if (item_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item_color);
    if (message_arena != submessage_arena) {
      item_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  item_color_ = item_color;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppListSpecifics.item_color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::AppListSpecifics_AppListItemType> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::AppListSpecifics_ColorGroup> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fapp_5flist_5fspecifics_2eproto
