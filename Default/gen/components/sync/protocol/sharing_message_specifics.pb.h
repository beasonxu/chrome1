// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/sharing_message_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fsharing_5fmessage_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fsharing_5fmessage_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fsharing_5fmessage_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fsharing_5fmessage_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class SharingMessageCommitError;
struct SharingMessageCommitErrorDefaultTypeInternal;
extern SharingMessageCommitErrorDefaultTypeInternal _SharingMessageCommitError_default_instance_;
class SharingMessageSpecifics;
struct SharingMessageSpecificsDefaultTypeInternal;
extern SharingMessageSpecificsDefaultTypeInternal _SharingMessageSpecifics_default_instance_;
class SharingMessageSpecifics_ChannelConfiguration;
struct SharingMessageSpecifics_ChannelConfigurationDefaultTypeInternal;
extern SharingMessageSpecifics_ChannelConfigurationDefaultTypeInternal _SharingMessageSpecifics_ChannelConfiguration_default_instance_;
class SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration;
struct SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfigurationDefaultTypeInternal;
extern SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfigurationDefaultTypeInternal _SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::SharingMessageCommitError* Arena::CreateMaybeMessage<::sync_pb::SharingMessageCommitError>(Arena*);
template<> ::sync_pb::SharingMessageSpecifics* Arena::CreateMaybeMessage<::sync_pb::SharingMessageSpecifics>(Arena*);
template<> ::sync_pb::SharingMessageSpecifics_ChannelConfiguration* Arena::CreateMaybeMessage<::sync_pb::SharingMessageSpecifics_ChannelConfiguration>(Arena*);
template<> ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* Arena::CreateMaybeMessage<::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum SharingMessageCommitError_ErrorCode : int {
  SharingMessageCommitError_ErrorCode_NONE = 0,
  SharingMessageCommitError_ErrorCode_INVALID_ARGUMENT = 1,
  SharingMessageCommitError_ErrorCode_NOT_FOUND = 2,
  SharingMessageCommitError_ErrorCode_INTERNAL = 3,
  SharingMessageCommitError_ErrorCode_UNAVAILABLE = 4,
  SharingMessageCommitError_ErrorCode_RESOURCE_EXHAUSTED = 5,
  SharingMessageCommitError_ErrorCode_UNAUTHENTICATED = 6,
  SharingMessageCommitError_ErrorCode_PERMISSION_DENIED = 7,
  SharingMessageCommitError_ErrorCode_SYNC_TURNED_OFF = 8,
  SharingMessageCommitError_ErrorCode_SYNC_NETWORK_ERROR = 9,
  SharingMessageCommitError_ErrorCode_DEPRECATED_SYNC_SERVER_OR_AUTH_ERROR = 10,
  SharingMessageCommitError_ErrorCode_SYNC_TIMEOUT = 11,
  SharingMessageCommitError_ErrorCode_SYNC_SERVER_ERROR = 12,
  SharingMessageCommitError_ErrorCode_SYNC_AUTH_ERROR = 13
};
bool SharingMessageCommitError_ErrorCode_IsValid(int value);
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError_ErrorCode_ErrorCode_MIN = SharingMessageCommitError_ErrorCode_NONE;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError_ErrorCode_ErrorCode_MAX = SharingMessageCommitError_ErrorCode_SYNC_AUTH_ERROR;
constexpr int SharingMessageCommitError_ErrorCode_ErrorCode_ARRAYSIZE = SharingMessageCommitError_ErrorCode_ErrorCode_MAX + 1;

const std::string& SharingMessageCommitError_ErrorCode_Name(SharingMessageCommitError_ErrorCode value);
template<typename T>
inline const std::string& SharingMessageCommitError_ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SharingMessageCommitError_ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SharingMessageCommitError_ErrorCode_Name.");
  return SharingMessageCommitError_ErrorCode_Name(static_cast<SharingMessageCommitError_ErrorCode>(enum_t_value));
}
bool SharingMessageCommitError_ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SharingMessageCommitError_ErrorCode* value);
// ===================================================================

class SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration) */ {
 public:
  inline SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration() : SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration(nullptr) {}
  ~SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration() override;
  explicit PROTOBUF_CONSTEXPR SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration(const SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& from);
  SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration(SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration&& from) noexcept
    : SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration() {
    *this = ::std::move(from);
  }

  inline SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& operator=(const SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& operator=(SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* internal_default_instance() {
    return reinterpret_cast<const SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration*>(
               &_SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& a, SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& from);
  void MergeFrom(const SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration";
  }
  protected:
  explicit SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kTtlFieldNumber = 2,
    kPriorityFieldNumber = 3,
  };
  // optional string token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // optional int32 ttl = 2;
  bool has_ttl() const;
  private:
  bool _internal_has_ttl() const;
  public:
  void clear_ttl();
  int32_t ttl() const;
  void set_ttl(int32_t value);
  private:
  int32_t _internal_ttl() const;
  void _internal_set_ttl(int32_t value);
  public:

  // optional int32 priority = 3;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  int32_t ttl_;
  int32_t priority_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fsharing_5fmessage_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class SharingMessageSpecifics_ChannelConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SharingMessageSpecifics.ChannelConfiguration) */ {
 public:
  inline SharingMessageSpecifics_ChannelConfiguration() : SharingMessageSpecifics_ChannelConfiguration(nullptr) {}
  ~SharingMessageSpecifics_ChannelConfiguration() override;
  explicit PROTOBUF_CONSTEXPR SharingMessageSpecifics_ChannelConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingMessageSpecifics_ChannelConfiguration(const SharingMessageSpecifics_ChannelConfiguration& from);
  SharingMessageSpecifics_ChannelConfiguration(SharingMessageSpecifics_ChannelConfiguration&& from) noexcept
    : SharingMessageSpecifics_ChannelConfiguration() {
    *this = ::std::move(from);
  }

  inline SharingMessageSpecifics_ChannelConfiguration& operator=(const SharingMessageSpecifics_ChannelConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingMessageSpecifics_ChannelConfiguration& operator=(SharingMessageSpecifics_ChannelConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingMessageSpecifics_ChannelConfiguration& default_instance() {
    return *internal_default_instance();
  }
  enum ChannelConfigurationCase {
    kFcm = 1,
    kServer = 2,
    CHANNEL_CONFIGURATION_NOT_SET = 0,
  };

  static inline const SharingMessageSpecifics_ChannelConfiguration* internal_default_instance() {
    return reinterpret_cast<const SharingMessageSpecifics_ChannelConfiguration*>(
               &_SharingMessageSpecifics_ChannelConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SharingMessageSpecifics_ChannelConfiguration& a, SharingMessageSpecifics_ChannelConfiguration& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SharingMessageSpecifics_ChannelConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingMessageSpecifics_ChannelConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingMessageSpecifics_ChannelConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingMessageSpecifics_ChannelConfiguration>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingMessageSpecifics_ChannelConfiguration& from);
  void MergeFrom(const SharingMessageSpecifics_ChannelConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingMessageSpecifics_ChannelConfiguration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SharingMessageSpecifics.ChannelConfiguration";
  }
  protected:
  explicit SharingMessageSpecifics_ChannelConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration FCMChannelConfiguration;

  // accessors -------------------------------------------------------

  enum : int {
    kFcmFieldNumber = 1,
    kServerFieldNumber = 2,
  };
  // .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;
  bool has_fcm() const;
  private:
  bool _internal_has_fcm() const;
  public:
  void clear_fcm();
  const ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& fcm() const;
  PROTOBUF_NODISCARD ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* release_fcm();
  ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* mutable_fcm();
  void set_allocated_fcm(::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* fcm);
  private:
  const ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& _internal_fcm() const;
  ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* _internal_mutable_fcm();
  public:
  void unsafe_arena_set_allocated_fcm(
      ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* fcm);
  ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* unsafe_arena_release_fcm();

  // bytes server = 2;
  bool has_server() const;
  private:
  bool _internal_has_server() const;
  public:
  void clear_server();
  const std::string& server() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server();
  PROTOBUF_NODISCARD std::string* release_server();
  void set_allocated_server(std::string* server);
  private:
  const std::string& _internal_server() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server(const std::string& value);
  std::string* _internal_mutable_server();
  public:

  void clear_channel_configuration();
  ChannelConfigurationCase channel_configuration_case() const;
  // @@protoc_insertion_point(class_scope:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
 private:
  class _Internal;
  void set_has_fcm();
  void set_has_server();

  inline bool has_channel_configuration() const;
  inline void clear_has_channel_configuration();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ChannelConfigurationUnion {
    constexpr ChannelConfigurationUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* fcm_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_;
  } channel_configuration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2fsync_2fprotocol_2fsharing_5fmessage_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class SharingMessageSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SharingMessageSpecifics) */ {
 public:
  inline SharingMessageSpecifics() : SharingMessageSpecifics(nullptr) {}
  ~SharingMessageSpecifics() override;
  explicit PROTOBUF_CONSTEXPR SharingMessageSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingMessageSpecifics(const SharingMessageSpecifics& from);
  SharingMessageSpecifics(SharingMessageSpecifics&& from) noexcept
    : SharingMessageSpecifics() {
    *this = ::std::move(from);
  }

  inline SharingMessageSpecifics& operator=(const SharingMessageSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingMessageSpecifics& operator=(SharingMessageSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingMessageSpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingMessageSpecifics* internal_default_instance() {
    return reinterpret_cast<const SharingMessageSpecifics*>(
               &_SharingMessageSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SharingMessageSpecifics& a, SharingMessageSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SharingMessageSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingMessageSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingMessageSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingMessageSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingMessageSpecifics& from);
  void MergeFrom(const SharingMessageSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingMessageSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SharingMessageSpecifics";
  }
  protected:
  explicit SharingMessageSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SharingMessageSpecifics_ChannelConfiguration ChannelConfiguration;

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
    kPayloadFieldNumber = 3,
    kChannelConfigurationFieldNumber = 2,
  };
  // optional string message_id = 1;
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  const std::string& message_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // optional bytes payload = 3;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;
  bool has_channel_configuration() const;
  private:
  bool _internal_has_channel_configuration() const;
  public:
  void clear_channel_configuration();
  const ::sync_pb::SharingMessageSpecifics_ChannelConfiguration& channel_configuration() const;
  PROTOBUF_NODISCARD ::sync_pb::SharingMessageSpecifics_ChannelConfiguration* release_channel_configuration();
  ::sync_pb::SharingMessageSpecifics_ChannelConfiguration* mutable_channel_configuration();
  void set_allocated_channel_configuration(::sync_pb::SharingMessageSpecifics_ChannelConfiguration* channel_configuration);
  private:
  const ::sync_pb::SharingMessageSpecifics_ChannelConfiguration& _internal_channel_configuration() const;
  ::sync_pb::SharingMessageSpecifics_ChannelConfiguration* _internal_mutable_channel_configuration();
  public:
  void unsafe_arena_set_allocated_channel_configuration(
      ::sync_pb::SharingMessageSpecifics_ChannelConfiguration* channel_configuration);
  ::sync_pb::SharingMessageSpecifics_ChannelConfiguration* unsafe_arena_release_channel_configuration();

  // @@protoc_insertion_point(class_scope:sync_pb.SharingMessageSpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::sync_pb::SharingMessageSpecifics_ChannelConfiguration* channel_configuration_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fsharing_5fmessage_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class SharingMessageCommitError final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SharingMessageCommitError) */ {
 public:
  inline SharingMessageCommitError() : SharingMessageCommitError(nullptr) {}
  ~SharingMessageCommitError() override;
  explicit PROTOBUF_CONSTEXPR SharingMessageCommitError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingMessageCommitError(const SharingMessageCommitError& from);
  SharingMessageCommitError(SharingMessageCommitError&& from) noexcept
    : SharingMessageCommitError() {
    *this = ::std::move(from);
  }

  inline SharingMessageCommitError& operator=(const SharingMessageCommitError& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingMessageCommitError& operator=(SharingMessageCommitError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SharingMessageCommitError& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingMessageCommitError* internal_default_instance() {
    return reinterpret_cast<const SharingMessageCommitError*>(
               &_SharingMessageCommitError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SharingMessageCommitError& a, SharingMessageCommitError& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SharingMessageCommitError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingMessageCommitError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharingMessageCommitError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharingMessageCommitError>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharingMessageCommitError& from);
  void MergeFrom(const SharingMessageCommitError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingMessageCommitError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SharingMessageCommitError";
  }
  protected:
  explicit SharingMessageCommitError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SharingMessageCommitError_ErrorCode ErrorCode;
  static constexpr ErrorCode NONE =
    SharingMessageCommitError_ErrorCode_NONE;
  static constexpr ErrorCode INVALID_ARGUMENT =
    SharingMessageCommitError_ErrorCode_INVALID_ARGUMENT;
  static constexpr ErrorCode NOT_FOUND =
    SharingMessageCommitError_ErrorCode_NOT_FOUND;
  static constexpr ErrorCode INTERNAL =
    SharingMessageCommitError_ErrorCode_INTERNAL;
  static constexpr ErrorCode UNAVAILABLE =
    SharingMessageCommitError_ErrorCode_UNAVAILABLE;
  static constexpr ErrorCode RESOURCE_EXHAUSTED =
    SharingMessageCommitError_ErrorCode_RESOURCE_EXHAUSTED;
  static constexpr ErrorCode UNAUTHENTICATED =
    SharingMessageCommitError_ErrorCode_UNAUTHENTICATED;
  static constexpr ErrorCode PERMISSION_DENIED =
    SharingMessageCommitError_ErrorCode_PERMISSION_DENIED;
  static constexpr ErrorCode SYNC_TURNED_OFF =
    SharingMessageCommitError_ErrorCode_SYNC_TURNED_OFF;
  static constexpr ErrorCode SYNC_NETWORK_ERROR =
    SharingMessageCommitError_ErrorCode_SYNC_NETWORK_ERROR;
  static constexpr ErrorCode DEPRECATED_SYNC_SERVER_OR_AUTH_ERROR =
    SharingMessageCommitError_ErrorCode_DEPRECATED_SYNC_SERVER_OR_AUTH_ERROR;
  static constexpr ErrorCode SYNC_TIMEOUT =
    SharingMessageCommitError_ErrorCode_SYNC_TIMEOUT;
  static constexpr ErrorCode SYNC_SERVER_ERROR =
    SharingMessageCommitError_ErrorCode_SYNC_SERVER_ERROR;
  static constexpr ErrorCode SYNC_AUTH_ERROR =
    SharingMessageCommitError_ErrorCode_SYNC_AUTH_ERROR;
  static inline bool ErrorCode_IsValid(int value) {
    return SharingMessageCommitError_ErrorCode_IsValid(value);
  }
  static constexpr ErrorCode ErrorCode_MIN =
    SharingMessageCommitError_ErrorCode_ErrorCode_MIN;
  static constexpr ErrorCode ErrorCode_MAX =
    SharingMessageCommitError_ErrorCode_ErrorCode_MAX;
  static constexpr int ErrorCode_ARRAYSIZE =
    SharingMessageCommitError_ErrorCode_ErrorCode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ErrorCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorCode_Name.");
    return SharingMessageCommitError_ErrorCode_Name(enum_t_value);
  }
  static inline bool ErrorCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ErrorCode* value) {
    return SharingMessageCommitError_ErrorCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
  };
  // optional .sync_pb.SharingMessageCommitError.ErrorCode error_code = 1;
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  ::sync_pb::SharingMessageCommitError_ErrorCode error_code() const;
  void set_error_code(::sync_pb::SharingMessageCommitError_ErrorCode value);
  private:
  ::sync_pb::SharingMessageCommitError_ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::sync_pb::SharingMessageCommitError_ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.SharingMessageCommitError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int error_code_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fsharing_5fmessage_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration

// optional string token = 1;
inline bool SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::has_token() const {
  return _internal_has_token();
}
inline void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::clear_token() {
  token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::token() const {
  // @@protoc_insertion_point(field_get:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::set_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration.token)
}
inline std::string* SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration.token)
  return _s;
}
inline const std::string& SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::_internal_token() const {
  return token_.Get();
}
inline void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(value, GetArenaForAllocation());
}
inline std::string* SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  return token_.Mutable(GetArenaForAllocation());
}
inline std::string* SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::release_token() {
  // @@protoc_insertion_point(field_release:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration.token)
}

// optional int32 ttl = 2;
inline bool SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::_internal_has_ttl() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::has_ttl() const {
  return _internal_has_ttl();
}
inline void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::clear_ttl() {
  ttl_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::_internal_ttl() const {
  return ttl_;
}
inline int32_t SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::ttl() const {
  // @@protoc_insertion_point(field_get:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration.ttl)
  return _internal_ttl();
}
inline void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::_internal_set_ttl(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ttl_ = value;
}
inline void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::set_ttl(int32_t value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration.ttl)
}

// optional int32 priority = 3;
inline bool SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::has_priority() const {
  return _internal_has_priority();
}
inline void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::clear_priority() {
  priority_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::_internal_priority() const {
  return priority_;
}
inline int32_t SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::priority() const {
  // @@protoc_insertion_point(field_get:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration.priority)
  return _internal_priority();
}
inline void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::_internal_set_priority(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  priority_ = value;
}
inline void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration.priority)
}

// -------------------------------------------------------------------

// SharingMessageSpecifics_ChannelConfiguration

// .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;
inline bool SharingMessageSpecifics_ChannelConfiguration::_internal_has_fcm() const {
  return channel_configuration_case() == kFcm;
}
inline bool SharingMessageSpecifics_ChannelConfiguration::has_fcm() const {
  return _internal_has_fcm();
}
inline void SharingMessageSpecifics_ChannelConfiguration::set_has_fcm() {
  _oneof_case_[0] = kFcm;
}
inline void SharingMessageSpecifics_ChannelConfiguration::clear_fcm() {
  if (_internal_has_fcm()) {
    if (GetArenaForAllocation() == nullptr) {
      delete channel_configuration_.fcm_;
    }
    clear_has_channel_configuration();
  }
}
inline ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* SharingMessageSpecifics_ChannelConfiguration::release_fcm() {
  // @@protoc_insertion_point(field_release:sync_pb.SharingMessageSpecifics.ChannelConfiguration.fcm)
  if (_internal_has_fcm()) {
    clear_has_channel_configuration();
    ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* temp = channel_configuration_.fcm_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    channel_configuration_.fcm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& SharingMessageSpecifics_ChannelConfiguration::_internal_fcm() const {
  return _internal_has_fcm()
      ? *channel_configuration_.fcm_
      : reinterpret_cast< ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration&>(::sync_pb::_SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration_default_instance_);
}
inline const ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& SharingMessageSpecifics_ChannelConfiguration::fcm() const {
  // @@protoc_insertion_point(field_get:sync_pb.SharingMessageSpecifics.ChannelConfiguration.fcm)
  return _internal_fcm();
}
inline ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* SharingMessageSpecifics_ChannelConfiguration::unsafe_arena_release_fcm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.SharingMessageSpecifics.ChannelConfiguration.fcm)
  if (_internal_has_fcm()) {
    clear_has_channel_configuration();
    ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* temp = channel_configuration_.fcm_;
    channel_configuration_.fcm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SharingMessageSpecifics_ChannelConfiguration::unsafe_arena_set_allocated_fcm(::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* fcm) {
  clear_channel_configuration();
  if (fcm) {
    set_has_fcm();
    channel_configuration_.fcm_ = fcm;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.SharingMessageSpecifics.ChannelConfiguration.fcm)
}
inline ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* SharingMessageSpecifics_ChannelConfiguration::_internal_mutable_fcm() {
  if (!_internal_has_fcm()) {
    clear_channel_configuration();
    set_has_fcm();
    channel_configuration_.fcm_ = CreateMaybeMessage< ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration >(GetArenaForAllocation());
  }
  return channel_configuration_.fcm_;
}
inline ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* SharingMessageSpecifics_ChannelConfiguration::mutable_fcm() {
  ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* _msg = _internal_mutable_fcm();
  // @@protoc_insertion_point(field_mutable:sync_pb.SharingMessageSpecifics.ChannelConfiguration.fcm)
  return _msg;
}

// bytes server = 2;
inline bool SharingMessageSpecifics_ChannelConfiguration::_internal_has_server() const {
  return channel_configuration_case() == kServer;
}
inline bool SharingMessageSpecifics_ChannelConfiguration::has_server() const {
  return _internal_has_server();
}
inline void SharingMessageSpecifics_ChannelConfiguration::set_has_server() {
  _oneof_case_[0] = kServer;
}
inline void SharingMessageSpecifics_ChannelConfiguration::clear_server() {
  if (_internal_has_server()) {
    channel_configuration_.server_.Destroy();
    clear_has_channel_configuration();
  }
}
inline const std::string& SharingMessageSpecifics_ChannelConfiguration::server() const {
  // @@protoc_insertion_point(field_get:sync_pb.SharingMessageSpecifics.ChannelConfiguration.server)
  return _internal_server();
}
template <typename ArgT0, typename... ArgT>
inline void SharingMessageSpecifics_ChannelConfiguration::set_server(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_server()) {
    clear_channel_configuration();
    set_has_server();
    channel_configuration_.server_.InitDefault();
  }
  channel_configuration_.server_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SharingMessageSpecifics.ChannelConfiguration.server)
}
inline std::string* SharingMessageSpecifics_ChannelConfiguration::mutable_server() {
  std::string* _s = _internal_mutable_server();
  // @@protoc_insertion_point(field_mutable:sync_pb.SharingMessageSpecifics.ChannelConfiguration.server)
  return _s;
}
inline const std::string& SharingMessageSpecifics_ChannelConfiguration::_internal_server() const {
  if (_internal_has_server()) {
    return channel_configuration_.server_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SharingMessageSpecifics_ChannelConfiguration::_internal_set_server(const std::string& value) {
  if (!_internal_has_server()) {
    clear_channel_configuration();
    set_has_server();
    channel_configuration_.server_.InitDefault();
  }
  channel_configuration_.server_.Set(value, GetArenaForAllocation());
}
inline std::string* SharingMessageSpecifics_ChannelConfiguration::_internal_mutable_server() {
  if (!_internal_has_server()) {
    clear_channel_configuration();
    set_has_server();
    channel_configuration_.server_.InitDefault();
  }
  return channel_configuration_.server_.Mutable(      GetArenaForAllocation());
}
inline std::string* SharingMessageSpecifics_ChannelConfiguration::release_server() {
  // @@protoc_insertion_point(field_release:sync_pb.SharingMessageSpecifics.ChannelConfiguration.server)
  if (_internal_has_server()) {
    clear_has_channel_configuration();
    return channel_configuration_.server_.Release();
  } else {
    return nullptr;
  }
}
inline void SharingMessageSpecifics_ChannelConfiguration::set_allocated_server(std::string* server) {
  if (has_channel_configuration()) {
    clear_channel_configuration();
  }
  if (server != nullptr) {
    set_has_server();
    channel_configuration_.server_.InitAllocated(server, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SharingMessageSpecifics.ChannelConfiguration.server)
}

inline bool SharingMessageSpecifics_ChannelConfiguration::has_channel_configuration() const {
  return channel_configuration_case() != CHANNEL_CONFIGURATION_NOT_SET;
}
inline void SharingMessageSpecifics_ChannelConfiguration::clear_has_channel_configuration() {
  _oneof_case_[0] = CHANNEL_CONFIGURATION_NOT_SET;
}
inline SharingMessageSpecifics_ChannelConfiguration::ChannelConfigurationCase SharingMessageSpecifics_ChannelConfiguration::channel_configuration_case() const {
  return SharingMessageSpecifics_ChannelConfiguration::ChannelConfigurationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SharingMessageSpecifics

// optional string message_id = 1;
inline bool SharingMessageSpecifics::_internal_has_message_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingMessageSpecifics::has_message_id() const {
  return _internal_has_message_id();
}
inline void SharingMessageSpecifics::clear_message_id() {
  message_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SharingMessageSpecifics::message_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.SharingMessageSpecifics.message_id)
  return _internal_message_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingMessageSpecifics::set_message_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 message_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SharingMessageSpecifics.message_id)
}
inline std::string* SharingMessageSpecifics::mutable_message_id() {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.SharingMessageSpecifics.message_id)
  return _s;
}
inline const std::string& SharingMessageSpecifics::_internal_message_id() const {
  return message_id_.Get();
}
inline void SharingMessageSpecifics::_internal_set_message_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SharingMessageSpecifics::_internal_mutable_message_id() {
  _has_bits_[0] |= 0x00000001u;
  return message_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SharingMessageSpecifics::release_message_id() {
  // @@protoc_insertion_point(field_release:sync_pb.SharingMessageSpecifics.message_id)
  if (!_internal_has_message_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = message_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_id_.IsDefault()) {
    message_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingMessageSpecifics::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_id_.SetAllocated(message_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_id_.IsDefault()) {
    message_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SharingMessageSpecifics.message_id)
}

// optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;
inline bool SharingMessageSpecifics::_internal_has_channel_configuration() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || channel_configuration_ != nullptr);
  return value;
}
inline bool SharingMessageSpecifics::has_channel_configuration() const {
  return _internal_has_channel_configuration();
}
inline void SharingMessageSpecifics::clear_channel_configuration() {
  if (channel_configuration_ != nullptr) channel_configuration_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::SharingMessageSpecifics_ChannelConfiguration& SharingMessageSpecifics::_internal_channel_configuration() const {
  const ::sync_pb::SharingMessageSpecifics_ChannelConfiguration* p = channel_configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::SharingMessageSpecifics_ChannelConfiguration&>(
      ::sync_pb::_SharingMessageSpecifics_ChannelConfiguration_default_instance_);
}
inline const ::sync_pb::SharingMessageSpecifics_ChannelConfiguration& SharingMessageSpecifics::channel_configuration() const {
  // @@protoc_insertion_point(field_get:sync_pb.SharingMessageSpecifics.channel_configuration)
  return _internal_channel_configuration();
}
inline void SharingMessageSpecifics::unsafe_arena_set_allocated_channel_configuration(
    ::sync_pb::SharingMessageSpecifics_ChannelConfiguration* channel_configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_configuration_);
  }
  channel_configuration_ = channel_configuration;
  if (channel_configuration) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.SharingMessageSpecifics.channel_configuration)
}
inline ::sync_pb::SharingMessageSpecifics_ChannelConfiguration* SharingMessageSpecifics::release_channel_configuration() {
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::SharingMessageSpecifics_ChannelConfiguration* temp = channel_configuration_;
  channel_configuration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::SharingMessageSpecifics_ChannelConfiguration* SharingMessageSpecifics::unsafe_arena_release_channel_configuration() {
  // @@protoc_insertion_point(field_release:sync_pb.SharingMessageSpecifics.channel_configuration)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::SharingMessageSpecifics_ChannelConfiguration* temp = channel_configuration_;
  channel_configuration_ = nullptr;
  return temp;
}
inline ::sync_pb::SharingMessageSpecifics_ChannelConfiguration* SharingMessageSpecifics::_internal_mutable_channel_configuration() {
  _has_bits_[0] |= 0x00000004u;
  if (channel_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::SharingMessageSpecifics_ChannelConfiguration>(GetArenaForAllocation());
    channel_configuration_ = p;
  }
  return channel_configuration_;
}
inline ::sync_pb::SharingMessageSpecifics_ChannelConfiguration* SharingMessageSpecifics::mutable_channel_configuration() {
  ::sync_pb::SharingMessageSpecifics_ChannelConfiguration* _msg = _internal_mutable_channel_configuration();
  // @@protoc_insertion_point(field_mutable:sync_pb.SharingMessageSpecifics.channel_configuration)
  return _msg;
}
inline void SharingMessageSpecifics::set_allocated_channel_configuration(::sync_pb::SharingMessageSpecifics_ChannelConfiguration* channel_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete channel_configuration_;
  }
  if (channel_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(channel_configuration);
    if (message_arena != submessage_arena) {
      channel_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_configuration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  channel_configuration_ = channel_configuration;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SharingMessageSpecifics.channel_configuration)
}

// optional bytes payload = 3;
inline bool SharingMessageSpecifics::_internal_has_payload() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingMessageSpecifics::has_payload() const {
  return _internal_has_payload();
}
inline void SharingMessageSpecifics::clear_payload() {
  payload_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SharingMessageSpecifics::payload() const {
  // @@protoc_insertion_point(field_get:sync_pb.SharingMessageSpecifics.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharingMessageSpecifics::set_payload(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SharingMessageSpecifics.payload)
}
inline std::string* SharingMessageSpecifics::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:sync_pb.SharingMessageSpecifics.payload)
  return _s;
}
inline const std::string& SharingMessageSpecifics::_internal_payload() const {
  return payload_.Get();
}
inline void SharingMessageSpecifics::_internal_set_payload(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  payload_.Set(value, GetArenaForAllocation());
}
inline std::string* SharingMessageSpecifics::_internal_mutable_payload() {
  _has_bits_[0] |= 0x00000002u;
  return payload_.Mutable(GetArenaForAllocation());
}
inline std::string* SharingMessageSpecifics::release_payload() {
  // @@protoc_insertion_point(field_release:sync_pb.SharingMessageSpecifics.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = payload_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault()) {
    payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SharingMessageSpecifics::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault()) {
    payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SharingMessageSpecifics.payload)
}

// -------------------------------------------------------------------

// SharingMessageCommitError

// optional .sync_pb.SharingMessageCommitError.ErrorCode error_code = 1;
inline bool SharingMessageCommitError::_internal_has_error_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingMessageCommitError::has_error_code() const {
  return _internal_has_error_code();
}
inline void SharingMessageCommitError::clear_error_code() {
  error_code_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::sync_pb::SharingMessageCommitError_ErrorCode SharingMessageCommitError::_internal_error_code() const {
  return static_cast< ::sync_pb::SharingMessageCommitError_ErrorCode >(error_code_);
}
inline ::sync_pb::SharingMessageCommitError_ErrorCode SharingMessageCommitError::error_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.SharingMessageCommitError.error_code)
  return _internal_error_code();
}
inline void SharingMessageCommitError::_internal_set_error_code(::sync_pb::SharingMessageCommitError_ErrorCode value) {
  assert(::sync_pb::SharingMessageCommitError_ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  error_code_ = value;
}
inline void SharingMessageCommitError::set_error_code(::sync_pb::SharingMessageCommitError_ErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:sync_pb.SharingMessageCommitError.error_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::SharingMessageCommitError_ErrorCode> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fsharing_5fmessage_5fspecifics_2eproto
