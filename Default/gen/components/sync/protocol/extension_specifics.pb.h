// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/extension_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fextension_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fextension_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fextension_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fextension_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class ExtensionSpecifics;
struct ExtensionSpecificsDefaultTypeInternal;
extern ExtensionSpecificsDefaultTypeInternal _ExtensionSpecifics_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::ExtensionSpecifics* Arena::CreateMaybeMessage<::sync_pb::ExtensionSpecifics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class ExtensionSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ExtensionSpecifics) */ {
 public:
  inline ExtensionSpecifics() : ExtensionSpecifics(nullptr) {}
  ~ExtensionSpecifics() override;
  explicit PROTOBUF_CONSTEXPR ExtensionSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionSpecifics(const ExtensionSpecifics& from);
  ExtensionSpecifics(ExtensionSpecifics&& from) noexcept
    : ExtensionSpecifics() {
    *this = ::std::move(from);
  }

  inline ExtensionSpecifics& operator=(const ExtensionSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionSpecifics& operator=(ExtensionSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ExtensionSpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionSpecifics* internal_default_instance() {
    return reinterpret_cast<const ExtensionSpecifics*>(
               &_ExtensionSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExtensionSpecifics& a, ExtensionSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ExtensionSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ExtensionSpecifics& from);
  void MergeFrom(const ExtensionSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExtensionSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.ExtensionSpecifics";
  }
  protected:
  explicit ExtensionSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVersionFieldNumber = 2,
    kUpdateUrlFieldNumber = 3,
    kNameFieldNumber = 6,
    kEnabledFieldNumber = 4,
    kIncognitoEnabledFieldNumber = 5,
    kRemoteInstallFieldNumber = 7,
    kInstalledByCustodianFieldNumber = 8,
    kAllUrlsEnabledFieldNumber = 9,
    kDisableReasonsFieldNumber = 10,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string update_url = 3;
  bool has_update_url() const;
  private:
  bool _internal_has_update_url() const;
  public:
  void clear_update_url();
  const std::string& update_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_url();
  PROTOBUF_NODISCARD std::string* release_update_url();
  void set_allocated_update_url(std::string* update_url);
  private:
  const std::string& _internal_update_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_url(const std::string& value);
  std::string* _internal_mutable_update_url();
  public:

  // optional string name = 6 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  PROTOBUF_DEPRECATED void clear_name();
  PROTOBUF_DEPRECATED const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_name(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_name();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_name();
  PROTOBUF_DEPRECATED void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bool enabled = 4;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional bool incognito_enabled = 5;
  bool has_incognito_enabled() const;
  private:
  bool _internal_has_incognito_enabled() const;
  public:
  void clear_incognito_enabled();
  bool incognito_enabled() const;
  void set_incognito_enabled(bool value);
  private:
  bool _internal_incognito_enabled() const;
  void _internal_set_incognito_enabled(bool value);
  public:

  // optional bool remote_install = 7;
  bool has_remote_install() const;
  private:
  bool _internal_has_remote_install() const;
  public:
  void clear_remote_install();
  bool remote_install() const;
  void set_remote_install(bool value);
  private:
  bool _internal_remote_install() const;
  void _internal_set_remote_install(bool value);
  public:

  // optional bool installed_by_custodian = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_installed_by_custodian() const;
  private:
  bool _internal_has_installed_by_custodian() const;
  public:
  PROTOBUF_DEPRECATED void clear_installed_by_custodian();
  PROTOBUF_DEPRECATED bool installed_by_custodian() const;
  PROTOBUF_DEPRECATED void set_installed_by_custodian(bool value);
  private:
  bool _internal_installed_by_custodian() const;
  void _internal_set_installed_by_custodian(bool value);
  public:

  // optional bool all_urls_enabled = 9 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_all_urls_enabled() const;
  private:
  bool _internal_has_all_urls_enabled() const;
  public:
  PROTOBUF_DEPRECATED void clear_all_urls_enabled();
  PROTOBUF_DEPRECATED bool all_urls_enabled() const;
  PROTOBUF_DEPRECATED void set_all_urls_enabled(bool value);
  private:
  bool _internal_all_urls_enabled() const;
  void _internal_set_all_urls_enabled(bool value);
  public:

  // optional int32 disable_reasons = 10;
  bool has_disable_reasons() const;
  private:
  bool _internal_has_disable_reasons() const;
  public:
  void clear_disable_reasons();
  int32_t disable_reasons() const;
  void set_disable_reasons(int32_t value);
  private:
  int32_t _internal_disable_reasons() const;
  void _internal_set_disable_reasons(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.ExtensionSpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool enabled_;
  bool incognito_enabled_;
  bool remote_install_;
  bool installed_by_custodian_;
  bool all_urls_enabled_;
  int32_t disable_reasons_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fextension_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExtensionSpecifics

// optional string id = 1;
inline bool ExtensionSpecifics::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExtensionSpecifics::has_id() const {
  return _internal_has_id();
}
inline void ExtensionSpecifics::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExtensionSpecifics::id() const {
  // @@protoc_insertion_point(field_get:sync_pb.ExtensionSpecifics.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtensionSpecifics::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.ExtensionSpecifics.id)
}
inline std::string* ExtensionSpecifics::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.ExtensionSpecifics.id)
  return _s;
}
inline const std::string& ExtensionSpecifics::_internal_id() const {
  return id_.Get();
}
inline void ExtensionSpecifics::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtensionSpecifics::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* ExtensionSpecifics::release_id() {
  // @@protoc_insertion_point(field_release:sync_pb.ExtensionSpecifics.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ExtensionSpecifics::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ExtensionSpecifics.id)
}

// optional string version = 2;
inline bool ExtensionSpecifics::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExtensionSpecifics::has_version() const {
  return _internal_has_version();
}
inline void ExtensionSpecifics::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ExtensionSpecifics::version() const {
  // @@protoc_insertion_point(field_get:sync_pb.ExtensionSpecifics.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtensionSpecifics::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.ExtensionSpecifics.version)
}
inline std::string* ExtensionSpecifics::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:sync_pb.ExtensionSpecifics.version)
  return _s;
}
inline const std::string& ExtensionSpecifics::_internal_version() const {
  return version_.Get();
}
inline void ExtensionSpecifics::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtensionSpecifics::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(GetArenaForAllocation());
}
inline std::string* ExtensionSpecifics::release_version() {
  // @@protoc_insertion_point(field_release:sync_pb.ExtensionSpecifics.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ExtensionSpecifics::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ExtensionSpecifics.version)
}

// optional string update_url = 3;
inline bool ExtensionSpecifics::_internal_has_update_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExtensionSpecifics::has_update_url() const {
  return _internal_has_update_url();
}
inline void ExtensionSpecifics::clear_update_url() {
  update_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ExtensionSpecifics::update_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.ExtensionSpecifics.update_url)
  return _internal_update_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtensionSpecifics::set_update_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 update_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.ExtensionSpecifics.update_url)
}
inline std::string* ExtensionSpecifics::mutable_update_url() {
  std::string* _s = _internal_mutable_update_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.ExtensionSpecifics.update_url)
  return _s;
}
inline const std::string& ExtensionSpecifics::_internal_update_url() const {
  return update_url_.Get();
}
inline void ExtensionSpecifics::_internal_set_update_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  update_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtensionSpecifics::_internal_mutable_update_url() {
  _has_bits_[0] |= 0x00000004u;
  return update_url_.Mutable(GetArenaForAllocation());
}
inline std::string* ExtensionSpecifics::release_update_url() {
  // @@protoc_insertion_point(field_release:sync_pb.ExtensionSpecifics.update_url)
  if (!_internal_has_update_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = update_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (update_url_.IsDefault()) {
    update_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ExtensionSpecifics::set_allocated_update_url(std::string* update_url) {
  if (update_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  update_url_.SetAllocated(update_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (update_url_.IsDefault()) {
    update_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ExtensionSpecifics.update_url)
}

// optional bool enabled = 4;
inline bool ExtensionSpecifics::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ExtensionSpecifics::has_enabled() const {
  return _internal_has_enabled();
}
inline void ExtensionSpecifics::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ExtensionSpecifics::_internal_enabled() const {
  return enabled_;
}
inline bool ExtensionSpecifics::enabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.ExtensionSpecifics.enabled)
  return _internal_enabled();
}
inline void ExtensionSpecifics::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enabled_ = value;
}
inline void ExtensionSpecifics::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:sync_pb.ExtensionSpecifics.enabled)
}

// optional bool incognito_enabled = 5;
inline bool ExtensionSpecifics::_internal_has_incognito_enabled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ExtensionSpecifics::has_incognito_enabled() const {
  return _internal_has_incognito_enabled();
}
inline void ExtensionSpecifics::clear_incognito_enabled() {
  incognito_enabled_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ExtensionSpecifics::_internal_incognito_enabled() const {
  return incognito_enabled_;
}
inline bool ExtensionSpecifics::incognito_enabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.ExtensionSpecifics.incognito_enabled)
  return _internal_incognito_enabled();
}
inline void ExtensionSpecifics::_internal_set_incognito_enabled(bool value) {
  _has_bits_[0] |= 0x00000020u;
  incognito_enabled_ = value;
}
inline void ExtensionSpecifics::set_incognito_enabled(bool value) {
  _internal_set_incognito_enabled(value);
  // @@protoc_insertion_point(field_set:sync_pb.ExtensionSpecifics.incognito_enabled)
}

// optional string name = 6 [deprecated = true];
inline bool ExtensionSpecifics::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ExtensionSpecifics::has_name() const {
  return _internal_has_name();
}
inline void ExtensionSpecifics::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ExtensionSpecifics::name() const {
  // @@protoc_insertion_point(field_get:sync_pb.ExtensionSpecifics.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtensionSpecifics::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.ExtensionSpecifics.name)
}
inline std::string* ExtensionSpecifics::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.ExtensionSpecifics.name)
  return _s;
}
inline const std::string& ExtensionSpecifics::_internal_name() const {
  return name_.Get();
}
inline void ExtensionSpecifics::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtensionSpecifics::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000008u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ExtensionSpecifics::release_name() {
  // @@protoc_insertion_point(field_release:sync_pb.ExtensionSpecifics.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ExtensionSpecifics::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ExtensionSpecifics.name)
}

// optional bool remote_install = 7;
inline bool ExtensionSpecifics::_internal_has_remote_install() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ExtensionSpecifics::has_remote_install() const {
  return _internal_has_remote_install();
}
inline void ExtensionSpecifics::clear_remote_install() {
  remote_install_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ExtensionSpecifics::_internal_remote_install() const {
  return remote_install_;
}
inline bool ExtensionSpecifics::remote_install() const {
  // @@protoc_insertion_point(field_get:sync_pb.ExtensionSpecifics.remote_install)
  return _internal_remote_install();
}
inline void ExtensionSpecifics::_internal_set_remote_install(bool value) {
  _has_bits_[0] |= 0x00000040u;
  remote_install_ = value;
}
inline void ExtensionSpecifics::set_remote_install(bool value) {
  _internal_set_remote_install(value);
  // @@protoc_insertion_point(field_set:sync_pb.ExtensionSpecifics.remote_install)
}

// optional bool installed_by_custodian = 8 [deprecated = true];
inline bool ExtensionSpecifics::_internal_has_installed_by_custodian() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ExtensionSpecifics::has_installed_by_custodian() const {
  return _internal_has_installed_by_custodian();
}
inline void ExtensionSpecifics::clear_installed_by_custodian() {
  installed_by_custodian_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ExtensionSpecifics::_internal_installed_by_custodian() const {
  return installed_by_custodian_;
}
inline bool ExtensionSpecifics::installed_by_custodian() const {
  // @@protoc_insertion_point(field_get:sync_pb.ExtensionSpecifics.installed_by_custodian)
  return _internal_installed_by_custodian();
}
inline void ExtensionSpecifics::_internal_set_installed_by_custodian(bool value) {
  _has_bits_[0] |= 0x00000080u;
  installed_by_custodian_ = value;
}
inline void ExtensionSpecifics::set_installed_by_custodian(bool value) {
  _internal_set_installed_by_custodian(value);
  // @@protoc_insertion_point(field_set:sync_pb.ExtensionSpecifics.installed_by_custodian)
}

// optional bool all_urls_enabled = 9 [deprecated = true];
inline bool ExtensionSpecifics::_internal_has_all_urls_enabled() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ExtensionSpecifics::has_all_urls_enabled() const {
  return _internal_has_all_urls_enabled();
}
inline void ExtensionSpecifics::clear_all_urls_enabled() {
  all_urls_enabled_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ExtensionSpecifics::_internal_all_urls_enabled() const {
  return all_urls_enabled_;
}
inline bool ExtensionSpecifics::all_urls_enabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.ExtensionSpecifics.all_urls_enabled)
  return _internal_all_urls_enabled();
}
inline void ExtensionSpecifics::_internal_set_all_urls_enabled(bool value) {
  _has_bits_[0] |= 0x00000100u;
  all_urls_enabled_ = value;
}
inline void ExtensionSpecifics::set_all_urls_enabled(bool value) {
  _internal_set_all_urls_enabled(value);
  // @@protoc_insertion_point(field_set:sync_pb.ExtensionSpecifics.all_urls_enabled)
}

// optional int32 disable_reasons = 10;
inline bool ExtensionSpecifics::_internal_has_disable_reasons() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ExtensionSpecifics::has_disable_reasons() const {
  return _internal_has_disable_reasons();
}
inline void ExtensionSpecifics::clear_disable_reasons() {
  disable_reasons_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t ExtensionSpecifics::_internal_disable_reasons() const {
  return disable_reasons_;
}
inline int32_t ExtensionSpecifics::disable_reasons() const {
  // @@protoc_insertion_point(field_get:sync_pb.ExtensionSpecifics.disable_reasons)
  return _internal_disable_reasons();
}
inline void ExtensionSpecifics::_internal_set_disable_reasons(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  disable_reasons_ = value;
}
inline void ExtensionSpecifics::set_disable_reasons(int32_t value) {
  _internal_set_disable_reasons(value);
  // @@protoc_insertion_point(field_set:sync_pb.ExtensionSpecifics.disable_reasons)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fextension_5fspecifics_2eproto
