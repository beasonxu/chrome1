// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/contact_info_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fcontact_5finfo_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fcontact_5finfo_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fcontact_5finfo_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fcontact_5finfo_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class ContactInfoSpecifics;
struct ContactInfoSpecificsDefaultTypeInternal;
extern ContactInfoSpecificsDefaultTypeInternal _ContactInfoSpecifics_default_instance_;
class ContactInfoSpecifics_IntegerToken;
struct ContactInfoSpecifics_IntegerTokenDefaultTypeInternal;
extern ContactInfoSpecifics_IntegerTokenDefaultTypeInternal _ContactInfoSpecifics_IntegerToken_default_instance_;
class ContactInfoSpecifics_StringToken;
struct ContactInfoSpecifics_StringTokenDefaultTypeInternal;
extern ContactInfoSpecifics_StringTokenDefaultTypeInternal _ContactInfoSpecifics_StringToken_default_instance_;
class ContactInfoSpecifics_TokenMetadata;
struct ContactInfoSpecifics_TokenMetadataDefaultTypeInternal;
extern ContactInfoSpecifics_TokenMetadataDefaultTypeInternal _ContactInfoSpecifics_TokenMetadata_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::ContactInfoSpecifics* Arena::CreateMaybeMessage<::sync_pb::ContactInfoSpecifics>(Arena*);
template<> ::sync_pb::ContactInfoSpecifics_IntegerToken* Arena::CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_IntegerToken>(Arena*);
template<> ::sync_pb::ContactInfoSpecifics_StringToken* Arena::CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(Arena*);
template<> ::sync_pb::ContactInfoSpecifics_TokenMetadata* Arena::CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_TokenMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum ContactInfoSpecifics_VerificationStatus : int {
  ContactInfoSpecifics_VerificationStatus_VERIFICATION_STATUS_UNSPECIFIED = 0,
  ContactInfoSpecifics_VerificationStatus_PARSED = 1,
  ContactInfoSpecifics_VerificationStatus_FORMATTED = 2,
  ContactInfoSpecifics_VerificationStatus_OBSERVED = 3,
  ContactInfoSpecifics_VerificationStatus_USER_VERIFIED = 4,
  ContactInfoSpecifics_VerificationStatus_SERVER_PARSED = 5
};
bool ContactInfoSpecifics_VerificationStatus_IsValid(int value);
constexpr ContactInfoSpecifics_VerificationStatus ContactInfoSpecifics_VerificationStatus_VerificationStatus_MIN = ContactInfoSpecifics_VerificationStatus_VERIFICATION_STATUS_UNSPECIFIED;
constexpr ContactInfoSpecifics_VerificationStatus ContactInfoSpecifics_VerificationStatus_VerificationStatus_MAX = ContactInfoSpecifics_VerificationStatus_SERVER_PARSED;
constexpr int ContactInfoSpecifics_VerificationStatus_VerificationStatus_ARRAYSIZE = ContactInfoSpecifics_VerificationStatus_VerificationStatus_MAX + 1;

const std::string& ContactInfoSpecifics_VerificationStatus_Name(ContactInfoSpecifics_VerificationStatus value);
template<typename T>
inline const std::string& ContactInfoSpecifics_VerificationStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContactInfoSpecifics_VerificationStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContactInfoSpecifics_VerificationStatus_Name.");
  return ContactInfoSpecifics_VerificationStatus_Name(static_cast<ContactInfoSpecifics_VerificationStatus>(enum_t_value));
}
bool ContactInfoSpecifics_VerificationStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ContactInfoSpecifics_VerificationStatus* value);
// ===================================================================

class ContactInfoSpecifics_TokenMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ContactInfoSpecifics.TokenMetadata) */ {
 public:
  inline ContactInfoSpecifics_TokenMetadata() : ContactInfoSpecifics_TokenMetadata(nullptr) {}
  ~ContactInfoSpecifics_TokenMetadata() override;
  explicit PROTOBUF_CONSTEXPR ContactInfoSpecifics_TokenMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContactInfoSpecifics_TokenMetadata(const ContactInfoSpecifics_TokenMetadata& from);
  ContactInfoSpecifics_TokenMetadata(ContactInfoSpecifics_TokenMetadata&& from) noexcept
    : ContactInfoSpecifics_TokenMetadata() {
    *this = ::std::move(from);
  }

  inline ContactInfoSpecifics_TokenMetadata& operator=(const ContactInfoSpecifics_TokenMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContactInfoSpecifics_TokenMetadata& operator=(ContactInfoSpecifics_TokenMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ContactInfoSpecifics_TokenMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContactInfoSpecifics_TokenMetadata* internal_default_instance() {
    return reinterpret_cast<const ContactInfoSpecifics_TokenMetadata*>(
               &_ContactInfoSpecifics_TokenMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContactInfoSpecifics_TokenMetadata& a, ContactInfoSpecifics_TokenMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ContactInfoSpecifics_TokenMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContactInfoSpecifics_TokenMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContactInfoSpecifics_TokenMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContactInfoSpecifics_TokenMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ContactInfoSpecifics_TokenMetadata& from);
  void MergeFrom(const ContactInfoSpecifics_TokenMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContactInfoSpecifics_TokenMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.ContactInfoSpecifics.TokenMetadata";
  }
  protected:
  explicit ContactInfoSpecifics_TokenMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .sync_pb.ContactInfoSpecifics.VerificationStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::sync_pb::ContactInfoSpecifics_VerificationStatus status() const;
  void set_status(::sync_pb::ContactInfoSpecifics_VerificationStatus value);
  private:
  ::sync_pb::ContactInfoSpecifics_VerificationStatus _internal_status() const;
  void _internal_set_status(::sync_pb::ContactInfoSpecifics_VerificationStatus value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.ContactInfoSpecifics.TokenMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int status_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fcontact_5finfo_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class ContactInfoSpecifics_StringToken final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ContactInfoSpecifics.StringToken) */ {
 public:
  inline ContactInfoSpecifics_StringToken() : ContactInfoSpecifics_StringToken(nullptr) {}
  ~ContactInfoSpecifics_StringToken() override;
  explicit PROTOBUF_CONSTEXPR ContactInfoSpecifics_StringToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContactInfoSpecifics_StringToken(const ContactInfoSpecifics_StringToken& from);
  ContactInfoSpecifics_StringToken(ContactInfoSpecifics_StringToken&& from) noexcept
    : ContactInfoSpecifics_StringToken() {
    *this = ::std::move(from);
  }

  inline ContactInfoSpecifics_StringToken& operator=(const ContactInfoSpecifics_StringToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContactInfoSpecifics_StringToken& operator=(ContactInfoSpecifics_StringToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ContactInfoSpecifics_StringToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContactInfoSpecifics_StringToken* internal_default_instance() {
    return reinterpret_cast<const ContactInfoSpecifics_StringToken*>(
               &_ContactInfoSpecifics_StringToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContactInfoSpecifics_StringToken& a, ContactInfoSpecifics_StringToken& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ContactInfoSpecifics_StringToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContactInfoSpecifics_StringToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContactInfoSpecifics_StringToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContactInfoSpecifics_StringToken>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ContactInfoSpecifics_StringToken& from);
  void MergeFrom(const ContactInfoSpecifics_StringToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContactInfoSpecifics_StringToken* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.ContactInfoSpecifics.StringToken";
  }
  protected:
  explicit ContactInfoSpecifics_StringToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kMetadataFieldNumber = 2,
  };
  // optional string value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional .sync_pb.ContactInfoSpecifics.TokenMetadata metadata = 2;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::sync_pb::ContactInfoSpecifics_TokenMetadata& metadata() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_TokenMetadata* release_metadata();
  ::sync_pb::ContactInfoSpecifics_TokenMetadata* mutable_metadata();
  void set_allocated_metadata(::sync_pb::ContactInfoSpecifics_TokenMetadata* metadata);
  private:
  const ::sync_pb::ContactInfoSpecifics_TokenMetadata& _internal_metadata() const;
  ::sync_pb::ContactInfoSpecifics_TokenMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::sync_pb::ContactInfoSpecifics_TokenMetadata* metadata);
  ::sync_pb::ContactInfoSpecifics_TokenMetadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:sync_pb.ContactInfoSpecifics.StringToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::sync_pb::ContactInfoSpecifics_TokenMetadata* metadata_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fcontact_5finfo_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class ContactInfoSpecifics_IntegerToken final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ContactInfoSpecifics.IntegerToken) */ {
 public:
  inline ContactInfoSpecifics_IntegerToken() : ContactInfoSpecifics_IntegerToken(nullptr) {}
  ~ContactInfoSpecifics_IntegerToken() override;
  explicit PROTOBUF_CONSTEXPR ContactInfoSpecifics_IntegerToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContactInfoSpecifics_IntegerToken(const ContactInfoSpecifics_IntegerToken& from);
  ContactInfoSpecifics_IntegerToken(ContactInfoSpecifics_IntegerToken&& from) noexcept
    : ContactInfoSpecifics_IntegerToken() {
    *this = ::std::move(from);
  }

  inline ContactInfoSpecifics_IntegerToken& operator=(const ContactInfoSpecifics_IntegerToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContactInfoSpecifics_IntegerToken& operator=(ContactInfoSpecifics_IntegerToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ContactInfoSpecifics_IntegerToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContactInfoSpecifics_IntegerToken* internal_default_instance() {
    return reinterpret_cast<const ContactInfoSpecifics_IntegerToken*>(
               &_ContactInfoSpecifics_IntegerToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ContactInfoSpecifics_IntegerToken& a, ContactInfoSpecifics_IntegerToken& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ContactInfoSpecifics_IntegerToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContactInfoSpecifics_IntegerToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContactInfoSpecifics_IntegerToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContactInfoSpecifics_IntegerToken>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ContactInfoSpecifics_IntegerToken& from);
  void MergeFrom(const ContactInfoSpecifics_IntegerToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContactInfoSpecifics_IntegerToken* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.ContactInfoSpecifics.IntegerToken";
  }
  protected:
  explicit ContactInfoSpecifics_IntegerToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // optional .sync_pb.ContactInfoSpecifics.TokenMetadata metadata = 2;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::sync_pb::ContactInfoSpecifics_TokenMetadata& metadata() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_TokenMetadata* release_metadata();
  ::sync_pb::ContactInfoSpecifics_TokenMetadata* mutable_metadata();
  void set_allocated_metadata(::sync_pb::ContactInfoSpecifics_TokenMetadata* metadata);
  private:
  const ::sync_pb::ContactInfoSpecifics_TokenMetadata& _internal_metadata() const;
  ::sync_pb::ContactInfoSpecifics_TokenMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::sync_pb::ContactInfoSpecifics_TokenMetadata* metadata);
  ::sync_pb::ContactInfoSpecifics_TokenMetadata* unsafe_arena_release_metadata();

  // optional int64 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.ContactInfoSpecifics.IntegerToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sync_pb::ContactInfoSpecifics_TokenMetadata* metadata_;
  int64_t value_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fcontact_5finfo_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class ContactInfoSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.ContactInfoSpecifics) */ {
 public:
  inline ContactInfoSpecifics() : ContactInfoSpecifics(nullptr) {}
  ~ContactInfoSpecifics() override;
  explicit PROTOBUF_CONSTEXPR ContactInfoSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContactInfoSpecifics(const ContactInfoSpecifics& from);
  ContactInfoSpecifics(ContactInfoSpecifics&& from) noexcept
    : ContactInfoSpecifics() {
    *this = ::std::move(from);
  }

  inline ContactInfoSpecifics& operator=(const ContactInfoSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContactInfoSpecifics& operator=(ContactInfoSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ContactInfoSpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContactInfoSpecifics* internal_default_instance() {
    return reinterpret_cast<const ContactInfoSpecifics*>(
               &_ContactInfoSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ContactInfoSpecifics& a, ContactInfoSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ContactInfoSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContactInfoSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContactInfoSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContactInfoSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ContactInfoSpecifics& from);
  void MergeFrom(const ContactInfoSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContactInfoSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.ContactInfoSpecifics";
  }
  protected:
  explicit ContactInfoSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ContactInfoSpecifics_TokenMetadata TokenMetadata;
  typedef ContactInfoSpecifics_StringToken StringToken;
  typedef ContactInfoSpecifics_IntegerToken IntegerToken;

  typedef ContactInfoSpecifics_VerificationStatus VerificationStatus;
  static constexpr VerificationStatus VERIFICATION_STATUS_UNSPECIFIED =
    ContactInfoSpecifics_VerificationStatus_VERIFICATION_STATUS_UNSPECIFIED;
  static constexpr VerificationStatus PARSED =
    ContactInfoSpecifics_VerificationStatus_PARSED;
  static constexpr VerificationStatus FORMATTED =
    ContactInfoSpecifics_VerificationStatus_FORMATTED;
  static constexpr VerificationStatus OBSERVED =
    ContactInfoSpecifics_VerificationStatus_OBSERVED;
  static constexpr VerificationStatus USER_VERIFIED =
    ContactInfoSpecifics_VerificationStatus_USER_VERIFIED;
  static constexpr VerificationStatus SERVER_PARSED =
    ContactInfoSpecifics_VerificationStatus_SERVER_PARSED;
  static inline bool VerificationStatus_IsValid(int value) {
    return ContactInfoSpecifics_VerificationStatus_IsValid(value);
  }
  static constexpr VerificationStatus VerificationStatus_MIN =
    ContactInfoSpecifics_VerificationStatus_VerificationStatus_MIN;
  static constexpr VerificationStatus VerificationStatus_MAX =
    ContactInfoSpecifics_VerificationStatus_VerificationStatus_MAX;
  static constexpr int VerificationStatus_ARRAYSIZE =
    ContactInfoSpecifics_VerificationStatus_VerificationStatus_ARRAYSIZE;
  template<typename T>
  static inline const std::string& VerificationStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VerificationStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VerificationStatus_Name.");
    return ContactInfoSpecifics_VerificationStatus_Name(enum_t_value);
  }
  static inline bool VerificationStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VerificationStatus* value) {
    return ContactInfoSpecifics_VerificationStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGuidFieldNumber = 1,
    kSourceFieldNumber = 2,
    kProfileLabelFieldNumber = 5,
    kNameHonorificFieldNumber = 6,
    kNameFirstFieldNumber = 7,
    kNameMiddleFieldNumber = 8,
    kNameLastFieldNumber = 9,
    kNameLastFirstFieldNumber = 10,
    kNameLastConjunctionFieldNumber = 11,
    kNameLastSecondFieldNumber = 12,
    kNameFullFieldNumber = 13,
    kNameFullWithHonorificFieldNumber = 14,
    kEmailAddressFieldNumber = 15,
    kCompanyNameFieldNumber = 16,
    kAddressCityFieldNumber = 17,
    kAddressStateFieldNumber = 18,
    kAddressZipFieldNumber = 19,
    kAddressCountryFieldNumber = 20,
    kAddressStreetAddressFieldNumber = 21,
    kAddressSortingCodeFieldNumber = 22,
    kAddressDependentLocalityFieldNumber = 23,
    kAddressLanguageCodeFieldNumber = 24,
    kAddressThoroughfareNameFieldNumber = 25,
    kAddressThoroughfareNumberFieldNumber = 26,
    kAddressDependentThoroughfareNameFieldNumber = 27,
    kAddressThoroughfareAndDependentThoroughfareNameFieldNumber = 28,
    kAddressPremiseNameFieldNumber = 29,
    kAddressSubpremiseNameFieldNumber = 30,
    kAddressAptNumFieldNumber = 31,
    kAddressFloorFieldNumber = 32,
    kPhoneHomeWholeNumberFieldNumber = 33,
    kBirthdateDayFieldNumber = 34,
    kBirthdateMonthFieldNumber = 35,
    kBirthdateYearFieldNumber = 36,
    kUseCountFieldNumber = 3,
    kUseDateWindowsEpochMicrosFieldNumber = 4,
  };
  // optional string guid = 1;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  const std::string& guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guid();
  PROTOBUF_NODISCARD std::string* release_guid();
  void set_allocated_guid(std::string* guid);
  private:
  const std::string& _internal_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guid(const std::string& value);
  std::string* _internal_mutable_guid();
  public:

  // optional string source = 2;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional string profile_label = 5;
  bool has_profile_label() const;
  private:
  bool _internal_has_profile_label() const;
  public:
  void clear_profile_label();
  const std::string& profile_label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_profile_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_profile_label();
  PROTOBUF_NODISCARD std::string* release_profile_label();
  void set_allocated_profile_label(std::string* profile_label);
  private:
  const std::string& _internal_profile_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile_label(const std::string& value);
  std::string* _internal_mutable_profile_label();
  public:

  // optional .sync_pb.ContactInfoSpecifics.StringToken name_honorific = 6;
  bool has_name_honorific() const;
  private:
  bool _internal_has_name_honorific() const;
  public:
  void clear_name_honorific();
  const ::sync_pb::ContactInfoSpecifics_StringToken& name_honorific() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_name_honorific();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_name_honorific();
  void set_allocated_name_honorific(::sync_pb::ContactInfoSpecifics_StringToken* name_honorific);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_name_honorific() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_name_honorific();
  public:
  void unsafe_arena_set_allocated_name_honorific(
      ::sync_pb::ContactInfoSpecifics_StringToken* name_honorific);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_name_honorific();

  // optional .sync_pb.ContactInfoSpecifics.StringToken name_first = 7;
  bool has_name_first() const;
  private:
  bool _internal_has_name_first() const;
  public:
  void clear_name_first();
  const ::sync_pb::ContactInfoSpecifics_StringToken& name_first() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_name_first();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_name_first();
  void set_allocated_name_first(::sync_pb::ContactInfoSpecifics_StringToken* name_first);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_name_first() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_name_first();
  public:
  void unsafe_arena_set_allocated_name_first(
      ::sync_pb::ContactInfoSpecifics_StringToken* name_first);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_name_first();

  // optional .sync_pb.ContactInfoSpecifics.StringToken name_middle = 8;
  bool has_name_middle() const;
  private:
  bool _internal_has_name_middle() const;
  public:
  void clear_name_middle();
  const ::sync_pb::ContactInfoSpecifics_StringToken& name_middle() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_name_middle();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_name_middle();
  void set_allocated_name_middle(::sync_pb::ContactInfoSpecifics_StringToken* name_middle);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_name_middle() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_name_middle();
  public:
  void unsafe_arena_set_allocated_name_middle(
      ::sync_pb::ContactInfoSpecifics_StringToken* name_middle);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_name_middle();

  // optional .sync_pb.ContactInfoSpecifics.StringToken name_last = 9;
  bool has_name_last() const;
  private:
  bool _internal_has_name_last() const;
  public:
  void clear_name_last();
  const ::sync_pb::ContactInfoSpecifics_StringToken& name_last() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_name_last();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_name_last();
  void set_allocated_name_last(::sync_pb::ContactInfoSpecifics_StringToken* name_last);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_name_last() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_name_last();
  public:
  void unsafe_arena_set_allocated_name_last(
      ::sync_pb::ContactInfoSpecifics_StringToken* name_last);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_name_last();

  // optional .sync_pb.ContactInfoSpecifics.StringToken name_last_first = 10;
  bool has_name_last_first() const;
  private:
  bool _internal_has_name_last_first() const;
  public:
  void clear_name_last_first();
  const ::sync_pb::ContactInfoSpecifics_StringToken& name_last_first() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_name_last_first();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_name_last_first();
  void set_allocated_name_last_first(::sync_pb::ContactInfoSpecifics_StringToken* name_last_first);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_name_last_first() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_name_last_first();
  public:
  void unsafe_arena_set_allocated_name_last_first(
      ::sync_pb::ContactInfoSpecifics_StringToken* name_last_first);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_name_last_first();

  // optional .sync_pb.ContactInfoSpecifics.StringToken name_last_conjunction = 11;
  bool has_name_last_conjunction() const;
  private:
  bool _internal_has_name_last_conjunction() const;
  public:
  void clear_name_last_conjunction();
  const ::sync_pb::ContactInfoSpecifics_StringToken& name_last_conjunction() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_name_last_conjunction();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_name_last_conjunction();
  void set_allocated_name_last_conjunction(::sync_pb::ContactInfoSpecifics_StringToken* name_last_conjunction);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_name_last_conjunction() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_name_last_conjunction();
  public:
  void unsafe_arena_set_allocated_name_last_conjunction(
      ::sync_pb::ContactInfoSpecifics_StringToken* name_last_conjunction);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_name_last_conjunction();

  // optional .sync_pb.ContactInfoSpecifics.StringToken name_last_second = 12;
  bool has_name_last_second() const;
  private:
  bool _internal_has_name_last_second() const;
  public:
  void clear_name_last_second();
  const ::sync_pb::ContactInfoSpecifics_StringToken& name_last_second() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_name_last_second();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_name_last_second();
  void set_allocated_name_last_second(::sync_pb::ContactInfoSpecifics_StringToken* name_last_second);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_name_last_second() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_name_last_second();
  public:
  void unsafe_arena_set_allocated_name_last_second(
      ::sync_pb::ContactInfoSpecifics_StringToken* name_last_second);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_name_last_second();

  // optional .sync_pb.ContactInfoSpecifics.StringToken name_full = 13;
  bool has_name_full() const;
  private:
  bool _internal_has_name_full() const;
  public:
  void clear_name_full();
  const ::sync_pb::ContactInfoSpecifics_StringToken& name_full() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_name_full();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_name_full();
  void set_allocated_name_full(::sync_pb::ContactInfoSpecifics_StringToken* name_full);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_name_full() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_name_full();
  public:
  void unsafe_arena_set_allocated_name_full(
      ::sync_pb::ContactInfoSpecifics_StringToken* name_full);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_name_full();

  // optional .sync_pb.ContactInfoSpecifics.StringToken name_full_with_honorific = 14;
  bool has_name_full_with_honorific() const;
  private:
  bool _internal_has_name_full_with_honorific() const;
  public:
  void clear_name_full_with_honorific();
  const ::sync_pb::ContactInfoSpecifics_StringToken& name_full_with_honorific() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_name_full_with_honorific();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_name_full_with_honorific();
  void set_allocated_name_full_with_honorific(::sync_pb::ContactInfoSpecifics_StringToken* name_full_with_honorific);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_name_full_with_honorific() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_name_full_with_honorific();
  public:
  void unsafe_arena_set_allocated_name_full_with_honorific(
      ::sync_pb::ContactInfoSpecifics_StringToken* name_full_with_honorific);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_name_full_with_honorific();

  // optional .sync_pb.ContactInfoSpecifics.StringToken email_address = 15;
  bool has_email_address() const;
  private:
  bool _internal_has_email_address() const;
  public:
  void clear_email_address();
  const ::sync_pb::ContactInfoSpecifics_StringToken& email_address() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_email_address();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_email_address();
  void set_allocated_email_address(::sync_pb::ContactInfoSpecifics_StringToken* email_address);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_email_address() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_email_address();
  public:
  void unsafe_arena_set_allocated_email_address(
      ::sync_pb::ContactInfoSpecifics_StringToken* email_address);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_email_address();

  // optional .sync_pb.ContactInfoSpecifics.StringToken company_name = 16;
  bool has_company_name() const;
  private:
  bool _internal_has_company_name() const;
  public:
  void clear_company_name();
  const ::sync_pb::ContactInfoSpecifics_StringToken& company_name() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_company_name();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_company_name();
  void set_allocated_company_name(::sync_pb::ContactInfoSpecifics_StringToken* company_name);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_company_name() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_company_name();
  public:
  void unsafe_arena_set_allocated_company_name(
      ::sync_pb::ContactInfoSpecifics_StringToken* company_name);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_company_name();

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_city = 17;
  bool has_address_city() const;
  private:
  bool _internal_has_address_city() const;
  public:
  void clear_address_city();
  const ::sync_pb::ContactInfoSpecifics_StringToken& address_city() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_address_city();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_address_city();
  void set_allocated_address_city(::sync_pb::ContactInfoSpecifics_StringToken* address_city);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_address_city() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_address_city();
  public:
  void unsafe_arena_set_allocated_address_city(
      ::sync_pb::ContactInfoSpecifics_StringToken* address_city);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_address_city();

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_state = 18;
  bool has_address_state() const;
  private:
  bool _internal_has_address_state() const;
  public:
  void clear_address_state();
  const ::sync_pb::ContactInfoSpecifics_StringToken& address_state() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_address_state();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_address_state();
  void set_allocated_address_state(::sync_pb::ContactInfoSpecifics_StringToken* address_state);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_address_state() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_address_state();
  public:
  void unsafe_arena_set_allocated_address_state(
      ::sync_pb::ContactInfoSpecifics_StringToken* address_state);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_address_state();

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_zip = 19;
  bool has_address_zip() const;
  private:
  bool _internal_has_address_zip() const;
  public:
  void clear_address_zip();
  const ::sync_pb::ContactInfoSpecifics_StringToken& address_zip() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_address_zip();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_address_zip();
  void set_allocated_address_zip(::sync_pb::ContactInfoSpecifics_StringToken* address_zip);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_address_zip() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_address_zip();
  public:
  void unsafe_arena_set_allocated_address_zip(
      ::sync_pb::ContactInfoSpecifics_StringToken* address_zip);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_address_zip();

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_country = 20;
  bool has_address_country() const;
  private:
  bool _internal_has_address_country() const;
  public:
  void clear_address_country();
  const ::sync_pb::ContactInfoSpecifics_StringToken& address_country() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_address_country();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_address_country();
  void set_allocated_address_country(::sync_pb::ContactInfoSpecifics_StringToken* address_country);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_address_country() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_address_country();
  public:
  void unsafe_arena_set_allocated_address_country(
      ::sync_pb::ContactInfoSpecifics_StringToken* address_country);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_address_country();

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_street_address = 21;
  bool has_address_street_address() const;
  private:
  bool _internal_has_address_street_address() const;
  public:
  void clear_address_street_address();
  const ::sync_pb::ContactInfoSpecifics_StringToken& address_street_address() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_address_street_address();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_address_street_address();
  void set_allocated_address_street_address(::sync_pb::ContactInfoSpecifics_StringToken* address_street_address);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_address_street_address() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_address_street_address();
  public:
  void unsafe_arena_set_allocated_address_street_address(
      ::sync_pb::ContactInfoSpecifics_StringToken* address_street_address);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_address_street_address();

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_sorting_code = 22;
  bool has_address_sorting_code() const;
  private:
  bool _internal_has_address_sorting_code() const;
  public:
  void clear_address_sorting_code();
  const ::sync_pb::ContactInfoSpecifics_StringToken& address_sorting_code() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_address_sorting_code();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_address_sorting_code();
  void set_allocated_address_sorting_code(::sync_pb::ContactInfoSpecifics_StringToken* address_sorting_code);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_address_sorting_code() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_address_sorting_code();
  public:
  void unsafe_arena_set_allocated_address_sorting_code(
      ::sync_pb::ContactInfoSpecifics_StringToken* address_sorting_code);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_address_sorting_code();

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_dependent_locality = 23;
  bool has_address_dependent_locality() const;
  private:
  bool _internal_has_address_dependent_locality() const;
  public:
  void clear_address_dependent_locality();
  const ::sync_pb::ContactInfoSpecifics_StringToken& address_dependent_locality() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_address_dependent_locality();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_address_dependent_locality();
  void set_allocated_address_dependent_locality(::sync_pb::ContactInfoSpecifics_StringToken* address_dependent_locality);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_address_dependent_locality() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_address_dependent_locality();
  public:
  void unsafe_arena_set_allocated_address_dependent_locality(
      ::sync_pb::ContactInfoSpecifics_StringToken* address_dependent_locality);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_address_dependent_locality();

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_language_code = 24;
  bool has_address_language_code() const;
  private:
  bool _internal_has_address_language_code() const;
  public:
  void clear_address_language_code();
  const ::sync_pb::ContactInfoSpecifics_StringToken& address_language_code() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_address_language_code();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_address_language_code();
  void set_allocated_address_language_code(::sync_pb::ContactInfoSpecifics_StringToken* address_language_code);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_address_language_code() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_address_language_code();
  public:
  void unsafe_arena_set_allocated_address_language_code(
      ::sync_pb::ContactInfoSpecifics_StringToken* address_language_code);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_address_language_code();

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_thoroughfare_name = 25;
  bool has_address_thoroughfare_name() const;
  private:
  bool _internal_has_address_thoroughfare_name() const;
  public:
  void clear_address_thoroughfare_name();
  const ::sync_pb::ContactInfoSpecifics_StringToken& address_thoroughfare_name() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_address_thoroughfare_name();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_address_thoroughfare_name();
  void set_allocated_address_thoroughfare_name(::sync_pb::ContactInfoSpecifics_StringToken* address_thoroughfare_name);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_address_thoroughfare_name() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_address_thoroughfare_name();
  public:
  void unsafe_arena_set_allocated_address_thoroughfare_name(
      ::sync_pb::ContactInfoSpecifics_StringToken* address_thoroughfare_name);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_address_thoroughfare_name();

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_thoroughfare_number = 26;
  bool has_address_thoroughfare_number() const;
  private:
  bool _internal_has_address_thoroughfare_number() const;
  public:
  void clear_address_thoroughfare_number();
  const ::sync_pb::ContactInfoSpecifics_StringToken& address_thoroughfare_number() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_address_thoroughfare_number();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_address_thoroughfare_number();
  void set_allocated_address_thoroughfare_number(::sync_pb::ContactInfoSpecifics_StringToken* address_thoroughfare_number);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_address_thoroughfare_number() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_address_thoroughfare_number();
  public:
  void unsafe_arena_set_allocated_address_thoroughfare_number(
      ::sync_pb::ContactInfoSpecifics_StringToken* address_thoroughfare_number);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_address_thoroughfare_number();

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_dependent_thoroughfare_name = 27;
  bool has_address_dependent_thoroughfare_name() const;
  private:
  bool _internal_has_address_dependent_thoroughfare_name() const;
  public:
  void clear_address_dependent_thoroughfare_name();
  const ::sync_pb::ContactInfoSpecifics_StringToken& address_dependent_thoroughfare_name() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_address_dependent_thoroughfare_name();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_address_dependent_thoroughfare_name();
  void set_allocated_address_dependent_thoroughfare_name(::sync_pb::ContactInfoSpecifics_StringToken* address_dependent_thoroughfare_name);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_address_dependent_thoroughfare_name() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_address_dependent_thoroughfare_name();
  public:
  void unsafe_arena_set_allocated_address_dependent_thoroughfare_name(
      ::sync_pb::ContactInfoSpecifics_StringToken* address_dependent_thoroughfare_name);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_address_dependent_thoroughfare_name();

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_thoroughfare_and_dependent_thoroughfare_name = 28;
  bool has_address_thoroughfare_and_dependent_thoroughfare_name() const;
  private:
  bool _internal_has_address_thoroughfare_and_dependent_thoroughfare_name() const;
  public:
  void clear_address_thoroughfare_and_dependent_thoroughfare_name();
  const ::sync_pb::ContactInfoSpecifics_StringToken& address_thoroughfare_and_dependent_thoroughfare_name() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_address_thoroughfare_and_dependent_thoroughfare_name();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_address_thoroughfare_and_dependent_thoroughfare_name();
  void set_allocated_address_thoroughfare_and_dependent_thoroughfare_name(::sync_pb::ContactInfoSpecifics_StringToken* address_thoroughfare_and_dependent_thoroughfare_name);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_address_thoroughfare_and_dependent_thoroughfare_name() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_address_thoroughfare_and_dependent_thoroughfare_name();
  public:
  void unsafe_arena_set_allocated_address_thoroughfare_and_dependent_thoroughfare_name(
      ::sync_pb::ContactInfoSpecifics_StringToken* address_thoroughfare_and_dependent_thoroughfare_name);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_address_thoroughfare_and_dependent_thoroughfare_name();

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_premise_name = 29;
  bool has_address_premise_name() const;
  private:
  bool _internal_has_address_premise_name() const;
  public:
  void clear_address_premise_name();
  const ::sync_pb::ContactInfoSpecifics_StringToken& address_premise_name() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_address_premise_name();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_address_premise_name();
  void set_allocated_address_premise_name(::sync_pb::ContactInfoSpecifics_StringToken* address_premise_name);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_address_premise_name() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_address_premise_name();
  public:
  void unsafe_arena_set_allocated_address_premise_name(
      ::sync_pb::ContactInfoSpecifics_StringToken* address_premise_name);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_address_premise_name();

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_subpremise_name = 30;
  bool has_address_subpremise_name() const;
  private:
  bool _internal_has_address_subpremise_name() const;
  public:
  void clear_address_subpremise_name();
  const ::sync_pb::ContactInfoSpecifics_StringToken& address_subpremise_name() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_address_subpremise_name();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_address_subpremise_name();
  void set_allocated_address_subpremise_name(::sync_pb::ContactInfoSpecifics_StringToken* address_subpremise_name);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_address_subpremise_name() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_address_subpremise_name();
  public:
  void unsafe_arena_set_allocated_address_subpremise_name(
      ::sync_pb::ContactInfoSpecifics_StringToken* address_subpremise_name);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_address_subpremise_name();

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_apt_num = 31;
  bool has_address_apt_num() const;
  private:
  bool _internal_has_address_apt_num() const;
  public:
  void clear_address_apt_num();
  const ::sync_pb::ContactInfoSpecifics_StringToken& address_apt_num() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_address_apt_num();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_address_apt_num();
  void set_allocated_address_apt_num(::sync_pb::ContactInfoSpecifics_StringToken* address_apt_num);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_address_apt_num() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_address_apt_num();
  public:
  void unsafe_arena_set_allocated_address_apt_num(
      ::sync_pb::ContactInfoSpecifics_StringToken* address_apt_num);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_address_apt_num();

  // optional .sync_pb.ContactInfoSpecifics.StringToken address_floor = 32;
  bool has_address_floor() const;
  private:
  bool _internal_has_address_floor() const;
  public:
  void clear_address_floor();
  const ::sync_pb::ContactInfoSpecifics_StringToken& address_floor() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_address_floor();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_address_floor();
  void set_allocated_address_floor(::sync_pb::ContactInfoSpecifics_StringToken* address_floor);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_address_floor() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_address_floor();
  public:
  void unsafe_arena_set_allocated_address_floor(
      ::sync_pb::ContactInfoSpecifics_StringToken* address_floor);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_address_floor();

  // optional .sync_pb.ContactInfoSpecifics.StringToken phone_home_whole_number = 33;
  bool has_phone_home_whole_number() const;
  private:
  bool _internal_has_phone_home_whole_number() const;
  public:
  void clear_phone_home_whole_number();
  const ::sync_pb::ContactInfoSpecifics_StringToken& phone_home_whole_number() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_StringToken* release_phone_home_whole_number();
  ::sync_pb::ContactInfoSpecifics_StringToken* mutable_phone_home_whole_number();
  void set_allocated_phone_home_whole_number(::sync_pb::ContactInfoSpecifics_StringToken* phone_home_whole_number);
  private:
  const ::sync_pb::ContactInfoSpecifics_StringToken& _internal_phone_home_whole_number() const;
  ::sync_pb::ContactInfoSpecifics_StringToken* _internal_mutable_phone_home_whole_number();
  public:
  void unsafe_arena_set_allocated_phone_home_whole_number(
      ::sync_pb::ContactInfoSpecifics_StringToken* phone_home_whole_number);
  ::sync_pb::ContactInfoSpecifics_StringToken* unsafe_arena_release_phone_home_whole_number();

  // optional .sync_pb.ContactInfoSpecifics.IntegerToken birthdate_day = 34;
  bool has_birthdate_day() const;
  private:
  bool _internal_has_birthdate_day() const;
  public:
  void clear_birthdate_day();
  const ::sync_pb::ContactInfoSpecifics_IntegerToken& birthdate_day() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_IntegerToken* release_birthdate_day();
  ::sync_pb::ContactInfoSpecifics_IntegerToken* mutable_birthdate_day();
  void set_allocated_birthdate_day(::sync_pb::ContactInfoSpecifics_IntegerToken* birthdate_day);
  private:
  const ::sync_pb::ContactInfoSpecifics_IntegerToken& _internal_birthdate_day() const;
  ::sync_pb::ContactInfoSpecifics_IntegerToken* _internal_mutable_birthdate_day();
  public:
  void unsafe_arena_set_allocated_birthdate_day(
      ::sync_pb::ContactInfoSpecifics_IntegerToken* birthdate_day);
  ::sync_pb::ContactInfoSpecifics_IntegerToken* unsafe_arena_release_birthdate_day();

  // optional .sync_pb.ContactInfoSpecifics.IntegerToken birthdate_month = 35;
  bool has_birthdate_month() const;
  private:
  bool _internal_has_birthdate_month() const;
  public:
  void clear_birthdate_month();
  const ::sync_pb::ContactInfoSpecifics_IntegerToken& birthdate_month() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_IntegerToken* release_birthdate_month();
  ::sync_pb::ContactInfoSpecifics_IntegerToken* mutable_birthdate_month();
  void set_allocated_birthdate_month(::sync_pb::ContactInfoSpecifics_IntegerToken* birthdate_month);
  private:
  const ::sync_pb::ContactInfoSpecifics_IntegerToken& _internal_birthdate_month() const;
  ::sync_pb::ContactInfoSpecifics_IntegerToken* _internal_mutable_birthdate_month();
  public:
  void unsafe_arena_set_allocated_birthdate_month(
      ::sync_pb::ContactInfoSpecifics_IntegerToken* birthdate_month);
  ::sync_pb::ContactInfoSpecifics_IntegerToken* unsafe_arena_release_birthdate_month();

  // optional .sync_pb.ContactInfoSpecifics.IntegerToken birthdate_year = 36;
  bool has_birthdate_year() const;
  private:
  bool _internal_has_birthdate_year() const;
  public:
  void clear_birthdate_year();
  const ::sync_pb::ContactInfoSpecifics_IntegerToken& birthdate_year() const;
  PROTOBUF_NODISCARD ::sync_pb::ContactInfoSpecifics_IntegerToken* release_birthdate_year();
  ::sync_pb::ContactInfoSpecifics_IntegerToken* mutable_birthdate_year();
  void set_allocated_birthdate_year(::sync_pb::ContactInfoSpecifics_IntegerToken* birthdate_year);
  private:
  const ::sync_pb::ContactInfoSpecifics_IntegerToken& _internal_birthdate_year() const;
  ::sync_pb::ContactInfoSpecifics_IntegerToken* _internal_mutable_birthdate_year();
  public:
  void unsafe_arena_set_allocated_birthdate_year(
      ::sync_pb::ContactInfoSpecifics_IntegerToken* birthdate_year);
  ::sync_pb::ContactInfoSpecifics_IntegerToken* unsafe_arena_release_birthdate_year();

  // optional int64 use_count = 3;
  bool has_use_count() const;
  private:
  bool _internal_has_use_count() const;
  public:
  void clear_use_count();
  int64_t use_count() const;
  void set_use_count(int64_t value);
  private:
  int64_t _internal_use_count() const;
  void _internal_set_use_count(int64_t value);
  public:

  // optional int64 use_date_windows_epoch_micros = 4;
  bool has_use_date_windows_epoch_micros() const;
  private:
  bool _internal_has_use_date_windows_epoch_micros() const;
  public:
  void clear_use_date_windows_epoch_micros();
  int64_t use_date_windows_epoch_micros() const;
  void set_use_date_windows_epoch_micros(int64_t value);
  private:
  int64_t _internal_use_date_windows_epoch_micros() const;
  void _internal_set_use_date_windows_epoch_micros(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.ContactInfoSpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_label_;
  ::sync_pb::ContactInfoSpecifics_StringToken* name_honorific_;
  ::sync_pb::ContactInfoSpecifics_StringToken* name_first_;
  ::sync_pb::ContactInfoSpecifics_StringToken* name_middle_;
  ::sync_pb::ContactInfoSpecifics_StringToken* name_last_;
  ::sync_pb::ContactInfoSpecifics_StringToken* name_last_first_;
  ::sync_pb::ContactInfoSpecifics_StringToken* name_last_conjunction_;
  ::sync_pb::ContactInfoSpecifics_StringToken* name_last_second_;
  ::sync_pb::ContactInfoSpecifics_StringToken* name_full_;
  ::sync_pb::ContactInfoSpecifics_StringToken* name_full_with_honorific_;
  ::sync_pb::ContactInfoSpecifics_StringToken* email_address_;
  ::sync_pb::ContactInfoSpecifics_StringToken* company_name_;
  ::sync_pb::ContactInfoSpecifics_StringToken* address_city_;
  ::sync_pb::ContactInfoSpecifics_StringToken* address_state_;
  ::sync_pb::ContactInfoSpecifics_StringToken* address_zip_;
  ::sync_pb::ContactInfoSpecifics_StringToken* address_country_;
  ::sync_pb::ContactInfoSpecifics_StringToken* address_street_address_;
  ::sync_pb::ContactInfoSpecifics_StringToken* address_sorting_code_;
  ::sync_pb::ContactInfoSpecifics_StringToken* address_dependent_locality_;
  ::sync_pb::ContactInfoSpecifics_StringToken* address_language_code_;
  ::sync_pb::ContactInfoSpecifics_StringToken* address_thoroughfare_name_;
  ::sync_pb::ContactInfoSpecifics_StringToken* address_thoroughfare_number_;
  ::sync_pb::ContactInfoSpecifics_StringToken* address_dependent_thoroughfare_name_;
  ::sync_pb::ContactInfoSpecifics_StringToken* address_thoroughfare_and_dependent_thoroughfare_name_;
  ::sync_pb::ContactInfoSpecifics_StringToken* address_premise_name_;
  ::sync_pb::ContactInfoSpecifics_StringToken* address_subpremise_name_;
  ::sync_pb::ContactInfoSpecifics_StringToken* address_apt_num_;
  ::sync_pb::ContactInfoSpecifics_StringToken* address_floor_;
  ::sync_pb::ContactInfoSpecifics_StringToken* phone_home_whole_number_;
  ::sync_pb::ContactInfoSpecifics_IntegerToken* birthdate_day_;
  ::sync_pb::ContactInfoSpecifics_IntegerToken* birthdate_month_;
  ::sync_pb::ContactInfoSpecifics_IntegerToken* birthdate_year_;
  int64_t use_count_;
  int64_t use_date_windows_epoch_micros_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fcontact_5finfo_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContactInfoSpecifics_TokenMetadata

// optional .sync_pb.ContactInfoSpecifics.VerificationStatus status = 1;
inline bool ContactInfoSpecifics_TokenMetadata::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContactInfoSpecifics_TokenMetadata::has_status() const {
  return _internal_has_status();
}
inline void ContactInfoSpecifics_TokenMetadata::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::sync_pb::ContactInfoSpecifics_VerificationStatus ContactInfoSpecifics_TokenMetadata::_internal_status() const {
  return static_cast< ::sync_pb::ContactInfoSpecifics_VerificationStatus >(status_);
}
inline ::sync_pb::ContactInfoSpecifics_VerificationStatus ContactInfoSpecifics_TokenMetadata::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.TokenMetadata.status)
  return _internal_status();
}
inline void ContactInfoSpecifics_TokenMetadata::_internal_set_status(::sync_pb::ContactInfoSpecifics_VerificationStatus value) {
  assert(::sync_pb::ContactInfoSpecifics_VerificationStatus_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  status_ = value;
}
inline void ContactInfoSpecifics_TokenMetadata::set_status(::sync_pb::ContactInfoSpecifics_VerificationStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:sync_pb.ContactInfoSpecifics.TokenMetadata.status)
}

// -------------------------------------------------------------------

// ContactInfoSpecifics_StringToken

// optional string value = 1;
inline bool ContactInfoSpecifics_StringToken::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContactInfoSpecifics_StringToken::has_value() const {
  return _internal_has_value();
}
inline void ContactInfoSpecifics_StringToken::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContactInfoSpecifics_StringToken::value() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.StringToken.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContactInfoSpecifics_StringToken::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.ContactInfoSpecifics.StringToken.value)
}
inline std::string* ContactInfoSpecifics_StringToken::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.StringToken.value)
  return _s;
}
inline const std::string& ContactInfoSpecifics_StringToken::_internal_value() const {
  return value_.Get();
}
inline void ContactInfoSpecifics_StringToken::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* ContactInfoSpecifics_StringToken::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* ContactInfoSpecifics_StringToken::release_value() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.StringToken.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContactInfoSpecifics_StringToken::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.StringToken.value)
}

// optional .sync_pb.ContactInfoSpecifics.TokenMetadata metadata = 2;
inline bool ContactInfoSpecifics_StringToken::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || metadata_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics_StringToken::has_metadata() const {
  return _internal_has_metadata();
}
inline void ContactInfoSpecifics_StringToken::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sync_pb::ContactInfoSpecifics_TokenMetadata& ContactInfoSpecifics_StringToken::_internal_metadata() const {
  const ::sync_pb::ContactInfoSpecifics_TokenMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_TokenMetadata&>(
      ::sync_pb::_ContactInfoSpecifics_TokenMetadata_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_TokenMetadata& ContactInfoSpecifics_StringToken::metadata() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.StringToken.metadata)
  return _internal_metadata();
}
inline void ContactInfoSpecifics_StringToken::unsafe_arena_set_allocated_metadata(
    ::sync_pb::ContactInfoSpecifics_TokenMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.StringToken.metadata)
}
inline ::sync_pb::ContactInfoSpecifics_TokenMetadata* ContactInfoSpecifics_StringToken::release_metadata() {
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::ContactInfoSpecifics_TokenMetadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_TokenMetadata* ContactInfoSpecifics_StringToken::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.StringToken.metadata)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::ContactInfoSpecifics_TokenMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_TokenMetadata* ContactInfoSpecifics_StringToken::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000002u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_TokenMetadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::sync_pb::ContactInfoSpecifics_TokenMetadata* ContactInfoSpecifics_StringToken::mutable_metadata() {
  ::sync_pb::ContactInfoSpecifics_TokenMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.StringToken.metadata)
  return _msg;
}
inline void ContactInfoSpecifics_StringToken::set_allocated_metadata(::sync_pb::ContactInfoSpecifics_TokenMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.StringToken.metadata)
}

// -------------------------------------------------------------------

// ContactInfoSpecifics_IntegerToken

// optional int64 value = 1;
inline bool ContactInfoSpecifics_IntegerToken::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContactInfoSpecifics_IntegerToken::has_value() const {
  return _internal_has_value();
}
inline void ContactInfoSpecifics_IntegerToken::clear_value() {
  value_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t ContactInfoSpecifics_IntegerToken::_internal_value() const {
  return value_;
}
inline int64_t ContactInfoSpecifics_IntegerToken::value() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.IntegerToken.value)
  return _internal_value();
}
inline void ContactInfoSpecifics_IntegerToken::_internal_set_value(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void ContactInfoSpecifics_IntegerToken::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:sync_pb.ContactInfoSpecifics.IntegerToken.value)
}

// optional .sync_pb.ContactInfoSpecifics.TokenMetadata metadata = 2;
inline bool ContactInfoSpecifics_IntegerToken::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || metadata_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics_IntegerToken::has_metadata() const {
  return _internal_has_metadata();
}
inline void ContactInfoSpecifics_IntegerToken::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sync_pb::ContactInfoSpecifics_TokenMetadata& ContactInfoSpecifics_IntegerToken::_internal_metadata() const {
  const ::sync_pb::ContactInfoSpecifics_TokenMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_TokenMetadata&>(
      ::sync_pb::_ContactInfoSpecifics_TokenMetadata_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_TokenMetadata& ContactInfoSpecifics_IntegerToken::metadata() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.IntegerToken.metadata)
  return _internal_metadata();
}
inline void ContactInfoSpecifics_IntegerToken::unsafe_arena_set_allocated_metadata(
    ::sync_pb::ContactInfoSpecifics_TokenMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.IntegerToken.metadata)
}
inline ::sync_pb::ContactInfoSpecifics_TokenMetadata* ContactInfoSpecifics_IntegerToken::release_metadata() {
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::ContactInfoSpecifics_TokenMetadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_TokenMetadata* ContactInfoSpecifics_IntegerToken::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.IntegerToken.metadata)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::ContactInfoSpecifics_TokenMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_TokenMetadata* ContactInfoSpecifics_IntegerToken::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000001u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_TokenMetadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::sync_pb::ContactInfoSpecifics_TokenMetadata* ContactInfoSpecifics_IntegerToken::mutable_metadata() {
  ::sync_pb::ContactInfoSpecifics_TokenMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.IntegerToken.metadata)
  return _msg;
}
inline void ContactInfoSpecifics_IntegerToken::set_allocated_metadata(::sync_pb::ContactInfoSpecifics_TokenMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.IntegerToken.metadata)
}

// -------------------------------------------------------------------

// ContactInfoSpecifics

// optional string guid = 1;
inline bool ContactInfoSpecifics::_internal_has_guid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContactInfoSpecifics::has_guid() const {
  return _internal_has_guid();
}
inline void ContactInfoSpecifics::clear_guid() {
  guid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContactInfoSpecifics::guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.guid)
  return _internal_guid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContactInfoSpecifics::set_guid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 guid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.ContactInfoSpecifics.guid)
}
inline std::string* ContactInfoSpecifics::mutable_guid() {
  std::string* _s = _internal_mutable_guid();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.guid)
  return _s;
}
inline const std::string& ContactInfoSpecifics::_internal_guid() const {
  return guid_.Get();
}
inline void ContactInfoSpecifics::_internal_set_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  guid_.Set(value, GetArenaForAllocation());
}
inline std::string* ContactInfoSpecifics::_internal_mutable_guid() {
  _has_bits_[0] |= 0x00000001u;
  return guid_.Mutable(GetArenaForAllocation());
}
inline std::string* ContactInfoSpecifics::release_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.guid)
  if (!_internal_has_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = guid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault()) {
    guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContactInfoSpecifics::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  guid_.SetAllocated(guid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault()) {
    guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.guid)
}

// optional string source = 2;
inline bool ContactInfoSpecifics::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContactInfoSpecifics::has_source() const {
  return _internal_has_source();
}
inline void ContactInfoSpecifics::clear_source() {
  source_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContactInfoSpecifics::source() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContactInfoSpecifics::set_source(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.ContactInfoSpecifics.source)
}
inline std::string* ContactInfoSpecifics::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.source)
  return _s;
}
inline const std::string& ContactInfoSpecifics::_internal_source() const {
  return source_.Get();
}
inline void ContactInfoSpecifics::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  source_.Set(value, GetArenaForAllocation());
}
inline std::string* ContactInfoSpecifics::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000002u;
  return source_.Mutable(GetArenaForAllocation());
}
inline std::string* ContactInfoSpecifics::release_source() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = source_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_.IsDefault()) {
    source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContactInfoSpecifics::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_.IsDefault()) {
    source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.source)
}

// optional int64 use_count = 3;
inline bool ContactInfoSpecifics::_internal_has_use_count() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool ContactInfoSpecifics::has_use_count() const {
  return _internal_has_use_count();
}
inline void ContactInfoSpecifics::clear_use_count() {
  use_count_ = int64_t{0};
  _has_bits_[1] &= ~0x00000004u;
}
inline int64_t ContactInfoSpecifics::_internal_use_count() const {
  return use_count_;
}
inline int64_t ContactInfoSpecifics::use_count() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.use_count)
  return _internal_use_count();
}
inline void ContactInfoSpecifics::_internal_set_use_count(int64_t value) {
  _has_bits_[1] |= 0x00000004u;
  use_count_ = value;
}
inline void ContactInfoSpecifics::set_use_count(int64_t value) {
  _internal_set_use_count(value);
  // @@protoc_insertion_point(field_set:sync_pb.ContactInfoSpecifics.use_count)
}

// optional int64 use_date_windows_epoch_micros = 4;
inline bool ContactInfoSpecifics::_internal_has_use_date_windows_epoch_micros() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool ContactInfoSpecifics::has_use_date_windows_epoch_micros() const {
  return _internal_has_use_date_windows_epoch_micros();
}
inline void ContactInfoSpecifics::clear_use_date_windows_epoch_micros() {
  use_date_windows_epoch_micros_ = int64_t{0};
  _has_bits_[1] &= ~0x00000008u;
}
inline int64_t ContactInfoSpecifics::_internal_use_date_windows_epoch_micros() const {
  return use_date_windows_epoch_micros_;
}
inline int64_t ContactInfoSpecifics::use_date_windows_epoch_micros() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.use_date_windows_epoch_micros)
  return _internal_use_date_windows_epoch_micros();
}
inline void ContactInfoSpecifics::_internal_set_use_date_windows_epoch_micros(int64_t value) {
  _has_bits_[1] |= 0x00000008u;
  use_date_windows_epoch_micros_ = value;
}
inline void ContactInfoSpecifics::set_use_date_windows_epoch_micros(int64_t value) {
  _internal_set_use_date_windows_epoch_micros(value);
  // @@protoc_insertion_point(field_set:sync_pb.ContactInfoSpecifics.use_date_windows_epoch_micros)
}

// optional string profile_label = 5;
inline bool ContactInfoSpecifics::_internal_has_profile_label() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContactInfoSpecifics::has_profile_label() const {
  return _internal_has_profile_label();
}
inline void ContactInfoSpecifics::clear_profile_label() {
  profile_label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ContactInfoSpecifics::profile_label() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.profile_label)
  return _internal_profile_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContactInfoSpecifics::set_profile_label(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 profile_label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.ContactInfoSpecifics.profile_label)
}
inline std::string* ContactInfoSpecifics::mutable_profile_label() {
  std::string* _s = _internal_mutable_profile_label();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.profile_label)
  return _s;
}
inline const std::string& ContactInfoSpecifics::_internal_profile_label() const {
  return profile_label_.Get();
}
inline void ContactInfoSpecifics::_internal_set_profile_label(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  profile_label_.Set(value, GetArenaForAllocation());
}
inline std::string* ContactInfoSpecifics::_internal_mutable_profile_label() {
  _has_bits_[0] |= 0x00000004u;
  return profile_label_.Mutable(GetArenaForAllocation());
}
inline std::string* ContactInfoSpecifics::release_profile_label() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.profile_label)
  if (!_internal_has_profile_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = profile_label_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_label_.IsDefault()) {
    profile_label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContactInfoSpecifics::set_allocated_profile_label(std::string* profile_label) {
  if (profile_label != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  profile_label_.SetAllocated(profile_label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_label_.IsDefault()) {
    profile_label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.profile_label)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken name_honorific = 6;
inline bool ContactInfoSpecifics::_internal_has_name_honorific() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || name_honorific_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_name_honorific() const {
  return _internal_has_name_honorific();
}
inline void ContactInfoSpecifics::clear_name_honorific() {
  if (name_honorific_ != nullptr) name_honorific_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_name_honorific() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = name_honorific_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::name_honorific() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.name_honorific)
  return _internal_name_honorific();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_name_honorific(
    ::sync_pb::ContactInfoSpecifics_StringToken* name_honorific) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_honorific_);
  }
  name_honorific_ = name_honorific;
  if (name_honorific) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.name_honorific)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_name_honorific() {
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = name_honorific_;
  name_honorific_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_name_honorific() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.name_honorific)
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = name_honorific_;
  name_honorific_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_name_honorific() {
  _has_bits_[0] |= 0x00000008u;
  if (name_honorific_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    name_honorific_ = p;
  }
  return name_honorific_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_name_honorific() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_name_honorific();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.name_honorific)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_name_honorific(::sync_pb::ContactInfoSpecifics_StringToken* name_honorific) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete name_honorific_;
  }
  if (name_honorific) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(name_honorific);
    if (message_arena != submessage_arena) {
      name_honorific = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name_honorific, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  name_honorific_ = name_honorific;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.name_honorific)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken name_first = 7;
inline bool ContactInfoSpecifics::_internal_has_name_first() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || name_first_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_name_first() const {
  return _internal_has_name_first();
}
inline void ContactInfoSpecifics::clear_name_first() {
  if (name_first_ != nullptr) name_first_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_name_first() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = name_first_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::name_first() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.name_first)
  return _internal_name_first();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_name_first(
    ::sync_pb::ContactInfoSpecifics_StringToken* name_first) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_first_);
  }
  name_first_ = name_first;
  if (name_first) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.name_first)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_name_first() {
  _has_bits_[0] &= ~0x00000010u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = name_first_;
  name_first_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_name_first() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.name_first)
  _has_bits_[0] &= ~0x00000010u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = name_first_;
  name_first_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_name_first() {
  _has_bits_[0] |= 0x00000010u;
  if (name_first_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    name_first_ = p;
  }
  return name_first_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_name_first() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_name_first();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.name_first)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_name_first(::sync_pb::ContactInfoSpecifics_StringToken* name_first) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete name_first_;
  }
  if (name_first) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(name_first);
    if (message_arena != submessage_arena) {
      name_first = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name_first, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  name_first_ = name_first;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.name_first)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken name_middle = 8;
inline bool ContactInfoSpecifics::_internal_has_name_middle() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || name_middle_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_name_middle() const {
  return _internal_has_name_middle();
}
inline void ContactInfoSpecifics::clear_name_middle() {
  if (name_middle_ != nullptr) name_middle_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_name_middle() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = name_middle_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::name_middle() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.name_middle)
  return _internal_name_middle();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_name_middle(
    ::sync_pb::ContactInfoSpecifics_StringToken* name_middle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_middle_);
  }
  name_middle_ = name_middle;
  if (name_middle) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.name_middle)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_name_middle() {
  _has_bits_[0] &= ~0x00000020u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = name_middle_;
  name_middle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_name_middle() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.name_middle)
  _has_bits_[0] &= ~0x00000020u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = name_middle_;
  name_middle_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_name_middle() {
  _has_bits_[0] |= 0x00000020u;
  if (name_middle_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    name_middle_ = p;
  }
  return name_middle_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_name_middle() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_name_middle();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.name_middle)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_name_middle(::sync_pb::ContactInfoSpecifics_StringToken* name_middle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete name_middle_;
  }
  if (name_middle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(name_middle);
    if (message_arena != submessage_arena) {
      name_middle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name_middle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  name_middle_ = name_middle;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.name_middle)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken name_last = 9;
inline bool ContactInfoSpecifics::_internal_has_name_last() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || name_last_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_name_last() const {
  return _internal_has_name_last();
}
inline void ContactInfoSpecifics::clear_name_last() {
  if (name_last_ != nullptr) name_last_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_name_last() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = name_last_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::name_last() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.name_last)
  return _internal_name_last();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_name_last(
    ::sync_pb::ContactInfoSpecifics_StringToken* name_last) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_last_);
  }
  name_last_ = name_last;
  if (name_last) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.name_last)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_name_last() {
  _has_bits_[0] &= ~0x00000040u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = name_last_;
  name_last_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_name_last() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.name_last)
  _has_bits_[0] &= ~0x00000040u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = name_last_;
  name_last_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_name_last() {
  _has_bits_[0] |= 0x00000040u;
  if (name_last_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    name_last_ = p;
  }
  return name_last_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_name_last() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_name_last();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.name_last)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_name_last(::sync_pb::ContactInfoSpecifics_StringToken* name_last) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete name_last_;
  }
  if (name_last) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(name_last);
    if (message_arena != submessage_arena) {
      name_last = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name_last, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  name_last_ = name_last;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.name_last)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken name_last_first = 10;
inline bool ContactInfoSpecifics::_internal_has_name_last_first() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || name_last_first_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_name_last_first() const {
  return _internal_has_name_last_first();
}
inline void ContactInfoSpecifics::clear_name_last_first() {
  if (name_last_first_ != nullptr) name_last_first_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_name_last_first() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = name_last_first_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::name_last_first() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.name_last_first)
  return _internal_name_last_first();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_name_last_first(
    ::sync_pb::ContactInfoSpecifics_StringToken* name_last_first) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_last_first_);
  }
  name_last_first_ = name_last_first;
  if (name_last_first) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.name_last_first)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_name_last_first() {
  _has_bits_[0] &= ~0x00000080u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = name_last_first_;
  name_last_first_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_name_last_first() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.name_last_first)
  _has_bits_[0] &= ~0x00000080u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = name_last_first_;
  name_last_first_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_name_last_first() {
  _has_bits_[0] |= 0x00000080u;
  if (name_last_first_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    name_last_first_ = p;
  }
  return name_last_first_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_name_last_first() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_name_last_first();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.name_last_first)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_name_last_first(::sync_pb::ContactInfoSpecifics_StringToken* name_last_first) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete name_last_first_;
  }
  if (name_last_first) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(name_last_first);
    if (message_arena != submessage_arena) {
      name_last_first = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name_last_first, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  name_last_first_ = name_last_first;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.name_last_first)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken name_last_conjunction = 11;
inline bool ContactInfoSpecifics::_internal_has_name_last_conjunction() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || name_last_conjunction_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_name_last_conjunction() const {
  return _internal_has_name_last_conjunction();
}
inline void ContactInfoSpecifics::clear_name_last_conjunction() {
  if (name_last_conjunction_ != nullptr) name_last_conjunction_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_name_last_conjunction() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = name_last_conjunction_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::name_last_conjunction() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.name_last_conjunction)
  return _internal_name_last_conjunction();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_name_last_conjunction(
    ::sync_pb::ContactInfoSpecifics_StringToken* name_last_conjunction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_last_conjunction_);
  }
  name_last_conjunction_ = name_last_conjunction;
  if (name_last_conjunction) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.name_last_conjunction)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_name_last_conjunction() {
  _has_bits_[0] &= ~0x00000100u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = name_last_conjunction_;
  name_last_conjunction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_name_last_conjunction() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.name_last_conjunction)
  _has_bits_[0] &= ~0x00000100u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = name_last_conjunction_;
  name_last_conjunction_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_name_last_conjunction() {
  _has_bits_[0] |= 0x00000100u;
  if (name_last_conjunction_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    name_last_conjunction_ = p;
  }
  return name_last_conjunction_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_name_last_conjunction() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_name_last_conjunction();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.name_last_conjunction)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_name_last_conjunction(::sync_pb::ContactInfoSpecifics_StringToken* name_last_conjunction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete name_last_conjunction_;
  }
  if (name_last_conjunction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(name_last_conjunction);
    if (message_arena != submessage_arena) {
      name_last_conjunction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name_last_conjunction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  name_last_conjunction_ = name_last_conjunction;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.name_last_conjunction)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken name_last_second = 12;
inline bool ContactInfoSpecifics::_internal_has_name_last_second() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || name_last_second_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_name_last_second() const {
  return _internal_has_name_last_second();
}
inline void ContactInfoSpecifics::clear_name_last_second() {
  if (name_last_second_ != nullptr) name_last_second_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_name_last_second() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = name_last_second_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::name_last_second() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.name_last_second)
  return _internal_name_last_second();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_name_last_second(
    ::sync_pb::ContactInfoSpecifics_StringToken* name_last_second) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_last_second_);
  }
  name_last_second_ = name_last_second;
  if (name_last_second) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.name_last_second)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_name_last_second() {
  _has_bits_[0] &= ~0x00000200u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = name_last_second_;
  name_last_second_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_name_last_second() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.name_last_second)
  _has_bits_[0] &= ~0x00000200u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = name_last_second_;
  name_last_second_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_name_last_second() {
  _has_bits_[0] |= 0x00000200u;
  if (name_last_second_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    name_last_second_ = p;
  }
  return name_last_second_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_name_last_second() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_name_last_second();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.name_last_second)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_name_last_second(::sync_pb::ContactInfoSpecifics_StringToken* name_last_second) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete name_last_second_;
  }
  if (name_last_second) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(name_last_second);
    if (message_arena != submessage_arena) {
      name_last_second = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name_last_second, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  name_last_second_ = name_last_second;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.name_last_second)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken name_full = 13;
inline bool ContactInfoSpecifics::_internal_has_name_full() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || name_full_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_name_full() const {
  return _internal_has_name_full();
}
inline void ContactInfoSpecifics::clear_name_full() {
  if (name_full_ != nullptr) name_full_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_name_full() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = name_full_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::name_full() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.name_full)
  return _internal_name_full();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_name_full(
    ::sync_pb::ContactInfoSpecifics_StringToken* name_full) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_full_);
  }
  name_full_ = name_full;
  if (name_full) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.name_full)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_name_full() {
  _has_bits_[0] &= ~0x00000400u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = name_full_;
  name_full_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_name_full() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.name_full)
  _has_bits_[0] &= ~0x00000400u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = name_full_;
  name_full_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_name_full() {
  _has_bits_[0] |= 0x00000400u;
  if (name_full_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    name_full_ = p;
  }
  return name_full_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_name_full() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_name_full();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.name_full)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_name_full(::sync_pb::ContactInfoSpecifics_StringToken* name_full) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete name_full_;
  }
  if (name_full) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(name_full);
    if (message_arena != submessage_arena) {
      name_full = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name_full, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  name_full_ = name_full;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.name_full)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken name_full_with_honorific = 14;
inline bool ContactInfoSpecifics::_internal_has_name_full_with_honorific() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || name_full_with_honorific_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_name_full_with_honorific() const {
  return _internal_has_name_full_with_honorific();
}
inline void ContactInfoSpecifics::clear_name_full_with_honorific() {
  if (name_full_with_honorific_ != nullptr) name_full_with_honorific_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_name_full_with_honorific() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = name_full_with_honorific_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::name_full_with_honorific() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.name_full_with_honorific)
  return _internal_name_full_with_honorific();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_name_full_with_honorific(
    ::sync_pb::ContactInfoSpecifics_StringToken* name_full_with_honorific) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_full_with_honorific_);
  }
  name_full_with_honorific_ = name_full_with_honorific;
  if (name_full_with_honorific) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.name_full_with_honorific)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_name_full_with_honorific() {
  _has_bits_[0] &= ~0x00000800u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = name_full_with_honorific_;
  name_full_with_honorific_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_name_full_with_honorific() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.name_full_with_honorific)
  _has_bits_[0] &= ~0x00000800u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = name_full_with_honorific_;
  name_full_with_honorific_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_name_full_with_honorific() {
  _has_bits_[0] |= 0x00000800u;
  if (name_full_with_honorific_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    name_full_with_honorific_ = p;
  }
  return name_full_with_honorific_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_name_full_with_honorific() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_name_full_with_honorific();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.name_full_with_honorific)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_name_full_with_honorific(::sync_pb::ContactInfoSpecifics_StringToken* name_full_with_honorific) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete name_full_with_honorific_;
  }
  if (name_full_with_honorific) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(name_full_with_honorific);
    if (message_arena != submessage_arena) {
      name_full_with_honorific = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name_full_with_honorific, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  name_full_with_honorific_ = name_full_with_honorific;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.name_full_with_honorific)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken email_address = 15;
inline bool ContactInfoSpecifics::_internal_has_email_address() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || email_address_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_email_address() const {
  return _internal_has_email_address();
}
inline void ContactInfoSpecifics::clear_email_address() {
  if (email_address_ != nullptr) email_address_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_email_address() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = email_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::email_address() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.email_address)
  return _internal_email_address();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_email_address(
    ::sync_pb::ContactInfoSpecifics_StringToken* email_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(email_address_);
  }
  email_address_ = email_address;
  if (email_address) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.email_address)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_email_address() {
  _has_bits_[0] &= ~0x00001000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = email_address_;
  email_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_email_address() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.email_address)
  _has_bits_[0] &= ~0x00001000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = email_address_;
  email_address_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_email_address() {
  _has_bits_[0] |= 0x00001000u;
  if (email_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    email_address_ = p;
  }
  return email_address_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_email_address() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_email_address();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.email_address)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_email_address(::sync_pb::ContactInfoSpecifics_StringToken* email_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete email_address_;
  }
  if (email_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(email_address);
    if (message_arena != submessage_arena) {
      email_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, email_address, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  email_address_ = email_address;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.email_address)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken company_name = 16;
inline bool ContactInfoSpecifics::_internal_has_company_name() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || company_name_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_company_name() const {
  return _internal_has_company_name();
}
inline void ContactInfoSpecifics::clear_company_name() {
  if (company_name_ != nullptr) company_name_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_company_name() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = company_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::company_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.company_name)
  return _internal_company_name();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_company_name(
    ::sync_pb::ContactInfoSpecifics_StringToken* company_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(company_name_);
  }
  company_name_ = company_name;
  if (company_name) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.company_name)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_company_name() {
  _has_bits_[0] &= ~0x00002000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = company_name_;
  company_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_company_name() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.company_name)
  _has_bits_[0] &= ~0x00002000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = company_name_;
  company_name_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_company_name() {
  _has_bits_[0] |= 0x00002000u;
  if (company_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    company_name_ = p;
  }
  return company_name_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_company_name() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_company_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.company_name)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_company_name(::sync_pb::ContactInfoSpecifics_StringToken* company_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete company_name_;
  }
  if (company_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(company_name);
    if (message_arena != submessage_arena) {
      company_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, company_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  company_name_ = company_name;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.company_name)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken address_city = 17;
inline bool ContactInfoSpecifics::_internal_has_address_city() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || address_city_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_address_city() const {
  return _internal_has_address_city();
}
inline void ContactInfoSpecifics::clear_address_city() {
  if (address_city_ != nullptr) address_city_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_address_city() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = address_city_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::address_city() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.address_city)
  return _internal_address_city();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_address_city(
    ::sync_pb::ContactInfoSpecifics_StringToken* address_city) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_city_);
  }
  address_city_ = address_city;
  if (address_city) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.address_city)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_address_city() {
  _has_bits_[0] &= ~0x00004000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_city_;
  address_city_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_address_city() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.address_city)
  _has_bits_[0] &= ~0x00004000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_city_;
  address_city_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_address_city() {
  _has_bits_[0] |= 0x00004000u;
  if (address_city_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    address_city_ = p;
  }
  return address_city_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_address_city() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_address_city();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.address_city)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_address_city(::sync_pb::ContactInfoSpecifics_StringToken* address_city) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete address_city_;
  }
  if (address_city) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address_city);
    if (message_arena != submessage_arena) {
      address_city = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address_city, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  address_city_ = address_city;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.address_city)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken address_state = 18;
inline bool ContactInfoSpecifics::_internal_has_address_state() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || address_state_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_address_state() const {
  return _internal_has_address_state();
}
inline void ContactInfoSpecifics::clear_address_state() {
  if (address_state_ != nullptr) address_state_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_address_state() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = address_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::address_state() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.address_state)
  return _internal_address_state();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_address_state(
    ::sync_pb::ContactInfoSpecifics_StringToken* address_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_state_);
  }
  address_state_ = address_state;
  if (address_state) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.address_state)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_address_state() {
  _has_bits_[0] &= ~0x00008000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_state_;
  address_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_address_state() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.address_state)
  _has_bits_[0] &= ~0x00008000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_state_;
  address_state_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_address_state() {
  _has_bits_[0] |= 0x00008000u;
  if (address_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    address_state_ = p;
  }
  return address_state_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_address_state() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_address_state();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.address_state)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_address_state(::sync_pb::ContactInfoSpecifics_StringToken* address_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete address_state_;
  }
  if (address_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address_state);
    if (message_arena != submessage_arena) {
      address_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  address_state_ = address_state;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.address_state)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken address_zip = 19;
inline bool ContactInfoSpecifics::_internal_has_address_zip() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || address_zip_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_address_zip() const {
  return _internal_has_address_zip();
}
inline void ContactInfoSpecifics::clear_address_zip() {
  if (address_zip_ != nullptr) address_zip_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_address_zip() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = address_zip_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::address_zip() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.address_zip)
  return _internal_address_zip();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_address_zip(
    ::sync_pb::ContactInfoSpecifics_StringToken* address_zip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_zip_);
  }
  address_zip_ = address_zip;
  if (address_zip) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.address_zip)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_address_zip() {
  _has_bits_[0] &= ~0x00010000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_zip_;
  address_zip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_address_zip() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.address_zip)
  _has_bits_[0] &= ~0x00010000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_zip_;
  address_zip_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_address_zip() {
  _has_bits_[0] |= 0x00010000u;
  if (address_zip_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    address_zip_ = p;
  }
  return address_zip_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_address_zip() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_address_zip();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.address_zip)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_address_zip(::sync_pb::ContactInfoSpecifics_StringToken* address_zip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete address_zip_;
  }
  if (address_zip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address_zip);
    if (message_arena != submessage_arena) {
      address_zip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address_zip, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  address_zip_ = address_zip;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.address_zip)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken address_country = 20;
inline bool ContactInfoSpecifics::_internal_has_address_country() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || address_country_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_address_country() const {
  return _internal_has_address_country();
}
inline void ContactInfoSpecifics::clear_address_country() {
  if (address_country_ != nullptr) address_country_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_address_country() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = address_country_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::address_country() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.address_country)
  return _internal_address_country();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_address_country(
    ::sync_pb::ContactInfoSpecifics_StringToken* address_country) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_country_);
  }
  address_country_ = address_country;
  if (address_country) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.address_country)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_address_country() {
  _has_bits_[0] &= ~0x00020000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_country_;
  address_country_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_address_country() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.address_country)
  _has_bits_[0] &= ~0x00020000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_country_;
  address_country_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_address_country() {
  _has_bits_[0] |= 0x00020000u;
  if (address_country_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    address_country_ = p;
  }
  return address_country_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_address_country() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_address_country();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.address_country)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_address_country(::sync_pb::ContactInfoSpecifics_StringToken* address_country) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete address_country_;
  }
  if (address_country) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address_country);
    if (message_arena != submessage_arena) {
      address_country = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address_country, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  address_country_ = address_country;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.address_country)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken address_street_address = 21;
inline bool ContactInfoSpecifics::_internal_has_address_street_address() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || address_street_address_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_address_street_address() const {
  return _internal_has_address_street_address();
}
inline void ContactInfoSpecifics::clear_address_street_address() {
  if (address_street_address_ != nullptr) address_street_address_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_address_street_address() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = address_street_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::address_street_address() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.address_street_address)
  return _internal_address_street_address();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_address_street_address(
    ::sync_pb::ContactInfoSpecifics_StringToken* address_street_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_street_address_);
  }
  address_street_address_ = address_street_address;
  if (address_street_address) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.address_street_address)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_address_street_address() {
  _has_bits_[0] &= ~0x00040000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_street_address_;
  address_street_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_address_street_address() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.address_street_address)
  _has_bits_[0] &= ~0x00040000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_street_address_;
  address_street_address_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_address_street_address() {
  _has_bits_[0] |= 0x00040000u;
  if (address_street_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    address_street_address_ = p;
  }
  return address_street_address_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_address_street_address() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_address_street_address();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.address_street_address)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_address_street_address(::sync_pb::ContactInfoSpecifics_StringToken* address_street_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete address_street_address_;
  }
  if (address_street_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address_street_address);
    if (message_arena != submessage_arena) {
      address_street_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address_street_address, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  address_street_address_ = address_street_address;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.address_street_address)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken address_sorting_code = 22;
inline bool ContactInfoSpecifics::_internal_has_address_sorting_code() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || address_sorting_code_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_address_sorting_code() const {
  return _internal_has_address_sorting_code();
}
inline void ContactInfoSpecifics::clear_address_sorting_code() {
  if (address_sorting_code_ != nullptr) address_sorting_code_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_address_sorting_code() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = address_sorting_code_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::address_sorting_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.address_sorting_code)
  return _internal_address_sorting_code();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_address_sorting_code(
    ::sync_pb::ContactInfoSpecifics_StringToken* address_sorting_code) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_sorting_code_);
  }
  address_sorting_code_ = address_sorting_code;
  if (address_sorting_code) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.address_sorting_code)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_address_sorting_code() {
  _has_bits_[0] &= ~0x00080000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_sorting_code_;
  address_sorting_code_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_address_sorting_code() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.address_sorting_code)
  _has_bits_[0] &= ~0x00080000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_sorting_code_;
  address_sorting_code_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_address_sorting_code() {
  _has_bits_[0] |= 0x00080000u;
  if (address_sorting_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    address_sorting_code_ = p;
  }
  return address_sorting_code_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_address_sorting_code() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_address_sorting_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.address_sorting_code)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_address_sorting_code(::sync_pb::ContactInfoSpecifics_StringToken* address_sorting_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete address_sorting_code_;
  }
  if (address_sorting_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address_sorting_code);
    if (message_arena != submessage_arena) {
      address_sorting_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address_sorting_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  address_sorting_code_ = address_sorting_code;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.address_sorting_code)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken address_dependent_locality = 23;
inline bool ContactInfoSpecifics::_internal_has_address_dependent_locality() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || address_dependent_locality_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_address_dependent_locality() const {
  return _internal_has_address_dependent_locality();
}
inline void ContactInfoSpecifics::clear_address_dependent_locality() {
  if (address_dependent_locality_ != nullptr) address_dependent_locality_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_address_dependent_locality() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = address_dependent_locality_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::address_dependent_locality() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.address_dependent_locality)
  return _internal_address_dependent_locality();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_address_dependent_locality(
    ::sync_pb::ContactInfoSpecifics_StringToken* address_dependent_locality) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_dependent_locality_);
  }
  address_dependent_locality_ = address_dependent_locality;
  if (address_dependent_locality) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.address_dependent_locality)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_address_dependent_locality() {
  _has_bits_[0] &= ~0x00100000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_dependent_locality_;
  address_dependent_locality_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_address_dependent_locality() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.address_dependent_locality)
  _has_bits_[0] &= ~0x00100000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_dependent_locality_;
  address_dependent_locality_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_address_dependent_locality() {
  _has_bits_[0] |= 0x00100000u;
  if (address_dependent_locality_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    address_dependent_locality_ = p;
  }
  return address_dependent_locality_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_address_dependent_locality() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_address_dependent_locality();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.address_dependent_locality)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_address_dependent_locality(::sync_pb::ContactInfoSpecifics_StringToken* address_dependent_locality) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete address_dependent_locality_;
  }
  if (address_dependent_locality) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address_dependent_locality);
    if (message_arena != submessage_arena) {
      address_dependent_locality = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address_dependent_locality, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  address_dependent_locality_ = address_dependent_locality;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.address_dependent_locality)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken address_language_code = 24;
inline bool ContactInfoSpecifics::_internal_has_address_language_code() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || address_language_code_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_address_language_code() const {
  return _internal_has_address_language_code();
}
inline void ContactInfoSpecifics::clear_address_language_code() {
  if (address_language_code_ != nullptr) address_language_code_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_address_language_code() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = address_language_code_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::address_language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.address_language_code)
  return _internal_address_language_code();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_address_language_code(
    ::sync_pb::ContactInfoSpecifics_StringToken* address_language_code) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_language_code_);
  }
  address_language_code_ = address_language_code;
  if (address_language_code) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.address_language_code)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_address_language_code() {
  _has_bits_[0] &= ~0x00200000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_language_code_;
  address_language_code_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_address_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.address_language_code)
  _has_bits_[0] &= ~0x00200000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_language_code_;
  address_language_code_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_address_language_code() {
  _has_bits_[0] |= 0x00200000u;
  if (address_language_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    address_language_code_ = p;
  }
  return address_language_code_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_address_language_code() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_address_language_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.address_language_code)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_address_language_code(::sync_pb::ContactInfoSpecifics_StringToken* address_language_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete address_language_code_;
  }
  if (address_language_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address_language_code);
    if (message_arena != submessage_arena) {
      address_language_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address_language_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  address_language_code_ = address_language_code;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.address_language_code)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken address_thoroughfare_name = 25;
inline bool ContactInfoSpecifics::_internal_has_address_thoroughfare_name() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || address_thoroughfare_name_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_address_thoroughfare_name() const {
  return _internal_has_address_thoroughfare_name();
}
inline void ContactInfoSpecifics::clear_address_thoroughfare_name() {
  if (address_thoroughfare_name_ != nullptr) address_thoroughfare_name_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_address_thoroughfare_name() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = address_thoroughfare_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::address_thoroughfare_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.address_thoroughfare_name)
  return _internal_address_thoroughfare_name();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_address_thoroughfare_name(
    ::sync_pb::ContactInfoSpecifics_StringToken* address_thoroughfare_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_thoroughfare_name_);
  }
  address_thoroughfare_name_ = address_thoroughfare_name;
  if (address_thoroughfare_name) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.address_thoroughfare_name)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_address_thoroughfare_name() {
  _has_bits_[0] &= ~0x00400000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_thoroughfare_name_;
  address_thoroughfare_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_address_thoroughfare_name() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.address_thoroughfare_name)
  _has_bits_[0] &= ~0x00400000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_thoroughfare_name_;
  address_thoroughfare_name_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_address_thoroughfare_name() {
  _has_bits_[0] |= 0x00400000u;
  if (address_thoroughfare_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    address_thoroughfare_name_ = p;
  }
  return address_thoroughfare_name_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_address_thoroughfare_name() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_address_thoroughfare_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.address_thoroughfare_name)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_address_thoroughfare_name(::sync_pb::ContactInfoSpecifics_StringToken* address_thoroughfare_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete address_thoroughfare_name_;
  }
  if (address_thoroughfare_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address_thoroughfare_name);
    if (message_arena != submessage_arena) {
      address_thoroughfare_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address_thoroughfare_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  address_thoroughfare_name_ = address_thoroughfare_name;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.address_thoroughfare_name)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken address_thoroughfare_number = 26;
inline bool ContactInfoSpecifics::_internal_has_address_thoroughfare_number() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || address_thoroughfare_number_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_address_thoroughfare_number() const {
  return _internal_has_address_thoroughfare_number();
}
inline void ContactInfoSpecifics::clear_address_thoroughfare_number() {
  if (address_thoroughfare_number_ != nullptr) address_thoroughfare_number_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_address_thoroughfare_number() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = address_thoroughfare_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::address_thoroughfare_number() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.address_thoroughfare_number)
  return _internal_address_thoroughfare_number();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_address_thoroughfare_number(
    ::sync_pb::ContactInfoSpecifics_StringToken* address_thoroughfare_number) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_thoroughfare_number_);
  }
  address_thoroughfare_number_ = address_thoroughfare_number;
  if (address_thoroughfare_number) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.address_thoroughfare_number)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_address_thoroughfare_number() {
  _has_bits_[0] &= ~0x00800000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_thoroughfare_number_;
  address_thoroughfare_number_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_address_thoroughfare_number() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.address_thoroughfare_number)
  _has_bits_[0] &= ~0x00800000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_thoroughfare_number_;
  address_thoroughfare_number_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_address_thoroughfare_number() {
  _has_bits_[0] |= 0x00800000u;
  if (address_thoroughfare_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    address_thoroughfare_number_ = p;
  }
  return address_thoroughfare_number_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_address_thoroughfare_number() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_address_thoroughfare_number();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.address_thoroughfare_number)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_address_thoroughfare_number(::sync_pb::ContactInfoSpecifics_StringToken* address_thoroughfare_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete address_thoroughfare_number_;
  }
  if (address_thoroughfare_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address_thoroughfare_number);
    if (message_arena != submessage_arena) {
      address_thoroughfare_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address_thoroughfare_number, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  address_thoroughfare_number_ = address_thoroughfare_number;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.address_thoroughfare_number)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken address_dependent_thoroughfare_name = 27;
inline bool ContactInfoSpecifics::_internal_has_address_dependent_thoroughfare_name() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || address_dependent_thoroughfare_name_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_address_dependent_thoroughfare_name() const {
  return _internal_has_address_dependent_thoroughfare_name();
}
inline void ContactInfoSpecifics::clear_address_dependent_thoroughfare_name() {
  if (address_dependent_thoroughfare_name_ != nullptr) address_dependent_thoroughfare_name_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_address_dependent_thoroughfare_name() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = address_dependent_thoroughfare_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::address_dependent_thoroughfare_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.address_dependent_thoroughfare_name)
  return _internal_address_dependent_thoroughfare_name();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_address_dependent_thoroughfare_name(
    ::sync_pb::ContactInfoSpecifics_StringToken* address_dependent_thoroughfare_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_dependent_thoroughfare_name_);
  }
  address_dependent_thoroughfare_name_ = address_dependent_thoroughfare_name;
  if (address_dependent_thoroughfare_name) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.address_dependent_thoroughfare_name)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_address_dependent_thoroughfare_name() {
  _has_bits_[0] &= ~0x01000000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_dependent_thoroughfare_name_;
  address_dependent_thoroughfare_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_address_dependent_thoroughfare_name() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.address_dependent_thoroughfare_name)
  _has_bits_[0] &= ~0x01000000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_dependent_thoroughfare_name_;
  address_dependent_thoroughfare_name_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_address_dependent_thoroughfare_name() {
  _has_bits_[0] |= 0x01000000u;
  if (address_dependent_thoroughfare_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    address_dependent_thoroughfare_name_ = p;
  }
  return address_dependent_thoroughfare_name_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_address_dependent_thoroughfare_name() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_address_dependent_thoroughfare_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.address_dependent_thoroughfare_name)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_address_dependent_thoroughfare_name(::sync_pb::ContactInfoSpecifics_StringToken* address_dependent_thoroughfare_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete address_dependent_thoroughfare_name_;
  }
  if (address_dependent_thoroughfare_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address_dependent_thoroughfare_name);
    if (message_arena != submessage_arena) {
      address_dependent_thoroughfare_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address_dependent_thoroughfare_name, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  address_dependent_thoroughfare_name_ = address_dependent_thoroughfare_name;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.address_dependent_thoroughfare_name)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken address_thoroughfare_and_dependent_thoroughfare_name = 28;
inline bool ContactInfoSpecifics::_internal_has_address_thoroughfare_and_dependent_thoroughfare_name() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || address_thoroughfare_and_dependent_thoroughfare_name_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_address_thoroughfare_and_dependent_thoroughfare_name() const {
  return _internal_has_address_thoroughfare_and_dependent_thoroughfare_name();
}
inline void ContactInfoSpecifics::clear_address_thoroughfare_and_dependent_thoroughfare_name() {
  if (address_thoroughfare_and_dependent_thoroughfare_name_ != nullptr) address_thoroughfare_and_dependent_thoroughfare_name_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_address_thoroughfare_and_dependent_thoroughfare_name() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = address_thoroughfare_and_dependent_thoroughfare_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::address_thoroughfare_and_dependent_thoroughfare_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.address_thoroughfare_and_dependent_thoroughfare_name)
  return _internal_address_thoroughfare_and_dependent_thoroughfare_name();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_address_thoroughfare_and_dependent_thoroughfare_name(
    ::sync_pb::ContactInfoSpecifics_StringToken* address_thoroughfare_and_dependent_thoroughfare_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_thoroughfare_and_dependent_thoroughfare_name_);
  }
  address_thoroughfare_and_dependent_thoroughfare_name_ = address_thoroughfare_and_dependent_thoroughfare_name;
  if (address_thoroughfare_and_dependent_thoroughfare_name) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.address_thoroughfare_and_dependent_thoroughfare_name)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_address_thoroughfare_and_dependent_thoroughfare_name() {
  _has_bits_[0] &= ~0x02000000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_thoroughfare_and_dependent_thoroughfare_name_;
  address_thoroughfare_and_dependent_thoroughfare_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_address_thoroughfare_and_dependent_thoroughfare_name() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.address_thoroughfare_and_dependent_thoroughfare_name)
  _has_bits_[0] &= ~0x02000000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_thoroughfare_and_dependent_thoroughfare_name_;
  address_thoroughfare_and_dependent_thoroughfare_name_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_address_thoroughfare_and_dependent_thoroughfare_name() {
  _has_bits_[0] |= 0x02000000u;
  if (address_thoroughfare_and_dependent_thoroughfare_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    address_thoroughfare_and_dependent_thoroughfare_name_ = p;
  }
  return address_thoroughfare_and_dependent_thoroughfare_name_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_address_thoroughfare_and_dependent_thoroughfare_name() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_address_thoroughfare_and_dependent_thoroughfare_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.address_thoroughfare_and_dependent_thoroughfare_name)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_address_thoroughfare_and_dependent_thoroughfare_name(::sync_pb::ContactInfoSpecifics_StringToken* address_thoroughfare_and_dependent_thoroughfare_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete address_thoroughfare_and_dependent_thoroughfare_name_;
  }
  if (address_thoroughfare_and_dependent_thoroughfare_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address_thoroughfare_and_dependent_thoroughfare_name);
    if (message_arena != submessage_arena) {
      address_thoroughfare_and_dependent_thoroughfare_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address_thoroughfare_and_dependent_thoroughfare_name, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  address_thoroughfare_and_dependent_thoroughfare_name_ = address_thoroughfare_and_dependent_thoroughfare_name;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.address_thoroughfare_and_dependent_thoroughfare_name)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken address_premise_name = 29;
inline bool ContactInfoSpecifics::_internal_has_address_premise_name() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || address_premise_name_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_address_premise_name() const {
  return _internal_has_address_premise_name();
}
inline void ContactInfoSpecifics::clear_address_premise_name() {
  if (address_premise_name_ != nullptr) address_premise_name_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_address_premise_name() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = address_premise_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::address_premise_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.address_premise_name)
  return _internal_address_premise_name();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_address_premise_name(
    ::sync_pb::ContactInfoSpecifics_StringToken* address_premise_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_premise_name_);
  }
  address_premise_name_ = address_premise_name;
  if (address_premise_name) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.address_premise_name)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_address_premise_name() {
  _has_bits_[0] &= ~0x04000000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_premise_name_;
  address_premise_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_address_premise_name() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.address_premise_name)
  _has_bits_[0] &= ~0x04000000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_premise_name_;
  address_premise_name_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_address_premise_name() {
  _has_bits_[0] |= 0x04000000u;
  if (address_premise_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    address_premise_name_ = p;
  }
  return address_premise_name_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_address_premise_name() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_address_premise_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.address_premise_name)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_address_premise_name(::sync_pb::ContactInfoSpecifics_StringToken* address_premise_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete address_premise_name_;
  }
  if (address_premise_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address_premise_name);
    if (message_arena != submessage_arena) {
      address_premise_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address_premise_name, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  address_premise_name_ = address_premise_name;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.address_premise_name)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken address_subpremise_name = 30;
inline bool ContactInfoSpecifics::_internal_has_address_subpremise_name() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || address_subpremise_name_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_address_subpremise_name() const {
  return _internal_has_address_subpremise_name();
}
inline void ContactInfoSpecifics::clear_address_subpremise_name() {
  if (address_subpremise_name_ != nullptr) address_subpremise_name_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_address_subpremise_name() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = address_subpremise_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::address_subpremise_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.address_subpremise_name)
  return _internal_address_subpremise_name();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_address_subpremise_name(
    ::sync_pb::ContactInfoSpecifics_StringToken* address_subpremise_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_subpremise_name_);
  }
  address_subpremise_name_ = address_subpremise_name;
  if (address_subpremise_name) {
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.address_subpremise_name)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_address_subpremise_name() {
  _has_bits_[0] &= ~0x08000000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_subpremise_name_;
  address_subpremise_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_address_subpremise_name() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.address_subpremise_name)
  _has_bits_[0] &= ~0x08000000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_subpremise_name_;
  address_subpremise_name_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_address_subpremise_name() {
  _has_bits_[0] |= 0x08000000u;
  if (address_subpremise_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    address_subpremise_name_ = p;
  }
  return address_subpremise_name_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_address_subpremise_name() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_address_subpremise_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.address_subpremise_name)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_address_subpremise_name(::sync_pb::ContactInfoSpecifics_StringToken* address_subpremise_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete address_subpremise_name_;
  }
  if (address_subpremise_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address_subpremise_name);
    if (message_arena != submessage_arena) {
      address_subpremise_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address_subpremise_name, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  address_subpremise_name_ = address_subpremise_name;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.address_subpremise_name)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken address_apt_num = 31;
inline bool ContactInfoSpecifics::_internal_has_address_apt_num() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || address_apt_num_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_address_apt_num() const {
  return _internal_has_address_apt_num();
}
inline void ContactInfoSpecifics::clear_address_apt_num() {
  if (address_apt_num_ != nullptr) address_apt_num_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_address_apt_num() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = address_apt_num_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::address_apt_num() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.address_apt_num)
  return _internal_address_apt_num();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_address_apt_num(
    ::sync_pb::ContactInfoSpecifics_StringToken* address_apt_num) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_apt_num_);
  }
  address_apt_num_ = address_apt_num;
  if (address_apt_num) {
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.address_apt_num)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_address_apt_num() {
  _has_bits_[0] &= ~0x10000000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_apt_num_;
  address_apt_num_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_address_apt_num() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.address_apt_num)
  _has_bits_[0] &= ~0x10000000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_apt_num_;
  address_apt_num_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_address_apt_num() {
  _has_bits_[0] |= 0x10000000u;
  if (address_apt_num_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    address_apt_num_ = p;
  }
  return address_apt_num_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_address_apt_num() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_address_apt_num();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.address_apt_num)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_address_apt_num(::sync_pb::ContactInfoSpecifics_StringToken* address_apt_num) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete address_apt_num_;
  }
  if (address_apt_num) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address_apt_num);
    if (message_arena != submessage_arena) {
      address_apt_num = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address_apt_num, submessage_arena);
    }
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  address_apt_num_ = address_apt_num;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.address_apt_num)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken address_floor = 32;
inline bool ContactInfoSpecifics::_internal_has_address_floor() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || address_floor_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_address_floor() const {
  return _internal_has_address_floor();
}
inline void ContactInfoSpecifics::clear_address_floor() {
  if (address_floor_ != nullptr) address_floor_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_address_floor() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = address_floor_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::address_floor() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.address_floor)
  return _internal_address_floor();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_address_floor(
    ::sync_pb::ContactInfoSpecifics_StringToken* address_floor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_floor_);
  }
  address_floor_ = address_floor;
  if (address_floor) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.address_floor)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_address_floor() {
  _has_bits_[0] &= ~0x20000000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_floor_;
  address_floor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_address_floor() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.address_floor)
  _has_bits_[0] &= ~0x20000000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = address_floor_;
  address_floor_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_address_floor() {
  _has_bits_[0] |= 0x20000000u;
  if (address_floor_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    address_floor_ = p;
  }
  return address_floor_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_address_floor() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_address_floor();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.address_floor)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_address_floor(::sync_pb::ContactInfoSpecifics_StringToken* address_floor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete address_floor_;
  }
  if (address_floor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address_floor);
    if (message_arena != submessage_arena) {
      address_floor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address_floor, submessage_arena);
    }
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  address_floor_ = address_floor;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.address_floor)
}

// optional .sync_pb.ContactInfoSpecifics.StringToken phone_home_whole_number = 33;
inline bool ContactInfoSpecifics::_internal_has_phone_home_whole_number() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || phone_home_whole_number_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_phone_home_whole_number() const {
  return _internal_has_phone_home_whole_number();
}
inline void ContactInfoSpecifics::clear_phone_home_whole_number() {
  if (phone_home_whole_number_ != nullptr) phone_home_whole_number_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::_internal_phone_home_whole_number() const {
  const ::sync_pb::ContactInfoSpecifics_StringToken* p = phone_home_whole_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_StringToken&>(
      ::sync_pb::_ContactInfoSpecifics_StringToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_StringToken& ContactInfoSpecifics::phone_home_whole_number() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.phone_home_whole_number)
  return _internal_phone_home_whole_number();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_phone_home_whole_number(
    ::sync_pb::ContactInfoSpecifics_StringToken* phone_home_whole_number) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phone_home_whole_number_);
  }
  phone_home_whole_number_ = phone_home_whole_number;
  if (phone_home_whole_number) {
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.phone_home_whole_number)
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::release_phone_home_whole_number() {
  _has_bits_[0] &= ~0x40000000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = phone_home_whole_number_;
  phone_home_whole_number_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::unsafe_arena_release_phone_home_whole_number() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.phone_home_whole_number)
  _has_bits_[0] &= ~0x40000000u;
  ::sync_pb::ContactInfoSpecifics_StringToken* temp = phone_home_whole_number_;
  phone_home_whole_number_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::_internal_mutable_phone_home_whole_number() {
  _has_bits_[0] |= 0x40000000u;
  if (phone_home_whole_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_StringToken>(GetArenaForAllocation());
    phone_home_whole_number_ = p;
  }
  return phone_home_whole_number_;
}
inline ::sync_pb::ContactInfoSpecifics_StringToken* ContactInfoSpecifics::mutable_phone_home_whole_number() {
  ::sync_pb::ContactInfoSpecifics_StringToken* _msg = _internal_mutable_phone_home_whole_number();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.phone_home_whole_number)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_phone_home_whole_number(::sync_pb::ContactInfoSpecifics_StringToken* phone_home_whole_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete phone_home_whole_number_;
  }
  if (phone_home_whole_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(phone_home_whole_number);
    if (message_arena != submessage_arena) {
      phone_home_whole_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phone_home_whole_number, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  phone_home_whole_number_ = phone_home_whole_number;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.phone_home_whole_number)
}

// optional .sync_pb.ContactInfoSpecifics.IntegerToken birthdate_day = 34;
inline bool ContactInfoSpecifics::_internal_has_birthdate_day() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || birthdate_day_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_birthdate_day() const {
  return _internal_has_birthdate_day();
}
inline void ContactInfoSpecifics::clear_birthdate_day() {
  if (birthdate_day_ != nullptr) birthdate_day_->Clear();
  _has_bits_[0] &= ~0x80000000u;
}
inline const ::sync_pb::ContactInfoSpecifics_IntegerToken& ContactInfoSpecifics::_internal_birthdate_day() const {
  const ::sync_pb::ContactInfoSpecifics_IntegerToken* p = birthdate_day_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_IntegerToken&>(
      ::sync_pb::_ContactInfoSpecifics_IntegerToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_IntegerToken& ContactInfoSpecifics::birthdate_day() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.birthdate_day)
  return _internal_birthdate_day();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_birthdate_day(
    ::sync_pb::ContactInfoSpecifics_IntegerToken* birthdate_day) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(birthdate_day_);
  }
  birthdate_day_ = birthdate_day;
  if (birthdate_day) {
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.birthdate_day)
}
inline ::sync_pb::ContactInfoSpecifics_IntegerToken* ContactInfoSpecifics::release_birthdate_day() {
  _has_bits_[0] &= ~0x80000000u;
  ::sync_pb::ContactInfoSpecifics_IntegerToken* temp = birthdate_day_;
  birthdate_day_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_IntegerToken* ContactInfoSpecifics::unsafe_arena_release_birthdate_day() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.birthdate_day)
  _has_bits_[0] &= ~0x80000000u;
  ::sync_pb::ContactInfoSpecifics_IntegerToken* temp = birthdate_day_;
  birthdate_day_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_IntegerToken* ContactInfoSpecifics::_internal_mutable_birthdate_day() {
  _has_bits_[0] |= 0x80000000u;
  if (birthdate_day_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_IntegerToken>(GetArenaForAllocation());
    birthdate_day_ = p;
  }
  return birthdate_day_;
}
inline ::sync_pb::ContactInfoSpecifics_IntegerToken* ContactInfoSpecifics::mutable_birthdate_day() {
  ::sync_pb::ContactInfoSpecifics_IntegerToken* _msg = _internal_mutable_birthdate_day();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.birthdate_day)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_birthdate_day(::sync_pb::ContactInfoSpecifics_IntegerToken* birthdate_day) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete birthdate_day_;
  }
  if (birthdate_day) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(birthdate_day);
    if (message_arena != submessage_arena) {
      birthdate_day = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, birthdate_day, submessage_arena);
    }
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  birthdate_day_ = birthdate_day;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.birthdate_day)
}

// optional .sync_pb.ContactInfoSpecifics.IntegerToken birthdate_month = 35;
inline bool ContactInfoSpecifics::_internal_has_birthdate_month() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || birthdate_month_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_birthdate_month() const {
  return _internal_has_birthdate_month();
}
inline void ContactInfoSpecifics::clear_birthdate_month() {
  if (birthdate_month_ != nullptr) birthdate_month_->Clear();
  _has_bits_[1] &= ~0x00000001u;
}
inline const ::sync_pb::ContactInfoSpecifics_IntegerToken& ContactInfoSpecifics::_internal_birthdate_month() const {
  const ::sync_pb::ContactInfoSpecifics_IntegerToken* p = birthdate_month_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_IntegerToken&>(
      ::sync_pb::_ContactInfoSpecifics_IntegerToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_IntegerToken& ContactInfoSpecifics::birthdate_month() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.birthdate_month)
  return _internal_birthdate_month();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_birthdate_month(
    ::sync_pb::ContactInfoSpecifics_IntegerToken* birthdate_month) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(birthdate_month_);
  }
  birthdate_month_ = birthdate_month;
  if (birthdate_month) {
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.birthdate_month)
}
inline ::sync_pb::ContactInfoSpecifics_IntegerToken* ContactInfoSpecifics::release_birthdate_month() {
  _has_bits_[1] &= ~0x00000001u;
  ::sync_pb::ContactInfoSpecifics_IntegerToken* temp = birthdate_month_;
  birthdate_month_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_IntegerToken* ContactInfoSpecifics::unsafe_arena_release_birthdate_month() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.birthdate_month)
  _has_bits_[1] &= ~0x00000001u;
  ::sync_pb::ContactInfoSpecifics_IntegerToken* temp = birthdate_month_;
  birthdate_month_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_IntegerToken* ContactInfoSpecifics::_internal_mutable_birthdate_month() {
  _has_bits_[1] |= 0x00000001u;
  if (birthdate_month_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_IntegerToken>(GetArenaForAllocation());
    birthdate_month_ = p;
  }
  return birthdate_month_;
}
inline ::sync_pb::ContactInfoSpecifics_IntegerToken* ContactInfoSpecifics::mutable_birthdate_month() {
  ::sync_pb::ContactInfoSpecifics_IntegerToken* _msg = _internal_mutable_birthdate_month();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.birthdate_month)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_birthdate_month(::sync_pb::ContactInfoSpecifics_IntegerToken* birthdate_month) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete birthdate_month_;
  }
  if (birthdate_month) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(birthdate_month);
    if (message_arena != submessage_arena) {
      birthdate_month = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, birthdate_month, submessage_arena);
    }
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  birthdate_month_ = birthdate_month;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.birthdate_month)
}

// optional .sync_pb.ContactInfoSpecifics.IntegerToken birthdate_year = 36;
inline bool ContactInfoSpecifics::_internal_has_birthdate_year() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || birthdate_year_ != nullptr);
  return value;
}
inline bool ContactInfoSpecifics::has_birthdate_year() const {
  return _internal_has_birthdate_year();
}
inline void ContactInfoSpecifics::clear_birthdate_year() {
  if (birthdate_year_ != nullptr) birthdate_year_->Clear();
  _has_bits_[1] &= ~0x00000002u;
}
inline const ::sync_pb::ContactInfoSpecifics_IntegerToken& ContactInfoSpecifics::_internal_birthdate_year() const {
  const ::sync_pb::ContactInfoSpecifics_IntegerToken* p = birthdate_year_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ContactInfoSpecifics_IntegerToken&>(
      ::sync_pb::_ContactInfoSpecifics_IntegerToken_default_instance_);
}
inline const ::sync_pb::ContactInfoSpecifics_IntegerToken& ContactInfoSpecifics::birthdate_year() const {
  // @@protoc_insertion_point(field_get:sync_pb.ContactInfoSpecifics.birthdate_year)
  return _internal_birthdate_year();
}
inline void ContactInfoSpecifics::unsafe_arena_set_allocated_birthdate_year(
    ::sync_pb::ContactInfoSpecifics_IntegerToken* birthdate_year) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(birthdate_year_);
  }
  birthdate_year_ = birthdate_year;
  if (birthdate_year) {
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.ContactInfoSpecifics.birthdate_year)
}
inline ::sync_pb::ContactInfoSpecifics_IntegerToken* ContactInfoSpecifics::release_birthdate_year() {
  _has_bits_[1] &= ~0x00000002u;
  ::sync_pb::ContactInfoSpecifics_IntegerToken* temp = birthdate_year_;
  birthdate_year_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_IntegerToken* ContactInfoSpecifics::unsafe_arena_release_birthdate_year() {
  // @@protoc_insertion_point(field_release:sync_pb.ContactInfoSpecifics.birthdate_year)
  _has_bits_[1] &= ~0x00000002u;
  ::sync_pb::ContactInfoSpecifics_IntegerToken* temp = birthdate_year_;
  birthdate_year_ = nullptr;
  return temp;
}
inline ::sync_pb::ContactInfoSpecifics_IntegerToken* ContactInfoSpecifics::_internal_mutable_birthdate_year() {
  _has_bits_[1] |= 0x00000002u;
  if (birthdate_year_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ContactInfoSpecifics_IntegerToken>(GetArenaForAllocation());
    birthdate_year_ = p;
  }
  return birthdate_year_;
}
inline ::sync_pb::ContactInfoSpecifics_IntegerToken* ContactInfoSpecifics::mutable_birthdate_year() {
  ::sync_pb::ContactInfoSpecifics_IntegerToken* _msg = _internal_mutable_birthdate_year();
  // @@protoc_insertion_point(field_mutable:sync_pb.ContactInfoSpecifics.birthdate_year)
  return _msg;
}
inline void ContactInfoSpecifics::set_allocated_birthdate_year(::sync_pb::ContactInfoSpecifics_IntegerToken* birthdate_year) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete birthdate_year_;
  }
  if (birthdate_year) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(birthdate_year);
    if (message_arena != submessage_arena) {
      birthdate_year = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, birthdate_year, submessage_arena);
    }
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  birthdate_year_ = birthdate_year;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ContactInfoSpecifics.birthdate_year)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::ContactInfoSpecifics_VerificationStatus> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fcontact_5finfo_5fspecifics_2eproto
