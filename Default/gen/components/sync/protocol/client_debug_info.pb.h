// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/client_debug_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fclient_5fdebug_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fclient_5fdebug_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "components/sync/protocol/get_updates_caller_info.pb.h"
#include "components/sync/protocol/sync_enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fclient_5fdebug_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fclient_5fdebug_5finfo_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class DebugEventInfo;
struct DebugEventInfoDefaultTypeInternal;
extern DebugEventInfoDefaultTypeInternal _DebugEventInfo_default_instance_;
class DebugInfo;
struct DebugInfoDefaultTypeInternal;
extern DebugInfoDefaultTypeInternal _DebugInfo_default_instance_;
class SyncCycleCompletedEventInfo;
struct SyncCycleCompletedEventInfoDefaultTypeInternal;
extern SyncCycleCompletedEventInfoDefaultTypeInternal _SyncCycleCompletedEventInfo_default_instance_;
class TypeHint;
struct TypeHintDefaultTypeInternal;
extern TypeHintDefaultTypeInternal _TypeHint_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::DebugEventInfo* Arena::CreateMaybeMessage<::sync_pb::DebugEventInfo>(Arena*);
template<> ::sync_pb::DebugInfo* Arena::CreateMaybeMessage<::sync_pb::DebugInfo>(Arena*);
template<> ::sync_pb::SyncCycleCompletedEventInfo* Arena::CreateMaybeMessage<::sync_pb::SyncCycleCompletedEventInfo>(Arena*);
template<> ::sync_pb::TypeHint* Arena::CreateMaybeMessage<::sync_pb::TypeHint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class TypeHint final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.TypeHint) */ {
 public:
  inline TypeHint() : TypeHint(nullptr) {}
  ~TypeHint() override;
  explicit PROTOBUF_CONSTEXPR TypeHint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TypeHint(const TypeHint& from);
  TypeHint(TypeHint&& from) noexcept
    : TypeHint() {
    *this = ::std::move(from);
  }

  inline TypeHint& operator=(const TypeHint& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeHint& operator=(TypeHint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TypeHint& default_instance() {
    return *internal_default_instance();
  }
  static inline const TypeHint* internal_default_instance() {
    return reinterpret_cast<const TypeHint*>(
               &_TypeHint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TypeHint& a, TypeHint& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TypeHint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TypeHint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TypeHint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TypeHint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TypeHint& from);
  void MergeFrom(const TypeHint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TypeHint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.TypeHint";
  }
  protected:
  explicit TypeHint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataTypeIdFieldNumber = 1,
    kHasValidHintFieldNumber = 2,
  };
  // optional int32 data_type_id = 1;
  bool has_data_type_id() const;
  private:
  bool _internal_has_data_type_id() const;
  public:
  void clear_data_type_id();
  int32_t data_type_id() const;
  void set_data_type_id(int32_t value);
  private:
  int32_t _internal_data_type_id() const;
  void _internal_set_data_type_id(int32_t value);
  public:

  // optional bool has_valid_hint = 2;
  bool has_has_valid_hint() const;
  private:
  bool _internal_has_has_valid_hint() const;
  public:
  void clear_has_valid_hint();
  bool has_valid_hint() const;
  void set_has_valid_hint(bool value);
  private:
  bool _internal_has_valid_hint() const;
  void _internal_set_has_valid_hint(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.TypeHint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t data_type_id_;
  bool has_valid_hint_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fclient_5fdebug_5finfo_2eproto;
};
// -------------------------------------------------------------------

class SyncCycleCompletedEventInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SyncCycleCompletedEventInfo) */ {
 public:
  inline SyncCycleCompletedEventInfo() : SyncCycleCompletedEventInfo(nullptr) {}
  ~SyncCycleCompletedEventInfo() override;
  explicit PROTOBUF_CONSTEXPR SyncCycleCompletedEventInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncCycleCompletedEventInfo(const SyncCycleCompletedEventInfo& from);
  SyncCycleCompletedEventInfo(SyncCycleCompletedEventInfo&& from) noexcept
    : SyncCycleCompletedEventInfo() {
    *this = ::std::move(from);
  }

  inline SyncCycleCompletedEventInfo& operator=(const SyncCycleCompletedEventInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncCycleCompletedEventInfo& operator=(SyncCycleCompletedEventInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SyncCycleCompletedEventInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncCycleCompletedEventInfo* internal_default_instance() {
    return reinterpret_cast<const SyncCycleCompletedEventInfo*>(
               &_SyncCycleCompletedEventInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SyncCycleCompletedEventInfo& a, SyncCycleCompletedEventInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SyncCycleCompletedEventInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncCycleCompletedEventInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncCycleCompletedEventInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncCycleCompletedEventInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SyncCycleCompletedEventInfo& from);
  void MergeFrom(const SyncCycleCompletedEventInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SyncCycleCompletedEventInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SyncCycleCompletedEventInfo";
  }
  protected:
  explicit SyncCycleCompletedEventInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallerInfoFieldNumber = 10,
    kNumEncryptionConflictsFieldNumber = 4,
    kNumHierarchyConflictsFieldNumber = 5,
    kNumSimpleConflictsFieldNumber = 6,
    kNumServerConflictsFieldNumber = 7,
    kNumUpdatesDownloadedFieldNumber = 8,
    kNumReflectedUpdatesDownloadedFieldNumber = 9,
    kGetUpdatesOriginFieldNumber = 12,
  };
  // optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;
  bool has_caller_info() const;
  private:
  bool _internal_has_caller_info() const;
  public:
  void clear_caller_info();
  const ::sync_pb::GetUpdatesCallerInfo& caller_info() const;
  PROTOBUF_NODISCARD ::sync_pb::GetUpdatesCallerInfo* release_caller_info();
  ::sync_pb::GetUpdatesCallerInfo* mutable_caller_info();
  void set_allocated_caller_info(::sync_pb::GetUpdatesCallerInfo* caller_info);
  private:
  const ::sync_pb::GetUpdatesCallerInfo& _internal_caller_info() const;
  ::sync_pb::GetUpdatesCallerInfo* _internal_mutable_caller_info();
  public:
  void unsafe_arena_set_allocated_caller_info(
      ::sync_pb::GetUpdatesCallerInfo* caller_info);
  ::sync_pb::GetUpdatesCallerInfo* unsafe_arena_release_caller_info();

  // optional int32 num_encryption_conflicts = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_num_encryption_conflicts() const;
  private:
  bool _internal_has_num_encryption_conflicts() const;
  public:
  PROTOBUF_DEPRECATED void clear_num_encryption_conflicts();
  PROTOBUF_DEPRECATED int32_t num_encryption_conflicts() const;
  PROTOBUF_DEPRECATED void set_num_encryption_conflicts(int32_t value);
  private:
  int32_t _internal_num_encryption_conflicts() const;
  void _internal_set_num_encryption_conflicts(int32_t value);
  public:

  // optional int32 num_hierarchy_conflicts = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_num_hierarchy_conflicts() const;
  private:
  bool _internal_has_num_hierarchy_conflicts() const;
  public:
  PROTOBUF_DEPRECATED void clear_num_hierarchy_conflicts();
  PROTOBUF_DEPRECATED int32_t num_hierarchy_conflicts() const;
  PROTOBUF_DEPRECATED void set_num_hierarchy_conflicts(int32_t value);
  private:
  int32_t _internal_num_hierarchy_conflicts() const;
  void _internal_set_num_hierarchy_conflicts(int32_t value);
  public:

  // optional int32 num_simple_conflicts = 6;
  bool has_num_simple_conflicts() const;
  private:
  bool _internal_has_num_simple_conflicts() const;
  public:
  void clear_num_simple_conflicts();
  int32_t num_simple_conflicts() const;
  void set_num_simple_conflicts(int32_t value);
  private:
  int32_t _internal_num_simple_conflicts() const;
  void _internal_set_num_simple_conflicts(int32_t value);
  public:

  // optional int32 num_server_conflicts = 7;
  bool has_num_server_conflicts() const;
  private:
  bool _internal_has_num_server_conflicts() const;
  public:
  void clear_num_server_conflicts();
  int32_t num_server_conflicts() const;
  void set_num_server_conflicts(int32_t value);
  private:
  int32_t _internal_num_server_conflicts() const;
  void _internal_set_num_server_conflicts(int32_t value);
  public:

  // optional int32 num_updates_downloaded = 8;
  bool has_num_updates_downloaded() const;
  private:
  bool _internal_has_num_updates_downloaded() const;
  public:
  void clear_num_updates_downloaded();
  int32_t num_updates_downloaded() const;
  void set_num_updates_downloaded(int32_t value);
  private:
  int32_t _internal_num_updates_downloaded() const;
  void _internal_set_num_updates_downloaded(int32_t value);
  public:

  // optional int32 num_reflected_updates_downloaded = 9 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_num_reflected_updates_downloaded() const;
  private:
  bool _internal_has_num_reflected_updates_downloaded() const;
  public:
  PROTOBUF_DEPRECATED void clear_num_reflected_updates_downloaded();
  PROTOBUF_DEPRECATED int32_t num_reflected_updates_downloaded() const;
  PROTOBUF_DEPRECATED void set_num_reflected_updates_downloaded(int32_t value);
  private:
  int32_t _internal_num_reflected_updates_downloaded() const;
  void _internal_set_num_reflected_updates_downloaded(int32_t value);
  public:

  // optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 12;
  bool has_get_updates_origin() const;
  private:
  bool _internal_has_get_updates_origin() const;
  public:
  void clear_get_updates_origin();
  ::sync_pb::SyncEnums_GetUpdatesOrigin get_updates_origin() const;
  void set_get_updates_origin(::sync_pb::SyncEnums_GetUpdatesOrigin value);
  private:
  ::sync_pb::SyncEnums_GetUpdatesOrigin _internal_get_updates_origin() const;
  void _internal_set_get_updates_origin(::sync_pb::SyncEnums_GetUpdatesOrigin value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.SyncCycleCompletedEventInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sync_pb::GetUpdatesCallerInfo* caller_info_;
  int32_t num_encryption_conflicts_;
  int32_t num_hierarchy_conflicts_;
  int32_t num_simple_conflicts_;
  int32_t num_server_conflicts_;
  int32_t num_updates_downloaded_;
  int32_t num_reflected_updates_downloaded_;
  int get_updates_origin_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fclient_5fdebug_5finfo_2eproto;
};
// -------------------------------------------------------------------

class DebugEventInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.DebugEventInfo) */ {
 public:
  inline DebugEventInfo() : DebugEventInfo(nullptr) {}
  ~DebugEventInfo() override;
  explicit PROTOBUF_CONSTEXPR DebugEventInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DebugEventInfo(const DebugEventInfo& from);
  DebugEventInfo(DebugEventInfo&& from) noexcept
    : DebugEventInfo() {
    *this = ::std::move(from);
  }

  inline DebugEventInfo& operator=(const DebugEventInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugEventInfo& operator=(DebugEventInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DebugEventInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DebugEventInfo* internal_default_instance() {
    return reinterpret_cast<const DebugEventInfo*>(
               &_DebugEventInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DebugEventInfo& a, DebugEventInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DebugEventInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebugEventInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DebugEventInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DebugEventInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DebugEventInfo& from);
  void MergeFrom(const DebugEventInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DebugEventInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.DebugEventInfo";
  }
  protected:
  explicit DebugEventInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatatypesNotifiedFromServerFieldNumber = 4,
    kSyncCycleCompletedEventInfoFieldNumber = 2,
    kNudgingDatatypeFieldNumber = 3,
    kSingletonEventFieldNumber = 1,
  };
  // repeated int32 datatypes_notified_from_server = 4;
  int datatypes_notified_from_server_size() const;
  private:
  int _internal_datatypes_notified_from_server_size() const;
  public:
  void clear_datatypes_notified_from_server();
  private:
  int32_t _internal_datatypes_notified_from_server(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_datatypes_notified_from_server() const;
  void _internal_add_datatypes_notified_from_server(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_datatypes_notified_from_server();
  public:
  int32_t datatypes_notified_from_server(int index) const;
  void set_datatypes_notified_from_server(int index, int32_t value);
  void add_datatypes_notified_from_server(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      datatypes_notified_from_server() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_datatypes_notified_from_server();

  // optional .sync_pb.SyncCycleCompletedEventInfo sync_cycle_completed_event_info = 2;
  bool has_sync_cycle_completed_event_info() const;
  private:
  bool _internal_has_sync_cycle_completed_event_info() const;
  public:
  void clear_sync_cycle_completed_event_info();
  const ::sync_pb::SyncCycleCompletedEventInfo& sync_cycle_completed_event_info() const;
  PROTOBUF_NODISCARD ::sync_pb::SyncCycleCompletedEventInfo* release_sync_cycle_completed_event_info();
  ::sync_pb::SyncCycleCompletedEventInfo* mutable_sync_cycle_completed_event_info();
  void set_allocated_sync_cycle_completed_event_info(::sync_pb::SyncCycleCompletedEventInfo* sync_cycle_completed_event_info);
  private:
  const ::sync_pb::SyncCycleCompletedEventInfo& _internal_sync_cycle_completed_event_info() const;
  ::sync_pb::SyncCycleCompletedEventInfo* _internal_mutable_sync_cycle_completed_event_info();
  public:
  void unsafe_arena_set_allocated_sync_cycle_completed_event_info(
      ::sync_pb::SyncCycleCompletedEventInfo* sync_cycle_completed_event_info);
  ::sync_pb::SyncCycleCompletedEventInfo* unsafe_arena_release_sync_cycle_completed_event_info();

  // optional int32 nudging_datatype = 3;
  bool has_nudging_datatype() const;
  private:
  bool _internal_has_nudging_datatype() const;
  public:
  void clear_nudging_datatype();
  int32_t nudging_datatype() const;
  void set_nudging_datatype(int32_t value);
  private:
  int32_t _internal_nudging_datatype() const;
  void _internal_set_nudging_datatype(int32_t value);
  public:

  // optional .sync_pb.SyncEnums.SingletonDebugEventType singleton_event = 1;
  bool has_singleton_event() const;
  private:
  bool _internal_has_singleton_event() const;
  public:
  void clear_singleton_event();
  ::sync_pb::SyncEnums_SingletonDebugEventType singleton_event() const;
  void set_singleton_event(::sync_pb::SyncEnums_SingletonDebugEventType value);
  private:
  ::sync_pb::SyncEnums_SingletonDebugEventType _internal_singleton_event() const;
  void _internal_set_singleton_event(::sync_pb::SyncEnums_SingletonDebugEventType value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.DebugEventInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > datatypes_notified_from_server_;
  ::sync_pb::SyncCycleCompletedEventInfo* sync_cycle_completed_event_info_;
  int32_t nudging_datatype_;
  int singleton_event_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fclient_5fdebug_5finfo_2eproto;
};
// -------------------------------------------------------------------

class DebugInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.DebugInfo) */ {
 public:
  inline DebugInfo() : DebugInfo(nullptr) {}
  ~DebugInfo() override;
  explicit PROTOBUF_CONSTEXPR DebugInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DebugInfo(const DebugInfo& from);
  DebugInfo(DebugInfo&& from) noexcept
    : DebugInfo() {
    *this = ::std::move(from);
  }

  inline DebugInfo& operator=(const DebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugInfo& operator=(DebugInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DebugInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DebugInfo* internal_default_instance() {
    return reinterpret_cast<const DebugInfo*>(
               &_DebugInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DebugInfo& a, DebugInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DebugInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebugInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DebugInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DebugInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DebugInfo& from);
  void MergeFrom(const DebugInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DebugInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.DebugInfo";
  }
  protected:
  explicit DebugInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
    kCryptographerReadyFieldNumber = 2,
    kCryptographerHasPendingKeysFieldNumber = 3,
    kEventsDroppedFieldNumber = 4,
  };
  // repeated .sync_pb.DebugEventInfo events = 1;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::sync_pb::DebugEventInfo* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DebugEventInfo >*
      mutable_events();
  private:
  const ::sync_pb::DebugEventInfo& _internal_events(int index) const;
  ::sync_pb::DebugEventInfo* _internal_add_events();
  public:
  const ::sync_pb::DebugEventInfo& events(int index) const;
  ::sync_pb::DebugEventInfo* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DebugEventInfo >&
      events() const;

  // optional bool cryptographer_ready = 2;
  bool has_cryptographer_ready() const;
  private:
  bool _internal_has_cryptographer_ready() const;
  public:
  void clear_cryptographer_ready();
  bool cryptographer_ready() const;
  void set_cryptographer_ready(bool value);
  private:
  bool _internal_cryptographer_ready() const;
  void _internal_set_cryptographer_ready(bool value);
  public:

  // optional bool cryptographer_has_pending_keys = 3;
  bool has_cryptographer_has_pending_keys() const;
  private:
  bool _internal_has_cryptographer_has_pending_keys() const;
  public:
  void clear_cryptographer_has_pending_keys();
  bool cryptographer_has_pending_keys() const;
  void set_cryptographer_has_pending_keys(bool value);
  private:
  bool _internal_cryptographer_has_pending_keys() const;
  void _internal_set_cryptographer_has_pending_keys(bool value);
  public:

  // optional bool events_dropped = 4;
  bool has_events_dropped() const;
  private:
  bool _internal_has_events_dropped() const;
  public:
  void clear_events_dropped();
  bool events_dropped() const;
  void set_events_dropped(bool value);
  private:
  bool _internal_events_dropped() const;
  void _internal_set_events_dropped(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.DebugInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DebugEventInfo > events_;
  bool cryptographer_ready_;
  bool cryptographer_has_pending_keys_;
  bool events_dropped_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fclient_5fdebug_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TypeHint

// optional int32 data_type_id = 1;
inline bool TypeHint::_internal_has_data_type_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TypeHint::has_data_type_id() const {
  return _internal_has_data_type_id();
}
inline void TypeHint::clear_data_type_id() {
  data_type_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TypeHint::_internal_data_type_id() const {
  return data_type_id_;
}
inline int32_t TypeHint::data_type_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.TypeHint.data_type_id)
  return _internal_data_type_id();
}
inline void TypeHint::_internal_set_data_type_id(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  data_type_id_ = value;
}
inline void TypeHint::set_data_type_id(int32_t value) {
  _internal_set_data_type_id(value);
  // @@protoc_insertion_point(field_set:sync_pb.TypeHint.data_type_id)
}

// optional bool has_valid_hint = 2;
inline bool TypeHint::_internal_has_has_valid_hint() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TypeHint::has_has_valid_hint() const {
  return _internal_has_has_valid_hint();
}
inline void TypeHint::clear_has_valid_hint() {
  has_valid_hint_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool TypeHint::_internal_has_valid_hint() const {
  return has_valid_hint_;
}
inline bool TypeHint::has_valid_hint() const {
  // @@protoc_insertion_point(field_get:sync_pb.TypeHint.has_valid_hint)
  return _internal_has_valid_hint();
}
inline void TypeHint::_internal_set_has_valid_hint(bool value) {
  _has_bits_[0] |= 0x00000002u;
  has_valid_hint_ = value;
}
inline void TypeHint::set_has_valid_hint(bool value) {
  _internal_set_has_valid_hint(value);
  // @@protoc_insertion_point(field_set:sync_pb.TypeHint.has_valid_hint)
}

// -------------------------------------------------------------------

// SyncCycleCompletedEventInfo

// optional int32 num_encryption_conflicts = 4 [deprecated = true];
inline bool SyncCycleCompletedEventInfo::_internal_has_num_encryption_conflicts() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SyncCycleCompletedEventInfo::has_num_encryption_conflicts() const {
  return _internal_has_num_encryption_conflicts();
}
inline void SyncCycleCompletedEventInfo::clear_num_encryption_conflicts() {
  num_encryption_conflicts_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t SyncCycleCompletedEventInfo::_internal_num_encryption_conflicts() const {
  return num_encryption_conflicts_;
}
inline int32_t SyncCycleCompletedEventInfo::num_encryption_conflicts() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncCycleCompletedEventInfo.num_encryption_conflicts)
  return _internal_num_encryption_conflicts();
}
inline void SyncCycleCompletedEventInfo::_internal_set_num_encryption_conflicts(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  num_encryption_conflicts_ = value;
}
inline void SyncCycleCompletedEventInfo::set_num_encryption_conflicts(int32_t value) {
  _internal_set_num_encryption_conflicts(value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncCycleCompletedEventInfo.num_encryption_conflicts)
}

// optional int32 num_hierarchy_conflicts = 5 [deprecated = true];
inline bool SyncCycleCompletedEventInfo::_internal_has_num_hierarchy_conflicts() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SyncCycleCompletedEventInfo::has_num_hierarchy_conflicts() const {
  return _internal_has_num_hierarchy_conflicts();
}
inline void SyncCycleCompletedEventInfo::clear_num_hierarchy_conflicts() {
  num_hierarchy_conflicts_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t SyncCycleCompletedEventInfo::_internal_num_hierarchy_conflicts() const {
  return num_hierarchy_conflicts_;
}
inline int32_t SyncCycleCompletedEventInfo::num_hierarchy_conflicts() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncCycleCompletedEventInfo.num_hierarchy_conflicts)
  return _internal_num_hierarchy_conflicts();
}
inline void SyncCycleCompletedEventInfo::_internal_set_num_hierarchy_conflicts(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  num_hierarchy_conflicts_ = value;
}
inline void SyncCycleCompletedEventInfo::set_num_hierarchy_conflicts(int32_t value) {
  _internal_set_num_hierarchy_conflicts(value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncCycleCompletedEventInfo.num_hierarchy_conflicts)
}

// optional int32 num_simple_conflicts = 6;
inline bool SyncCycleCompletedEventInfo::_internal_has_num_simple_conflicts() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SyncCycleCompletedEventInfo::has_num_simple_conflicts() const {
  return _internal_has_num_simple_conflicts();
}
inline void SyncCycleCompletedEventInfo::clear_num_simple_conflicts() {
  num_simple_conflicts_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t SyncCycleCompletedEventInfo::_internal_num_simple_conflicts() const {
  return num_simple_conflicts_;
}
inline int32_t SyncCycleCompletedEventInfo::num_simple_conflicts() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncCycleCompletedEventInfo.num_simple_conflicts)
  return _internal_num_simple_conflicts();
}
inline void SyncCycleCompletedEventInfo::_internal_set_num_simple_conflicts(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  num_simple_conflicts_ = value;
}
inline void SyncCycleCompletedEventInfo::set_num_simple_conflicts(int32_t value) {
  _internal_set_num_simple_conflicts(value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncCycleCompletedEventInfo.num_simple_conflicts)
}

// optional int32 num_server_conflicts = 7;
inline bool SyncCycleCompletedEventInfo::_internal_has_num_server_conflicts() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SyncCycleCompletedEventInfo::has_num_server_conflicts() const {
  return _internal_has_num_server_conflicts();
}
inline void SyncCycleCompletedEventInfo::clear_num_server_conflicts() {
  num_server_conflicts_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t SyncCycleCompletedEventInfo::_internal_num_server_conflicts() const {
  return num_server_conflicts_;
}
inline int32_t SyncCycleCompletedEventInfo::num_server_conflicts() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncCycleCompletedEventInfo.num_server_conflicts)
  return _internal_num_server_conflicts();
}
inline void SyncCycleCompletedEventInfo::_internal_set_num_server_conflicts(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  num_server_conflicts_ = value;
}
inline void SyncCycleCompletedEventInfo::set_num_server_conflicts(int32_t value) {
  _internal_set_num_server_conflicts(value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncCycleCompletedEventInfo.num_server_conflicts)
}

// optional int32 num_updates_downloaded = 8;
inline bool SyncCycleCompletedEventInfo::_internal_has_num_updates_downloaded() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SyncCycleCompletedEventInfo::has_num_updates_downloaded() const {
  return _internal_has_num_updates_downloaded();
}
inline void SyncCycleCompletedEventInfo::clear_num_updates_downloaded() {
  num_updates_downloaded_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t SyncCycleCompletedEventInfo::_internal_num_updates_downloaded() const {
  return num_updates_downloaded_;
}
inline int32_t SyncCycleCompletedEventInfo::num_updates_downloaded() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncCycleCompletedEventInfo.num_updates_downloaded)
  return _internal_num_updates_downloaded();
}
inline void SyncCycleCompletedEventInfo::_internal_set_num_updates_downloaded(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  num_updates_downloaded_ = value;
}
inline void SyncCycleCompletedEventInfo::set_num_updates_downloaded(int32_t value) {
  _internal_set_num_updates_downloaded(value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncCycleCompletedEventInfo.num_updates_downloaded)
}

// optional int32 num_reflected_updates_downloaded = 9 [deprecated = true];
inline bool SyncCycleCompletedEventInfo::_internal_has_num_reflected_updates_downloaded() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SyncCycleCompletedEventInfo::has_num_reflected_updates_downloaded() const {
  return _internal_has_num_reflected_updates_downloaded();
}
inline void SyncCycleCompletedEventInfo::clear_num_reflected_updates_downloaded() {
  num_reflected_updates_downloaded_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t SyncCycleCompletedEventInfo::_internal_num_reflected_updates_downloaded() const {
  return num_reflected_updates_downloaded_;
}
inline int32_t SyncCycleCompletedEventInfo::num_reflected_updates_downloaded() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncCycleCompletedEventInfo.num_reflected_updates_downloaded)
  return _internal_num_reflected_updates_downloaded();
}
inline void SyncCycleCompletedEventInfo::_internal_set_num_reflected_updates_downloaded(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  num_reflected_updates_downloaded_ = value;
}
inline void SyncCycleCompletedEventInfo::set_num_reflected_updates_downloaded(int32_t value) {
  _internal_set_num_reflected_updates_downloaded(value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncCycleCompletedEventInfo.num_reflected_updates_downloaded)
}

// optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;
inline bool SyncCycleCompletedEventInfo::_internal_has_caller_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || caller_info_ != nullptr);
  return value;
}
inline bool SyncCycleCompletedEventInfo::has_caller_info() const {
  return _internal_has_caller_info();
}
inline const ::sync_pb::GetUpdatesCallerInfo& SyncCycleCompletedEventInfo::_internal_caller_info() const {
  const ::sync_pb::GetUpdatesCallerInfo* p = caller_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::GetUpdatesCallerInfo&>(
      ::sync_pb::_GetUpdatesCallerInfo_default_instance_);
}
inline const ::sync_pb::GetUpdatesCallerInfo& SyncCycleCompletedEventInfo::caller_info() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncCycleCompletedEventInfo.caller_info)
  return _internal_caller_info();
}
inline void SyncCycleCompletedEventInfo::unsafe_arena_set_allocated_caller_info(
    ::sync_pb::GetUpdatesCallerInfo* caller_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caller_info_);
  }
  caller_info_ = caller_info;
  if (caller_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.SyncCycleCompletedEventInfo.caller_info)
}
inline ::sync_pb::GetUpdatesCallerInfo* SyncCycleCompletedEventInfo::release_caller_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::GetUpdatesCallerInfo* temp = caller_info_;
  caller_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::GetUpdatesCallerInfo* SyncCycleCompletedEventInfo::unsafe_arena_release_caller_info() {
  // @@protoc_insertion_point(field_release:sync_pb.SyncCycleCompletedEventInfo.caller_info)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::GetUpdatesCallerInfo* temp = caller_info_;
  caller_info_ = nullptr;
  return temp;
}
inline ::sync_pb::GetUpdatesCallerInfo* SyncCycleCompletedEventInfo::_internal_mutable_caller_info() {
  _has_bits_[0] |= 0x00000001u;
  if (caller_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::GetUpdatesCallerInfo>(GetArenaForAllocation());
    caller_info_ = p;
  }
  return caller_info_;
}
inline ::sync_pb::GetUpdatesCallerInfo* SyncCycleCompletedEventInfo::mutable_caller_info() {
  ::sync_pb::GetUpdatesCallerInfo* _msg = _internal_mutable_caller_info();
  // @@protoc_insertion_point(field_mutable:sync_pb.SyncCycleCompletedEventInfo.caller_info)
  return _msg;
}
inline void SyncCycleCompletedEventInfo::set_allocated_caller_info(::sync_pb::GetUpdatesCallerInfo* caller_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(caller_info_);
  }
  if (caller_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caller_info));
    if (message_arena != submessage_arena) {
      caller_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caller_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  caller_info_ = caller_info;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SyncCycleCompletedEventInfo.caller_info)
}

// optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 12;
inline bool SyncCycleCompletedEventInfo::_internal_has_get_updates_origin() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SyncCycleCompletedEventInfo::has_get_updates_origin() const {
  return _internal_has_get_updates_origin();
}
inline void SyncCycleCompletedEventInfo::clear_get_updates_origin() {
  get_updates_origin_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::sync_pb::SyncEnums_GetUpdatesOrigin SyncCycleCompletedEventInfo::_internal_get_updates_origin() const {
  return static_cast< ::sync_pb::SyncEnums_GetUpdatesOrigin >(get_updates_origin_);
}
inline ::sync_pb::SyncEnums_GetUpdatesOrigin SyncCycleCompletedEventInfo::get_updates_origin() const {
  // @@protoc_insertion_point(field_get:sync_pb.SyncCycleCompletedEventInfo.get_updates_origin)
  return _internal_get_updates_origin();
}
inline void SyncCycleCompletedEventInfo::_internal_set_get_updates_origin(::sync_pb::SyncEnums_GetUpdatesOrigin value) {
  assert(::sync_pb::SyncEnums_GetUpdatesOrigin_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  get_updates_origin_ = value;
}
inline void SyncCycleCompletedEventInfo::set_get_updates_origin(::sync_pb::SyncEnums_GetUpdatesOrigin value) {
  _internal_set_get_updates_origin(value);
  // @@protoc_insertion_point(field_set:sync_pb.SyncCycleCompletedEventInfo.get_updates_origin)
}

// -------------------------------------------------------------------

// DebugEventInfo

// optional .sync_pb.SyncEnums.SingletonDebugEventType singleton_event = 1;
inline bool DebugEventInfo::_internal_has_singleton_event() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DebugEventInfo::has_singleton_event() const {
  return _internal_has_singleton_event();
}
inline void DebugEventInfo::clear_singleton_event() {
  singleton_event_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::sync_pb::SyncEnums_SingletonDebugEventType DebugEventInfo::_internal_singleton_event() const {
  return static_cast< ::sync_pb::SyncEnums_SingletonDebugEventType >(singleton_event_);
}
inline ::sync_pb::SyncEnums_SingletonDebugEventType DebugEventInfo::singleton_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.DebugEventInfo.singleton_event)
  return _internal_singleton_event();
}
inline void DebugEventInfo::_internal_set_singleton_event(::sync_pb::SyncEnums_SingletonDebugEventType value) {
  assert(::sync_pb::SyncEnums_SingletonDebugEventType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  singleton_event_ = value;
}
inline void DebugEventInfo::set_singleton_event(::sync_pb::SyncEnums_SingletonDebugEventType value) {
  _internal_set_singleton_event(value);
  // @@protoc_insertion_point(field_set:sync_pb.DebugEventInfo.singleton_event)
}

// optional .sync_pb.SyncCycleCompletedEventInfo sync_cycle_completed_event_info = 2;
inline bool DebugEventInfo::_internal_has_sync_cycle_completed_event_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sync_cycle_completed_event_info_ != nullptr);
  return value;
}
inline bool DebugEventInfo::has_sync_cycle_completed_event_info() const {
  return _internal_has_sync_cycle_completed_event_info();
}
inline void DebugEventInfo::clear_sync_cycle_completed_event_info() {
  if (sync_cycle_completed_event_info_ != nullptr) sync_cycle_completed_event_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sync_pb::SyncCycleCompletedEventInfo& DebugEventInfo::_internal_sync_cycle_completed_event_info() const {
  const ::sync_pb::SyncCycleCompletedEventInfo* p = sync_cycle_completed_event_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::SyncCycleCompletedEventInfo&>(
      ::sync_pb::_SyncCycleCompletedEventInfo_default_instance_);
}
inline const ::sync_pb::SyncCycleCompletedEventInfo& DebugEventInfo::sync_cycle_completed_event_info() const {
  // @@protoc_insertion_point(field_get:sync_pb.DebugEventInfo.sync_cycle_completed_event_info)
  return _internal_sync_cycle_completed_event_info();
}
inline void DebugEventInfo::unsafe_arena_set_allocated_sync_cycle_completed_event_info(
    ::sync_pb::SyncCycleCompletedEventInfo* sync_cycle_completed_event_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_cycle_completed_event_info_);
  }
  sync_cycle_completed_event_info_ = sync_cycle_completed_event_info;
  if (sync_cycle_completed_event_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.DebugEventInfo.sync_cycle_completed_event_info)
}
inline ::sync_pb::SyncCycleCompletedEventInfo* DebugEventInfo::release_sync_cycle_completed_event_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::SyncCycleCompletedEventInfo* temp = sync_cycle_completed_event_info_;
  sync_cycle_completed_event_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::SyncCycleCompletedEventInfo* DebugEventInfo::unsafe_arena_release_sync_cycle_completed_event_info() {
  // @@protoc_insertion_point(field_release:sync_pb.DebugEventInfo.sync_cycle_completed_event_info)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::SyncCycleCompletedEventInfo* temp = sync_cycle_completed_event_info_;
  sync_cycle_completed_event_info_ = nullptr;
  return temp;
}
inline ::sync_pb::SyncCycleCompletedEventInfo* DebugEventInfo::_internal_mutable_sync_cycle_completed_event_info() {
  _has_bits_[0] |= 0x00000001u;
  if (sync_cycle_completed_event_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::SyncCycleCompletedEventInfo>(GetArenaForAllocation());
    sync_cycle_completed_event_info_ = p;
  }
  return sync_cycle_completed_event_info_;
}
inline ::sync_pb::SyncCycleCompletedEventInfo* DebugEventInfo::mutable_sync_cycle_completed_event_info() {
  ::sync_pb::SyncCycleCompletedEventInfo* _msg = _internal_mutable_sync_cycle_completed_event_info();
  // @@protoc_insertion_point(field_mutable:sync_pb.DebugEventInfo.sync_cycle_completed_event_info)
  return _msg;
}
inline void DebugEventInfo::set_allocated_sync_cycle_completed_event_info(::sync_pb::SyncCycleCompletedEventInfo* sync_cycle_completed_event_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sync_cycle_completed_event_info_;
  }
  if (sync_cycle_completed_event_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sync_cycle_completed_event_info);
    if (message_arena != submessage_arena) {
      sync_cycle_completed_event_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_cycle_completed_event_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sync_cycle_completed_event_info_ = sync_cycle_completed_event_info;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DebugEventInfo.sync_cycle_completed_event_info)
}

// optional int32 nudging_datatype = 3;
inline bool DebugEventInfo::_internal_has_nudging_datatype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DebugEventInfo::has_nudging_datatype() const {
  return _internal_has_nudging_datatype();
}
inline void DebugEventInfo::clear_nudging_datatype() {
  nudging_datatype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t DebugEventInfo::_internal_nudging_datatype() const {
  return nudging_datatype_;
}
inline int32_t DebugEventInfo::nudging_datatype() const {
  // @@protoc_insertion_point(field_get:sync_pb.DebugEventInfo.nudging_datatype)
  return _internal_nudging_datatype();
}
inline void DebugEventInfo::_internal_set_nudging_datatype(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  nudging_datatype_ = value;
}
inline void DebugEventInfo::set_nudging_datatype(int32_t value) {
  _internal_set_nudging_datatype(value);
  // @@protoc_insertion_point(field_set:sync_pb.DebugEventInfo.nudging_datatype)
}

// repeated int32 datatypes_notified_from_server = 4;
inline int DebugEventInfo::_internal_datatypes_notified_from_server_size() const {
  return datatypes_notified_from_server_.size();
}
inline int DebugEventInfo::datatypes_notified_from_server_size() const {
  return _internal_datatypes_notified_from_server_size();
}
inline void DebugEventInfo::clear_datatypes_notified_from_server() {
  datatypes_notified_from_server_.Clear();
}
inline int32_t DebugEventInfo::_internal_datatypes_notified_from_server(int index) const {
  return datatypes_notified_from_server_.Get(index);
}
inline int32_t DebugEventInfo::datatypes_notified_from_server(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.DebugEventInfo.datatypes_notified_from_server)
  return _internal_datatypes_notified_from_server(index);
}
inline void DebugEventInfo::set_datatypes_notified_from_server(int index, int32_t value) {
  datatypes_notified_from_server_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.DebugEventInfo.datatypes_notified_from_server)
}
inline void DebugEventInfo::_internal_add_datatypes_notified_from_server(int32_t value) {
  datatypes_notified_from_server_.Add(value);
}
inline void DebugEventInfo::add_datatypes_notified_from_server(int32_t value) {
  _internal_add_datatypes_notified_from_server(value);
  // @@protoc_insertion_point(field_add:sync_pb.DebugEventInfo.datatypes_notified_from_server)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DebugEventInfo::_internal_datatypes_notified_from_server() const {
  return datatypes_notified_from_server_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DebugEventInfo::datatypes_notified_from_server() const {
  // @@protoc_insertion_point(field_list:sync_pb.DebugEventInfo.datatypes_notified_from_server)
  return _internal_datatypes_notified_from_server();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DebugEventInfo::_internal_mutable_datatypes_notified_from_server() {
  return &datatypes_notified_from_server_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DebugEventInfo::mutable_datatypes_notified_from_server() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.DebugEventInfo.datatypes_notified_from_server)
  return _internal_mutable_datatypes_notified_from_server();
}

// -------------------------------------------------------------------

// DebugInfo

// repeated .sync_pb.DebugEventInfo events = 1;
inline int DebugInfo::_internal_events_size() const {
  return events_.size();
}
inline int DebugInfo::events_size() const {
  return _internal_events_size();
}
inline void DebugInfo::clear_events() {
  events_.Clear();
}
inline ::sync_pb::DebugEventInfo* DebugInfo::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.DebugInfo.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DebugEventInfo >*
DebugInfo::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.DebugInfo.events)
  return &events_;
}
inline const ::sync_pb::DebugEventInfo& DebugInfo::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::sync_pb::DebugEventInfo& DebugInfo::events(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.DebugInfo.events)
  return _internal_events(index);
}
inline ::sync_pb::DebugEventInfo* DebugInfo::_internal_add_events() {
  return events_.Add();
}
inline ::sync_pb::DebugEventInfo* DebugInfo::add_events() {
  ::sync_pb::DebugEventInfo* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:sync_pb.DebugInfo.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::DebugEventInfo >&
DebugInfo::events() const {
  // @@protoc_insertion_point(field_list:sync_pb.DebugInfo.events)
  return events_;
}

// optional bool cryptographer_ready = 2;
inline bool DebugInfo::_internal_has_cryptographer_ready() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DebugInfo::has_cryptographer_ready() const {
  return _internal_has_cryptographer_ready();
}
inline void DebugInfo::clear_cryptographer_ready() {
  cryptographer_ready_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool DebugInfo::_internal_cryptographer_ready() const {
  return cryptographer_ready_;
}
inline bool DebugInfo::cryptographer_ready() const {
  // @@protoc_insertion_point(field_get:sync_pb.DebugInfo.cryptographer_ready)
  return _internal_cryptographer_ready();
}
inline void DebugInfo::_internal_set_cryptographer_ready(bool value) {
  _has_bits_[0] |= 0x00000001u;
  cryptographer_ready_ = value;
}
inline void DebugInfo::set_cryptographer_ready(bool value) {
  _internal_set_cryptographer_ready(value);
  // @@protoc_insertion_point(field_set:sync_pb.DebugInfo.cryptographer_ready)
}

// optional bool cryptographer_has_pending_keys = 3;
inline bool DebugInfo::_internal_has_cryptographer_has_pending_keys() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DebugInfo::has_cryptographer_has_pending_keys() const {
  return _internal_has_cryptographer_has_pending_keys();
}
inline void DebugInfo::clear_cryptographer_has_pending_keys() {
  cryptographer_has_pending_keys_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool DebugInfo::_internal_cryptographer_has_pending_keys() const {
  return cryptographer_has_pending_keys_;
}
inline bool DebugInfo::cryptographer_has_pending_keys() const {
  // @@protoc_insertion_point(field_get:sync_pb.DebugInfo.cryptographer_has_pending_keys)
  return _internal_cryptographer_has_pending_keys();
}
inline void DebugInfo::_internal_set_cryptographer_has_pending_keys(bool value) {
  _has_bits_[0] |= 0x00000002u;
  cryptographer_has_pending_keys_ = value;
}
inline void DebugInfo::set_cryptographer_has_pending_keys(bool value) {
  _internal_set_cryptographer_has_pending_keys(value);
  // @@protoc_insertion_point(field_set:sync_pb.DebugInfo.cryptographer_has_pending_keys)
}

// optional bool events_dropped = 4;
inline bool DebugInfo::_internal_has_events_dropped() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DebugInfo::has_events_dropped() const {
  return _internal_has_events_dropped();
}
inline void DebugInfo::clear_events_dropped() {
  events_dropped_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool DebugInfo::_internal_events_dropped() const {
  return events_dropped_;
}
inline bool DebugInfo::events_dropped() const {
  // @@protoc_insertion_point(field_get:sync_pb.DebugInfo.events_dropped)
  return _internal_events_dropped();
}
inline void DebugInfo::_internal_set_events_dropped(bool value) {
  _has_bits_[0] |= 0x00000004u;
  events_dropped_ = value;
}
inline void DebugInfo::set_events_dropped(bool value) {
  _internal_set_events_dropped(value);
  // @@protoc_insertion_point(field_set:sync_pb.DebugInfo.events_dropped)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fclient_5fdebug_5finfo_2eproto
