// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/history_delete_directive_specifics.proto

#include "components/sync/protocol/history_delete_directive_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR HistoryDeleteDirectiveSpecifics::HistoryDeleteDirectiveSpecifics(
    ::_pbi::ConstantInitialized)
  : global_id_directive_(nullptr)
  , time_range_directive_(nullptr)
  , url_directive_(nullptr){}
struct HistoryDeleteDirectiveSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistoryDeleteDirectiveSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistoryDeleteDirectiveSpecificsDefaultTypeInternal() {}
  union {
    HistoryDeleteDirectiveSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistoryDeleteDirectiveSpecificsDefaultTypeInternal _HistoryDeleteDirectiveSpecifics_default_instance_;
PROTOBUF_CONSTEXPR GlobalIdDirective::GlobalIdDirective(
    ::_pbi::ConstantInitialized)
  : global_id_()
  , start_time_usec_(int64_t{0})
  , end_time_usec_(int64_t{0}){}
struct GlobalIdDirectiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GlobalIdDirectiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GlobalIdDirectiveDefaultTypeInternal() {}
  union {
    GlobalIdDirective _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GlobalIdDirectiveDefaultTypeInternal _GlobalIdDirective_default_instance_;
PROTOBUF_CONSTEXPR TimeRangeDirective::TimeRangeDirective(
    ::_pbi::ConstantInitialized)
  : start_time_usec_(int64_t{0})
  , end_time_usec_(int64_t{0}){}
struct TimeRangeDirectiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeRangeDirectiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeRangeDirectiveDefaultTypeInternal() {}
  union {
    TimeRangeDirective _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeRangeDirectiveDefaultTypeInternal _TimeRangeDirective_default_instance_;
PROTOBUF_CONSTEXPR UrlDirective::UrlDirective(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , end_time_usec_(int64_t{0}){}
struct UrlDirectiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UrlDirectiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UrlDirectiveDefaultTypeInternal() {}
  union {
    UrlDirective _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UrlDirectiveDefaultTypeInternal _UrlDirective_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class HistoryDeleteDirectiveSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<HistoryDeleteDirectiveSpecifics>()._has_bits_);
  static const ::sync_pb::GlobalIdDirective& global_id_directive(const HistoryDeleteDirectiveSpecifics* msg);
  static void set_has_global_id_directive(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::TimeRangeDirective& time_range_directive(const HistoryDeleteDirectiveSpecifics* msg);
  static void set_has_time_range_directive(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::UrlDirective& url_directive(const HistoryDeleteDirectiveSpecifics* msg);
  static void set_has_url_directive(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sync_pb::GlobalIdDirective&
HistoryDeleteDirectiveSpecifics::_Internal::global_id_directive(const HistoryDeleteDirectiveSpecifics* msg) {
  return *msg->global_id_directive_;
}
const ::sync_pb::TimeRangeDirective&
HistoryDeleteDirectiveSpecifics::_Internal::time_range_directive(const HistoryDeleteDirectiveSpecifics* msg) {
  return *msg->time_range_directive_;
}
const ::sync_pb::UrlDirective&
HistoryDeleteDirectiveSpecifics::_Internal::url_directive(const HistoryDeleteDirectiveSpecifics* msg) {
  return *msg->url_directive_;
}
HistoryDeleteDirectiveSpecifics::HistoryDeleteDirectiveSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.HistoryDeleteDirectiveSpecifics)
}
HistoryDeleteDirectiveSpecifics::HistoryDeleteDirectiveSpecifics(const HistoryDeleteDirectiveSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_global_id_directive()) {
    global_id_directive_ = new ::sync_pb::GlobalIdDirective(*from.global_id_directive_);
  } else {
    global_id_directive_ = nullptr;
  }
  if (from._internal_has_time_range_directive()) {
    time_range_directive_ = new ::sync_pb::TimeRangeDirective(*from.time_range_directive_);
  } else {
    time_range_directive_ = nullptr;
  }
  if (from._internal_has_url_directive()) {
    url_directive_ = new ::sync_pb::UrlDirective(*from.url_directive_);
  } else {
    url_directive_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.HistoryDeleteDirectiveSpecifics)
}

inline void HistoryDeleteDirectiveSpecifics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&global_id_directive_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&url_directive_) -
    reinterpret_cast<char*>(&global_id_directive_)) + sizeof(url_directive_));
}

HistoryDeleteDirectiveSpecifics::~HistoryDeleteDirectiveSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.HistoryDeleteDirectiveSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HistoryDeleteDirectiveSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete global_id_directive_;
  if (this != internal_default_instance()) delete time_range_directive_;
  if (this != internal_default_instance()) delete url_directive_;
}

void HistoryDeleteDirectiveSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HistoryDeleteDirectiveSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.HistoryDeleteDirectiveSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(global_id_directive_ != nullptr);
      global_id_directive_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(time_range_directive_ != nullptr);
      time_range_directive_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(url_directive_ != nullptr);
      url_directive_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HistoryDeleteDirectiveSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.GlobalIdDirective global_id_directive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_id_directive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.TimeRangeDirective time_range_directive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_range_directive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.UrlDirective url_directive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_url_directive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HistoryDeleteDirectiveSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.HistoryDeleteDirectiveSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.GlobalIdDirective global_id_directive = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::global_id_directive(this),
        _Internal::global_id_directive(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.TimeRangeDirective time_range_directive = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time_range_directive(this),
        _Internal::time_range_directive(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.UrlDirective url_directive = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::url_directive(this),
        _Internal::url_directive(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.HistoryDeleteDirectiveSpecifics)
  return target;
}

size_t HistoryDeleteDirectiveSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.HistoryDeleteDirectiveSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .sync_pb.GlobalIdDirective global_id_directive = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *global_id_directive_);
    }

    // optional .sync_pb.TimeRangeDirective time_range_directive = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_range_directive_);
    }

    // optional .sync_pb.UrlDirective url_directive = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *url_directive_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoryDeleteDirectiveSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HistoryDeleteDirectiveSpecifics*>(
      &from));
}

void HistoryDeleteDirectiveSpecifics::MergeFrom(const HistoryDeleteDirectiveSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.HistoryDeleteDirectiveSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_global_id_directive()->::sync_pb::GlobalIdDirective::MergeFrom(from._internal_global_id_directive());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_time_range_directive()->::sync_pb::TimeRangeDirective::MergeFrom(from._internal_time_range_directive());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_url_directive()->::sync_pb::UrlDirective::MergeFrom(from._internal_url_directive());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HistoryDeleteDirectiveSpecifics::CopyFrom(const HistoryDeleteDirectiveSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.HistoryDeleteDirectiveSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryDeleteDirectiveSpecifics::IsInitialized() const {
  return true;
}

void HistoryDeleteDirectiveSpecifics::InternalSwap(HistoryDeleteDirectiveSpecifics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistoryDeleteDirectiveSpecifics, url_directive_)
      + sizeof(HistoryDeleteDirectiveSpecifics::url_directive_)
      - PROTOBUF_FIELD_OFFSET(HistoryDeleteDirectiveSpecifics, global_id_directive_)>(
          reinterpret_cast<char*>(&global_id_directive_),
          reinterpret_cast<char*>(&other->global_id_directive_));
}

std::string HistoryDeleteDirectiveSpecifics::GetTypeName() const {
  return "sync_pb.HistoryDeleteDirectiveSpecifics";
}


// ===================================================================

class GlobalIdDirective::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalIdDirective>()._has_bits_);
  static void set_has_start_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GlobalIdDirective::GlobalIdDirective(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  global_id_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.GlobalIdDirective)
}
GlobalIdDirective::GlobalIdDirective(const GlobalIdDirective& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      global_id_(from.global_id_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&start_time_usec_, &from.start_time_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_usec_) -
    reinterpret_cast<char*>(&start_time_usec_)) + sizeof(end_time_usec_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.GlobalIdDirective)
}

inline void GlobalIdDirective::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_usec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_usec_) -
    reinterpret_cast<char*>(&start_time_usec_)) + sizeof(end_time_usec_));
}

GlobalIdDirective::~GlobalIdDirective() {
  // @@protoc_insertion_point(destructor:sync_pb.GlobalIdDirective)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GlobalIdDirective::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GlobalIdDirective::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GlobalIdDirective::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GlobalIdDirective)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  global_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&start_time_usec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_time_usec_) -
        reinterpret_cast<char*>(&start_time_usec_)) + sizeof(end_time_usec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GlobalIdDirective::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 global_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_global_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_global_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 start_time_usec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_start_time_usec(&has_bits);
          start_time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 end_time_usec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_end_time_usec(&has_bits);
          end_time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GlobalIdDirective::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.GlobalIdDirective)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 global_id = 1;
  for (int i = 0, n = this->_internal_global_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_global_id(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 start_time_usec = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_start_time_usec(), target);
  }

  // optional int64 end_time_usec = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_end_time_usec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.GlobalIdDirective)
  return target;
}

size_t GlobalIdDirective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GlobalIdDirective)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 global_id = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->global_id_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_global_id_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 start_time_usec = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_time_usec());
    }

    // optional int64 end_time_usec = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_end_time_usec());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalIdDirective::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GlobalIdDirective*>(
      &from));
}

void GlobalIdDirective::MergeFrom(const GlobalIdDirective& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GlobalIdDirective)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  global_id_.MergeFrom(from.global_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      start_time_usec_ = from.start_time_usec_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_time_usec_ = from.end_time_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GlobalIdDirective::CopyFrom(const GlobalIdDirective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GlobalIdDirective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalIdDirective::IsInitialized() const {
  return true;
}

void GlobalIdDirective::InternalSwap(GlobalIdDirective* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  global_id_.InternalSwap(&other->global_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlobalIdDirective, end_time_usec_)
      + sizeof(GlobalIdDirective::end_time_usec_)
      - PROTOBUF_FIELD_OFFSET(GlobalIdDirective, start_time_usec_)>(
          reinterpret_cast<char*>(&start_time_usec_),
          reinterpret_cast<char*>(&other->start_time_usec_));
}

std::string GlobalIdDirective::GetTypeName() const {
  return "sync_pb.GlobalIdDirective";
}


// ===================================================================

class TimeRangeDirective::_Internal {
 public:
  using HasBits = decltype(std::declval<TimeRangeDirective>()._has_bits_);
  static void set_has_start_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TimeRangeDirective::TimeRangeDirective(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.TimeRangeDirective)
}
TimeRangeDirective::TimeRangeDirective(const TimeRangeDirective& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&start_time_usec_, &from.start_time_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_usec_) -
    reinterpret_cast<char*>(&start_time_usec_)) + sizeof(end_time_usec_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.TimeRangeDirective)
}

inline void TimeRangeDirective::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_usec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_usec_) -
    reinterpret_cast<char*>(&start_time_usec_)) + sizeof(end_time_usec_));
}

TimeRangeDirective::~TimeRangeDirective() {
  // @@protoc_insertion_point(destructor:sync_pb.TimeRangeDirective)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeRangeDirective::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TimeRangeDirective::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimeRangeDirective::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.TimeRangeDirective)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&start_time_usec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_time_usec_) -
        reinterpret_cast<char*>(&start_time_usec_)) + sizeof(end_time_usec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TimeRangeDirective::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 start_time_usec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_start_time_usec(&has_bits);
          start_time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 end_time_usec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_end_time_usec(&has_bits);
          end_time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeRangeDirective::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.TimeRangeDirective)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 start_time_usec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_time_usec(), target);
  }

  // optional int64 end_time_usec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_end_time_usec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.TimeRangeDirective)
  return target;
}

size_t TimeRangeDirective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.TimeRangeDirective)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 start_time_usec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_time_usec());
    }

    // optional int64 end_time_usec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_end_time_usec());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeRangeDirective::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TimeRangeDirective*>(
      &from));
}

void TimeRangeDirective::MergeFrom(const TimeRangeDirective& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.TimeRangeDirective)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      start_time_usec_ = from.start_time_usec_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_time_usec_ = from.end_time_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TimeRangeDirective::CopyFrom(const TimeRangeDirective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.TimeRangeDirective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRangeDirective::IsInitialized() const {
  return true;
}

void TimeRangeDirective::InternalSwap(TimeRangeDirective* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeRangeDirective, end_time_usec_)
      + sizeof(TimeRangeDirective::end_time_usec_)
      - PROTOBUF_FIELD_OFFSET(TimeRangeDirective, start_time_usec_)>(
          reinterpret_cast<char*>(&start_time_usec_),
          reinterpret_cast<char*>(&other->start_time_usec_));
}

std::string TimeRangeDirective::GetTypeName() const {
  return "sync_pb.TimeRangeDirective";
}


// ===================================================================

class UrlDirective::_Internal {
 public:
  using HasBits = decltype(std::declval<UrlDirective>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UrlDirective::UrlDirective(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.UrlDirective)
}
UrlDirective::UrlDirective(const UrlDirective& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  end_time_usec_ = from.end_time_usec_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.UrlDirective)
}

inline void UrlDirective::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
end_time_usec_ = int64_t{0};
}

UrlDirective::~UrlDirective() {
  // @@protoc_insertion_point(destructor:sync_pb.UrlDirective)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UrlDirective::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
}

void UrlDirective::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UrlDirective::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UrlDirective)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  end_time_usec_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UrlDirective::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 end_time_usec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_end_time_usec(&has_bits);
          end_time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UrlDirective::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.UrlDirective)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional int64 end_time_usec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_end_time_usec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.UrlDirective)
  return target;
}

size_t UrlDirective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UrlDirective)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional int64 end_time_usec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_end_time_usec());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UrlDirective::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UrlDirective*>(
      &from));
}

void UrlDirective::MergeFrom(const UrlDirective& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UrlDirective)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      end_time_usec_ = from.end_time_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UrlDirective::CopyFrom(const UrlDirective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UrlDirective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlDirective::IsInitialized() const {
  return true;
}

void UrlDirective::InternalSwap(UrlDirective* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  swap(end_time_usec_, other->end_time_usec_);
}

std::string UrlDirective::GetTypeName() const {
  return "sync_pb.UrlDirective";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::HistoryDeleteDirectiveSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::HistoryDeleteDirectiveSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::HistoryDeleteDirectiveSpecifics >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::GlobalIdDirective*
Arena::CreateMaybeMessage< ::sync_pb::GlobalIdDirective >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::GlobalIdDirective >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::TimeRangeDirective*
Arena::CreateMaybeMessage< ::sync_pb::TimeRangeDirective >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::TimeRangeDirective >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::UrlDirective*
Arena::CreateMaybeMessage< ::sync_pb::UrlDirective >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::UrlDirective >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
