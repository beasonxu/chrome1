// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/loopback_server.proto

#include "components/sync/protocol/loopback_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR LoopbackServerEntity::LoopbackServerEntity(
    ::_pbi::ConstantInitialized)
  : entity_(nullptr)
  , model_type_(int64_t{0})
  , type_(0)
{}
struct LoopbackServerEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoopbackServerEntityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoopbackServerEntityDefaultTypeInternal() {}
  union {
    LoopbackServerEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoopbackServerEntityDefaultTypeInternal _LoopbackServerEntity_default_instance_;
PROTOBUF_CONSTEXPR LoopbackServerProto::LoopbackServerProto(
    ::_pbi::ConstantInitialized)
  : entities_()
  , keystore_keys_()
  , version_(int64_t{0})
  , store_birthday_(int64_t{0})
  , last_version_assigned_(int64_t{0}){}
struct LoopbackServerProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoopbackServerProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoopbackServerProtoDefaultTypeInternal() {}
  union {
    LoopbackServerProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoopbackServerProtoDefaultTypeInternal _LoopbackServerProto_default_instance_;
}  // namespace sync_pb
namespace sync_pb {
bool LoopbackServerEntity_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LoopbackServerEntity_Type_strings[5] = {};

static const char LoopbackServerEntity_Type_names[] =
  "BOOKMARK"
  "PERMANENT"
  "TOMBSTONE"
  "UNIQUE"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LoopbackServerEntity_Type_entries[] = {
  { {LoopbackServerEntity_Type_names + 0, 8}, 1 },
  { {LoopbackServerEntity_Type_names + 8, 9}, 2 },
  { {LoopbackServerEntity_Type_names + 17, 9}, 3 },
  { {LoopbackServerEntity_Type_names + 26, 6}, 4 },
  { {LoopbackServerEntity_Type_names + 32, 7}, 0 },
};

static const int LoopbackServerEntity_Type_entries_by_number[] = {
  4, // 0 -> UNKNOWN
  0, // 1 -> BOOKMARK
  1, // 2 -> PERMANENT
  2, // 3 -> TOMBSTONE
  3, // 4 -> UNIQUE
};

const std::string& LoopbackServerEntity_Type_Name(
    LoopbackServerEntity_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LoopbackServerEntity_Type_entries,
          LoopbackServerEntity_Type_entries_by_number,
          5, LoopbackServerEntity_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LoopbackServerEntity_Type_entries,
      LoopbackServerEntity_Type_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LoopbackServerEntity_Type_strings[idx].get();
}
bool LoopbackServerEntity_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoopbackServerEntity_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LoopbackServerEntity_Type_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<LoopbackServerEntity_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LoopbackServerEntity_Type LoopbackServerEntity::UNKNOWN;
constexpr LoopbackServerEntity_Type LoopbackServerEntity::BOOKMARK;
constexpr LoopbackServerEntity_Type LoopbackServerEntity::PERMANENT;
constexpr LoopbackServerEntity_Type LoopbackServerEntity::TOMBSTONE;
constexpr LoopbackServerEntity_Type LoopbackServerEntity::UNIQUE;
constexpr LoopbackServerEntity_Type LoopbackServerEntity::Type_MIN;
constexpr LoopbackServerEntity_Type LoopbackServerEntity::Type_MAX;
constexpr int LoopbackServerEntity::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class LoopbackServerEntity::_Internal {
 public:
  using HasBits = decltype(std::declval<LoopbackServerEntity>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sync_pb::SyncEntity& entity(const LoopbackServerEntity* msg);
  static void set_has_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sync_pb::SyncEntity&
LoopbackServerEntity::_Internal::entity(const LoopbackServerEntity* msg) {
  return *msg->entity_;
}
void LoopbackServerEntity::clear_entity() {
  if (entity_ != nullptr) entity_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LoopbackServerEntity::LoopbackServerEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.LoopbackServerEntity)
}
LoopbackServerEntity::LoopbackServerEntity(const LoopbackServerEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_entity()) {
    entity_ = new ::sync_pb::SyncEntity(*from.entity_);
  } else {
    entity_ = nullptr;
  }
  ::memcpy(&model_type_, &from.model_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&model_type_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.LoopbackServerEntity)
}

inline void LoopbackServerEntity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&entity_)) + sizeof(type_));
}

LoopbackServerEntity::~LoopbackServerEntity() {
  // @@protoc_insertion_point(destructor:sync_pb.LoopbackServerEntity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoopbackServerEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete entity_;
}

void LoopbackServerEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoopbackServerEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.LoopbackServerEntity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(entity_ != nullptr);
    entity_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&model_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&model_type_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LoopbackServerEntity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.LoopbackServerEntity.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::LoopbackServerEntity_Type_IsValid(val))) {
            _internal_set_type(static_cast<::sync_pb::LoopbackServerEntity_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.SyncEntity entity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 model_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_model_type(&has_bits);
          model_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoopbackServerEntity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.LoopbackServerEntity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.LoopbackServerEntity.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .sync_pb.SyncEntity entity = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::entity(this),
        _Internal::entity(this).GetCachedSize(), target, stream);
  }

  // optional int64 model_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_model_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.LoopbackServerEntity)
  return target;
}

size_t LoopbackServerEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.LoopbackServerEntity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .sync_pb.SyncEntity entity = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_);
    }

    // optional int64 model_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_model_type());
    }

    // optional .sync_pb.LoopbackServerEntity.Type type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoopbackServerEntity::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LoopbackServerEntity*>(
      &from));
}

void LoopbackServerEntity::MergeFrom(const LoopbackServerEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.LoopbackServerEntity)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_entity()->::sync_pb::SyncEntity::MergeFrom(from._internal_entity());
    }
    if (cached_has_bits & 0x00000002u) {
      model_type_ = from.model_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LoopbackServerEntity::CopyFrom(const LoopbackServerEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.LoopbackServerEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoopbackServerEntity::IsInitialized() const {
  return true;
}

void LoopbackServerEntity::InternalSwap(LoopbackServerEntity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoopbackServerEntity, type_)
      + sizeof(LoopbackServerEntity::type_)
      - PROTOBUF_FIELD_OFFSET(LoopbackServerEntity, entity_)>(
          reinterpret_cast<char*>(&entity_),
          reinterpret_cast<char*>(&other->entity_));
}

std::string LoopbackServerEntity::GetTypeName() const {
  return "sync_pb.LoopbackServerEntity";
}


// ===================================================================

class LoopbackServerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LoopbackServerProto>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_store_birthday(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_version_assigned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LoopbackServerProto::LoopbackServerProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  entities_(arena),
  keystore_keys_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.LoopbackServerProto)
}
LoopbackServerProto::LoopbackServerProto(const LoopbackServerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      entities_(from.entities_),
      keystore_keys_(from.keystore_keys_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_version_assigned_) -
    reinterpret_cast<char*>(&version_)) + sizeof(last_version_assigned_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.LoopbackServerProto)
}

inline void LoopbackServerProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_version_assigned_) -
    reinterpret_cast<char*>(&version_)) + sizeof(last_version_assigned_));
}

LoopbackServerProto::~LoopbackServerProto() {
  // @@protoc_insertion_point(destructor:sync_pb.LoopbackServerProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoopbackServerProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoopbackServerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoopbackServerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.LoopbackServerProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entities_.Clear();
  keystore_keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_version_assigned_) -
        reinterpret_cast<char*>(&version_)) + sizeof(last_version_assigned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LoopbackServerProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 store_birthday = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_store_birthday(&has_bits);
          store_birthday_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.LoopbackServerEntity entities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes keystore_keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keystore_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 last_version_assigned = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_last_version_assigned(&has_bits);
          last_version_assigned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoopbackServerProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.LoopbackServerProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_version(), target);
  }

  // optional int64 store_birthday = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_store_birthday(), target);
  }

  // repeated .sync_pb.LoopbackServerEntity entities = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entities_size()); i < n; i++) {
    const auto& repfield = this->_internal_entities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated bytes keystore_keys = 4;
  for (int i = 0, n = this->_internal_keystore_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keystore_keys(i);
    target = stream->WriteBytes(4, s, target);
  }

  // optional int64 last_version_assigned = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_last_version_assigned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.LoopbackServerProto)
  return target;
}

size_t LoopbackServerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.LoopbackServerProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.LoopbackServerEntity entities = 3;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes keystore_keys = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keystore_keys_.size());
  for (int i = 0, n = keystore_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      keystore_keys_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version());
    }

    // optional int64 store_birthday = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_store_birthday());
    }

    // optional int64 last_version_assigned = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_version_assigned());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoopbackServerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LoopbackServerProto*>(
      &from));
}

void LoopbackServerProto::MergeFrom(const LoopbackServerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.LoopbackServerProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entities_.MergeFrom(from.entities_);
  keystore_keys_.MergeFrom(from.keystore_keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      store_birthday_ = from.store_birthday_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_version_assigned_ = from.last_version_assigned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LoopbackServerProto::CopyFrom(const LoopbackServerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.LoopbackServerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoopbackServerProto::IsInitialized() const {
  return true;
}

void LoopbackServerProto::InternalSwap(LoopbackServerProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entities_.InternalSwap(&other->entities_);
  keystore_keys_.InternalSwap(&other->keystore_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoopbackServerProto, last_version_assigned_)
      + sizeof(LoopbackServerProto::last_version_assigned_)
      - PROTOBUF_FIELD_OFFSET(LoopbackServerProto, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

std::string LoopbackServerProto::GetTypeName() const {
  return "sync_pb.LoopbackServerProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::LoopbackServerEntity*
Arena::CreateMaybeMessage< ::sync_pb::LoopbackServerEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::LoopbackServerEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::LoopbackServerProto*
Arena::CreateMaybeMessage< ::sync_pb::LoopbackServerProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::LoopbackServerProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
