// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/theme_specifics.proto

#include "components/sync/protocol/theme_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR ThemeSpecifics_AutogeneratedTheme::ThemeSpecifics_AutogeneratedTheme(
    ::_pbi::ConstantInitialized)
  : color_(0u){}
struct ThemeSpecifics_AutogeneratedThemeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThemeSpecifics_AutogeneratedThemeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThemeSpecifics_AutogeneratedThemeDefaultTypeInternal() {}
  union {
    ThemeSpecifics_AutogeneratedTheme _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThemeSpecifics_AutogeneratedThemeDefaultTypeInternal _ThemeSpecifics_AutogeneratedTheme_default_instance_;
PROTOBUF_CONSTEXPR ThemeSpecifics::ThemeSpecifics(
    ::_pbi::ConstantInitialized)
  : custom_theme_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , custom_theme_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , custom_theme_update_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , autogenerated_theme_(nullptr)
  , use_custom_theme_(false)
  , use_system_theme_by_default_(false){}
struct ThemeSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThemeSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThemeSpecificsDefaultTypeInternal() {}
  union {
    ThemeSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThemeSpecificsDefaultTypeInternal _ThemeSpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class ThemeSpecifics_AutogeneratedTheme::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeSpecifics_AutogeneratedTheme>()._has_bits_);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ThemeSpecifics_AutogeneratedTheme::ThemeSpecifics_AutogeneratedTheme(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.ThemeSpecifics.AutogeneratedTheme)
}
ThemeSpecifics_AutogeneratedTheme::ThemeSpecifics_AutogeneratedTheme(const ThemeSpecifics_AutogeneratedTheme& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  color_ = from.color_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.ThemeSpecifics.AutogeneratedTheme)
}

inline void ThemeSpecifics_AutogeneratedTheme::SharedCtor() {
color_ = 0u;
}

ThemeSpecifics_AutogeneratedTheme::~ThemeSpecifics_AutogeneratedTheme() {
  // @@protoc_insertion_point(destructor:sync_pb.ThemeSpecifics.AutogeneratedTheme)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThemeSpecifics_AutogeneratedTheme::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ThemeSpecifics_AutogeneratedTheme::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThemeSpecifics_AutogeneratedTheme::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ThemeSpecifics.AutogeneratedTheme)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ThemeSpecifics_AutogeneratedTheme::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_color(&has_bits);
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemeSpecifics_AutogeneratedTheme::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.ThemeSpecifics.AutogeneratedTheme)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.ThemeSpecifics.AutogeneratedTheme)
  return target;
}

size_t ThemeSpecifics_AutogeneratedTheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ThemeSpecifics.AutogeneratedTheme)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 color = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThemeSpecifics_AutogeneratedTheme::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ThemeSpecifics_AutogeneratedTheme*>(
      &from));
}

void ThemeSpecifics_AutogeneratedTheme::MergeFrom(const ThemeSpecifics_AutogeneratedTheme& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ThemeSpecifics.AutogeneratedTheme)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_color()) {
    _internal_set_color(from._internal_color());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ThemeSpecifics_AutogeneratedTheme::CopyFrom(const ThemeSpecifics_AutogeneratedTheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ThemeSpecifics.AutogeneratedTheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeSpecifics_AutogeneratedTheme::IsInitialized() const {
  return true;
}

void ThemeSpecifics_AutogeneratedTheme::InternalSwap(ThemeSpecifics_AutogeneratedTheme* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(color_, other->color_);
}

std::string ThemeSpecifics_AutogeneratedTheme::GetTypeName() const {
  return "sync_pb.ThemeSpecifics.AutogeneratedTheme";
}


// ===================================================================

class ThemeSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeSpecifics>()._has_bits_);
  static void set_has_use_custom_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_use_system_theme_by_default(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_custom_theme_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_custom_theme_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_custom_theme_update_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sync_pb::ThemeSpecifics_AutogeneratedTheme& autogenerated_theme(const ThemeSpecifics* msg);
  static void set_has_autogenerated_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::sync_pb::ThemeSpecifics_AutogeneratedTheme&
ThemeSpecifics::_Internal::autogenerated_theme(const ThemeSpecifics* msg) {
  return *msg->autogenerated_theme_;
}
ThemeSpecifics::ThemeSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.ThemeSpecifics)
}
ThemeSpecifics::ThemeSpecifics(const ThemeSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  custom_theme_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    custom_theme_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_theme_name()) {
    custom_theme_name_.Set(from._internal_custom_theme_name(), 
      GetArenaForAllocation());
  }
  custom_theme_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    custom_theme_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_theme_id()) {
    custom_theme_id_.Set(from._internal_custom_theme_id(), 
      GetArenaForAllocation());
  }
  custom_theme_update_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    custom_theme_update_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_theme_update_url()) {
    custom_theme_update_url_.Set(from._internal_custom_theme_update_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_autogenerated_theme()) {
    autogenerated_theme_ = new ::sync_pb::ThemeSpecifics_AutogeneratedTheme(*from.autogenerated_theme_);
  } else {
    autogenerated_theme_ = nullptr;
  }
  ::memcpy(&use_custom_theme_, &from.use_custom_theme_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_system_theme_by_default_) -
    reinterpret_cast<char*>(&use_custom_theme_)) + sizeof(use_system_theme_by_default_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.ThemeSpecifics)
}

inline void ThemeSpecifics::SharedCtor() {
custom_theme_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  custom_theme_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
custom_theme_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  custom_theme_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
custom_theme_update_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  custom_theme_update_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&autogenerated_theme_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_system_theme_by_default_) -
    reinterpret_cast<char*>(&autogenerated_theme_)) + sizeof(use_system_theme_by_default_));
}

ThemeSpecifics::~ThemeSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.ThemeSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThemeSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  custom_theme_name_.Destroy();
  custom_theme_id_.Destroy();
  custom_theme_update_url_.Destroy();
  if (this != internal_default_instance()) delete autogenerated_theme_;
}

void ThemeSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThemeSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ThemeSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      custom_theme_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      custom_theme_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      custom_theme_update_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(autogenerated_theme_ != nullptr);
      autogenerated_theme_->Clear();
    }
  }
  ::memset(&use_custom_theme_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_system_theme_by_default_) -
      reinterpret_cast<char*>(&use_custom_theme_)) + sizeof(use_system_theme_by_default_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ThemeSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool use_custom_theme = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_use_custom_theme(&has_bits);
          use_custom_theme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_system_theme_by_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_use_system_theme_by_default(&has_bits);
          use_system_theme_by_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string custom_theme_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_custom_theme_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string custom_theme_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_custom_theme_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string custom_theme_update_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_custom_theme_update_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ThemeSpecifics.AutogeneratedTheme autogenerated_theme = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_autogenerated_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemeSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.ThemeSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_custom_theme = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_use_custom_theme(), target);
  }

  // optional bool use_system_theme_by_default = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_use_system_theme_by_default(), target);
  }

  // optional string custom_theme_name = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_custom_theme_name(), target);
  }

  // optional string custom_theme_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_custom_theme_id(), target);
  }

  // optional string custom_theme_update_url = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_custom_theme_update_url(), target);
  }

  // optional .sync_pb.ThemeSpecifics.AutogeneratedTheme autogenerated_theme = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::autogenerated_theme(this),
        _Internal::autogenerated_theme(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.ThemeSpecifics)
  return target;
}

size_t ThemeSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ThemeSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string custom_theme_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_theme_name());
    }

    // optional string custom_theme_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_theme_id());
    }

    // optional string custom_theme_update_url = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_theme_update_url());
    }

    // optional .sync_pb.ThemeSpecifics.AutogeneratedTheme autogenerated_theme = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *autogenerated_theme_);
    }

    // optional bool use_custom_theme = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool use_system_theme_by_default = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThemeSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ThemeSpecifics*>(
      &from));
}

void ThemeSpecifics::MergeFrom(const ThemeSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ThemeSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_custom_theme_name(from._internal_custom_theme_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_custom_theme_id(from._internal_custom_theme_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_custom_theme_update_url(from._internal_custom_theme_update_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_autogenerated_theme()->::sync_pb::ThemeSpecifics_AutogeneratedTheme::MergeFrom(from._internal_autogenerated_theme());
    }
    if (cached_has_bits & 0x00000010u) {
      use_custom_theme_ = from.use_custom_theme_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_system_theme_by_default_ = from.use_system_theme_by_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ThemeSpecifics::CopyFrom(const ThemeSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ThemeSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeSpecifics::IsInitialized() const {
  return true;
}

void ThemeSpecifics::InternalSwap(ThemeSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &custom_theme_name_, lhs_arena,
      &other->custom_theme_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &custom_theme_id_, lhs_arena,
      &other->custom_theme_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &custom_theme_update_url_, lhs_arena,
      &other->custom_theme_update_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThemeSpecifics, use_system_theme_by_default_)
      + sizeof(ThemeSpecifics::use_system_theme_by_default_)
      - PROTOBUF_FIELD_OFFSET(ThemeSpecifics, autogenerated_theme_)>(
          reinterpret_cast<char*>(&autogenerated_theme_),
          reinterpret_cast<char*>(&other->autogenerated_theme_));
}

std::string ThemeSpecifics::GetTypeName() const {
  return "sync_pb.ThemeSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::ThemeSpecifics_AutogeneratedTheme*
Arena::CreateMaybeMessage< ::sync_pb::ThemeSpecifics_AutogeneratedTheme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::ThemeSpecifics_AutogeneratedTheme >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::ThemeSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::ThemeSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::ThemeSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
