// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/entity_metadata.proto

#include "components/sync/protocol/entity_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR EntityMetadata::EntityMetadata(
    ::_pbi::ConstantInitialized)
  : client_tag_hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , server_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , specifics_hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , base_specifics_hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , unique_position_(nullptr)
  , possibly_trimmed_base_specifics_(nullptr)
  , sequence_number_(int64_t{0})
  , acked_sequence_number_(int64_t{0})
  , creation_time_(int64_t{0})
  , is_deleted_(false)
  , bookmark_favicon_hash_(0u)
  , modification_time_(int64_t{0})
  , server_version_(int64_t{-1}){}
struct EntityMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityMetadataDefaultTypeInternal() {}
  union {
    EntityMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityMetadataDefaultTypeInternal _EntityMetadata_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class EntityMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<EntityMetadata>()._has_bits_);
  static void set_has_client_tag_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_acked_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_modification_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_specifics_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_base_specifics_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::sync_pb::UniquePosition& unique_position(const EntityMetadata* msg);
  static void set_has_unique_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bookmark_favicon_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::sync_pb::EntitySpecifics& possibly_trimmed_base_specifics(const EntityMetadata* msg);
  static void set_has_possibly_trimmed_base_specifics(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::sync_pb::UniquePosition&
EntityMetadata::_Internal::unique_position(const EntityMetadata* msg) {
  return *msg->unique_position_;
}
const ::sync_pb::EntitySpecifics&
EntityMetadata::_Internal::possibly_trimmed_base_specifics(const EntityMetadata* msg) {
  return *msg->possibly_trimmed_base_specifics_;
}
void EntityMetadata::clear_unique_position() {
  if (unique_position_ != nullptr) unique_position_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void EntityMetadata::clear_possibly_trimmed_base_specifics() {
  if (possibly_trimmed_base_specifics_ != nullptr) possibly_trimmed_base_specifics_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
EntityMetadata::EntityMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.EntityMetadata)
}
EntityMetadata::EntityMetadata(const EntityMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  client_tag_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_tag_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_client_tag_hash()) {
    client_tag_hash_.Set(from._internal_client_tag_hash(), 
      GetArenaForAllocation());
  }
  server_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    server_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_server_id()) {
    server_id_.Set(from._internal_server_id(), 
      GetArenaForAllocation());
  }
  specifics_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    specifics_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_specifics_hash()) {
    specifics_hash_.Set(from._internal_specifics_hash(), 
      GetArenaForAllocation());
  }
  base_specifics_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    base_specifics_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_base_specifics_hash()) {
    base_specifics_hash_.Set(from._internal_base_specifics_hash(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_unique_position()) {
    unique_position_ = new ::sync_pb::UniquePosition(*from.unique_position_);
  } else {
    unique_position_ = nullptr;
  }
  if (from._internal_has_possibly_trimmed_base_specifics()) {
    possibly_trimmed_base_specifics_ = new ::sync_pb::EntitySpecifics(*from.possibly_trimmed_base_specifics_);
  } else {
    possibly_trimmed_base_specifics_ = nullptr;
  }
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_version_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(server_version_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.EntityMetadata)
}

inline void EntityMetadata::SharedCtor() {
client_tag_hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_tag_hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
server_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  server_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
specifics_hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  specifics_hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
base_specifics_hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  base_specifics_hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&unique_position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&modification_time_) -
    reinterpret_cast<char*>(&unique_position_)) + sizeof(modification_time_));
server_version_ = int64_t{-1};
}

EntityMetadata::~EntityMetadata() {
  // @@protoc_insertion_point(destructor:sync_pb.EntityMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntityMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  client_tag_hash_.Destroy();
  server_id_.Destroy();
  specifics_hash_.Destroy();
  base_specifics_hash_.Destroy();
  if (this != internal_default_instance()) delete unique_position_;
  if (this != internal_default_instance()) delete possibly_trimmed_base_specifics_;
}

void EntityMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EntityMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.EntityMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      client_tag_hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      server_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      specifics_hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      base_specifics_hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(unique_position_ != nullptr);
      unique_position_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(possibly_trimmed_base_specifics_ != nullptr);
      possibly_trimmed_base_specifics_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&sequence_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acked_sequence_number_) -
        reinterpret_cast<char*>(&sequence_number_)) + sizeof(acked_sequence_number_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&creation_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&modification_time_) -
        reinterpret_cast<char*>(&creation_time_)) + sizeof(modification_time_));
    server_version_ = int64_t{-1};
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EntityMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string client_tag_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_tag_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string server_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_server_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_deleted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_deleted(&has_bits);
          is_deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 acked_sequence_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_acked_sequence_number(&has_bits);
          acked_sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 server_version = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_server_version(&has_bits);
          server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 creation_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_creation_time(&has_bits);
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 modification_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_modification_time(&has_bits);
          modification_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string specifics_hash = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_specifics_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string base_specifics_hash = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_base_specifics_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.UniquePosition unique_position = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_unique_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 bookmark_favicon_hash = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_bookmark_favicon_hash(&has_bits);
          bookmark_favicon_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.EntitySpecifics possibly_trimmed_base_specifics = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_possibly_trimmed_base_specifics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EntityMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.EntityMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string client_tag_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_tag_hash(), target);
  }

  // optional string server_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_server_id(), target);
  }

  // optional bool is_deleted = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_deleted(), target);
  }

  // optional int64 sequence_number = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_sequence_number(), target);
  }

  // optional int64 acked_sequence_number = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_acked_sequence_number(), target);
  }

  // optional int64 server_version = 6 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_server_version(), target);
  }

  // optional int64 creation_time = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_creation_time(), target);
  }

  // optional int64 modification_time = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_modification_time(), target);
  }

  // optional string specifics_hash = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_specifics_hash(), target);
  }

  // optional string base_specifics_hash = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_base_specifics_hash(), target);
  }

  // optional .sync_pb.UniquePosition unique_position = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::unique_position(this),
        _Internal::unique_position(this).GetCachedSize(), target, stream);
  }

  // optional fixed32 bookmark_favicon_hash = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(12, this->_internal_bookmark_favicon_hash(), target);
  }

  // optional .sync_pb.EntitySpecifics possibly_trimmed_base_specifics = 13;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::possibly_trimmed_base_specifics(this),
        _Internal::possibly_trimmed_base_specifics(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.EntityMetadata)
  return target;
}

size_t EntityMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.EntityMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string client_tag_hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_tag_hash());
    }

    // optional string server_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_id());
    }

    // optional string specifics_hash = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_specifics_hash());
    }

    // optional string base_specifics_hash = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_base_specifics_hash());
    }

    // optional .sync_pb.UniquePosition unique_position = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unique_position_);
    }

    // optional .sync_pb.EntitySpecifics possibly_trimmed_base_specifics = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *possibly_trimmed_base_specifics_);
    }

    // optional int64 sequence_number = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sequence_number());
    }

    // optional int64 acked_sequence_number = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_acked_sequence_number());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional int64 creation_time = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_creation_time());
    }

    // optional bool is_deleted = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional fixed32 bookmark_favicon_hash = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional int64 modification_time = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_modification_time());
    }

    // optional int64 server_version = 6 [default = -1];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_server_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntityMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EntityMetadata*>(
      &from));
}

void EntityMetadata::MergeFrom(const EntityMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.EntityMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_client_tag_hash(from._internal_client_tag_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_server_id(from._internal_server_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_specifics_hash(from._internal_specifics_hash());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_base_specifics_hash(from._internal_base_specifics_hash());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_unique_position()->::sync_pb::UniquePosition::MergeFrom(from._internal_unique_position());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_possibly_trimmed_base_specifics()->::sync_pb::EntitySpecifics::MergeFrom(from._internal_possibly_trimmed_base_specifics());
    }
    if (cached_has_bits & 0x00000040u) {
      sequence_number_ = from.sequence_number_;
    }
    if (cached_has_bits & 0x00000080u) {
      acked_sequence_number_ = from.acked_sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      creation_time_ = from.creation_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_deleted_ = from.is_deleted_;
    }
    if (cached_has_bits & 0x00000400u) {
      bookmark_favicon_hash_ = from.bookmark_favicon_hash_;
    }
    if (cached_has_bits & 0x00000800u) {
      modification_time_ = from.modification_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      server_version_ = from.server_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EntityMetadata::CopyFrom(const EntityMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.EntityMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityMetadata::IsInitialized() const {
  return true;
}

void EntityMetadata::InternalSwap(EntityMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &client_tag_hash_, lhs_arena,
      &other->client_tag_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &server_id_, lhs_arena,
      &other->server_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &specifics_hash_, lhs_arena,
      &other->specifics_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &base_specifics_hash_, lhs_arena,
      &other->base_specifics_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EntityMetadata, modification_time_)
      + sizeof(EntityMetadata::modification_time_)
      - PROTOBUF_FIELD_OFFSET(EntityMetadata, unique_position_)>(
          reinterpret_cast<char*>(&unique_position_),
          reinterpret_cast<char*>(&other->unique_position_));
  swap(server_version_, other->server_version_);
}

std::string EntityMetadata::GetTypeName() const {
  return "sync_pb.EntityMetadata";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::EntityMetadata*
Arena::CreateMaybeMessage< ::sync_pb::EntityMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::EntityMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
