// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/autofill_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fautofill_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fautofill_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fautofill_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fautofill_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class AutofillProfileSpecifics;
struct AutofillProfileSpecificsDefaultTypeInternal;
extern AutofillProfileSpecificsDefaultTypeInternal _AutofillProfileSpecifics_default_instance_;
class AutofillSpecifics;
struct AutofillSpecificsDefaultTypeInternal;
extern AutofillSpecificsDefaultTypeInternal _AutofillSpecifics_default_instance_;
class AutofillWalletSpecifics;
struct AutofillWalletSpecificsDefaultTypeInternal;
extern AutofillWalletSpecificsDefaultTypeInternal _AutofillWalletSpecifics_default_instance_;
class CardIssuer;
struct CardIssuerDefaultTypeInternal;
extern CardIssuerDefaultTypeInternal _CardIssuer_default_instance_;
class CloudTokenData;
struct CloudTokenDataDefaultTypeInternal;
extern CloudTokenDataDefaultTypeInternal _CloudTokenData_default_instance_;
class PaymentsCustomerData;
struct PaymentsCustomerDataDefaultTypeInternal;
extern PaymentsCustomerDataDefaultTypeInternal _PaymentsCustomerData_default_instance_;
class WalletCreditCardCloudTokenData;
struct WalletCreditCardCloudTokenDataDefaultTypeInternal;
extern WalletCreditCardCloudTokenDataDefaultTypeInternal _WalletCreditCardCloudTokenData_default_instance_;
class WalletMaskedCreditCard;
struct WalletMaskedCreditCardDefaultTypeInternal;
extern WalletMaskedCreditCardDefaultTypeInternal _WalletMaskedCreditCard_default_instance_;
class WalletMetadataSpecifics;
struct WalletMetadataSpecificsDefaultTypeInternal;
extern WalletMetadataSpecificsDefaultTypeInternal _WalletMetadataSpecifics_default_instance_;
class WalletPostalAddress;
struct WalletPostalAddressDefaultTypeInternal;
extern WalletPostalAddressDefaultTypeInternal _WalletPostalAddress_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::AutofillProfileSpecifics* Arena::CreateMaybeMessage<::sync_pb::AutofillProfileSpecifics>(Arena*);
template<> ::sync_pb::AutofillSpecifics* Arena::CreateMaybeMessage<::sync_pb::AutofillSpecifics>(Arena*);
template<> ::sync_pb::AutofillWalletSpecifics* Arena::CreateMaybeMessage<::sync_pb::AutofillWalletSpecifics>(Arena*);
template<> ::sync_pb::CardIssuer* Arena::CreateMaybeMessage<::sync_pb::CardIssuer>(Arena*);
template<> ::sync_pb::CloudTokenData* Arena::CreateMaybeMessage<::sync_pb::CloudTokenData>(Arena*);
template<> ::sync_pb::PaymentsCustomerData* Arena::CreateMaybeMessage<::sync_pb::PaymentsCustomerData>(Arena*);
template<> ::sync_pb::WalletCreditCardCloudTokenData* Arena::CreateMaybeMessage<::sync_pb::WalletCreditCardCloudTokenData>(Arena*);
template<> ::sync_pb::WalletMaskedCreditCard* Arena::CreateMaybeMessage<::sync_pb::WalletMaskedCreditCard>(Arena*);
template<> ::sync_pb::WalletMetadataSpecifics* Arena::CreateMaybeMessage<::sync_pb::WalletMetadataSpecifics>(Arena*);
template<> ::sync_pb::WalletPostalAddress* Arena::CreateMaybeMessage<::sync_pb::WalletPostalAddress>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum AutofillProfileSpecifics_VerificationStatus : int {
  AutofillProfileSpecifics_VerificationStatus_VERIFICATION_STATUS_UNSPECIFIED = 0,
  AutofillProfileSpecifics_VerificationStatus_PARSED = 1,
  AutofillProfileSpecifics_VerificationStatus_FORMATTED = 2,
  AutofillProfileSpecifics_VerificationStatus_OBSERVED = 3,
  AutofillProfileSpecifics_VerificationStatus_USER_VERIFIED = 4,
  AutofillProfileSpecifics_VerificationStatus_SERVER_PARSED = 5
};
bool AutofillProfileSpecifics_VerificationStatus_IsValid(int value);
constexpr AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics_VerificationStatus_VerificationStatus_MIN = AutofillProfileSpecifics_VerificationStatus_VERIFICATION_STATUS_UNSPECIFIED;
constexpr AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics_VerificationStatus_VerificationStatus_MAX = AutofillProfileSpecifics_VerificationStatus_SERVER_PARSED;
constexpr int AutofillProfileSpecifics_VerificationStatus_VerificationStatus_ARRAYSIZE = AutofillProfileSpecifics_VerificationStatus_VerificationStatus_MAX + 1;

const std::string& AutofillProfileSpecifics_VerificationStatus_Name(AutofillProfileSpecifics_VerificationStatus value);
template<typename T>
inline const std::string& AutofillProfileSpecifics_VerificationStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AutofillProfileSpecifics_VerificationStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AutofillProfileSpecifics_VerificationStatus_Name.");
  return AutofillProfileSpecifics_VerificationStatus_Name(static_cast<AutofillProfileSpecifics_VerificationStatus>(enum_t_value));
}
bool AutofillProfileSpecifics_VerificationStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AutofillProfileSpecifics_VerificationStatus* value);
enum CardIssuer_Issuer : int {
  CardIssuer_Issuer_ISSUER_UNKNOWN = 0,
  CardIssuer_Issuer_GOOGLE = 1
};
bool CardIssuer_Issuer_IsValid(int value);
constexpr CardIssuer_Issuer CardIssuer_Issuer_Issuer_MIN = CardIssuer_Issuer_ISSUER_UNKNOWN;
constexpr CardIssuer_Issuer CardIssuer_Issuer_Issuer_MAX = CardIssuer_Issuer_GOOGLE;
constexpr int CardIssuer_Issuer_Issuer_ARRAYSIZE = CardIssuer_Issuer_Issuer_MAX + 1;

const std::string& CardIssuer_Issuer_Name(CardIssuer_Issuer value);
template<typename T>
inline const std::string& CardIssuer_Issuer_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CardIssuer_Issuer>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CardIssuer_Issuer_Name.");
  return CardIssuer_Issuer_Name(static_cast<CardIssuer_Issuer>(enum_t_value));
}
bool CardIssuer_Issuer_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CardIssuer_Issuer* value);
enum WalletMaskedCreditCard_WalletCardStatus : int {
  WalletMaskedCreditCard_WalletCardStatus_VALID = 0,
  WalletMaskedCreditCard_WalletCardStatus_EXPIRED = 1
};
bool WalletMaskedCreditCard_WalletCardStatus_IsValid(int value);
constexpr WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_MIN = WalletMaskedCreditCard_WalletCardStatus_VALID;
constexpr WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_MAX = WalletMaskedCreditCard_WalletCardStatus_EXPIRED;
constexpr int WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_ARRAYSIZE = WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_MAX + 1;

const std::string& WalletMaskedCreditCard_WalletCardStatus_Name(WalletMaskedCreditCard_WalletCardStatus value);
template<typename T>
inline const std::string& WalletMaskedCreditCard_WalletCardStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WalletMaskedCreditCard_WalletCardStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WalletMaskedCreditCard_WalletCardStatus_Name.");
  return WalletMaskedCreditCard_WalletCardStatus_Name(static_cast<WalletMaskedCreditCard_WalletCardStatus>(enum_t_value));
}
bool WalletMaskedCreditCard_WalletCardStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WalletMaskedCreditCard_WalletCardStatus* value);
enum WalletMaskedCreditCard_WalletCardType : int {
  WalletMaskedCreditCard_WalletCardType_UNKNOWN = 0,
  WalletMaskedCreditCard_WalletCardType_AMEX = 1,
  WalletMaskedCreditCard_WalletCardType_DISCOVER = 2,
  WalletMaskedCreditCard_WalletCardType_JCB = 3,
  WalletMaskedCreditCard_WalletCardType_MAESTRO = 4,
  WalletMaskedCreditCard_WalletCardType_MASTER_CARD = 5,
  WalletMaskedCreditCard_WalletCardType_SOLO = 6,
  WalletMaskedCreditCard_WalletCardType_SWITCH = 7,
  WalletMaskedCreditCard_WalletCardType_VISA = 8,
  WalletMaskedCreditCard_WalletCardType_UNIONPAY = 9,
  WalletMaskedCreditCard_WalletCardType_ELO = 10
};
bool WalletMaskedCreditCard_WalletCardType_IsValid(int value);
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard_WalletCardType_WalletCardType_MIN = WalletMaskedCreditCard_WalletCardType_UNKNOWN;
constexpr WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard_WalletCardType_WalletCardType_MAX = WalletMaskedCreditCard_WalletCardType_ELO;
constexpr int WalletMaskedCreditCard_WalletCardType_WalletCardType_ARRAYSIZE = WalletMaskedCreditCard_WalletCardType_WalletCardType_MAX + 1;

const std::string& WalletMaskedCreditCard_WalletCardType_Name(WalletMaskedCreditCard_WalletCardType value);
template<typename T>
inline const std::string& WalletMaskedCreditCard_WalletCardType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WalletMaskedCreditCard_WalletCardType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WalletMaskedCreditCard_WalletCardType_Name.");
  return WalletMaskedCreditCard_WalletCardType_Name(static_cast<WalletMaskedCreditCard_WalletCardType>(enum_t_value));
}
bool WalletMaskedCreditCard_WalletCardType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WalletMaskedCreditCard_WalletCardType* value);
enum WalletMaskedCreditCard_VirtualCardEnrollmentState : int {
  WalletMaskedCreditCard_VirtualCardEnrollmentState_UNSPECIFIED = 0,
  WalletMaskedCreditCard_VirtualCardEnrollmentState_UNENROLLED PROTOBUF_DEPRECATED_ENUM = 1,
  WalletMaskedCreditCard_VirtualCardEnrollmentState_ENROLLED = 2,
  WalletMaskedCreditCard_VirtualCardEnrollmentState_UNENROLLED_AND_NOT_ELIGIBLE = 3,
  WalletMaskedCreditCard_VirtualCardEnrollmentState_UNENROLLED_AND_ELIGIBLE = 4
};
bool WalletMaskedCreditCard_VirtualCardEnrollmentState_IsValid(int value);
constexpr WalletMaskedCreditCard_VirtualCardEnrollmentState WalletMaskedCreditCard_VirtualCardEnrollmentState_VirtualCardEnrollmentState_MIN = WalletMaskedCreditCard_VirtualCardEnrollmentState_UNSPECIFIED;
constexpr WalletMaskedCreditCard_VirtualCardEnrollmentState WalletMaskedCreditCard_VirtualCardEnrollmentState_VirtualCardEnrollmentState_MAX = WalletMaskedCreditCard_VirtualCardEnrollmentState_UNENROLLED_AND_ELIGIBLE;
constexpr int WalletMaskedCreditCard_VirtualCardEnrollmentState_VirtualCardEnrollmentState_ARRAYSIZE = WalletMaskedCreditCard_VirtualCardEnrollmentState_VirtualCardEnrollmentState_MAX + 1;

const std::string& WalletMaskedCreditCard_VirtualCardEnrollmentState_Name(WalletMaskedCreditCard_VirtualCardEnrollmentState value);
template<typename T>
inline const std::string& WalletMaskedCreditCard_VirtualCardEnrollmentState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WalletMaskedCreditCard_VirtualCardEnrollmentState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WalletMaskedCreditCard_VirtualCardEnrollmentState_Name.");
  return WalletMaskedCreditCard_VirtualCardEnrollmentState_Name(static_cast<WalletMaskedCreditCard_VirtualCardEnrollmentState>(enum_t_value));
}
bool WalletMaskedCreditCard_VirtualCardEnrollmentState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WalletMaskedCreditCard_VirtualCardEnrollmentState* value);
enum AutofillWalletSpecifics_WalletInfoType : int {
  AutofillWalletSpecifics_WalletInfoType_UNKNOWN = 0,
  AutofillWalletSpecifics_WalletInfoType_MASKED_CREDIT_CARD = 1,
  AutofillWalletSpecifics_WalletInfoType_POSTAL_ADDRESS = 2,
  AutofillWalletSpecifics_WalletInfoType_CUSTOMER_DATA = 3,
  AutofillWalletSpecifics_WalletInfoType_CREDIT_CARD_CLOUD_TOKEN_DATA = 4
};
bool AutofillWalletSpecifics_WalletInfoType_IsValid(int value);
constexpr AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics_WalletInfoType_WalletInfoType_MIN = AutofillWalletSpecifics_WalletInfoType_UNKNOWN;
constexpr AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics_WalletInfoType_WalletInfoType_MAX = AutofillWalletSpecifics_WalletInfoType_CREDIT_CARD_CLOUD_TOKEN_DATA;
constexpr int AutofillWalletSpecifics_WalletInfoType_WalletInfoType_ARRAYSIZE = AutofillWalletSpecifics_WalletInfoType_WalletInfoType_MAX + 1;

const std::string& AutofillWalletSpecifics_WalletInfoType_Name(AutofillWalletSpecifics_WalletInfoType value);
template<typename T>
inline const std::string& AutofillWalletSpecifics_WalletInfoType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AutofillWalletSpecifics_WalletInfoType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AutofillWalletSpecifics_WalletInfoType_Name.");
  return AutofillWalletSpecifics_WalletInfoType_Name(static_cast<AutofillWalletSpecifics_WalletInfoType>(enum_t_value));
}
bool AutofillWalletSpecifics_WalletInfoType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AutofillWalletSpecifics_WalletInfoType* value);
enum WalletMetadataSpecifics_Type : int {
  WalletMetadataSpecifics_Type_UNKNOWN = 0,
  WalletMetadataSpecifics_Type_CARD = 1,
  WalletMetadataSpecifics_Type_ADDRESS = 2
};
bool WalletMetadataSpecifics_Type_IsValid(int value);
constexpr WalletMetadataSpecifics_Type WalletMetadataSpecifics_Type_Type_MIN = WalletMetadataSpecifics_Type_UNKNOWN;
constexpr WalletMetadataSpecifics_Type WalletMetadataSpecifics_Type_Type_MAX = WalletMetadataSpecifics_Type_ADDRESS;
constexpr int WalletMetadataSpecifics_Type_Type_ARRAYSIZE = WalletMetadataSpecifics_Type_Type_MAX + 1;

const std::string& WalletMetadataSpecifics_Type_Name(WalletMetadataSpecifics_Type value);
template<typename T>
inline const std::string& WalletMetadataSpecifics_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WalletMetadataSpecifics_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WalletMetadataSpecifics_Type_Name.");
  return WalletMetadataSpecifics_Type_Name(static_cast<WalletMetadataSpecifics_Type>(enum_t_value));
}
bool WalletMetadataSpecifics_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WalletMetadataSpecifics_Type* value);
// ===================================================================

class AutofillProfileSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AutofillProfileSpecifics) */ {
 public:
  inline AutofillProfileSpecifics() : AutofillProfileSpecifics(nullptr) {}
  ~AutofillProfileSpecifics() override;
  explicit PROTOBUF_CONSTEXPR AutofillProfileSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillProfileSpecifics(const AutofillProfileSpecifics& from);
  AutofillProfileSpecifics(AutofillProfileSpecifics&& from) noexcept
    : AutofillProfileSpecifics() {
    *this = ::std::move(from);
  }

  inline AutofillProfileSpecifics& operator=(const AutofillProfileSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillProfileSpecifics& operator=(AutofillProfileSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutofillProfileSpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutofillProfileSpecifics* internal_default_instance() {
    return reinterpret_cast<const AutofillProfileSpecifics*>(
               &_AutofillProfileSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AutofillProfileSpecifics& a, AutofillProfileSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AutofillProfileSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillProfileSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutofillProfileSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutofillProfileSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AutofillProfileSpecifics& from);
  void MergeFrom(const AutofillProfileSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillProfileSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AutofillProfileSpecifics";
  }
  protected:
  explicit AutofillProfileSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AutofillProfileSpecifics_VerificationStatus VerificationStatus;
  static constexpr VerificationStatus VERIFICATION_STATUS_UNSPECIFIED =
    AutofillProfileSpecifics_VerificationStatus_VERIFICATION_STATUS_UNSPECIFIED;
  static constexpr VerificationStatus PARSED =
    AutofillProfileSpecifics_VerificationStatus_PARSED;
  static constexpr VerificationStatus FORMATTED =
    AutofillProfileSpecifics_VerificationStatus_FORMATTED;
  static constexpr VerificationStatus OBSERVED =
    AutofillProfileSpecifics_VerificationStatus_OBSERVED;
  static constexpr VerificationStatus USER_VERIFIED =
    AutofillProfileSpecifics_VerificationStatus_USER_VERIFIED;
  static constexpr VerificationStatus SERVER_PARSED =
    AutofillProfileSpecifics_VerificationStatus_SERVER_PARSED;
  static inline bool VerificationStatus_IsValid(int value) {
    return AutofillProfileSpecifics_VerificationStatus_IsValid(value);
  }
  static constexpr VerificationStatus VerificationStatus_MIN =
    AutofillProfileSpecifics_VerificationStatus_VerificationStatus_MIN;
  static constexpr VerificationStatus VerificationStatus_MAX =
    AutofillProfileSpecifics_VerificationStatus_VerificationStatus_MAX;
  static constexpr int VerificationStatus_ARRAYSIZE =
    AutofillProfileSpecifics_VerificationStatus_VerificationStatus_ARRAYSIZE;
  template<typename T>
  static inline const std::string& VerificationStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VerificationStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VerificationStatus_Name.");
    return AutofillProfileSpecifics_VerificationStatus_Name(enum_t_value);
  }
  static inline bool VerificationStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VerificationStatus* value) {
    return AutofillProfileSpecifics_VerificationStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFirstFieldNumber = 2,
    kNameMiddleFieldNumber = 3,
    kNameLastFieldNumber = 4,
    kEmailAddressFieldNumber = 5,
    kPhoneHomeWholeNumberFieldNumber = 13,
    kNameFullFieldNumber = 21,
    kNameHonorificFieldNumber = 26,
    kNameLastFirstFieldNumber = 27,
    kNameLastConjunctionFieldNumber = 28,
    kNameLastSecondFieldNumber = 29,
    kNameHonorificStatusFieldNumber = 30,
    kNameFirstStatusFieldNumber = 31,
    kNameMiddleStatusFieldNumber = 32,
    kNameLastStatusFieldNumber = 33,
    kNameLastFirstStatusFieldNumber = 34,
    kNameLastConjunctionStatusFieldNumber = 35,
    kNameLastSecondStatusFieldNumber = 36,
    kNameFullStatusFieldNumber = 37,
    kNameFullWithHonorificFieldNumber = 60,
    kNameFullWithHonorificStatusFieldNumber = 61,
    kDeprecatedLabelFieldNumber = 1,
    kCompanyNameFieldNumber = 6,
    kAddressHomeLine1FieldNumber = 7,
    kAddressHomeLine2FieldNumber = 8,
    kAddressHomeCityFieldNumber = 9,
    kAddressHomeStateFieldNumber = 10,
    kAddressHomeZipFieldNumber = 11,
    kAddressHomeCountryFieldNumber = 12,
    kPhoneFaxWholeNumberFieldNumber = 14,
    kGuidFieldNumber = 15,
    kOriginFieldNumber = 16,
    kAddressHomeStreetAddressFieldNumber = 17,
    kAddressHomeSortingCodeFieldNumber = 18,
    kAddressHomeDependentLocalityFieldNumber = 19,
    kAddressHomeLanguageCodeFieldNumber = 20,
    kAddressHomeThoroughfareNameFieldNumber = 38,
    kAddressHomeThoroughfareNumberFieldNumber = 39,
    kAddressHomeDependentThoroughfareNameFieldNumber = 40,
    kAddressHomePremiseNameFieldNumber = 41,
    kAddressHomeSubpremiseNameFieldNumber = 42,
    kAddressHomeAptNumFieldNumber = 56,
    kAddressHomeFloorFieldNumber = 57,
    kProfileLabelFieldNumber = 62,
    kUseCountFieldNumber = 22,
    kUseDateFieldNumber = 23,
    kValidityStateBitfieldFieldNumber = 24,
    kAddressHomeCityStatusFieldNumber = 43,
    kAddressHomeStateStatusFieldNumber = 44,
    kDisallowSettingsVisibleUpdatesFieldNumber = 63,
    kIsClientValidityStatesUpdatedFieldNumber = 25,
    kAddressHomeZipStatusFieldNumber = 45,
    kAddressHomeCountryStatusFieldNumber = 46,
    kAddressHomeStreetAddressStatusFieldNumber = 47,
    kAddressHomeSortingCodeStatusFieldNumber = 48,
    kAddressHomeDependentLocalityStatusFieldNumber = 49,
    kAddressHomeLanguageCodeStatusFieldNumber = 50,
    kAddressHomeThoroughfareNameStatusFieldNumber = 51,
    kAddressHomeThoroughfareNumberStatusFieldNumber = 52,
    kAddressHomeDependentThoroughfareNameStatusFieldNumber = 53,
    kAddressHomePremiseNameStatusFieldNumber = 54,
    kAddressHomeSubpremiseNameStatusFieldNumber = 55,
    kAddressHomeAptNumStatusFieldNumber = 58,
    kAddressHomeFloorStatusFieldNumber = 59,
    kBirthdateDayFieldNumber = 64,
    kBirthdateMonthFieldNumber = 65,
    kBirthdateYearFieldNumber = 66,
  };
  // repeated string name_first = 2;
  int name_first_size() const;
  private:
  int _internal_name_first_size() const;
  public:
  void clear_name_first();
  const std::string& name_first(int index) const;
  std::string* mutable_name_first(int index);
  void set_name_first(int index, const std::string& value);
  void set_name_first(int index, std::string&& value);
  void set_name_first(int index, const char* value);
  void set_name_first(int index, const char* value, size_t size);
  std::string* add_name_first();
  void add_name_first(const std::string& value);
  void add_name_first(std::string&& value);
  void add_name_first(const char* value);
  void add_name_first(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_first() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_first();
  private:
  const std::string& _internal_name_first(int index) const;
  std::string* _internal_add_name_first();
  public:

  // repeated string name_middle = 3;
  int name_middle_size() const;
  private:
  int _internal_name_middle_size() const;
  public:
  void clear_name_middle();
  const std::string& name_middle(int index) const;
  std::string* mutable_name_middle(int index);
  void set_name_middle(int index, const std::string& value);
  void set_name_middle(int index, std::string&& value);
  void set_name_middle(int index, const char* value);
  void set_name_middle(int index, const char* value, size_t size);
  std::string* add_name_middle();
  void add_name_middle(const std::string& value);
  void add_name_middle(std::string&& value);
  void add_name_middle(const char* value);
  void add_name_middle(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_middle() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_middle();
  private:
  const std::string& _internal_name_middle(int index) const;
  std::string* _internal_add_name_middle();
  public:

  // repeated string name_last = 4;
  int name_last_size() const;
  private:
  int _internal_name_last_size() const;
  public:
  void clear_name_last();
  const std::string& name_last(int index) const;
  std::string* mutable_name_last(int index);
  void set_name_last(int index, const std::string& value);
  void set_name_last(int index, std::string&& value);
  void set_name_last(int index, const char* value);
  void set_name_last(int index, const char* value, size_t size);
  std::string* add_name_last();
  void add_name_last(const std::string& value);
  void add_name_last(std::string&& value);
  void add_name_last(const char* value);
  void add_name_last(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_last() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_last();
  private:
  const std::string& _internal_name_last(int index) const;
  std::string* _internal_add_name_last();
  public:

  // repeated string email_address = 5;
  int email_address_size() const;
  private:
  int _internal_email_address_size() const;
  public:
  void clear_email_address();
  const std::string& email_address(int index) const;
  std::string* mutable_email_address(int index);
  void set_email_address(int index, const std::string& value);
  void set_email_address(int index, std::string&& value);
  void set_email_address(int index, const char* value);
  void set_email_address(int index, const char* value, size_t size);
  std::string* add_email_address();
  void add_email_address(const std::string& value);
  void add_email_address(std::string&& value);
  void add_email_address(const char* value);
  void add_email_address(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& email_address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_email_address();
  private:
  const std::string& _internal_email_address(int index) const;
  std::string* _internal_add_email_address();
  public:

  // repeated string phone_home_whole_number = 13;
  int phone_home_whole_number_size() const;
  private:
  int _internal_phone_home_whole_number_size() const;
  public:
  void clear_phone_home_whole_number();
  const std::string& phone_home_whole_number(int index) const;
  std::string* mutable_phone_home_whole_number(int index);
  void set_phone_home_whole_number(int index, const std::string& value);
  void set_phone_home_whole_number(int index, std::string&& value);
  void set_phone_home_whole_number(int index, const char* value);
  void set_phone_home_whole_number(int index, const char* value, size_t size);
  std::string* add_phone_home_whole_number();
  void add_phone_home_whole_number(const std::string& value);
  void add_phone_home_whole_number(std::string&& value);
  void add_phone_home_whole_number(const char* value);
  void add_phone_home_whole_number(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& phone_home_whole_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_phone_home_whole_number();
  private:
  const std::string& _internal_phone_home_whole_number(int index) const;
  std::string* _internal_add_phone_home_whole_number();
  public:

  // repeated string name_full = 21;
  int name_full_size() const;
  private:
  int _internal_name_full_size() const;
  public:
  void clear_name_full();
  const std::string& name_full(int index) const;
  std::string* mutable_name_full(int index);
  void set_name_full(int index, const std::string& value);
  void set_name_full(int index, std::string&& value);
  void set_name_full(int index, const char* value);
  void set_name_full(int index, const char* value, size_t size);
  std::string* add_name_full();
  void add_name_full(const std::string& value);
  void add_name_full(std::string&& value);
  void add_name_full(const char* value);
  void add_name_full(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_full() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_full();
  private:
  const std::string& _internal_name_full(int index) const;
  std::string* _internal_add_name_full();
  public:

  // repeated string name_honorific = 26;
  int name_honorific_size() const;
  private:
  int _internal_name_honorific_size() const;
  public:
  void clear_name_honorific();
  const std::string& name_honorific(int index) const;
  std::string* mutable_name_honorific(int index);
  void set_name_honorific(int index, const std::string& value);
  void set_name_honorific(int index, std::string&& value);
  void set_name_honorific(int index, const char* value);
  void set_name_honorific(int index, const char* value, size_t size);
  std::string* add_name_honorific();
  void add_name_honorific(const std::string& value);
  void add_name_honorific(std::string&& value);
  void add_name_honorific(const char* value);
  void add_name_honorific(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_honorific() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_honorific();
  private:
  const std::string& _internal_name_honorific(int index) const;
  std::string* _internal_add_name_honorific();
  public:

  // repeated string name_last_first = 27;
  int name_last_first_size() const;
  private:
  int _internal_name_last_first_size() const;
  public:
  void clear_name_last_first();
  const std::string& name_last_first(int index) const;
  std::string* mutable_name_last_first(int index);
  void set_name_last_first(int index, const std::string& value);
  void set_name_last_first(int index, std::string&& value);
  void set_name_last_first(int index, const char* value);
  void set_name_last_first(int index, const char* value, size_t size);
  std::string* add_name_last_first();
  void add_name_last_first(const std::string& value);
  void add_name_last_first(std::string&& value);
  void add_name_last_first(const char* value);
  void add_name_last_first(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_last_first() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_last_first();
  private:
  const std::string& _internal_name_last_first(int index) const;
  std::string* _internal_add_name_last_first();
  public:

  // repeated string name_last_conjunction = 28;
  int name_last_conjunction_size() const;
  private:
  int _internal_name_last_conjunction_size() const;
  public:
  void clear_name_last_conjunction();
  const std::string& name_last_conjunction(int index) const;
  std::string* mutable_name_last_conjunction(int index);
  void set_name_last_conjunction(int index, const std::string& value);
  void set_name_last_conjunction(int index, std::string&& value);
  void set_name_last_conjunction(int index, const char* value);
  void set_name_last_conjunction(int index, const char* value, size_t size);
  std::string* add_name_last_conjunction();
  void add_name_last_conjunction(const std::string& value);
  void add_name_last_conjunction(std::string&& value);
  void add_name_last_conjunction(const char* value);
  void add_name_last_conjunction(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_last_conjunction() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_last_conjunction();
  private:
  const std::string& _internal_name_last_conjunction(int index) const;
  std::string* _internal_add_name_last_conjunction();
  public:

  // repeated string name_last_second = 29;
  int name_last_second_size() const;
  private:
  int _internal_name_last_second_size() const;
  public:
  void clear_name_last_second();
  const std::string& name_last_second(int index) const;
  std::string* mutable_name_last_second(int index);
  void set_name_last_second(int index, const std::string& value);
  void set_name_last_second(int index, std::string&& value);
  void set_name_last_second(int index, const char* value);
  void set_name_last_second(int index, const char* value, size_t size);
  std::string* add_name_last_second();
  void add_name_last_second(const std::string& value);
  void add_name_last_second(std::string&& value);
  void add_name_last_second(const char* value);
  void add_name_last_second(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_last_second() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_last_second();
  private:
  const std::string& _internal_name_last_second(int index) const;
  std::string* _internal_add_name_last_second();
  public:

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_honorific_status = 30;
  int name_honorific_status_size() const;
  private:
  int _internal_name_honorific_status_size() const;
  public:
  void clear_name_honorific_status();
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_name_honorific_status(int index) const;
  void _internal_add_name_honorific_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_name_honorific_status();
  public:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus name_honorific_status(int index) const;
  void set_name_honorific_status(int index, ::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  void add_name_honorific_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& name_honorific_status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_name_honorific_status();

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_first_status = 31;
  int name_first_status_size() const;
  private:
  int _internal_name_first_status_size() const;
  public:
  void clear_name_first_status();
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_name_first_status(int index) const;
  void _internal_add_name_first_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_name_first_status();
  public:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus name_first_status(int index) const;
  void set_name_first_status(int index, ::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  void add_name_first_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& name_first_status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_name_first_status();

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_middle_status = 32;
  int name_middle_status_size() const;
  private:
  int _internal_name_middle_status_size() const;
  public:
  void clear_name_middle_status();
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_name_middle_status(int index) const;
  void _internal_add_name_middle_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_name_middle_status();
  public:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus name_middle_status(int index) const;
  void set_name_middle_status(int index, ::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  void add_name_middle_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& name_middle_status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_name_middle_status();

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_last_status = 33;
  int name_last_status_size() const;
  private:
  int _internal_name_last_status_size() const;
  public:
  void clear_name_last_status();
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_name_last_status(int index) const;
  void _internal_add_name_last_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_name_last_status();
  public:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus name_last_status(int index) const;
  void set_name_last_status(int index, ::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  void add_name_last_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& name_last_status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_name_last_status();

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_last_first_status = 34;
  int name_last_first_status_size() const;
  private:
  int _internal_name_last_first_status_size() const;
  public:
  void clear_name_last_first_status();
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_name_last_first_status(int index) const;
  void _internal_add_name_last_first_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_name_last_first_status();
  public:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus name_last_first_status(int index) const;
  void set_name_last_first_status(int index, ::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  void add_name_last_first_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& name_last_first_status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_name_last_first_status();

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_last_conjunction_status = 35;
  int name_last_conjunction_status_size() const;
  private:
  int _internal_name_last_conjunction_status_size() const;
  public:
  void clear_name_last_conjunction_status();
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_name_last_conjunction_status(int index) const;
  void _internal_add_name_last_conjunction_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_name_last_conjunction_status();
  public:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus name_last_conjunction_status(int index) const;
  void set_name_last_conjunction_status(int index, ::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  void add_name_last_conjunction_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& name_last_conjunction_status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_name_last_conjunction_status();

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_last_second_status = 36;
  int name_last_second_status_size() const;
  private:
  int _internal_name_last_second_status_size() const;
  public:
  void clear_name_last_second_status();
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_name_last_second_status(int index) const;
  void _internal_add_name_last_second_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_name_last_second_status();
  public:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus name_last_second_status(int index) const;
  void set_name_last_second_status(int index, ::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  void add_name_last_second_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& name_last_second_status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_name_last_second_status();

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_full_status = 37;
  int name_full_status_size() const;
  private:
  int _internal_name_full_status_size() const;
  public:
  void clear_name_full_status();
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_name_full_status(int index) const;
  void _internal_add_name_full_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_name_full_status();
  public:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus name_full_status(int index) const;
  void set_name_full_status(int index, ::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  void add_name_full_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& name_full_status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_name_full_status();

  // repeated string name_full_with_honorific = 60;
  int name_full_with_honorific_size() const;
  private:
  int _internal_name_full_with_honorific_size() const;
  public:
  void clear_name_full_with_honorific();
  const std::string& name_full_with_honorific(int index) const;
  std::string* mutable_name_full_with_honorific(int index);
  void set_name_full_with_honorific(int index, const std::string& value);
  void set_name_full_with_honorific(int index, std::string&& value);
  void set_name_full_with_honorific(int index, const char* value);
  void set_name_full_with_honorific(int index, const char* value, size_t size);
  std::string* add_name_full_with_honorific();
  void add_name_full_with_honorific(const std::string& value);
  void add_name_full_with_honorific(std::string&& value);
  void add_name_full_with_honorific(const char* value);
  void add_name_full_with_honorific(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_full_with_honorific() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_full_with_honorific();
  private:
  const std::string& _internal_name_full_with_honorific(int index) const;
  std::string* _internal_add_name_full_with_honorific();
  public:

  // repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_full_with_honorific_status = 61;
  int name_full_with_honorific_status_size() const;
  private:
  int _internal_name_full_with_honorific_status_size() const;
  public:
  void clear_name_full_with_honorific_status();
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_name_full_with_honorific_status(int index) const;
  void _internal_add_name_full_with_honorific_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_name_full_with_honorific_status();
  public:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus name_full_with_honorific_status(int index) const;
  void set_name_full_with_honorific_status(int index, ::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  void add_name_full_with_honorific_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& name_full_with_honorific_status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_name_full_with_honorific_status();

  // optional string deprecated_label = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_deprecated_label() const;
  private:
  bool _internal_has_deprecated_label() const;
  public:
  PROTOBUF_DEPRECATED void clear_deprecated_label();
  PROTOBUF_DEPRECATED const std::string& deprecated_label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_deprecated_label(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_deprecated_label();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_deprecated_label();
  PROTOBUF_DEPRECATED void set_allocated_deprecated_label(std::string* deprecated_label);
  private:
  const std::string& _internal_deprecated_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deprecated_label(const std::string& value);
  std::string* _internal_mutable_deprecated_label();
  public:

  // optional string company_name = 6;
  bool has_company_name() const;
  private:
  bool _internal_has_company_name() const;
  public:
  void clear_company_name();
  const std::string& company_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_company_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_company_name();
  PROTOBUF_NODISCARD std::string* release_company_name();
  void set_allocated_company_name(std::string* company_name);
  private:
  const std::string& _internal_company_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_company_name(const std::string& value);
  std::string* _internal_mutable_company_name();
  public:

  // optional string address_home_line1 = 7;
  bool has_address_home_line1() const;
  private:
  bool _internal_has_address_home_line1() const;
  public:
  void clear_address_home_line1();
  const std::string& address_home_line1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_home_line1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_home_line1();
  PROTOBUF_NODISCARD std::string* release_address_home_line1();
  void set_allocated_address_home_line1(std::string* address_home_line1);
  private:
  const std::string& _internal_address_home_line1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_home_line1(const std::string& value);
  std::string* _internal_mutable_address_home_line1();
  public:

  // optional string address_home_line2 = 8;
  bool has_address_home_line2() const;
  private:
  bool _internal_has_address_home_line2() const;
  public:
  void clear_address_home_line2();
  const std::string& address_home_line2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_home_line2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_home_line2();
  PROTOBUF_NODISCARD std::string* release_address_home_line2();
  void set_allocated_address_home_line2(std::string* address_home_line2);
  private:
  const std::string& _internal_address_home_line2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_home_line2(const std::string& value);
  std::string* _internal_mutable_address_home_line2();
  public:

  // optional string address_home_city = 9;
  bool has_address_home_city() const;
  private:
  bool _internal_has_address_home_city() const;
  public:
  void clear_address_home_city();
  const std::string& address_home_city() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_home_city(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_home_city();
  PROTOBUF_NODISCARD std::string* release_address_home_city();
  void set_allocated_address_home_city(std::string* address_home_city);
  private:
  const std::string& _internal_address_home_city() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_home_city(const std::string& value);
  std::string* _internal_mutable_address_home_city();
  public:

  // optional string address_home_state = 10;
  bool has_address_home_state() const;
  private:
  bool _internal_has_address_home_state() const;
  public:
  void clear_address_home_state();
  const std::string& address_home_state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_home_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_home_state();
  PROTOBUF_NODISCARD std::string* release_address_home_state();
  void set_allocated_address_home_state(std::string* address_home_state);
  private:
  const std::string& _internal_address_home_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_home_state(const std::string& value);
  std::string* _internal_mutable_address_home_state();
  public:

  // optional string address_home_zip = 11;
  bool has_address_home_zip() const;
  private:
  bool _internal_has_address_home_zip() const;
  public:
  void clear_address_home_zip();
  const std::string& address_home_zip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_home_zip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_home_zip();
  PROTOBUF_NODISCARD std::string* release_address_home_zip();
  void set_allocated_address_home_zip(std::string* address_home_zip);
  private:
  const std::string& _internal_address_home_zip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_home_zip(const std::string& value);
  std::string* _internal_mutable_address_home_zip();
  public:

  // optional string address_home_country = 12;
  bool has_address_home_country() const;
  private:
  bool _internal_has_address_home_country() const;
  public:
  void clear_address_home_country();
  const std::string& address_home_country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_home_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_home_country();
  PROTOBUF_NODISCARD std::string* release_address_home_country();
  void set_allocated_address_home_country(std::string* address_home_country);
  private:
  const std::string& _internal_address_home_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_home_country(const std::string& value);
  std::string* _internal_mutable_address_home_country();
  public:

  // optional string phone_fax_whole_number = 14 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_phone_fax_whole_number() const;
  private:
  bool _internal_has_phone_fax_whole_number() const;
  public:
  PROTOBUF_DEPRECATED void clear_phone_fax_whole_number();
  PROTOBUF_DEPRECATED const std::string& phone_fax_whole_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_phone_fax_whole_number(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_phone_fax_whole_number();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_phone_fax_whole_number();
  PROTOBUF_DEPRECATED void set_allocated_phone_fax_whole_number(std::string* phone_fax_whole_number);
  private:
  const std::string& _internal_phone_fax_whole_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone_fax_whole_number(const std::string& value);
  std::string* _internal_mutable_phone_fax_whole_number();
  public:

  // optional string guid = 15;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  const std::string& guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guid();
  PROTOBUF_NODISCARD std::string* release_guid();
  void set_allocated_guid(std::string* guid);
  private:
  const std::string& _internal_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guid(const std::string& value);
  std::string* _internal_mutable_guid();
  public:

  // optional string origin = 16;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const std::string& origin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_origin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_origin();
  PROTOBUF_NODISCARD std::string* release_origin();
  void set_allocated_origin(std::string* origin);
  private:
  const std::string& _internal_origin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin(const std::string& value);
  std::string* _internal_mutable_origin();
  public:

  // optional string address_home_street_address = 17;
  bool has_address_home_street_address() const;
  private:
  bool _internal_has_address_home_street_address() const;
  public:
  void clear_address_home_street_address();
  const std::string& address_home_street_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_home_street_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_home_street_address();
  PROTOBUF_NODISCARD std::string* release_address_home_street_address();
  void set_allocated_address_home_street_address(std::string* address_home_street_address);
  private:
  const std::string& _internal_address_home_street_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_home_street_address(const std::string& value);
  std::string* _internal_mutable_address_home_street_address();
  public:

  // optional string address_home_sorting_code = 18;
  bool has_address_home_sorting_code() const;
  private:
  bool _internal_has_address_home_sorting_code() const;
  public:
  void clear_address_home_sorting_code();
  const std::string& address_home_sorting_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_home_sorting_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_home_sorting_code();
  PROTOBUF_NODISCARD std::string* release_address_home_sorting_code();
  void set_allocated_address_home_sorting_code(std::string* address_home_sorting_code);
  private:
  const std::string& _internal_address_home_sorting_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_home_sorting_code(const std::string& value);
  std::string* _internal_mutable_address_home_sorting_code();
  public:

  // optional string address_home_dependent_locality = 19;
  bool has_address_home_dependent_locality() const;
  private:
  bool _internal_has_address_home_dependent_locality() const;
  public:
  void clear_address_home_dependent_locality();
  const std::string& address_home_dependent_locality() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_home_dependent_locality(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_home_dependent_locality();
  PROTOBUF_NODISCARD std::string* release_address_home_dependent_locality();
  void set_allocated_address_home_dependent_locality(std::string* address_home_dependent_locality);
  private:
  const std::string& _internal_address_home_dependent_locality() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_home_dependent_locality(const std::string& value);
  std::string* _internal_mutable_address_home_dependent_locality();
  public:

  // optional string address_home_language_code = 20;
  bool has_address_home_language_code() const;
  private:
  bool _internal_has_address_home_language_code() const;
  public:
  void clear_address_home_language_code();
  const std::string& address_home_language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_home_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_home_language_code();
  PROTOBUF_NODISCARD std::string* release_address_home_language_code();
  void set_allocated_address_home_language_code(std::string* address_home_language_code);
  private:
  const std::string& _internal_address_home_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_home_language_code(const std::string& value);
  std::string* _internal_mutable_address_home_language_code();
  public:

  // optional string address_home_thoroughfare_name = 38;
  bool has_address_home_thoroughfare_name() const;
  private:
  bool _internal_has_address_home_thoroughfare_name() const;
  public:
  void clear_address_home_thoroughfare_name();
  const std::string& address_home_thoroughfare_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_home_thoroughfare_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_home_thoroughfare_name();
  PROTOBUF_NODISCARD std::string* release_address_home_thoroughfare_name();
  void set_allocated_address_home_thoroughfare_name(std::string* address_home_thoroughfare_name);
  private:
  const std::string& _internal_address_home_thoroughfare_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_home_thoroughfare_name(const std::string& value);
  std::string* _internal_mutable_address_home_thoroughfare_name();
  public:

  // optional string address_home_thoroughfare_number = 39;
  bool has_address_home_thoroughfare_number() const;
  private:
  bool _internal_has_address_home_thoroughfare_number() const;
  public:
  void clear_address_home_thoroughfare_number();
  const std::string& address_home_thoroughfare_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_home_thoroughfare_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_home_thoroughfare_number();
  PROTOBUF_NODISCARD std::string* release_address_home_thoroughfare_number();
  void set_allocated_address_home_thoroughfare_number(std::string* address_home_thoroughfare_number);
  private:
  const std::string& _internal_address_home_thoroughfare_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_home_thoroughfare_number(const std::string& value);
  std::string* _internal_mutable_address_home_thoroughfare_number();
  public:

  // optional string address_home_dependent_thoroughfare_name = 40;
  bool has_address_home_dependent_thoroughfare_name() const;
  private:
  bool _internal_has_address_home_dependent_thoroughfare_name() const;
  public:
  void clear_address_home_dependent_thoroughfare_name();
  const std::string& address_home_dependent_thoroughfare_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_home_dependent_thoroughfare_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_home_dependent_thoroughfare_name();
  PROTOBUF_NODISCARD std::string* release_address_home_dependent_thoroughfare_name();
  void set_allocated_address_home_dependent_thoroughfare_name(std::string* address_home_dependent_thoroughfare_name);
  private:
  const std::string& _internal_address_home_dependent_thoroughfare_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_home_dependent_thoroughfare_name(const std::string& value);
  std::string* _internal_mutable_address_home_dependent_thoroughfare_name();
  public:

  // optional string address_home_premise_name = 41;
  bool has_address_home_premise_name() const;
  private:
  bool _internal_has_address_home_premise_name() const;
  public:
  void clear_address_home_premise_name();
  const std::string& address_home_premise_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_home_premise_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_home_premise_name();
  PROTOBUF_NODISCARD std::string* release_address_home_premise_name();
  void set_allocated_address_home_premise_name(std::string* address_home_premise_name);
  private:
  const std::string& _internal_address_home_premise_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_home_premise_name(const std::string& value);
  std::string* _internal_mutable_address_home_premise_name();
  public:

  // optional string address_home_subpremise_name = 42;
  bool has_address_home_subpremise_name() const;
  private:
  bool _internal_has_address_home_subpremise_name() const;
  public:
  void clear_address_home_subpremise_name();
  const std::string& address_home_subpremise_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_home_subpremise_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_home_subpremise_name();
  PROTOBUF_NODISCARD std::string* release_address_home_subpremise_name();
  void set_allocated_address_home_subpremise_name(std::string* address_home_subpremise_name);
  private:
  const std::string& _internal_address_home_subpremise_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_home_subpremise_name(const std::string& value);
  std::string* _internal_mutable_address_home_subpremise_name();
  public:

  // optional string address_home_apt_num = 56;
  bool has_address_home_apt_num() const;
  private:
  bool _internal_has_address_home_apt_num() const;
  public:
  void clear_address_home_apt_num();
  const std::string& address_home_apt_num() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_home_apt_num(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_home_apt_num();
  PROTOBUF_NODISCARD std::string* release_address_home_apt_num();
  void set_allocated_address_home_apt_num(std::string* address_home_apt_num);
  private:
  const std::string& _internal_address_home_apt_num() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_home_apt_num(const std::string& value);
  std::string* _internal_mutable_address_home_apt_num();
  public:

  // optional string address_home_floor = 57;
  bool has_address_home_floor() const;
  private:
  bool _internal_has_address_home_floor() const;
  public:
  void clear_address_home_floor();
  const std::string& address_home_floor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_home_floor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_home_floor();
  PROTOBUF_NODISCARD std::string* release_address_home_floor();
  void set_allocated_address_home_floor(std::string* address_home_floor);
  private:
  const std::string& _internal_address_home_floor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_home_floor(const std::string& value);
  std::string* _internal_mutable_address_home_floor();
  public:

  // optional string profile_label = 62;
  bool has_profile_label() const;
  private:
  bool _internal_has_profile_label() const;
  public:
  void clear_profile_label();
  const std::string& profile_label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_profile_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_profile_label();
  PROTOBUF_NODISCARD std::string* release_profile_label();
  void set_allocated_profile_label(std::string* profile_label);
  private:
  const std::string& _internal_profile_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile_label(const std::string& value);
  std::string* _internal_mutable_profile_label();
  public:

  // optional int64 use_count = 22;
  bool has_use_count() const;
  private:
  bool _internal_has_use_count() const;
  public:
  void clear_use_count();
  int64_t use_count() const;
  void set_use_count(int64_t value);
  private:
  int64_t _internal_use_count() const;
  void _internal_set_use_count(int64_t value);
  public:

  // optional int64 use_date = 23;
  bool has_use_date() const;
  private:
  bool _internal_has_use_date() const;
  public:
  void clear_use_date();
  int64_t use_date() const;
  void set_use_date(int64_t value);
  private:
  int64_t _internal_use_date() const;
  void _internal_set_use_date(int64_t value);
  public:

  // optional int64 validity_state_bitfield = 24 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_validity_state_bitfield() const;
  private:
  bool _internal_has_validity_state_bitfield() const;
  public:
  PROTOBUF_DEPRECATED void clear_validity_state_bitfield();
  PROTOBUF_DEPRECATED int64_t validity_state_bitfield() const;
  PROTOBUF_DEPRECATED void set_validity_state_bitfield(int64_t value);
  private:
  int64_t _internal_validity_state_bitfield() const;
  void _internal_set_validity_state_bitfield(int64_t value);
  public:

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_city_status = 43;
  bool has_address_home_city_status() const;
  private:
  bool _internal_has_address_home_city_status() const;
  public:
  void clear_address_home_city_status();
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus address_home_city_status() const;
  void set_address_home_city_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_address_home_city_status() const;
  void _internal_set_address_home_city_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  public:

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_state_status = 44;
  bool has_address_home_state_status() const;
  private:
  bool _internal_has_address_home_state_status() const;
  public:
  void clear_address_home_state_status();
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus address_home_state_status() const;
  void set_address_home_state_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_address_home_state_status() const;
  void _internal_set_address_home_state_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  public:

  // optional bool disallow_settings_visible_updates = 63;
  bool has_disallow_settings_visible_updates() const;
  private:
  bool _internal_has_disallow_settings_visible_updates() const;
  public:
  void clear_disallow_settings_visible_updates();
  bool disallow_settings_visible_updates() const;
  void set_disallow_settings_visible_updates(bool value);
  private:
  bool _internal_disallow_settings_visible_updates() const;
  void _internal_set_disallow_settings_visible_updates(bool value);
  public:

  // optional bool is_client_validity_states_updated = 25 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_is_client_validity_states_updated() const;
  private:
  bool _internal_has_is_client_validity_states_updated() const;
  public:
  PROTOBUF_DEPRECATED void clear_is_client_validity_states_updated();
  PROTOBUF_DEPRECATED bool is_client_validity_states_updated() const;
  PROTOBUF_DEPRECATED void set_is_client_validity_states_updated(bool value);
  private:
  bool _internal_is_client_validity_states_updated() const;
  void _internal_set_is_client_validity_states_updated(bool value);
  public:

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_zip_status = 45;
  bool has_address_home_zip_status() const;
  private:
  bool _internal_has_address_home_zip_status() const;
  public:
  void clear_address_home_zip_status();
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus address_home_zip_status() const;
  void set_address_home_zip_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_address_home_zip_status() const;
  void _internal_set_address_home_zip_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  public:

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_country_status = 46;
  bool has_address_home_country_status() const;
  private:
  bool _internal_has_address_home_country_status() const;
  public:
  void clear_address_home_country_status();
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus address_home_country_status() const;
  void set_address_home_country_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_address_home_country_status() const;
  void _internal_set_address_home_country_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  public:

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_street_address_status = 47;
  bool has_address_home_street_address_status() const;
  private:
  bool _internal_has_address_home_street_address_status() const;
  public:
  void clear_address_home_street_address_status();
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus address_home_street_address_status() const;
  void set_address_home_street_address_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_address_home_street_address_status() const;
  void _internal_set_address_home_street_address_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  public:

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_sorting_code_status = 48;
  bool has_address_home_sorting_code_status() const;
  private:
  bool _internal_has_address_home_sorting_code_status() const;
  public:
  void clear_address_home_sorting_code_status();
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus address_home_sorting_code_status() const;
  void set_address_home_sorting_code_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_address_home_sorting_code_status() const;
  void _internal_set_address_home_sorting_code_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  public:

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_dependent_locality_status = 49;
  bool has_address_home_dependent_locality_status() const;
  private:
  bool _internal_has_address_home_dependent_locality_status() const;
  public:
  void clear_address_home_dependent_locality_status();
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus address_home_dependent_locality_status() const;
  void set_address_home_dependent_locality_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_address_home_dependent_locality_status() const;
  void _internal_set_address_home_dependent_locality_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  public:

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_language_code_status = 50;
  bool has_address_home_language_code_status() const;
  private:
  bool _internal_has_address_home_language_code_status() const;
  public:
  void clear_address_home_language_code_status();
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus address_home_language_code_status() const;
  void set_address_home_language_code_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_address_home_language_code_status() const;
  void _internal_set_address_home_language_code_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  public:

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_thoroughfare_name_status = 51;
  bool has_address_home_thoroughfare_name_status() const;
  private:
  bool _internal_has_address_home_thoroughfare_name_status() const;
  public:
  void clear_address_home_thoroughfare_name_status();
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus address_home_thoroughfare_name_status() const;
  void set_address_home_thoroughfare_name_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_address_home_thoroughfare_name_status() const;
  void _internal_set_address_home_thoroughfare_name_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  public:

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_thoroughfare_number_status = 52;
  bool has_address_home_thoroughfare_number_status() const;
  private:
  bool _internal_has_address_home_thoroughfare_number_status() const;
  public:
  void clear_address_home_thoroughfare_number_status();
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus address_home_thoroughfare_number_status() const;
  void set_address_home_thoroughfare_number_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_address_home_thoroughfare_number_status() const;
  void _internal_set_address_home_thoroughfare_number_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  public:

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_dependent_thoroughfare_name_status = 53;
  bool has_address_home_dependent_thoroughfare_name_status() const;
  private:
  bool _internal_has_address_home_dependent_thoroughfare_name_status() const;
  public:
  void clear_address_home_dependent_thoroughfare_name_status();
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus address_home_dependent_thoroughfare_name_status() const;
  void set_address_home_dependent_thoroughfare_name_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_address_home_dependent_thoroughfare_name_status() const;
  void _internal_set_address_home_dependent_thoroughfare_name_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  public:

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_premise_name_status = 54;
  bool has_address_home_premise_name_status() const;
  private:
  bool _internal_has_address_home_premise_name_status() const;
  public:
  void clear_address_home_premise_name_status();
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus address_home_premise_name_status() const;
  void set_address_home_premise_name_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_address_home_premise_name_status() const;
  void _internal_set_address_home_premise_name_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  public:

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_subpremise_name_status = 55;
  bool has_address_home_subpremise_name_status() const;
  private:
  bool _internal_has_address_home_subpremise_name_status() const;
  public:
  void clear_address_home_subpremise_name_status();
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus address_home_subpremise_name_status() const;
  void set_address_home_subpremise_name_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_address_home_subpremise_name_status() const;
  void _internal_set_address_home_subpremise_name_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  public:

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_apt_num_status = 58;
  bool has_address_home_apt_num_status() const;
  private:
  bool _internal_has_address_home_apt_num_status() const;
  public:
  void clear_address_home_apt_num_status();
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus address_home_apt_num_status() const;
  void set_address_home_apt_num_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_address_home_apt_num_status() const;
  void _internal_set_address_home_apt_num_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  public:

  // optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_floor_status = 59;
  bool has_address_home_floor_status() const;
  private:
  bool _internal_has_address_home_floor_status() const;
  public:
  void clear_address_home_floor_status();
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus address_home_floor_status() const;
  void set_address_home_floor_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  private:
  ::sync_pb::AutofillProfileSpecifics_VerificationStatus _internal_address_home_floor_status() const;
  void _internal_set_address_home_floor_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value);
  public:

  // optional int32 birthdate_day = 64;
  bool has_birthdate_day() const;
  private:
  bool _internal_has_birthdate_day() const;
  public:
  void clear_birthdate_day();
  int32_t birthdate_day() const;
  void set_birthdate_day(int32_t value);
  private:
  int32_t _internal_birthdate_day() const;
  void _internal_set_birthdate_day(int32_t value);
  public:

  // optional int32 birthdate_month = 65;
  bool has_birthdate_month() const;
  private:
  bool _internal_has_birthdate_month() const;
  public:
  void clear_birthdate_month();
  int32_t birthdate_month() const;
  void set_birthdate_month(int32_t value);
  private:
  int32_t _internal_birthdate_month() const;
  void _internal_set_birthdate_month(int32_t value);
  public:

  // optional int32 birthdate_year = 66;
  bool has_birthdate_year() const;
  private:
  bool _internal_has_birthdate_year() const;
  public:
  void clear_birthdate_year();
  int32_t birthdate_year() const;
  void set_birthdate_year(int32_t value);
  private:
  int32_t _internal_birthdate_year() const;
  void _internal_set_birthdate_year(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.AutofillProfileSpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_first_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_middle_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_last_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> email_address_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> phone_home_whole_number_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_full_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_honorific_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_last_first_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_last_conjunction_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_last_second_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> name_honorific_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> name_first_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> name_middle_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> name_last_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> name_last_first_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> name_last_conjunction_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> name_last_second_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> name_full_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_full_with_honorific_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> name_full_with_honorific_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deprecated_label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_line1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_line2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_zip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_fax_whole_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_street_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_sorting_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_dependent_locality_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_language_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_thoroughfare_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_thoroughfare_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_dependent_thoroughfare_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_premise_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_subpremise_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_apt_num_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_home_floor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_label_;
  int64_t use_count_;
  int64_t use_date_;
  int64_t validity_state_bitfield_;
  int address_home_city_status_;
  int address_home_state_status_;
  bool disallow_settings_visible_updates_;
  bool is_client_validity_states_updated_;
  int address_home_zip_status_;
  int address_home_country_status_;
  int address_home_street_address_status_;
  int address_home_sorting_code_status_;
  int address_home_dependent_locality_status_;
  int address_home_language_code_status_;
  int address_home_thoroughfare_name_status_;
  int address_home_thoroughfare_number_status_;
  int address_home_dependent_thoroughfare_name_status_;
  int address_home_premise_name_status_;
  int address_home_subpremise_name_status_;
  int address_home_apt_num_status_;
  int address_home_floor_status_;
  int32_t birthdate_day_;
  int32_t birthdate_month_;
  int32_t birthdate_year_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fautofill_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class AutofillSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AutofillSpecifics) */ {
 public:
  inline AutofillSpecifics() : AutofillSpecifics(nullptr) {}
  ~AutofillSpecifics() override;
  explicit PROTOBUF_CONSTEXPR AutofillSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillSpecifics(const AutofillSpecifics& from);
  AutofillSpecifics(AutofillSpecifics&& from) noexcept
    : AutofillSpecifics() {
    *this = ::std::move(from);
  }

  inline AutofillSpecifics& operator=(const AutofillSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillSpecifics& operator=(AutofillSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutofillSpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutofillSpecifics* internal_default_instance() {
    return reinterpret_cast<const AutofillSpecifics*>(
               &_AutofillSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AutofillSpecifics& a, AutofillSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AutofillSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutofillSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutofillSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AutofillSpecifics& from);
  void MergeFrom(const AutofillSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AutofillSpecifics";
  }
  protected:
  explicit AutofillSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsageTimestampFieldNumber = 3,
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
    kProfileFieldNumber = 4,
  };
  // repeated int64 usage_timestamp = 3;
  int usage_timestamp_size() const;
  private:
  int _internal_usage_timestamp_size() const;
  public:
  void clear_usage_timestamp();
  private:
  int64_t _internal_usage_timestamp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_usage_timestamp() const;
  void _internal_add_usage_timestamp(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_usage_timestamp();
  public:
  int64_t usage_timestamp(int index) const;
  void set_usage_timestamp(int index, int64_t value);
  void add_usage_timestamp(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      usage_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_usage_timestamp();

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional .sync_pb.AutofillProfileSpecifics profile = 4;
  bool has_profile() const;
  private:
  bool _internal_has_profile() const;
  public:
  void clear_profile();
  const ::sync_pb::AutofillProfileSpecifics& profile() const;
  PROTOBUF_NODISCARD ::sync_pb::AutofillProfileSpecifics* release_profile();
  ::sync_pb::AutofillProfileSpecifics* mutable_profile();
  void set_allocated_profile(::sync_pb::AutofillProfileSpecifics* profile);
  private:
  const ::sync_pb::AutofillProfileSpecifics& _internal_profile() const;
  ::sync_pb::AutofillProfileSpecifics* _internal_mutable_profile();
  public:
  void unsafe_arena_set_allocated_profile(
      ::sync_pb::AutofillProfileSpecifics* profile);
  ::sync_pb::AutofillProfileSpecifics* unsafe_arena_release_profile();

  // @@protoc_insertion_point(class_scope:sync_pb.AutofillSpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > usage_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::sync_pb::AutofillProfileSpecifics* profile_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fautofill_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class CloudTokenData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.CloudTokenData) */ {
 public:
  inline CloudTokenData() : CloudTokenData(nullptr) {}
  ~CloudTokenData() override;
  explicit PROTOBUF_CONSTEXPR CloudTokenData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloudTokenData(const CloudTokenData& from);
  CloudTokenData(CloudTokenData&& from) noexcept
    : CloudTokenData() {
    *this = ::std::move(from);
  }

  inline CloudTokenData& operator=(const CloudTokenData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloudTokenData& operator=(CloudTokenData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CloudTokenData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloudTokenData* internal_default_instance() {
    return reinterpret_cast<const CloudTokenData*>(
               &_CloudTokenData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CloudTokenData& a, CloudTokenData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CloudTokenData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloudTokenData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloudTokenData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloudTokenData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CloudTokenData& from);
  void MergeFrom(const CloudTokenData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CloudTokenData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.CloudTokenData";
  }
  protected:
  explicit CloudTokenData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuffixFieldNumber = 1,
    kArtFifeUrlFieldNumber = 4,
    kInstrumentTokenFieldNumber = 5,
    kExpMonthFieldNumber = 2,
    kExpYearFieldNumber = 3,
  };
  // optional string suffix = 1;
  bool has_suffix() const;
  private:
  bool _internal_has_suffix() const;
  public:
  void clear_suffix();
  const std::string& suffix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_suffix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_suffix();
  PROTOBUF_NODISCARD std::string* release_suffix();
  void set_allocated_suffix(std::string* suffix);
  private:
  const std::string& _internal_suffix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_suffix(const std::string& value);
  std::string* _internal_mutable_suffix();
  public:

  // optional string art_fife_url = 4;
  bool has_art_fife_url() const;
  private:
  bool _internal_has_art_fife_url() const;
  public:
  void clear_art_fife_url();
  const std::string& art_fife_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_art_fife_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_art_fife_url();
  PROTOBUF_NODISCARD std::string* release_art_fife_url();
  void set_allocated_art_fife_url(std::string* art_fife_url);
  private:
  const std::string& _internal_art_fife_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_art_fife_url(const std::string& value);
  std::string* _internal_mutable_art_fife_url();
  public:

  // optional string instrument_token = 5;
  bool has_instrument_token() const;
  private:
  bool _internal_has_instrument_token() const;
  public:
  void clear_instrument_token();
  const std::string& instrument_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_token();
  PROTOBUF_NODISCARD std::string* release_instrument_token();
  void set_allocated_instrument_token(std::string* instrument_token);
  private:
  const std::string& _internal_instrument_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_token(const std::string& value);
  std::string* _internal_mutable_instrument_token();
  public:

  // optional int32 exp_month = 2;
  bool has_exp_month() const;
  private:
  bool _internal_has_exp_month() const;
  public:
  void clear_exp_month();
  int32_t exp_month() const;
  void set_exp_month(int32_t value);
  private:
  int32_t _internal_exp_month() const;
  void _internal_set_exp_month(int32_t value);
  public:

  // optional int32 exp_year = 3;
  bool has_exp_year() const;
  private:
  bool _internal_has_exp_year() const;
  public:
  void clear_exp_year();
  int32_t exp_year() const;
  void set_exp_year(int32_t value);
  private:
  int32_t _internal_exp_year() const;
  void _internal_set_exp_year(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.CloudTokenData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suffix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr art_fife_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_token_;
  int32_t exp_month_;
  int32_t exp_year_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fautofill_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class CardIssuer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.CardIssuer) */ {
 public:
  inline CardIssuer() : CardIssuer(nullptr) {}
  ~CardIssuer() override;
  explicit PROTOBUF_CONSTEXPR CardIssuer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CardIssuer(const CardIssuer& from);
  CardIssuer(CardIssuer&& from) noexcept
    : CardIssuer() {
    *this = ::std::move(from);
  }

  inline CardIssuer& operator=(const CardIssuer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardIssuer& operator=(CardIssuer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CardIssuer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CardIssuer* internal_default_instance() {
    return reinterpret_cast<const CardIssuer*>(
               &_CardIssuer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CardIssuer& a, CardIssuer& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CardIssuer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardIssuer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CardIssuer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CardIssuer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CardIssuer& from);
  void MergeFrom(const CardIssuer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CardIssuer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.CardIssuer";
  }
  protected:
  explicit CardIssuer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CardIssuer_Issuer Issuer;
  static constexpr Issuer ISSUER_UNKNOWN =
    CardIssuer_Issuer_ISSUER_UNKNOWN;
  static constexpr Issuer GOOGLE =
    CardIssuer_Issuer_GOOGLE;
  static inline bool Issuer_IsValid(int value) {
    return CardIssuer_Issuer_IsValid(value);
  }
  static constexpr Issuer Issuer_MIN =
    CardIssuer_Issuer_Issuer_MIN;
  static constexpr Issuer Issuer_MAX =
    CardIssuer_Issuer_Issuer_MAX;
  static constexpr int Issuer_ARRAYSIZE =
    CardIssuer_Issuer_Issuer_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Issuer_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Issuer>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Issuer_Name.");
    return CardIssuer_Issuer_Name(enum_t_value);
  }
  static inline bool Issuer_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Issuer* value) {
    return CardIssuer_Issuer_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIssuerFieldNumber = 1,
  };
  // optional .sync_pb.CardIssuer.Issuer issuer = 1;
  bool has_issuer() const;
  private:
  bool _internal_has_issuer() const;
  public:
  void clear_issuer();
  ::sync_pb::CardIssuer_Issuer issuer() const;
  void set_issuer(::sync_pb::CardIssuer_Issuer value);
  private:
  ::sync_pb::CardIssuer_Issuer _internal_issuer() const;
  void _internal_set_issuer(::sync_pb::CardIssuer_Issuer value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.CardIssuer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int issuer_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fautofill_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WalletMaskedCreditCard final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WalletMaskedCreditCard) */ {
 public:
  inline WalletMaskedCreditCard() : WalletMaskedCreditCard(nullptr) {}
  ~WalletMaskedCreditCard() override;
  explicit PROTOBUF_CONSTEXPR WalletMaskedCreditCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WalletMaskedCreditCard(const WalletMaskedCreditCard& from);
  WalletMaskedCreditCard(WalletMaskedCreditCard&& from) noexcept
    : WalletMaskedCreditCard() {
    *this = ::std::move(from);
  }

  inline WalletMaskedCreditCard& operator=(const WalletMaskedCreditCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletMaskedCreditCard& operator=(WalletMaskedCreditCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WalletMaskedCreditCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const WalletMaskedCreditCard* internal_default_instance() {
    return reinterpret_cast<const WalletMaskedCreditCard*>(
               &_WalletMaskedCreditCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WalletMaskedCreditCard& a, WalletMaskedCreditCard& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WalletMaskedCreditCard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WalletMaskedCreditCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WalletMaskedCreditCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WalletMaskedCreditCard>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WalletMaskedCreditCard& from);
  void MergeFrom(const WalletMaskedCreditCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WalletMaskedCreditCard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WalletMaskedCreditCard";
  }
  protected:
  explicit WalletMaskedCreditCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WalletMaskedCreditCard_WalletCardStatus WalletCardStatus;
  static constexpr WalletCardStatus VALID =
    WalletMaskedCreditCard_WalletCardStatus_VALID;
  static constexpr WalletCardStatus EXPIRED =
    WalletMaskedCreditCard_WalletCardStatus_EXPIRED;
  static inline bool WalletCardStatus_IsValid(int value) {
    return WalletMaskedCreditCard_WalletCardStatus_IsValid(value);
  }
  static constexpr WalletCardStatus WalletCardStatus_MIN =
    WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_MIN;
  static constexpr WalletCardStatus WalletCardStatus_MAX =
    WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_MAX;
  static constexpr int WalletCardStatus_ARRAYSIZE =
    WalletMaskedCreditCard_WalletCardStatus_WalletCardStatus_ARRAYSIZE;
  template<typename T>
  static inline const std::string& WalletCardStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WalletCardStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WalletCardStatus_Name.");
    return WalletMaskedCreditCard_WalletCardStatus_Name(enum_t_value);
  }
  static inline bool WalletCardStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WalletCardStatus* value) {
    return WalletMaskedCreditCard_WalletCardStatus_Parse(name, value);
  }

  typedef WalletMaskedCreditCard_WalletCardType WalletCardType;
  static constexpr WalletCardType UNKNOWN =
    WalletMaskedCreditCard_WalletCardType_UNKNOWN;
  static constexpr WalletCardType AMEX =
    WalletMaskedCreditCard_WalletCardType_AMEX;
  static constexpr WalletCardType DISCOVER =
    WalletMaskedCreditCard_WalletCardType_DISCOVER;
  static constexpr WalletCardType JCB =
    WalletMaskedCreditCard_WalletCardType_JCB;
  static constexpr WalletCardType MAESTRO =
    WalletMaskedCreditCard_WalletCardType_MAESTRO;
  static constexpr WalletCardType MASTER_CARD =
    WalletMaskedCreditCard_WalletCardType_MASTER_CARD;
  static constexpr WalletCardType SOLO =
    WalletMaskedCreditCard_WalletCardType_SOLO;
  static constexpr WalletCardType SWITCH =
    WalletMaskedCreditCard_WalletCardType_SWITCH;
  static constexpr WalletCardType VISA =
    WalletMaskedCreditCard_WalletCardType_VISA;
  static constexpr WalletCardType UNIONPAY =
    WalletMaskedCreditCard_WalletCardType_UNIONPAY;
  static constexpr WalletCardType ELO =
    WalletMaskedCreditCard_WalletCardType_ELO;
  static inline bool WalletCardType_IsValid(int value) {
    return WalletMaskedCreditCard_WalletCardType_IsValid(value);
  }
  static constexpr WalletCardType WalletCardType_MIN =
    WalletMaskedCreditCard_WalletCardType_WalletCardType_MIN;
  static constexpr WalletCardType WalletCardType_MAX =
    WalletMaskedCreditCard_WalletCardType_WalletCardType_MAX;
  static constexpr int WalletCardType_ARRAYSIZE =
    WalletMaskedCreditCard_WalletCardType_WalletCardType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& WalletCardType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WalletCardType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WalletCardType_Name.");
    return WalletMaskedCreditCard_WalletCardType_Name(enum_t_value);
  }
  static inline bool WalletCardType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WalletCardType* value) {
    return WalletMaskedCreditCard_WalletCardType_Parse(name, value);
  }

  typedef WalletMaskedCreditCard_VirtualCardEnrollmentState VirtualCardEnrollmentState;
  static constexpr VirtualCardEnrollmentState UNSPECIFIED =
    WalletMaskedCreditCard_VirtualCardEnrollmentState_UNSPECIFIED;
  PROTOBUF_DEPRECATED_ENUM static constexpr VirtualCardEnrollmentState UNENROLLED =
    WalletMaskedCreditCard_VirtualCardEnrollmentState_UNENROLLED;
  static constexpr VirtualCardEnrollmentState ENROLLED =
    WalletMaskedCreditCard_VirtualCardEnrollmentState_ENROLLED;
  static constexpr VirtualCardEnrollmentState UNENROLLED_AND_NOT_ELIGIBLE =
    WalletMaskedCreditCard_VirtualCardEnrollmentState_UNENROLLED_AND_NOT_ELIGIBLE;
  static constexpr VirtualCardEnrollmentState UNENROLLED_AND_ELIGIBLE =
    WalletMaskedCreditCard_VirtualCardEnrollmentState_UNENROLLED_AND_ELIGIBLE;
  static inline bool VirtualCardEnrollmentState_IsValid(int value) {
    return WalletMaskedCreditCard_VirtualCardEnrollmentState_IsValid(value);
  }
  static constexpr VirtualCardEnrollmentState VirtualCardEnrollmentState_MIN =
    WalletMaskedCreditCard_VirtualCardEnrollmentState_VirtualCardEnrollmentState_MIN;
  static constexpr VirtualCardEnrollmentState VirtualCardEnrollmentState_MAX =
    WalletMaskedCreditCard_VirtualCardEnrollmentState_VirtualCardEnrollmentState_MAX;
  static constexpr int VirtualCardEnrollmentState_ARRAYSIZE =
    WalletMaskedCreditCard_VirtualCardEnrollmentState_VirtualCardEnrollmentState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& VirtualCardEnrollmentState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VirtualCardEnrollmentState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VirtualCardEnrollmentState_Name.");
    return WalletMaskedCreditCard_VirtualCardEnrollmentState_Name(enum_t_value);
  }
  static inline bool VirtualCardEnrollmentState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VirtualCardEnrollmentState* value) {
    return WalletMaskedCreditCard_VirtualCardEnrollmentState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameOnCardFieldNumber = 3,
    kLastFourFieldNumber = 5,
    kBillingAddressIdFieldNumber = 8,
    kBankNameFieldNumber = 10,
    kNicknameFieldNumber = 12,
    kCardArtUrlFieldNumber = 17,
    kProductDescriptionFieldNumber = 18,
    kCloudTokenDataFieldNumber = 11,
    kCardIssuerFieldNumber = 13,
    kStatusFieldNumber = 2,
    kTypeFieldNumber = 4,
    kExpMonthFieldNumber = 6,
    kExpYearFieldNumber = 7,
    kInstrumentIdFieldNumber = 15,
    kVirtualCardEnrollmentStateFieldNumber = 16,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string name_on_card = 3;
  bool has_name_on_card() const;
  private:
  bool _internal_has_name_on_card() const;
  public:
  void clear_name_on_card();
  const std::string& name_on_card() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_on_card(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_on_card();
  PROTOBUF_NODISCARD std::string* release_name_on_card();
  void set_allocated_name_on_card(std::string* name_on_card);
  private:
  const std::string& _internal_name_on_card() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_on_card(const std::string& value);
  std::string* _internal_mutable_name_on_card();
  public:

  // optional string last_four = 5;
  bool has_last_four() const;
  private:
  bool _internal_has_last_four() const;
  public:
  void clear_last_four();
  const std::string& last_four() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_four(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_four();
  PROTOBUF_NODISCARD std::string* release_last_four();
  void set_allocated_last_four(std::string* last_four);
  private:
  const std::string& _internal_last_four() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_four(const std::string& value);
  std::string* _internal_mutable_last_four();
  public:

  // optional string billing_address_id = 8;
  bool has_billing_address_id() const;
  private:
  bool _internal_has_billing_address_id() const;
  public:
  void clear_billing_address_id();
  const std::string& billing_address_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_billing_address_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_billing_address_id();
  PROTOBUF_NODISCARD std::string* release_billing_address_id();
  void set_allocated_billing_address_id(std::string* billing_address_id);
  private:
  const std::string& _internal_billing_address_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_billing_address_id(const std::string& value);
  std::string* _internal_mutable_billing_address_id();
  public:

  // optional string bank_name = 10;
  bool has_bank_name() const;
  private:
  bool _internal_has_bank_name() const;
  public:
  void clear_bank_name();
  const std::string& bank_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bank_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bank_name();
  PROTOBUF_NODISCARD std::string* release_bank_name();
  void set_allocated_bank_name(std::string* bank_name);
  private:
  const std::string& _internal_bank_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bank_name(const std::string& value);
  std::string* _internal_mutable_bank_name();
  public:

  // optional string nickname = 12;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // optional string card_art_url = 17;
  bool has_card_art_url() const;
  private:
  bool _internal_has_card_art_url() const;
  public:
  void clear_card_art_url();
  const std::string& card_art_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_art_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_art_url();
  PROTOBUF_NODISCARD std::string* release_card_art_url();
  void set_allocated_card_art_url(std::string* card_art_url);
  private:
  const std::string& _internal_card_art_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_art_url(const std::string& value);
  std::string* _internal_mutable_card_art_url();
  public:

  // optional string product_description = 18;
  bool has_product_description() const;
  private:
  bool _internal_has_product_description() const;
  public:
  void clear_product_description();
  const std::string& product_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product_description();
  PROTOBUF_NODISCARD std::string* release_product_description();
  void set_allocated_product_description(std::string* product_description);
  private:
  const std::string& _internal_product_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product_description(const std::string& value);
  std::string* _internal_mutable_product_description();
  public:

  // optional .sync_pb.CloudTokenData cloud_token_data = 11;
  bool has_cloud_token_data() const;
  private:
  bool _internal_has_cloud_token_data() const;
  public:
  void clear_cloud_token_data();
  const ::sync_pb::CloudTokenData& cloud_token_data() const;
  PROTOBUF_NODISCARD ::sync_pb::CloudTokenData* release_cloud_token_data();
  ::sync_pb::CloudTokenData* mutable_cloud_token_data();
  void set_allocated_cloud_token_data(::sync_pb::CloudTokenData* cloud_token_data);
  private:
  const ::sync_pb::CloudTokenData& _internal_cloud_token_data() const;
  ::sync_pb::CloudTokenData* _internal_mutable_cloud_token_data();
  public:
  void unsafe_arena_set_allocated_cloud_token_data(
      ::sync_pb::CloudTokenData* cloud_token_data);
  ::sync_pb::CloudTokenData* unsafe_arena_release_cloud_token_data();

  // optional .sync_pb.CardIssuer card_issuer = 13;
  bool has_card_issuer() const;
  private:
  bool _internal_has_card_issuer() const;
  public:
  void clear_card_issuer();
  const ::sync_pb::CardIssuer& card_issuer() const;
  PROTOBUF_NODISCARD ::sync_pb::CardIssuer* release_card_issuer();
  ::sync_pb::CardIssuer* mutable_card_issuer();
  void set_allocated_card_issuer(::sync_pb::CardIssuer* card_issuer);
  private:
  const ::sync_pb::CardIssuer& _internal_card_issuer() const;
  ::sync_pb::CardIssuer* _internal_mutable_card_issuer();
  public:
  void unsafe_arena_set_allocated_card_issuer(
      ::sync_pb::CardIssuer* card_issuer);
  ::sync_pb::CardIssuer* unsafe_arena_release_card_issuer();

  // optional .sync_pb.WalletMaskedCreditCard.WalletCardStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::sync_pb::WalletMaskedCreditCard_WalletCardStatus status() const;
  void set_status(::sync_pb::WalletMaskedCreditCard_WalletCardStatus value);
  private:
  ::sync_pb::WalletMaskedCreditCard_WalletCardStatus _internal_status() const;
  void _internal_set_status(::sync_pb::WalletMaskedCreditCard_WalletCardStatus value);
  public:

  // optional .sync_pb.WalletMaskedCreditCard.WalletCardType type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::sync_pb::WalletMaskedCreditCard_WalletCardType type() const;
  void set_type(::sync_pb::WalletMaskedCreditCard_WalletCardType value);
  private:
  ::sync_pb::WalletMaskedCreditCard_WalletCardType _internal_type() const;
  void _internal_set_type(::sync_pb::WalletMaskedCreditCard_WalletCardType value);
  public:

  // optional int32 exp_month = 6;
  bool has_exp_month() const;
  private:
  bool _internal_has_exp_month() const;
  public:
  void clear_exp_month();
  int32_t exp_month() const;
  void set_exp_month(int32_t value);
  private:
  int32_t _internal_exp_month() const;
  void _internal_set_exp_month(int32_t value);
  public:

  // optional int32 exp_year = 7;
  bool has_exp_year() const;
  private:
  bool _internal_has_exp_year() const;
  public:
  void clear_exp_year();
  int32_t exp_year() const;
  void set_exp_year(int32_t value);
  private:
  int32_t _internal_exp_year() const;
  void _internal_set_exp_year(int32_t value);
  public:

  // optional int64 instrument_id = 15;
  bool has_instrument_id() const;
  private:
  bool _internal_has_instrument_id() const;
  public:
  void clear_instrument_id();
  int64_t instrument_id() const;
  void set_instrument_id(int64_t value);
  private:
  int64_t _internal_instrument_id() const;
  void _internal_set_instrument_id(int64_t value);
  public:

  // optional .sync_pb.WalletMaskedCreditCard.VirtualCardEnrollmentState virtual_card_enrollment_state = 16;
  bool has_virtual_card_enrollment_state() const;
  private:
  bool _internal_has_virtual_card_enrollment_state() const;
  public:
  void clear_virtual_card_enrollment_state();
  ::sync_pb::WalletMaskedCreditCard_VirtualCardEnrollmentState virtual_card_enrollment_state() const;
  void set_virtual_card_enrollment_state(::sync_pb::WalletMaskedCreditCard_VirtualCardEnrollmentState value);
  private:
  ::sync_pb::WalletMaskedCreditCard_VirtualCardEnrollmentState _internal_virtual_card_enrollment_state() const;
  void _internal_set_virtual_card_enrollment_state(::sync_pb::WalletMaskedCreditCard_VirtualCardEnrollmentState value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.WalletMaskedCreditCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_on_card_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_four_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr billing_address_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_art_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_description_;
  ::sync_pb::CloudTokenData* cloud_token_data_;
  ::sync_pb::CardIssuer* card_issuer_;
  int status_;
  int type_;
  int32_t exp_month_;
  int32_t exp_year_;
  int64_t instrument_id_;
  int virtual_card_enrollment_state_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fautofill_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WalletPostalAddress final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WalletPostalAddress) */ {
 public:
  inline WalletPostalAddress() : WalletPostalAddress(nullptr) {}
  ~WalletPostalAddress() override;
  explicit PROTOBUF_CONSTEXPR WalletPostalAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WalletPostalAddress(const WalletPostalAddress& from);
  WalletPostalAddress(WalletPostalAddress&& from) noexcept
    : WalletPostalAddress() {
    *this = ::std::move(from);
  }

  inline WalletPostalAddress& operator=(const WalletPostalAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletPostalAddress& operator=(WalletPostalAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WalletPostalAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const WalletPostalAddress* internal_default_instance() {
    return reinterpret_cast<const WalletPostalAddress*>(
               &_WalletPostalAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WalletPostalAddress& a, WalletPostalAddress& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WalletPostalAddress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WalletPostalAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WalletPostalAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WalletPostalAddress>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WalletPostalAddress& from);
  void MergeFrom(const WalletPostalAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WalletPostalAddress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WalletPostalAddress";
  }
  protected:
  explicit WalletPostalAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreetAddressFieldNumber = 3,
    kIdFieldNumber = 1,
    kCompanyNameFieldNumber = 2,
    kAddress1FieldNumber = 4,
    kAddress2FieldNumber = 5,
    kAddress3FieldNumber = 6,
    kAddress4FieldNumber = 7,
    kPostalCodeFieldNumber = 8,
    kSortingCodeFieldNumber = 9,
    kCountryCodeFieldNumber = 10,
    kLanguageCodeFieldNumber = 11,
    kRecipientNameFieldNumber = 12,
    kPhoneNumberFieldNumber = 13,
  };
  // repeated string street_address = 3;
  int street_address_size() const;
  private:
  int _internal_street_address_size() const;
  public:
  void clear_street_address();
  const std::string& street_address(int index) const;
  std::string* mutable_street_address(int index);
  void set_street_address(int index, const std::string& value);
  void set_street_address(int index, std::string&& value);
  void set_street_address(int index, const char* value);
  void set_street_address(int index, const char* value, size_t size);
  std::string* add_street_address();
  void add_street_address(const std::string& value);
  void add_street_address(std::string&& value);
  void add_street_address(const char* value);
  void add_street_address(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& street_address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_street_address();
  private:
  const std::string& _internal_street_address(int index) const;
  std::string* _internal_add_street_address();
  public:

  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string company_name = 2;
  bool has_company_name() const;
  private:
  bool _internal_has_company_name() const;
  public:
  void clear_company_name();
  const std::string& company_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_company_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_company_name();
  PROTOBUF_NODISCARD std::string* release_company_name();
  void set_allocated_company_name(std::string* company_name);
  private:
  const std::string& _internal_company_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_company_name(const std::string& value);
  std::string* _internal_mutable_company_name();
  public:

  // optional string address_1 = 4;
  bool has_address_1() const;
  private:
  bool _internal_has_address_1() const;
  public:
  void clear_address_1();
  const std::string& address_1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_1();
  PROTOBUF_NODISCARD std::string* release_address_1();
  void set_allocated_address_1(std::string* address_1);
  private:
  const std::string& _internal_address_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_1(const std::string& value);
  std::string* _internal_mutable_address_1();
  public:

  // optional string address_2 = 5;
  bool has_address_2() const;
  private:
  bool _internal_has_address_2() const;
  public:
  void clear_address_2();
  const std::string& address_2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_2();
  PROTOBUF_NODISCARD std::string* release_address_2();
  void set_allocated_address_2(std::string* address_2);
  private:
  const std::string& _internal_address_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_2(const std::string& value);
  std::string* _internal_mutable_address_2();
  public:

  // optional string address_3 = 6;
  bool has_address_3() const;
  private:
  bool _internal_has_address_3() const;
  public:
  void clear_address_3();
  const std::string& address_3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_3();
  PROTOBUF_NODISCARD std::string* release_address_3();
  void set_allocated_address_3(std::string* address_3);
  private:
  const std::string& _internal_address_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_3(const std::string& value);
  std::string* _internal_mutable_address_3();
  public:

  // optional string address_4 = 7;
  bool has_address_4() const;
  private:
  bool _internal_has_address_4() const;
  public:
  void clear_address_4();
  const std::string& address_4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address_4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address_4();
  PROTOBUF_NODISCARD std::string* release_address_4();
  void set_allocated_address_4(std::string* address_4);
  private:
  const std::string& _internal_address_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_4(const std::string& value);
  std::string* _internal_mutable_address_4();
  public:

  // optional string postal_code = 8;
  bool has_postal_code() const;
  private:
  bool _internal_has_postal_code() const;
  public:
  void clear_postal_code();
  const std::string& postal_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_postal_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_postal_code();
  PROTOBUF_NODISCARD std::string* release_postal_code();
  void set_allocated_postal_code(std::string* postal_code);
  private:
  const std::string& _internal_postal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_postal_code(const std::string& value);
  std::string* _internal_mutable_postal_code();
  public:

  // optional string sorting_code = 9;
  bool has_sorting_code() const;
  private:
  bool _internal_has_sorting_code() const;
  public:
  void clear_sorting_code();
  const std::string& sorting_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sorting_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sorting_code();
  PROTOBUF_NODISCARD std::string* release_sorting_code();
  void set_allocated_sorting_code(std::string* sorting_code);
  private:
  const std::string& _internal_sorting_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sorting_code(const std::string& value);
  std::string* _internal_mutable_sorting_code();
  public:

  // optional string country_code = 10;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // optional string language_code = 11;
  bool has_language_code() const;
  private:
  bool _internal_has_language_code() const;
  public:
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // optional string recipient_name = 12;
  bool has_recipient_name() const;
  private:
  bool _internal_has_recipient_name() const;
  public:
  void clear_recipient_name();
  const std::string& recipient_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recipient_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recipient_name();
  PROTOBUF_NODISCARD std::string* release_recipient_name();
  void set_allocated_recipient_name(std::string* recipient_name);
  private:
  const std::string& _internal_recipient_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient_name(const std::string& value);
  std::string* _internal_mutable_recipient_name();
  public:

  // optional string phone_number = 13;
  bool has_phone_number() const;
  private:
  bool _internal_has_phone_number() const;
  public:
  void clear_phone_number();
  const std::string& phone_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phone_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phone_number();
  PROTOBUF_NODISCARD std::string* release_phone_number();
  void set_allocated_phone_number(std::string* phone_number);
  private:
  const std::string& _internal_phone_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone_number(const std::string& value);
  std::string* _internal_mutable_phone_number();
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.WalletPostalAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> street_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postal_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sorting_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_number_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fautofill_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class PaymentsCustomerData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.PaymentsCustomerData) */ {
 public:
  inline PaymentsCustomerData() : PaymentsCustomerData(nullptr) {}
  ~PaymentsCustomerData() override;
  explicit PROTOBUF_CONSTEXPR PaymentsCustomerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentsCustomerData(const PaymentsCustomerData& from);
  PaymentsCustomerData(PaymentsCustomerData&& from) noexcept
    : PaymentsCustomerData() {
    *this = ::std::move(from);
  }

  inline PaymentsCustomerData& operator=(const PaymentsCustomerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentsCustomerData& operator=(PaymentsCustomerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PaymentsCustomerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentsCustomerData* internal_default_instance() {
    return reinterpret_cast<const PaymentsCustomerData*>(
               &_PaymentsCustomerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PaymentsCustomerData& a, PaymentsCustomerData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PaymentsCustomerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentsCustomerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PaymentsCustomerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PaymentsCustomerData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PaymentsCustomerData& from);
  void MergeFrom(const PaymentsCustomerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PaymentsCustomerData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.PaymentsCustomerData";
  }
  protected:
  explicit PaymentsCustomerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.PaymentsCustomerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fautofill_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WalletCreditCardCloudTokenData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WalletCreditCardCloudTokenData) */ {
 public:
  inline WalletCreditCardCloudTokenData() : WalletCreditCardCloudTokenData(nullptr) {}
  ~WalletCreditCardCloudTokenData() override;
  explicit PROTOBUF_CONSTEXPR WalletCreditCardCloudTokenData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WalletCreditCardCloudTokenData(const WalletCreditCardCloudTokenData& from);
  WalletCreditCardCloudTokenData(WalletCreditCardCloudTokenData&& from) noexcept
    : WalletCreditCardCloudTokenData() {
    *this = ::std::move(from);
  }

  inline WalletCreditCardCloudTokenData& operator=(const WalletCreditCardCloudTokenData& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletCreditCardCloudTokenData& operator=(WalletCreditCardCloudTokenData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WalletCreditCardCloudTokenData& default_instance() {
    return *internal_default_instance();
  }
  static inline const WalletCreditCardCloudTokenData* internal_default_instance() {
    return reinterpret_cast<const WalletCreditCardCloudTokenData*>(
               &_WalletCreditCardCloudTokenData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WalletCreditCardCloudTokenData& a, WalletCreditCardCloudTokenData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WalletCreditCardCloudTokenData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WalletCreditCardCloudTokenData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WalletCreditCardCloudTokenData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WalletCreditCardCloudTokenData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WalletCreditCardCloudTokenData& from);
  void MergeFrom(const WalletCreditCardCloudTokenData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WalletCreditCardCloudTokenData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WalletCreditCardCloudTokenData";
  }
  protected:
  explicit WalletCreditCardCloudTokenData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaskedCardIdFieldNumber = 1,
    kSuffixFieldNumber = 2,
    kArtFifeUrlFieldNumber = 5,
    kInstrumentTokenFieldNumber = 6,
    kExpMonthFieldNumber = 3,
    kExpYearFieldNumber = 4,
  };
  // optional string masked_card_id = 1;
  bool has_masked_card_id() const;
  private:
  bool _internal_has_masked_card_id() const;
  public:
  void clear_masked_card_id();
  const std::string& masked_card_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_masked_card_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_masked_card_id();
  PROTOBUF_NODISCARD std::string* release_masked_card_id();
  void set_allocated_masked_card_id(std::string* masked_card_id);
  private:
  const std::string& _internal_masked_card_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_masked_card_id(const std::string& value);
  std::string* _internal_mutable_masked_card_id();
  public:

  // optional string suffix = 2;
  bool has_suffix() const;
  private:
  bool _internal_has_suffix() const;
  public:
  void clear_suffix();
  const std::string& suffix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_suffix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_suffix();
  PROTOBUF_NODISCARD std::string* release_suffix();
  void set_allocated_suffix(std::string* suffix);
  private:
  const std::string& _internal_suffix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_suffix(const std::string& value);
  std::string* _internal_mutable_suffix();
  public:

  // optional string art_fife_url = 5;
  bool has_art_fife_url() const;
  private:
  bool _internal_has_art_fife_url() const;
  public:
  void clear_art_fife_url();
  const std::string& art_fife_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_art_fife_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_art_fife_url();
  PROTOBUF_NODISCARD std::string* release_art_fife_url();
  void set_allocated_art_fife_url(std::string* art_fife_url);
  private:
  const std::string& _internal_art_fife_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_art_fife_url(const std::string& value);
  std::string* _internal_mutable_art_fife_url();
  public:

  // optional string instrument_token = 6;
  bool has_instrument_token() const;
  private:
  bool _internal_has_instrument_token() const;
  public:
  void clear_instrument_token();
  const std::string& instrument_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_token();
  PROTOBUF_NODISCARD std::string* release_instrument_token();
  void set_allocated_instrument_token(std::string* instrument_token);
  private:
  const std::string& _internal_instrument_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_token(const std::string& value);
  std::string* _internal_mutable_instrument_token();
  public:

  // optional int32 exp_month = 3;
  bool has_exp_month() const;
  private:
  bool _internal_has_exp_month() const;
  public:
  void clear_exp_month();
  int32_t exp_month() const;
  void set_exp_month(int32_t value);
  private:
  int32_t _internal_exp_month() const;
  void _internal_set_exp_month(int32_t value);
  public:

  // optional int32 exp_year = 4;
  bool has_exp_year() const;
  private:
  bool _internal_has_exp_year() const;
  public:
  void clear_exp_year();
  int32_t exp_year() const;
  void set_exp_year(int32_t value);
  private:
  int32_t _internal_exp_year() const;
  void _internal_set_exp_year(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.WalletCreditCardCloudTokenData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr masked_card_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suffix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr art_fife_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_token_;
  int32_t exp_month_;
  int32_t exp_year_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fautofill_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class AutofillWalletSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AutofillWalletSpecifics) */ {
 public:
  inline AutofillWalletSpecifics() : AutofillWalletSpecifics(nullptr) {}
  ~AutofillWalletSpecifics() override;
  explicit PROTOBUF_CONSTEXPR AutofillWalletSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillWalletSpecifics(const AutofillWalletSpecifics& from);
  AutofillWalletSpecifics(AutofillWalletSpecifics&& from) noexcept
    : AutofillWalletSpecifics() {
    *this = ::std::move(from);
  }

  inline AutofillWalletSpecifics& operator=(const AutofillWalletSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillWalletSpecifics& operator=(AutofillWalletSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutofillWalletSpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutofillWalletSpecifics* internal_default_instance() {
    return reinterpret_cast<const AutofillWalletSpecifics*>(
               &_AutofillWalletSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AutofillWalletSpecifics& a, AutofillWalletSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AutofillWalletSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillWalletSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutofillWalletSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutofillWalletSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AutofillWalletSpecifics& from);
  void MergeFrom(const AutofillWalletSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillWalletSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AutofillWalletSpecifics";
  }
  protected:
  explicit AutofillWalletSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AutofillWalletSpecifics_WalletInfoType WalletInfoType;
  static constexpr WalletInfoType UNKNOWN =
    AutofillWalletSpecifics_WalletInfoType_UNKNOWN;
  static constexpr WalletInfoType MASKED_CREDIT_CARD =
    AutofillWalletSpecifics_WalletInfoType_MASKED_CREDIT_CARD;
  static constexpr WalletInfoType POSTAL_ADDRESS =
    AutofillWalletSpecifics_WalletInfoType_POSTAL_ADDRESS;
  static constexpr WalletInfoType CUSTOMER_DATA =
    AutofillWalletSpecifics_WalletInfoType_CUSTOMER_DATA;
  static constexpr WalletInfoType CREDIT_CARD_CLOUD_TOKEN_DATA =
    AutofillWalletSpecifics_WalletInfoType_CREDIT_CARD_CLOUD_TOKEN_DATA;
  static inline bool WalletInfoType_IsValid(int value) {
    return AutofillWalletSpecifics_WalletInfoType_IsValid(value);
  }
  static constexpr WalletInfoType WalletInfoType_MIN =
    AutofillWalletSpecifics_WalletInfoType_WalletInfoType_MIN;
  static constexpr WalletInfoType WalletInfoType_MAX =
    AutofillWalletSpecifics_WalletInfoType_WalletInfoType_MAX;
  static constexpr int WalletInfoType_ARRAYSIZE =
    AutofillWalletSpecifics_WalletInfoType_WalletInfoType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& WalletInfoType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WalletInfoType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WalletInfoType_Name.");
    return AutofillWalletSpecifics_WalletInfoType_Name(enum_t_value);
  }
  static inline bool WalletInfoType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WalletInfoType* value) {
    return AutofillWalletSpecifics_WalletInfoType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMaskedCardFieldNumber = 2,
    kAddressFieldNumber = 3,
    kCustomerDataFieldNumber = 4,
    kCloudTokenDataFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // optional .sync_pb.WalletMaskedCreditCard masked_card = 2;
  bool has_masked_card() const;
  private:
  bool _internal_has_masked_card() const;
  public:
  void clear_masked_card();
  const ::sync_pb::WalletMaskedCreditCard& masked_card() const;
  PROTOBUF_NODISCARD ::sync_pb::WalletMaskedCreditCard* release_masked_card();
  ::sync_pb::WalletMaskedCreditCard* mutable_masked_card();
  void set_allocated_masked_card(::sync_pb::WalletMaskedCreditCard* masked_card);
  private:
  const ::sync_pb::WalletMaskedCreditCard& _internal_masked_card() const;
  ::sync_pb::WalletMaskedCreditCard* _internal_mutable_masked_card();
  public:
  void unsafe_arena_set_allocated_masked_card(
      ::sync_pb::WalletMaskedCreditCard* masked_card);
  ::sync_pb::WalletMaskedCreditCard* unsafe_arena_release_masked_card();

  // optional .sync_pb.WalletPostalAddress address = 3;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::sync_pb::WalletPostalAddress& address() const;
  PROTOBUF_NODISCARD ::sync_pb::WalletPostalAddress* release_address();
  ::sync_pb::WalletPostalAddress* mutable_address();
  void set_allocated_address(::sync_pb::WalletPostalAddress* address);
  private:
  const ::sync_pb::WalletPostalAddress& _internal_address() const;
  ::sync_pb::WalletPostalAddress* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::sync_pb::WalletPostalAddress* address);
  ::sync_pb::WalletPostalAddress* unsafe_arena_release_address();

  // optional .sync_pb.PaymentsCustomerData customer_data = 4;
  bool has_customer_data() const;
  private:
  bool _internal_has_customer_data() const;
  public:
  void clear_customer_data();
  const ::sync_pb::PaymentsCustomerData& customer_data() const;
  PROTOBUF_NODISCARD ::sync_pb::PaymentsCustomerData* release_customer_data();
  ::sync_pb::PaymentsCustomerData* mutable_customer_data();
  void set_allocated_customer_data(::sync_pb::PaymentsCustomerData* customer_data);
  private:
  const ::sync_pb::PaymentsCustomerData& _internal_customer_data() const;
  ::sync_pb::PaymentsCustomerData* _internal_mutable_customer_data();
  public:
  void unsafe_arena_set_allocated_customer_data(
      ::sync_pb::PaymentsCustomerData* customer_data);
  ::sync_pb::PaymentsCustomerData* unsafe_arena_release_customer_data();

  // optional .sync_pb.WalletCreditCardCloudTokenData cloud_token_data = 5;
  bool has_cloud_token_data() const;
  private:
  bool _internal_has_cloud_token_data() const;
  public:
  void clear_cloud_token_data();
  const ::sync_pb::WalletCreditCardCloudTokenData& cloud_token_data() const;
  PROTOBUF_NODISCARD ::sync_pb::WalletCreditCardCloudTokenData* release_cloud_token_data();
  ::sync_pb::WalletCreditCardCloudTokenData* mutable_cloud_token_data();
  void set_allocated_cloud_token_data(::sync_pb::WalletCreditCardCloudTokenData* cloud_token_data);
  private:
  const ::sync_pb::WalletCreditCardCloudTokenData& _internal_cloud_token_data() const;
  ::sync_pb::WalletCreditCardCloudTokenData* _internal_mutable_cloud_token_data();
  public:
  void unsafe_arena_set_allocated_cloud_token_data(
      ::sync_pb::WalletCreditCardCloudTokenData* cloud_token_data);
  ::sync_pb::WalletCreditCardCloudTokenData* unsafe_arena_release_cloud_token_data();

  // optional .sync_pb.AutofillWalletSpecifics.WalletInfoType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::sync_pb::AutofillWalletSpecifics_WalletInfoType type() const;
  void set_type(::sync_pb::AutofillWalletSpecifics_WalletInfoType value);
  private:
  ::sync_pb::AutofillWalletSpecifics_WalletInfoType _internal_type() const;
  void _internal_set_type(::sync_pb::AutofillWalletSpecifics_WalletInfoType value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.AutofillWalletSpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sync_pb::WalletMaskedCreditCard* masked_card_;
  ::sync_pb::WalletPostalAddress* address_;
  ::sync_pb::PaymentsCustomerData* customer_data_;
  ::sync_pb::WalletCreditCardCloudTokenData* cloud_token_data_;
  int type_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fautofill_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WalletMetadataSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WalletMetadataSpecifics) */ {
 public:
  inline WalletMetadataSpecifics() : WalletMetadataSpecifics(nullptr) {}
  ~WalletMetadataSpecifics() override;
  explicit PROTOBUF_CONSTEXPR WalletMetadataSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WalletMetadataSpecifics(const WalletMetadataSpecifics& from);
  WalletMetadataSpecifics(WalletMetadataSpecifics&& from) noexcept
    : WalletMetadataSpecifics() {
    *this = ::std::move(from);
  }

  inline WalletMetadataSpecifics& operator=(const WalletMetadataSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletMetadataSpecifics& operator=(WalletMetadataSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WalletMetadataSpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const WalletMetadataSpecifics* internal_default_instance() {
    return reinterpret_cast<const WalletMetadataSpecifics*>(
               &_WalletMetadataSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(WalletMetadataSpecifics& a, WalletMetadataSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WalletMetadataSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WalletMetadataSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WalletMetadataSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WalletMetadataSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WalletMetadataSpecifics& from);
  void MergeFrom(const WalletMetadataSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WalletMetadataSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WalletMetadataSpecifics";
  }
  protected:
  explicit WalletMetadataSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WalletMetadataSpecifics_Type Type;
  static constexpr Type UNKNOWN =
    WalletMetadataSpecifics_Type_UNKNOWN;
  static constexpr Type CARD =
    WalletMetadataSpecifics_Type_CARD;
  static constexpr Type ADDRESS =
    WalletMetadataSpecifics_Type_ADDRESS;
  static inline bool Type_IsValid(int value) {
    return WalletMetadataSpecifics_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    WalletMetadataSpecifics_Type_Type_MIN;
  static constexpr Type Type_MAX =
    WalletMetadataSpecifics_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    WalletMetadataSpecifics_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return WalletMetadataSpecifics_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return WalletMetadataSpecifics_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kCardBillingAddressIdFieldNumber = 5,
    kUseCountFieldNumber = 3,
    kTypeFieldNumber = 1,
    kAddressHasConvertedFieldNumber = 6,
    kUseDateFieldNumber = 4,
  };
  // optional string id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string card_billing_address_id = 5;
  bool has_card_billing_address_id() const;
  private:
  bool _internal_has_card_billing_address_id() const;
  public:
  void clear_card_billing_address_id();
  const std::string& card_billing_address_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_billing_address_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_billing_address_id();
  PROTOBUF_NODISCARD std::string* release_card_billing_address_id();
  void set_allocated_card_billing_address_id(std::string* card_billing_address_id);
  private:
  const std::string& _internal_card_billing_address_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_billing_address_id(const std::string& value);
  std::string* _internal_mutable_card_billing_address_id();
  public:

  // optional int64 use_count = 3;
  bool has_use_count() const;
  private:
  bool _internal_has_use_count() const;
  public:
  void clear_use_count();
  int64_t use_count() const;
  void set_use_count(int64_t value);
  private:
  int64_t _internal_use_count() const;
  void _internal_set_use_count(int64_t value);
  public:

  // optional .sync_pb.WalletMetadataSpecifics.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::sync_pb::WalletMetadataSpecifics_Type type() const;
  void set_type(::sync_pb::WalletMetadataSpecifics_Type value);
  private:
  ::sync_pb::WalletMetadataSpecifics_Type _internal_type() const;
  void _internal_set_type(::sync_pb::WalletMetadataSpecifics_Type value);
  public:

  // optional bool address_has_converted = 6;
  bool has_address_has_converted() const;
  private:
  bool _internal_has_address_has_converted() const;
  public:
  void clear_address_has_converted();
  bool address_has_converted() const;
  void set_address_has_converted(bool value);
  private:
  bool _internal_address_has_converted() const;
  void _internal_set_address_has_converted(bool value);
  public:

  // optional int64 use_date = 4;
  bool has_use_date() const;
  private:
  bool _internal_has_use_date() const;
  public:
  void clear_use_date();
  int64_t use_date() const;
  void set_use_date(int64_t value);
  private:
  int64_t _internal_use_date() const;
  void _internal_set_use_date(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.WalletMetadataSpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_billing_address_id_;
  int64_t use_count_;
  int type_;
  bool address_has_converted_;
  int64_t use_date_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fautofill_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AutofillProfileSpecifics

// optional string guid = 15;
inline bool AutofillProfileSpecifics::_internal_has_guid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_guid() const {
  return _internal_has_guid();
}
inline void AutofillProfileSpecifics::clear_guid() {
  guid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& AutofillProfileSpecifics::guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.guid)
  return _internal_guid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_guid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000200u;
 guid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.guid)
}
inline std::string* AutofillProfileSpecifics::mutable_guid() {
  std::string* _s = _internal_mutable_guid();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.guid)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_guid() const {
  return guid_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  guid_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_guid() {
  _has_bits_[0] |= 0x00000200u;
  return guid_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.guid)
  if (!_internal_has_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  auto* p = guid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault()) {
    guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  guid_.SetAllocated(guid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault()) {
    guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.guid)
}

// optional string origin = 16;
inline bool AutofillProfileSpecifics::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_origin() const {
  return _internal_has_origin();
}
inline void AutofillProfileSpecifics::clear_origin() {
  origin_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& AutofillProfileSpecifics::origin() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.origin)
  return _internal_origin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_origin(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000400u;
 origin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.origin)
}
inline std::string* AutofillProfileSpecifics::mutable_origin() {
  std::string* _s = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.origin)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_origin() const {
  return origin_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_origin(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  origin_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_origin() {
  _has_bits_[0] |= 0x00000400u;
  return origin_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_origin() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.origin)
  if (!_internal_has_origin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  auto* p = origin_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (origin_.IsDefault()) {
    origin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_origin(std::string* origin) {
  if (origin != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  origin_.SetAllocated(origin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (origin_.IsDefault()) {
    origin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.origin)
}

// optional int64 use_count = 22;
inline bool AutofillProfileSpecifics::_internal_has_use_count() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_use_count() const {
  return _internal_has_use_count();
}
inline void AutofillProfileSpecifics::clear_use_count() {
  use_count_ = int64_t{0};
  _has_bits_[0] &= ~0x00800000u;
}
inline int64_t AutofillProfileSpecifics::_internal_use_count() const {
  return use_count_;
}
inline int64_t AutofillProfileSpecifics::use_count() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.use_count)
  return _internal_use_count();
}
inline void AutofillProfileSpecifics::_internal_set_use_count(int64_t value) {
  _has_bits_[0] |= 0x00800000u;
  use_count_ = value;
}
inline void AutofillProfileSpecifics::set_use_count(int64_t value) {
  _internal_set_use_count(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.use_count)
}

// optional int64 use_date = 23;
inline bool AutofillProfileSpecifics::_internal_has_use_date() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_use_date() const {
  return _internal_has_use_date();
}
inline void AutofillProfileSpecifics::clear_use_date() {
  use_date_ = int64_t{0};
  _has_bits_[0] &= ~0x01000000u;
}
inline int64_t AutofillProfileSpecifics::_internal_use_date() const {
  return use_date_;
}
inline int64_t AutofillProfileSpecifics::use_date() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.use_date)
  return _internal_use_date();
}
inline void AutofillProfileSpecifics::_internal_set_use_date(int64_t value) {
  _has_bits_[0] |= 0x01000000u;
  use_date_ = value;
}
inline void AutofillProfileSpecifics::set_use_date(int64_t value) {
  _internal_set_use_date(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.use_date)
}

// optional string profile_label = 62;
inline bool AutofillProfileSpecifics::_internal_has_profile_label() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_profile_label() const {
  return _internal_has_profile_label();
}
inline void AutofillProfileSpecifics::clear_profile_label() {
  profile_label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00400000u;
}
inline const std::string& AutofillProfileSpecifics::profile_label() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.profile_label)
  return _internal_profile_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_profile_label(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00400000u;
 profile_label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.profile_label)
}
inline std::string* AutofillProfileSpecifics::mutable_profile_label() {
  std::string* _s = _internal_mutable_profile_label();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.profile_label)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_profile_label() const {
  return profile_label_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_profile_label(const std::string& value) {
  _has_bits_[0] |= 0x00400000u;
  profile_label_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_profile_label() {
  _has_bits_[0] |= 0x00400000u;
  return profile_label_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_profile_label() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.profile_label)
  if (!_internal_has_profile_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00400000u;
  auto* p = profile_label_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_label_.IsDefault()) {
    profile_label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_profile_label(std::string* profile_label) {
  if (profile_label != nullptr) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  profile_label_.SetAllocated(profile_label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_label_.IsDefault()) {
    profile_label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.profile_label)
}

// repeated string name_honorific = 26;
inline int AutofillProfileSpecifics::_internal_name_honorific_size() const {
  return name_honorific_.size();
}
inline int AutofillProfileSpecifics::name_honorific_size() const {
  return _internal_name_honorific_size();
}
inline void AutofillProfileSpecifics::clear_name_honorific() {
  name_honorific_.Clear();
}
inline std::string* AutofillProfileSpecifics::add_name_honorific() {
  std::string* _s = _internal_add_name_honorific();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.AutofillProfileSpecifics.name_honorific)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_name_honorific(int index) const {
  return name_honorific_.Get(index);
}
inline const std::string& AutofillProfileSpecifics::name_honorific(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_honorific)
  return _internal_name_honorific(index);
}
inline std::string* AutofillProfileSpecifics::mutable_name_honorific(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.name_honorific)
  return name_honorific_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_name_honorific(int index, const std::string& value) {
  name_honorific_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_honorific)
}
inline void AutofillProfileSpecifics::set_name_honorific(int index, std::string&& value) {
  name_honorific_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_honorific)
}
inline void AutofillProfileSpecifics::set_name_honorific(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_honorific_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.name_honorific)
}
inline void AutofillProfileSpecifics::set_name_honorific(int index, const char* value, size_t size) {
  name_honorific_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.name_honorific)
}
inline std::string* AutofillProfileSpecifics::_internal_add_name_honorific() {
  return name_honorific_.Add();
}
inline void AutofillProfileSpecifics::add_name_honorific(const std::string& value) {
  name_honorific_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_honorific)
}
inline void AutofillProfileSpecifics::add_name_honorific(std::string&& value) {
  name_honorific_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_honorific)
}
inline void AutofillProfileSpecifics::add_name_honorific(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_honorific_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.AutofillProfileSpecifics.name_honorific)
}
inline void AutofillProfileSpecifics::add_name_honorific(const char* value, size_t size) {
  name_honorific_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.AutofillProfileSpecifics.name_honorific)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AutofillProfileSpecifics::name_honorific() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_honorific)
  return name_honorific_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AutofillProfileSpecifics::mutable_name_honorific() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_honorific)
  return &name_honorific_;
}

// repeated string name_first = 2;
inline int AutofillProfileSpecifics::_internal_name_first_size() const {
  return name_first_.size();
}
inline int AutofillProfileSpecifics::name_first_size() const {
  return _internal_name_first_size();
}
inline void AutofillProfileSpecifics::clear_name_first() {
  name_first_.Clear();
}
inline std::string* AutofillProfileSpecifics::add_name_first() {
  std::string* _s = _internal_add_name_first();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.AutofillProfileSpecifics.name_first)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_name_first(int index) const {
  return name_first_.Get(index);
}
inline const std::string& AutofillProfileSpecifics::name_first(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_first)
  return _internal_name_first(index);
}
inline std::string* AutofillProfileSpecifics::mutable_name_first(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.name_first)
  return name_first_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_name_first(int index, const std::string& value) {
  name_first_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_first)
}
inline void AutofillProfileSpecifics::set_name_first(int index, std::string&& value) {
  name_first_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_first)
}
inline void AutofillProfileSpecifics::set_name_first(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_first_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.name_first)
}
inline void AutofillProfileSpecifics::set_name_first(int index, const char* value, size_t size) {
  name_first_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.name_first)
}
inline std::string* AutofillProfileSpecifics::_internal_add_name_first() {
  return name_first_.Add();
}
inline void AutofillProfileSpecifics::add_name_first(const std::string& value) {
  name_first_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_first)
}
inline void AutofillProfileSpecifics::add_name_first(std::string&& value) {
  name_first_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_first)
}
inline void AutofillProfileSpecifics::add_name_first(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_first_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.AutofillProfileSpecifics.name_first)
}
inline void AutofillProfileSpecifics::add_name_first(const char* value, size_t size) {
  name_first_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.AutofillProfileSpecifics.name_first)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AutofillProfileSpecifics::name_first() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_first)
  return name_first_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AutofillProfileSpecifics::mutable_name_first() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_first)
  return &name_first_;
}

// repeated string name_middle = 3;
inline int AutofillProfileSpecifics::_internal_name_middle_size() const {
  return name_middle_.size();
}
inline int AutofillProfileSpecifics::name_middle_size() const {
  return _internal_name_middle_size();
}
inline void AutofillProfileSpecifics::clear_name_middle() {
  name_middle_.Clear();
}
inline std::string* AutofillProfileSpecifics::add_name_middle() {
  std::string* _s = _internal_add_name_middle();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.AutofillProfileSpecifics.name_middle)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_name_middle(int index) const {
  return name_middle_.Get(index);
}
inline const std::string& AutofillProfileSpecifics::name_middle(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_middle)
  return _internal_name_middle(index);
}
inline std::string* AutofillProfileSpecifics::mutable_name_middle(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.name_middle)
  return name_middle_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_name_middle(int index, const std::string& value) {
  name_middle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_middle)
}
inline void AutofillProfileSpecifics::set_name_middle(int index, std::string&& value) {
  name_middle_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_middle)
}
inline void AutofillProfileSpecifics::set_name_middle(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_middle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.name_middle)
}
inline void AutofillProfileSpecifics::set_name_middle(int index, const char* value, size_t size) {
  name_middle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.name_middle)
}
inline std::string* AutofillProfileSpecifics::_internal_add_name_middle() {
  return name_middle_.Add();
}
inline void AutofillProfileSpecifics::add_name_middle(const std::string& value) {
  name_middle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_middle)
}
inline void AutofillProfileSpecifics::add_name_middle(std::string&& value) {
  name_middle_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_middle)
}
inline void AutofillProfileSpecifics::add_name_middle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_middle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.AutofillProfileSpecifics.name_middle)
}
inline void AutofillProfileSpecifics::add_name_middle(const char* value, size_t size) {
  name_middle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.AutofillProfileSpecifics.name_middle)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AutofillProfileSpecifics::name_middle() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_middle)
  return name_middle_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AutofillProfileSpecifics::mutable_name_middle() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_middle)
  return &name_middle_;
}

// repeated string name_last = 4;
inline int AutofillProfileSpecifics::_internal_name_last_size() const {
  return name_last_.size();
}
inline int AutofillProfileSpecifics::name_last_size() const {
  return _internal_name_last_size();
}
inline void AutofillProfileSpecifics::clear_name_last() {
  name_last_.Clear();
}
inline std::string* AutofillProfileSpecifics::add_name_last() {
  std::string* _s = _internal_add_name_last();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.AutofillProfileSpecifics.name_last)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_name_last(int index) const {
  return name_last_.Get(index);
}
inline const std::string& AutofillProfileSpecifics::name_last(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_last)
  return _internal_name_last(index);
}
inline std::string* AutofillProfileSpecifics::mutable_name_last(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.name_last)
  return name_last_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_name_last(int index, const std::string& value) {
  name_last_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_last)
}
inline void AutofillProfileSpecifics::set_name_last(int index, std::string&& value) {
  name_last_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_last)
}
inline void AutofillProfileSpecifics::set_name_last(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_last_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.name_last)
}
inline void AutofillProfileSpecifics::set_name_last(int index, const char* value, size_t size) {
  name_last_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.name_last)
}
inline std::string* AutofillProfileSpecifics::_internal_add_name_last() {
  return name_last_.Add();
}
inline void AutofillProfileSpecifics::add_name_last(const std::string& value) {
  name_last_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_last)
}
inline void AutofillProfileSpecifics::add_name_last(std::string&& value) {
  name_last_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_last)
}
inline void AutofillProfileSpecifics::add_name_last(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_last_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.AutofillProfileSpecifics.name_last)
}
inline void AutofillProfileSpecifics::add_name_last(const char* value, size_t size) {
  name_last_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.AutofillProfileSpecifics.name_last)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AutofillProfileSpecifics::name_last() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_last)
  return name_last_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AutofillProfileSpecifics::mutable_name_last() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_last)
  return &name_last_;
}

// repeated string name_last_first = 27;
inline int AutofillProfileSpecifics::_internal_name_last_first_size() const {
  return name_last_first_.size();
}
inline int AutofillProfileSpecifics::name_last_first_size() const {
  return _internal_name_last_first_size();
}
inline void AutofillProfileSpecifics::clear_name_last_first() {
  name_last_first_.Clear();
}
inline std::string* AutofillProfileSpecifics::add_name_last_first() {
  std::string* _s = _internal_add_name_last_first();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.AutofillProfileSpecifics.name_last_first)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_name_last_first(int index) const {
  return name_last_first_.Get(index);
}
inline const std::string& AutofillProfileSpecifics::name_last_first(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_last_first)
  return _internal_name_last_first(index);
}
inline std::string* AutofillProfileSpecifics::mutable_name_last_first(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.name_last_first)
  return name_last_first_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_name_last_first(int index, const std::string& value) {
  name_last_first_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_last_first)
}
inline void AutofillProfileSpecifics::set_name_last_first(int index, std::string&& value) {
  name_last_first_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_last_first)
}
inline void AutofillProfileSpecifics::set_name_last_first(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_last_first_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.name_last_first)
}
inline void AutofillProfileSpecifics::set_name_last_first(int index, const char* value, size_t size) {
  name_last_first_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.name_last_first)
}
inline std::string* AutofillProfileSpecifics::_internal_add_name_last_first() {
  return name_last_first_.Add();
}
inline void AutofillProfileSpecifics::add_name_last_first(const std::string& value) {
  name_last_first_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_last_first)
}
inline void AutofillProfileSpecifics::add_name_last_first(std::string&& value) {
  name_last_first_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_last_first)
}
inline void AutofillProfileSpecifics::add_name_last_first(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_last_first_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.AutofillProfileSpecifics.name_last_first)
}
inline void AutofillProfileSpecifics::add_name_last_first(const char* value, size_t size) {
  name_last_first_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.AutofillProfileSpecifics.name_last_first)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AutofillProfileSpecifics::name_last_first() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_last_first)
  return name_last_first_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AutofillProfileSpecifics::mutable_name_last_first() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_last_first)
  return &name_last_first_;
}

// repeated string name_last_conjunction = 28;
inline int AutofillProfileSpecifics::_internal_name_last_conjunction_size() const {
  return name_last_conjunction_.size();
}
inline int AutofillProfileSpecifics::name_last_conjunction_size() const {
  return _internal_name_last_conjunction_size();
}
inline void AutofillProfileSpecifics::clear_name_last_conjunction() {
  name_last_conjunction_.Clear();
}
inline std::string* AutofillProfileSpecifics::add_name_last_conjunction() {
  std::string* _s = _internal_add_name_last_conjunction();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.AutofillProfileSpecifics.name_last_conjunction)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_name_last_conjunction(int index) const {
  return name_last_conjunction_.Get(index);
}
inline const std::string& AutofillProfileSpecifics::name_last_conjunction(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_last_conjunction)
  return _internal_name_last_conjunction(index);
}
inline std::string* AutofillProfileSpecifics::mutable_name_last_conjunction(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.name_last_conjunction)
  return name_last_conjunction_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_name_last_conjunction(int index, const std::string& value) {
  name_last_conjunction_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_last_conjunction)
}
inline void AutofillProfileSpecifics::set_name_last_conjunction(int index, std::string&& value) {
  name_last_conjunction_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_last_conjunction)
}
inline void AutofillProfileSpecifics::set_name_last_conjunction(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_last_conjunction_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.name_last_conjunction)
}
inline void AutofillProfileSpecifics::set_name_last_conjunction(int index, const char* value, size_t size) {
  name_last_conjunction_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.name_last_conjunction)
}
inline std::string* AutofillProfileSpecifics::_internal_add_name_last_conjunction() {
  return name_last_conjunction_.Add();
}
inline void AutofillProfileSpecifics::add_name_last_conjunction(const std::string& value) {
  name_last_conjunction_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_last_conjunction)
}
inline void AutofillProfileSpecifics::add_name_last_conjunction(std::string&& value) {
  name_last_conjunction_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_last_conjunction)
}
inline void AutofillProfileSpecifics::add_name_last_conjunction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_last_conjunction_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.AutofillProfileSpecifics.name_last_conjunction)
}
inline void AutofillProfileSpecifics::add_name_last_conjunction(const char* value, size_t size) {
  name_last_conjunction_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.AutofillProfileSpecifics.name_last_conjunction)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AutofillProfileSpecifics::name_last_conjunction() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_last_conjunction)
  return name_last_conjunction_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AutofillProfileSpecifics::mutable_name_last_conjunction() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_last_conjunction)
  return &name_last_conjunction_;
}

// repeated string name_last_second = 29;
inline int AutofillProfileSpecifics::_internal_name_last_second_size() const {
  return name_last_second_.size();
}
inline int AutofillProfileSpecifics::name_last_second_size() const {
  return _internal_name_last_second_size();
}
inline void AutofillProfileSpecifics::clear_name_last_second() {
  name_last_second_.Clear();
}
inline std::string* AutofillProfileSpecifics::add_name_last_second() {
  std::string* _s = _internal_add_name_last_second();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.AutofillProfileSpecifics.name_last_second)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_name_last_second(int index) const {
  return name_last_second_.Get(index);
}
inline const std::string& AutofillProfileSpecifics::name_last_second(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_last_second)
  return _internal_name_last_second(index);
}
inline std::string* AutofillProfileSpecifics::mutable_name_last_second(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.name_last_second)
  return name_last_second_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_name_last_second(int index, const std::string& value) {
  name_last_second_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_last_second)
}
inline void AutofillProfileSpecifics::set_name_last_second(int index, std::string&& value) {
  name_last_second_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_last_second)
}
inline void AutofillProfileSpecifics::set_name_last_second(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_last_second_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.name_last_second)
}
inline void AutofillProfileSpecifics::set_name_last_second(int index, const char* value, size_t size) {
  name_last_second_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.name_last_second)
}
inline std::string* AutofillProfileSpecifics::_internal_add_name_last_second() {
  return name_last_second_.Add();
}
inline void AutofillProfileSpecifics::add_name_last_second(const std::string& value) {
  name_last_second_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_last_second)
}
inline void AutofillProfileSpecifics::add_name_last_second(std::string&& value) {
  name_last_second_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_last_second)
}
inline void AutofillProfileSpecifics::add_name_last_second(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_last_second_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.AutofillProfileSpecifics.name_last_second)
}
inline void AutofillProfileSpecifics::add_name_last_second(const char* value, size_t size) {
  name_last_second_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.AutofillProfileSpecifics.name_last_second)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AutofillProfileSpecifics::name_last_second() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_last_second)
  return name_last_second_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AutofillProfileSpecifics::mutable_name_last_second() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_last_second)
  return &name_last_second_;
}

// repeated string name_full = 21;
inline int AutofillProfileSpecifics::_internal_name_full_size() const {
  return name_full_.size();
}
inline int AutofillProfileSpecifics::name_full_size() const {
  return _internal_name_full_size();
}
inline void AutofillProfileSpecifics::clear_name_full() {
  name_full_.Clear();
}
inline std::string* AutofillProfileSpecifics::add_name_full() {
  std::string* _s = _internal_add_name_full();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.AutofillProfileSpecifics.name_full)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_name_full(int index) const {
  return name_full_.Get(index);
}
inline const std::string& AutofillProfileSpecifics::name_full(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_full)
  return _internal_name_full(index);
}
inline std::string* AutofillProfileSpecifics::mutable_name_full(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.name_full)
  return name_full_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_name_full(int index, const std::string& value) {
  name_full_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_full)
}
inline void AutofillProfileSpecifics::set_name_full(int index, std::string&& value) {
  name_full_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_full)
}
inline void AutofillProfileSpecifics::set_name_full(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_full_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.name_full)
}
inline void AutofillProfileSpecifics::set_name_full(int index, const char* value, size_t size) {
  name_full_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.name_full)
}
inline std::string* AutofillProfileSpecifics::_internal_add_name_full() {
  return name_full_.Add();
}
inline void AutofillProfileSpecifics::add_name_full(const std::string& value) {
  name_full_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_full)
}
inline void AutofillProfileSpecifics::add_name_full(std::string&& value) {
  name_full_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_full)
}
inline void AutofillProfileSpecifics::add_name_full(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_full_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.AutofillProfileSpecifics.name_full)
}
inline void AutofillProfileSpecifics::add_name_full(const char* value, size_t size) {
  name_full_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.AutofillProfileSpecifics.name_full)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AutofillProfileSpecifics::name_full() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_full)
  return name_full_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AutofillProfileSpecifics::mutable_name_full() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_full)
  return &name_full_;
}

// repeated string name_full_with_honorific = 60;
inline int AutofillProfileSpecifics::_internal_name_full_with_honorific_size() const {
  return name_full_with_honorific_.size();
}
inline int AutofillProfileSpecifics::name_full_with_honorific_size() const {
  return _internal_name_full_with_honorific_size();
}
inline void AutofillProfileSpecifics::clear_name_full_with_honorific() {
  name_full_with_honorific_.Clear();
}
inline std::string* AutofillProfileSpecifics::add_name_full_with_honorific() {
  std::string* _s = _internal_add_name_full_with_honorific();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.AutofillProfileSpecifics.name_full_with_honorific)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_name_full_with_honorific(int index) const {
  return name_full_with_honorific_.Get(index);
}
inline const std::string& AutofillProfileSpecifics::name_full_with_honorific(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_full_with_honorific)
  return _internal_name_full_with_honorific(index);
}
inline std::string* AutofillProfileSpecifics::mutable_name_full_with_honorific(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.name_full_with_honorific)
  return name_full_with_honorific_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_name_full_with_honorific(int index, const std::string& value) {
  name_full_with_honorific_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_full_with_honorific)
}
inline void AutofillProfileSpecifics::set_name_full_with_honorific(int index, std::string&& value) {
  name_full_with_honorific_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_full_with_honorific)
}
inline void AutofillProfileSpecifics::set_name_full_with_honorific(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_full_with_honorific_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.name_full_with_honorific)
}
inline void AutofillProfileSpecifics::set_name_full_with_honorific(int index, const char* value, size_t size) {
  name_full_with_honorific_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.name_full_with_honorific)
}
inline std::string* AutofillProfileSpecifics::_internal_add_name_full_with_honorific() {
  return name_full_with_honorific_.Add();
}
inline void AutofillProfileSpecifics::add_name_full_with_honorific(const std::string& value) {
  name_full_with_honorific_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_full_with_honorific)
}
inline void AutofillProfileSpecifics::add_name_full_with_honorific(std::string&& value) {
  name_full_with_honorific_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_full_with_honorific)
}
inline void AutofillProfileSpecifics::add_name_full_with_honorific(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_full_with_honorific_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.AutofillProfileSpecifics.name_full_with_honorific)
}
inline void AutofillProfileSpecifics::add_name_full_with_honorific(const char* value, size_t size) {
  name_full_with_honorific_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.AutofillProfileSpecifics.name_full_with_honorific)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AutofillProfileSpecifics::name_full_with_honorific() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_full_with_honorific)
  return name_full_with_honorific_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AutofillProfileSpecifics::mutable_name_full_with_honorific() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_full_with_honorific)
  return &name_full_with_honorific_;
}

// repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_honorific_status = 30;
inline int AutofillProfileSpecifics::_internal_name_honorific_status_size() const {
  return name_honorific_status_.size();
}
inline int AutofillProfileSpecifics::name_honorific_status_size() const {
  return _internal_name_honorific_status_size();
}
inline void AutofillProfileSpecifics::clear_name_honorific_status() {
  name_honorific_status_.Clear();
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_name_honorific_status(int index) const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(name_honorific_status_.Get(index));
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::name_honorific_status(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_honorific_status)
  return _internal_name_honorific_status(index);
}
inline void AutofillProfileSpecifics::set_name_honorific_status(int index, ::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  name_honorific_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_honorific_status)
}
inline void AutofillProfileSpecifics::_internal_add_name_honorific_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  name_honorific_status_.Add(value);
}
inline void AutofillProfileSpecifics::add_name_honorific_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_add_name_honorific_status(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_honorific_status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AutofillProfileSpecifics::name_honorific_status() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_honorific_status)
  return name_honorific_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AutofillProfileSpecifics::_internal_mutable_name_honorific_status() {
  return &name_honorific_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AutofillProfileSpecifics::mutable_name_honorific_status() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_honorific_status)
  return _internal_mutable_name_honorific_status();
}

// repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_first_status = 31;
inline int AutofillProfileSpecifics::_internal_name_first_status_size() const {
  return name_first_status_.size();
}
inline int AutofillProfileSpecifics::name_first_status_size() const {
  return _internal_name_first_status_size();
}
inline void AutofillProfileSpecifics::clear_name_first_status() {
  name_first_status_.Clear();
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_name_first_status(int index) const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(name_first_status_.Get(index));
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::name_first_status(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_first_status)
  return _internal_name_first_status(index);
}
inline void AutofillProfileSpecifics::set_name_first_status(int index, ::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  name_first_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_first_status)
}
inline void AutofillProfileSpecifics::_internal_add_name_first_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  name_first_status_.Add(value);
}
inline void AutofillProfileSpecifics::add_name_first_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_add_name_first_status(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_first_status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AutofillProfileSpecifics::name_first_status() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_first_status)
  return name_first_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AutofillProfileSpecifics::_internal_mutable_name_first_status() {
  return &name_first_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AutofillProfileSpecifics::mutable_name_first_status() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_first_status)
  return _internal_mutable_name_first_status();
}

// repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_middle_status = 32;
inline int AutofillProfileSpecifics::_internal_name_middle_status_size() const {
  return name_middle_status_.size();
}
inline int AutofillProfileSpecifics::name_middle_status_size() const {
  return _internal_name_middle_status_size();
}
inline void AutofillProfileSpecifics::clear_name_middle_status() {
  name_middle_status_.Clear();
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_name_middle_status(int index) const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(name_middle_status_.Get(index));
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::name_middle_status(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_middle_status)
  return _internal_name_middle_status(index);
}
inline void AutofillProfileSpecifics::set_name_middle_status(int index, ::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  name_middle_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_middle_status)
}
inline void AutofillProfileSpecifics::_internal_add_name_middle_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  name_middle_status_.Add(value);
}
inline void AutofillProfileSpecifics::add_name_middle_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_add_name_middle_status(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_middle_status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AutofillProfileSpecifics::name_middle_status() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_middle_status)
  return name_middle_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AutofillProfileSpecifics::_internal_mutable_name_middle_status() {
  return &name_middle_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AutofillProfileSpecifics::mutable_name_middle_status() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_middle_status)
  return _internal_mutable_name_middle_status();
}

// repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_last_status = 33;
inline int AutofillProfileSpecifics::_internal_name_last_status_size() const {
  return name_last_status_.size();
}
inline int AutofillProfileSpecifics::name_last_status_size() const {
  return _internal_name_last_status_size();
}
inline void AutofillProfileSpecifics::clear_name_last_status() {
  name_last_status_.Clear();
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_name_last_status(int index) const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(name_last_status_.Get(index));
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::name_last_status(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_last_status)
  return _internal_name_last_status(index);
}
inline void AutofillProfileSpecifics::set_name_last_status(int index, ::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  name_last_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_last_status)
}
inline void AutofillProfileSpecifics::_internal_add_name_last_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  name_last_status_.Add(value);
}
inline void AutofillProfileSpecifics::add_name_last_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_add_name_last_status(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_last_status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AutofillProfileSpecifics::name_last_status() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_last_status)
  return name_last_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AutofillProfileSpecifics::_internal_mutable_name_last_status() {
  return &name_last_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AutofillProfileSpecifics::mutable_name_last_status() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_last_status)
  return _internal_mutable_name_last_status();
}

// repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_last_first_status = 34;
inline int AutofillProfileSpecifics::_internal_name_last_first_status_size() const {
  return name_last_first_status_.size();
}
inline int AutofillProfileSpecifics::name_last_first_status_size() const {
  return _internal_name_last_first_status_size();
}
inline void AutofillProfileSpecifics::clear_name_last_first_status() {
  name_last_first_status_.Clear();
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_name_last_first_status(int index) const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(name_last_first_status_.Get(index));
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::name_last_first_status(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_last_first_status)
  return _internal_name_last_first_status(index);
}
inline void AutofillProfileSpecifics::set_name_last_first_status(int index, ::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  name_last_first_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_last_first_status)
}
inline void AutofillProfileSpecifics::_internal_add_name_last_first_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  name_last_first_status_.Add(value);
}
inline void AutofillProfileSpecifics::add_name_last_first_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_add_name_last_first_status(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_last_first_status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AutofillProfileSpecifics::name_last_first_status() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_last_first_status)
  return name_last_first_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AutofillProfileSpecifics::_internal_mutable_name_last_first_status() {
  return &name_last_first_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AutofillProfileSpecifics::mutable_name_last_first_status() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_last_first_status)
  return _internal_mutable_name_last_first_status();
}

// repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_last_conjunction_status = 35;
inline int AutofillProfileSpecifics::_internal_name_last_conjunction_status_size() const {
  return name_last_conjunction_status_.size();
}
inline int AutofillProfileSpecifics::name_last_conjunction_status_size() const {
  return _internal_name_last_conjunction_status_size();
}
inline void AutofillProfileSpecifics::clear_name_last_conjunction_status() {
  name_last_conjunction_status_.Clear();
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_name_last_conjunction_status(int index) const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(name_last_conjunction_status_.Get(index));
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::name_last_conjunction_status(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_last_conjunction_status)
  return _internal_name_last_conjunction_status(index);
}
inline void AutofillProfileSpecifics::set_name_last_conjunction_status(int index, ::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  name_last_conjunction_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_last_conjunction_status)
}
inline void AutofillProfileSpecifics::_internal_add_name_last_conjunction_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  name_last_conjunction_status_.Add(value);
}
inline void AutofillProfileSpecifics::add_name_last_conjunction_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_add_name_last_conjunction_status(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_last_conjunction_status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AutofillProfileSpecifics::name_last_conjunction_status() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_last_conjunction_status)
  return name_last_conjunction_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AutofillProfileSpecifics::_internal_mutable_name_last_conjunction_status() {
  return &name_last_conjunction_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AutofillProfileSpecifics::mutable_name_last_conjunction_status() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_last_conjunction_status)
  return _internal_mutable_name_last_conjunction_status();
}

// repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_last_second_status = 36;
inline int AutofillProfileSpecifics::_internal_name_last_second_status_size() const {
  return name_last_second_status_.size();
}
inline int AutofillProfileSpecifics::name_last_second_status_size() const {
  return _internal_name_last_second_status_size();
}
inline void AutofillProfileSpecifics::clear_name_last_second_status() {
  name_last_second_status_.Clear();
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_name_last_second_status(int index) const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(name_last_second_status_.Get(index));
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::name_last_second_status(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_last_second_status)
  return _internal_name_last_second_status(index);
}
inline void AutofillProfileSpecifics::set_name_last_second_status(int index, ::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  name_last_second_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_last_second_status)
}
inline void AutofillProfileSpecifics::_internal_add_name_last_second_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  name_last_second_status_.Add(value);
}
inline void AutofillProfileSpecifics::add_name_last_second_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_add_name_last_second_status(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_last_second_status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AutofillProfileSpecifics::name_last_second_status() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_last_second_status)
  return name_last_second_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AutofillProfileSpecifics::_internal_mutable_name_last_second_status() {
  return &name_last_second_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AutofillProfileSpecifics::mutable_name_last_second_status() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_last_second_status)
  return _internal_mutable_name_last_second_status();
}

// repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_full_status = 37;
inline int AutofillProfileSpecifics::_internal_name_full_status_size() const {
  return name_full_status_.size();
}
inline int AutofillProfileSpecifics::name_full_status_size() const {
  return _internal_name_full_status_size();
}
inline void AutofillProfileSpecifics::clear_name_full_status() {
  name_full_status_.Clear();
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_name_full_status(int index) const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(name_full_status_.Get(index));
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::name_full_status(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_full_status)
  return _internal_name_full_status(index);
}
inline void AutofillProfileSpecifics::set_name_full_status(int index, ::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  name_full_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_full_status)
}
inline void AutofillProfileSpecifics::_internal_add_name_full_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  name_full_status_.Add(value);
}
inline void AutofillProfileSpecifics::add_name_full_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_add_name_full_status(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_full_status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AutofillProfileSpecifics::name_full_status() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_full_status)
  return name_full_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AutofillProfileSpecifics::_internal_mutable_name_full_status() {
  return &name_full_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AutofillProfileSpecifics::mutable_name_full_status() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_full_status)
  return _internal_mutable_name_full_status();
}

// repeated .sync_pb.AutofillProfileSpecifics.VerificationStatus name_full_with_honorific_status = 61;
inline int AutofillProfileSpecifics::_internal_name_full_with_honorific_status_size() const {
  return name_full_with_honorific_status_.size();
}
inline int AutofillProfileSpecifics::name_full_with_honorific_status_size() const {
  return _internal_name_full_with_honorific_status_size();
}
inline void AutofillProfileSpecifics::clear_name_full_with_honorific_status() {
  name_full_with_honorific_status_.Clear();
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_name_full_with_honorific_status(int index) const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(name_full_with_honorific_status_.Get(index));
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::name_full_with_honorific_status(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.name_full_with_honorific_status)
  return _internal_name_full_with_honorific_status(index);
}
inline void AutofillProfileSpecifics::set_name_full_with_honorific_status(int index, ::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  name_full_with_honorific_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.name_full_with_honorific_status)
}
inline void AutofillProfileSpecifics::_internal_add_name_full_with_honorific_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  name_full_with_honorific_status_.Add(value);
}
inline void AutofillProfileSpecifics::add_name_full_with_honorific_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_add_name_full_with_honorific_status(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.name_full_with_honorific_status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AutofillProfileSpecifics::name_full_with_honorific_status() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.name_full_with_honorific_status)
  return name_full_with_honorific_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AutofillProfileSpecifics::_internal_mutable_name_full_with_honorific_status() {
  return &name_full_with_honorific_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AutofillProfileSpecifics::mutable_name_full_with_honorific_status() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.name_full_with_honorific_status)
  return _internal_mutable_name_full_with_honorific_status();
}

// repeated string email_address = 5;
inline int AutofillProfileSpecifics::_internal_email_address_size() const {
  return email_address_.size();
}
inline int AutofillProfileSpecifics::email_address_size() const {
  return _internal_email_address_size();
}
inline void AutofillProfileSpecifics::clear_email_address() {
  email_address_.Clear();
}
inline std::string* AutofillProfileSpecifics::add_email_address() {
  std::string* _s = _internal_add_email_address();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.AutofillProfileSpecifics.email_address)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_email_address(int index) const {
  return email_address_.Get(index);
}
inline const std::string& AutofillProfileSpecifics::email_address(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.email_address)
  return _internal_email_address(index);
}
inline std::string* AutofillProfileSpecifics::mutable_email_address(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.email_address)
  return email_address_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_email_address(int index, const std::string& value) {
  email_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.email_address)
}
inline void AutofillProfileSpecifics::set_email_address(int index, std::string&& value) {
  email_address_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.email_address)
}
inline void AutofillProfileSpecifics::set_email_address(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  email_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.email_address)
}
inline void AutofillProfileSpecifics::set_email_address(int index, const char* value, size_t size) {
  email_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.email_address)
}
inline std::string* AutofillProfileSpecifics::_internal_add_email_address() {
  return email_address_.Add();
}
inline void AutofillProfileSpecifics::add_email_address(const std::string& value) {
  email_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.email_address)
}
inline void AutofillProfileSpecifics::add_email_address(std::string&& value) {
  email_address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.email_address)
}
inline void AutofillProfileSpecifics::add_email_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  email_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.AutofillProfileSpecifics.email_address)
}
inline void AutofillProfileSpecifics::add_email_address(const char* value, size_t size) {
  email_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.AutofillProfileSpecifics.email_address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AutofillProfileSpecifics::email_address() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.email_address)
  return email_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AutofillProfileSpecifics::mutable_email_address() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.email_address)
  return &email_address_;
}

// optional string company_name = 6;
inline bool AutofillProfileSpecifics::_internal_has_company_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_company_name() const {
  return _internal_has_company_name();
}
inline void AutofillProfileSpecifics::clear_company_name() {
  company_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AutofillProfileSpecifics::company_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.company_name)
  return _internal_company_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_company_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 company_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.company_name)
}
inline std::string* AutofillProfileSpecifics::mutable_company_name() {
  std::string* _s = _internal_mutable_company_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.company_name)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_company_name() const {
  return company_name_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_company_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  company_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_company_name() {
  _has_bits_[0] |= 0x00000002u;
  return company_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_company_name() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.company_name)
  if (!_internal_has_company_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = company_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (company_name_.IsDefault()) {
    company_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_company_name(std::string* company_name) {
  if (company_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  company_name_.SetAllocated(company_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (company_name_.IsDefault()) {
    company_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.company_name)
}

// optional string address_home_line1 = 7;
inline bool AutofillProfileSpecifics::_internal_has_address_home_line1() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_line1() const {
  return _internal_has_address_home_line1();
}
inline void AutofillProfileSpecifics::clear_address_home_line1() {
  address_home_line1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AutofillProfileSpecifics::address_home_line1() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_line1)
  return _internal_address_home_line1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_address_home_line1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 address_home_line1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_line1)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_line1() {
  std::string* _s = _internal_mutable_address_home_line1();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_line1)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_address_home_line1() const {
  return address_home_line1_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_line1(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  address_home_line1_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_address_home_line1() {
  _has_bits_[0] |= 0x00000004u;
  return address_home_line1_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_address_home_line1() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_line1)
  if (!_internal_has_address_home_line1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = address_home_line1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_line1_.IsDefault()) {
    address_home_line1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_address_home_line1(std::string* address_home_line1) {
  if (address_home_line1 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  address_home_line1_.SetAllocated(address_home_line1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_line1_.IsDefault()) {
    address_home_line1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_line1)
}

// optional string address_home_line2 = 8;
inline bool AutofillProfileSpecifics::_internal_has_address_home_line2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_line2() const {
  return _internal_has_address_home_line2();
}
inline void AutofillProfileSpecifics::clear_address_home_line2() {
  address_home_line2_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AutofillProfileSpecifics::address_home_line2() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_line2)
  return _internal_address_home_line2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_address_home_line2(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 address_home_line2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_line2)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_line2() {
  std::string* _s = _internal_mutable_address_home_line2();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_line2)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_address_home_line2() const {
  return address_home_line2_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_line2(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  address_home_line2_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_address_home_line2() {
  _has_bits_[0] |= 0x00000008u;
  return address_home_line2_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_address_home_line2() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_line2)
  if (!_internal_has_address_home_line2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = address_home_line2_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_line2_.IsDefault()) {
    address_home_line2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_address_home_line2(std::string* address_home_line2) {
  if (address_home_line2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  address_home_line2_.SetAllocated(address_home_line2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_line2_.IsDefault()) {
    address_home_line2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_line2)
}

// optional string address_home_city = 9;
inline bool AutofillProfileSpecifics::_internal_has_address_home_city() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_city() const {
  return _internal_has_address_home_city();
}
inline void AutofillProfileSpecifics::clear_address_home_city() {
  address_home_city_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AutofillProfileSpecifics::address_home_city() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_city)
  return _internal_address_home_city();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_address_home_city(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 address_home_city_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_city)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_city() {
  std::string* _s = _internal_mutable_address_home_city();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_city)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_address_home_city() const {
  return address_home_city_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_city(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  address_home_city_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_address_home_city() {
  _has_bits_[0] |= 0x00000010u;
  return address_home_city_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_address_home_city() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_city)
  if (!_internal_has_address_home_city()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = address_home_city_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_city_.IsDefault()) {
    address_home_city_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_address_home_city(std::string* address_home_city) {
  if (address_home_city != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  address_home_city_.SetAllocated(address_home_city, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_city_.IsDefault()) {
    address_home_city_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_city)
}

// optional string address_home_state = 10;
inline bool AutofillProfileSpecifics::_internal_has_address_home_state() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_state() const {
  return _internal_has_address_home_state();
}
inline void AutofillProfileSpecifics::clear_address_home_state() {
  address_home_state_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AutofillProfileSpecifics::address_home_state() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_state)
  return _internal_address_home_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_address_home_state(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 address_home_state_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_state)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_state() {
  std::string* _s = _internal_mutable_address_home_state();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_state)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_address_home_state() const {
  return address_home_state_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_state(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  address_home_state_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_address_home_state() {
  _has_bits_[0] |= 0x00000020u;
  return address_home_state_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_address_home_state() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_state)
  if (!_internal_has_address_home_state()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = address_home_state_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_state_.IsDefault()) {
    address_home_state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_address_home_state(std::string* address_home_state) {
  if (address_home_state != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  address_home_state_.SetAllocated(address_home_state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_state_.IsDefault()) {
    address_home_state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_state)
}

// optional string address_home_zip = 11;
inline bool AutofillProfileSpecifics::_internal_has_address_home_zip() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_zip() const {
  return _internal_has_address_home_zip();
}
inline void AutofillProfileSpecifics::clear_address_home_zip() {
  address_home_zip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& AutofillProfileSpecifics::address_home_zip() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_zip)
  return _internal_address_home_zip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_address_home_zip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 address_home_zip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_zip)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_zip() {
  std::string* _s = _internal_mutable_address_home_zip();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_zip)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_address_home_zip() const {
  return address_home_zip_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_zip(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  address_home_zip_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_address_home_zip() {
  _has_bits_[0] |= 0x00000040u;
  return address_home_zip_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_address_home_zip() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_zip)
  if (!_internal_has_address_home_zip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = address_home_zip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_zip_.IsDefault()) {
    address_home_zip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_address_home_zip(std::string* address_home_zip) {
  if (address_home_zip != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  address_home_zip_.SetAllocated(address_home_zip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_zip_.IsDefault()) {
    address_home_zip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_zip)
}

// optional string address_home_country = 12;
inline bool AutofillProfileSpecifics::_internal_has_address_home_country() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_country() const {
  return _internal_has_address_home_country();
}
inline void AutofillProfileSpecifics::clear_address_home_country() {
  address_home_country_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& AutofillProfileSpecifics::address_home_country() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_country)
  return _internal_address_home_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_address_home_country(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 address_home_country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_country)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_country() {
  std::string* _s = _internal_mutable_address_home_country();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_country)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_address_home_country() const {
  return address_home_country_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_country(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  address_home_country_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_address_home_country() {
  _has_bits_[0] |= 0x00000080u;
  return address_home_country_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_address_home_country() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_country)
  if (!_internal_has_address_home_country()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = address_home_country_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_country_.IsDefault()) {
    address_home_country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_address_home_country(std::string* address_home_country) {
  if (address_home_country != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  address_home_country_.SetAllocated(address_home_country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_country_.IsDefault()) {
    address_home_country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_country)
}

// optional string address_home_street_address = 17;
inline bool AutofillProfileSpecifics::_internal_has_address_home_street_address() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_street_address() const {
  return _internal_has_address_home_street_address();
}
inline void AutofillProfileSpecifics::clear_address_home_street_address() {
  address_home_street_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& AutofillProfileSpecifics::address_home_street_address() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_street_address)
  return _internal_address_home_street_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_address_home_street_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000800u;
 address_home_street_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_street_address)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_street_address() {
  std::string* _s = _internal_mutable_address_home_street_address();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_street_address)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_address_home_street_address() const {
  return address_home_street_address_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_street_address(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  address_home_street_address_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_address_home_street_address() {
  _has_bits_[0] |= 0x00000800u;
  return address_home_street_address_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_address_home_street_address() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_street_address)
  if (!_internal_has_address_home_street_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  auto* p = address_home_street_address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_street_address_.IsDefault()) {
    address_home_street_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_address_home_street_address(std::string* address_home_street_address) {
  if (address_home_street_address != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  address_home_street_address_.SetAllocated(address_home_street_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_street_address_.IsDefault()) {
    address_home_street_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_street_address)
}

// optional string address_home_sorting_code = 18;
inline bool AutofillProfileSpecifics::_internal_has_address_home_sorting_code() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_sorting_code() const {
  return _internal_has_address_home_sorting_code();
}
inline void AutofillProfileSpecifics::clear_address_home_sorting_code() {
  address_home_sorting_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& AutofillProfileSpecifics::address_home_sorting_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_sorting_code)
  return _internal_address_home_sorting_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_address_home_sorting_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00001000u;
 address_home_sorting_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_sorting_code)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_sorting_code() {
  std::string* _s = _internal_mutable_address_home_sorting_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_sorting_code)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_address_home_sorting_code() const {
  return address_home_sorting_code_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_sorting_code(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  address_home_sorting_code_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_address_home_sorting_code() {
  _has_bits_[0] |= 0x00001000u;
  return address_home_sorting_code_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_address_home_sorting_code() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_sorting_code)
  if (!_internal_has_address_home_sorting_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  auto* p = address_home_sorting_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_sorting_code_.IsDefault()) {
    address_home_sorting_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_address_home_sorting_code(std::string* address_home_sorting_code) {
  if (address_home_sorting_code != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  address_home_sorting_code_.SetAllocated(address_home_sorting_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_sorting_code_.IsDefault()) {
    address_home_sorting_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_sorting_code)
}

// optional string address_home_dependent_locality = 19;
inline bool AutofillProfileSpecifics::_internal_has_address_home_dependent_locality() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_dependent_locality() const {
  return _internal_has_address_home_dependent_locality();
}
inline void AutofillProfileSpecifics::clear_address_home_dependent_locality() {
  address_home_dependent_locality_.ClearToEmpty();
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& AutofillProfileSpecifics::address_home_dependent_locality() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_dependent_locality)
  return _internal_address_home_dependent_locality();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_address_home_dependent_locality(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00002000u;
 address_home_dependent_locality_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_dependent_locality)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_dependent_locality() {
  std::string* _s = _internal_mutable_address_home_dependent_locality();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_dependent_locality)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_address_home_dependent_locality() const {
  return address_home_dependent_locality_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_dependent_locality(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  address_home_dependent_locality_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_address_home_dependent_locality() {
  _has_bits_[0] |= 0x00002000u;
  return address_home_dependent_locality_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_address_home_dependent_locality() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_dependent_locality)
  if (!_internal_has_address_home_dependent_locality()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  auto* p = address_home_dependent_locality_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_dependent_locality_.IsDefault()) {
    address_home_dependent_locality_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_address_home_dependent_locality(std::string* address_home_dependent_locality) {
  if (address_home_dependent_locality != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  address_home_dependent_locality_.SetAllocated(address_home_dependent_locality, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_dependent_locality_.IsDefault()) {
    address_home_dependent_locality_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_dependent_locality)
}

// optional string address_home_language_code = 20;
inline bool AutofillProfileSpecifics::_internal_has_address_home_language_code() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_language_code() const {
  return _internal_has_address_home_language_code();
}
inline void AutofillProfileSpecifics::clear_address_home_language_code() {
  address_home_language_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& AutofillProfileSpecifics::address_home_language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_language_code)
  return _internal_address_home_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_address_home_language_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00004000u;
 address_home_language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_language_code)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_language_code() {
  std::string* _s = _internal_mutable_address_home_language_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_language_code)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_address_home_language_code() const {
  return address_home_language_code_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_language_code(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  address_home_language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_address_home_language_code() {
  _has_bits_[0] |= 0x00004000u;
  return address_home_language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_address_home_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_language_code)
  if (!_internal_has_address_home_language_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  auto* p = address_home_language_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_language_code_.IsDefault()) {
    address_home_language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_address_home_language_code(std::string* address_home_language_code) {
  if (address_home_language_code != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  address_home_language_code_.SetAllocated(address_home_language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_language_code_.IsDefault()) {
    address_home_language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_language_code)
}

// optional string address_home_thoroughfare_name = 38;
inline bool AutofillProfileSpecifics::_internal_has_address_home_thoroughfare_name() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_thoroughfare_name() const {
  return _internal_has_address_home_thoroughfare_name();
}
inline void AutofillProfileSpecifics::clear_address_home_thoroughfare_name() {
  address_home_thoroughfare_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00008000u;
}
inline const std::string& AutofillProfileSpecifics::address_home_thoroughfare_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_thoroughfare_name)
  return _internal_address_home_thoroughfare_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_address_home_thoroughfare_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00008000u;
 address_home_thoroughfare_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_thoroughfare_name)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_thoroughfare_name() {
  std::string* _s = _internal_mutable_address_home_thoroughfare_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_thoroughfare_name)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_address_home_thoroughfare_name() const {
  return address_home_thoroughfare_name_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_thoroughfare_name(const std::string& value) {
  _has_bits_[0] |= 0x00008000u;
  address_home_thoroughfare_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_address_home_thoroughfare_name() {
  _has_bits_[0] |= 0x00008000u;
  return address_home_thoroughfare_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_address_home_thoroughfare_name() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_thoroughfare_name)
  if (!_internal_has_address_home_thoroughfare_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00008000u;
  auto* p = address_home_thoroughfare_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_thoroughfare_name_.IsDefault()) {
    address_home_thoroughfare_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_address_home_thoroughfare_name(std::string* address_home_thoroughfare_name) {
  if (address_home_thoroughfare_name != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  address_home_thoroughfare_name_.SetAllocated(address_home_thoroughfare_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_thoroughfare_name_.IsDefault()) {
    address_home_thoroughfare_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_thoroughfare_name)
}

// optional string address_home_thoroughfare_number = 39;
inline bool AutofillProfileSpecifics::_internal_has_address_home_thoroughfare_number() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_thoroughfare_number() const {
  return _internal_has_address_home_thoroughfare_number();
}
inline void AutofillProfileSpecifics::clear_address_home_thoroughfare_number() {
  address_home_thoroughfare_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00010000u;
}
inline const std::string& AutofillProfileSpecifics::address_home_thoroughfare_number() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_thoroughfare_number)
  return _internal_address_home_thoroughfare_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_address_home_thoroughfare_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00010000u;
 address_home_thoroughfare_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_thoroughfare_number)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_thoroughfare_number() {
  std::string* _s = _internal_mutable_address_home_thoroughfare_number();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_thoroughfare_number)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_address_home_thoroughfare_number() const {
  return address_home_thoroughfare_number_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_thoroughfare_number(const std::string& value) {
  _has_bits_[0] |= 0x00010000u;
  address_home_thoroughfare_number_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_address_home_thoroughfare_number() {
  _has_bits_[0] |= 0x00010000u;
  return address_home_thoroughfare_number_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_address_home_thoroughfare_number() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_thoroughfare_number)
  if (!_internal_has_address_home_thoroughfare_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00010000u;
  auto* p = address_home_thoroughfare_number_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_thoroughfare_number_.IsDefault()) {
    address_home_thoroughfare_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_address_home_thoroughfare_number(std::string* address_home_thoroughfare_number) {
  if (address_home_thoroughfare_number != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  address_home_thoroughfare_number_.SetAllocated(address_home_thoroughfare_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_thoroughfare_number_.IsDefault()) {
    address_home_thoroughfare_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_thoroughfare_number)
}

// optional string address_home_dependent_thoroughfare_name = 40;
inline bool AutofillProfileSpecifics::_internal_has_address_home_dependent_thoroughfare_name() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_dependent_thoroughfare_name() const {
  return _internal_has_address_home_dependent_thoroughfare_name();
}
inline void AutofillProfileSpecifics::clear_address_home_dependent_thoroughfare_name() {
  address_home_dependent_thoroughfare_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00020000u;
}
inline const std::string& AutofillProfileSpecifics::address_home_dependent_thoroughfare_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_dependent_thoroughfare_name)
  return _internal_address_home_dependent_thoroughfare_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_address_home_dependent_thoroughfare_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00020000u;
 address_home_dependent_thoroughfare_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_dependent_thoroughfare_name)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_dependent_thoroughfare_name() {
  std::string* _s = _internal_mutable_address_home_dependent_thoroughfare_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_dependent_thoroughfare_name)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_address_home_dependent_thoroughfare_name() const {
  return address_home_dependent_thoroughfare_name_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_dependent_thoroughfare_name(const std::string& value) {
  _has_bits_[0] |= 0x00020000u;
  address_home_dependent_thoroughfare_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_address_home_dependent_thoroughfare_name() {
  _has_bits_[0] |= 0x00020000u;
  return address_home_dependent_thoroughfare_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_address_home_dependent_thoroughfare_name() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_dependent_thoroughfare_name)
  if (!_internal_has_address_home_dependent_thoroughfare_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00020000u;
  auto* p = address_home_dependent_thoroughfare_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_dependent_thoroughfare_name_.IsDefault()) {
    address_home_dependent_thoroughfare_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_address_home_dependent_thoroughfare_name(std::string* address_home_dependent_thoroughfare_name) {
  if (address_home_dependent_thoroughfare_name != nullptr) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  address_home_dependent_thoroughfare_name_.SetAllocated(address_home_dependent_thoroughfare_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_dependent_thoroughfare_name_.IsDefault()) {
    address_home_dependent_thoroughfare_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_dependent_thoroughfare_name)
}

// optional string address_home_premise_name = 41;
inline bool AutofillProfileSpecifics::_internal_has_address_home_premise_name() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_premise_name() const {
  return _internal_has_address_home_premise_name();
}
inline void AutofillProfileSpecifics::clear_address_home_premise_name() {
  address_home_premise_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00040000u;
}
inline const std::string& AutofillProfileSpecifics::address_home_premise_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_premise_name)
  return _internal_address_home_premise_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_address_home_premise_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00040000u;
 address_home_premise_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_premise_name)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_premise_name() {
  std::string* _s = _internal_mutable_address_home_premise_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_premise_name)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_address_home_premise_name() const {
  return address_home_premise_name_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_premise_name(const std::string& value) {
  _has_bits_[0] |= 0x00040000u;
  address_home_premise_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_address_home_premise_name() {
  _has_bits_[0] |= 0x00040000u;
  return address_home_premise_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_address_home_premise_name() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_premise_name)
  if (!_internal_has_address_home_premise_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00040000u;
  auto* p = address_home_premise_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_premise_name_.IsDefault()) {
    address_home_premise_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_address_home_premise_name(std::string* address_home_premise_name) {
  if (address_home_premise_name != nullptr) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  address_home_premise_name_.SetAllocated(address_home_premise_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_premise_name_.IsDefault()) {
    address_home_premise_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_premise_name)
}

// optional string address_home_subpremise_name = 42;
inline bool AutofillProfileSpecifics::_internal_has_address_home_subpremise_name() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_subpremise_name() const {
  return _internal_has_address_home_subpremise_name();
}
inline void AutofillProfileSpecifics::clear_address_home_subpremise_name() {
  address_home_subpremise_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00080000u;
}
inline const std::string& AutofillProfileSpecifics::address_home_subpremise_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_subpremise_name)
  return _internal_address_home_subpremise_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_address_home_subpremise_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00080000u;
 address_home_subpremise_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_subpremise_name)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_subpremise_name() {
  std::string* _s = _internal_mutable_address_home_subpremise_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_subpremise_name)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_address_home_subpremise_name() const {
  return address_home_subpremise_name_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_subpremise_name(const std::string& value) {
  _has_bits_[0] |= 0x00080000u;
  address_home_subpremise_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_address_home_subpremise_name() {
  _has_bits_[0] |= 0x00080000u;
  return address_home_subpremise_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_address_home_subpremise_name() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_subpremise_name)
  if (!_internal_has_address_home_subpremise_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00080000u;
  auto* p = address_home_subpremise_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_subpremise_name_.IsDefault()) {
    address_home_subpremise_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_address_home_subpremise_name(std::string* address_home_subpremise_name) {
  if (address_home_subpremise_name != nullptr) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  address_home_subpremise_name_.SetAllocated(address_home_subpremise_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_subpremise_name_.IsDefault()) {
    address_home_subpremise_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_subpremise_name)
}

// optional string address_home_apt_num = 56;
inline bool AutofillProfileSpecifics::_internal_has_address_home_apt_num() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_apt_num() const {
  return _internal_has_address_home_apt_num();
}
inline void AutofillProfileSpecifics::clear_address_home_apt_num() {
  address_home_apt_num_.ClearToEmpty();
  _has_bits_[0] &= ~0x00100000u;
}
inline const std::string& AutofillProfileSpecifics::address_home_apt_num() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_apt_num)
  return _internal_address_home_apt_num();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_address_home_apt_num(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00100000u;
 address_home_apt_num_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_apt_num)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_apt_num() {
  std::string* _s = _internal_mutable_address_home_apt_num();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_apt_num)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_address_home_apt_num() const {
  return address_home_apt_num_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_apt_num(const std::string& value) {
  _has_bits_[0] |= 0x00100000u;
  address_home_apt_num_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_address_home_apt_num() {
  _has_bits_[0] |= 0x00100000u;
  return address_home_apt_num_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_address_home_apt_num() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_apt_num)
  if (!_internal_has_address_home_apt_num()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00100000u;
  auto* p = address_home_apt_num_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_apt_num_.IsDefault()) {
    address_home_apt_num_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_address_home_apt_num(std::string* address_home_apt_num) {
  if (address_home_apt_num != nullptr) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  address_home_apt_num_.SetAllocated(address_home_apt_num, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_apt_num_.IsDefault()) {
    address_home_apt_num_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_apt_num)
}

// optional string address_home_floor = 57;
inline bool AutofillProfileSpecifics::_internal_has_address_home_floor() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_floor() const {
  return _internal_has_address_home_floor();
}
inline void AutofillProfileSpecifics::clear_address_home_floor() {
  address_home_floor_.ClearToEmpty();
  _has_bits_[0] &= ~0x00200000u;
}
inline const std::string& AutofillProfileSpecifics::address_home_floor() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_floor)
  return _internal_address_home_floor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_address_home_floor(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00200000u;
 address_home_floor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_floor)
}
inline std::string* AutofillProfileSpecifics::mutable_address_home_floor() {
  std::string* _s = _internal_mutable_address_home_floor();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.address_home_floor)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_address_home_floor() const {
  return address_home_floor_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_floor(const std::string& value) {
  _has_bits_[0] |= 0x00200000u;
  address_home_floor_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_address_home_floor() {
  _has_bits_[0] |= 0x00200000u;
  return address_home_floor_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_address_home_floor() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.address_home_floor)
  if (!_internal_has_address_home_floor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00200000u;
  auto* p = address_home_floor_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_floor_.IsDefault()) {
    address_home_floor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_address_home_floor(std::string* address_home_floor) {
  if (address_home_floor != nullptr) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  address_home_floor_.SetAllocated(address_home_floor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_home_floor_.IsDefault()) {
    address_home_floor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.address_home_floor)
}

// optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_city_status = 43;
inline bool AutofillProfileSpecifics::_internal_has_address_home_city_status() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_city_status() const {
  return _internal_has_address_home_city_status();
}
inline void AutofillProfileSpecifics::clear_address_home_city_status() {
  address_home_city_status_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_address_home_city_status() const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(address_home_city_status_);
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::address_home_city_status() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_city_status)
  return _internal_address_home_city_status();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_city_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  _has_bits_[0] |= 0x04000000u;
  address_home_city_status_ = value;
}
inline void AutofillProfileSpecifics::set_address_home_city_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_set_address_home_city_status(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_city_status)
}

// optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_state_status = 44;
inline bool AutofillProfileSpecifics::_internal_has_address_home_state_status() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_state_status() const {
  return _internal_has_address_home_state_status();
}
inline void AutofillProfileSpecifics::clear_address_home_state_status() {
  address_home_state_status_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_address_home_state_status() const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(address_home_state_status_);
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::address_home_state_status() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_state_status)
  return _internal_address_home_state_status();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_state_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  _has_bits_[0] |= 0x08000000u;
  address_home_state_status_ = value;
}
inline void AutofillProfileSpecifics::set_address_home_state_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_set_address_home_state_status(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_state_status)
}

// optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_zip_status = 45;
inline bool AutofillProfileSpecifics::_internal_has_address_home_zip_status() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_zip_status() const {
  return _internal_has_address_home_zip_status();
}
inline void AutofillProfileSpecifics::clear_address_home_zip_status() {
  address_home_zip_status_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_address_home_zip_status() const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(address_home_zip_status_);
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::address_home_zip_status() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_zip_status)
  return _internal_address_home_zip_status();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_zip_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  _has_bits_[0] |= 0x40000000u;
  address_home_zip_status_ = value;
}
inline void AutofillProfileSpecifics::set_address_home_zip_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_set_address_home_zip_status(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_zip_status)
}

// optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_country_status = 46;
inline bool AutofillProfileSpecifics::_internal_has_address_home_country_status() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_country_status() const {
  return _internal_has_address_home_country_status();
}
inline void AutofillProfileSpecifics::clear_address_home_country_status() {
  address_home_country_status_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_address_home_country_status() const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(address_home_country_status_);
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::address_home_country_status() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_country_status)
  return _internal_address_home_country_status();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_country_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  _has_bits_[0] |= 0x80000000u;
  address_home_country_status_ = value;
}
inline void AutofillProfileSpecifics::set_address_home_country_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_set_address_home_country_status(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_country_status)
}

// optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_street_address_status = 47;
inline bool AutofillProfileSpecifics::_internal_has_address_home_street_address_status() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_street_address_status() const {
  return _internal_has_address_home_street_address_status();
}
inline void AutofillProfileSpecifics::clear_address_home_street_address_status() {
  address_home_street_address_status_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_address_home_street_address_status() const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(address_home_street_address_status_);
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::address_home_street_address_status() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_street_address_status)
  return _internal_address_home_street_address_status();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_street_address_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  _has_bits_[1] |= 0x00000001u;
  address_home_street_address_status_ = value;
}
inline void AutofillProfileSpecifics::set_address_home_street_address_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_set_address_home_street_address_status(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_street_address_status)
}

// optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_sorting_code_status = 48;
inline bool AutofillProfileSpecifics::_internal_has_address_home_sorting_code_status() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_sorting_code_status() const {
  return _internal_has_address_home_sorting_code_status();
}
inline void AutofillProfileSpecifics::clear_address_home_sorting_code_status() {
  address_home_sorting_code_status_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_address_home_sorting_code_status() const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(address_home_sorting_code_status_);
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::address_home_sorting_code_status() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_sorting_code_status)
  return _internal_address_home_sorting_code_status();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_sorting_code_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  _has_bits_[1] |= 0x00000002u;
  address_home_sorting_code_status_ = value;
}
inline void AutofillProfileSpecifics::set_address_home_sorting_code_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_set_address_home_sorting_code_status(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_sorting_code_status)
}

// optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_dependent_locality_status = 49;
inline bool AutofillProfileSpecifics::_internal_has_address_home_dependent_locality_status() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_dependent_locality_status() const {
  return _internal_has_address_home_dependent_locality_status();
}
inline void AutofillProfileSpecifics::clear_address_home_dependent_locality_status() {
  address_home_dependent_locality_status_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_address_home_dependent_locality_status() const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(address_home_dependent_locality_status_);
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::address_home_dependent_locality_status() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_dependent_locality_status)
  return _internal_address_home_dependent_locality_status();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_dependent_locality_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  _has_bits_[1] |= 0x00000004u;
  address_home_dependent_locality_status_ = value;
}
inline void AutofillProfileSpecifics::set_address_home_dependent_locality_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_set_address_home_dependent_locality_status(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_dependent_locality_status)
}

// optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_language_code_status = 50;
inline bool AutofillProfileSpecifics::_internal_has_address_home_language_code_status() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_language_code_status() const {
  return _internal_has_address_home_language_code_status();
}
inline void AutofillProfileSpecifics::clear_address_home_language_code_status() {
  address_home_language_code_status_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_address_home_language_code_status() const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(address_home_language_code_status_);
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::address_home_language_code_status() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_language_code_status)
  return _internal_address_home_language_code_status();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_language_code_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  _has_bits_[1] |= 0x00000008u;
  address_home_language_code_status_ = value;
}
inline void AutofillProfileSpecifics::set_address_home_language_code_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_set_address_home_language_code_status(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_language_code_status)
}

// optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_thoroughfare_name_status = 51;
inline bool AutofillProfileSpecifics::_internal_has_address_home_thoroughfare_name_status() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_thoroughfare_name_status() const {
  return _internal_has_address_home_thoroughfare_name_status();
}
inline void AutofillProfileSpecifics::clear_address_home_thoroughfare_name_status() {
  address_home_thoroughfare_name_status_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_address_home_thoroughfare_name_status() const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(address_home_thoroughfare_name_status_);
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::address_home_thoroughfare_name_status() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_thoroughfare_name_status)
  return _internal_address_home_thoroughfare_name_status();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_thoroughfare_name_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  _has_bits_[1] |= 0x00000010u;
  address_home_thoroughfare_name_status_ = value;
}
inline void AutofillProfileSpecifics::set_address_home_thoroughfare_name_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_set_address_home_thoroughfare_name_status(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_thoroughfare_name_status)
}

// optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_thoroughfare_number_status = 52;
inline bool AutofillProfileSpecifics::_internal_has_address_home_thoroughfare_number_status() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_thoroughfare_number_status() const {
  return _internal_has_address_home_thoroughfare_number_status();
}
inline void AutofillProfileSpecifics::clear_address_home_thoroughfare_number_status() {
  address_home_thoroughfare_number_status_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_address_home_thoroughfare_number_status() const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(address_home_thoroughfare_number_status_);
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::address_home_thoroughfare_number_status() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_thoroughfare_number_status)
  return _internal_address_home_thoroughfare_number_status();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_thoroughfare_number_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  _has_bits_[1] |= 0x00000020u;
  address_home_thoroughfare_number_status_ = value;
}
inline void AutofillProfileSpecifics::set_address_home_thoroughfare_number_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_set_address_home_thoroughfare_number_status(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_thoroughfare_number_status)
}

// optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_dependent_thoroughfare_name_status = 53;
inline bool AutofillProfileSpecifics::_internal_has_address_home_dependent_thoroughfare_name_status() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_dependent_thoroughfare_name_status() const {
  return _internal_has_address_home_dependent_thoroughfare_name_status();
}
inline void AutofillProfileSpecifics::clear_address_home_dependent_thoroughfare_name_status() {
  address_home_dependent_thoroughfare_name_status_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_address_home_dependent_thoroughfare_name_status() const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(address_home_dependent_thoroughfare_name_status_);
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::address_home_dependent_thoroughfare_name_status() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_dependent_thoroughfare_name_status)
  return _internal_address_home_dependent_thoroughfare_name_status();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_dependent_thoroughfare_name_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  _has_bits_[1] |= 0x00000040u;
  address_home_dependent_thoroughfare_name_status_ = value;
}
inline void AutofillProfileSpecifics::set_address_home_dependent_thoroughfare_name_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_set_address_home_dependent_thoroughfare_name_status(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_dependent_thoroughfare_name_status)
}

// optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_premise_name_status = 54;
inline bool AutofillProfileSpecifics::_internal_has_address_home_premise_name_status() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_premise_name_status() const {
  return _internal_has_address_home_premise_name_status();
}
inline void AutofillProfileSpecifics::clear_address_home_premise_name_status() {
  address_home_premise_name_status_ = 0;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_address_home_premise_name_status() const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(address_home_premise_name_status_);
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::address_home_premise_name_status() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_premise_name_status)
  return _internal_address_home_premise_name_status();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_premise_name_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  _has_bits_[1] |= 0x00000080u;
  address_home_premise_name_status_ = value;
}
inline void AutofillProfileSpecifics::set_address_home_premise_name_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_set_address_home_premise_name_status(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_premise_name_status)
}

// optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_subpremise_name_status = 55;
inline bool AutofillProfileSpecifics::_internal_has_address_home_subpremise_name_status() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_subpremise_name_status() const {
  return _internal_has_address_home_subpremise_name_status();
}
inline void AutofillProfileSpecifics::clear_address_home_subpremise_name_status() {
  address_home_subpremise_name_status_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_address_home_subpremise_name_status() const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(address_home_subpremise_name_status_);
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::address_home_subpremise_name_status() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_subpremise_name_status)
  return _internal_address_home_subpremise_name_status();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_subpremise_name_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  _has_bits_[1] |= 0x00000100u;
  address_home_subpremise_name_status_ = value;
}
inline void AutofillProfileSpecifics::set_address_home_subpremise_name_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_set_address_home_subpremise_name_status(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_subpremise_name_status)
}

// optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_apt_num_status = 58;
inline bool AutofillProfileSpecifics::_internal_has_address_home_apt_num_status() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_apt_num_status() const {
  return _internal_has_address_home_apt_num_status();
}
inline void AutofillProfileSpecifics::clear_address_home_apt_num_status() {
  address_home_apt_num_status_ = 0;
  _has_bits_[1] &= ~0x00000200u;
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_address_home_apt_num_status() const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(address_home_apt_num_status_);
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::address_home_apt_num_status() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_apt_num_status)
  return _internal_address_home_apt_num_status();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_apt_num_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  _has_bits_[1] |= 0x00000200u;
  address_home_apt_num_status_ = value;
}
inline void AutofillProfileSpecifics::set_address_home_apt_num_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_set_address_home_apt_num_status(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_apt_num_status)
}

// optional .sync_pb.AutofillProfileSpecifics.VerificationStatus address_home_floor_status = 59;
inline bool AutofillProfileSpecifics::_internal_has_address_home_floor_status() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_address_home_floor_status() const {
  return _internal_has_address_home_floor_status();
}
inline void AutofillProfileSpecifics::clear_address_home_floor_status() {
  address_home_floor_status_ = 0;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::_internal_address_home_floor_status() const {
  return static_cast< ::sync_pb::AutofillProfileSpecifics_VerificationStatus >(address_home_floor_status_);
}
inline ::sync_pb::AutofillProfileSpecifics_VerificationStatus AutofillProfileSpecifics::address_home_floor_status() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.address_home_floor_status)
  return _internal_address_home_floor_status();
}
inline void AutofillProfileSpecifics::_internal_set_address_home_floor_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  assert(::sync_pb::AutofillProfileSpecifics_VerificationStatus_IsValid(value));
  _has_bits_[1] |= 0x00000400u;
  address_home_floor_status_ = value;
}
inline void AutofillProfileSpecifics::set_address_home_floor_status(::sync_pb::AutofillProfileSpecifics_VerificationStatus value) {
  _internal_set_address_home_floor_status(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.address_home_floor_status)
}

// repeated string phone_home_whole_number = 13;
inline int AutofillProfileSpecifics::_internal_phone_home_whole_number_size() const {
  return phone_home_whole_number_.size();
}
inline int AutofillProfileSpecifics::phone_home_whole_number_size() const {
  return _internal_phone_home_whole_number_size();
}
inline void AutofillProfileSpecifics::clear_phone_home_whole_number() {
  phone_home_whole_number_.Clear();
}
inline std::string* AutofillProfileSpecifics::add_phone_home_whole_number() {
  std::string* _s = _internal_add_phone_home_whole_number();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_phone_home_whole_number(int index) const {
  return phone_home_whole_number_.Get(index);
}
inline const std::string& AutofillProfileSpecifics::phone_home_whole_number(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
  return _internal_phone_home_whole_number(index);
}
inline std::string* AutofillProfileSpecifics::mutable_phone_home_whole_number(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
  return phone_home_whole_number_.Mutable(index);
}
inline void AutofillProfileSpecifics::set_phone_home_whole_number(int index, const std::string& value) {
  phone_home_whole_number_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
}
inline void AutofillProfileSpecifics::set_phone_home_whole_number(int index, std::string&& value) {
  phone_home_whole_number_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
}
inline void AutofillProfileSpecifics::set_phone_home_whole_number(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  phone_home_whole_number_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
}
inline void AutofillProfileSpecifics::set_phone_home_whole_number(int index, const char* value, size_t size) {
  phone_home_whole_number_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
}
inline std::string* AutofillProfileSpecifics::_internal_add_phone_home_whole_number() {
  return phone_home_whole_number_.Add();
}
inline void AutofillProfileSpecifics::add_phone_home_whole_number(const std::string& value) {
  phone_home_whole_number_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
}
inline void AutofillProfileSpecifics::add_phone_home_whole_number(std::string&& value) {
  phone_home_whole_number_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
}
inline void AutofillProfileSpecifics::add_phone_home_whole_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  phone_home_whole_number_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
}
inline void AutofillProfileSpecifics::add_phone_home_whole_number(const char* value, size_t size) {
  phone_home_whole_number_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AutofillProfileSpecifics::phone_home_whole_number() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
  return phone_home_whole_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AutofillProfileSpecifics::mutable_phone_home_whole_number() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillProfileSpecifics.phone_home_whole_number)
  return &phone_home_whole_number_;
}

// optional bool disallow_settings_visible_updates = 63;
inline bool AutofillProfileSpecifics::_internal_has_disallow_settings_visible_updates() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_disallow_settings_visible_updates() const {
  return _internal_has_disallow_settings_visible_updates();
}
inline void AutofillProfileSpecifics::clear_disallow_settings_visible_updates() {
  disallow_settings_visible_updates_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool AutofillProfileSpecifics::_internal_disallow_settings_visible_updates() const {
  return disallow_settings_visible_updates_;
}
inline bool AutofillProfileSpecifics::disallow_settings_visible_updates() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.disallow_settings_visible_updates)
  return _internal_disallow_settings_visible_updates();
}
inline void AutofillProfileSpecifics::_internal_set_disallow_settings_visible_updates(bool value) {
  _has_bits_[0] |= 0x10000000u;
  disallow_settings_visible_updates_ = value;
}
inline void AutofillProfileSpecifics::set_disallow_settings_visible_updates(bool value) {
  _internal_set_disallow_settings_visible_updates(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.disallow_settings_visible_updates)
}

// optional int32 birthdate_day = 64;
inline bool AutofillProfileSpecifics::_internal_has_birthdate_day() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_birthdate_day() const {
  return _internal_has_birthdate_day();
}
inline void AutofillProfileSpecifics::clear_birthdate_day() {
  birthdate_day_ = 0;
  _has_bits_[1] &= ~0x00000800u;
}
inline int32_t AutofillProfileSpecifics::_internal_birthdate_day() const {
  return birthdate_day_;
}
inline int32_t AutofillProfileSpecifics::birthdate_day() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.birthdate_day)
  return _internal_birthdate_day();
}
inline void AutofillProfileSpecifics::_internal_set_birthdate_day(int32_t value) {
  _has_bits_[1] |= 0x00000800u;
  birthdate_day_ = value;
}
inline void AutofillProfileSpecifics::set_birthdate_day(int32_t value) {
  _internal_set_birthdate_day(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.birthdate_day)
}

// optional int32 birthdate_month = 65;
inline bool AutofillProfileSpecifics::_internal_has_birthdate_month() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_birthdate_month() const {
  return _internal_has_birthdate_month();
}
inline void AutofillProfileSpecifics::clear_birthdate_month() {
  birthdate_month_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline int32_t AutofillProfileSpecifics::_internal_birthdate_month() const {
  return birthdate_month_;
}
inline int32_t AutofillProfileSpecifics::birthdate_month() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.birthdate_month)
  return _internal_birthdate_month();
}
inline void AutofillProfileSpecifics::_internal_set_birthdate_month(int32_t value) {
  _has_bits_[1] |= 0x00001000u;
  birthdate_month_ = value;
}
inline void AutofillProfileSpecifics::set_birthdate_month(int32_t value) {
  _internal_set_birthdate_month(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.birthdate_month)
}

// optional int32 birthdate_year = 66;
inline bool AutofillProfileSpecifics::_internal_has_birthdate_year() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_birthdate_year() const {
  return _internal_has_birthdate_year();
}
inline void AutofillProfileSpecifics::clear_birthdate_year() {
  birthdate_year_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline int32_t AutofillProfileSpecifics::_internal_birthdate_year() const {
  return birthdate_year_;
}
inline int32_t AutofillProfileSpecifics::birthdate_year() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.birthdate_year)
  return _internal_birthdate_year();
}
inline void AutofillProfileSpecifics::_internal_set_birthdate_year(int32_t value) {
  _has_bits_[1] |= 0x00002000u;
  birthdate_year_ = value;
}
inline void AutofillProfileSpecifics::set_birthdate_year(int32_t value) {
  _internal_set_birthdate_year(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.birthdate_year)
}

// optional string deprecated_label = 1 [deprecated = true];
inline bool AutofillProfileSpecifics::_internal_has_deprecated_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_deprecated_label() const {
  return _internal_has_deprecated_label();
}
inline void AutofillProfileSpecifics::clear_deprecated_label() {
  deprecated_label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AutofillProfileSpecifics::deprecated_label() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.deprecated_label)
  return _internal_deprecated_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_deprecated_label(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 deprecated_label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.deprecated_label)
}
inline std::string* AutofillProfileSpecifics::mutable_deprecated_label() {
  std::string* _s = _internal_mutable_deprecated_label();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.deprecated_label)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_deprecated_label() const {
  return deprecated_label_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_deprecated_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  deprecated_label_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_deprecated_label() {
  _has_bits_[0] |= 0x00000001u;
  return deprecated_label_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_deprecated_label() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.deprecated_label)
  if (!_internal_has_deprecated_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = deprecated_label_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (deprecated_label_.IsDefault()) {
    deprecated_label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_deprecated_label(std::string* deprecated_label) {
  if (deprecated_label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  deprecated_label_.SetAllocated(deprecated_label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (deprecated_label_.IsDefault()) {
    deprecated_label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.deprecated_label)
}

// optional string phone_fax_whole_number = 14 [deprecated = true];
inline bool AutofillProfileSpecifics::_internal_has_phone_fax_whole_number() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_phone_fax_whole_number() const {
  return _internal_has_phone_fax_whole_number();
}
inline void AutofillProfileSpecifics::clear_phone_fax_whole_number() {
  phone_fax_whole_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& AutofillProfileSpecifics::phone_fax_whole_number() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.phone_fax_whole_number)
  return _internal_phone_fax_whole_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillProfileSpecifics::set_phone_fax_whole_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000100u;
 phone_fax_whole_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.phone_fax_whole_number)
}
inline std::string* AutofillProfileSpecifics::mutable_phone_fax_whole_number() {
  std::string* _s = _internal_mutable_phone_fax_whole_number();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillProfileSpecifics.phone_fax_whole_number)
  return _s;
}
inline const std::string& AutofillProfileSpecifics::_internal_phone_fax_whole_number() const {
  return phone_fax_whole_number_.Get();
}
inline void AutofillProfileSpecifics::_internal_set_phone_fax_whole_number(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  phone_fax_whole_number_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::_internal_mutable_phone_fax_whole_number() {
  _has_bits_[0] |= 0x00000100u;
  return phone_fax_whole_number_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillProfileSpecifics::release_phone_fax_whole_number() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillProfileSpecifics.phone_fax_whole_number)
  if (!_internal_has_phone_fax_whole_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  auto* p = phone_fax_whole_number_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (phone_fax_whole_number_.IsDefault()) {
    phone_fax_whole_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillProfileSpecifics::set_allocated_phone_fax_whole_number(std::string* phone_fax_whole_number) {
  if (phone_fax_whole_number != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  phone_fax_whole_number_.SetAllocated(phone_fax_whole_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (phone_fax_whole_number_.IsDefault()) {
    phone_fax_whole_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillProfileSpecifics.phone_fax_whole_number)
}

// optional int64 validity_state_bitfield = 24 [deprecated = true];
inline bool AutofillProfileSpecifics::_internal_has_validity_state_bitfield() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_validity_state_bitfield() const {
  return _internal_has_validity_state_bitfield();
}
inline void AutofillProfileSpecifics::clear_validity_state_bitfield() {
  validity_state_bitfield_ = int64_t{0};
  _has_bits_[0] &= ~0x02000000u;
}
inline int64_t AutofillProfileSpecifics::_internal_validity_state_bitfield() const {
  return validity_state_bitfield_;
}
inline int64_t AutofillProfileSpecifics::validity_state_bitfield() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.validity_state_bitfield)
  return _internal_validity_state_bitfield();
}
inline void AutofillProfileSpecifics::_internal_set_validity_state_bitfield(int64_t value) {
  _has_bits_[0] |= 0x02000000u;
  validity_state_bitfield_ = value;
}
inline void AutofillProfileSpecifics::set_validity_state_bitfield(int64_t value) {
  _internal_set_validity_state_bitfield(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.validity_state_bitfield)
}

// optional bool is_client_validity_states_updated = 25 [deprecated = true];
inline bool AutofillProfileSpecifics::_internal_has_is_client_validity_states_updated() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool AutofillProfileSpecifics::has_is_client_validity_states_updated() const {
  return _internal_has_is_client_validity_states_updated();
}
inline void AutofillProfileSpecifics::clear_is_client_validity_states_updated() {
  is_client_validity_states_updated_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool AutofillProfileSpecifics::_internal_is_client_validity_states_updated() const {
  return is_client_validity_states_updated_;
}
inline bool AutofillProfileSpecifics::is_client_validity_states_updated() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillProfileSpecifics.is_client_validity_states_updated)
  return _internal_is_client_validity_states_updated();
}
inline void AutofillProfileSpecifics::_internal_set_is_client_validity_states_updated(bool value) {
  _has_bits_[0] |= 0x20000000u;
  is_client_validity_states_updated_ = value;
}
inline void AutofillProfileSpecifics::set_is_client_validity_states_updated(bool value) {
  _internal_set_is_client_validity_states_updated(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillProfileSpecifics.is_client_validity_states_updated)
}

// -------------------------------------------------------------------

// AutofillSpecifics

// optional string name = 1;
inline bool AutofillSpecifics::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AutofillSpecifics::has_name() const {
  return _internal_has_name();
}
inline void AutofillSpecifics::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AutofillSpecifics::name() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillSpecifics.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillSpecifics::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillSpecifics.name)
}
inline std::string* AutofillSpecifics::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillSpecifics.name)
  return _s;
}
inline const std::string& AutofillSpecifics::_internal_name() const {
  return name_.Get();
}
inline void AutofillSpecifics::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillSpecifics::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillSpecifics::release_name() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillSpecifics.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillSpecifics::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillSpecifics.name)
}

// optional string value = 2;
inline bool AutofillSpecifics::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AutofillSpecifics::has_value() const {
  return _internal_has_value();
}
inline void AutofillSpecifics::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AutofillSpecifics::value() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillSpecifics.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillSpecifics::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillSpecifics.value)
}
inline std::string* AutofillSpecifics::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillSpecifics.value)
  return _s;
}
inline const std::string& AutofillSpecifics::_internal_value() const {
  return value_.Get();
}
inline void AutofillSpecifics::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillSpecifics::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillSpecifics::release_value() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillSpecifics.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillSpecifics::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillSpecifics.value)
}

// repeated int64 usage_timestamp = 3;
inline int AutofillSpecifics::_internal_usage_timestamp_size() const {
  return usage_timestamp_.size();
}
inline int AutofillSpecifics::usage_timestamp_size() const {
  return _internal_usage_timestamp_size();
}
inline void AutofillSpecifics::clear_usage_timestamp() {
  usage_timestamp_.Clear();
}
inline int64_t AutofillSpecifics::_internal_usage_timestamp(int index) const {
  return usage_timestamp_.Get(index);
}
inline int64_t AutofillSpecifics::usage_timestamp(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillSpecifics.usage_timestamp)
  return _internal_usage_timestamp(index);
}
inline void AutofillSpecifics::set_usage_timestamp(int index, int64_t value) {
  usage_timestamp_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillSpecifics.usage_timestamp)
}
inline void AutofillSpecifics::_internal_add_usage_timestamp(int64_t value) {
  usage_timestamp_.Add(value);
}
inline void AutofillSpecifics::add_usage_timestamp(int64_t value) {
  _internal_add_usage_timestamp(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillSpecifics.usage_timestamp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AutofillSpecifics::_internal_usage_timestamp() const {
  return usage_timestamp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AutofillSpecifics::usage_timestamp() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillSpecifics.usage_timestamp)
  return _internal_usage_timestamp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AutofillSpecifics::_internal_mutable_usage_timestamp() {
  return &usage_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AutofillSpecifics::mutable_usage_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillSpecifics.usage_timestamp)
  return _internal_mutable_usage_timestamp();
}

// optional .sync_pb.AutofillProfileSpecifics profile = 4;
inline bool AutofillSpecifics::_internal_has_profile() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || profile_ != nullptr);
  return value;
}
inline bool AutofillSpecifics::has_profile() const {
  return _internal_has_profile();
}
inline void AutofillSpecifics::clear_profile() {
  if (profile_ != nullptr) profile_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::AutofillProfileSpecifics& AutofillSpecifics::_internal_profile() const {
  const ::sync_pb::AutofillProfileSpecifics* p = profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::AutofillProfileSpecifics&>(
      ::sync_pb::_AutofillProfileSpecifics_default_instance_);
}
inline const ::sync_pb::AutofillProfileSpecifics& AutofillSpecifics::profile() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillSpecifics.profile)
  return _internal_profile();
}
inline void AutofillSpecifics::unsafe_arena_set_allocated_profile(
    ::sync_pb::AutofillProfileSpecifics* profile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile_);
  }
  profile_ = profile;
  if (profile) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.AutofillSpecifics.profile)
}
inline ::sync_pb::AutofillProfileSpecifics* AutofillSpecifics::release_profile() {
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::AutofillProfileSpecifics* temp = profile_;
  profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::AutofillProfileSpecifics* AutofillSpecifics::unsafe_arena_release_profile() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillSpecifics.profile)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::AutofillProfileSpecifics* temp = profile_;
  profile_ = nullptr;
  return temp;
}
inline ::sync_pb::AutofillProfileSpecifics* AutofillSpecifics::_internal_mutable_profile() {
  _has_bits_[0] |= 0x00000004u;
  if (profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::AutofillProfileSpecifics>(GetArenaForAllocation());
    profile_ = p;
  }
  return profile_;
}
inline ::sync_pb::AutofillProfileSpecifics* AutofillSpecifics::mutable_profile() {
  ::sync_pb::AutofillProfileSpecifics* _msg = _internal_mutable_profile();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillSpecifics.profile)
  return _msg;
}
inline void AutofillSpecifics::set_allocated_profile(::sync_pb::AutofillProfileSpecifics* profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete profile_;
  }
  if (profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(profile);
    if (message_arena != submessage_arena) {
      profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  profile_ = profile;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillSpecifics.profile)
}

// -------------------------------------------------------------------

// CloudTokenData

// optional string suffix = 1;
inline bool CloudTokenData::_internal_has_suffix() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CloudTokenData::has_suffix() const {
  return _internal_has_suffix();
}
inline void CloudTokenData::clear_suffix() {
  suffix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloudTokenData::suffix() const {
  // @@protoc_insertion_point(field_get:sync_pb.CloudTokenData.suffix)
  return _internal_suffix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloudTokenData::set_suffix(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 suffix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.CloudTokenData.suffix)
}
inline std::string* CloudTokenData::mutable_suffix() {
  std::string* _s = _internal_mutable_suffix();
  // @@protoc_insertion_point(field_mutable:sync_pb.CloudTokenData.suffix)
  return _s;
}
inline const std::string& CloudTokenData::_internal_suffix() const {
  return suffix_.Get();
}
inline void CloudTokenData::_internal_set_suffix(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  suffix_.Set(value, GetArenaForAllocation());
}
inline std::string* CloudTokenData::_internal_mutable_suffix() {
  _has_bits_[0] |= 0x00000001u;
  return suffix_.Mutable(GetArenaForAllocation());
}
inline std::string* CloudTokenData::release_suffix() {
  // @@protoc_insertion_point(field_release:sync_pb.CloudTokenData.suffix)
  if (!_internal_has_suffix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = suffix_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (suffix_.IsDefault()) {
    suffix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CloudTokenData::set_allocated_suffix(std::string* suffix) {
  if (suffix != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  suffix_.SetAllocated(suffix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (suffix_.IsDefault()) {
    suffix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CloudTokenData.suffix)
}

// optional int32 exp_month = 2;
inline bool CloudTokenData::_internal_has_exp_month() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CloudTokenData::has_exp_month() const {
  return _internal_has_exp_month();
}
inline void CloudTokenData::clear_exp_month() {
  exp_month_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CloudTokenData::_internal_exp_month() const {
  return exp_month_;
}
inline int32_t CloudTokenData::exp_month() const {
  // @@protoc_insertion_point(field_get:sync_pb.CloudTokenData.exp_month)
  return _internal_exp_month();
}
inline void CloudTokenData::_internal_set_exp_month(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  exp_month_ = value;
}
inline void CloudTokenData::set_exp_month(int32_t value) {
  _internal_set_exp_month(value);
  // @@protoc_insertion_point(field_set:sync_pb.CloudTokenData.exp_month)
}

// optional int32 exp_year = 3;
inline bool CloudTokenData::_internal_has_exp_year() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CloudTokenData::has_exp_year() const {
  return _internal_has_exp_year();
}
inline void CloudTokenData::clear_exp_year() {
  exp_year_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CloudTokenData::_internal_exp_year() const {
  return exp_year_;
}
inline int32_t CloudTokenData::exp_year() const {
  // @@protoc_insertion_point(field_get:sync_pb.CloudTokenData.exp_year)
  return _internal_exp_year();
}
inline void CloudTokenData::_internal_set_exp_year(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  exp_year_ = value;
}
inline void CloudTokenData::set_exp_year(int32_t value) {
  _internal_set_exp_year(value);
  // @@protoc_insertion_point(field_set:sync_pb.CloudTokenData.exp_year)
}

// optional string art_fife_url = 4;
inline bool CloudTokenData::_internal_has_art_fife_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CloudTokenData::has_art_fife_url() const {
  return _internal_has_art_fife_url();
}
inline void CloudTokenData::clear_art_fife_url() {
  art_fife_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CloudTokenData::art_fife_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.CloudTokenData.art_fife_url)
  return _internal_art_fife_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloudTokenData::set_art_fife_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 art_fife_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.CloudTokenData.art_fife_url)
}
inline std::string* CloudTokenData::mutable_art_fife_url() {
  std::string* _s = _internal_mutable_art_fife_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.CloudTokenData.art_fife_url)
  return _s;
}
inline const std::string& CloudTokenData::_internal_art_fife_url() const {
  return art_fife_url_.Get();
}
inline void CloudTokenData::_internal_set_art_fife_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  art_fife_url_.Set(value, GetArenaForAllocation());
}
inline std::string* CloudTokenData::_internal_mutable_art_fife_url() {
  _has_bits_[0] |= 0x00000002u;
  return art_fife_url_.Mutable(GetArenaForAllocation());
}
inline std::string* CloudTokenData::release_art_fife_url() {
  // @@protoc_insertion_point(field_release:sync_pb.CloudTokenData.art_fife_url)
  if (!_internal_has_art_fife_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = art_fife_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (art_fife_url_.IsDefault()) {
    art_fife_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CloudTokenData::set_allocated_art_fife_url(std::string* art_fife_url) {
  if (art_fife_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  art_fife_url_.SetAllocated(art_fife_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (art_fife_url_.IsDefault()) {
    art_fife_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CloudTokenData.art_fife_url)
}

// optional string instrument_token = 5;
inline bool CloudTokenData::_internal_has_instrument_token() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CloudTokenData::has_instrument_token() const {
  return _internal_has_instrument_token();
}
inline void CloudTokenData::clear_instrument_token() {
  instrument_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CloudTokenData::instrument_token() const {
  // @@protoc_insertion_point(field_get:sync_pb.CloudTokenData.instrument_token)
  return _internal_instrument_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloudTokenData::set_instrument_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 instrument_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.CloudTokenData.instrument_token)
}
inline std::string* CloudTokenData::mutable_instrument_token() {
  std::string* _s = _internal_mutable_instrument_token();
  // @@protoc_insertion_point(field_mutable:sync_pb.CloudTokenData.instrument_token)
  return _s;
}
inline const std::string& CloudTokenData::_internal_instrument_token() const {
  return instrument_token_.Get();
}
inline void CloudTokenData::_internal_set_instrument_token(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  instrument_token_.Set(value, GetArenaForAllocation());
}
inline std::string* CloudTokenData::_internal_mutable_instrument_token() {
  _has_bits_[0] |= 0x00000004u;
  return instrument_token_.Mutable(GetArenaForAllocation());
}
inline std::string* CloudTokenData::release_instrument_token() {
  // @@protoc_insertion_point(field_release:sync_pb.CloudTokenData.instrument_token)
  if (!_internal_has_instrument_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = instrument_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instrument_token_.IsDefault()) {
    instrument_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CloudTokenData::set_allocated_instrument_token(std::string* instrument_token) {
  if (instrument_token != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  instrument_token_.SetAllocated(instrument_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instrument_token_.IsDefault()) {
    instrument_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CloudTokenData.instrument_token)
}

// -------------------------------------------------------------------

// CardIssuer

// optional .sync_pb.CardIssuer.Issuer issuer = 1;
inline bool CardIssuer::_internal_has_issuer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CardIssuer::has_issuer() const {
  return _internal_has_issuer();
}
inline void CardIssuer::clear_issuer() {
  issuer_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::sync_pb::CardIssuer_Issuer CardIssuer::_internal_issuer() const {
  return static_cast< ::sync_pb::CardIssuer_Issuer >(issuer_);
}
inline ::sync_pb::CardIssuer_Issuer CardIssuer::issuer() const {
  // @@protoc_insertion_point(field_get:sync_pb.CardIssuer.issuer)
  return _internal_issuer();
}
inline void CardIssuer::_internal_set_issuer(::sync_pb::CardIssuer_Issuer value) {
  assert(::sync_pb::CardIssuer_Issuer_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  issuer_ = value;
}
inline void CardIssuer::set_issuer(::sync_pb::CardIssuer_Issuer value) {
  _internal_set_issuer(value);
  // @@protoc_insertion_point(field_set:sync_pb.CardIssuer.issuer)
}

// -------------------------------------------------------------------

// WalletMaskedCreditCard

// optional string id = 1;
inline bool WalletMaskedCreditCard::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WalletMaskedCreditCard::has_id() const {
  return _internal_has_id();
}
inline void WalletMaskedCreditCard::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WalletMaskedCreditCard::id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletMaskedCreditCard::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.id)
}
inline std::string* WalletMaskedCreditCard::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletMaskedCreditCard.id)
  return _s;
}
inline const std::string& WalletMaskedCreditCard::_internal_id() const {
  return id_.Get();
}
inline void WalletMaskedCreditCard::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletMaskedCreditCard::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletMaskedCreditCard::release_id() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletMaskedCreditCard.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletMaskedCreditCard::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletMaskedCreditCard.id)
}

// optional .sync_pb.WalletMaskedCreditCard.WalletCardStatus status = 2;
inline bool WalletMaskedCreditCard::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool WalletMaskedCreditCard::has_status() const {
  return _internal_has_status();
}
inline void WalletMaskedCreditCard::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::sync_pb::WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard::_internal_status() const {
  return static_cast< ::sync_pb::WalletMaskedCreditCard_WalletCardStatus >(status_);
}
inline ::sync_pb::WalletMaskedCreditCard_WalletCardStatus WalletMaskedCreditCard::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.status)
  return _internal_status();
}
inline void WalletMaskedCreditCard::_internal_set_status(::sync_pb::WalletMaskedCreditCard_WalletCardStatus value) {
  assert(::sync_pb::WalletMaskedCreditCard_WalletCardStatus_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  status_ = value;
}
inline void WalletMaskedCreditCard::set_status(::sync_pb::WalletMaskedCreditCard_WalletCardStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.status)
}

// optional string name_on_card = 3;
inline bool WalletMaskedCreditCard::_internal_has_name_on_card() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WalletMaskedCreditCard::has_name_on_card() const {
  return _internal_has_name_on_card();
}
inline void WalletMaskedCreditCard::clear_name_on_card() {
  name_on_card_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WalletMaskedCreditCard::name_on_card() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.name_on_card)
  return _internal_name_on_card();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletMaskedCreditCard::set_name_on_card(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 name_on_card_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.name_on_card)
}
inline std::string* WalletMaskedCreditCard::mutable_name_on_card() {
  std::string* _s = _internal_mutable_name_on_card();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletMaskedCreditCard.name_on_card)
  return _s;
}
inline const std::string& WalletMaskedCreditCard::_internal_name_on_card() const {
  return name_on_card_.Get();
}
inline void WalletMaskedCreditCard::_internal_set_name_on_card(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_on_card_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletMaskedCreditCard::_internal_mutable_name_on_card() {
  _has_bits_[0] |= 0x00000002u;
  return name_on_card_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletMaskedCreditCard::release_name_on_card() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletMaskedCreditCard.name_on_card)
  if (!_internal_has_name_on_card()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = name_on_card_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_on_card_.IsDefault()) {
    name_on_card_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletMaskedCreditCard::set_allocated_name_on_card(std::string* name_on_card) {
  if (name_on_card != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_on_card_.SetAllocated(name_on_card, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_on_card_.IsDefault()) {
    name_on_card_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletMaskedCreditCard.name_on_card)
}

// optional .sync_pb.WalletMaskedCreditCard.WalletCardType type = 4;
inline bool WalletMaskedCreditCard::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool WalletMaskedCreditCard::has_type() const {
  return _internal_has_type();
}
inline void WalletMaskedCreditCard::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::sync_pb::WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::_internal_type() const {
  return static_cast< ::sync_pb::WalletMaskedCreditCard_WalletCardType >(type_);
}
inline ::sync_pb::WalletMaskedCreditCard_WalletCardType WalletMaskedCreditCard::type() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.type)
  return _internal_type();
}
inline void WalletMaskedCreditCard::_internal_set_type(::sync_pb::WalletMaskedCreditCard_WalletCardType value) {
  assert(::sync_pb::WalletMaskedCreditCard_WalletCardType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  type_ = value;
}
inline void WalletMaskedCreditCard::set_type(::sync_pb::WalletMaskedCreditCard_WalletCardType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.type)
}

// optional string last_four = 5;
inline bool WalletMaskedCreditCard::_internal_has_last_four() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WalletMaskedCreditCard::has_last_four() const {
  return _internal_has_last_four();
}
inline void WalletMaskedCreditCard::clear_last_four() {
  last_four_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WalletMaskedCreditCard::last_four() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.last_four)
  return _internal_last_four();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletMaskedCreditCard::set_last_four(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 last_four_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.last_four)
}
inline std::string* WalletMaskedCreditCard::mutable_last_four() {
  std::string* _s = _internal_mutable_last_four();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletMaskedCreditCard.last_four)
  return _s;
}
inline const std::string& WalletMaskedCreditCard::_internal_last_four() const {
  return last_four_.Get();
}
inline void WalletMaskedCreditCard::_internal_set_last_four(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  last_four_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletMaskedCreditCard::_internal_mutable_last_four() {
  _has_bits_[0] |= 0x00000004u;
  return last_four_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletMaskedCreditCard::release_last_four() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletMaskedCreditCard.last_four)
  if (!_internal_has_last_four()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = last_four_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_four_.IsDefault()) {
    last_four_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletMaskedCreditCard::set_allocated_last_four(std::string* last_four) {
  if (last_four != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  last_four_.SetAllocated(last_four, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_four_.IsDefault()) {
    last_four_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletMaskedCreditCard.last_four)
}

// optional int32 exp_month = 6;
inline bool WalletMaskedCreditCard::_internal_has_exp_month() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool WalletMaskedCreditCard::has_exp_month() const {
  return _internal_has_exp_month();
}
inline void WalletMaskedCreditCard::clear_exp_month() {
  exp_month_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline int32_t WalletMaskedCreditCard::_internal_exp_month() const {
  return exp_month_;
}
inline int32_t WalletMaskedCreditCard::exp_month() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.exp_month)
  return _internal_exp_month();
}
inline void WalletMaskedCreditCard::_internal_set_exp_month(int32_t value) {
  _has_bits_[0] |= 0x00001000u;
  exp_month_ = value;
}
inline void WalletMaskedCreditCard::set_exp_month(int32_t value) {
  _internal_set_exp_month(value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.exp_month)
}

// optional int32 exp_year = 7;
inline bool WalletMaskedCreditCard::_internal_has_exp_year() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool WalletMaskedCreditCard::has_exp_year() const {
  return _internal_has_exp_year();
}
inline void WalletMaskedCreditCard::clear_exp_year() {
  exp_year_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline int32_t WalletMaskedCreditCard::_internal_exp_year() const {
  return exp_year_;
}
inline int32_t WalletMaskedCreditCard::exp_year() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.exp_year)
  return _internal_exp_year();
}
inline void WalletMaskedCreditCard::_internal_set_exp_year(int32_t value) {
  _has_bits_[0] |= 0x00002000u;
  exp_year_ = value;
}
inline void WalletMaskedCreditCard::set_exp_year(int32_t value) {
  _internal_set_exp_year(value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.exp_year)
}

// optional string billing_address_id = 8;
inline bool WalletMaskedCreditCard::_internal_has_billing_address_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WalletMaskedCreditCard::has_billing_address_id() const {
  return _internal_has_billing_address_id();
}
inline void WalletMaskedCreditCard::clear_billing_address_id() {
  billing_address_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& WalletMaskedCreditCard::billing_address_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.billing_address_id)
  return _internal_billing_address_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletMaskedCreditCard::set_billing_address_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 billing_address_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.billing_address_id)
}
inline std::string* WalletMaskedCreditCard::mutable_billing_address_id() {
  std::string* _s = _internal_mutable_billing_address_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletMaskedCreditCard.billing_address_id)
  return _s;
}
inline const std::string& WalletMaskedCreditCard::_internal_billing_address_id() const {
  return billing_address_id_.Get();
}
inline void WalletMaskedCreditCard::_internal_set_billing_address_id(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  billing_address_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletMaskedCreditCard::_internal_mutable_billing_address_id() {
  _has_bits_[0] |= 0x00000008u;
  return billing_address_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletMaskedCreditCard::release_billing_address_id() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletMaskedCreditCard.billing_address_id)
  if (!_internal_has_billing_address_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = billing_address_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (billing_address_id_.IsDefault()) {
    billing_address_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletMaskedCreditCard::set_allocated_billing_address_id(std::string* billing_address_id) {
  if (billing_address_id != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  billing_address_id_.SetAllocated(billing_address_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (billing_address_id_.IsDefault()) {
    billing_address_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletMaskedCreditCard.billing_address_id)
}

// optional string bank_name = 10;
inline bool WalletMaskedCreditCard::_internal_has_bank_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WalletMaskedCreditCard::has_bank_name() const {
  return _internal_has_bank_name();
}
inline void WalletMaskedCreditCard::clear_bank_name() {
  bank_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& WalletMaskedCreditCard::bank_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.bank_name)
  return _internal_bank_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletMaskedCreditCard::set_bank_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 bank_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.bank_name)
}
inline std::string* WalletMaskedCreditCard::mutable_bank_name() {
  std::string* _s = _internal_mutable_bank_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletMaskedCreditCard.bank_name)
  return _s;
}
inline const std::string& WalletMaskedCreditCard::_internal_bank_name() const {
  return bank_name_.Get();
}
inline void WalletMaskedCreditCard::_internal_set_bank_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  bank_name_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletMaskedCreditCard::_internal_mutable_bank_name() {
  _has_bits_[0] |= 0x00000010u;
  return bank_name_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletMaskedCreditCard::release_bank_name() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletMaskedCreditCard.bank_name)
  if (!_internal_has_bank_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = bank_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bank_name_.IsDefault()) {
    bank_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletMaskedCreditCard::set_allocated_bank_name(std::string* bank_name) {
  if (bank_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  bank_name_.SetAllocated(bank_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bank_name_.IsDefault()) {
    bank_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletMaskedCreditCard.bank_name)
}

// optional .sync_pb.CloudTokenData cloud_token_data = 11;
inline bool WalletMaskedCreditCard::_internal_has_cloud_token_data() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || cloud_token_data_ != nullptr);
  return value;
}
inline bool WalletMaskedCreditCard::has_cloud_token_data() const {
  return _internal_has_cloud_token_data();
}
inline void WalletMaskedCreditCard::clear_cloud_token_data() {
  if (cloud_token_data_ != nullptr) cloud_token_data_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::sync_pb::CloudTokenData& WalletMaskedCreditCard::_internal_cloud_token_data() const {
  const ::sync_pb::CloudTokenData* p = cloud_token_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::CloudTokenData&>(
      ::sync_pb::_CloudTokenData_default_instance_);
}
inline const ::sync_pb::CloudTokenData& WalletMaskedCreditCard::cloud_token_data() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.cloud_token_data)
  return _internal_cloud_token_data();
}
inline void WalletMaskedCreditCard::unsafe_arena_set_allocated_cloud_token_data(
    ::sync_pb::CloudTokenData* cloud_token_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cloud_token_data_);
  }
  cloud_token_data_ = cloud_token_data;
  if (cloud_token_data) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.WalletMaskedCreditCard.cloud_token_data)
}
inline ::sync_pb::CloudTokenData* WalletMaskedCreditCard::release_cloud_token_data() {
  _has_bits_[0] &= ~0x00000100u;
  ::sync_pb::CloudTokenData* temp = cloud_token_data_;
  cloud_token_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::CloudTokenData* WalletMaskedCreditCard::unsafe_arena_release_cloud_token_data() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletMaskedCreditCard.cloud_token_data)
  _has_bits_[0] &= ~0x00000100u;
  ::sync_pb::CloudTokenData* temp = cloud_token_data_;
  cloud_token_data_ = nullptr;
  return temp;
}
inline ::sync_pb::CloudTokenData* WalletMaskedCreditCard::_internal_mutable_cloud_token_data() {
  _has_bits_[0] |= 0x00000100u;
  if (cloud_token_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::CloudTokenData>(GetArenaForAllocation());
    cloud_token_data_ = p;
  }
  return cloud_token_data_;
}
inline ::sync_pb::CloudTokenData* WalletMaskedCreditCard::mutable_cloud_token_data() {
  ::sync_pb::CloudTokenData* _msg = _internal_mutable_cloud_token_data();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletMaskedCreditCard.cloud_token_data)
  return _msg;
}
inline void WalletMaskedCreditCard::set_allocated_cloud_token_data(::sync_pb::CloudTokenData* cloud_token_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cloud_token_data_;
  }
  if (cloud_token_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cloud_token_data);
    if (message_arena != submessage_arena) {
      cloud_token_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cloud_token_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  cloud_token_data_ = cloud_token_data;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletMaskedCreditCard.cloud_token_data)
}

// optional string nickname = 12;
inline bool WalletMaskedCreditCard::_internal_has_nickname() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WalletMaskedCreditCard::has_nickname() const {
  return _internal_has_nickname();
}
inline void WalletMaskedCreditCard::clear_nickname() {
  nickname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& WalletMaskedCreditCard::nickname() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletMaskedCreditCard::set_nickname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.nickname)
}
inline std::string* WalletMaskedCreditCard::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletMaskedCreditCard.nickname)
  return _s;
}
inline const std::string& WalletMaskedCreditCard::_internal_nickname() const {
  return nickname_.Get();
}
inline void WalletMaskedCreditCard::_internal_set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletMaskedCreditCard::_internal_mutable_nickname() {
  _has_bits_[0] |= 0x00000020u;
  return nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletMaskedCreditCard::release_nickname() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletMaskedCreditCard.nickname)
  if (!_internal_has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = nickname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault()) {
    nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletMaskedCreditCard::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault()) {
    nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletMaskedCreditCard.nickname)
}

// optional .sync_pb.CardIssuer card_issuer = 13;
inline bool WalletMaskedCreditCard::_internal_has_card_issuer() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || card_issuer_ != nullptr);
  return value;
}
inline bool WalletMaskedCreditCard::has_card_issuer() const {
  return _internal_has_card_issuer();
}
inline void WalletMaskedCreditCard::clear_card_issuer() {
  if (card_issuer_ != nullptr) card_issuer_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::sync_pb::CardIssuer& WalletMaskedCreditCard::_internal_card_issuer() const {
  const ::sync_pb::CardIssuer* p = card_issuer_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::CardIssuer&>(
      ::sync_pb::_CardIssuer_default_instance_);
}
inline const ::sync_pb::CardIssuer& WalletMaskedCreditCard::card_issuer() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.card_issuer)
  return _internal_card_issuer();
}
inline void WalletMaskedCreditCard::unsafe_arena_set_allocated_card_issuer(
    ::sync_pb::CardIssuer* card_issuer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(card_issuer_);
  }
  card_issuer_ = card_issuer;
  if (card_issuer) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.WalletMaskedCreditCard.card_issuer)
}
inline ::sync_pb::CardIssuer* WalletMaskedCreditCard::release_card_issuer() {
  _has_bits_[0] &= ~0x00000200u;
  ::sync_pb::CardIssuer* temp = card_issuer_;
  card_issuer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::CardIssuer* WalletMaskedCreditCard::unsafe_arena_release_card_issuer() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletMaskedCreditCard.card_issuer)
  _has_bits_[0] &= ~0x00000200u;
  ::sync_pb::CardIssuer* temp = card_issuer_;
  card_issuer_ = nullptr;
  return temp;
}
inline ::sync_pb::CardIssuer* WalletMaskedCreditCard::_internal_mutable_card_issuer() {
  _has_bits_[0] |= 0x00000200u;
  if (card_issuer_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::CardIssuer>(GetArenaForAllocation());
    card_issuer_ = p;
  }
  return card_issuer_;
}
inline ::sync_pb::CardIssuer* WalletMaskedCreditCard::mutable_card_issuer() {
  ::sync_pb::CardIssuer* _msg = _internal_mutable_card_issuer();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletMaskedCreditCard.card_issuer)
  return _msg;
}
inline void WalletMaskedCreditCard::set_allocated_card_issuer(::sync_pb::CardIssuer* card_issuer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete card_issuer_;
  }
  if (card_issuer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(card_issuer);
    if (message_arena != submessage_arena) {
      card_issuer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, card_issuer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  card_issuer_ = card_issuer;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletMaskedCreditCard.card_issuer)
}

// optional int64 instrument_id = 15;
inline bool WalletMaskedCreditCard::_internal_has_instrument_id() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool WalletMaskedCreditCard::has_instrument_id() const {
  return _internal_has_instrument_id();
}
inline void WalletMaskedCreditCard::clear_instrument_id() {
  instrument_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00004000u;
}
inline int64_t WalletMaskedCreditCard::_internal_instrument_id() const {
  return instrument_id_;
}
inline int64_t WalletMaskedCreditCard::instrument_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.instrument_id)
  return _internal_instrument_id();
}
inline void WalletMaskedCreditCard::_internal_set_instrument_id(int64_t value) {
  _has_bits_[0] |= 0x00004000u;
  instrument_id_ = value;
}
inline void WalletMaskedCreditCard::set_instrument_id(int64_t value) {
  _internal_set_instrument_id(value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.instrument_id)
}

// optional .sync_pb.WalletMaskedCreditCard.VirtualCardEnrollmentState virtual_card_enrollment_state = 16;
inline bool WalletMaskedCreditCard::_internal_has_virtual_card_enrollment_state() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool WalletMaskedCreditCard::has_virtual_card_enrollment_state() const {
  return _internal_has_virtual_card_enrollment_state();
}
inline void WalletMaskedCreditCard::clear_virtual_card_enrollment_state() {
  virtual_card_enrollment_state_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::sync_pb::WalletMaskedCreditCard_VirtualCardEnrollmentState WalletMaskedCreditCard::_internal_virtual_card_enrollment_state() const {
  return static_cast< ::sync_pb::WalletMaskedCreditCard_VirtualCardEnrollmentState >(virtual_card_enrollment_state_);
}
inline ::sync_pb::WalletMaskedCreditCard_VirtualCardEnrollmentState WalletMaskedCreditCard::virtual_card_enrollment_state() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.virtual_card_enrollment_state)
  return _internal_virtual_card_enrollment_state();
}
inline void WalletMaskedCreditCard::_internal_set_virtual_card_enrollment_state(::sync_pb::WalletMaskedCreditCard_VirtualCardEnrollmentState value) {
  assert(::sync_pb::WalletMaskedCreditCard_VirtualCardEnrollmentState_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  virtual_card_enrollment_state_ = value;
}
inline void WalletMaskedCreditCard::set_virtual_card_enrollment_state(::sync_pb::WalletMaskedCreditCard_VirtualCardEnrollmentState value) {
  _internal_set_virtual_card_enrollment_state(value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.virtual_card_enrollment_state)
}

// optional string card_art_url = 17;
inline bool WalletMaskedCreditCard::_internal_has_card_art_url() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool WalletMaskedCreditCard::has_card_art_url() const {
  return _internal_has_card_art_url();
}
inline void WalletMaskedCreditCard::clear_card_art_url() {
  card_art_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& WalletMaskedCreditCard::card_art_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.card_art_url)
  return _internal_card_art_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletMaskedCreditCard::set_card_art_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 card_art_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.card_art_url)
}
inline std::string* WalletMaskedCreditCard::mutable_card_art_url() {
  std::string* _s = _internal_mutable_card_art_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletMaskedCreditCard.card_art_url)
  return _s;
}
inline const std::string& WalletMaskedCreditCard::_internal_card_art_url() const {
  return card_art_url_.Get();
}
inline void WalletMaskedCreditCard::_internal_set_card_art_url(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  card_art_url_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletMaskedCreditCard::_internal_mutable_card_art_url() {
  _has_bits_[0] |= 0x00000040u;
  return card_art_url_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletMaskedCreditCard::release_card_art_url() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletMaskedCreditCard.card_art_url)
  if (!_internal_has_card_art_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = card_art_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (card_art_url_.IsDefault()) {
    card_art_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletMaskedCreditCard::set_allocated_card_art_url(std::string* card_art_url) {
  if (card_art_url != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  card_art_url_.SetAllocated(card_art_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (card_art_url_.IsDefault()) {
    card_art_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletMaskedCreditCard.card_art_url)
}

// optional string product_description = 18;
inline bool WalletMaskedCreditCard::_internal_has_product_description() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool WalletMaskedCreditCard::has_product_description() const {
  return _internal_has_product_description();
}
inline void WalletMaskedCreditCard::clear_product_description() {
  product_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& WalletMaskedCreditCard::product_description() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMaskedCreditCard.product_description)
  return _internal_product_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletMaskedCreditCard::set_product_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 product_description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletMaskedCreditCard.product_description)
}
inline std::string* WalletMaskedCreditCard::mutable_product_description() {
  std::string* _s = _internal_mutable_product_description();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletMaskedCreditCard.product_description)
  return _s;
}
inline const std::string& WalletMaskedCreditCard::_internal_product_description() const {
  return product_description_.Get();
}
inline void WalletMaskedCreditCard::_internal_set_product_description(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  product_description_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletMaskedCreditCard::_internal_mutable_product_description() {
  _has_bits_[0] |= 0x00000080u;
  return product_description_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletMaskedCreditCard::release_product_description() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletMaskedCreditCard.product_description)
  if (!_internal_has_product_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = product_description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_description_.IsDefault()) {
    product_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletMaskedCreditCard::set_allocated_product_description(std::string* product_description) {
  if (product_description != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  product_description_.SetAllocated(product_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_description_.IsDefault()) {
    product_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletMaskedCreditCard.product_description)
}

// -------------------------------------------------------------------

// WalletPostalAddress

// optional string id = 1;
inline bool WalletPostalAddress::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WalletPostalAddress::has_id() const {
  return _internal_has_id();
}
inline void WalletPostalAddress::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WalletPostalAddress::id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletPostalAddress::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.id)
}
inline std::string* WalletPostalAddress::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.id)
  return _s;
}
inline const std::string& WalletPostalAddress::_internal_id() const {
  return id_.Get();
}
inline void WalletPostalAddress::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::release_id() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletPostalAddress::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.id)
}

// optional string recipient_name = 12;
inline bool WalletPostalAddress::_internal_has_recipient_name() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool WalletPostalAddress::has_recipient_name() const {
  return _internal_has_recipient_name();
}
inline void WalletPostalAddress::clear_recipient_name() {
  recipient_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& WalletPostalAddress::recipient_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.recipient_name)
  return _internal_recipient_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletPostalAddress::set_recipient_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000400u;
 recipient_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.recipient_name)
}
inline std::string* WalletPostalAddress::mutable_recipient_name() {
  std::string* _s = _internal_mutable_recipient_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.recipient_name)
  return _s;
}
inline const std::string& WalletPostalAddress::_internal_recipient_name() const {
  return recipient_name_.Get();
}
inline void WalletPostalAddress::_internal_set_recipient_name(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  recipient_name_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::_internal_mutable_recipient_name() {
  _has_bits_[0] |= 0x00000400u;
  return recipient_name_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::release_recipient_name() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.recipient_name)
  if (!_internal_has_recipient_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  auto* p = recipient_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (recipient_name_.IsDefault()) {
    recipient_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletPostalAddress::set_allocated_recipient_name(std::string* recipient_name) {
  if (recipient_name != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  recipient_name_.SetAllocated(recipient_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (recipient_name_.IsDefault()) {
    recipient_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.recipient_name)
}

// optional string company_name = 2;
inline bool WalletPostalAddress::_internal_has_company_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WalletPostalAddress::has_company_name() const {
  return _internal_has_company_name();
}
inline void WalletPostalAddress::clear_company_name() {
  company_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WalletPostalAddress::company_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.company_name)
  return _internal_company_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletPostalAddress::set_company_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 company_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.company_name)
}
inline std::string* WalletPostalAddress::mutable_company_name() {
  std::string* _s = _internal_mutable_company_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.company_name)
  return _s;
}
inline const std::string& WalletPostalAddress::_internal_company_name() const {
  return company_name_.Get();
}
inline void WalletPostalAddress::_internal_set_company_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  company_name_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::_internal_mutable_company_name() {
  _has_bits_[0] |= 0x00000002u;
  return company_name_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::release_company_name() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.company_name)
  if (!_internal_has_company_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = company_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (company_name_.IsDefault()) {
    company_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletPostalAddress::set_allocated_company_name(std::string* company_name) {
  if (company_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  company_name_.SetAllocated(company_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (company_name_.IsDefault()) {
    company_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.company_name)
}

// repeated string street_address = 3;
inline int WalletPostalAddress::_internal_street_address_size() const {
  return street_address_.size();
}
inline int WalletPostalAddress::street_address_size() const {
  return _internal_street_address_size();
}
inline void WalletPostalAddress::clear_street_address() {
  street_address_.Clear();
}
inline std::string* WalletPostalAddress::add_street_address() {
  std::string* _s = _internal_add_street_address();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.WalletPostalAddress.street_address)
  return _s;
}
inline const std::string& WalletPostalAddress::_internal_street_address(int index) const {
  return street_address_.Get(index);
}
inline const std::string& WalletPostalAddress::street_address(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.street_address)
  return _internal_street_address(index);
}
inline std::string* WalletPostalAddress::mutable_street_address(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.street_address)
  return street_address_.Mutable(index);
}
inline void WalletPostalAddress::set_street_address(int index, const std::string& value) {
  street_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.street_address)
}
inline void WalletPostalAddress::set_street_address(int index, std::string&& value) {
  street_address_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.street_address)
}
inline void WalletPostalAddress::set_street_address(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  street_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.WalletPostalAddress.street_address)
}
inline void WalletPostalAddress::set_street_address(int index, const char* value, size_t size) {
  street_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WalletPostalAddress.street_address)
}
inline std::string* WalletPostalAddress::_internal_add_street_address() {
  return street_address_.Add();
}
inline void WalletPostalAddress::add_street_address(const std::string& value) {
  street_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.WalletPostalAddress.street_address)
}
inline void WalletPostalAddress::add_street_address(std::string&& value) {
  street_address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.WalletPostalAddress.street_address)
}
inline void WalletPostalAddress::add_street_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  street_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.WalletPostalAddress.street_address)
}
inline void WalletPostalAddress::add_street_address(const char* value, size_t size) {
  street_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.WalletPostalAddress.street_address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WalletPostalAddress::street_address() const {
  // @@protoc_insertion_point(field_list:sync_pb.WalletPostalAddress.street_address)
  return street_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WalletPostalAddress::mutable_street_address() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.WalletPostalAddress.street_address)
  return &street_address_;
}

// optional string address_1 = 4;
inline bool WalletPostalAddress::_internal_has_address_1() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WalletPostalAddress::has_address_1() const {
  return _internal_has_address_1();
}
inline void WalletPostalAddress::clear_address_1() {
  address_1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WalletPostalAddress::address_1() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.address_1)
  return _internal_address_1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletPostalAddress::set_address_1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 address_1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.address_1)
}
inline std::string* WalletPostalAddress::mutable_address_1() {
  std::string* _s = _internal_mutable_address_1();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.address_1)
  return _s;
}
inline const std::string& WalletPostalAddress::_internal_address_1() const {
  return address_1_.Get();
}
inline void WalletPostalAddress::_internal_set_address_1(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  address_1_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::_internal_mutable_address_1() {
  _has_bits_[0] |= 0x00000004u;
  return address_1_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::release_address_1() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.address_1)
  if (!_internal_has_address_1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = address_1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_1_.IsDefault()) {
    address_1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletPostalAddress::set_allocated_address_1(std::string* address_1) {
  if (address_1 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  address_1_.SetAllocated(address_1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_1_.IsDefault()) {
    address_1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.address_1)
}

// optional string address_2 = 5;
inline bool WalletPostalAddress::_internal_has_address_2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WalletPostalAddress::has_address_2() const {
  return _internal_has_address_2();
}
inline void WalletPostalAddress::clear_address_2() {
  address_2_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& WalletPostalAddress::address_2() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.address_2)
  return _internal_address_2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletPostalAddress::set_address_2(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 address_2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.address_2)
}
inline std::string* WalletPostalAddress::mutable_address_2() {
  std::string* _s = _internal_mutable_address_2();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.address_2)
  return _s;
}
inline const std::string& WalletPostalAddress::_internal_address_2() const {
  return address_2_.Get();
}
inline void WalletPostalAddress::_internal_set_address_2(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  address_2_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::_internal_mutable_address_2() {
  _has_bits_[0] |= 0x00000008u;
  return address_2_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::release_address_2() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.address_2)
  if (!_internal_has_address_2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = address_2_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_2_.IsDefault()) {
    address_2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletPostalAddress::set_allocated_address_2(std::string* address_2) {
  if (address_2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  address_2_.SetAllocated(address_2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_2_.IsDefault()) {
    address_2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.address_2)
}

// optional string address_3 = 6;
inline bool WalletPostalAddress::_internal_has_address_3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WalletPostalAddress::has_address_3() const {
  return _internal_has_address_3();
}
inline void WalletPostalAddress::clear_address_3() {
  address_3_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& WalletPostalAddress::address_3() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.address_3)
  return _internal_address_3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletPostalAddress::set_address_3(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 address_3_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.address_3)
}
inline std::string* WalletPostalAddress::mutable_address_3() {
  std::string* _s = _internal_mutable_address_3();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.address_3)
  return _s;
}
inline const std::string& WalletPostalAddress::_internal_address_3() const {
  return address_3_.Get();
}
inline void WalletPostalAddress::_internal_set_address_3(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  address_3_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::_internal_mutable_address_3() {
  _has_bits_[0] |= 0x00000010u;
  return address_3_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::release_address_3() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.address_3)
  if (!_internal_has_address_3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = address_3_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_3_.IsDefault()) {
    address_3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletPostalAddress::set_allocated_address_3(std::string* address_3) {
  if (address_3 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  address_3_.SetAllocated(address_3, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_3_.IsDefault()) {
    address_3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.address_3)
}

// optional string address_4 = 7;
inline bool WalletPostalAddress::_internal_has_address_4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WalletPostalAddress::has_address_4() const {
  return _internal_has_address_4();
}
inline void WalletPostalAddress::clear_address_4() {
  address_4_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& WalletPostalAddress::address_4() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.address_4)
  return _internal_address_4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletPostalAddress::set_address_4(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 address_4_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.address_4)
}
inline std::string* WalletPostalAddress::mutable_address_4() {
  std::string* _s = _internal_mutable_address_4();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.address_4)
  return _s;
}
inline const std::string& WalletPostalAddress::_internal_address_4() const {
  return address_4_.Get();
}
inline void WalletPostalAddress::_internal_set_address_4(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  address_4_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::_internal_mutable_address_4() {
  _has_bits_[0] |= 0x00000020u;
  return address_4_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::release_address_4() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.address_4)
  if (!_internal_has_address_4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = address_4_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_4_.IsDefault()) {
    address_4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletPostalAddress::set_allocated_address_4(std::string* address_4) {
  if (address_4 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  address_4_.SetAllocated(address_4, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_4_.IsDefault()) {
    address_4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.address_4)
}

// optional string postal_code = 8;
inline bool WalletPostalAddress::_internal_has_postal_code() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool WalletPostalAddress::has_postal_code() const {
  return _internal_has_postal_code();
}
inline void WalletPostalAddress::clear_postal_code() {
  postal_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& WalletPostalAddress::postal_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.postal_code)
  return _internal_postal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletPostalAddress::set_postal_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 postal_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.postal_code)
}
inline std::string* WalletPostalAddress::mutable_postal_code() {
  std::string* _s = _internal_mutable_postal_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.postal_code)
  return _s;
}
inline const std::string& WalletPostalAddress::_internal_postal_code() const {
  return postal_code_.Get();
}
inline void WalletPostalAddress::_internal_set_postal_code(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  postal_code_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::_internal_mutable_postal_code() {
  _has_bits_[0] |= 0x00000040u;
  return postal_code_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::release_postal_code() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.postal_code)
  if (!_internal_has_postal_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = postal_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (postal_code_.IsDefault()) {
    postal_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletPostalAddress::set_allocated_postal_code(std::string* postal_code) {
  if (postal_code != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  postal_code_.SetAllocated(postal_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (postal_code_.IsDefault()) {
    postal_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.postal_code)
}

// optional string sorting_code = 9;
inline bool WalletPostalAddress::_internal_has_sorting_code() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool WalletPostalAddress::has_sorting_code() const {
  return _internal_has_sorting_code();
}
inline void WalletPostalAddress::clear_sorting_code() {
  sorting_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& WalletPostalAddress::sorting_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.sorting_code)
  return _internal_sorting_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletPostalAddress::set_sorting_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 sorting_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.sorting_code)
}
inline std::string* WalletPostalAddress::mutable_sorting_code() {
  std::string* _s = _internal_mutable_sorting_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.sorting_code)
  return _s;
}
inline const std::string& WalletPostalAddress::_internal_sorting_code() const {
  return sorting_code_.Get();
}
inline void WalletPostalAddress::_internal_set_sorting_code(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  sorting_code_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::_internal_mutable_sorting_code() {
  _has_bits_[0] |= 0x00000080u;
  return sorting_code_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::release_sorting_code() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.sorting_code)
  if (!_internal_has_sorting_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = sorting_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sorting_code_.IsDefault()) {
    sorting_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletPostalAddress::set_allocated_sorting_code(std::string* sorting_code) {
  if (sorting_code != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  sorting_code_.SetAllocated(sorting_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sorting_code_.IsDefault()) {
    sorting_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.sorting_code)
}

// optional string country_code = 10;
inline bool WalletPostalAddress::_internal_has_country_code() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool WalletPostalAddress::has_country_code() const {
  return _internal_has_country_code();
}
inline void WalletPostalAddress::clear_country_code() {
  country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& WalletPostalAddress::country_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.country_code)
  return _internal_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletPostalAddress::set_country_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000100u;
 country_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.country_code)
}
inline std::string* WalletPostalAddress::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.country_code)
  return _s;
}
inline const std::string& WalletPostalAddress::_internal_country_code() const {
  return country_code_.Get();
}
inline void WalletPostalAddress::_internal_set_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  country_code_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::_internal_mutable_country_code() {
  _has_bits_[0] |= 0x00000100u;
  return country_code_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::release_country_code() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  auto* p = country_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault()) {
    country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletPostalAddress::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  country_code_.SetAllocated(country_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault()) {
    country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.country_code)
}

// optional string language_code = 11;
inline bool WalletPostalAddress::_internal_has_language_code() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool WalletPostalAddress::has_language_code() const {
  return _internal_has_language_code();
}
inline void WalletPostalAddress::clear_language_code() {
  language_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& WalletPostalAddress::language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletPostalAddress::set_language_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000200u;
 language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.language_code)
}
inline std::string* WalletPostalAddress::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.language_code)
  return _s;
}
inline const std::string& WalletPostalAddress::_internal_language_code() const {
  return language_code_.Get();
}
inline void WalletPostalAddress::_internal_set_language_code(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::_internal_mutable_language_code() {
  _has_bits_[0] |= 0x00000200u;
  return language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::release_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.language_code)
  if (!_internal_has_language_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  auto* p = language_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_code_.IsDefault()) {
    language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletPostalAddress::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_code_.IsDefault()) {
    language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.language_code)
}

// optional string phone_number = 13;
inline bool WalletPostalAddress::_internal_has_phone_number() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool WalletPostalAddress::has_phone_number() const {
  return _internal_has_phone_number();
}
inline void WalletPostalAddress::clear_phone_number() {
  phone_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& WalletPostalAddress::phone_number() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletPostalAddress.phone_number)
  return _internal_phone_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletPostalAddress::set_phone_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000800u;
 phone_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletPostalAddress.phone_number)
}
inline std::string* WalletPostalAddress::mutable_phone_number() {
  std::string* _s = _internal_mutable_phone_number();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletPostalAddress.phone_number)
  return _s;
}
inline const std::string& WalletPostalAddress::_internal_phone_number() const {
  return phone_number_.Get();
}
inline void WalletPostalAddress::_internal_set_phone_number(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  phone_number_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::_internal_mutable_phone_number() {
  _has_bits_[0] |= 0x00000800u;
  return phone_number_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletPostalAddress::release_phone_number() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletPostalAddress.phone_number)
  if (!_internal_has_phone_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  auto* p = phone_number_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (phone_number_.IsDefault()) {
    phone_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletPostalAddress::set_allocated_phone_number(std::string* phone_number) {
  if (phone_number != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  phone_number_.SetAllocated(phone_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (phone_number_.IsDefault()) {
    phone_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletPostalAddress.phone_number)
}

// -------------------------------------------------------------------

// PaymentsCustomerData

// optional string id = 1;
inline bool PaymentsCustomerData::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PaymentsCustomerData::has_id() const {
  return _internal_has_id();
}
inline void PaymentsCustomerData::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PaymentsCustomerData::id() const {
  // @@protoc_insertion_point(field_get:sync_pb.PaymentsCustomerData.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentsCustomerData::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PaymentsCustomerData.id)
}
inline std::string* PaymentsCustomerData::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.PaymentsCustomerData.id)
  return _s;
}
inline const std::string& PaymentsCustomerData::_internal_id() const {
  return id_.Get();
}
inline void PaymentsCustomerData::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* PaymentsCustomerData::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* PaymentsCustomerData::release_id() {
  // @@protoc_insertion_point(field_release:sync_pb.PaymentsCustomerData.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PaymentsCustomerData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PaymentsCustomerData.id)
}

// -------------------------------------------------------------------

// WalletCreditCardCloudTokenData

// optional string masked_card_id = 1;
inline bool WalletCreditCardCloudTokenData::_internal_has_masked_card_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WalletCreditCardCloudTokenData::has_masked_card_id() const {
  return _internal_has_masked_card_id();
}
inline void WalletCreditCardCloudTokenData::clear_masked_card_id() {
  masked_card_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WalletCreditCardCloudTokenData::masked_card_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletCreditCardCloudTokenData.masked_card_id)
  return _internal_masked_card_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletCreditCardCloudTokenData::set_masked_card_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 masked_card_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletCreditCardCloudTokenData.masked_card_id)
}
inline std::string* WalletCreditCardCloudTokenData::mutable_masked_card_id() {
  std::string* _s = _internal_mutable_masked_card_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletCreditCardCloudTokenData.masked_card_id)
  return _s;
}
inline const std::string& WalletCreditCardCloudTokenData::_internal_masked_card_id() const {
  return masked_card_id_.Get();
}
inline void WalletCreditCardCloudTokenData::_internal_set_masked_card_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  masked_card_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletCreditCardCloudTokenData::_internal_mutable_masked_card_id() {
  _has_bits_[0] |= 0x00000001u;
  return masked_card_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletCreditCardCloudTokenData::release_masked_card_id() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletCreditCardCloudTokenData.masked_card_id)
  if (!_internal_has_masked_card_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = masked_card_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (masked_card_id_.IsDefault()) {
    masked_card_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletCreditCardCloudTokenData::set_allocated_masked_card_id(std::string* masked_card_id) {
  if (masked_card_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  masked_card_id_.SetAllocated(masked_card_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (masked_card_id_.IsDefault()) {
    masked_card_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletCreditCardCloudTokenData.masked_card_id)
}

// optional string suffix = 2;
inline bool WalletCreditCardCloudTokenData::_internal_has_suffix() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WalletCreditCardCloudTokenData::has_suffix() const {
  return _internal_has_suffix();
}
inline void WalletCreditCardCloudTokenData::clear_suffix() {
  suffix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WalletCreditCardCloudTokenData::suffix() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletCreditCardCloudTokenData.suffix)
  return _internal_suffix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletCreditCardCloudTokenData::set_suffix(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 suffix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletCreditCardCloudTokenData.suffix)
}
inline std::string* WalletCreditCardCloudTokenData::mutable_suffix() {
  std::string* _s = _internal_mutable_suffix();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletCreditCardCloudTokenData.suffix)
  return _s;
}
inline const std::string& WalletCreditCardCloudTokenData::_internal_suffix() const {
  return suffix_.Get();
}
inline void WalletCreditCardCloudTokenData::_internal_set_suffix(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  suffix_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletCreditCardCloudTokenData::_internal_mutable_suffix() {
  _has_bits_[0] |= 0x00000002u;
  return suffix_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletCreditCardCloudTokenData::release_suffix() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletCreditCardCloudTokenData.suffix)
  if (!_internal_has_suffix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = suffix_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (suffix_.IsDefault()) {
    suffix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletCreditCardCloudTokenData::set_allocated_suffix(std::string* suffix) {
  if (suffix != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  suffix_.SetAllocated(suffix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (suffix_.IsDefault()) {
    suffix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletCreditCardCloudTokenData.suffix)
}

// optional int32 exp_month = 3;
inline bool WalletCreditCardCloudTokenData::_internal_has_exp_month() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WalletCreditCardCloudTokenData::has_exp_month() const {
  return _internal_has_exp_month();
}
inline void WalletCreditCardCloudTokenData::clear_exp_month() {
  exp_month_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t WalletCreditCardCloudTokenData::_internal_exp_month() const {
  return exp_month_;
}
inline int32_t WalletCreditCardCloudTokenData::exp_month() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletCreditCardCloudTokenData.exp_month)
  return _internal_exp_month();
}
inline void WalletCreditCardCloudTokenData::_internal_set_exp_month(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  exp_month_ = value;
}
inline void WalletCreditCardCloudTokenData::set_exp_month(int32_t value) {
  _internal_set_exp_month(value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletCreditCardCloudTokenData.exp_month)
}

// optional int32 exp_year = 4;
inline bool WalletCreditCardCloudTokenData::_internal_has_exp_year() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WalletCreditCardCloudTokenData::has_exp_year() const {
  return _internal_has_exp_year();
}
inline void WalletCreditCardCloudTokenData::clear_exp_year() {
  exp_year_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t WalletCreditCardCloudTokenData::_internal_exp_year() const {
  return exp_year_;
}
inline int32_t WalletCreditCardCloudTokenData::exp_year() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletCreditCardCloudTokenData.exp_year)
  return _internal_exp_year();
}
inline void WalletCreditCardCloudTokenData::_internal_set_exp_year(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  exp_year_ = value;
}
inline void WalletCreditCardCloudTokenData::set_exp_year(int32_t value) {
  _internal_set_exp_year(value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletCreditCardCloudTokenData.exp_year)
}

// optional string art_fife_url = 5;
inline bool WalletCreditCardCloudTokenData::_internal_has_art_fife_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WalletCreditCardCloudTokenData::has_art_fife_url() const {
  return _internal_has_art_fife_url();
}
inline void WalletCreditCardCloudTokenData::clear_art_fife_url() {
  art_fife_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WalletCreditCardCloudTokenData::art_fife_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletCreditCardCloudTokenData.art_fife_url)
  return _internal_art_fife_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletCreditCardCloudTokenData::set_art_fife_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 art_fife_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletCreditCardCloudTokenData.art_fife_url)
}
inline std::string* WalletCreditCardCloudTokenData::mutable_art_fife_url() {
  std::string* _s = _internal_mutable_art_fife_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletCreditCardCloudTokenData.art_fife_url)
  return _s;
}
inline const std::string& WalletCreditCardCloudTokenData::_internal_art_fife_url() const {
  return art_fife_url_.Get();
}
inline void WalletCreditCardCloudTokenData::_internal_set_art_fife_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  art_fife_url_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletCreditCardCloudTokenData::_internal_mutable_art_fife_url() {
  _has_bits_[0] |= 0x00000004u;
  return art_fife_url_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletCreditCardCloudTokenData::release_art_fife_url() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletCreditCardCloudTokenData.art_fife_url)
  if (!_internal_has_art_fife_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = art_fife_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (art_fife_url_.IsDefault()) {
    art_fife_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletCreditCardCloudTokenData::set_allocated_art_fife_url(std::string* art_fife_url) {
  if (art_fife_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  art_fife_url_.SetAllocated(art_fife_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (art_fife_url_.IsDefault()) {
    art_fife_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletCreditCardCloudTokenData.art_fife_url)
}

// optional string instrument_token = 6;
inline bool WalletCreditCardCloudTokenData::_internal_has_instrument_token() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WalletCreditCardCloudTokenData::has_instrument_token() const {
  return _internal_has_instrument_token();
}
inline void WalletCreditCardCloudTokenData::clear_instrument_token() {
  instrument_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& WalletCreditCardCloudTokenData::instrument_token() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletCreditCardCloudTokenData.instrument_token)
  return _internal_instrument_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletCreditCardCloudTokenData::set_instrument_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 instrument_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletCreditCardCloudTokenData.instrument_token)
}
inline std::string* WalletCreditCardCloudTokenData::mutable_instrument_token() {
  std::string* _s = _internal_mutable_instrument_token();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletCreditCardCloudTokenData.instrument_token)
  return _s;
}
inline const std::string& WalletCreditCardCloudTokenData::_internal_instrument_token() const {
  return instrument_token_.Get();
}
inline void WalletCreditCardCloudTokenData::_internal_set_instrument_token(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  instrument_token_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletCreditCardCloudTokenData::_internal_mutable_instrument_token() {
  _has_bits_[0] |= 0x00000008u;
  return instrument_token_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletCreditCardCloudTokenData::release_instrument_token() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletCreditCardCloudTokenData.instrument_token)
  if (!_internal_has_instrument_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = instrument_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instrument_token_.IsDefault()) {
    instrument_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletCreditCardCloudTokenData::set_allocated_instrument_token(std::string* instrument_token) {
  if (instrument_token != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  instrument_token_.SetAllocated(instrument_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instrument_token_.IsDefault()) {
    instrument_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletCreditCardCloudTokenData.instrument_token)
}

// -------------------------------------------------------------------

// AutofillWalletSpecifics

// optional .sync_pb.AutofillWalletSpecifics.WalletInfoType type = 1;
inline bool AutofillWalletSpecifics::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AutofillWalletSpecifics::has_type() const {
  return _internal_has_type();
}
inline void AutofillWalletSpecifics::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::sync_pb::AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::_internal_type() const {
  return static_cast< ::sync_pb::AutofillWalletSpecifics_WalletInfoType >(type_);
}
inline ::sync_pb::AutofillWalletSpecifics_WalletInfoType AutofillWalletSpecifics::type() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillWalletSpecifics.type)
  return _internal_type();
}
inline void AutofillWalletSpecifics::_internal_set_type(::sync_pb::AutofillWalletSpecifics_WalletInfoType value) {
  assert(::sync_pb::AutofillWalletSpecifics_WalletInfoType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void AutofillWalletSpecifics::set_type(::sync_pb::AutofillWalletSpecifics_WalletInfoType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillWalletSpecifics.type)
}

// optional .sync_pb.WalletMaskedCreditCard masked_card = 2;
inline bool AutofillWalletSpecifics::_internal_has_masked_card() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || masked_card_ != nullptr);
  return value;
}
inline bool AutofillWalletSpecifics::has_masked_card() const {
  return _internal_has_masked_card();
}
inline void AutofillWalletSpecifics::clear_masked_card() {
  if (masked_card_ != nullptr) masked_card_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sync_pb::WalletMaskedCreditCard& AutofillWalletSpecifics::_internal_masked_card() const {
  const ::sync_pb::WalletMaskedCreditCard* p = masked_card_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::WalletMaskedCreditCard&>(
      ::sync_pb::_WalletMaskedCreditCard_default_instance_);
}
inline const ::sync_pb::WalletMaskedCreditCard& AutofillWalletSpecifics::masked_card() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillWalletSpecifics.masked_card)
  return _internal_masked_card();
}
inline void AutofillWalletSpecifics::unsafe_arena_set_allocated_masked_card(
    ::sync_pb::WalletMaskedCreditCard* masked_card) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(masked_card_);
  }
  masked_card_ = masked_card;
  if (masked_card) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.AutofillWalletSpecifics.masked_card)
}
inline ::sync_pb::WalletMaskedCreditCard* AutofillWalletSpecifics::release_masked_card() {
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::WalletMaskedCreditCard* temp = masked_card_;
  masked_card_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::WalletMaskedCreditCard* AutofillWalletSpecifics::unsafe_arena_release_masked_card() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillWalletSpecifics.masked_card)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::WalletMaskedCreditCard* temp = masked_card_;
  masked_card_ = nullptr;
  return temp;
}
inline ::sync_pb::WalletMaskedCreditCard* AutofillWalletSpecifics::_internal_mutable_masked_card() {
  _has_bits_[0] |= 0x00000001u;
  if (masked_card_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::WalletMaskedCreditCard>(GetArenaForAllocation());
    masked_card_ = p;
  }
  return masked_card_;
}
inline ::sync_pb::WalletMaskedCreditCard* AutofillWalletSpecifics::mutable_masked_card() {
  ::sync_pb::WalletMaskedCreditCard* _msg = _internal_mutable_masked_card();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillWalletSpecifics.masked_card)
  return _msg;
}
inline void AutofillWalletSpecifics::set_allocated_masked_card(::sync_pb::WalletMaskedCreditCard* masked_card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete masked_card_;
  }
  if (masked_card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(masked_card);
    if (message_arena != submessage_arena) {
      masked_card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, masked_card, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  masked_card_ = masked_card;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillWalletSpecifics.masked_card)
}

// optional .sync_pb.WalletPostalAddress address = 3;
inline bool AutofillWalletSpecifics::_internal_has_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || address_ != nullptr);
  return value;
}
inline bool AutofillWalletSpecifics::has_address() const {
  return _internal_has_address();
}
inline void AutofillWalletSpecifics::clear_address() {
  if (address_ != nullptr) address_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sync_pb::WalletPostalAddress& AutofillWalletSpecifics::_internal_address() const {
  const ::sync_pb::WalletPostalAddress* p = address_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::WalletPostalAddress&>(
      ::sync_pb::_WalletPostalAddress_default_instance_);
}
inline const ::sync_pb::WalletPostalAddress& AutofillWalletSpecifics::address() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillWalletSpecifics.address)
  return _internal_address();
}
inline void AutofillWalletSpecifics::unsafe_arena_set_allocated_address(
    ::sync_pb::WalletPostalAddress* address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.AutofillWalletSpecifics.address)
}
inline ::sync_pb::WalletPostalAddress* AutofillWalletSpecifics::release_address() {
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::WalletPostalAddress* temp = address_;
  address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::WalletPostalAddress* AutofillWalletSpecifics::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillWalletSpecifics.address)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::WalletPostalAddress* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::sync_pb::WalletPostalAddress* AutofillWalletSpecifics::_internal_mutable_address() {
  _has_bits_[0] |= 0x00000002u;
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::WalletPostalAddress>(GetArenaForAllocation());
    address_ = p;
  }
  return address_;
}
inline ::sync_pb::WalletPostalAddress* AutofillWalletSpecifics::mutable_address() {
  ::sync_pb::WalletPostalAddress* _msg = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillWalletSpecifics.address)
  return _msg;
}
inline void AutofillWalletSpecifics::set_allocated_address(::sync_pb::WalletPostalAddress* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete address_;
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(address);
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillWalletSpecifics.address)
}

// optional .sync_pb.PaymentsCustomerData customer_data = 4;
inline bool AutofillWalletSpecifics::_internal_has_customer_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || customer_data_ != nullptr);
  return value;
}
inline bool AutofillWalletSpecifics::has_customer_data() const {
  return _internal_has_customer_data();
}
inline void AutofillWalletSpecifics::clear_customer_data() {
  if (customer_data_ != nullptr) customer_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::PaymentsCustomerData& AutofillWalletSpecifics::_internal_customer_data() const {
  const ::sync_pb::PaymentsCustomerData* p = customer_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::PaymentsCustomerData&>(
      ::sync_pb::_PaymentsCustomerData_default_instance_);
}
inline const ::sync_pb::PaymentsCustomerData& AutofillWalletSpecifics::customer_data() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillWalletSpecifics.customer_data)
  return _internal_customer_data();
}
inline void AutofillWalletSpecifics::unsafe_arena_set_allocated_customer_data(
    ::sync_pb::PaymentsCustomerData* customer_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_data_);
  }
  customer_data_ = customer_data;
  if (customer_data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.AutofillWalletSpecifics.customer_data)
}
inline ::sync_pb::PaymentsCustomerData* AutofillWalletSpecifics::release_customer_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::PaymentsCustomerData* temp = customer_data_;
  customer_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::PaymentsCustomerData* AutofillWalletSpecifics::unsafe_arena_release_customer_data() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillWalletSpecifics.customer_data)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::PaymentsCustomerData* temp = customer_data_;
  customer_data_ = nullptr;
  return temp;
}
inline ::sync_pb::PaymentsCustomerData* AutofillWalletSpecifics::_internal_mutable_customer_data() {
  _has_bits_[0] |= 0x00000004u;
  if (customer_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::PaymentsCustomerData>(GetArenaForAllocation());
    customer_data_ = p;
  }
  return customer_data_;
}
inline ::sync_pb::PaymentsCustomerData* AutofillWalletSpecifics::mutable_customer_data() {
  ::sync_pb::PaymentsCustomerData* _msg = _internal_mutable_customer_data();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillWalletSpecifics.customer_data)
  return _msg;
}
inline void AutofillWalletSpecifics::set_allocated_customer_data(::sync_pb::PaymentsCustomerData* customer_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete customer_data_;
  }
  if (customer_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(customer_data);
    if (message_arena != submessage_arena) {
      customer_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  customer_data_ = customer_data;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillWalletSpecifics.customer_data)
}

// optional .sync_pb.WalletCreditCardCloudTokenData cloud_token_data = 5;
inline bool AutofillWalletSpecifics::_internal_has_cloud_token_data() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || cloud_token_data_ != nullptr);
  return value;
}
inline bool AutofillWalletSpecifics::has_cloud_token_data() const {
  return _internal_has_cloud_token_data();
}
inline void AutofillWalletSpecifics::clear_cloud_token_data() {
  if (cloud_token_data_ != nullptr) cloud_token_data_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::sync_pb::WalletCreditCardCloudTokenData& AutofillWalletSpecifics::_internal_cloud_token_data() const {
  const ::sync_pb::WalletCreditCardCloudTokenData* p = cloud_token_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::WalletCreditCardCloudTokenData&>(
      ::sync_pb::_WalletCreditCardCloudTokenData_default_instance_);
}
inline const ::sync_pb::WalletCreditCardCloudTokenData& AutofillWalletSpecifics::cloud_token_data() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillWalletSpecifics.cloud_token_data)
  return _internal_cloud_token_data();
}
inline void AutofillWalletSpecifics::unsafe_arena_set_allocated_cloud_token_data(
    ::sync_pb::WalletCreditCardCloudTokenData* cloud_token_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cloud_token_data_);
  }
  cloud_token_data_ = cloud_token_data;
  if (cloud_token_data) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.AutofillWalletSpecifics.cloud_token_data)
}
inline ::sync_pb::WalletCreditCardCloudTokenData* AutofillWalletSpecifics::release_cloud_token_data() {
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::WalletCreditCardCloudTokenData* temp = cloud_token_data_;
  cloud_token_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::WalletCreditCardCloudTokenData* AutofillWalletSpecifics::unsafe_arena_release_cloud_token_data() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillWalletSpecifics.cloud_token_data)
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::WalletCreditCardCloudTokenData* temp = cloud_token_data_;
  cloud_token_data_ = nullptr;
  return temp;
}
inline ::sync_pb::WalletCreditCardCloudTokenData* AutofillWalletSpecifics::_internal_mutable_cloud_token_data() {
  _has_bits_[0] |= 0x00000008u;
  if (cloud_token_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::WalletCreditCardCloudTokenData>(GetArenaForAllocation());
    cloud_token_data_ = p;
  }
  return cloud_token_data_;
}
inline ::sync_pb::WalletCreditCardCloudTokenData* AutofillWalletSpecifics::mutable_cloud_token_data() {
  ::sync_pb::WalletCreditCardCloudTokenData* _msg = _internal_mutable_cloud_token_data();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillWalletSpecifics.cloud_token_data)
  return _msg;
}
inline void AutofillWalletSpecifics::set_allocated_cloud_token_data(::sync_pb::WalletCreditCardCloudTokenData* cloud_token_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cloud_token_data_;
  }
  if (cloud_token_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cloud_token_data);
    if (message_arena != submessage_arena) {
      cloud_token_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cloud_token_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  cloud_token_data_ = cloud_token_data;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillWalletSpecifics.cloud_token_data)
}

// -------------------------------------------------------------------

// WalletMetadataSpecifics

// optional .sync_pb.WalletMetadataSpecifics.Type type = 1;
inline bool WalletMetadataSpecifics::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WalletMetadataSpecifics::has_type() const {
  return _internal_has_type();
}
inline void WalletMetadataSpecifics::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::sync_pb::WalletMetadataSpecifics_Type WalletMetadataSpecifics::_internal_type() const {
  return static_cast< ::sync_pb::WalletMetadataSpecifics_Type >(type_);
}
inline ::sync_pb::WalletMetadataSpecifics_Type WalletMetadataSpecifics::type() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMetadataSpecifics.type)
  return _internal_type();
}
inline void WalletMetadataSpecifics::_internal_set_type(::sync_pb::WalletMetadataSpecifics_Type value) {
  assert(::sync_pb::WalletMetadataSpecifics_Type_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void WalletMetadataSpecifics::set_type(::sync_pb::WalletMetadataSpecifics_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletMetadataSpecifics.type)
}

// optional string id = 2;
inline bool WalletMetadataSpecifics::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WalletMetadataSpecifics::has_id() const {
  return _internal_has_id();
}
inline void WalletMetadataSpecifics::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WalletMetadataSpecifics::id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMetadataSpecifics.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletMetadataSpecifics::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletMetadataSpecifics.id)
}
inline std::string* WalletMetadataSpecifics::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletMetadataSpecifics.id)
  return _s;
}
inline const std::string& WalletMetadataSpecifics::_internal_id() const {
  return id_.Get();
}
inline void WalletMetadataSpecifics::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletMetadataSpecifics::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletMetadataSpecifics::release_id() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletMetadataSpecifics.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletMetadataSpecifics::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletMetadataSpecifics.id)
}

// optional int64 use_count = 3;
inline bool WalletMetadataSpecifics::_internal_has_use_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WalletMetadataSpecifics::has_use_count() const {
  return _internal_has_use_count();
}
inline void WalletMetadataSpecifics::clear_use_count() {
  use_count_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t WalletMetadataSpecifics::_internal_use_count() const {
  return use_count_;
}
inline int64_t WalletMetadataSpecifics::use_count() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMetadataSpecifics.use_count)
  return _internal_use_count();
}
inline void WalletMetadataSpecifics::_internal_set_use_count(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  use_count_ = value;
}
inline void WalletMetadataSpecifics::set_use_count(int64_t value) {
  _internal_set_use_count(value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletMetadataSpecifics.use_count)
}

// optional int64 use_date = 4;
inline bool WalletMetadataSpecifics::_internal_has_use_date() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WalletMetadataSpecifics::has_use_date() const {
  return _internal_has_use_date();
}
inline void WalletMetadataSpecifics::clear_use_date() {
  use_date_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t WalletMetadataSpecifics::_internal_use_date() const {
  return use_date_;
}
inline int64_t WalletMetadataSpecifics::use_date() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMetadataSpecifics.use_date)
  return _internal_use_date();
}
inline void WalletMetadataSpecifics::_internal_set_use_date(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  use_date_ = value;
}
inline void WalletMetadataSpecifics::set_use_date(int64_t value) {
  _internal_set_use_date(value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletMetadataSpecifics.use_date)
}

// optional string card_billing_address_id = 5;
inline bool WalletMetadataSpecifics::_internal_has_card_billing_address_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WalletMetadataSpecifics::has_card_billing_address_id() const {
  return _internal_has_card_billing_address_id();
}
inline void WalletMetadataSpecifics::clear_card_billing_address_id() {
  card_billing_address_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WalletMetadataSpecifics::card_billing_address_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMetadataSpecifics.card_billing_address_id)
  return _internal_card_billing_address_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletMetadataSpecifics::set_card_billing_address_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 card_billing_address_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WalletMetadataSpecifics.card_billing_address_id)
}
inline std::string* WalletMetadataSpecifics::mutable_card_billing_address_id() {
  std::string* _s = _internal_mutable_card_billing_address_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.WalletMetadataSpecifics.card_billing_address_id)
  return _s;
}
inline const std::string& WalletMetadataSpecifics::_internal_card_billing_address_id() const {
  return card_billing_address_id_.Get();
}
inline void WalletMetadataSpecifics::_internal_set_card_billing_address_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  card_billing_address_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletMetadataSpecifics::_internal_mutable_card_billing_address_id() {
  _has_bits_[0] |= 0x00000002u;
  return card_billing_address_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletMetadataSpecifics::release_card_billing_address_id() {
  // @@protoc_insertion_point(field_release:sync_pb.WalletMetadataSpecifics.card_billing_address_id)
  if (!_internal_has_card_billing_address_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = card_billing_address_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (card_billing_address_id_.IsDefault()) {
    card_billing_address_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WalletMetadataSpecifics::set_allocated_card_billing_address_id(std::string* card_billing_address_id) {
  if (card_billing_address_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  card_billing_address_id_.SetAllocated(card_billing_address_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (card_billing_address_id_.IsDefault()) {
    card_billing_address_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WalletMetadataSpecifics.card_billing_address_id)
}

// optional bool address_has_converted = 6;
inline bool WalletMetadataSpecifics::_internal_has_address_has_converted() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WalletMetadataSpecifics::has_address_has_converted() const {
  return _internal_has_address_has_converted();
}
inline void WalletMetadataSpecifics::clear_address_has_converted() {
  address_has_converted_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool WalletMetadataSpecifics::_internal_address_has_converted() const {
  return address_has_converted_;
}
inline bool WalletMetadataSpecifics::address_has_converted() const {
  // @@protoc_insertion_point(field_get:sync_pb.WalletMetadataSpecifics.address_has_converted)
  return _internal_address_has_converted();
}
inline void WalletMetadataSpecifics::_internal_set_address_has_converted(bool value) {
  _has_bits_[0] |= 0x00000010u;
  address_has_converted_ = value;
}
inline void WalletMetadataSpecifics::set_address_has_converted(bool value) {
  _internal_set_address_has_converted(value);
  // @@protoc_insertion_point(field_set:sync_pb.WalletMetadataSpecifics.address_has_converted)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::AutofillProfileSpecifics_VerificationStatus> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::CardIssuer_Issuer> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WalletMaskedCreditCard_WalletCardStatus> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WalletMaskedCreditCard_WalletCardType> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WalletMaskedCreditCard_VirtualCardEnrollmentState> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::AutofillWalletSpecifics_WalletInfoType> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WalletMetadataSpecifics_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fautofill_5fspecifics_2eproto
