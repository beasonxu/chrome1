// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/bookmark_model_metadata.proto

#include "components/sync/protocol/bookmark_model_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR BookmarkMetadata::BookmarkMetadata(
    ::_pbi::ConstantInitialized)
  : metadata_(nullptr)
  , id_(int64_t{0}){}
struct BookmarkMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BookmarkMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BookmarkMetadataDefaultTypeInternal() {}
  union {
    BookmarkMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BookmarkMetadataDefaultTypeInternal _BookmarkMetadata_default_instance_;
PROTOBUF_CONSTEXPR BookmarkModelMetadata::BookmarkModelMetadata(
    ::_pbi::ConstantInitialized)
  : bookmarks_metadata_()
  , model_type_state_(nullptr)
  , num_ignored_updates_due_to_missing_parent_(int64_t{0})
  , max_version_among_ignored_updates_due_to_missing_parent_(int64_t{0})
  , bookmarks_hierarchy_fields_reuploaded_(false){}
struct BookmarkModelMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BookmarkModelMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BookmarkModelMetadataDefaultTypeInternal() {}
  union {
    BookmarkModelMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BookmarkModelMetadataDefaultTypeInternal _BookmarkModelMetadata_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class BookmarkMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<BookmarkMetadata>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::EntityMetadata& metadata(const BookmarkMetadata* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sync_pb::EntityMetadata&
BookmarkMetadata::_Internal::metadata(const BookmarkMetadata* msg) {
  return *msg->metadata_;
}
void BookmarkMetadata::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
BookmarkMetadata::BookmarkMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.BookmarkMetadata)
}
BookmarkMetadata::BookmarkMetadata(const BookmarkMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::sync_pb::EntityMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.BookmarkMetadata)
}

inline void BookmarkMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(id_));
}

BookmarkMetadata::~BookmarkMetadata() {
  // @@protoc_insertion_point(destructor:sync_pb.BookmarkMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BookmarkMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void BookmarkMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BookmarkMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.BookmarkMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  id_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BookmarkMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.EntityMetadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BookmarkMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.BookmarkMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // optional .sync_pb.EntityMetadata metadata = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.BookmarkMetadata)
  return target;
}

size_t BookmarkMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.BookmarkMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .sync_pb.EntityMetadata metadata = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BookmarkMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BookmarkMetadata*>(
      &from));
}

void BookmarkMetadata::MergeFrom(const BookmarkMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.BookmarkMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::sync_pb::EntityMetadata::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BookmarkMetadata::CopyFrom(const BookmarkMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.BookmarkMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookmarkMetadata::IsInitialized() const {
  return true;
}

void BookmarkMetadata::InternalSwap(BookmarkMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BookmarkMetadata, id_)
      + sizeof(BookmarkMetadata::id_)
      - PROTOBUF_FIELD_OFFSET(BookmarkMetadata, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

std::string BookmarkMetadata::GetTypeName() const {
  return "sync_pb.BookmarkMetadata";
}


// ===================================================================

class BookmarkModelMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<BookmarkModelMetadata>()._has_bits_);
  static const ::sync_pb::ModelTypeState& model_type_state(const BookmarkModelMetadata* msg);
  static void set_has_model_type_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bookmarks_hierarchy_fields_reuploaded(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_ignored_updates_due_to_missing_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_version_among_ignored_updates_due_to_missing_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sync_pb::ModelTypeState&
BookmarkModelMetadata::_Internal::model_type_state(const BookmarkModelMetadata* msg) {
  return *msg->model_type_state_;
}
void BookmarkModelMetadata::clear_model_type_state() {
  if (model_type_state_ != nullptr) model_type_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
BookmarkModelMetadata::BookmarkModelMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  bookmarks_metadata_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.BookmarkModelMetadata)
}
BookmarkModelMetadata::BookmarkModelMetadata(const BookmarkModelMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      bookmarks_metadata_(from.bookmarks_metadata_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_model_type_state()) {
    model_type_state_ = new ::sync_pb::ModelTypeState(*from.model_type_state_);
  } else {
    model_type_state_ = nullptr;
  }
  ::memcpy(&num_ignored_updates_due_to_missing_parent_, &from.num_ignored_updates_due_to_missing_parent_,
    static_cast<size_t>(reinterpret_cast<char*>(&bookmarks_hierarchy_fields_reuploaded_) -
    reinterpret_cast<char*>(&num_ignored_updates_due_to_missing_parent_)) + sizeof(bookmarks_hierarchy_fields_reuploaded_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.BookmarkModelMetadata)
}

inline void BookmarkModelMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&model_type_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bookmarks_hierarchy_fields_reuploaded_) -
    reinterpret_cast<char*>(&model_type_state_)) + sizeof(bookmarks_hierarchy_fields_reuploaded_));
}

BookmarkModelMetadata::~BookmarkModelMetadata() {
  // @@protoc_insertion_point(destructor:sync_pb.BookmarkModelMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BookmarkModelMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete model_type_state_;
}

void BookmarkModelMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BookmarkModelMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.BookmarkModelMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bookmarks_metadata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(model_type_state_ != nullptr);
    model_type_state_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&num_ignored_updates_due_to_missing_parent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bookmarks_hierarchy_fields_reuploaded_) -
        reinterpret_cast<char*>(&num_ignored_updates_due_to_missing_parent_)) + sizeof(bookmarks_hierarchy_fields_reuploaded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BookmarkModelMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.ModelTypeState model_type_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_type_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.BookmarkMetadata bookmarks_metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bookmarks_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool bookmarks_hierarchy_fields_reuploaded = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_bookmarks_hierarchy_fields_reuploaded(&has_bits);
          bookmarks_hierarchy_fields_reuploaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 num_ignored_updates_due_to_missing_parent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_num_ignored_updates_due_to_missing_parent(&has_bits);
          num_ignored_updates_due_to_missing_parent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 max_version_among_ignored_updates_due_to_missing_parent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_max_version_among_ignored_updates_due_to_missing_parent(&has_bits);
          max_version_among_ignored_updates_due_to_missing_parent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BookmarkModelMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.BookmarkModelMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.ModelTypeState model_type_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::model_type_state(this),
        _Internal::model_type_state(this).GetCachedSize(), target, stream);
  }

  // repeated .sync_pb.BookmarkMetadata bookmarks_metadata = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bookmarks_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_bookmarks_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool bookmarks_hierarchy_fields_reuploaded = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_bookmarks_hierarchy_fields_reuploaded(), target);
  }

  // optional int64 num_ignored_updates_due_to_missing_parent = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_num_ignored_updates_due_to_missing_parent(), target);
  }

  // optional int64 max_version_among_ignored_updates_due_to_missing_parent = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_max_version_among_ignored_updates_due_to_missing_parent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.BookmarkModelMetadata)
  return target;
}

size_t BookmarkModelMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.BookmarkModelMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.BookmarkMetadata bookmarks_metadata = 2;
  total_size += 1UL * this->_internal_bookmarks_metadata_size();
  for (const auto& msg : this->bookmarks_metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .sync_pb.ModelTypeState model_type_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_type_state_);
    }

    // optional int64 num_ignored_updates_due_to_missing_parent = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_ignored_updates_due_to_missing_parent());
    }

    // optional int64 max_version_among_ignored_updates_due_to_missing_parent = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_version_among_ignored_updates_due_to_missing_parent());
    }

    // optional bool bookmarks_hierarchy_fields_reuploaded = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BookmarkModelMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BookmarkModelMetadata*>(
      &from));
}

void BookmarkModelMetadata::MergeFrom(const BookmarkModelMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.BookmarkModelMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bookmarks_metadata_.MergeFrom(from.bookmarks_metadata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_model_type_state()->::sync_pb::ModelTypeState::MergeFrom(from._internal_model_type_state());
    }
    if (cached_has_bits & 0x00000002u) {
      num_ignored_updates_due_to_missing_parent_ = from.num_ignored_updates_due_to_missing_parent_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_version_among_ignored_updates_due_to_missing_parent_ = from.max_version_among_ignored_updates_due_to_missing_parent_;
    }
    if (cached_has_bits & 0x00000008u) {
      bookmarks_hierarchy_fields_reuploaded_ = from.bookmarks_hierarchy_fields_reuploaded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BookmarkModelMetadata::CopyFrom(const BookmarkModelMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.BookmarkModelMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookmarkModelMetadata::IsInitialized() const {
  return true;
}

void BookmarkModelMetadata::InternalSwap(BookmarkModelMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bookmarks_metadata_.InternalSwap(&other->bookmarks_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BookmarkModelMetadata, bookmarks_hierarchy_fields_reuploaded_)
      + sizeof(BookmarkModelMetadata::bookmarks_hierarchy_fields_reuploaded_)
      - PROTOBUF_FIELD_OFFSET(BookmarkModelMetadata, model_type_state_)>(
          reinterpret_cast<char*>(&model_type_state_),
          reinterpret_cast<char*>(&other->model_type_state_));
}

std::string BookmarkModelMetadata::GetTypeName() const {
  return "sync_pb.BookmarkModelMetadata";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::BookmarkMetadata*
Arena::CreateMaybeMessage< ::sync_pb::BookmarkMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::BookmarkMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::BookmarkModelMetadata*
Arena::CreateMaybeMessage< ::sync_pb::BookmarkModelMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::BookmarkModelMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
