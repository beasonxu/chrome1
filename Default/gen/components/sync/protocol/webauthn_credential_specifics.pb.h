// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/webauthn_credential_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fwebauthn_5fcredential_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fwebauthn_5fcredential_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fwebauthn_5fcredential_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fwebauthn_5fcredential_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class WebauthnCredentialSpecifics;
struct WebauthnCredentialSpecificsDefaultTypeInternal;
extern WebauthnCredentialSpecificsDefaultTypeInternal _WebauthnCredentialSpecifics_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::WebauthnCredentialSpecifics* Arena::CreateMaybeMessage<::sync_pb::WebauthnCredentialSpecifics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class WebauthnCredentialSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WebauthnCredentialSpecifics) */ {
 public:
  inline WebauthnCredentialSpecifics() : WebauthnCredentialSpecifics(nullptr) {}
  ~WebauthnCredentialSpecifics() override;
  explicit PROTOBUF_CONSTEXPR WebauthnCredentialSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WebauthnCredentialSpecifics(const WebauthnCredentialSpecifics& from);
  WebauthnCredentialSpecifics(WebauthnCredentialSpecifics&& from) noexcept
    : WebauthnCredentialSpecifics() {
    *this = ::std::move(from);
  }

  inline WebauthnCredentialSpecifics& operator=(const WebauthnCredentialSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebauthnCredentialSpecifics& operator=(WebauthnCredentialSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WebauthnCredentialSpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const WebauthnCredentialSpecifics* internal_default_instance() {
    return reinterpret_cast<const WebauthnCredentialSpecifics*>(
               &_WebauthnCredentialSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WebauthnCredentialSpecifics& a, WebauthnCredentialSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WebauthnCredentialSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebauthnCredentialSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WebauthnCredentialSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WebauthnCredentialSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WebauthnCredentialSpecifics& from);
  void MergeFrom(const WebauthnCredentialSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebauthnCredentialSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WebauthnCredentialSpecifics";
  }
  protected:
  explicit WebauthnCredentialSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewlyShadowedCredentialIdsFieldNumber = 5,
    kSyncIdFieldNumber = 1,
    kCredentialIdFieldNumber = 2,
    kRpIdFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kUserNameFieldNumber = 7,
    kUserDisplayNameFieldNumber = 8,
    kPrivateKeyFieldNumber = 9,
    kCreationTimeFieldNumber = 6,
    kThirdPartyPaymentsSupportFieldNumber = 11,
  };
  // repeated bytes newly_shadowed_credential_ids = 5;
  int newly_shadowed_credential_ids_size() const;
  private:
  int _internal_newly_shadowed_credential_ids_size() const;
  public:
  void clear_newly_shadowed_credential_ids();
  const std::string& newly_shadowed_credential_ids(int index) const;
  std::string* mutable_newly_shadowed_credential_ids(int index);
  void set_newly_shadowed_credential_ids(int index, const std::string& value);
  void set_newly_shadowed_credential_ids(int index, std::string&& value);
  void set_newly_shadowed_credential_ids(int index, const char* value);
  void set_newly_shadowed_credential_ids(int index, const void* value, size_t size);
  std::string* add_newly_shadowed_credential_ids();
  void add_newly_shadowed_credential_ids(const std::string& value);
  void add_newly_shadowed_credential_ids(std::string&& value);
  void add_newly_shadowed_credential_ids(const char* value);
  void add_newly_shadowed_credential_ids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& newly_shadowed_credential_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_newly_shadowed_credential_ids();
  private:
  const std::string& _internal_newly_shadowed_credential_ids(int index) const;
  std::string* _internal_add_newly_shadowed_credential_ids();
  public:

  // optional bytes sync_id = 1;
  bool has_sync_id() const;
  private:
  bool _internal_has_sync_id() const;
  public:
  void clear_sync_id();
  const std::string& sync_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sync_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sync_id();
  PROTOBUF_NODISCARD std::string* release_sync_id();
  void set_allocated_sync_id(std::string* sync_id);
  private:
  const std::string& _internal_sync_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sync_id(const std::string& value);
  std::string* _internal_mutable_sync_id();
  public:

  // optional bytes credential_id = 2;
  bool has_credential_id() const;
  private:
  bool _internal_has_credential_id() const;
  public:
  void clear_credential_id();
  const std::string& credential_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_credential_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_credential_id();
  PROTOBUF_NODISCARD std::string* release_credential_id();
  void set_allocated_credential_id(std::string* credential_id);
  private:
  const std::string& _internal_credential_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_credential_id(const std::string& value);
  std::string* _internal_mutable_credential_id();
  public:

  // optional string rp_id = 3;
  bool has_rp_id() const;
  private:
  bool _internal_has_rp_id() const;
  public:
  void clear_rp_id();
  const std::string& rp_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rp_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rp_id();
  PROTOBUF_NODISCARD std::string* release_rp_id();
  void set_allocated_rp_id(std::string* rp_id);
  private:
  const std::string& _internal_rp_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rp_id(const std::string& value);
  std::string* _internal_mutable_rp_id();
  public:

  // optional bytes user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // optional string user_name = 7;
  bool has_user_name() const;
  private:
  bool _internal_has_user_name() const;
  public:
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // optional string user_display_name = 8;
  bool has_user_display_name() const;
  private:
  bool _internal_has_user_display_name() const;
  public:
  void clear_user_display_name();
  const std::string& user_display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_display_name();
  PROTOBUF_NODISCARD std::string* release_user_display_name();
  void set_allocated_user_display_name(std::string* user_display_name);
  private:
  const std::string& _internal_user_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_display_name(const std::string& value);
  std::string* _internal_mutable_user_display_name();
  public:

  // optional bytes private_key = 9;
  bool has_private_key() const;
  private:
  bool _internal_has_private_key() const;
  public:
  void clear_private_key();
  const std::string& private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // optional int64 creation_time = 6;
  bool has_creation_time() const;
  private:
  bool _internal_has_creation_time() const;
  public:
  void clear_creation_time();
  int64_t creation_time() const;
  void set_creation_time(int64_t value);
  private:
  int64_t _internal_creation_time() const;
  void _internal_set_creation_time(int64_t value);
  public:

  // optional bool third_party_payments_support = 11;
  bool has_third_party_payments_support() const;
  private:
  bool _internal_has_third_party_payments_support() const;
  public:
  void clear_third_party_payments_support();
  bool third_party_payments_support() const;
  void set_third_party_payments_support(bool value);
  private:
  bool _internal_third_party_payments_support() const;
  void _internal_set_third_party_payments_support(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.WebauthnCredentialSpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> newly_shadowed_credential_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sync_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr credential_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rp_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  int64_t creation_time_;
  bool third_party_payments_support_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fwebauthn_5fcredential_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WebauthnCredentialSpecifics

// optional bytes sync_id = 1;
inline bool WebauthnCredentialSpecifics::_internal_has_sync_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WebauthnCredentialSpecifics::has_sync_id() const {
  return _internal_has_sync_id();
}
inline void WebauthnCredentialSpecifics::clear_sync_id() {
  sync_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WebauthnCredentialSpecifics::sync_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebauthnCredentialSpecifics.sync_id)
  return _internal_sync_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebauthnCredentialSpecifics::set_sync_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sync_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WebauthnCredentialSpecifics.sync_id)
}
inline std::string* WebauthnCredentialSpecifics::mutable_sync_id() {
  std::string* _s = _internal_mutable_sync_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.WebauthnCredentialSpecifics.sync_id)
  return _s;
}
inline const std::string& WebauthnCredentialSpecifics::_internal_sync_id() const {
  return sync_id_.Get();
}
inline void WebauthnCredentialSpecifics::_internal_set_sync_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sync_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WebauthnCredentialSpecifics::_internal_mutable_sync_id() {
  _has_bits_[0] |= 0x00000001u;
  return sync_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WebauthnCredentialSpecifics::release_sync_id() {
  // @@protoc_insertion_point(field_release:sync_pb.WebauthnCredentialSpecifics.sync_id)
  if (!_internal_has_sync_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sync_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sync_id_.IsDefault()) {
    sync_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebauthnCredentialSpecifics::set_allocated_sync_id(std::string* sync_id) {
  if (sync_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sync_id_.SetAllocated(sync_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sync_id_.IsDefault()) {
    sync_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WebauthnCredentialSpecifics.sync_id)
}

// optional bytes credential_id = 2;
inline bool WebauthnCredentialSpecifics::_internal_has_credential_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WebauthnCredentialSpecifics::has_credential_id() const {
  return _internal_has_credential_id();
}
inline void WebauthnCredentialSpecifics::clear_credential_id() {
  credential_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WebauthnCredentialSpecifics::credential_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebauthnCredentialSpecifics.credential_id)
  return _internal_credential_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebauthnCredentialSpecifics::set_credential_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 credential_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WebauthnCredentialSpecifics.credential_id)
}
inline std::string* WebauthnCredentialSpecifics::mutable_credential_id() {
  std::string* _s = _internal_mutable_credential_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.WebauthnCredentialSpecifics.credential_id)
  return _s;
}
inline const std::string& WebauthnCredentialSpecifics::_internal_credential_id() const {
  return credential_id_.Get();
}
inline void WebauthnCredentialSpecifics::_internal_set_credential_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  credential_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WebauthnCredentialSpecifics::_internal_mutable_credential_id() {
  _has_bits_[0] |= 0x00000002u;
  return credential_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WebauthnCredentialSpecifics::release_credential_id() {
  // @@protoc_insertion_point(field_release:sync_pb.WebauthnCredentialSpecifics.credential_id)
  if (!_internal_has_credential_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = credential_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (credential_id_.IsDefault()) {
    credential_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebauthnCredentialSpecifics::set_allocated_credential_id(std::string* credential_id) {
  if (credential_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  credential_id_.SetAllocated(credential_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (credential_id_.IsDefault()) {
    credential_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WebauthnCredentialSpecifics.credential_id)
}

// optional string rp_id = 3;
inline bool WebauthnCredentialSpecifics::_internal_has_rp_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WebauthnCredentialSpecifics::has_rp_id() const {
  return _internal_has_rp_id();
}
inline void WebauthnCredentialSpecifics::clear_rp_id() {
  rp_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WebauthnCredentialSpecifics::rp_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebauthnCredentialSpecifics.rp_id)
  return _internal_rp_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebauthnCredentialSpecifics::set_rp_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 rp_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WebauthnCredentialSpecifics.rp_id)
}
inline std::string* WebauthnCredentialSpecifics::mutable_rp_id() {
  std::string* _s = _internal_mutable_rp_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.WebauthnCredentialSpecifics.rp_id)
  return _s;
}
inline const std::string& WebauthnCredentialSpecifics::_internal_rp_id() const {
  return rp_id_.Get();
}
inline void WebauthnCredentialSpecifics::_internal_set_rp_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  rp_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WebauthnCredentialSpecifics::_internal_mutable_rp_id() {
  _has_bits_[0] |= 0x00000004u;
  return rp_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WebauthnCredentialSpecifics::release_rp_id() {
  // @@protoc_insertion_point(field_release:sync_pb.WebauthnCredentialSpecifics.rp_id)
  if (!_internal_has_rp_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = rp_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rp_id_.IsDefault()) {
    rp_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebauthnCredentialSpecifics::set_allocated_rp_id(std::string* rp_id) {
  if (rp_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  rp_id_.SetAllocated(rp_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rp_id_.IsDefault()) {
    rp_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WebauthnCredentialSpecifics.rp_id)
}

// optional bytes user_id = 4;
inline bool WebauthnCredentialSpecifics::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WebauthnCredentialSpecifics::has_user_id() const {
  return _internal_has_user_id();
}
inline void WebauthnCredentialSpecifics::clear_user_id() {
  user_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& WebauthnCredentialSpecifics::user_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebauthnCredentialSpecifics.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebauthnCredentialSpecifics::set_user_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 user_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WebauthnCredentialSpecifics.user_id)
}
inline std::string* WebauthnCredentialSpecifics::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.WebauthnCredentialSpecifics.user_id)
  return _s;
}
inline const std::string& WebauthnCredentialSpecifics::_internal_user_id() const {
  return user_id_.Get();
}
inline void WebauthnCredentialSpecifics::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WebauthnCredentialSpecifics::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000008u;
  return user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WebauthnCredentialSpecifics::release_user_id() {
  // @@protoc_insertion_point(field_release:sync_pb.WebauthnCredentialSpecifics.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = user_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebauthnCredentialSpecifics::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WebauthnCredentialSpecifics.user_id)
}

// repeated bytes newly_shadowed_credential_ids = 5;
inline int WebauthnCredentialSpecifics::_internal_newly_shadowed_credential_ids_size() const {
  return newly_shadowed_credential_ids_.size();
}
inline int WebauthnCredentialSpecifics::newly_shadowed_credential_ids_size() const {
  return _internal_newly_shadowed_credential_ids_size();
}
inline void WebauthnCredentialSpecifics::clear_newly_shadowed_credential_ids() {
  newly_shadowed_credential_ids_.Clear();
}
inline std::string* WebauthnCredentialSpecifics::add_newly_shadowed_credential_ids() {
  std::string* _s = _internal_add_newly_shadowed_credential_ids();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.WebauthnCredentialSpecifics.newly_shadowed_credential_ids)
  return _s;
}
inline const std::string& WebauthnCredentialSpecifics::_internal_newly_shadowed_credential_ids(int index) const {
  return newly_shadowed_credential_ids_.Get(index);
}
inline const std::string& WebauthnCredentialSpecifics::newly_shadowed_credential_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.WebauthnCredentialSpecifics.newly_shadowed_credential_ids)
  return _internal_newly_shadowed_credential_ids(index);
}
inline std::string* WebauthnCredentialSpecifics::mutable_newly_shadowed_credential_ids(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.WebauthnCredentialSpecifics.newly_shadowed_credential_ids)
  return newly_shadowed_credential_ids_.Mutable(index);
}
inline void WebauthnCredentialSpecifics::set_newly_shadowed_credential_ids(int index, const std::string& value) {
  newly_shadowed_credential_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.WebauthnCredentialSpecifics.newly_shadowed_credential_ids)
}
inline void WebauthnCredentialSpecifics::set_newly_shadowed_credential_ids(int index, std::string&& value) {
  newly_shadowed_credential_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.WebauthnCredentialSpecifics.newly_shadowed_credential_ids)
}
inline void WebauthnCredentialSpecifics::set_newly_shadowed_credential_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  newly_shadowed_credential_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.WebauthnCredentialSpecifics.newly_shadowed_credential_ids)
}
inline void WebauthnCredentialSpecifics::set_newly_shadowed_credential_ids(int index, const void* value, size_t size) {
  newly_shadowed_credential_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WebauthnCredentialSpecifics.newly_shadowed_credential_ids)
}
inline std::string* WebauthnCredentialSpecifics::_internal_add_newly_shadowed_credential_ids() {
  return newly_shadowed_credential_ids_.Add();
}
inline void WebauthnCredentialSpecifics::add_newly_shadowed_credential_ids(const std::string& value) {
  newly_shadowed_credential_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.WebauthnCredentialSpecifics.newly_shadowed_credential_ids)
}
inline void WebauthnCredentialSpecifics::add_newly_shadowed_credential_ids(std::string&& value) {
  newly_shadowed_credential_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.WebauthnCredentialSpecifics.newly_shadowed_credential_ids)
}
inline void WebauthnCredentialSpecifics::add_newly_shadowed_credential_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  newly_shadowed_credential_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.WebauthnCredentialSpecifics.newly_shadowed_credential_ids)
}
inline void WebauthnCredentialSpecifics::add_newly_shadowed_credential_ids(const void* value, size_t size) {
  newly_shadowed_credential_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.WebauthnCredentialSpecifics.newly_shadowed_credential_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WebauthnCredentialSpecifics::newly_shadowed_credential_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.WebauthnCredentialSpecifics.newly_shadowed_credential_ids)
  return newly_shadowed_credential_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WebauthnCredentialSpecifics::mutable_newly_shadowed_credential_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.WebauthnCredentialSpecifics.newly_shadowed_credential_ids)
  return &newly_shadowed_credential_ids_;
}

// optional int64 creation_time = 6;
inline bool WebauthnCredentialSpecifics::_internal_has_creation_time() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool WebauthnCredentialSpecifics::has_creation_time() const {
  return _internal_has_creation_time();
}
inline void WebauthnCredentialSpecifics::clear_creation_time() {
  creation_time_ = int64_t{0};
  _has_bits_[0] &= ~0x00000080u;
}
inline int64_t WebauthnCredentialSpecifics::_internal_creation_time() const {
  return creation_time_;
}
inline int64_t WebauthnCredentialSpecifics::creation_time() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebauthnCredentialSpecifics.creation_time)
  return _internal_creation_time();
}
inline void WebauthnCredentialSpecifics::_internal_set_creation_time(int64_t value) {
  _has_bits_[0] |= 0x00000080u;
  creation_time_ = value;
}
inline void WebauthnCredentialSpecifics::set_creation_time(int64_t value) {
  _internal_set_creation_time(value);
  // @@protoc_insertion_point(field_set:sync_pb.WebauthnCredentialSpecifics.creation_time)
}

// optional string user_name = 7;
inline bool WebauthnCredentialSpecifics::_internal_has_user_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WebauthnCredentialSpecifics::has_user_name() const {
  return _internal_has_user_name();
}
inline void WebauthnCredentialSpecifics::clear_user_name() {
  user_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& WebauthnCredentialSpecifics::user_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebauthnCredentialSpecifics.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebauthnCredentialSpecifics::set_user_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WebauthnCredentialSpecifics.user_name)
}
inline std::string* WebauthnCredentialSpecifics::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.WebauthnCredentialSpecifics.user_name)
  return _s;
}
inline const std::string& WebauthnCredentialSpecifics::_internal_user_name() const {
  return user_name_.Get();
}
inline void WebauthnCredentialSpecifics::_internal_set_user_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* WebauthnCredentialSpecifics::_internal_mutable_user_name() {
  _has_bits_[0] |= 0x00000010u;
  return user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* WebauthnCredentialSpecifics::release_user_name() {
  // @@protoc_insertion_point(field_release:sync_pb.WebauthnCredentialSpecifics.user_name)
  if (!_internal_has_user_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = user_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_name_.IsDefault()) {
    user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebauthnCredentialSpecifics::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_name_.IsDefault()) {
    user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WebauthnCredentialSpecifics.user_name)
}

// optional string user_display_name = 8;
inline bool WebauthnCredentialSpecifics::_internal_has_user_display_name() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WebauthnCredentialSpecifics::has_user_display_name() const {
  return _internal_has_user_display_name();
}
inline void WebauthnCredentialSpecifics::clear_user_display_name() {
  user_display_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& WebauthnCredentialSpecifics::user_display_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebauthnCredentialSpecifics.user_display_name)
  return _internal_user_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebauthnCredentialSpecifics::set_user_display_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 user_display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WebauthnCredentialSpecifics.user_display_name)
}
inline std::string* WebauthnCredentialSpecifics::mutable_user_display_name() {
  std::string* _s = _internal_mutable_user_display_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.WebauthnCredentialSpecifics.user_display_name)
  return _s;
}
inline const std::string& WebauthnCredentialSpecifics::_internal_user_display_name() const {
  return user_display_name_.Get();
}
inline void WebauthnCredentialSpecifics::_internal_set_user_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  user_display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* WebauthnCredentialSpecifics::_internal_mutable_user_display_name() {
  _has_bits_[0] |= 0x00000020u;
  return user_display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* WebauthnCredentialSpecifics::release_user_display_name() {
  // @@protoc_insertion_point(field_release:sync_pb.WebauthnCredentialSpecifics.user_display_name)
  if (!_internal_has_user_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = user_display_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_display_name_.IsDefault()) {
    user_display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebauthnCredentialSpecifics::set_allocated_user_display_name(std::string* user_display_name) {
  if (user_display_name != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  user_display_name_.SetAllocated(user_display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_display_name_.IsDefault()) {
    user_display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WebauthnCredentialSpecifics.user_display_name)
}

// optional bytes private_key = 9;
inline bool WebauthnCredentialSpecifics::_internal_has_private_key() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool WebauthnCredentialSpecifics::has_private_key() const {
  return _internal_has_private_key();
}
inline void WebauthnCredentialSpecifics::clear_private_key() {
  private_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& WebauthnCredentialSpecifics::private_key() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebauthnCredentialSpecifics.private_key)
  return _internal_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebauthnCredentialSpecifics::set_private_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 private_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WebauthnCredentialSpecifics.private_key)
}
inline std::string* WebauthnCredentialSpecifics::mutable_private_key() {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:sync_pb.WebauthnCredentialSpecifics.private_key)
  return _s;
}
inline const std::string& WebauthnCredentialSpecifics::_internal_private_key() const {
  return private_key_.Get();
}
inline void WebauthnCredentialSpecifics::_internal_set_private_key(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  private_key_.Set(value, GetArenaForAllocation());
}
inline std::string* WebauthnCredentialSpecifics::_internal_mutable_private_key() {
  _has_bits_[0] |= 0x00000040u;
  return private_key_.Mutable(GetArenaForAllocation());
}
inline std::string* WebauthnCredentialSpecifics::release_private_key() {
  // @@protoc_insertion_point(field_release:sync_pb.WebauthnCredentialSpecifics.private_key)
  if (!_internal_has_private_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = private_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault()) {
    private_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebauthnCredentialSpecifics::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  private_key_.SetAllocated(private_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault()) {
    private_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WebauthnCredentialSpecifics.private_key)
}

// optional bool third_party_payments_support = 11;
inline bool WebauthnCredentialSpecifics::_internal_has_third_party_payments_support() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool WebauthnCredentialSpecifics::has_third_party_payments_support() const {
  return _internal_has_third_party_payments_support();
}
inline void WebauthnCredentialSpecifics::clear_third_party_payments_support() {
  third_party_payments_support_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool WebauthnCredentialSpecifics::_internal_third_party_payments_support() const {
  return third_party_payments_support_;
}
inline bool WebauthnCredentialSpecifics::third_party_payments_support() const {
  // @@protoc_insertion_point(field_get:sync_pb.WebauthnCredentialSpecifics.third_party_payments_support)
  return _internal_third_party_payments_support();
}
inline void WebauthnCredentialSpecifics::_internal_set_third_party_payments_support(bool value) {
  _has_bits_[0] |= 0x00000100u;
  third_party_payments_support_ = value;
}
inline void WebauthnCredentialSpecifics::set_third_party_payments_support(bool value) {
  _internal_set_third_party_payments_support(value);
  // @@protoc_insertion_point(field_set:sync_pb.WebauthnCredentialSpecifics.third_party_payments_support)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fwebauthn_5fcredential_5fspecifics_2eproto
