// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/loopback_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2floopback_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2floopback_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/sync/protocol/sync_entity.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2floopback_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2floopback_5fserver_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class LoopbackServerEntity;
struct LoopbackServerEntityDefaultTypeInternal;
extern LoopbackServerEntityDefaultTypeInternal _LoopbackServerEntity_default_instance_;
class LoopbackServerProto;
struct LoopbackServerProtoDefaultTypeInternal;
extern LoopbackServerProtoDefaultTypeInternal _LoopbackServerProto_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::LoopbackServerEntity* Arena::CreateMaybeMessage<::sync_pb::LoopbackServerEntity>(Arena*);
template<> ::sync_pb::LoopbackServerProto* Arena::CreateMaybeMessage<::sync_pb::LoopbackServerProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum LoopbackServerEntity_Type : int {
  LoopbackServerEntity_Type_UNKNOWN = 0,
  LoopbackServerEntity_Type_BOOKMARK = 1,
  LoopbackServerEntity_Type_PERMANENT = 2,
  LoopbackServerEntity_Type_TOMBSTONE = 3,
  LoopbackServerEntity_Type_UNIQUE = 4
};
bool LoopbackServerEntity_Type_IsValid(int value);
constexpr LoopbackServerEntity_Type LoopbackServerEntity_Type_Type_MIN = LoopbackServerEntity_Type_UNKNOWN;
constexpr LoopbackServerEntity_Type LoopbackServerEntity_Type_Type_MAX = LoopbackServerEntity_Type_UNIQUE;
constexpr int LoopbackServerEntity_Type_Type_ARRAYSIZE = LoopbackServerEntity_Type_Type_MAX + 1;

const std::string& LoopbackServerEntity_Type_Name(LoopbackServerEntity_Type value);
template<typename T>
inline const std::string& LoopbackServerEntity_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoopbackServerEntity_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoopbackServerEntity_Type_Name.");
  return LoopbackServerEntity_Type_Name(static_cast<LoopbackServerEntity_Type>(enum_t_value));
}
bool LoopbackServerEntity_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoopbackServerEntity_Type* value);
// ===================================================================

class LoopbackServerEntity final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.LoopbackServerEntity) */ {
 public:
  inline LoopbackServerEntity() : LoopbackServerEntity(nullptr) {}
  ~LoopbackServerEntity() override;
  explicit PROTOBUF_CONSTEXPR LoopbackServerEntity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoopbackServerEntity(const LoopbackServerEntity& from);
  LoopbackServerEntity(LoopbackServerEntity&& from) noexcept
    : LoopbackServerEntity() {
    *this = ::std::move(from);
  }

  inline LoopbackServerEntity& operator=(const LoopbackServerEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoopbackServerEntity& operator=(LoopbackServerEntity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LoopbackServerEntity& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoopbackServerEntity* internal_default_instance() {
    return reinterpret_cast<const LoopbackServerEntity*>(
               &_LoopbackServerEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoopbackServerEntity& a, LoopbackServerEntity& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LoopbackServerEntity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoopbackServerEntity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoopbackServerEntity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoopbackServerEntity>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LoopbackServerEntity& from);
  void MergeFrom(const LoopbackServerEntity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoopbackServerEntity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.LoopbackServerEntity";
  }
  protected:
  explicit LoopbackServerEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LoopbackServerEntity_Type Type;
  static constexpr Type UNKNOWN =
    LoopbackServerEntity_Type_UNKNOWN;
  static constexpr Type BOOKMARK =
    LoopbackServerEntity_Type_BOOKMARK;
  static constexpr Type PERMANENT =
    LoopbackServerEntity_Type_PERMANENT;
  static constexpr Type TOMBSTONE =
    LoopbackServerEntity_Type_TOMBSTONE;
  static constexpr Type UNIQUE =
    LoopbackServerEntity_Type_UNIQUE;
  static inline bool Type_IsValid(int value) {
    return LoopbackServerEntity_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    LoopbackServerEntity_Type_Type_MIN;
  static constexpr Type Type_MAX =
    LoopbackServerEntity_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    LoopbackServerEntity_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return LoopbackServerEntity_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return LoopbackServerEntity_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntityFieldNumber = 2,
    kModelTypeFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // optional .sync_pb.SyncEntity entity = 2;
  bool has_entity() const;
  private:
  bool _internal_has_entity() const;
  public:
  void clear_entity();
  const ::sync_pb::SyncEntity& entity() const;
  PROTOBUF_NODISCARD ::sync_pb::SyncEntity* release_entity();
  ::sync_pb::SyncEntity* mutable_entity();
  void set_allocated_entity(::sync_pb::SyncEntity* entity);
  private:
  const ::sync_pb::SyncEntity& _internal_entity() const;
  ::sync_pb::SyncEntity* _internal_mutable_entity();
  public:
  void unsafe_arena_set_allocated_entity(
      ::sync_pb::SyncEntity* entity);
  ::sync_pb::SyncEntity* unsafe_arena_release_entity();

  // optional int64 model_type = 3;
  bool has_model_type() const;
  private:
  bool _internal_has_model_type() const;
  public:
  void clear_model_type();
  int64_t model_type() const;
  void set_model_type(int64_t value);
  private:
  int64_t _internal_model_type() const;
  void _internal_set_model_type(int64_t value);
  public:

  // optional .sync_pb.LoopbackServerEntity.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::sync_pb::LoopbackServerEntity_Type type() const;
  void set_type(::sync_pb::LoopbackServerEntity_Type value);
  private:
  ::sync_pb::LoopbackServerEntity_Type _internal_type() const;
  void _internal_set_type(::sync_pb::LoopbackServerEntity_Type value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.LoopbackServerEntity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sync_pb::SyncEntity* entity_;
  int64_t model_type_;
  int type_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2floopback_5fserver_2eproto;
};
// -------------------------------------------------------------------

class LoopbackServerProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.LoopbackServerProto) */ {
 public:
  inline LoopbackServerProto() : LoopbackServerProto(nullptr) {}
  ~LoopbackServerProto() override;
  explicit PROTOBUF_CONSTEXPR LoopbackServerProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoopbackServerProto(const LoopbackServerProto& from);
  LoopbackServerProto(LoopbackServerProto&& from) noexcept
    : LoopbackServerProto() {
    *this = ::std::move(from);
  }

  inline LoopbackServerProto& operator=(const LoopbackServerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoopbackServerProto& operator=(LoopbackServerProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LoopbackServerProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoopbackServerProto* internal_default_instance() {
    return reinterpret_cast<const LoopbackServerProto*>(
               &_LoopbackServerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoopbackServerProto& a, LoopbackServerProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LoopbackServerProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoopbackServerProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoopbackServerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoopbackServerProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LoopbackServerProto& from);
  void MergeFrom(const LoopbackServerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoopbackServerProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.LoopbackServerProto";
  }
  protected:
  explicit LoopbackServerProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 3,
    kKeystoreKeysFieldNumber = 4,
    kVersionFieldNumber = 1,
    kStoreBirthdayFieldNumber = 2,
    kLastVersionAssignedFieldNumber = 5,
  };
  // repeated .sync_pb.LoopbackServerEntity entities = 3;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::sync_pb::LoopbackServerEntity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LoopbackServerEntity >*
      mutable_entities();
  private:
  const ::sync_pb::LoopbackServerEntity& _internal_entities(int index) const;
  ::sync_pb::LoopbackServerEntity* _internal_add_entities();
  public:
  const ::sync_pb::LoopbackServerEntity& entities(int index) const;
  ::sync_pb::LoopbackServerEntity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LoopbackServerEntity >&
      entities() const;

  // repeated bytes keystore_keys = 4;
  int keystore_keys_size() const;
  private:
  int _internal_keystore_keys_size() const;
  public:
  void clear_keystore_keys();
  const std::string& keystore_keys(int index) const;
  std::string* mutable_keystore_keys(int index);
  void set_keystore_keys(int index, const std::string& value);
  void set_keystore_keys(int index, std::string&& value);
  void set_keystore_keys(int index, const char* value);
  void set_keystore_keys(int index, const void* value, size_t size);
  std::string* add_keystore_keys();
  void add_keystore_keys(const std::string& value);
  void add_keystore_keys(std::string&& value);
  void add_keystore_keys(const char* value);
  void add_keystore_keys(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keystore_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keystore_keys();
  private:
  const std::string& _internal_keystore_keys(int index) const;
  std::string* _internal_add_keystore_keys();
  public:

  // optional int64 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int64_t version() const;
  void set_version(int64_t value);
  private:
  int64_t _internal_version() const;
  void _internal_set_version(int64_t value);
  public:

  // optional int64 store_birthday = 2;
  bool has_store_birthday() const;
  private:
  bool _internal_has_store_birthday() const;
  public:
  void clear_store_birthday();
  int64_t store_birthday() const;
  void set_store_birthday(int64_t value);
  private:
  int64_t _internal_store_birthday() const;
  void _internal_set_store_birthday(int64_t value);
  public:

  // optional int64 last_version_assigned = 5;
  bool has_last_version_assigned() const;
  private:
  bool _internal_has_last_version_assigned() const;
  public:
  void clear_last_version_assigned();
  int64_t last_version_assigned() const;
  void set_last_version_assigned(int64_t value);
  private:
  int64_t _internal_last_version_assigned() const;
  void _internal_set_last_version_assigned(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.LoopbackServerProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LoopbackServerEntity > entities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keystore_keys_;
  int64_t version_;
  int64_t store_birthday_;
  int64_t last_version_assigned_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2floopback_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoopbackServerEntity

// optional .sync_pb.LoopbackServerEntity.Type type = 1;
inline bool LoopbackServerEntity::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoopbackServerEntity::has_type() const {
  return _internal_has_type();
}
inline void LoopbackServerEntity::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::sync_pb::LoopbackServerEntity_Type LoopbackServerEntity::_internal_type() const {
  return static_cast< ::sync_pb::LoopbackServerEntity_Type >(type_);
}
inline ::sync_pb::LoopbackServerEntity_Type LoopbackServerEntity::type() const {
  // @@protoc_insertion_point(field_get:sync_pb.LoopbackServerEntity.type)
  return _internal_type();
}
inline void LoopbackServerEntity::_internal_set_type(::sync_pb::LoopbackServerEntity_Type value) {
  assert(::sync_pb::LoopbackServerEntity_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void LoopbackServerEntity::set_type(::sync_pb::LoopbackServerEntity_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sync_pb.LoopbackServerEntity.type)
}

// optional .sync_pb.SyncEntity entity = 2;
inline bool LoopbackServerEntity::_internal_has_entity() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || entity_ != nullptr);
  return value;
}
inline bool LoopbackServerEntity::has_entity() const {
  return _internal_has_entity();
}
inline const ::sync_pb::SyncEntity& LoopbackServerEntity::_internal_entity() const {
  const ::sync_pb::SyncEntity* p = entity_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::SyncEntity&>(
      ::sync_pb::_SyncEntity_default_instance_);
}
inline const ::sync_pb::SyncEntity& LoopbackServerEntity::entity() const {
  // @@protoc_insertion_point(field_get:sync_pb.LoopbackServerEntity.entity)
  return _internal_entity();
}
inline void LoopbackServerEntity::unsafe_arena_set_allocated_entity(
    ::sync_pb::SyncEntity* entity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_);
  }
  entity_ = entity;
  if (entity) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.LoopbackServerEntity.entity)
}
inline ::sync_pb::SyncEntity* LoopbackServerEntity::release_entity() {
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::SyncEntity* temp = entity_;
  entity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::SyncEntity* LoopbackServerEntity::unsafe_arena_release_entity() {
  // @@protoc_insertion_point(field_release:sync_pb.LoopbackServerEntity.entity)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::SyncEntity* temp = entity_;
  entity_ = nullptr;
  return temp;
}
inline ::sync_pb::SyncEntity* LoopbackServerEntity::_internal_mutable_entity() {
  _has_bits_[0] |= 0x00000001u;
  if (entity_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::SyncEntity>(GetArenaForAllocation());
    entity_ = p;
  }
  return entity_;
}
inline ::sync_pb::SyncEntity* LoopbackServerEntity::mutable_entity() {
  ::sync_pb::SyncEntity* _msg = _internal_mutable_entity();
  // @@protoc_insertion_point(field_mutable:sync_pb.LoopbackServerEntity.entity)
  return _msg;
}
inline void LoopbackServerEntity::set_allocated_entity(::sync_pb::SyncEntity* entity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_);
  }
  if (entity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity));
    if (message_arena != submessage_arena) {
      entity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entity_ = entity;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.LoopbackServerEntity.entity)
}

// optional int64 model_type = 3;
inline bool LoopbackServerEntity::_internal_has_model_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoopbackServerEntity::has_model_type() const {
  return _internal_has_model_type();
}
inline void LoopbackServerEntity::clear_model_type() {
  model_type_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t LoopbackServerEntity::_internal_model_type() const {
  return model_type_;
}
inline int64_t LoopbackServerEntity::model_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.LoopbackServerEntity.model_type)
  return _internal_model_type();
}
inline void LoopbackServerEntity::_internal_set_model_type(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  model_type_ = value;
}
inline void LoopbackServerEntity::set_model_type(int64_t value) {
  _internal_set_model_type(value);
  // @@protoc_insertion_point(field_set:sync_pb.LoopbackServerEntity.model_type)
}

// -------------------------------------------------------------------

// LoopbackServerProto

// optional int64 version = 1;
inline bool LoopbackServerProto::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoopbackServerProto::has_version() const {
  return _internal_has_version();
}
inline void LoopbackServerProto::clear_version() {
  version_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t LoopbackServerProto::_internal_version() const {
  return version_;
}
inline int64_t LoopbackServerProto::version() const {
  // @@protoc_insertion_point(field_get:sync_pb.LoopbackServerProto.version)
  return _internal_version();
}
inline void LoopbackServerProto::_internal_set_version(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  version_ = value;
}
inline void LoopbackServerProto::set_version(int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:sync_pb.LoopbackServerProto.version)
}

// optional int64 store_birthday = 2;
inline bool LoopbackServerProto::_internal_has_store_birthday() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoopbackServerProto::has_store_birthday() const {
  return _internal_has_store_birthday();
}
inline void LoopbackServerProto::clear_store_birthday() {
  store_birthday_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t LoopbackServerProto::_internal_store_birthday() const {
  return store_birthday_;
}
inline int64_t LoopbackServerProto::store_birthday() const {
  // @@protoc_insertion_point(field_get:sync_pb.LoopbackServerProto.store_birthday)
  return _internal_store_birthday();
}
inline void LoopbackServerProto::_internal_set_store_birthday(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  store_birthday_ = value;
}
inline void LoopbackServerProto::set_store_birthday(int64_t value) {
  _internal_set_store_birthday(value);
  // @@protoc_insertion_point(field_set:sync_pb.LoopbackServerProto.store_birthday)
}

// repeated .sync_pb.LoopbackServerEntity entities = 3;
inline int LoopbackServerProto::_internal_entities_size() const {
  return entities_.size();
}
inline int LoopbackServerProto::entities_size() const {
  return _internal_entities_size();
}
inline void LoopbackServerProto::clear_entities() {
  entities_.Clear();
}
inline ::sync_pb::LoopbackServerEntity* LoopbackServerProto::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.LoopbackServerProto.entities)
  return entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LoopbackServerEntity >*
LoopbackServerProto::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.LoopbackServerProto.entities)
  return &entities_;
}
inline const ::sync_pb::LoopbackServerEntity& LoopbackServerProto::_internal_entities(int index) const {
  return entities_.Get(index);
}
inline const ::sync_pb::LoopbackServerEntity& LoopbackServerProto::entities(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.LoopbackServerProto.entities)
  return _internal_entities(index);
}
inline ::sync_pb::LoopbackServerEntity* LoopbackServerProto::_internal_add_entities() {
  return entities_.Add();
}
inline ::sync_pb::LoopbackServerEntity* LoopbackServerProto::add_entities() {
  ::sync_pb::LoopbackServerEntity* _add = _internal_add_entities();
  // @@protoc_insertion_point(field_add:sync_pb.LoopbackServerProto.entities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LoopbackServerEntity >&
LoopbackServerProto::entities() const {
  // @@protoc_insertion_point(field_list:sync_pb.LoopbackServerProto.entities)
  return entities_;
}

// repeated bytes keystore_keys = 4;
inline int LoopbackServerProto::_internal_keystore_keys_size() const {
  return keystore_keys_.size();
}
inline int LoopbackServerProto::keystore_keys_size() const {
  return _internal_keystore_keys_size();
}
inline void LoopbackServerProto::clear_keystore_keys() {
  keystore_keys_.Clear();
}
inline std::string* LoopbackServerProto::add_keystore_keys() {
  std::string* _s = _internal_add_keystore_keys();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.LoopbackServerProto.keystore_keys)
  return _s;
}
inline const std::string& LoopbackServerProto::_internal_keystore_keys(int index) const {
  return keystore_keys_.Get(index);
}
inline const std::string& LoopbackServerProto::keystore_keys(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.LoopbackServerProto.keystore_keys)
  return _internal_keystore_keys(index);
}
inline std::string* LoopbackServerProto::mutable_keystore_keys(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.LoopbackServerProto.keystore_keys)
  return keystore_keys_.Mutable(index);
}
inline void LoopbackServerProto::set_keystore_keys(int index, const std::string& value) {
  keystore_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.LoopbackServerProto.keystore_keys)
}
inline void LoopbackServerProto::set_keystore_keys(int index, std::string&& value) {
  keystore_keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.LoopbackServerProto.keystore_keys)
}
inline void LoopbackServerProto::set_keystore_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keystore_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.LoopbackServerProto.keystore_keys)
}
inline void LoopbackServerProto::set_keystore_keys(int index, const void* value, size_t size) {
  keystore_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.LoopbackServerProto.keystore_keys)
}
inline std::string* LoopbackServerProto::_internal_add_keystore_keys() {
  return keystore_keys_.Add();
}
inline void LoopbackServerProto::add_keystore_keys(const std::string& value) {
  keystore_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.LoopbackServerProto.keystore_keys)
}
inline void LoopbackServerProto::add_keystore_keys(std::string&& value) {
  keystore_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.LoopbackServerProto.keystore_keys)
}
inline void LoopbackServerProto::add_keystore_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keystore_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.LoopbackServerProto.keystore_keys)
}
inline void LoopbackServerProto::add_keystore_keys(const void* value, size_t size) {
  keystore_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.LoopbackServerProto.keystore_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LoopbackServerProto::keystore_keys() const {
  // @@protoc_insertion_point(field_list:sync_pb.LoopbackServerProto.keystore_keys)
  return keystore_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LoopbackServerProto::mutable_keystore_keys() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.LoopbackServerProto.keystore_keys)
  return &keystore_keys_;
}

// optional int64 last_version_assigned = 5;
inline bool LoopbackServerProto::_internal_has_last_version_assigned() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoopbackServerProto::has_last_version_assigned() const {
  return _internal_has_last_version_assigned();
}
inline void LoopbackServerProto::clear_last_version_assigned() {
  last_version_assigned_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t LoopbackServerProto::_internal_last_version_assigned() const {
  return last_version_assigned_;
}
inline int64_t LoopbackServerProto::last_version_assigned() const {
  // @@protoc_insertion_point(field_get:sync_pb.LoopbackServerProto.last_version_assigned)
  return _internal_last_version_assigned();
}
inline void LoopbackServerProto::_internal_set_last_version_assigned(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  last_version_assigned_ = value;
}
inline void LoopbackServerProto::set_last_version_assigned(int64_t value) {
  _internal_set_last_version_assigned(value);
  // @@protoc_insertion_point(field_set:sync_pb.LoopbackServerProto.last_version_assigned)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::LoopbackServerEntity_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2floopback_5fserver_2eproto
