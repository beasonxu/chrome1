// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/workspace_desk_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fworkspace_5fdesk_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fworkspace_5fdesk_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fworkspace_5fdesk_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fworkspace_5fdesk_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class WorkspaceDeskSpecifics;
struct WorkspaceDeskSpecificsDefaultTypeInternal;
extern WorkspaceDeskSpecificsDefaultTypeInternal _WorkspaceDeskSpecifics_default_instance_;
class WorkspaceDeskSpecifics_App;
struct WorkspaceDeskSpecifics_AppDefaultTypeInternal;
extern WorkspaceDeskSpecifics_AppDefaultTypeInternal _WorkspaceDeskSpecifics_App_default_instance_;
class WorkspaceDeskSpecifics_AppOneOf;
struct WorkspaceDeskSpecifics_AppOneOfDefaultTypeInternal;
extern WorkspaceDeskSpecifics_AppOneOfDefaultTypeInternal _WorkspaceDeskSpecifics_AppOneOf_default_instance_;
class WorkspaceDeskSpecifics_ArcApp;
struct WorkspaceDeskSpecifics_ArcAppDefaultTypeInternal;
extern WorkspaceDeskSpecifics_ArcAppDefaultTypeInternal _WorkspaceDeskSpecifics_ArcApp_default_instance_;
class WorkspaceDeskSpecifics_ArcApp_WindowSize;
struct WorkspaceDeskSpecifics_ArcApp_WindowSizeDefaultTypeInternal;
extern WorkspaceDeskSpecifics_ArcApp_WindowSizeDefaultTypeInternal _WorkspaceDeskSpecifics_ArcApp_WindowSize_default_instance_;
class WorkspaceDeskSpecifics_BrowserAppWindow;
struct WorkspaceDeskSpecifics_BrowserAppWindowDefaultTypeInternal;
extern WorkspaceDeskSpecifics_BrowserAppWindowDefaultTypeInternal _WorkspaceDeskSpecifics_BrowserAppWindow_default_instance_;
class WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab;
struct WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTabDefaultTypeInternal;
extern WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTabDefaultTypeInternal _WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab_default_instance_;
class WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup;
struct WorkspaceDeskSpecifics_BrowserAppWindow_TabGroupDefaultTypeInternal;
extern WorkspaceDeskSpecifics_BrowserAppWindow_TabGroupDefaultTypeInternal _WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup_default_instance_;
class WorkspaceDeskSpecifics_ChromeApp;
struct WorkspaceDeskSpecifics_ChromeAppDefaultTypeInternal;
extern WorkspaceDeskSpecifics_ChromeAppDefaultTypeInternal _WorkspaceDeskSpecifics_ChromeApp_default_instance_;
class WorkspaceDeskSpecifics_Desk;
struct WorkspaceDeskSpecifics_DeskDefaultTypeInternal;
extern WorkspaceDeskSpecifics_DeskDefaultTypeInternal _WorkspaceDeskSpecifics_Desk_default_instance_;
class WorkspaceDeskSpecifics_ProgressiveWebApp;
struct WorkspaceDeskSpecifics_ProgressiveWebAppDefaultTypeInternal;
extern WorkspaceDeskSpecifics_ProgressiveWebAppDefaultTypeInternal _WorkspaceDeskSpecifics_ProgressiveWebApp_default_instance_;
class WorkspaceDeskSpecifics_WindowBound;
struct WorkspaceDeskSpecifics_WindowBoundDefaultTypeInternal;
extern WorkspaceDeskSpecifics_WindowBoundDefaultTypeInternal _WorkspaceDeskSpecifics_WindowBound_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::WorkspaceDeskSpecifics* Arena::CreateMaybeMessage<::sync_pb::WorkspaceDeskSpecifics>(Arena*);
template<> ::sync_pb::WorkspaceDeskSpecifics_App* Arena::CreateMaybeMessage<::sync_pb::WorkspaceDeskSpecifics_App>(Arena*);
template<> ::sync_pb::WorkspaceDeskSpecifics_AppOneOf* Arena::CreateMaybeMessage<::sync_pb::WorkspaceDeskSpecifics_AppOneOf>(Arena*);
template<> ::sync_pb::WorkspaceDeskSpecifics_ArcApp* Arena::CreateMaybeMessage<::sync_pb::WorkspaceDeskSpecifics_ArcApp>(Arena*);
template<> ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* Arena::CreateMaybeMessage<::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize>(Arena*);
template<> ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow* Arena::CreateMaybeMessage<::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow>(Arena*);
template<> ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab* Arena::CreateMaybeMessage<::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab>(Arena*);
template<> ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup* Arena::CreateMaybeMessage<::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup>(Arena*);
template<> ::sync_pb::WorkspaceDeskSpecifics_ChromeApp* Arena::CreateMaybeMessage<::sync_pb::WorkspaceDeskSpecifics_ChromeApp>(Arena*);
template<> ::sync_pb::WorkspaceDeskSpecifics_Desk* Arena::CreateMaybeMessage<::sync_pb::WorkspaceDeskSpecifics_Desk>(Arena*);
template<> ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp* Arena::CreateMaybeMessage<::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp>(Arena*);
template<> ::sync_pb::WorkspaceDeskSpecifics_WindowBound* Arena::CreateMaybeMessage<::sync_pb::WorkspaceDeskSpecifics_WindowBound>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum WorkspaceDeskSpecifics_LaunchContainer : int {
  WorkspaceDeskSpecifics_LaunchContainer_LAUNCH_CONTAINER_UNSPECIFIED = 0,
  WorkspaceDeskSpecifics_LaunchContainer_LAUNCH_CONTAINER_WINDOW = 1,
  WorkspaceDeskSpecifics_LaunchContainer_LAUNCH_CONTAINER_PANEL_DEPRECATED = 2,
  WorkspaceDeskSpecifics_LaunchContainer_LAUNCH_CONTAINER_TAB = 3,
  WorkspaceDeskSpecifics_LaunchContainer_LAUNCH_CONTAINER_NONE = 4
};
bool WorkspaceDeskSpecifics_LaunchContainer_IsValid(int value);
constexpr WorkspaceDeskSpecifics_LaunchContainer WorkspaceDeskSpecifics_LaunchContainer_LaunchContainer_MIN = WorkspaceDeskSpecifics_LaunchContainer_LAUNCH_CONTAINER_UNSPECIFIED;
constexpr WorkspaceDeskSpecifics_LaunchContainer WorkspaceDeskSpecifics_LaunchContainer_LaunchContainer_MAX = WorkspaceDeskSpecifics_LaunchContainer_LAUNCH_CONTAINER_NONE;
constexpr int WorkspaceDeskSpecifics_LaunchContainer_LaunchContainer_ARRAYSIZE = WorkspaceDeskSpecifics_LaunchContainer_LaunchContainer_MAX + 1;

const std::string& WorkspaceDeskSpecifics_LaunchContainer_Name(WorkspaceDeskSpecifics_LaunchContainer value);
template<typename T>
inline const std::string& WorkspaceDeskSpecifics_LaunchContainer_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WorkspaceDeskSpecifics_LaunchContainer>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WorkspaceDeskSpecifics_LaunchContainer_Name.");
  return WorkspaceDeskSpecifics_LaunchContainer_Name(static_cast<WorkspaceDeskSpecifics_LaunchContainer>(enum_t_value));
}
bool WorkspaceDeskSpecifics_LaunchContainer_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WorkspaceDeskSpecifics_LaunchContainer* value);
enum WorkspaceDeskSpecifics_WindowState : int {
  WorkspaceDeskSpecifics_WindowState_UNKNOWN_WINDOW_STATE = 0,
  WorkspaceDeskSpecifics_WindowState_NORMAL = 1,
  WorkspaceDeskSpecifics_WindowState_MINIMIZED = 2,
  WorkspaceDeskSpecifics_WindowState_MAXIMIZED = 3,
  WorkspaceDeskSpecifics_WindowState_FULLSCREEN = 4,
  WorkspaceDeskSpecifics_WindowState_PRIMARY_SNAPPED = 5,
  WorkspaceDeskSpecifics_WindowState_SECONDARY_SNAPPED = 6
};
bool WorkspaceDeskSpecifics_WindowState_IsValid(int value);
constexpr WorkspaceDeskSpecifics_WindowState WorkspaceDeskSpecifics_WindowState_WindowState_MIN = WorkspaceDeskSpecifics_WindowState_UNKNOWN_WINDOW_STATE;
constexpr WorkspaceDeskSpecifics_WindowState WorkspaceDeskSpecifics_WindowState_WindowState_MAX = WorkspaceDeskSpecifics_WindowState_SECONDARY_SNAPPED;
constexpr int WorkspaceDeskSpecifics_WindowState_WindowState_ARRAYSIZE = WorkspaceDeskSpecifics_WindowState_WindowState_MAX + 1;

const std::string& WorkspaceDeskSpecifics_WindowState_Name(WorkspaceDeskSpecifics_WindowState value);
template<typename T>
inline const std::string& WorkspaceDeskSpecifics_WindowState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WorkspaceDeskSpecifics_WindowState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WorkspaceDeskSpecifics_WindowState_Name.");
  return WorkspaceDeskSpecifics_WindowState_Name(static_cast<WorkspaceDeskSpecifics_WindowState>(enum_t_value));
}
bool WorkspaceDeskSpecifics_WindowState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WorkspaceDeskSpecifics_WindowState* value);
enum WorkspaceDeskSpecifics_WindowOpenDisposition : int {
  WorkspaceDeskSpecifics_WindowOpenDisposition_UNKNOWN = 0,
  WorkspaceDeskSpecifics_WindowOpenDisposition_CURRENT_TAB = 1,
  WorkspaceDeskSpecifics_WindowOpenDisposition_SINGLETON_TAB = 2,
  WorkspaceDeskSpecifics_WindowOpenDisposition_NEW_FOREGROUND_TAB = 3,
  WorkspaceDeskSpecifics_WindowOpenDisposition_NEW_BACKGROUND_TAB = 4,
  WorkspaceDeskSpecifics_WindowOpenDisposition_NEW_POPUP = 5,
  WorkspaceDeskSpecifics_WindowOpenDisposition_NEW_WINDOW = 6,
  WorkspaceDeskSpecifics_WindowOpenDisposition_SAVE_TO_DISK = 7,
  WorkspaceDeskSpecifics_WindowOpenDisposition_OFF_THE_RECORD = 8,
  WorkspaceDeskSpecifics_WindowOpenDisposition_IGNORE_ACTION = 9,
  WorkspaceDeskSpecifics_WindowOpenDisposition_SWITCH_TO_TAB = 10,
  WorkspaceDeskSpecifics_WindowOpenDisposition_NEW_PICTURE_IN_PICTURE = 11
};
bool WorkspaceDeskSpecifics_WindowOpenDisposition_IsValid(int value);
constexpr WorkspaceDeskSpecifics_WindowOpenDisposition WorkspaceDeskSpecifics_WindowOpenDisposition_WindowOpenDisposition_MIN = WorkspaceDeskSpecifics_WindowOpenDisposition_UNKNOWN;
constexpr WorkspaceDeskSpecifics_WindowOpenDisposition WorkspaceDeskSpecifics_WindowOpenDisposition_WindowOpenDisposition_MAX = WorkspaceDeskSpecifics_WindowOpenDisposition_NEW_PICTURE_IN_PICTURE;
constexpr int WorkspaceDeskSpecifics_WindowOpenDisposition_WindowOpenDisposition_ARRAYSIZE = WorkspaceDeskSpecifics_WindowOpenDisposition_WindowOpenDisposition_MAX + 1;

const std::string& WorkspaceDeskSpecifics_WindowOpenDisposition_Name(WorkspaceDeskSpecifics_WindowOpenDisposition value);
template<typename T>
inline const std::string& WorkspaceDeskSpecifics_WindowOpenDisposition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WorkspaceDeskSpecifics_WindowOpenDisposition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WorkspaceDeskSpecifics_WindowOpenDisposition_Name.");
  return WorkspaceDeskSpecifics_WindowOpenDisposition_Name(static_cast<WorkspaceDeskSpecifics_WindowOpenDisposition>(enum_t_value));
}
bool WorkspaceDeskSpecifics_WindowOpenDisposition_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WorkspaceDeskSpecifics_WindowOpenDisposition* value);
enum WorkspaceDeskSpecifics_DeskType : int {
  WorkspaceDeskSpecifics_DeskType_UNKNOWN_TYPE = 0,
  WorkspaceDeskSpecifics_DeskType_TEMPLATE = 1,
  WorkspaceDeskSpecifics_DeskType_SAVE_AND_RECALL = 2
};
bool WorkspaceDeskSpecifics_DeskType_IsValid(int value);
constexpr WorkspaceDeskSpecifics_DeskType WorkspaceDeskSpecifics_DeskType_DeskType_MIN = WorkspaceDeskSpecifics_DeskType_UNKNOWN_TYPE;
constexpr WorkspaceDeskSpecifics_DeskType WorkspaceDeskSpecifics_DeskType_DeskType_MAX = WorkspaceDeskSpecifics_DeskType_SAVE_AND_RECALL;
constexpr int WorkspaceDeskSpecifics_DeskType_DeskType_ARRAYSIZE = WorkspaceDeskSpecifics_DeskType_DeskType_MAX + 1;

const std::string& WorkspaceDeskSpecifics_DeskType_Name(WorkspaceDeskSpecifics_DeskType value);
template<typename T>
inline const std::string& WorkspaceDeskSpecifics_DeskType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WorkspaceDeskSpecifics_DeskType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WorkspaceDeskSpecifics_DeskType_Name.");
  return WorkspaceDeskSpecifics_DeskType_Name(static_cast<WorkspaceDeskSpecifics_DeskType>(enum_t_value));
}
bool WorkspaceDeskSpecifics_DeskType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WorkspaceDeskSpecifics_DeskType* value);
enum WorkspaceDeskSpecifics_TabGroupColor : int {
  WorkspaceDeskSpecifics_TabGroupColor_UNKNOWN_COLOR = 0,
  WorkspaceDeskSpecifics_TabGroupColor_GREY = 1,
  WorkspaceDeskSpecifics_TabGroupColor_BLUE = 2,
  WorkspaceDeskSpecifics_TabGroupColor_RED = 3,
  WorkspaceDeskSpecifics_TabGroupColor_YELLOW = 4,
  WorkspaceDeskSpecifics_TabGroupColor_GREEN = 5,
  WorkspaceDeskSpecifics_TabGroupColor_PINK = 6,
  WorkspaceDeskSpecifics_TabGroupColor_PURPLE = 7,
  WorkspaceDeskSpecifics_TabGroupColor_CYAN = 8,
  WorkspaceDeskSpecifics_TabGroupColor_ORANGE = 9
};
bool WorkspaceDeskSpecifics_TabGroupColor_IsValid(int value);
constexpr WorkspaceDeskSpecifics_TabGroupColor WorkspaceDeskSpecifics_TabGroupColor_TabGroupColor_MIN = WorkspaceDeskSpecifics_TabGroupColor_UNKNOWN_COLOR;
constexpr WorkspaceDeskSpecifics_TabGroupColor WorkspaceDeskSpecifics_TabGroupColor_TabGroupColor_MAX = WorkspaceDeskSpecifics_TabGroupColor_ORANGE;
constexpr int WorkspaceDeskSpecifics_TabGroupColor_TabGroupColor_ARRAYSIZE = WorkspaceDeskSpecifics_TabGroupColor_TabGroupColor_MAX + 1;

const std::string& WorkspaceDeskSpecifics_TabGroupColor_Name(WorkspaceDeskSpecifics_TabGroupColor value);
template<typename T>
inline const std::string& WorkspaceDeskSpecifics_TabGroupColor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WorkspaceDeskSpecifics_TabGroupColor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WorkspaceDeskSpecifics_TabGroupColor_Name.");
  return WorkspaceDeskSpecifics_TabGroupColor_Name(static_cast<WorkspaceDeskSpecifics_TabGroupColor>(enum_t_value));
}
bool WorkspaceDeskSpecifics_TabGroupColor_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WorkspaceDeskSpecifics_TabGroupColor* value);
// ===================================================================

class WorkspaceDeskSpecifics_Desk final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WorkspaceDeskSpecifics.Desk) */ {
 public:
  inline WorkspaceDeskSpecifics_Desk() : WorkspaceDeskSpecifics_Desk(nullptr) {}
  ~WorkspaceDeskSpecifics_Desk() override;
  explicit PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_Desk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkspaceDeskSpecifics_Desk(const WorkspaceDeskSpecifics_Desk& from);
  WorkspaceDeskSpecifics_Desk(WorkspaceDeskSpecifics_Desk&& from) noexcept
    : WorkspaceDeskSpecifics_Desk() {
    *this = ::std::move(from);
  }

  inline WorkspaceDeskSpecifics_Desk& operator=(const WorkspaceDeskSpecifics_Desk& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkspaceDeskSpecifics_Desk& operator=(WorkspaceDeskSpecifics_Desk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WorkspaceDeskSpecifics_Desk& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkspaceDeskSpecifics_Desk* internal_default_instance() {
    return reinterpret_cast<const WorkspaceDeskSpecifics_Desk*>(
               &_WorkspaceDeskSpecifics_Desk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorkspaceDeskSpecifics_Desk& a, WorkspaceDeskSpecifics_Desk& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WorkspaceDeskSpecifics_Desk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkspaceDeskSpecifics_Desk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkspaceDeskSpecifics_Desk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkspaceDeskSpecifics_Desk>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WorkspaceDeskSpecifics_Desk& from);
  void MergeFrom(const WorkspaceDeskSpecifics_Desk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WorkspaceDeskSpecifics_Desk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WorkspaceDeskSpecifics.Desk";
  }
  protected:
  explicit WorkspaceDeskSpecifics_Desk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppsFieldNumber = 1,
  };
  // repeated .sync_pb.WorkspaceDeskSpecifics.App apps = 1;
  int apps_size() const;
  private:
  int _internal_apps_size() const;
  public:
  void clear_apps();
  ::sync_pb::WorkspaceDeskSpecifics_App* mutable_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WorkspaceDeskSpecifics_App >*
      mutable_apps();
  private:
  const ::sync_pb::WorkspaceDeskSpecifics_App& _internal_apps(int index) const;
  ::sync_pb::WorkspaceDeskSpecifics_App* _internal_add_apps();
  public:
  const ::sync_pb::WorkspaceDeskSpecifics_App& apps(int index) const;
  ::sync_pb::WorkspaceDeskSpecifics_App* add_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WorkspaceDeskSpecifics_App >&
      apps() const;

  // @@protoc_insertion_point(class_scope:sync_pb.WorkspaceDeskSpecifics.Desk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WorkspaceDeskSpecifics_App > apps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fworkspace_5fdesk_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WorkspaceDeskSpecifics_App final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WorkspaceDeskSpecifics.App) */ {
 public:
  inline WorkspaceDeskSpecifics_App() : WorkspaceDeskSpecifics_App(nullptr) {}
  ~WorkspaceDeskSpecifics_App() override;
  explicit PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_App(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkspaceDeskSpecifics_App(const WorkspaceDeskSpecifics_App& from);
  WorkspaceDeskSpecifics_App(WorkspaceDeskSpecifics_App&& from) noexcept
    : WorkspaceDeskSpecifics_App() {
    *this = ::std::move(from);
  }

  inline WorkspaceDeskSpecifics_App& operator=(const WorkspaceDeskSpecifics_App& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkspaceDeskSpecifics_App& operator=(WorkspaceDeskSpecifics_App&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WorkspaceDeskSpecifics_App& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkspaceDeskSpecifics_App* internal_default_instance() {
    return reinterpret_cast<const WorkspaceDeskSpecifics_App*>(
               &_WorkspaceDeskSpecifics_App_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WorkspaceDeskSpecifics_App& a, WorkspaceDeskSpecifics_App& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WorkspaceDeskSpecifics_App* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkspaceDeskSpecifics_App* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkspaceDeskSpecifics_App* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkspaceDeskSpecifics_App>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WorkspaceDeskSpecifics_App& from);
  void MergeFrom(const WorkspaceDeskSpecifics_App& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WorkspaceDeskSpecifics_App* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WorkspaceDeskSpecifics.App";
  }
  protected:
  explicit WorkspaceDeskSpecifics_App(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppNameFieldNumber = 10,
    kTitleFieldNumber = 11,
    kWindowBoundFieldNumber = 1,
    kAppFieldNumber = 4,
    kWindowStateFieldNumber = 2,
    kZIndexFieldNumber = 3,
    kDisplayIdFieldNumber = 6,
    kWindowIdFieldNumber = 5,
    kPreMinimizedWindowStateFieldNumber = 7,
    kContainerFieldNumber = 8,
    kDispositionFieldNumber = 9,
    kSnapPercentageFieldNumber = 12,
  };
  // optional string app_name = 10;
  bool has_app_name() const;
  private:
  bool _internal_has_app_name() const;
  public:
  void clear_app_name();
  const std::string& app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_name();
  PROTOBUF_NODISCARD std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);
  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // optional string title = 11;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional .sync_pb.WorkspaceDeskSpecifics.WindowBound window_bound = 1;
  bool has_window_bound() const;
  private:
  bool _internal_has_window_bound() const;
  public:
  void clear_window_bound();
  const ::sync_pb::WorkspaceDeskSpecifics_WindowBound& window_bound() const;
  PROTOBUF_NODISCARD ::sync_pb::WorkspaceDeskSpecifics_WindowBound* release_window_bound();
  ::sync_pb::WorkspaceDeskSpecifics_WindowBound* mutable_window_bound();
  void set_allocated_window_bound(::sync_pb::WorkspaceDeskSpecifics_WindowBound* window_bound);
  private:
  const ::sync_pb::WorkspaceDeskSpecifics_WindowBound& _internal_window_bound() const;
  ::sync_pb::WorkspaceDeskSpecifics_WindowBound* _internal_mutable_window_bound();
  public:
  void unsafe_arena_set_allocated_window_bound(
      ::sync_pb::WorkspaceDeskSpecifics_WindowBound* window_bound);
  ::sync_pb::WorkspaceDeskSpecifics_WindowBound* unsafe_arena_release_window_bound();

  // optional .sync_pb.WorkspaceDeskSpecifics.AppOneOf app = 4;
  bool has_app() const;
  private:
  bool _internal_has_app() const;
  public:
  void clear_app();
  const ::sync_pb::WorkspaceDeskSpecifics_AppOneOf& app() const;
  PROTOBUF_NODISCARD ::sync_pb::WorkspaceDeskSpecifics_AppOneOf* release_app();
  ::sync_pb::WorkspaceDeskSpecifics_AppOneOf* mutable_app();
  void set_allocated_app(::sync_pb::WorkspaceDeskSpecifics_AppOneOf* app);
  private:
  const ::sync_pb::WorkspaceDeskSpecifics_AppOneOf& _internal_app() const;
  ::sync_pb::WorkspaceDeskSpecifics_AppOneOf* _internal_mutable_app();
  public:
  void unsafe_arena_set_allocated_app(
      ::sync_pb::WorkspaceDeskSpecifics_AppOneOf* app);
  ::sync_pb::WorkspaceDeskSpecifics_AppOneOf* unsafe_arena_release_app();

  // optional .sync_pb.WorkspaceDeskSpecifics.WindowState window_state = 2;
  bool has_window_state() const;
  private:
  bool _internal_has_window_state() const;
  public:
  void clear_window_state();
  ::sync_pb::WorkspaceDeskSpecifics_WindowState window_state() const;
  void set_window_state(::sync_pb::WorkspaceDeskSpecifics_WindowState value);
  private:
  ::sync_pb::WorkspaceDeskSpecifics_WindowState _internal_window_state() const;
  void _internal_set_window_state(::sync_pb::WorkspaceDeskSpecifics_WindowState value);
  public:

  // optional int32 z_index = 3;
  bool has_z_index() const;
  private:
  bool _internal_has_z_index() const;
  public:
  void clear_z_index();
  int32_t z_index() const;
  void set_z_index(int32_t value);
  private:
  int32_t _internal_z_index() const;
  void _internal_set_z_index(int32_t value);
  public:

  // optional int64 display_id = 6;
  bool has_display_id() const;
  private:
  bool _internal_has_display_id() const;
  public:
  void clear_display_id();
  int64_t display_id() const;
  void set_display_id(int64_t value);
  private:
  int64_t _internal_display_id() const;
  void _internal_set_display_id(int64_t value);
  public:

  // optional int32 window_id = 5;
  bool has_window_id() const;
  private:
  bool _internal_has_window_id() const;
  public:
  void clear_window_id();
  int32_t window_id() const;
  void set_window_id(int32_t value);
  private:
  int32_t _internal_window_id() const;
  void _internal_set_window_id(int32_t value);
  public:

  // optional .sync_pb.WorkspaceDeskSpecifics.WindowState pre_minimized_window_state = 7;
  bool has_pre_minimized_window_state() const;
  private:
  bool _internal_has_pre_minimized_window_state() const;
  public:
  void clear_pre_minimized_window_state();
  ::sync_pb::WorkspaceDeskSpecifics_WindowState pre_minimized_window_state() const;
  void set_pre_minimized_window_state(::sync_pb::WorkspaceDeskSpecifics_WindowState value);
  private:
  ::sync_pb::WorkspaceDeskSpecifics_WindowState _internal_pre_minimized_window_state() const;
  void _internal_set_pre_minimized_window_state(::sync_pb::WorkspaceDeskSpecifics_WindowState value);
  public:

  // optional .sync_pb.WorkspaceDeskSpecifics.LaunchContainer container = 8;
  bool has_container() const;
  private:
  bool _internal_has_container() const;
  public:
  void clear_container();
  ::sync_pb::WorkspaceDeskSpecifics_LaunchContainer container() const;
  void set_container(::sync_pb::WorkspaceDeskSpecifics_LaunchContainer value);
  private:
  ::sync_pb::WorkspaceDeskSpecifics_LaunchContainer _internal_container() const;
  void _internal_set_container(::sync_pb::WorkspaceDeskSpecifics_LaunchContainer value);
  public:

  // optional .sync_pb.WorkspaceDeskSpecifics.WindowOpenDisposition disposition = 9;
  bool has_disposition() const;
  private:
  bool _internal_has_disposition() const;
  public:
  void clear_disposition();
  ::sync_pb::WorkspaceDeskSpecifics_WindowOpenDisposition disposition() const;
  void set_disposition(::sync_pb::WorkspaceDeskSpecifics_WindowOpenDisposition value);
  private:
  ::sync_pb::WorkspaceDeskSpecifics_WindowOpenDisposition _internal_disposition() const;
  void _internal_set_disposition(::sync_pb::WorkspaceDeskSpecifics_WindowOpenDisposition value);
  public:

  // optional int32 snap_percentage = 12;
  bool has_snap_percentage() const;
  private:
  bool _internal_has_snap_percentage() const;
  public:
  void clear_snap_percentage();
  int32_t snap_percentage() const;
  void set_snap_percentage(int32_t value);
  private:
  int32_t _internal_snap_percentage() const;
  void _internal_set_snap_percentage(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.WorkspaceDeskSpecifics.App)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::sync_pb::WorkspaceDeskSpecifics_WindowBound* window_bound_;
  ::sync_pb::WorkspaceDeskSpecifics_AppOneOf* app_;
  int window_state_;
  int32_t z_index_;
  int64_t display_id_;
  int32_t window_id_;
  int pre_minimized_window_state_;
  int container_;
  int disposition_;
  int32_t snap_percentage_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fworkspace_5fdesk_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WorkspaceDeskSpecifics_AppOneOf final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WorkspaceDeskSpecifics.AppOneOf) */ {
 public:
  inline WorkspaceDeskSpecifics_AppOneOf() : WorkspaceDeskSpecifics_AppOneOf(nullptr) {}
  ~WorkspaceDeskSpecifics_AppOneOf() override;
  explicit PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_AppOneOf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkspaceDeskSpecifics_AppOneOf(const WorkspaceDeskSpecifics_AppOneOf& from);
  WorkspaceDeskSpecifics_AppOneOf(WorkspaceDeskSpecifics_AppOneOf&& from) noexcept
    : WorkspaceDeskSpecifics_AppOneOf() {
    *this = ::std::move(from);
  }

  inline WorkspaceDeskSpecifics_AppOneOf& operator=(const WorkspaceDeskSpecifics_AppOneOf& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkspaceDeskSpecifics_AppOneOf& operator=(WorkspaceDeskSpecifics_AppOneOf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WorkspaceDeskSpecifics_AppOneOf& default_instance() {
    return *internal_default_instance();
  }
  enum AppCase {
    kBrowserAppWindow = 1,
    kChromeApp = 2,
    kProgressWebApp = 3,
    kArcApp = 4,
    APP_NOT_SET = 0,
  };

  static inline const WorkspaceDeskSpecifics_AppOneOf* internal_default_instance() {
    return reinterpret_cast<const WorkspaceDeskSpecifics_AppOneOf*>(
               &_WorkspaceDeskSpecifics_AppOneOf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WorkspaceDeskSpecifics_AppOneOf& a, WorkspaceDeskSpecifics_AppOneOf& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WorkspaceDeskSpecifics_AppOneOf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkspaceDeskSpecifics_AppOneOf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkspaceDeskSpecifics_AppOneOf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkspaceDeskSpecifics_AppOneOf>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WorkspaceDeskSpecifics_AppOneOf& from);
  void MergeFrom(const WorkspaceDeskSpecifics_AppOneOf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WorkspaceDeskSpecifics_AppOneOf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WorkspaceDeskSpecifics.AppOneOf";
  }
  protected:
  explicit WorkspaceDeskSpecifics_AppOneOf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserAppWindowFieldNumber = 1,
    kChromeAppFieldNumber = 2,
    kProgressWebAppFieldNumber = 3,
    kArcAppFieldNumber = 4,
  };
  // .sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow browser_app_window = 1;
  bool has_browser_app_window() const;
  private:
  bool _internal_has_browser_app_window() const;
  public:
  void clear_browser_app_window();
  const ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow& browser_app_window() const;
  PROTOBUF_NODISCARD ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow* release_browser_app_window();
  ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow* mutable_browser_app_window();
  void set_allocated_browser_app_window(::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow* browser_app_window);
  private:
  const ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow& _internal_browser_app_window() const;
  ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow* _internal_mutable_browser_app_window();
  public:
  void unsafe_arena_set_allocated_browser_app_window(
      ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow* browser_app_window);
  ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow* unsafe_arena_release_browser_app_window();

  // .sync_pb.WorkspaceDeskSpecifics.ChromeApp chrome_app = 2;
  bool has_chrome_app() const;
  private:
  bool _internal_has_chrome_app() const;
  public:
  void clear_chrome_app();
  const ::sync_pb::WorkspaceDeskSpecifics_ChromeApp& chrome_app() const;
  PROTOBUF_NODISCARD ::sync_pb::WorkspaceDeskSpecifics_ChromeApp* release_chrome_app();
  ::sync_pb::WorkspaceDeskSpecifics_ChromeApp* mutable_chrome_app();
  void set_allocated_chrome_app(::sync_pb::WorkspaceDeskSpecifics_ChromeApp* chrome_app);
  private:
  const ::sync_pb::WorkspaceDeskSpecifics_ChromeApp& _internal_chrome_app() const;
  ::sync_pb::WorkspaceDeskSpecifics_ChromeApp* _internal_mutable_chrome_app();
  public:
  void unsafe_arena_set_allocated_chrome_app(
      ::sync_pb::WorkspaceDeskSpecifics_ChromeApp* chrome_app);
  ::sync_pb::WorkspaceDeskSpecifics_ChromeApp* unsafe_arena_release_chrome_app();

  // .sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp progress_web_app = 3;
  bool has_progress_web_app() const;
  private:
  bool _internal_has_progress_web_app() const;
  public:
  void clear_progress_web_app();
  const ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp& progress_web_app() const;
  PROTOBUF_NODISCARD ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp* release_progress_web_app();
  ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp* mutable_progress_web_app();
  void set_allocated_progress_web_app(::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp* progress_web_app);
  private:
  const ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp& _internal_progress_web_app() const;
  ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp* _internal_mutable_progress_web_app();
  public:
  void unsafe_arena_set_allocated_progress_web_app(
      ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp* progress_web_app);
  ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp* unsafe_arena_release_progress_web_app();

  // .sync_pb.WorkspaceDeskSpecifics.ArcApp arc_app = 4;
  bool has_arc_app() const;
  private:
  bool _internal_has_arc_app() const;
  public:
  void clear_arc_app();
  const ::sync_pb::WorkspaceDeskSpecifics_ArcApp& arc_app() const;
  PROTOBUF_NODISCARD ::sync_pb::WorkspaceDeskSpecifics_ArcApp* release_arc_app();
  ::sync_pb::WorkspaceDeskSpecifics_ArcApp* mutable_arc_app();
  void set_allocated_arc_app(::sync_pb::WorkspaceDeskSpecifics_ArcApp* arc_app);
  private:
  const ::sync_pb::WorkspaceDeskSpecifics_ArcApp& _internal_arc_app() const;
  ::sync_pb::WorkspaceDeskSpecifics_ArcApp* _internal_mutable_arc_app();
  public:
  void unsafe_arena_set_allocated_arc_app(
      ::sync_pb::WorkspaceDeskSpecifics_ArcApp* arc_app);
  ::sync_pb::WorkspaceDeskSpecifics_ArcApp* unsafe_arena_release_arc_app();

  void clear_app();
  AppCase app_case() const;
  // @@protoc_insertion_point(class_scope:sync_pb.WorkspaceDeskSpecifics.AppOneOf)
 private:
  class _Internal;
  void set_has_browser_app_window();
  void set_has_chrome_app();
  void set_has_progress_web_app();
  void set_has_arc_app();

  inline bool has_app() const;
  inline void clear_has_app();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union AppUnion {
    constexpr AppUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow* browser_app_window_;
    ::sync_pb::WorkspaceDeskSpecifics_ChromeApp* chrome_app_;
    ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp* progress_web_app_;
    ::sync_pb::WorkspaceDeskSpecifics_ArcApp* arc_app_;
  } app_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2fsync_2fprotocol_2fworkspace_5fdesk_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab) */ {
 public:
  inline WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab() : WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab(nullptr) {}
  ~WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab() override;
  explicit PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab(const WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab& from);
  WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab(WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab&& from) noexcept
    : WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab() {
    *this = ::std::move(from);
  }

  inline WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab& operator=(const WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab& operator=(WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab* internal_default_instance() {
    return reinterpret_cast<const WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab*>(
               &_WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab& a, WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab& from);
  void MergeFrom(const WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab";
  }
  protected:
  explicit WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kTitleFieldNumber = 2,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fworkspace_5fdesk_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup) */ {
 public:
  inline WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup() : WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup(nullptr) {}
  ~WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup() override;
  explicit PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup(const WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup& from);
  WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup(WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup&& from) noexcept
    : WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup() {
    *this = ::std::move(from);
  }

  inline WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup& operator=(const WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup& operator=(WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup* internal_default_instance() {
    return reinterpret_cast<const WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup*>(
               &_WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup& a, WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup& from);
  void MergeFrom(const WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup";
  }
  protected:
  explicit WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 3,
    kFirstIndexFieldNumber = 1,
    kLastIndexFieldNumber = 2,
    kColorFieldNumber = 4,
    kIsCollapsedFieldNumber = 5,
  };
  // optional string title = 3;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional int32 first_index = 1;
  bool has_first_index() const;
  private:
  bool _internal_has_first_index() const;
  public:
  void clear_first_index();
  int32_t first_index() const;
  void set_first_index(int32_t value);
  private:
  int32_t _internal_first_index() const;
  void _internal_set_first_index(int32_t value);
  public:

  // optional int32 last_index = 2;
  bool has_last_index() const;
  private:
  bool _internal_has_last_index() const;
  public:
  void clear_last_index();
  int32_t last_index() const;
  void set_last_index(int32_t value);
  private:
  int32_t _internal_last_index() const;
  void _internal_set_last_index(int32_t value);
  public:

  // optional .sync_pb.WorkspaceDeskSpecifics.TabGroupColor color = 4;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::sync_pb::WorkspaceDeskSpecifics_TabGroupColor color() const;
  void set_color(::sync_pb::WorkspaceDeskSpecifics_TabGroupColor value);
  private:
  ::sync_pb::WorkspaceDeskSpecifics_TabGroupColor _internal_color() const;
  void _internal_set_color(::sync_pb::WorkspaceDeskSpecifics_TabGroupColor value);
  public:

  // optional bool is_collapsed = 5;
  bool has_is_collapsed() const;
  private:
  bool _internal_has_is_collapsed() const;
  public:
  void clear_is_collapsed();
  bool is_collapsed() const;
  void set_is_collapsed(bool value);
  private:
  bool _internal_is_collapsed() const;
  void _internal_set_is_collapsed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  int32_t first_index_;
  int32_t last_index_;
  int color_;
  bool is_collapsed_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fworkspace_5fdesk_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WorkspaceDeskSpecifics_BrowserAppWindow final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow) */ {
 public:
  inline WorkspaceDeskSpecifics_BrowserAppWindow() : WorkspaceDeskSpecifics_BrowserAppWindow(nullptr) {}
  ~WorkspaceDeskSpecifics_BrowserAppWindow() override;
  explicit PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_BrowserAppWindow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkspaceDeskSpecifics_BrowserAppWindow(const WorkspaceDeskSpecifics_BrowserAppWindow& from);
  WorkspaceDeskSpecifics_BrowserAppWindow(WorkspaceDeskSpecifics_BrowserAppWindow&& from) noexcept
    : WorkspaceDeskSpecifics_BrowserAppWindow() {
    *this = ::std::move(from);
  }

  inline WorkspaceDeskSpecifics_BrowserAppWindow& operator=(const WorkspaceDeskSpecifics_BrowserAppWindow& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkspaceDeskSpecifics_BrowserAppWindow& operator=(WorkspaceDeskSpecifics_BrowserAppWindow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WorkspaceDeskSpecifics_BrowserAppWindow& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkspaceDeskSpecifics_BrowserAppWindow* internal_default_instance() {
    return reinterpret_cast<const WorkspaceDeskSpecifics_BrowserAppWindow*>(
               &_WorkspaceDeskSpecifics_BrowserAppWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WorkspaceDeskSpecifics_BrowserAppWindow& a, WorkspaceDeskSpecifics_BrowserAppWindow& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WorkspaceDeskSpecifics_BrowserAppWindow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkspaceDeskSpecifics_BrowserAppWindow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkspaceDeskSpecifics_BrowserAppWindow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkspaceDeskSpecifics_BrowserAppWindow>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WorkspaceDeskSpecifics_BrowserAppWindow& from);
  void MergeFrom(const WorkspaceDeskSpecifics_BrowserAppWindow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WorkspaceDeskSpecifics_BrowserAppWindow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow";
  }
  protected:
  explicit WorkspaceDeskSpecifics_BrowserAppWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab BrowserAppTab;
  typedef WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup TabGroup;

  // accessors -------------------------------------------------------

  enum : int {
    kTabsFieldNumber = 1,
    kTabGroupsFieldNumber = 4,
    kActiveTabIndexFieldNumber = 2,
    kShowAsAppFieldNumber = 3,
    kFirstNonPinnedTabIndexFieldNumber = 5,
  };
  // repeated .sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab tabs = 1;
  int tabs_size() const;
  private:
  int _internal_tabs_size() const;
  public:
  void clear_tabs();
  ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab* mutable_tabs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab >*
      mutable_tabs();
  private:
  const ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab& _internal_tabs(int index) const;
  ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab* _internal_add_tabs();
  public:
  const ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab& tabs(int index) const;
  ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab* add_tabs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab >&
      tabs() const;

  // repeated .sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup tab_groups = 4;
  int tab_groups_size() const;
  private:
  int _internal_tab_groups_size() const;
  public:
  void clear_tab_groups();
  ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup* mutable_tab_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup >*
      mutable_tab_groups();
  private:
  const ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup& _internal_tab_groups(int index) const;
  ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup* _internal_add_tab_groups();
  public:
  const ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup& tab_groups(int index) const;
  ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup* add_tab_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup >&
      tab_groups() const;

  // optional int32 active_tab_index = 2;
  bool has_active_tab_index() const;
  private:
  bool _internal_has_active_tab_index() const;
  public:
  void clear_active_tab_index();
  int32_t active_tab_index() const;
  void set_active_tab_index(int32_t value);
  private:
  int32_t _internal_active_tab_index() const;
  void _internal_set_active_tab_index(int32_t value);
  public:

  // optional bool show_as_app = 3;
  bool has_show_as_app() const;
  private:
  bool _internal_has_show_as_app() const;
  public:
  void clear_show_as_app();
  bool show_as_app() const;
  void set_show_as_app(bool value);
  private:
  bool _internal_show_as_app() const;
  void _internal_set_show_as_app(bool value);
  public:

  // optional int32 first_non_pinned_tab_index = 5;
  bool has_first_non_pinned_tab_index() const;
  private:
  bool _internal_has_first_non_pinned_tab_index() const;
  public:
  void clear_first_non_pinned_tab_index();
  int32_t first_non_pinned_tab_index() const;
  void set_first_non_pinned_tab_index(int32_t value);
  private:
  int32_t _internal_first_non_pinned_tab_index() const;
  void _internal_set_first_non_pinned_tab_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab > tabs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup > tab_groups_;
  int32_t active_tab_index_;
  bool show_as_app_;
  int32_t first_non_pinned_tab_index_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fworkspace_5fdesk_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WorkspaceDeskSpecifics_ChromeApp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WorkspaceDeskSpecifics.ChromeApp) */ {
 public:
  inline WorkspaceDeskSpecifics_ChromeApp() : WorkspaceDeskSpecifics_ChromeApp(nullptr) {}
  ~WorkspaceDeskSpecifics_ChromeApp() override;
  explicit PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_ChromeApp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkspaceDeskSpecifics_ChromeApp(const WorkspaceDeskSpecifics_ChromeApp& from);
  WorkspaceDeskSpecifics_ChromeApp(WorkspaceDeskSpecifics_ChromeApp&& from) noexcept
    : WorkspaceDeskSpecifics_ChromeApp() {
    *this = ::std::move(from);
  }

  inline WorkspaceDeskSpecifics_ChromeApp& operator=(const WorkspaceDeskSpecifics_ChromeApp& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkspaceDeskSpecifics_ChromeApp& operator=(WorkspaceDeskSpecifics_ChromeApp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WorkspaceDeskSpecifics_ChromeApp& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkspaceDeskSpecifics_ChromeApp* internal_default_instance() {
    return reinterpret_cast<const WorkspaceDeskSpecifics_ChromeApp*>(
               &_WorkspaceDeskSpecifics_ChromeApp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WorkspaceDeskSpecifics_ChromeApp& a, WorkspaceDeskSpecifics_ChromeApp& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WorkspaceDeskSpecifics_ChromeApp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkspaceDeskSpecifics_ChromeApp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkspaceDeskSpecifics_ChromeApp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkspaceDeskSpecifics_ChromeApp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WorkspaceDeskSpecifics_ChromeApp& from);
  void MergeFrom(const WorkspaceDeskSpecifics_ChromeApp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WorkspaceDeskSpecifics_ChromeApp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WorkspaceDeskSpecifics.ChromeApp";
  }
  protected:
  explicit WorkspaceDeskSpecifics_ChromeApp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
  };
  // optional string app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.WorkspaceDeskSpecifics.ChromeApp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fworkspace_5fdesk_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WorkspaceDeskSpecifics_ProgressiveWebApp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp) */ {
 public:
  inline WorkspaceDeskSpecifics_ProgressiveWebApp() : WorkspaceDeskSpecifics_ProgressiveWebApp(nullptr) {}
  ~WorkspaceDeskSpecifics_ProgressiveWebApp() override;
  explicit PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_ProgressiveWebApp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkspaceDeskSpecifics_ProgressiveWebApp(const WorkspaceDeskSpecifics_ProgressiveWebApp& from);
  WorkspaceDeskSpecifics_ProgressiveWebApp(WorkspaceDeskSpecifics_ProgressiveWebApp&& from) noexcept
    : WorkspaceDeskSpecifics_ProgressiveWebApp() {
    *this = ::std::move(from);
  }

  inline WorkspaceDeskSpecifics_ProgressiveWebApp& operator=(const WorkspaceDeskSpecifics_ProgressiveWebApp& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkspaceDeskSpecifics_ProgressiveWebApp& operator=(WorkspaceDeskSpecifics_ProgressiveWebApp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WorkspaceDeskSpecifics_ProgressiveWebApp& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkspaceDeskSpecifics_ProgressiveWebApp* internal_default_instance() {
    return reinterpret_cast<const WorkspaceDeskSpecifics_ProgressiveWebApp*>(
               &_WorkspaceDeskSpecifics_ProgressiveWebApp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WorkspaceDeskSpecifics_ProgressiveWebApp& a, WorkspaceDeskSpecifics_ProgressiveWebApp& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WorkspaceDeskSpecifics_ProgressiveWebApp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkspaceDeskSpecifics_ProgressiveWebApp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkspaceDeskSpecifics_ProgressiveWebApp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkspaceDeskSpecifics_ProgressiveWebApp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WorkspaceDeskSpecifics_ProgressiveWebApp& from);
  void MergeFrom(const WorkspaceDeskSpecifics_ProgressiveWebApp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WorkspaceDeskSpecifics_ProgressiveWebApp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp";
  }
  protected:
  explicit WorkspaceDeskSpecifics_ProgressiveWebApp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
  };
  // optional string app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fworkspace_5fdesk_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WorkspaceDeskSpecifics_ArcApp_WindowSize final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize) */ {
 public:
  inline WorkspaceDeskSpecifics_ArcApp_WindowSize() : WorkspaceDeskSpecifics_ArcApp_WindowSize(nullptr) {}
  ~WorkspaceDeskSpecifics_ArcApp_WindowSize() override;
  explicit PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_ArcApp_WindowSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkspaceDeskSpecifics_ArcApp_WindowSize(const WorkspaceDeskSpecifics_ArcApp_WindowSize& from);
  WorkspaceDeskSpecifics_ArcApp_WindowSize(WorkspaceDeskSpecifics_ArcApp_WindowSize&& from) noexcept
    : WorkspaceDeskSpecifics_ArcApp_WindowSize() {
    *this = ::std::move(from);
  }

  inline WorkspaceDeskSpecifics_ArcApp_WindowSize& operator=(const WorkspaceDeskSpecifics_ArcApp_WindowSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkspaceDeskSpecifics_ArcApp_WindowSize& operator=(WorkspaceDeskSpecifics_ArcApp_WindowSize&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WorkspaceDeskSpecifics_ArcApp_WindowSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkspaceDeskSpecifics_ArcApp_WindowSize* internal_default_instance() {
    return reinterpret_cast<const WorkspaceDeskSpecifics_ArcApp_WindowSize*>(
               &_WorkspaceDeskSpecifics_ArcApp_WindowSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WorkspaceDeskSpecifics_ArcApp_WindowSize& a, WorkspaceDeskSpecifics_ArcApp_WindowSize& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WorkspaceDeskSpecifics_ArcApp_WindowSize* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkspaceDeskSpecifics_ArcApp_WindowSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkspaceDeskSpecifics_ArcApp_WindowSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkspaceDeskSpecifics_ArcApp_WindowSize>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WorkspaceDeskSpecifics_ArcApp_WindowSize& from);
  void MergeFrom(const WorkspaceDeskSpecifics_ArcApp_WindowSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WorkspaceDeskSpecifics_ArcApp_WindowSize* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize";
  }
  protected:
  explicit WorkspaceDeskSpecifics_ArcApp_WindowSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // optional int32 width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // optional int32 height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t width_;
  int32_t height_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fworkspace_5fdesk_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WorkspaceDeskSpecifics_ArcApp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WorkspaceDeskSpecifics.ArcApp) */ {
 public:
  inline WorkspaceDeskSpecifics_ArcApp() : WorkspaceDeskSpecifics_ArcApp(nullptr) {}
  ~WorkspaceDeskSpecifics_ArcApp() override;
  explicit PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_ArcApp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkspaceDeskSpecifics_ArcApp(const WorkspaceDeskSpecifics_ArcApp& from);
  WorkspaceDeskSpecifics_ArcApp(WorkspaceDeskSpecifics_ArcApp&& from) noexcept
    : WorkspaceDeskSpecifics_ArcApp() {
    *this = ::std::move(from);
  }

  inline WorkspaceDeskSpecifics_ArcApp& operator=(const WorkspaceDeskSpecifics_ArcApp& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkspaceDeskSpecifics_ArcApp& operator=(WorkspaceDeskSpecifics_ArcApp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WorkspaceDeskSpecifics_ArcApp& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkspaceDeskSpecifics_ArcApp* internal_default_instance() {
    return reinterpret_cast<const WorkspaceDeskSpecifics_ArcApp*>(
               &_WorkspaceDeskSpecifics_ArcApp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(WorkspaceDeskSpecifics_ArcApp& a, WorkspaceDeskSpecifics_ArcApp& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WorkspaceDeskSpecifics_ArcApp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkspaceDeskSpecifics_ArcApp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkspaceDeskSpecifics_ArcApp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkspaceDeskSpecifics_ArcApp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WorkspaceDeskSpecifics_ArcApp& from);
  void MergeFrom(const WorkspaceDeskSpecifics_ArcApp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WorkspaceDeskSpecifics_ArcApp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WorkspaceDeskSpecifics.ArcApp";
  }
  protected:
  explicit WorkspaceDeskSpecifics_ArcApp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WorkspaceDeskSpecifics_ArcApp_WindowSize WindowSize;

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kMinimumSizeFieldNumber = 2,
    kMaximumSizeFieldNumber = 3,
    kBoundsInRootFieldNumber = 5,
  };
  // optional string app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // optional .sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize minimum_size = 2;
  bool has_minimum_size() const;
  private:
  bool _internal_has_minimum_size() const;
  public:
  void clear_minimum_size();
  const ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize& minimum_size() const;
  PROTOBUF_NODISCARD ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* release_minimum_size();
  ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* mutable_minimum_size();
  void set_allocated_minimum_size(::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* minimum_size);
  private:
  const ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize& _internal_minimum_size() const;
  ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* _internal_mutable_minimum_size();
  public:
  void unsafe_arena_set_allocated_minimum_size(
      ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* minimum_size);
  ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* unsafe_arena_release_minimum_size();

  // optional .sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize maximum_size = 3;
  bool has_maximum_size() const;
  private:
  bool _internal_has_maximum_size() const;
  public:
  void clear_maximum_size();
  const ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize& maximum_size() const;
  PROTOBUF_NODISCARD ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* release_maximum_size();
  ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* mutable_maximum_size();
  void set_allocated_maximum_size(::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* maximum_size);
  private:
  const ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize& _internal_maximum_size() const;
  ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* _internal_mutable_maximum_size();
  public:
  void unsafe_arena_set_allocated_maximum_size(
      ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* maximum_size);
  ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* unsafe_arena_release_maximum_size();

  // optional .sync_pb.WorkspaceDeskSpecifics.WindowBound bounds_in_root = 5;
  bool has_bounds_in_root() const;
  private:
  bool _internal_has_bounds_in_root() const;
  public:
  void clear_bounds_in_root();
  const ::sync_pb::WorkspaceDeskSpecifics_WindowBound& bounds_in_root() const;
  PROTOBUF_NODISCARD ::sync_pb::WorkspaceDeskSpecifics_WindowBound* release_bounds_in_root();
  ::sync_pb::WorkspaceDeskSpecifics_WindowBound* mutable_bounds_in_root();
  void set_allocated_bounds_in_root(::sync_pb::WorkspaceDeskSpecifics_WindowBound* bounds_in_root);
  private:
  const ::sync_pb::WorkspaceDeskSpecifics_WindowBound& _internal_bounds_in_root() const;
  ::sync_pb::WorkspaceDeskSpecifics_WindowBound* _internal_mutable_bounds_in_root();
  public:
  void unsafe_arena_set_allocated_bounds_in_root(
      ::sync_pb::WorkspaceDeskSpecifics_WindowBound* bounds_in_root);
  ::sync_pb::WorkspaceDeskSpecifics_WindowBound* unsafe_arena_release_bounds_in_root();

  // @@protoc_insertion_point(class_scope:sync_pb.WorkspaceDeskSpecifics.ArcApp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* minimum_size_;
  ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* maximum_size_;
  ::sync_pb::WorkspaceDeskSpecifics_WindowBound* bounds_in_root_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fworkspace_5fdesk_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WorkspaceDeskSpecifics_WindowBound final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WorkspaceDeskSpecifics.WindowBound) */ {
 public:
  inline WorkspaceDeskSpecifics_WindowBound() : WorkspaceDeskSpecifics_WindowBound(nullptr) {}
  ~WorkspaceDeskSpecifics_WindowBound() override;
  explicit PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics_WindowBound(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkspaceDeskSpecifics_WindowBound(const WorkspaceDeskSpecifics_WindowBound& from);
  WorkspaceDeskSpecifics_WindowBound(WorkspaceDeskSpecifics_WindowBound&& from) noexcept
    : WorkspaceDeskSpecifics_WindowBound() {
    *this = ::std::move(from);
  }

  inline WorkspaceDeskSpecifics_WindowBound& operator=(const WorkspaceDeskSpecifics_WindowBound& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkspaceDeskSpecifics_WindowBound& operator=(WorkspaceDeskSpecifics_WindowBound&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WorkspaceDeskSpecifics_WindowBound& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkspaceDeskSpecifics_WindowBound* internal_default_instance() {
    return reinterpret_cast<const WorkspaceDeskSpecifics_WindowBound*>(
               &_WorkspaceDeskSpecifics_WindowBound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(WorkspaceDeskSpecifics_WindowBound& a, WorkspaceDeskSpecifics_WindowBound& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WorkspaceDeskSpecifics_WindowBound* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkspaceDeskSpecifics_WindowBound* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkspaceDeskSpecifics_WindowBound* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkspaceDeskSpecifics_WindowBound>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WorkspaceDeskSpecifics_WindowBound& from);
  void MergeFrom(const WorkspaceDeskSpecifics_WindowBound& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WorkspaceDeskSpecifics_WindowBound* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WorkspaceDeskSpecifics.WindowBound";
  }
  protected:
  explicit WorkspaceDeskSpecifics_WindowBound(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopFieldNumber = 1,
    kLeftFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // optional int32 top = 1;
  bool has_top() const;
  private:
  bool _internal_has_top() const;
  public:
  void clear_top();
  int32_t top() const;
  void set_top(int32_t value);
  private:
  int32_t _internal_top() const;
  void _internal_set_top(int32_t value);
  public:

  // optional int32 left = 2;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  int32_t left() const;
  void set_left(int32_t value);
  private:
  int32_t _internal_left() const;
  void _internal_set_left(int32_t value);
  public:

  // optional int32 width = 3;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // optional int32 height = 4;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.WorkspaceDeskSpecifics.WindowBound)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t top_;
  int32_t left_;
  int32_t width_;
  int32_t height_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fworkspace_5fdesk_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WorkspaceDeskSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WorkspaceDeskSpecifics) */ {
 public:
  inline WorkspaceDeskSpecifics() : WorkspaceDeskSpecifics(nullptr) {}
  ~WorkspaceDeskSpecifics() override;
  explicit PROTOBUF_CONSTEXPR WorkspaceDeskSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkspaceDeskSpecifics(const WorkspaceDeskSpecifics& from);
  WorkspaceDeskSpecifics(WorkspaceDeskSpecifics&& from) noexcept
    : WorkspaceDeskSpecifics() {
    *this = ::std::move(from);
  }

  inline WorkspaceDeskSpecifics& operator=(const WorkspaceDeskSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkspaceDeskSpecifics& operator=(WorkspaceDeskSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WorkspaceDeskSpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkspaceDeskSpecifics* internal_default_instance() {
    return reinterpret_cast<const WorkspaceDeskSpecifics*>(
               &_WorkspaceDeskSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(WorkspaceDeskSpecifics& a, WorkspaceDeskSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WorkspaceDeskSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkspaceDeskSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkspaceDeskSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkspaceDeskSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WorkspaceDeskSpecifics& from);
  void MergeFrom(const WorkspaceDeskSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WorkspaceDeskSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WorkspaceDeskSpecifics";
  }
  protected:
  explicit WorkspaceDeskSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WorkspaceDeskSpecifics_Desk Desk;
  typedef WorkspaceDeskSpecifics_App App;
  typedef WorkspaceDeskSpecifics_AppOneOf AppOneOf;
  typedef WorkspaceDeskSpecifics_BrowserAppWindow BrowserAppWindow;
  typedef WorkspaceDeskSpecifics_ChromeApp ChromeApp;
  typedef WorkspaceDeskSpecifics_ProgressiveWebApp ProgressiveWebApp;
  typedef WorkspaceDeskSpecifics_ArcApp ArcApp;
  typedef WorkspaceDeskSpecifics_WindowBound WindowBound;

  typedef WorkspaceDeskSpecifics_LaunchContainer LaunchContainer;
  static constexpr LaunchContainer LAUNCH_CONTAINER_UNSPECIFIED =
    WorkspaceDeskSpecifics_LaunchContainer_LAUNCH_CONTAINER_UNSPECIFIED;
  static constexpr LaunchContainer LAUNCH_CONTAINER_WINDOW =
    WorkspaceDeskSpecifics_LaunchContainer_LAUNCH_CONTAINER_WINDOW;
  static constexpr LaunchContainer LAUNCH_CONTAINER_PANEL_DEPRECATED =
    WorkspaceDeskSpecifics_LaunchContainer_LAUNCH_CONTAINER_PANEL_DEPRECATED;
  static constexpr LaunchContainer LAUNCH_CONTAINER_TAB =
    WorkspaceDeskSpecifics_LaunchContainer_LAUNCH_CONTAINER_TAB;
  static constexpr LaunchContainer LAUNCH_CONTAINER_NONE =
    WorkspaceDeskSpecifics_LaunchContainer_LAUNCH_CONTAINER_NONE;
  static inline bool LaunchContainer_IsValid(int value) {
    return WorkspaceDeskSpecifics_LaunchContainer_IsValid(value);
  }
  static constexpr LaunchContainer LaunchContainer_MIN =
    WorkspaceDeskSpecifics_LaunchContainer_LaunchContainer_MIN;
  static constexpr LaunchContainer LaunchContainer_MAX =
    WorkspaceDeskSpecifics_LaunchContainer_LaunchContainer_MAX;
  static constexpr int LaunchContainer_ARRAYSIZE =
    WorkspaceDeskSpecifics_LaunchContainer_LaunchContainer_ARRAYSIZE;
  template<typename T>
  static inline const std::string& LaunchContainer_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LaunchContainer>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LaunchContainer_Name.");
    return WorkspaceDeskSpecifics_LaunchContainer_Name(enum_t_value);
  }
  static inline bool LaunchContainer_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LaunchContainer* value) {
    return WorkspaceDeskSpecifics_LaunchContainer_Parse(name, value);
  }

  typedef WorkspaceDeskSpecifics_WindowState WindowState;
  static constexpr WindowState UNKNOWN_WINDOW_STATE =
    WorkspaceDeskSpecifics_WindowState_UNKNOWN_WINDOW_STATE;
  static constexpr WindowState NORMAL =
    WorkspaceDeskSpecifics_WindowState_NORMAL;
  static constexpr WindowState MINIMIZED =
    WorkspaceDeskSpecifics_WindowState_MINIMIZED;
  static constexpr WindowState MAXIMIZED =
    WorkspaceDeskSpecifics_WindowState_MAXIMIZED;
  static constexpr WindowState FULLSCREEN =
    WorkspaceDeskSpecifics_WindowState_FULLSCREEN;
  static constexpr WindowState PRIMARY_SNAPPED =
    WorkspaceDeskSpecifics_WindowState_PRIMARY_SNAPPED;
  static constexpr WindowState SECONDARY_SNAPPED =
    WorkspaceDeskSpecifics_WindowState_SECONDARY_SNAPPED;
  static inline bool WindowState_IsValid(int value) {
    return WorkspaceDeskSpecifics_WindowState_IsValid(value);
  }
  static constexpr WindowState WindowState_MIN =
    WorkspaceDeskSpecifics_WindowState_WindowState_MIN;
  static constexpr WindowState WindowState_MAX =
    WorkspaceDeskSpecifics_WindowState_WindowState_MAX;
  static constexpr int WindowState_ARRAYSIZE =
    WorkspaceDeskSpecifics_WindowState_WindowState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& WindowState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WindowState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WindowState_Name.");
    return WorkspaceDeskSpecifics_WindowState_Name(enum_t_value);
  }
  static inline bool WindowState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WindowState* value) {
    return WorkspaceDeskSpecifics_WindowState_Parse(name, value);
  }

  typedef WorkspaceDeskSpecifics_WindowOpenDisposition WindowOpenDisposition;
  static constexpr WindowOpenDisposition UNKNOWN =
    WorkspaceDeskSpecifics_WindowOpenDisposition_UNKNOWN;
  static constexpr WindowOpenDisposition CURRENT_TAB =
    WorkspaceDeskSpecifics_WindowOpenDisposition_CURRENT_TAB;
  static constexpr WindowOpenDisposition SINGLETON_TAB =
    WorkspaceDeskSpecifics_WindowOpenDisposition_SINGLETON_TAB;
  static constexpr WindowOpenDisposition NEW_FOREGROUND_TAB =
    WorkspaceDeskSpecifics_WindowOpenDisposition_NEW_FOREGROUND_TAB;
  static constexpr WindowOpenDisposition NEW_BACKGROUND_TAB =
    WorkspaceDeskSpecifics_WindowOpenDisposition_NEW_BACKGROUND_TAB;
  static constexpr WindowOpenDisposition NEW_POPUP =
    WorkspaceDeskSpecifics_WindowOpenDisposition_NEW_POPUP;
  static constexpr WindowOpenDisposition NEW_WINDOW =
    WorkspaceDeskSpecifics_WindowOpenDisposition_NEW_WINDOW;
  static constexpr WindowOpenDisposition SAVE_TO_DISK =
    WorkspaceDeskSpecifics_WindowOpenDisposition_SAVE_TO_DISK;
  static constexpr WindowOpenDisposition OFF_THE_RECORD =
    WorkspaceDeskSpecifics_WindowOpenDisposition_OFF_THE_RECORD;
  static constexpr WindowOpenDisposition IGNORE_ACTION =
    WorkspaceDeskSpecifics_WindowOpenDisposition_IGNORE_ACTION;
  static constexpr WindowOpenDisposition SWITCH_TO_TAB =
    WorkspaceDeskSpecifics_WindowOpenDisposition_SWITCH_TO_TAB;
  static constexpr WindowOpenDisposition NEW_PICTURE_IN_PICTURE =
    WorkspaceDeskSpecifics_WindowOpenDisposition_NEW_PICTURE_IN_PICTURE;
  static inline bool WindowOpenDisposition_IsValid(int value) {
    return WorkspaceDeskSpecifics_WindowOpenDisposition_IsValid(value);
  }
  static constexpr WindowOpenDisposition WindowOpenDisposition_MIN =
    WorkspaceDeskSpecifics_WindowOpenDisposition_WindowOpenDisposition_MIN;
  static constexpr WindowOpenDisposition WindowOpenDisposition_MAX =
    WorkspaceDeskSpecifics_WindowOpenDisposition_WindowOpenDisposition_MAX;
  static constexpr int WindowOpenDisposition_ARRAYSIZE =
    WorkspaceDeskSpecifics_WindowOpenDisposition_WindowOpenDisposition_ARRAYSIZE;
  template<typename T>
  static inline const std::string& WindowOpenDisposition_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WindowOpenDisposition>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WindowOpenDisposition_Name.");
    return WorkspaceDeskSpecifics_WindowOpenDisposition_Name(enum_t_value);
  }
  static inline bool WindowOpenDisposition_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WindowOpenDisposition* value) {
    return WorkspaceDeskSpecifics_WindowOpenDisposition_Parse(name, value);
  }

  typedef WorkspaceDeskSpecifics_DeskType DeskType;
  static constexpr DeskType UNKNOWN_TYPE =
    WorkspaceDeskSpecifics_DeskType_UNKNOWN_TYPE;
  static constexpr DeskType TEMPLATE =
    WorkspaceDeskSpecifics_DeskType_TEMPLATE;
  static constexpr DeskType SAVE_AND_RECALL =
    WorkspaceDeskSpecifics_DeskType_SAVE_AND_RECALL;
  static inline bool DeskType_IsValid(int value) {
    return WorkspaceDeskSpecifics_DeskType_IsValid(value);
  }
  static constexpr DeskType DeskType_MIN =
    WorkspaceDeskSpecifics_DeskType_DeskType_MIN;
  static constexpr DeskType DeskType_MAX =
    WorkspaceDeskSpecifics_DeskType_DeskType_MAX;
  static constexpr int DeskType_ARRAYSIZE =
    WorkspaceDeskSpecifics_DeskType_DeskType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DeskType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeskType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeskType_Name.");
    return WorkspaceDeskSpecifics_DeskType_Name(enum_t_value);
  }
  static inline bool DeskType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DeskType* value) {
    return WorkspaceDeskSpecifics_DeskType_Parse(name, value);
  }

  typedef WorkspaceDeskSpecifics_TabGroupColor TabGroupColor;
  static constexpr TabGroupColor UNKNOWN_COLOR =
    WorkspaceDeskSpecifics_TabGroupColor_UNKNOWN_COLOR;
  static constexpr TabGroupColor GREY =
    WorkspaceDeskSpecifics_TabGroupColor_GREY;
  static constexpr TabGroupColor BLUE =
    WorkspaceDeskSpecifics_TabGroupColor_BLUE;
  static constexpr TabGroupColor RED =
    WorkspaceDeskSpecifics_TabGroupColor_RED;
  static constexpr TabGroupColor YELLOW =
    WorkspaceDeskSpecifics_TabGroupColor_YELLOW;
  static constexpr TabGroupColor GREEN =
    WorkspaceDeskSpecifics_TabGroupColor_GREEN;
  static constexpr TabGroupColor PINK =
    WorkspaceDeskSpecifics_TabGroupColor_PINK;
  static constexpr TabGroupColor PURPLE =
    WorkspaceDeskSpecifics_TabGroupColor_PURPLE;
  static constexpr TabGroupColor CYAN =
    WorkspaceDeskSpecifics_TabGroupColor_CYAN;
  static constexpr TabGroupColor ORANGE =
    WorkspaceDeskSpecifics_TabGroupColor_ORANGE;
  static inline bool TabGroupColor_IsValid(int value) {
    return WorkspaceDeskSpecifics_TabGroupColor_IsValid(value);
  }
  static constexpr TabGroupColor TabGroupColor_MIN =
    WorkspaceDeskSpecifics_TabGroupColor_TabGroupColor_MIN;
  static constexpr TabGroupColor TabGroupColor_MAX =
    WorkspaceDeskSpecifics_TabGroupColor_TabGroupColor_MAX;
  static constexpr int TabGroupColor_ARRAYSIZE =
    WorkspaceDeskSpecifics_TabGroupColor_TabGroupColor_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TabGroupColor_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TabGroupColor>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TabGroupColor_Name.");
    return WorkspaceDeskSpecifics_TabGroupColor_Name(enum_t_value);
  }
  static inline bool TabGroupColor_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TabGroupColor* value) {
    return WorkspaceDeskSpecifics_TabGroupColor_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kNameFieldNumber = 2,
    kDeskFieldNumber = 4,
    kCreatedTimeWindowsEpochMicrosFieldNumber = 3,
    kUpdatedTimeWindowsEpochMicrosFieldNumber = 5,
    kDeskTypeFieldNumber = 6,
  };
  // optional string uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .sync_pb.WorkspaceDeskSpecifics.Desk desk = 4;
  bool has_desk() const;
  private:
  bool _internal_has_desk() const;
  public:
  void clear_desk();
  const ::sync_pb::WorkspaceDeskSpecifics_Desk& desk() const;
  PROTOBUF_NODISCARD ::sync_pb::WorkspaceDeskSpecifics_Desk* release_desk();
  ::sync_pb::WorkspaceDeskSpecifics_Desk* mutable_desk();
  void set_allocated_desk(::sync_pb::WorkspaceDeskSpecifics_Desk* desk);
  private:
  const ::sync_pb::WorkspaceDeskSpecifics_Desk& _internal_desk() const;
  ::sync_pb::WorkspaceDeskSpecifics_Desk* _internal_mutable_desk();
  public:
  void unsafe_arena_set_allocated_desk(
      ::sync_pb::WorkspaceDeskSpecifics_Desk* desk);
  ::sync_pb::WorkspaceDeskSpecifics_Desk* unsafe_arena_release_desk();

  // optional int64 created_time_windows_epoch_micros = 3;
  bool has_created_time_windows_epoch_micros() const;
  private:
  bool _internal_has_created_time_windows_epoch_micros() const;
  public:
  void clear_created_time_windows_epoch_micros();
  int64_t created_time_windows_epoch_micros() const;
  void set_created_time_windows_epoch_micros(int64_t value);
  private:
  int64_t _internal_created_time_windows_epoch_micros() const;
  void _internal_set_created_time_windows_epoch_micros(int64_t value);
  public:

  // optional int64 updated_time_windows_epoch_micros = 5;
  bool has_updated_time_windows_epoch_micros() const;
  private:
  bool _internal_has_updated_time_windows_epoch_micros() const;
  public:
  void clear_updated_time_windows_epoch_micros();
  int64_t updated_time_windows_epoch_micros() const;
  void set_updated_time_windows_epoch_micros(int64_t value);
  private:
  int64_t _internal_updated_time_windows_epoch_micros() const;
  void _internal_set_updated_time_windows_epoch_micros(int64_t value);
  public:

  // optional .sync_pb.WorkspaceDeskSpecifics.DeskType desk_type = 6;
  bool has_desk_type() const;
  private:
  bool _internal_has_desk_type() const;
  public:
  void clear_desk_type();
  ::sync_pb::WorkspaceDeskSpecifics_DeskType desk_type() const;
  void set_desk_type(::sync_pb::WorkspaceDeskSpecifics_DeskType value);
  private:
  ::sync_pb::WorkspaceDeskSpecifics_DeskType _internal_desk_type() const;
  void _internal_set_desk_type(::sync_pb::WorkspaceDeskSpecifics_DeskType value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.WorkspaceDeskSpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::sync_pb::WorkspaceDeskSpecifics_Desk* desk_;
  int64_t created_time_windows_epoch_micros_;
  int64_t updated_time_windows_epoch_micros_;
  int desk_type_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fworkspace_5fdesk_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkspaceDeskSpecifics_Desk

// repeated .sync_pb.WorkspaceDeskSpecifics.App apps = 1;
inline int WorkspaceDeskSpecifics_Desk::_internal_apps_size() const {
  return apps_.size();
}
inline int WorkspaceDeskSpecifics_Desk::apps_size() const {
  return _internal_apps_size();
}
inline void WorkspaceDeskSpecifics_Desk::clear_apps() {
  apps_.Clear();
}
inline ::sync_pb::WorkspaceDeskSpecifics_App* WorkspaceDeskSpecifics_Desk::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.Desk.apps)
  return apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WorkspaceDeskSpecifics_App >*
WorkspaceDeskSpecifics_Desk::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.WorkspaceDeskSpecifics.Desk.apps)
  return &apps_;
}
inline const ::sync_pb::WorkspaceDeskSpecifics_App& WorkspaceDeskSpecifics_Desk::_internal_apps(int index) const {
  return apps_.Get(index);
}
inline const ::sync_pb::WorkspaceDeskSpecifics_App& WorkspaceDeskSpecifics_Desk::apps(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.Desk.apps)
  return _internal_apps(index);
}
inline ::sync_pb::WorkspaceDeskSpecifics_App* WorkspaceDeskSpecifics_Desk::_internal_add_apps() {
  return apps_.Add();
}
inline ::sync_pb::WorkspaceDeskSpecifics_App* WorkspaceDeskSpecifics_Desk::add_apps() {
  ::sync_pb::WorkspaceDeskSpecifics_App* _add = _internal_add_apps();
  // @@protoc_insertion_point(field_add:sync_pb.WorkspaceDeskSpecifics.Desk.apps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WorkspaceDeskSpecifics_App >&
WorkspaceDeskSpecifics_Desk::apps() const {
  // @@protoc_insertion_point(field_list:sync_pb.WorkspaceDeskSpecifics.Desk.apps)
  return apps_;
}

// -------------------------------------------------------------------

// WorkspaceDeskSpecifics_App

// optional .sync_pb.WorkspaceDeskSpecifics.WindowBound window_bound = 1;
inline bool WorkspaceDeskSpecifics_App::_internal_has_window_bound() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || window_bound_ != nullptr);
  return value;
}
inline bool WorkspaceDeskSpecifics_App::has_window_bound() const {
  return _internal_has_window_bound();
}
inline void WorkspaceDeskSpecifics_App::clear_window_bound() {
  if (window_bound_ != nullptr) window_bound_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::WorkspaceDeskSpecifics_WindowBound& WorkspaceDeskSpecifics_App::_internal_window_bound() const {
  const ::sync_pb::WorkspaceDeskSpecifics_WindowBound* p = window_bound_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::WorkspaceDeskSpecifics_WindowBound&>(
      ::sync_pb::_WorkspaceDeskSpecifics_WindowBound_default_instance_);
}
inline const ::sync_pb::WorkspaceDeskSpecifics_WindowBound& WorkspaceDeskSpecifics_App::window_bound() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.App.window_bound)
  return _internal_window_bound();
}
inline void WorkspaceDeskSpecifics_App::unsafe_arena_set_allocated_window_bound(
    ::sync_pb::WorkspaceDeskSpecifics_WindowBound* window_bound) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_bound_);
  }
  window_bound_ = window_bound;
  if (window_bound) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.WorkspaceDeskSpecifics.App.window_bound)
}
inline ::sync_pb::WorkspaceDeskSpecifics_WindowBound* WorkspaceDeskSpecifics_App::release_window_bound() {
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::WorkspaceDeskSpecifics_WindowBound* temp = window_bound_;
  window_bound_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::WorkspaceDeskSpecifics_WindowBound* WorkspaceDeskSpecifics_App::unsafe_arena_release_window_bound() {
  // @@protoc_insertion_point(field_release:sync_pb.WorkspaceDeskSpecifics.App.window_bound)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::WorkspaceDeskSpecifics_WindowBound* temp = window_bound_;
  window_bound_ = nullptr;
  return temp;
}
inline ::sync_pb::WorkspaceDeskSpecifics_WindowBound* WorkspaceDeskSpecifics_App::_internal_mutable_window_bound() {
  _has_bits_[0] |= 0x00000004u;
  if (window_bound_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::WorkspaceDeskSpecifics_WindowBound>(GetArenaForAllocation());
    window_bound_ = p;
  }
  return window_bound_;
}
inline ::sync_pb::WorkspaceDeskSpecifics_WindowBound* WorkspaceDeskSpecifics_App::mutable_window_bound() {
  ::sync_pb::WorkspaceDeskSpecifics_WindowBound* _msg = _internal_mutable_window_bound();
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.App.window_bound)
  return _msg;
}
inline void WorkspaceDeskSpecifics_App::set_allocated_window_bound(::sync_pb::WorkspaceDeskSpecifics_WindowBound* window_bound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete window_bound_;
  }
  if (window_bound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(window_bound);
    if (message_arena != submessage_arena) {
      window_bound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_bound, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  window_bound_ = window_bound;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WorkspaceDeskSpecifics.App.window_bound)
}

// optional .sync_pb.WorkspaceDeskSpecifics.WindowState window_state = 2;
inline bool WorkspaceDeskSpecifics_App::_internal_has_window_state() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_App::has_window_state() const {
  return _internal_has_window_state();
}
inline void WorkspaceDeskSpecifics_App::clear_window_state() {
  window_state_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::sync_pb::WorkspaceDeskSpecifics_WindowState WorkspaceDeskSpecifics_App::_internal_window_state() const {
  return static_cast< ::sync_pb::WorkspaceDeskSpecifics_WindowState >(window_state_);
}
inline ::sync_pb::WorkspaceDeskSpecifics_WindowState WorkspaceDeskSpecifics_App::window_state() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.App.window_state)
  return _internal_window_state();
}
inline void WorkspaceDeskSpecifics_App::_internal_set_window_state(::sync_pb::WorkspaceDeskSpecifics_WindowState value) {
  assert(::sync_pb::WorkspaceDeskSpecifics_WindowState_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  window_state_ = value;
}
inline void WorkspaceDeskSpecifics_App::set_window_state(::sync_pb::WorkspaceDeskSpecifics_WindowState value) {
  _internal_set_window_state(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.App.window_state)
}

// optional int32 z_index = 3;
inline bool WorkspaceDeskSpecifics_App::_internal_has_z_index() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_App::has_z_index() const {
  return _internal_has_z_index();
}
inline void WorkspaceDeskSpecifics_App::clear_z_index() {
  z_index_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t WorkspaceDeskSpecifics_App::_internal_z_index() const {
  return z_index_;
}
inline int32_t WorkspaceDeskSpecifics_App::z_index() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.App.z_index)
  return _internal_z_index();
}
inline void WorkspaceDeskSpecifics_App::_internal_set_z_index(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  z_index_ = value;
}
inline void WorkspaceDeskSpecifics_App::set_z_index(int32_t value) {
  _internal_set_z_index(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.App.z_index)
}

// optional .sync_pb.WorkspaceDeskSpecifics.AppOneOf app = 4;
inline bool WorkspaceDeskSpecifics_App::_internal_has_app() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || app_ != nullptr);
  return value;
}
inline bool WorkspaceDeskSpecifics_App::has_app() const {
  return _internal_has_app();
}
inline void WorkspaceDeskSpecifics_App::clear_app() {
  if (app_ != nullptr) app_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::sync_pb::WorkspaceDeskSpecifics_AppOneOf& WorkspaceDeskSpecifics_App::_internal_app() const {
  const ::sync_pb::WorkspaceDeskSpecifics_AppOneOf* p = app_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::WorkspaceDeskSpecifics_AppOneOf&>(
      ::sync_pb::_WorkspaceDeskSpecifics_AppOneOf_default_instance_);
}
inline const ::sync_pb::WorkspaceDeskSpecifics_AppOneOf& WorkspaceDeskSpecifics_App::app() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.App.app)
  return _internal_app();
}
inline void WorkspaceDeskSpecifics_App::unsafe_arena_set_allocated_app(
    ::sync_pb::WorkspaceDeskSpecifics_AppOneOf* app) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_);
  }
  app_ = app;
  if (app) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.WorkspaceDeskSpecifics.App.app)
}
inline ::sync_pb::WorkspaceDeskSpecifics_AppOneOf* WorkspaceDeskSpecifics_App::release_app() {
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::WorkspaceDeskSpecifics_AppOneOf* temp = app_;
  app_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::WorkspaceDeskSpecifics_AppOneOf* WorkspaceDeskSpecifics_App::unsafe_arena_release_app() {
  // @@protoc_insertion_point(field_release:sync_pb.WorkspaceDeskSpecifics.App.app)
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::WorkspaceDeskSpecifics_AppOneOf* temp = app_;
  app_ = nullptr;
  return temp;
}
inline ::sync_pb::WorkspaceDeskSpecifics_AppOneOf* WorkspaceDeskSpecifics_App::_internal_mutable_app() {
  _has_bits_[0] |= 0x00000008u;
  if (app_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::WorkspaceDeskSpecifics_AppOneOf>(GetArenaForAllocation());
    app_ = p;
  }
  return app_;
}
inline ::sync_pb::WorkspaceDeskSpecifics_AppOneOf* WorkspaceDeskSpecifics_App::mutable_app() {
  ::sync_pb::WorkspaceDeskSpecifics_AppOneOf* _msg = _internal_mutable_app();
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.App.app)
  return _msg;
}
inline void WorkspaceDeskSpecifics_App::set_allocated_app(::sync_pb::WorkspaceDeskSpecifics_AppOneOf* app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete app_;
  }
  if (app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(app);
    if (message_arena != submessage_arena) {
      app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  app_ = app;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WorkspaceDeskSpecifics.App.app)
}

// optional int32 window_id = 5;
inline bool WorkspaceDeskSpecifics_App::_internal_has_window_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_App::has_window_id() const {
  return _internal_has_window_id();
}
inline void WorkspaceDeskSpecifics_App::clear_window_id() {
  window_id_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t WorkspaceDeskSpecifics_App::_internal_window_id() const {
  return window_id_;
}
inline int32_t WorkspaceDeskSpecifics_App::window_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.App.window_id)
  return _internal_window_id();
}
inline void WorkspaceDeskSpecifics_App::_internal_set_window_id(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  window_id_ = value;
}
inline void WorkspaceDeskSpecifics_App::set_window_id(int32_t value) {
  _internal_set_window_id(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.App.window_id)
}

// optional int64 display_id = 6;
inline bool WorkspaceDeskSpecifics_App::_internal_has_display_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_App::has_display_id() const {
  return _internal_has_display_id();
}
inline void WorkspaceDeskSpecifics_App::clear_display_id() {
  display_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000040u;
}
inline int64_t WorkspaceDeskSpecifics_App::_internal_display_id() const {
  return display_id_;
}
inline int64_t WorkspaceDeskSpecifics_App::display_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.App.display_id)
  return _internal_display_id();
}
inline void WorkspaceDeskSpecifics_App::_internal_set_display_id(int64_t value) {
  _has_bits_[0] |= 0x00000040u;
  display_id_ = value;
}
inline void WorkspaceDeskSpecifics_App::set_display_id(int64_t value) {
  _internal_set_display_id(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.App.display_id)
}

// optional .sync_pb.WorkspaceDeskSpecifics.WindowState pre_minimized_window_state = 7;
inline bool WorkspaceDeskSpecifics_App::_internal_has_pre_minimized_window_state() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_App::has_pre_minimized_window_state() const {
  return _internal_has_pre_minimized_window_state();
}
inline void WorkspaceDeskSpecifics_App::clear_pre_minimized_window_state() {
  pre_minimized_window_state_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::sync_pb::WorkspaceDeskSpecifics_WindowState WorkspaceDeskSpecifics_App::_internal_pre_minimized_window_state() const {
  return static_cast< ::sync_pb::WorkspaceDeskSpecifics_WindowState >(pre_minimized_window_state_);
}
inline ::sync_pb::WorkspaceDeskSpecifics_WindowState WorkspaceDeskSpecifics_App::pre_minimized_window_state() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.App.pre_minimized_window_state)
  return _internal_pre_minimized_window_state();
}
inline void WorkspaceDeskSpecifics_App::_internal_set_pre_minimized_window_state(::sync_pb::WorkspaceDeskSpecifics_WindowState value) {
  assert(::sync_pb::WorkspaceDeskSpecifics_WindowState_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  pre_minimized_window_state_ = value;
}
inline void WorkspaceDeskSpecifics_App::set_pre_minimized_window_state(::sync_pb::WorkspaceDeskSpecifics_WindowState value) {
  _internal_set_pre_minimized_window_state(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.App.pre_minimized_window_state)
}

// optional .sync_pb.WorkspaceDeskSpecifics.LaunchContainer container = 8;
inline bool WorkspaceDeskSpecifics_App::_internal_has_container() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_App::has_container() const {
  return _internal_has_container();
}
inline void WorkspaceDeskSpecifics_App::clear_container() {
  container_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::sync_pb::WorkspaceDeskSpecifics_LaunchContainer WorkspaceDeskSpecifics_App::_internal_container() const {
  return static_cast< ::sync_pb::WorkspaceDeskSpecifics_LaunchContainer >(container_);
}
inline ::sync_pb::WorkspaceDeskSpecifics_LaunchContainer WorkspaceDeskSpecifics_App::container() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.App.container)
  return _internal_container();
}
inline void WorkspaceDeskSpecifics_App::_internal_set_container(::sync_pb::WorkspaceDeskSpecifics_LaunchContainer value) {
  assert(::sync_pb::WorkspaceDeskSpecifics_LaunchContainer_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  container_ = value;
}
inline void WorkspaceDeskSpecifics_App::set_container(::sync_pb::WorkspaceDeskSpecifics_LaunchContainer value) {
  _internal_set_container(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.App.container)
}

// optional .sync_pb.WorkspaceDeskSpecifics.WindowOpenDisposition disposition = 9;
inline bool WorkspaceDeskSpecifics_App::_internal_has_disposition() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_App::has_disposition() const {
  return _internal_has_disposition();
}
inline void WorkspaceDeskSpecifics_App::clear_disposition() {
  disposition_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::sync_pb::WorkspaceDeskSpecifics_WindowOpenDisposition WorkspaceDeskSpecifics_App::_internal_disposition() const {
  return static_cast< ::sync_pb::WorkspaceDeskSpecifics_WindowOpenDisposition >(disposition_);
}
inline ::sync_pb::WorkspaceDeskSpecifics_WindowOpenDisposition WorkspaceDeskSpecifics_App::disposition() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.App.disposition)
  return _internal_disposition();
}
inline void WorkspaceDeskSpecifics_App::_internal_set_disposition(::sync_pb::WorkspaceDeskSpecifics_WindowOpenDisposition value) {
  assert(::sync_pb::WorkspaceDeskSpecifics_WindowOpenDisposition_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  disposition_ = value;
}
inline void WorkspaceDeskSpecifics_App::set_disposition(::sync_pb::WorkspaceDeskSpecifics_WindowOpenDisposition value) {
  _internal_set_disposition(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.App.disposition)
}

// optional string app_name = 10;
inline bool WorkspaceDeskSpecifics_App::_internal_has_app_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_App::has_app_name() const {
  return _internal_has_app_name();
}
inline void WorkspaceDeskSpecifics_App::clear_app_name() {
  app_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WorkspaceDeskSpecifics_App::app_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.App.app_name)
  return _internal_app_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkspaceDeskSpecifics_App::set_app_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 app_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.App.app_name)
}
inline std::string* WorkspaceDeskSpecifics_App::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.App.app_name)
  return _s;
}
inline const std::string& WorkspaceDeskSpecifics_App::_internal_app_name() const {
  return app_name_.Get();
}
inline void WorkspaceDeskSpecifics_App::_internal_set_app_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  app_name_.Set(value, GetArenaForAllocation());
}
inline std::string* WorkspaceDeskSpecifics_App::_internal_mutable_app_name() {
  _has_bits_[0] |= 0x00000001u;
  return app_name_.Mutable(GetArenaForAllocation());
}
inline std::string* WorkspaceDeskSpecifics_App::release_app_name() {
  // @@protoc_insertion_point(field_release:sync_pb.WorkspaceDeskSpecifics.App.app_name)
  if (!_internal_has_app_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = app_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_name_.IsDefault()) {
    app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WorkspaceDeskSpecifics_App::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_name_.SetAllocated(app_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_name_.IsDefault()) {
    app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WorkspaceDeskSpecifics.App.app_name)
}

// optional string title = 11;
inline bool WorkspaceDeskSpecifics_App::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_App::has_title() const {
  return _internal_has_title();
}
inline void WorkspaceDeskSpecifics_App::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WorkspaceDeskSpecifics_App::title() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.App.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkspaceDeskSpecifics_App::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.App.title)
}
inline std::string* WorkspaceDeskSpecifics_App::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.App.title)
  return _s;
}
inline const std::string& WorkspaceDeskSpecifics_App::_internal_title() const {
  return title_.Get();
}
inline void WorkspaceDeskSpecifics_App::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* WorkspaceDeskSpecifics_App::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* WorkspaceDeskSpecifics_App::release_title() {
  // @@protoc_insertion_point(field_release:sync_pb.WorkspaceDeskSpecifics.App.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WorkspaceDeskSpecifics_App::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WorkspaceDeskSpecifics.App.title)
}

// optional int32 snap_percentage = 12;
inline bool WorkspaceDeskSpecifics_App::_internal_has_snap_percentage() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_App::has_snap_percentage() const {
  return _internal_has_snap_percentage();
}
inline void WorkspaceDeskSpecifics_App::clear_snap_percentage() {
  snap_percentage_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline int32_t WorkspaceDeskSpecifics_App::_internal_snap_percentage() const {
  return snap_percentage_;
}
inline int32_t WorkspaceDeskSpecifics_App::snap_percentage() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.App.snap_percentage)
  return _internal_snap_percentage();
}
inline void WorkspaceDeskSpecifics_App::_internal_set_snap_percentage(int32_t value) {
  _has_bits_[0] |= 0x00000800u;
  snap_percentage_ = value;
}
inline void WorkspaceDeskSpecifics_App::set_snap_percentage(int32_t value) {
  _internal_set_snap_percentage(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.App.snap_percentage)
}

// -------------------------------------------------------------------

// WorkspaceDeskSpecifics_AppOneOf

// .sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow browser_app_window = 1;
inline bool WorkspaceDeskSpecifics_AppOneOf::_internal_has_browser_app_window() const {
  return app_case() == kBrowserAppWindow;
}
inline bool WorkspaceDeskSpecifics_AppOneOf::has_browser_app_window() const {
  return _internal_has_browser_app_window();
}
inline void WorkspaceDeskSpecifics_AppOneOf::set_has_browser_app_window() {
  _oneof_case_[0] = kBrowserAppWindow;
}
inline void WorkspaceDeskSpecifics_AppOneOf::clear_browser_app_window() {
  if (_internal_has_browser_app_window()) {
    if (GetArenaForAllocation() == nullptr) {
      delete app_.browser_app_window_;
    }
    clear_has_app();
  }
}
inline ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow* WorkspaceDeskSpecifics_AppOneOf::release_browser_app_window() {
  // @@protoc_insertion_point(field_release:sync_pb.WorkspaceDeskSpecifics.AppOneOf.browser_app_window)
  if (_internal_has_browser_app_window()) {
    clear_has_app();
    ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow* temp = app_.browser_app_window_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    app_.browser_app_window_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow& WorkspaceDeskSpecifics_AppOneOf::_internal_browser_app_window() const {
  return _internal_has_browser_app_window()
      ? *app_.browser_app_window_
      : reinterpret_cast< ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow&>(::sync_pb::_WorkspaceDeskSpecifics_BrowserAppWindow_default_instance_);
}
inline const ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow& WorkspaceDeskSpecifics_AppOneOf::browser_app_window() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.AppOneOf.browser_app_window)
  return _internal_browser_app_window();
}
inline ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow* WorkspaceDeskSpecifics_AppOneOf::unsafe_arena_release_browser_app_window() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.WorkspaceDeskSpecifics.AppOneOf.browser_app_window)
  if (_internal_has_browser_app_window()) {
    clear_has_app();
    ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow* temp = app_.browser_app_window_;
    app_.browser_app_window_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WorkspaceDeskSpecifics_AppOneOf::unsafe_arena_set_allocated_browser_app_window(::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow* browser_app_window) {
  clear_app();
  if (browser_app_window) {
    set_has_browser_app_window();
    app_.browser_app_window_ = browser_app_window;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.WorkspaceDeskSpecifics.AppOneOf.browser_app_window)
}
inline ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow* WorkspaceDeskSpecifics_AppOneOf::_internal_mutable_browser_app_window() {
  if (!_internal_has_browser_app_window()) {
    clear_app();
    set_has_browser_app_window();
    app_.browser_app_window_ = CreateMaybeMessage< ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow >(GetArenaForAllocation());
  }
  return app_.browser_app_window_;
}
inline ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow* WorkspaceDeskSpecifics_AppOneOf::mutable_browser_app_window() {
  ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow* _msg = _internal_mutable_browser_app_window();
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.AppOneOf.browser_app_window)
  return _msg;
}

// .sync_pb.WorkspaceDeskSpecifics.ChromeApp chrome_app = 2;
inline bool WorkspaceDeskSpecifics_AppOneOf::_internal_has_chrome_app() const {
  return app_case() == kChromeApp;
}
inline bool WorkspaceDeskSpecifics_AppOneOf::has_chrome_app() const {
  return _internal_has_chrome_app();
}
inline void WorkspaceDeskSpecifics_AppOneOf::set_has_chrome_app() {
  _oneof_case_[0] = kChromeApp;
}
inline void WorkspaceDeskSpecifics_AppOneOf::clear_chrome_app() {
  if (_internal_has_chrome_app()) {
    if (GetArenaForAllocation() == nullptr) {
      delete app_.chrome_app_;
    }
    clear_has_app();
  }
}
inline ::sync_pb::WorkspaceDeskSpecifics_ChromeApp* WorkspaceDeskSpecifics_AppOneOf::release_chrome_app() {
  // @@protoc_insertion_point(field_release:sync_pb.WorkspaceDeskSpecifics.AppOneOf.chrome_app)
  if (_internal_has_chrome_app()) {
    clear_has_app();
    ::sync_pb::WorkspaceDeskSpecifics_ChromeApp* temp = app_.chrome_app_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    app_.chrome_app_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::WorkspaceDeskSpecifics_ChromeApp& WorkspaceDeskSpecifics_AppOneOf::_internal_chrome_app() const {
  return _internal_has_chrome_app()
      ? *app_.chrome_app_
      : reinterpret_cast< ::sync_pb::WorkspaceDeskSpecifics_ChromeApp&>(::sync_pb::_WorkspaceDeskSpecifics_ChromeApp_default_instance_);
}
inline const ::sync_pb::WorkspaceDeskSpecifics_ChromeApp& WorkspaceDeskSpecifics_AppOneOf::chrome_app() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.AppOneOf.chrome_app)
  return _internal_chrome_app();
}
inline ::sync_pb::WorkspaceDeskSpecifics_ChromeApp* WorkspaceDeskSpecifics_AppOneOf::unsafe_arena_release_chrome_app() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.WorkspaceDeskSpecifics.AppOneOf.chrome_app)
  if (_internal_has_chrome_app()) {
    clear_has_app();
    ::sync_pb::WorkspaceDeskSpecifics_ChromeApp* temp = app_.chrome_app_;
    app_.chrome_app_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WorkspaceDeskSpecifics_AppOneOf::unsafe_arena_set_allocated_chrome_app(::sync_pb::WorkspaceDeskSpecifics_ChromeApp* chrome_app) {
  clear_app();
  if (chrome_app) {
    set_has_chrome_app();
    app_.chrome_app_ = chrome_app;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.WorkspaceDeskSpecifics.AppOneOf.chrome_app)
}
inline ::sync_pb::WorkspaceDeskSpecifics_ChromeApp* WorkspaceDeskSpecifics_AppOneOf::_internal_mutable_chrome_app() {
  if (!_internal_has_chrome_app()) {
    clear_app();
    set_has_chrome_app();
    app_.chrome_app_ = CreateMaybeMessage< ::sync_pb::WorkspaceDeskSpecifics_ChromeApp >(GetArenaForAllocation());
  }
  return app_.chrome_app_;
}
inline ::sync_pb::WorkspaceDeskSpecifics_ChromeApp* WorkspaceDeskSpecifics_AppOneOf::mutable_chrome_app() {
  ::sync_pb::WorkspaceDeskSpecifics_ChromeApp* _msg = _internal_mutable_chrome_app();
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.AppOneOf.chrome_app)
  return _msg;
}

// .sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp progress_web_app = 3;
inline bool WorkspaceDeskSpecifics_AppOneOf::_internal_has_progress_web_app() const {
  return app_case() == kProgressWebApp;
}
inline bool WorkspaceDeskSpecifics_AppOneOf::has_progress_web_app() const {
  return _internal_has_progress_web_app();
}
inline void WorkspaceDeskSpecifics_AppOneOf::set_has_progress_web_app() {
  _oneof_case_[0] = kProgressWebApp;
}
inline void WorkspaceDeskSpecifics_AppOneOf::clear_progress_web_app() {
  if (_internal_has_progress_web_app()) {
    if (GetArenaForAllocation() == nullptr) {
      delete app_.progress_web_app_;
    }
    clear_has_app();
  }
}
inline ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp* WorkspaceDeskSpecifics_AppOneOf::release_progress_web_app() {
  // @@protoc_insertion_point(field_release:sync_pb.WorkspaceDeskSpecifics.AppOneOf.progress_web_app)
  if (_internal_has_progress_web_app()) {
    clear_has_app();
    ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp* temp = app_.progress_web_app_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    app_.progress_web_app_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp& WorkspaceDeskSpecifics_AppOneOf::_internal_progress_web_app() const {
  return _internal_has_progress_web_app()
      ? *app_.progress_web_app_
      : reinterpret_cast< ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp&>(::sync_pb::_WorkspaceDeskSpecifics_ProgressiveWebApp_default_instance_);
}
inline const ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp& WorkspaceDeskSpecifics_AppOneOf::progress_web_app() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.AppOneOf.progress_web_app)
  return _internal_progress_web_app();
}
inline ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp* WorkspaceDeskSpecifics_AppOneOf::unsafe_arena_release_progress_web_app() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.WorkspaceDeskSpecifics.AppOneOf.progress_web_app)
  if (_internal_has_progress_web_app()) {
    clear_has_app();
    ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp* temp = app_.progress_web_app_;
    app_.progress_web_app_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WorkspaceDeskSpecifics_AppOneOf::unsafe_arena_set_allocated_progress_web_app(::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp* progress_web_app) {
  clear_app();
  if (progress_web_app) {
    set_has_progress_web_app();
    app_.progress_web_app_ = progress_web_app;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.WorkspaceDeskSpecifics.AppOneOf.progress_web_app)
}
inline ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp* WorkspaceDeskSpecifics_AppOneOf::_internal_mutable_progress_web_app() {
  if (!_internal_has_progress_web_app()) {
    clear_app();
    set_has_progress_web_app();
    app_.progress_web_app_ = CreateMaybeMessage< ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp >(GetArenaForAllocation());
  }
  return app_.progress_web_app_;
}
inline ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp* WorkspaceDeskSpecifics_AppOneOf::mutable_progress_web_app() {
  ::sync_pb::WorkspaceDeskSpecifics_ProgressiveWebApp* _msg = _internal_mutable_progress_web_app();
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.AppOneOf.progress_web_app)
  return _msg;
}

// .sync_pb.WorkspaceDeskSpecifics.ArcApp arc_app = 4;
inline bool WorkspaceDeskSpecifics_AppOneOf::_internal_has_arc_app() const {
  return app_case() == kArcApp;
}
inline bool WorkspaceDeskSpecifics_AppOneOf::has_arc_app() const {
  return _internal_has_arc_app();
}
inline void WorkspaceDeskSpecifics_AppOneOf::set_has_arc_app() {
  _oneof_case_[0] = kArcApp;
}
inline void WorkspaceDeskSpecifics_AppOneOf::clear_arc_app() {
  if (_internal_has_arc_app()) {
    if (GetArenaForAllocation() == nullptr) {
      delete app_.arc_app_;
    }
    clear_has_app();
  }
}
inline ::sync_pb::WorkspaceDeskSpecifics_ArcApp* WorkspaceDeskSpecifics_AppOneOf::release_arc_app() {
  // @@protoc_insertion_point(field_release:sync_pb.WorkspaceDeskSpecifics.AppOneOf.arc_app)
  if (_internal_has_arc_app()) {
    clear_has_app();
    ::sync_pb::WorkspaceDeskSpecifics_ArcApp* temp = app_.arc_app_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    app_.arc_app_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::WorkspaceDeskSpecifics_ArcApp& WorkspaceDeskSpecifics_AppOneOf::_internal_arc_app() const {
  return _internal_has_arc_app()
      ? *app_.arc_app_
      : reinterpret_cast< ::sync_pb::WorkspaceDeskSpecifics_ArcApp&>(::sync_pb::_WorkspaceDeskSpecifics_ArcApp_default_instance_);
}
inline const ::sync_pb::WorkspaceDeskSpecifics_ArcApp& WorkspaceDeskSpecifics_AppOneOf::arc_app() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.AppOneOf.arc_app)
  return _internal_arc_app();
}
inline ::sync_pb::WorkspaceDeskSpecifics_ArcApp* WorkspaceDeskSpecifics_AppOneOf::unsafe_arena_release_arc_app() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.WorkspaceDeskSpecifics.AppOneOf.arc_app)
  if (_internal_has_arc_app()) {
    clear_has_app();
    ::sync_pb::WorkspaceDeskSpecifics_ArcApp* temp = app_.arc_app_;
    app_.arc_app_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WorkspaceDeskSpecifics_AppOneOf::unsafe_arena_set_allocated_arc_app(::sync_pb::WorkspaceDeskSpecifics_ArcApp* arc_app) {
  clear_app();
  if (arc_app) {
    set_has_arc_app();
    app_.arc_app_ = arc_app;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.WorkspaceDeskSpecifics.AppOneOf.arc_app)
}
inline ::sync_pb::WorkspaceDeskSpecifics_ArcApp* WorkspaceDeskSpecifics_AppOneOf::_internal_mutable_arc_app() {
  if (!_internal_has_arc_app()) {
    clear_app();
    set_has_arc_app();
    app_.arc_app_ = CreateMaybeMessage< ::sync_pb::WorkspaceDeskSpecifics_ArcApp >(GetArenaForAllocation());
  }
  return app_.arc_app_;
}
inline ::sync_pb::WorkspaceDeskSpecifics_ArcApp* WorkspaceDeskSpecifics_AppOneOf::mutable_arc_app() {
  ::sync_pb::WorkspaceDeskSpecifics_ArcApp* _msg = _internal_mutable_arc_app();
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.AppOneOf.arc_app)
  return _msg;
}

inline bool WorkspaceDeskSpecifics_AppOneOf::has_app() const {
  return app_case() != APP_NOT_SET;
}
inline void WorkspaceDeskSpecifics_AppOneOf::clear_has_app() {
  _oneof_case_[0] = APP_NOT_SET;
}
inline WorkspaceDeskSpecifics_AppOneOf::AppCase WorkspaceDeskSpecifics_AppOneOf::app_case() const {
  return WorkspaceDeskSpecifics_AppOneOf::AppCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab

// optional string url = 1;
inline bool WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::has_url() const {
  return _internal_has_url();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab.url)
}
inline std::string* WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab.url)
  return _s;
}
inline const std::string& WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::_internal_url() const {
  return url_.Get();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab.url)
}

// optional string title = 2;
inline bool WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::has_title() const {
  return _internal_has_title();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::title() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab.title)
}
inline std::string* WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab.title)
  return _s;
}
inline const std::string& WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::_internal_title() const {
  return title_.Get();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::release_title() {
  // @@protoc_insertion_point(field_release:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab.title)
}

// -------------------------------------------------------------------

// WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup

// optional int32 first_index = 1;
inline bool WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::_internal_has_first_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::has_first_index() const {
  return _internal_has_first_index();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::clear_first_index() {
  first_index_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::_internal_first_index() const {
  return first_index_;
}
inline int32_t WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::first_index() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup.first_index)
  return _internal_first_index();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::_internal_set_first_index(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  first_index_ = value;
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::set_first_index(int32_t value) {
  _internal_set_first_index(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup.first_index)
}

// optional int32 last_index = 2;
inline bool WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::_internal_has_last_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::has_last_index() const {
  return _internal_has_last_index();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::clear_last_index() {
  last_index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::_internal_last_index() const {
  return last_index_;
}
inline int32_t WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::last_index() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup.last_index)
  return _internal_last_index();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::_internal_set_last_index(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  last_index_ = value;
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::set_last_index(int32_t value) {
  _internal_set_last_index(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup.last_index)
}

// optional string title = 3;
inline bool WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::has_title() const {
  return _internal_has_title();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::title() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup.title)
}
inline std::string* WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup.title)
  return _s;
}
inline const std::string& WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::_internal_title() const {
  return title_.Get();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::release_title() {
  // @@protoc_insertion_point(field_release:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup.title)
}

// optional .sync_pb.WorkspaceDeskSpecifics.TabGroupColor color = 4;
inline bool WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::has_color() const {
  return _internal_has_color();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::clear_color() {
  color_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::sync_pb::WorkspaceDeskSpecifics_TabGroupColor WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::_internal_color() const {
  return static_cast< ::sync_pb::WorkspaceDeskSpecifics_TabGroupColor >(color_);
}
inline ::sync_pb::WorkspaceDeskSpecifics_TabGroupColor WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::color() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup.color)
  return _internal_color();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::_internal_set_color(::sync_pb::WorkspaceDeskSpecifics_TabGroupColor value) {
  assert(::sync_pb::WorkspaceDeskSpecifics_TabGroupColor_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  color_ = value;
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::set_color(::sync_pb::WorkspaceDeskSpecifics_TabGroupColor value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup.color)
}

// optional bool is_collapsed = 5;
inline bool WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::_internal_has_is_collapsed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::has_is_collapsed() const {
  return _internal_has_is_collapsed();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::clear_is_collapsed() {
  is_collapsed_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::_internal_is_collapsed() const {
  return is_collapsed_;
}
inline bool WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::is_collapsed() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup.is_collapsed)
  return _internal_is_collapsed();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::_internal_set_is_collapsed(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_collapsed_ = value;
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup::set_is_collapsed(bool value) {
  _internal_set_is_collapsed(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup.is_collapsed)
}

// -------------------------------------------------------------------

// WorkspaceDeskSpecifics_BrowserAppWindow

// repeated .sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.BrowserAppTab tabs = 1;
inline int WorkspaceDeskSpecifics_BrowserAppWindow::_internal_tabs_size() const {
  return tabs_.size();
}
inline int WorkspaceDeskSpecifics_BrowserAppWindow::tabs_size() const {
  return _internal_tabs_size();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow::clear_tabs() {
  tabs_.Clear();
}
inline ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab* WorkspaceDeskSpecifics_BrowserAppWindow::mutable_tabs(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.tabs)
  return tabs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab >*
WorkspaceDeskSpecifics_BrowserAppWindow::mutable_tabs() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.tabs)
  return &tabs_;
}
inline const ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab& WorkspaceDeskSpecifics_BrowserAppWindow::_internal_tabs(int index) const {
  return tabs_.Get(index);
}
inline const ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab& WorkspaceDeskSpecifics_BrowserAppWindow::tabs(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.tabs)
  return _internal_tabs(index);
}
inline ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab* WorkspaceDeskSpecifics_BrowserAppWindow::_internal_add_tabs() {
  return tabs_.Add();
}
inline ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab* WorkspaceDeskSpecifics_BrowserAppWindow::add_tabs() {
  ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab* _add = _internal_add_tabs();
  // @@protoc_insertion_point(field_add:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.tabs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_BrowserAppTab >&
WorkspaceDeskSpecifics_BrowserAppWindow::tabs() const {
  // @@protoc_insertion_point(field_list:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.tabs)
  return tabs_;
}

// optional int32 active_tab_index = 2;
inline bool WorkspaceDeskSpecifics_BrowserAppWindow::_internal_has_active_tab_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_BrowserAppWindow::has_active_tab_index() const {
  return _internal_has_active_tab_index();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow::clear_active_tab_index() {
  active_tab_index_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t WorkspaceDeskSpecifics_BrowserAppWindow::_internal_active_tab_index() const {
  return active_tab_index_;
}
inline int32_t WorkspaceDeskSpecifics_BrowserAppWindow::active_tab_index() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.active_tab_index)
  return _internal_active_tab_index();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow::_internal_set_active_tab_index(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  active_tab_index_ = value;
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow::set_active_tab_index(int32_t value) {
  _internal_set_active_tab_index(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.active_tab_index)
}

// optional bool show_as_app = 3;
inline bool WorkspaceDeskSpecifics_BrowserAppWindow::_internal_has_show_as_app() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_BrowserAppWindow::has_show_as_app() const {
  return _internal_has_show_as_app();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow::clear_show_as_app() {
  show_as_app_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool WorkspaceDeskSpecifics_BrowserAppWindow::_internal_show_as_app() const {
  return show_as_app_;
}
inline bool WorkspaceDeskSpecifics_BrowserAppWindow::show_as_app() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.show_as_app)
  return _internal_show_as_app();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow::_internal_set_show_as_app(bool value) {
  _has_bits_[0] |= 0x00000002u;
  show_as_app_ = value;
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow::set_show_as_app(bool value) {
  _internal_set_show_as_app(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.show_as_app)
}

// repeated .sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.TabGroup tab_groups = 4;
inline int WorkspaceDeskSpecifics_BrowserAppWindow::_internal_tab_groups_size() const {
  return tab_groups_.size();
}
inline int WorkspaceDeskSpecifics_BrowserAppWindow::tab_groups_size() const {
  return _internal_tab_groups_size();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow::clear_tab_groups() {
  tab_groups_.Clear();
}
inline ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup* WorkspaceDeskSpecifics_BrowserAppWindow::mutable_tab_groups(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.tab_groups)
  return tab_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup >*
WorkspaceDeskSpecifics_BrowserAppWindow::mutable_tab_groups() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.tab_groups)
  return &tab_groups_;
}
inline const ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup& WorkspaceDeskSpecifics_BrowserAppWindow::_internal_tab_groups(int index) const {
  return tab_groups_.Get(index);
}
inline const ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup& WorkspaceDeskSpecifics_BrowserAppWindow::tab_groups(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.tab_groups)
  return _internal_tab_groups(index);
}
inline ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup* WorkspaceDeskSpecifics_BrowserAppWindow::_internal_add_tab_groups() {
  return tab_groups_.Add();
}
inline ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup* WorkspaceDeskSpecifics_BrowserAppWindow::add_tab_groups() {
  ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup* _add = _internal_add_tab_groups();
  // @@protoc_insertion_point(field_add:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.tab_groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WorkspaceDeskSpecifics_BrowserAppWindow_TabGroup >&
WorkspaceDeskSpecifics_BrowserAppWindow::tab_groups() const {
  // @@protoc_insertion_point(field_list:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.tab_groups)
  return tab_groups_;
}

// optional int32 first_non_pinned_tab_index = 5;
inline bool WorkspaceDeskSpecifics_BrowserAppWindow::_internal_has_first_non_pinned_tab_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_BrowserAppWindow::has_first_non_pinned_tab_index() const {
  return _internal_has_first_non_pinned_tab_index();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow::clear_first_non_pinned_tab_index() {
  first_non_pinned_tab_index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t WorkspaceDeskSpecifics_BrowserAppWindow::_internal_first_non_pinned_tab_index() const {
  return first_non_pinned_tab_index_;
}
inline int32_t WorkspaceDeskSpecifics_BrowserAppWindow::first_non_pinned_tab_index() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.first_non_pinned_tab_index)
  return _internal_first_non_pinned_tab_index();
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow::_internal_set_first_non_pinned_tab_index(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  first_non_pinned_tab_index_ = value;
}
inline void WorkspaceDeskSpecifics_BrowserAppWindow::set_first_non_pinned_tab_index(int32_t value) {
  _internal_set_first_non_pinned_tab_index(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.BrowserAppWindow.first_non_pinned_tab_index)
}

// -------------------------------------------------------------------

// WorkspaceDeskSpecifics_ChromeApp

// optional string app_id = 1;
inline bool WorkspaceDeskSpecifics_ChromeApp::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_ChromeApp::has_app_id() const {
  return _internal_has_app_id();
}
inline void WorkspaceDeskSpecifics_ChromeApp::clear_app_id() {
  app_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WorkspaceDeskSpecifics_ChromeApp::app_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.ChromeApp.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkspaceDeskSpecifics_ChromeApp::set_app_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 app_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.ChromeApp.app_id)
}
inline std::string* WorkspaceDeskSpecifics_ChromeApp::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.ChromeApp.app_id)
  return _s;
}
inline const std::string& WorkspaceDeskSpecifics_ChromeApp::_internal_app_id() const {
  return app_id_.Get();
}
inline void WorkspaceDeskSpecifics_ChromeApp::_internal_set_app_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WorkspaceDeskSpecifics_ChromeApp::_internal_mutable_app_id() {
  _has_bits_[0] |= 0x00000001u;
  return app_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WorkspaceDeskSpecifics_ChromeApp::release_app_id() {
  // @@protoc_insertion_point(field_release:sync_pb.WorkspaceDeskSpecifics.ChromeApp.app_id)
  if (!_internal_has_app_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = app_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_id_.IsDefault()) {
    app_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WorkspaceDeskSpecifics_ChromeApp::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_id_.SetAllocated(app_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_id_.IsDefault()) {
    app_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WorkspaceDeskSpecifics.ChromeApp.app_id)
}

// -------------------------------------------------------------------

// WorkspaceDeskSpecifics_ProgressiveWebApp

// optional string app_id = 1;
inline bool WorkspaceDeskSpecifics_ProgressiveWebApp::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_ProgressiveWebApp::has_app_id() const {
  return _internal_has_app_id();
}
inline void WorkspaceDeskSpecifics_ProgressiveWebApp::clear_app_id() {
  app_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WorkspaceDeskSpecifics_ProgressiveWebApp::app_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkspaceDeskSpecifics_ProgressiveWebApp::set_app_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 app_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp.app_id)
}
inline std::string* WorkspaceDeskSpecifics_ProgressiveWebApp::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp.app_id)
  return _s;
}
inline const std::string& WorkspaceDeskSpecifics_ProgressiveWebApp::_internal_app_id() const {
  return app_id_.Get();
}
inline void WorkspaceDeskSpecifics_ProgressiveWebApp::_internal_set_app_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WorkspaceDeskSpecifics_ProgressiveWebApp::_internal_mutable_app_id() {
  _has_bits_[0] |= 0x00000001u;
  return app_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WorkspaceDeskSpecifics_ProgressiveWebApp::release_app_id() {
  // @@protoc_insertion_point(field_release:sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp.app_id)
  if (!_internal_has_app_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = app_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_id_.IsDefault()) {
    app_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WorkspaceDeskSpecifics_ProgressiveWebApp::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_id_.SetAllocated(app_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_id_.IsDefault()) {
    app_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WorkspaceDeskSpecifics.ProgressiveWebApp.app_id)
}

// -------------------------------------------------------------------

// WorkspaceDeskSpecifics_ArcApp_WindowSize

// optional int32 width = 1;
inline bool WorkspaceDeskSpecifics_ArcApp_WindowSize::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_ArcApp_WindowSize::has_width() const {
  return _internal_has_width();
}
inline void WorkspaceDeskSpecifics_ArcApp_WindowSize::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t WorkspaceDeskSpecifics_ArcApp_WindowSize::_internal_width() const {
  return width_;
}
inline int32_t WorkspaceDeskSpecifics_ArcApp_WindowSize::width() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize.width)
  return _internal_width();
}
inline void WorkspaceDeskSpecifics_ArcApp_WindowSize::_internal_set_width(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
}
inline void WorkspaceDeskSpecifics_ArcApp_WindowSize::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize.width)
}

// optional int32 height = 2;
inline bool WorkspaceDeskSpecifics_ArcApp_WindowSize::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_ArcApp_WindowSize::has_height() const {
  return _internal_has_height();
}
inline void WorkspaceDeskSpecifics_ArcApp_WindowSize::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t WorkspaceDeskSpecifics_ArcApp_WindowSize::_internal_height() const {
  return height_;
}
inline int32_t WorkspaceDeskSpecifics_ArcApp_WindowSize::height() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize.height)
  return _internal_height();
}
inline void WorkspaceDeskSpecifics_ArcApp_WindowSize::_internal_set_height(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void WorkspaceDeskSpecifics_ArcApp_WindowSize::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize.height)
}

// -------------------------------------------------------------------

// WorkspaceDeskSpecifics_ArcApp

// optional string app_id = 1;
inline bool WorkspaceDeskSpecifics_ArcApp::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_ArcApp::has_app_id() const {
  return _internal_has_app_id();
}
inline void WorkspaceDeskSpecifics_ArcApp::clear_app_id() {
  app_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WorkspaceDeskSpecifics_ArcApp::app_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.ArcApp.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkspaceDeskSpecifics_ArcApp::set_app_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 app_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.ArcApp.app_id)
}
inline std::string* WorkspaceDeskSpecifics_ArcApp::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.ArcApp.app_id)
  return _s;
}
inline const std::string& WorkspaceDeskSpecifics_ArcApp::_internal_app_id() const {
  return app_id_.Get();
}
inline void WorkspaceDeskSpecifics_ArcApp::_internal_set_app_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WorkspaceDeskSpecifics_ArcApp::_internal_mutable_app_id() {
  _has_bits_[0] |= 0x00000001u;
  return app_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WorkspaceDeskSpecifics_ArcApp::release_app_id() {
  // @@protoc_insertion_point(field_release:sync_pb.WorkspaceDeskSpecifics.ArcApp.app_id)
  if (!_internal_has_app_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = app_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_id_.IsDefault()) {
    app_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WorkspaceDeskSpecifics_ArcApp::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_id_.SetAllocated(app_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_id_.IsDefault()) {
    app_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WorkspaceDeskSpecifics.ArcApp.app_id)
}

// optional .sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize minimum_size = 2;
inline bool WorkspaceDeskSpecifics_ArcApp::_internal_has_minimum_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || minimum_size_ != nullptr);
  return value;
}
inline bool WorkspaceDeskSpecifics_ArcApp::has_minimum_size() const {
  return _internal_has_minimum_size();
}
inline void WorkspaceDeskSpecifics_ArcApp::clear_minimum_size() {
  if (minimum_size_ != nullptr) minimum_size_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize& WorkspaceDeskSpecifics_ArcApp::_internal_minimum_size() const {
  const ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* p = minimum_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize&>(
      ::sync_pb::_WorkspaceDeskSpecifics_ArcApp_WindowSize_default_instance_);
}
inline const ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize& WorkspaceDeskSpecifics_ArcApp::minimum_size() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.ArcApp.minimum_size)
  return _internal_minimum_size();
}
inline void WorkspaceDeskSpecifics_ArcApp::unsafe_arena_set_allocated_minimum_size(
    ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* minimum_size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimum_size_);
  }
  minimum_size_ = minimum_size;
  if (minimum_size) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.WorkspaceDeskSpecifics.ArcApp.minimum_size)
}
inline ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* WorkspaceDeskSpecifics_ArcApp::release_minimum_size() {
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* temp = minimum_size_;
  minimum_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* WorkspaceDeskSpecifics_ArcApp::unsafe_arena_release_minimum_size() {
  // @@protoc_insertion_point(field_release:sync_pb.WorkspaceDeskSpecifics.ArcApp.minimum_size)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* temp = minimum_size_;
  minimum_size_ = nullptr;
  return temp;
}
inline ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* WorkspaceDeskSpecifics_ArcApp::_internal_mutable_minimum_size() {
  _has_bits_[0] |= 0x00000002u;
  if (minimum_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize>(GetArenaForAllocation());
    minimum_size_ = p;
  }
  return minimum_size_;
}
inline ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* WorkspaceDeskSpecifics_ArcApp::mutable_minimum_size() {
  ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* _msg = _internal_mutable_minimum_size();
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.ArcApp.minimum_size)
  return _msg;
}
inline void WorkspaceDeskSpecifics_ArcApp::set_allocated_minimum_size(::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* minimum_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete minimum_size_;
  }
  if (minimum_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(minimum_size);
    if (message_arena != submessage_arena) {
      minimum_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minimum_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  minimum_size_ = minimum_size;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WorkspaceDeskSpecifics.ArcApp.minimum_size)
}

// optional .sync_pb.WorkspaceDeskSpecifics.ArcApp.WindowSize maximum_size = 3;
inline bool WorkspaceDeskSpecifics_ArcApp::_internal_has_maximum_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || maximum_size_ != nullptr);
  return value;
}
inline bool WorkspaceDeskSpecifics_ArcApp::has_maximum_size() const {
  return _internal_has_maximum_size();
}
inline void WorkspaceDeskSpecifics_ArcApp::clear_maximum_size() {
  if (maximum_size_ != nullptr) maximum_size_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize& WorkspaceDeskSpecifics_ArcApp::_internal_maximum_size() const {
  const ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* p = maximum_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize&>(
      ::sync_pb::_WorkspaceDeskSpecifics_ArcApp_WindowSize_default_instance_);
}
inline const ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize& WorkspaceDeskSpecifics_ArcApp::maximum_size() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.ArcApp.maximum_size)
  return _internal_maximum_size();
}
inline void WorkspaceDeskSpecifics_ArcApp::unsafe_arena_set_allocated_maximum_size(
    ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* maximum_size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximum_size_);
  }
  maximum_size_ = maximum_size;
  if (maximum_size) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.WorkspaceDeskSpecifics.ArcApp.maximum_size)
}
inline ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* WorkspaceDeskSpecifics_ArcApp::release_maximum_size() {
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* temp = maximum_size_;
  maximum_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* WorkspaceDeskSpecifics_ArcApp::unsafe_arena_release_maximum_size() {
  // @@protoc_insertion_point(field_release:sync_pb.WorkspaceDeskSpecifics.ArcApp.maximum_size)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* temp = maximum_size_;
  maximum_size_ = nullptr;
  return temp;
}
inline ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* WorkspaceDeskSpecifics_ArcApp::_internal_mutable_maximum_size() {
  _has_bits_[0] |= 0x00000004u;
  if (maximum_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize>(GetArenaForAllocation());
    maximum_size_ = p;
  }
  return maximum_size_;
}
inline ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* WorkspaceDeskSpecifics_ArcApp::mutable_maximum_size() {
  ::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* _msg = _internal_mutable_maximum_size();
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.ArcApp.maximum_size)
  return _msg;
}
inline void WorkspaceDeskSpecifics_ArcApp::set_allocated_maximum_size(::sync_pb::WorkspaceDeskSpecifics_ArcApp_WindowSize* maximum_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete maximum_size_;
  }
  if (maximum_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(maximum_size);
    if (message_arena != submessage_arena) {
      maximum_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maximum_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  maximum_size_ = maximum_size;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WorkspaceDeskSpecifics.ArcApp.maximum_size)
}

// optional .sync_pb.WorkspaceDeskSpecifics.WindowBound bounds_in_root = 5;
inline bool WorkspaceDeskSpecifics_ArcApp::_internal_has_bounds_in_root() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || bounds_in_root_ != nullptr);
  return value;
}
inline bool WorkspaceDeskSpecifics_ArcApp::has_bounds_in_root() const {
  return _internal_has_bounds_in_root();
}
inline void WorkspaceDeskSpecifics_ArcApp::clear_bounds_in_root() {
  if (bounds_in_root_ != nullptr) bounds_in_root_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::sync_pb::WorkspaceDeskSpecifics_WindowBound& WorkspaceDeskSpecifics_ArcApp::_internal_bounds_in_root() const {
  const ::sync_pb::WorkspaceDeskSpecifics_WindowBound* p = bounds_in_root_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::WorkspaceDeskSpecifics_WindowBound&>(
      ::sync_pb::_WorkspaceDeskSpecifics_WindowBound_default_instance_);
}
inline const ::sync_pb::WorkspaceDeskSpecifics_WindowBound& WorkspaceDeskSpecifics_ArcApp::bounds_in_root() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.ArcApp.bounds_in_root)
  return _internal_bounds_in_root();
}
inline void WorkspaceDeskSpecifics_ArcApp::unsafe_arena_set_allocated_bounds_in_root(
    ::sync_pb::WorkspaceDeskSpecifics_WindowBound* bounds_in_root) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds_in_root_);
  }
  bounds_in_root_ = bounds_in_root;
  if (bounds_in_root) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.WorkspaceDeskSpecifics.ArcApp.bounds_in_root)
}
inline ::sync_pb::WorkspaceDeskSpecifics_WindowBound* WorkspaceDeskSpecifics_ArcApp::release_bounds_in_root() {
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::WorkspaceDeskSpecifics_WindowBound* temp = bounds_in_root_;
  bounds_in_root_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::WorkspaceDeskSpecifics_WindowBound* WorkspaceDeskSpecifics_ArcApp::unsafe_arena_release_bounds_in_root() {
  // @@protoc_insertion_point(field_release:sync_pb.WorkspaceDeskSpecifics.ArcApp.bounds_in_root)
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::WorkspaceDeskSpecifics_WindowBound* temp = bounds_in_root_;
  bounds_in_root_ = nullptr;
  return temp;
}
inline ::sync_pb::WorkspaceDeskSpecifics_WindowBound* WorkspaceDeskSpecifics_ArcApp::_internal_mutable_bounds_in_root() {
  _has_bits_[0] |= 0x00000008u;
  if (bounds_in_root_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::WorkspaceDeskSpecifics_WindowBound>(GetArenaForAllocation());
    bounds_in_root_ = p;
  }
  return bounds_in_root_;
}
inline ::sync_pb::WorkspaceDeskSpecifics_WindowBound* WorkspaceDeskSpecifics_ArcApp::mutable_bounds_in_root() {
  ::sync_pb::WorkspaceDeskSpecifics_WindowBound* _msg = _internal_mutable_bounds_in_root();
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.ArcApp.bounds_in_root)
  return _msg;
}
inline void WorkspaceDeskSpecifics_ArcApp::set_allocated_bounds_in_root(::sync_pb::WorkspaceDeskSpecifics_WindowBound* bounds_in_root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bounds_in_root_;
  }
  if (bounds_in_root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bounds_in_root);
    if (message_arena != submessage_arena) {
      bounds_in_root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounds_in_root, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  bounds_in_root_ = bounds_in_root;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WorkspaceDeskSpecifics.ArcApp.bounds_in_root)
}

// -------------------------------------------------------------------

// WorkspaceDeskSpecifics_WindowBound

// optional int32 top = 1;
inline bool WorkspaceDeskSpecifics_WindowBound::_internal_has_top() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_WindowBound::has_top() const {
  return _internal_has_top();
}
inline void WorkspaceDeskSpecifics_WindowBound::clear_top() {
  top_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t WorkspaceDeskSpecifics_WindowBound::_internal_top() const {
  return top_;
}
inline int32_t WorkspaceDeskSpecifics_WindowBound::top() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.WindowBound.top)
  return _internal_top();
}
inline void WorkspaceDeskSpecifics_WindowBound::_internal_set_top(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  top_ = value;
}
inline void WorkspaceDeskSpecifics_WindowBound::set_top(int32_t value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.WindowBound.top)
}

// optional int32 left = 2;
inline bool WorkspaceDeskSpecifics_WindowBound::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_WindowBound::has_left() const {
  return _internal_has_left();
}
inline void WorkspaceDeskSpecifics_WindowBound::clear_left() {
  left_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t WorkspaceDeskSpecifics_WindowBound::_internal_left() const {
  return left_;
}
inline int32_t WorkspaceDeskSpecifics_WindowBound::left() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.WindowBound.left)
  return _internal_left();
}
inline void WorkspaceDeskSpecifics_WindowBound::_internal_set_left(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  left_ = value;
}
inline void WorkspaceDeskSpecifics_WindowBound::set_left(int32_t value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.WindowBound.left)
}

// optional int32 width = 3;
inline bool WorkspaceDeskSpecifics_WindowBound::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_WindowBound::has_width() const {
  return _internal_has_width();
}
inline void WorkspaceDeskSpecifics_WindowBound::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t WorkspaceDeskSpecifics_WindowBound::_internal_width() const {
  return width_;
}
inline int32_t WorkspaceDeskSpecifics_WindowBound::width() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.WindowBound.width)
  return _internal_width();
}
inline void WorkspaceDeskSpecifics_WindowBound::_internal_set_width(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
}
inline void WorkspaceDeskSpecifics_WindowBound::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.WindowBound.width)
}

// optional int32 height = 4;
inline bool WorkspaceDeskSpecifics_WindowBound::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics_WindowBound::has_height() const {
  return _internal_has_height();
}
inline void WorkspaceDeskSpecifics_WindowBound::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t WorkspaceDeskSpecifics_WindowBound::_internal_height() const {
  return height_;
}
inline int32_t WorkspaceDeskSpecifics_WindowBound::height() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.WindowBound.height)
  return _internal_height();
}
inline void WorkspaceDeskSpecifics_WindowBound::_internal_set_height(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  height_ = value;
}
inline void WorkspaceDeskSpecifics_WindowBound::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.WindowBound.height)
}

// -------------------------------------------------------------------

// WorkspaceDeskSpecifics

// optional string uuid = 1;
inline bool WorkspaceDeskSpecifics::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics::has_uuid() const {
  return _internal_has_uuid();
}
inline void WorkspaceDeskSpecifics::clear_uuid() {
  uuid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WorkspaceDeskSpecifics::uuid() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkspaceDeskSpecifics::set_uuid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.uuid)
}
inline std::string* WorkspaceDeskSpecifics::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.uuid)
  return _s;
}
inline const std::string& WorkspaceDeskSpecifics::_internal_uuid() const {
  return uuid_.Get();
}
inline void WorkspaceDeskSpecifics::_internal_set_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* WorkspaceDeskSpecifics::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  return uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* WorkspaceDeskSpecifics::release_uuid() {
  // @@protoc_insertion_point(field_release:sync_pb.WorkspaceDeskSpecifics.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = uuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uuid_.IsDefault()) {
    uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WorkspaceDeskSpecifics::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uuid_.IsDefault()) {
    uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WorkspaceDeskSpecifics.uuid)
}

// optional string name = 2;
inline bool WorkspaceDeskSpecifics::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics::has_name() const {
  return _internal_has_name();
}
inline void WorkspaceDeskSpecifics::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WorkspaceDeskSpecifics::name() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkspaceDeskSpecifics::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.name)
}
inline std::string* WorkspaceDeskSpecifics::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.name)
  return _s;
}
inline const std::string& WorkspaceDeskSpecifics::_internal_name() const {
  return name_.Get();
}
inline void WorkspaceDeskSpecifics::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* WorkspaceDeskSpecifics::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* WorkspaceDeskSpecifics::release_name() {
  // @@protoc_insertion_point(field_release:sync_pb.WorkspaceDeskSpecifics.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WorkspaceDeskSpecifics::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WorkspaceDeskSpecifics.name)
}

// optional int64 created_time_windows_epoch_micros = 3;
inline bool WorkspaceDeskSpecifics::_internal_has_created_time_windows_epoch_micros() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics::has_created_time_windows_epoch_micros() const {
  return _internal_has_created_time_windows_epoch_micros();
}
inline void WorkspaceDeskSpecifics::clear_created_time_windows_epoch_micros() {
  created_time_windows_epoch_micros_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t WorkspaceDeskSpecifics::_internal_created_time_windows_epoch_micros() const {
  return created_time_windows_epoch_micros_;
}
inline int64_t WorkspaceDeskSpecifics::created_time_windows_epoch_micros() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.created_time_windows_epoch_micros)
  return _internal_created_time_windows_epoch_micros();
}
inline void WorkspaceDeskSpecifics::_internal_set_created_time_windows_epoch_micros(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  created_time_windows_epoch_micros_ = value;
}
inline void WorkspaceDeskSpecifics::set_created_time_windows_epoch_micros(int64_t value) {
  _internal_set_created_time_windows_epoch_micros(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.created_time_windows_epoch_micros)
}

// optional int64 updated_time_windows_epoch_micros = 5;
inline bool WorkspaceDeskSpecifics::_internal_has_updated_time_windows_epoch_micros() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics::has_updated_time_windows_epoch_micros() const {
  return _internal_has_updated_time_windows_epoch_micros();
}
inline void WorkspaceDeskSpecifics::clear_updated_time_windows_epoch_micros() {
  updated_time_windows_epoch_micros_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t WorkspaceDeskSpecifics::_internal_updated_time_windows_epoch_micros() const {
  return updated_time_windows_epoch_micros_;
}
inline int64_t WorkspaceDeskSpecifics::updated_time_windows_epoch_micros() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.updated_time_windows_epoch_micros)
  return _internal_updated_time_windows_epoch_micros();
}
inline void WorkspaceDeskSpecifics::_internal_set_updated_time_windows_epoch_micros(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  updated_time_windows_epoch_micros_ = value;
}
inline void WorkspaceDeskSpecifics::set_updated_time_windows_epoch_micros(int64_t value) {
  _internal_set_updated_time_windows_epoch_micros(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.updated_time_windows_epoch_micros)
}

// optional .sync_pb.WorkspaceDeskSpecifics.Desk desk = 4;
inline bool WorkspaceDeskSpecifics::_internal_has_desk() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || desk_ != nullptr);
  return value;
}
inline bool WorkspaceDeskSpecifics::has_desk() const {
  return _internal_has_desk();
}
inline void WorkspaceDeskSpecifics::clear_desk() {
  if (desk_ != nullptr) desk_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::WorkspaceDeskSpecifics_Desk& WorkspaceDeskSpecifics::_internal_desk() const {
  const ::sync_pb::WorkspaceDeskSpecifics_Desk* p = desk_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::WorkspaceDeskSpecifics_Desk&>(
      ::sync_pb::_WorkspaceDeskSpecifics_Desk_default_instance_);
}
inline const ::sync_pb::WorkspaceDeskSpecifics_Desk& WorkspaceDeskSpecifics::desk() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.desk)
  return _internal_desk();
}
inline void WorkspaceDeskSpecifics::unsafe_arena_set_allocated_desk(
    ::sync_pb::WorkspaceDeskSpecifics_Desk* desk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desk_);
  }
  desk_ = desk;
  if (desk) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.WorkspaceDeskSpecifics.desk)
}
inline ::sync_pb::WorkspaceDeskSpecifics_Desk* WorkspaceDeskSpecifics::release_desk() {
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::WorkspaceDeskSpecifics_Desk* temp = desk_;
  desk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::WorkspaceDeskSpecifics_Desk* WorkspaceDeskSpecifics::unsafe_arena_release_desk() {
  // @@protoc_insertion_point(field_release:sync_pb.WorkspaceDeskSpecifics.desk)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::WorkspaceDeskSpecifics_Desk* temp = desk_;
  desk_ = nullptr;
  return temp;
}
inline ::sync_pb::WorkspaceDeskSpecifics_Desk* WorkspaceDeskSpecifics::_internal_mutable_desk() {
  _has_bits_[0] |= 0x00000004u;
  if (desk_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::WorkspaceDeskSpecifics_Desk>(GetArenaForAllocation());
    desk_ = p;
  }
  return desk_;
}
inline ::sync_pb::WorkspaceDeskSpecifics_Desk* WorkspaceDeskSpecifics::mutable_desk() {
  ::sync_pb::WorkspaceDeskSpecifics_Desk* _msg = _internal_mutable_desk();
  // @@protoc_insertion_point(field_mutable:sync_pb.WorkspaceDeskSpecifics.desk)
  return _msg;
}
inline void WorkspaceDeskSpecifics::set_allocated_desk(::sync_pb::WorkspaceDeskSpecifics_Desk* desk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete desk_;
  }
  if (desk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(desk);
    if (message_arena != submessage_arena) {
      desk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desk, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  desk_ = desk;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WorkspaceDeskSpecifics.desk)
}

// optional .sync_pb.WorkspaceDeskSpecifics.DeskType desk_type = 6;
inline bool WorkspaceDeskSpecifics::_internal_has_desk_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WorkspaceDeskSpecifics::has_desk_type() const {
  return _internal_has_desk_type();
}
inline void WorkspaceDeskSpecifics::clear_desk_type() {
  desk_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::sync_pb::WorkspaceDeskSpecifics_DeskType WorkspaceDeskSpecifics::_internal_desk_type() const {
  return static_cast< ::sync_pb::WorkspaceDeskSpecifics_DeskType >(desk_type_);
}
inline ::sync_pb::WorkspaceDeskSpecifics_DeskType WorkspaceDeskSpecifics::desk_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.WorkspaceDeskSpecifics.desk_type)
  return _internal_desk_type();
}
inline void WorkspaceDeskSpecifics::_internal_set_desk_type(::sync_pb::WorkspaceDeskSpecifics_DeskType value) {
  assert(::sync_pb::WorkspaceDeskSpecifics_DeskType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  desk_type_ = value;
}
inline void WorkspaceDeskSpecifics::set_desk_type(::sync_pb::WorkspaceDeskSpecifics_DeskType value) {
  _internal_set_desk_type(value);
  // @@protoc_insertion_point(field_set:sync_pb.WorkspaceDeskSpecifics.desk_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::WorkspaceDeskSpecifics_LaunchContainer> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WorkspaceDeskSpecifics_WindowState> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WorkspaceDeskSpecifics_WindowOpenDisposition> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WorkspaceDeskSpecifics_DeskType> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WorkspaceDeskSpecifics_TabGroupColor> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fworkspace_5fdesk_5fspecifics_2eproto
