// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/local_trusted_vault.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2flocal_5ftrusted_5fvault_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2flocal_5ftrusted_5fvault_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2flocal_5ftrusted_5fvault_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2flocal_5ftrusted_5fvault_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class LocalDeviceRegistrationInfo;
struct LocalDeviceRegistrationInfoDefaultTypeInternal;
extern LocalDeviceRegistrationInfoDefaultTypeInternal _LocalDeviceRegistrationInfo_default_instance_;
class LocalTrustedVault;
struct LocalTrustedVaultDefaultTypeInternal;
extern LocalTrustedVaultDefaultTypeInternal _LocalTrustedVault_default_instance_;
class LocalTrustedVaultDegradedRecoverabilityState;
struct LocalTrustedVaultDegradedRecoverabilityStateDefaultTypeInternal;
extern LocalTrustedVaultDegradedRecoverabilityStateDefaultTypeInternal _LocalTrustedVaultDegradedRecoverabilityState_default_instance_;
class LocalTrustedVaultKey;
struct LocalTrustedVaultKeyDefaultTypeInternal;
extern LocalTrustedVaultKeyDefaultTypeInternal _LocalTrustedVaultKey_default_instance_;
class LocalTrustedVaultPerUser;
struct LocalTrustedVaultPerUserDefaultTypeInternal;
extern LocalTrustedVaultPerUserDefaultTypeInternal _LocalTrustedVaultPerUser_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::LocalDeviceRegistrationInfo* Arena::CreateMaybeMessage<::sync_pb::LocalDeviceRegistrationInfo>(Arena*);
template<> ::sync_pb::LocalTrustedVault* Arena::CreateMaybeMessage<::sync_pb::LocalTrustedVault>(Arena*);
template<> ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState* Arena::CreateMaybeMessage<::sync_pb::LocalTrustedVaultDegradedRecoverabilityState>(Arena*);
template<> ::sync_pb::LocalTrustedVaultKey* Arena::CreateMaybeMessage<::sync_pb::LocalTrustedVaultKey>(Arena*);
template<> ::sync_pb::LocalTrustedVaultPerUser* Arena::CreateMaybeMessage<::sync_pb::LocalTrustedVaultPerUser>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class LocalTrustedVaultKey final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.LocalTrustedVaultKey) */ {
 public:
  inline LocalTrustedVaultKey() : LocalTrustedVaultKey(nullptr) {}
  ~LocalTrustedVaultKey() override;
  explicit PROTOBUF_CONSTEXPR LocalTrustedVaultKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalTrustedVaultKey(const LocalTrustedVaultKey& from);
  LocalTrustedVaultKey(LocalTrustedVaultKey&& from) noexcept
    : LocalTrustedVaultKey() {
    *this = ::std::move(from);
  }

  inline LocalTrustedVaultKey& operator=(const LocalTrustedVaultKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalTrustedVaultKey& operator=(LocalTrustedVaultKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LocalTrustedVaultKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalTrustedVaultKey* internal_default_instance() {
    return reinterpret_cast<const LocalTrustedVaultKey*>(
               &_LocalTrustedVaultKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LocalTrustedVaultKey& a, LocalTrustedVaultKey& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LocalTrustedVaultKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalTrustedVaultKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalTrustedVaultKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalTrustedVaultKey>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LocalTrustedVaultKey& from);
  void MergeFrom(const LocalTrustedVaultKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocalTrustedVaultKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.LocalTrustedVaultKey";
  }
  protected:
  explicit LocalTrustedVaultKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyMaterialFieldNumber = 1,
  };
  // optional bytes key_material = 1;
  bool has_key_material() const;
  private:
  bool _internal_has_key_material() const;
  public:
  void clear_key_material();
  const std::string& key_material() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_material(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_material();
  PROTOBUF_NODISCARD std::string* release_key_material();
  void set_allocated_key_material(std::string* key_material);
  private:
  const std::string& _internal_key_material() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_material(const std::string& value);
  std::string* _internal_mutable_key_material();
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.LocalTrustedVaultKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_material_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2flocal_5ftrusted_5fvault_2eproto;
};
// -------------------------------------------------------------------

class LocalDeviceRegistrationInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.LocalDeviceRegistrationInfo) */ {
 public:
  inline LocalDeviceRegistrationInfo() : LocalDeviceRegistrationInfo(nullptr) {}
  ~LocalDeviceRegistrationInfo() override;
  explicit PROTOBUF_CONSTEXPR LocalDeviceRegistrationInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalDeviceRegistrationInfo(const LocalDeviceRegistrationInfo& from);
  LocalDeviceRegistrationInfo(LocalDeviceRegistrationInfo&& from) noexcept
    : LocalDeviceRegistrationInfo() {
    *this = ::std::move(from);
  }

  inline LocalDeviceRegistrationInfo& operator=(const LocalDeviceRegistrationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalDeviceRegistrationInfo& operator=(LocalDeviceRegistrationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LocalDeviceRegistrationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalDeviceRegistrationInfo* internal_default_instance() {
    return reinterpret_cast<const LocalDeviceRegistrationInfo*>(
               &_LocalDeviceRegistrationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LocalDeviceRegistrationInfo& a, LocalDeviceRegistrationInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LocalDeviceRegistrationInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalDeviceRegistrationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalDeviceRegistrationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalDeviceRegistrationInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LocalDeviceRegistrationInfo& from);
  void MergeFrom(const LocalDeviceRegistrationInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocalDeviceRegistrationInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.LocalDeviceRegistrationInfo";
  }
  protected:
  explicit LocalDeviceRegistrationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateKeyMaterialFieldNumber = 1,
    kDeviceRegisteredFieldNumber = 2,
    kDeviceRegisteredVersionFieldNumber = 3,
  };
  // optional bytes private_key_material = 1;
  bool has_private_key_material() const;
  private:
  bool _internal_has_private_key_material() const;
  public:
  void clear_private_key_material();
  const std::string& private_key_material() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key_material(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key_material();
  PROTOBUF_NODISCARD std::string* release_private_key_material();
  void set_allocated_private_key_material(std::string* private_key_material);
  private:
  const std::string& _internal_private_key_material() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key_material(const std::string& value);
  std::string* _internal_mutable_private_key_material();
  public:

  // optional bool device_registered = 2;
  bool has_device_registered() const;
  private:
  bool _internal_has_device_registered() const;
  public:
  void clear_device_registered();
  bool device_registered() const;
  void set_device_registered(bool value);
  private:
  bool _internal_device_registered() const;
  void _internal_set_device_registered(bool value);
  public:

  // optional int32 device_registered_version = 3;
  bool has_device_registered_version() const;
  private:
  bool _internal_has_device_registered_version() const;
  public:
  void clear_device_registered_version();
  int32_t device_registered_version() const;
  void set_device_registered_version(int32_t value);
  private:
  int32_t _internal_device_registered_version() const;
  void _internal_set_device_registered_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.LocalDeviceRegistrationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_material_;
  bool device_registered_;
  int32_t device_registered_version_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2flocal_5ftrusted_5fvault_2eproto;
};
// -------------------------------------------------------------------

class LocalTrustedVaultDegradedRecoverabilityState final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.LocalTrustedVaultDegradedRecoverabilityState) */ {
 public:
  inline LocalTrustedVaultDegradedRecoverabilityState() : LocalTrustedVaultDegradedRecoverabilityState(nullptr) {}
  ~LocalTrustedVaultDegradedRecoverabilityState() override;
  explicit PROTOBUF_CONSTEXPR LocalTrustedVaultDegradedRecoverabilityState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalTrustedVaultDegradedRecoverabilityState(const LocalTrustedVaultDegradedRecoverabilityState& from);
  LocalTrustedVaultDegradedRecoverabilityState(LocalTrustedVaultDegradedRecoverabilityState&& from) noexcept
    : LocalTrustedVaultDegradedRecoverabilityState() {
    *this = ::std::move(from);
  }

  inline LocalTrustedVaultDegradedRecoverabilityState& operator=(const LocalTrustedVaultDegradedRecoverabilityState& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalTrustedVaultDegradedRecoverabilityState& operator=(LocalTrustedVaultDegradedRecoverabilityState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LocalTrustedVaultDegradedRecoverabilityState& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalTrustedVaultDegradedRecoverabilityState* internal_default_instance() {
    return reinterpret_cast<const LocalTrustedVaultDegradedRecoverabilityState*>(
               &_LocalTrustedVaultDegradedRecoverabilityState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LocalTrustedVaultDegradedRecoverabilityState& a, LocalTrustedVaultDegradedRecoverabilityState& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LocalTrustedVaultDegradedRecoverabilityState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalTrustedVaultDegradedRecoverabilityState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalTrustedVaultDegradedRecoverabilityState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalTrustedVaultDegradedRecoverabilityState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LocalTrustedVaultDegradedRecoverabilityState& from);
  void MergeFrom(const LocalTrustedVaultDegradedRecoverabilityState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocalTrustedVaultDegradedRecoverabilityState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.LocalTrustedVaultDegradedRecoverabilityState";
  }
  protected:
  explicit LocalTrustedVaultDegradedRecoverabilityState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastRefreshTimeMillisSinceUnixEpochFieldNumber = 2,
    kIsRecoverabilityDegradedFieldNumber = 1,
  };
  // optional int64 last_refresh_time_millis_since_unix_epoch = 2;
  bool has_last_refresh_time_millis_since_unix_epoch() const;
  private:
  bool _internal_has_last_refresh_time_millis_since_unix_epoch() const;
  public:
  void clear_last_refresh_time_millis_since_unix_epoch();
  int64_t last_refresh_time_millis_since_unix_epoch() const;
  void set_last_refresh_time_millis_since_unix_epoch(int64_t value);
  private:
  int64_t _internal_last_refresh_time_millis_since_unix_epoch() const;
  void _internal_set_last_refresh_time_millis_since_unix_epoch(int64_t value);
  public:

  // optional bool is_recoverability_degraded = 1;
  bool has_is_recoverability_degraded() const;
  private:
  bool _internal_has_is_recoverability_degraded() const;
  public:
  void clear_is_recoverability_degraded();
  bool is_recoverability_degraded() const;
  void set_is_recoverability_degraded(bool value);
  private:
  bool _internal_is_recoverability_degraded() const;
  void _internal_set_is_recoverability_degraded(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.LocalTrustedVaultDegradedRecoverabilityState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t last_refresh_time_millis_since_unix_epoch_;
  bool is_recoverability_degraded_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2flocal_5ftrusted_5fvault_2eproto;
};
// -------------------------------------------------------------------

class LocalTrustedVaultPerUser final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.LocalTrustedVaultPerUser) */ {
 public:
  inline LocalTrustedVaultPerUser() : LocalTrustedVaultPerUser(nullptr) {}
  ~LocalTrustedVaultPerUser() override;
  explicit PROTOBUF_CONSTEXPR LocalTrustedVaultPerUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalTrustedVaultPerUser(const LocalTrustedVaultPerUser& from);
  LocalTrustedVaultPerUser(LocalTrustedVaultPerUser&& from) noexcept
    : LocalTrustedVaultPerUser() {
    *this = ::std::move(from);
  }

  inline LocalTrustedVaultPerUser& operator=(const LocalTrustedVaultPerUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalTrustedVaultPerUser& operator=(LocalTrustedVaultPerUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LocalTrustedVaultPerUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalTrustedVaultPerUser* internal_default_instance() {
    return reinterpret_cast<const LocalTrustedVaultPerUser*>(
               &_LocalTrustedVaultPerUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LocalTrustedVaultPerUser& a, LocalTrustedVaultPerUser& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LocalTrustedVaultPerUser* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalTrustedVaultPerUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalTrustedVaultPerUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalTrustedVaultPerUser>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LocalTrustedVaultPerUser& from);
  void MergeFrom(const LocalTrustedVaultPerUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocalTrustedVaultPerUser* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.LocalTrustedVaultPerUser";
  }
  protected:
  explicit LocalTrustedVaultPerUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVaultKeyFieldNumber = 2,
    kGaiaIdFieldNumber = 1,
    kLocalDeviceRegistrationInfoFieldNumber = 5,
    kDegradedRecoverabilityStateFieldNumber = 8,
    kLastVaultKeyVersionFieldNumber = 3,
    kKeysAreStaleFieldNumber = 4,
    kShouldDeleteKeysWhenNonPrimaryFieldNumber = 7,
    kLastFailedRequestMillisSinceUnixEpochFieldNumber = 6,
  };
  // repeated .sync_pb.LocalTrustedVaultKey vault_key = 2;
  int vault_key_size() const;
  private:
  int _internal_vault_key_size() const;
  public:
  void clear_vault_key();
  ::sync_pb::LocalTrustedVaultKey* mutable_vault_key(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LocalTrustedVaultKey >*
      mutable_vault_key();
  private:
  const ::sync_pb::LocalTrustedVaultKey& _internal_vault_key(int index) const;
  ::sync_pb::LocalTrustedVaultKey* _internal_add_vault_key();
  public:
  const ::sync_pb::LocalTrustedVaultKey& vault_key(int index) const;
  ::sync_pb::LocalTrustedVaultKey* add_vault_key();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LocalTrustedVaultKey >&
      vault_key() const;

  // optional bytes gaia_id = 1;
  bool has_gaia_id() const;
  private:
  bool _internal_has_gaia_id() const;
  public:
  void clear_gaia_id();
  const std::string& gaia_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gaia_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gaia_id();
  PROTOBUF_NODISCARD std::string* release_gaia_id();
  void set_allocated_gaia_id(std::string* gaia_id);
  private:
  const std::string& _internal_gaia_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gaia_id(const std::string& value);
  std::string* _internal_mutable_gaia_id();
  public:

  // optional .sync_pb.LocalDeviceRegistrationInfo local_device_registration_info = 5;
  bool has_local_device_registration_info() const;
  private:
  bool _internal_has_local_device_registration_info() const;
  public:
  void clear_local_device_registration_info();
  const ::sync_pb::LocalDeviceRegistrationInfo& local_device_registration_info() const;
  PROTOBUF_NODISCARD ::sync_pb::LocalDeviceRegistrationInfo* release_local_device_registration_info();
  ::sync_pb::LocalDeviceRegistrationInfo* mutable_local_device_registration_info();
  void set_allocated_local_device_registration_info(::sync_pb::LocalDeviceRegistrationInfo* local_device_registration_info);
  private:
  const ::sync_pb::LocalDeviceRegistrationInfo& _internal_local_device_registration_info() const;
  ::sync_pb::LocalDeviceRegistrationInfo* _internal_mutable_local_device_registration_info();
  public:
  void unsafe_arena_set_allocated_local_device_registration_info(
      ::sync_pb::LocalDeviceRegistrationInfo* local_device_registration_info);
  ::sync_pb::LocalDeviceRegistrationInfo* unsafe_arena_release_local_device_registration_info();

  // optional .sync_pb.LocalTrustedVaultDegradedRecoverabilityState degraded_recoverability_state = 8;
  bool has_degraded_recoverability_state() const;
  private:
  bool _internal_has_degraded_recoverability_state() const;
  public:
  void clear_degraded_recoverability_state();
  const ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState& degraded_recoverability_state() const;
  PROTOBUF_NODISCARD ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState* release_degraded_recoverability_state();
  ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState* mutable_degraded_recoverability_state();
  void set_allocated_degraded_recoverability_state(::sync_pb::LocalTrustedVaultDegradedRecoverabilityState* degraded_recoverability_state);
  private:
  const ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState& _internal_degraded_recoverability_state() const;
  ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState* _internal_mutable_degraded_recoverability_state();
  public:
  void unsafe_arena_set_allocated_degraded_recoverability_state(
      ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState* degraded_recoverability_state);
  ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState* unsafe_arena_release_degraded_recoverability_state();

  // optional int32 last_vault_key_version = 3;
  bool has_last_vault_key_version() const;
  private:
  bool _internal_has_last_vault_key_version() const;
  public:
  void clear_last_vault_key_version();
  int32_t last_vault_key_version() const;
  void set_last_vault_key_version(int32_t value);
  private:
  int32_t _internal_last_vault_key_version() const;
  void _internal_set_last_vault_key_version(int32_t value);
  public:

  // optional bool keys_are_stale = 4;
  bool has_keys_are_stale() const;
  private:
  bool _internal_has_keys_are_stale() const;
  public:
  void clear_keys_are_stale();
  bool keys_are_stale() const;
  void set_keys_are_stale(bool value);
  private:
  bool _internal_keys_are_stale() const;
  void _internal_set_keys_are_stale(bool value);
  public:

  // optional bool should_delete_keys_when_non_primary = 7;
  bool has_should_delete_keys_when_non_primary() const;
  private:
  bool _internal_has_should_delete_keys_when_non_primary() const;
  public:
  void clear_should_delete_keys_when_non_primary();
  bool should_delete_keys_when_non_primary() const;
  void set_should_delete_keys_when_non_primary(bool value);
  private:
  bool _internal_should_delete_keys_when_non_primary() const;
  void _internal_set_should_delete_keys_when_non_primary(bool value);
  public:

  // optional int64 last_failed_request_millis_since_unix_epoch = 6;
  bool has_last_failed_request_millis_since_unix_epoch() const;
  private:
  bool _internal_has_last_failed_request_millis_since_unix_epoch() const;
  public:
  void clear_last_failed_request_millis_since_unix_epoch();
  int64_t last_failed_request_millis_since_unix_epoch() const;
  void set_last_failed_request_millis_since_unix_epoch(int64_t value);
  private:
  int64_t _internal_last_failed_request_millis_since_unix_epoch() const;
  void _internal_set_last_failed_request_millis_since_unix_epoch(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.LocalTrustedVaultPerUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LocalTrustedVaultKey > vault_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gaia_id_;
  ::sync_pb::LocalDeviceRegistrationInfo* local_device_registration_info_;
  ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState* degraded_recoverability_state_;
  int32_t last_vault_key_version_;
  bool keys_are_stale_;
  bool should_delete_keys_when_non_primary_;
  int64_t last_failed_request_millis_since_unix_epoch_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2flocal_5ftrusted_5fvault_2eproto;
};
// -------------------------------------------------------------------

class LocalTrustedVault final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.LocalTrustedVault) */ {
 public:
  inline LocalTrustedVault() : LocalTrustedVault(nullptr) {}
  ~LocalTrustedVault() override;
  explicit PROTOBUF_CONSTEXPR LocalTrustedVault(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalTrustedVault(const LocalTrustedVault& from);
  LocalTrustedVault(LocalTrustedVault&& from) noexcept
    : LocalTrustedVault() {
    *this = ::std::move(from);
  }

  inline LocalTrustedVault& operator=(const LocalTrustedVault& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalTrustedVault& operator=(LocalTrustedVault&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LocalTrustedVault& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalTrustedVault* internal_default_instance() {
    return reinterpret_cast<const LocalTrustedVault*>(
               &_LocalTrustedVault_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LocalTrustedVault& a, LocalTrustedVault& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LocalTrustedVault* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalTrustedVault* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalTrustedVault* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalTrustedVault>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LocalTrustedVault& from);
  void MergeFrom(const LocalTrustedVault& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocalTrustedVault* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.LocalTrustedVault";
  }
  protected:
  explicit LocalTrustedVault(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kDataVersionFieldNumber = 2,
  };
  // repeated .sync_pb.LocalTrustedVaultPerUser user = 1;
  int user_size() const;
  private:
  int _internal_user_size() const;
  public:
  void clear_user();
  ::sync_pb::LocalTrustedVaultPerUser* mutable_user(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LocalTrustedVaultPerUser >*
      mutable_user();
  private:
  const ::sync_pb::LocalTrustedVaultPerUser& _internal_user(int index) const;
  ::sync_pb::LocalTrustedVaultPerUser* _internal_add_user();
  public:
  const ::sync_pb::LocalTrustedVaultPerUser& user(int index) const;
  ::sync_pb::LocalTrustedVaultPerUser* add_user();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LocalTrustedVaultPerUser >&
      user() const;

  // optional int32 data_version = 2;
  bool has_data_version() const;
  private:
  bool _internal_has_data_version() const;
  public:
  void clear_data_version();
  int32_t data_version() const;
  void set_data_version(int32_t value);
  private:
  int32_t _internal_data_version() const;
  void _internal_set_data_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.LocalTrustedVault)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LocalTrustedVaultPerUser > user_;
  int32_t data_version_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2flocal_5ftrusted_5fvault_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocalTrustedVaultKey

// optional bytes key_material = 1;
inline bool LocalTrustedVaultKey::_internal_has_key_material() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LocalTrustedVaultKey::has_key_material() const {
  return _internal_has_key_material();
}
inline void LocalTrustedVaultKey::clear_key_material() {
  key_material_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LocalTrustedVaultKey::key_material() const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalTrustedVaultKey.key_material)
  return _internal_key_material();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalTrustedVaultKey::set_key_material(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_material_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.LocalTrustedVaultKey.key_material)
}
inline std::string* LocalTrustedVaultKey::mutable_key_material() {
  std::string* _s = _internal_mutable_key_material();
  // @@protoc_insertion_point(field_mutable:sync_pb.LocalTrustedVaultKey.key_material)
  return _s;
}
inline const std::string& LocalTrustedVaultKey::_internal_key_material() const {
  return key_material_.Get();
}
inline void LocalTrustedVaultKey::_internal_set_key_material(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_material_.Set(value, GetArenaForAllocation());
}
inline std::string* LocalTrustedVaultKey::_internal_mutable_key_material() {
  _has_bits_[0] |= 0x00000001u;
  return key_material_.Mutable(GetArenaForAllocation());
}
inline std::string* LocalTrustedVaultKey::release_key_material() {
  // @@protoc_insertion_point(field_release:sync_pb.LocalTrustedVaultKey.key_material)
  if (!_internal_has_key_material()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_material_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_material_.IsDefault()) {
    key_material_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LocalTrustedVaultKey::set_allocated_key_material(std::string* key_material) {
  if (key_material != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_material_.SetAllocated(key_material, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_material_.IsDefault()) {
    key_material_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.LocalTrustedVaultKey.key_material)
}

// -------------------------------------------------------------------

// LocalDeviceRegistrationInfo

// optional bytes private_key_material = 1;
inline bool LocalDeviceRegistrationInfo::_internal_has_private_key_material() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LocalDeviceRegistrationInfo::has_private_key_material() const {
  return _internal_has_private_key_material();
}
inline void LocalDeviceRegistrationInfo::clear_private_key_material() {
  private_key_material_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LocalDeviceRegistrationInfo::private_key_material() const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalDeviceRegistrationInfo.private_key_material)
  return _internal_private_key_material();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalDeviceRegistrationInfo::set_private_key_material(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 private_key_material_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.LocalDeviceRegistrationInfo.private_key_material)
}
inline std::string* LocalDeviceRegistrationInfo::mutable_private_key_material() {
  std::string* _s = _internal_mutable_private_key_material();
  // @@protoc_insertion_point(field_mutable:sync_pb.LocalDeviceRegistrationInfo.private_key_material)
  return _s;
}
inline const std::string& LocalDeviceRegistrationInfo::_internal_private_key_material() const {
  return private_key_material_.Get();
}
inline void LocalDeviceRegistrationInfo::_internal_set_private_key_material(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  private_key_material_.Set(value, GetArenaForAllocation());
}
inline std::string* LocalDeviceRegistrationInfo::_internal_mutable_private_key_material() {
  _has_bits_[0] |= 0x00000001u;
  return private_key_material_.Mutable(GetArenaForAllocation());
}
inline std::string* LocalDeviceRegistrationInfo::release_private_key_material() {
  // @@protoc_insertion_point(field_release:sync_pb.LocalDeviceRegistrationInfo.private_key_material)
  if (!_internal_has_private_key_material()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = private_key_material_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_material_.IsDefault()) {
    private_key_material_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LocalDeviceRegistrationInfo::set_allocated_private_key_material(std::string* private_key_material) {
  if (private_key_material != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  private_key_material_.SetAllocated(private_key_material, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_material_.IsDefault()) {
    private_key_material_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.LocalDeviceRegistrationInfo.private_key_material)
}

// optional bool device_registered = 2;
inline bool LocalDeviceRegistrationInfo::_internal_has_device_registered() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LocalDeviceRegistrationInfo::has_device_registered() const {
  return _internal_has_device_registered();
}
inline void LocalDeviceRegistrationInfo::clear_device_registered() {
  device_registered_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LocalDeviceRegistrationInfo::_internal_device_registered() const {
  return device_registered_;
}
inline bool LocalDeviceRegistrationInfo::device_registered() const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalDeviceRegistrationInfo.device_registered)
  return _internal_device_registered();
}
inline void LocalDeviceRegistrationInfo::_internal_set_device_registered(bool value) {
  _has_bits_[0] |= 0x00000002u;
  device_registered_ = value;
}
inline void LocalDeviceRegistrationInfo::set_device_registered(bool value) {
  _internal_set_device_registered(value);
  // @@protoc_insertion_point(field_set:sync_pb.LocalDeviceRegistrationInfo.device_registered)
}

// optional int32 device_registered_version = 3;
inline bool LocalDeviceRegistrationInfo::_internal_has_device_registered_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LocalDeviceRegistrationInfo::has_device_registered_version() const {
  return _internal_has_device_registered_version();
}
inline void LocalDeviceRegistrationInfo::clear_device_registered_version() {
  device_registered_version_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t LocalDeviceRegistrationInfo::_internal_device_registered_version() const {
  return device_registered_version_;
}
inline int32_t LocalDeviceRegistrationInfo::device_registered_version() const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalDeviceRegistrationInfo.device_registered_version)
  return _internal_device_registered_version();
}
inline void LocalDeviceRegistrationInfo::_internal_set_device_registered_version(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  device_registered_version_ = value;
}
inline void LocalDeviceRegistrationInfo::set_device_registered_version(int32_t value) {
  _internal_set_device_registered_version(value);
  // @@protoc_insertion_point(field_set:sync_pb.LocalDeviceRegistrationInfo.device_registered_version)
}

// -------------------------------------------------------------------

// LocalTrustedVaultDegradedRecoverabilityState

// optional bool is_recoverability_degraded = 1;
inline bool LocalTrustedVaultDegradedRecoverabilityState::_internal_has_is_recoverability_degraded() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LocalTrustedVaultDegradedRecoverabilityState::has_is_recoverability_degraded() const {
  return _internal_has_is_recoverability_degraded();
}
inline void LocalTrustedVaultDegradedRecoverabilityState::clear_is_recoverability_degraded() {
  is_recoverability_degraded_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LocalTrustedVaultDegradedRecoverabilityState::_internal_is_recoverability_degraded() const {
  return is_recoverability_degraded_;
}
inline bool LocalTrustedVaultDegradedRecoverabilityState::is_recoverability_degraded() const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalTrustedVaultDegradedRecoverabilityState.is_recoverability_degraded)
  return _internal_is_recoverability_degraded();
}
inline void LocalTrustedVaultDegradedRecoverabilityState::_internal_set_is_recoverability_degraded(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_recoverability_degraded_ = value;
}
inline void LocalTrustedVaultDegradedRecoverabilityState::set_is_recoverability_degraded(bool value) {
  _internal_set_is_recoverability_degraded(value);
  // @@protoc_insertion_point(field_set:sync_pb.LocalTrustedVaultDegradedRecoverabilityState.is_recoverability_degraded)
}

// optional int64 last_refresh_time_millis_since_unix_epoch = 2;
inline bool LocalTrustedVaultDegradedRecoverabilityState::_internal_has_last_refresh_time_millis_since_unix_epoch() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LocalTrustedVaultDegradedRecoverabilityState::has_last_refresh_time_millis_since_unix_epoch() const {
  return _internal_has_last_refresh_time_millis_since_unix_epoch();
}
inline void LocalTrustedVaultDegradedRecoverabilityState::clear_last_refresh_time_millis_since_unix_epoch() {
  last_refresh_time_millis_since_unix_epoch_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t LocalTrustedVaultDegradedRecoverabilityState::_internal_last_refresh_time_millis_since_unix_epoch() const {
  return last_refresh_time_millis_since_unix_epoch_;
}
inline int64_t LocalTrustedVaultDegradedRecoverabilityState::last_refresh_time_millis_since_unix_epoch() const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalTrustedVaultDegradedRecoverabilityState.last_refresh_time_millis_since_unix_epoch)
  return _internal_last_refresh_time_millis_since_unix_epoch();
}
inline void LocalTrustedVaultDegradedRecoverabilityState::_internal_set_last_refresh_time_millis_since_unix_epoch(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  last_refresh_time_millis_since_unix_epoch_ = value;
}
inline void LocalTrustedVaultDegradedRecoverabilityState::set_last_refresh_time_millis_since_unix_epoch(int64_t value) {
  _internal_set_last_refresh_time_millis_since_unix_epoch(value);
  // @@protoc_insertion_point(field_set:sync_pb.LocalTrustedVaultDegradedRecoverabilityState.last_refresh_time_millis_since_unix_epoch)
}

// -------------------------------------------------------------------

// LocalTrustedVaultPerUser

// optional bytes gaia_id = 1;
inline bool LocalTrustedVaultPerUser::_internal_has_gaia_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LocalTrustedVaultPerUser::has_gaia_id() const {
  return _internal_has_gaia_id();
}
inline void LocalTrustedVaultPerUser::clear_gaia_id() {
  gaia_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LocalTrustedVaultPerUser::gaia_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalTrustedVaultPerUser.gaia_id)
  return _internal_gaia_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalTrustedVaultPerUser::set_gaia_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 gaia_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.LocalTrustedVaultPerUser.gaia_id)
}
inline std::string* LocalTrustedVaultPerUser::mutable_gaia_id() {
  std::string* _s = _internal_mutable_gaia_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.LocalTrustedVaultPerUser.gaia_id)
  return _s;
}
inline const std::string& LocalTrustedVaultPerUser::_internal_gaia_id() const {
  return gaia_id_.Get();
}
inline void LocalTrustedVaultPerUser::_internal_set_gaia_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gaia_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LocalTrustedVaultPerUser::_internal_mutable_gaia_id() {
  _has_bits_[0] |= 0x00000001u;
  return gaia_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LocalTrustedVaultPerUser::release_gaia_id() {
  // @@protoc_insertion_point(field_release:sync_pb.LocalTrustedVaultPerUser.gaia_id)
  if (!_internal_has_gaia_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = gaia_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gaia_id_.IsDefault()) {
    gaia_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LocalTrustedVaultPerUser::set_allocated_gaia_id(std::string* gaia_id) {
  if (gaia_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gaia_id_.SetAllocated(gaia_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gaia_id_.IsDefault()) {
    gaia_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.LocalTrustedVaultPerUser.gaia_id)
}

// repeated .sync_pb.LocalTrustedVaultKey vault_key = 2;
inline int LocalTrustedVaultPerUser::_internal_vault_key_size() const {
  return vault_key_.size();
}
inline int LocalTrustedVaultPerUser::vault_key_size() const {
  return _internal_vault_key_size();
}
inline void LocalTrustedVaultPerUser::clear_vault_key() {
  vault_key_.Clear();
}
inline ::sync_pb::LocalTrustedVaultKey* LocalTrustedVaultPerUser::mutable_vault_key(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.LocalTrustedVaultPerUser.vault_key)
  return vault_key_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LocalTrustedVaultKey >*
LocalTrustedVaultPerUser::mutable_vault_key() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.LocalTrustedVaultPerUser.vault_key)
  return &vault_key_;
}
inline const ::sync_pb::LocalTrustedVaultKey& LocalTrustedVaultPerUser::_internal_vault_key(int index) const {
  return vault_key_.Get(index);
}
inline const ::sync_pb::LocalTrustedVaultKey& LocalTrustedVaultPerUser::vault_key(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalTrustedVaultPerUser.vault_key)
  return _internal_vault_key(index);
}
inline ::sync_pb::LocalTrustedVaultKey* LocalTrustedVaultPerUser::_internal_add_vault_key() {
  return vault_key_.Add();
}
inline ::sync_pb::LocalTrustedVaultKey* LocalTrustedVaultPerUser::add_vault_key() {
  ::sync_pb::LocalTrustedVaultKey* _add = _internal_add_vault_key();
  // @@protoc_insertion_point(field_add:sync_pb.LocalTrustedVaultPerUser.vault_key)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LocalTrustedVaultKey >&
LocalTrustedVaultPerUser::vault_key() const {
  // @@protoc_insertion_point(field_list:sync_pb.LocalTrustedVaultPerUser.vault_key)
  return vault_key_;
}

// optional int32 last_vault_key_version = 3;
inline bool LocalTrustedVaultPerUser::_internal_has_last_vault_key_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LocalTrustedVaultPerUser::has_last_vault_key_version() const {
  return _internal_has_last_vault_key_version();
}
inline void LocalTrustedVaultPerUser::clear_last_vault_key_version() {
  last_vault_key_version_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t LocalTrustedVaultPerUser::_internal_last_vault_key_version() const {
  return last_vault_key_version_;
}
inline int32_t LocalTrustedVaultPerUser::last_vault_key_version() const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalTrustedVaultPerUser.last_vault_key_version)
  return _internal_last_vault_key_version();
}
inline void LocalTrustedVaultPerUser::_internal_set_last_vault_key_version(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  last_vault_key_version_ = value;
}
inline void LocalTrustedVaultPerUser::set_last_vault_key_version(int32_t value) {
  _internal_set_last_vault_key_version(value);
  // @@protoc_insertion_point(field_set:sync_pb.LocalTrustedVaultPerUser.last_vault_key_version)
}

// optional bool keys_are_stale = 4;
inline bool LocalTrustedVaultPerUser::_internal_has_keys_are_stale() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LocalTrustedVaultPerUser::has_keys_are_stale() const {
  return _internal_has_keys_are_stale();
}
inline void LocalTrustedVaultPerUser::clear_keys_are_stale() {
  keys_are_stale_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool LocalTrustedVaultPerUser::_internal_keys_are_stale() const {
  return keys_are_stale_;
}
inline bool LocalTrustedVaultPerUser::keys_are_stale() const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalTrustedVaultPerUser.keys_are_stale)
  return _internal_keys_are_stale();
}
inline void LocalTrustedVaultPerUser::_internal_set_keys_are_stale(bool value) {
  _has_bits_[0] |= 0x00000010u;
  keys_are_stale_ = value;
}
inline void LocalTrustedVaultPerUser::set_keys_are_stale(bool value) {
  _internal_set_keys_are_stale(value);
  // @@protoc_insertion_point(field_set:sync_pb.LocalTrustedVaultPerUser.keys_are_stale)
}

// optional .sync_pb.LocalDeviceRegistrationInfo local_device_registration_info = 5;
inline bool LocalTrustedVaultPerUser::_internal_has_local_device_registration_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || local_device_registration_info_ != nullptr);
  return value;
}
inline bool LocalTrustedVaultPerUser::has_local_device_registration_info() const {
  return _internal_has_local_device_registration_info();
}
inline void LocalTrustedVaultPerUser::clear_local_device_registration_info() {
  if (local_device_registration_info_ != nullptr) local_device_registration_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sync_pb::LocalDeviceRegistrationInfo& LocalTrustedVaultPerUser::_internal_local_device_registration_info() const {
  const ::sync_pb::LocalDeviceRegistrationInfo* p = local_device_registration_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::LocalDeviceRegistrationInfo&>(
      ::sync_pb::_LocalDeviceRegistrationInfo_default_instance_);
}
inline const ::sync_pb::LocalDeviceRegistrationInfo& LocalTrustedVaultPerUser::local_device_registration_info() const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalTrustedVaultPerUser.local_device_registration_info)
  return _internal_local_device_registration_info();
}
inline void LocalTrustedVaultPerUser::unsafe_arena_set_allocated_local_device_registration_info(
    ::sync_pb::LocalDeviceRegistrationInfo* local_device_registration_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_device_registration_info_);
  }
  local_device_registration_info_ = local_device_registration_info;
  if (local_device_registration_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.LocalTrustedVaultPerUser.local_device_registration_info)
}
inline ::sync_pb::LocalDeviceRegistrationInfo* LocalTrustedVaultPerUser::release_local_device_registration_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::LocalDeviceRegistrationInfo* temp = local_device_registration_info_;
  local_device_registration_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::LocalDeviceRegistrationInfo* LocalTrustedVaultPerUser::unsafe_arena_release_local_device_registration_info() {
  // @@protoc_insertion_point(field_release:sync_pb.LocalTrustedVaultPerUser.local_device_registration_info)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::LocalDeviceRegistrationInfo* temp = local_device_registration_info_;
  local_device_registration_info_ = nullptr;
  return temp;
}
inline ::sync_pb::LocalDeviceRegistrationInfo* LocalTrustedVaultPerUser::_internal_mutable_local_device_registration_info() {
  _has_bits_[0] |= 0x00000002u;
  if (local_device_registration_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::LocalDeviceRegistrationInfo>(GetArenaForAllocation());
    local_device_registration_info_ = p;
  }
  return local_device_registration_info_;
}
inline ::sync_pb::LocalDeviceRegistrationInfo* LocalTrustedVaultPerUser::mutable_local_device_registration_info() {
  ::sync_pb::LocalDeviceRegistrationInfo* _msg = _internal_mutable_local_device_registration_info();
  // @@protoc_insertion_point(field_mutable:sync_pb.LocalTrustedVaultPerUser.local_device_registration_info)
  return _msg;
}
inline void LocalTrustedVaultPerUser::set_allocated_local_device_registration_info(::sync_pb::LocalDeviceRegistrationInfo* local_device_registration_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete local_device_registration_info_;
  }
  if (local_device_registration_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(local_device_registration_info);
    if (message_arena != submessage_arena) {
      local_device_registration_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_device_registration_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  local_device_registration_info_ = local_device_registration_info;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.LocalTrustedVaultPerUser.local_device_registration_info)
}

// optional int64 last_failed_request_millis_since_unix_epoch = 6;
inline bool LocalTrustedVaultPerUser::_internal_has_last_failed_request_millis_since_unix_epoch() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LocalTrustedVaultPerUser::has_last_failed_request_millis_since_unix_epoch() const {
  return _internal_has_last_failed_request_millis_since_unix_epoch();
}
inline void LocalTrustedVaultPerUser::clear_last_failed_request_millis_since_unix_epoch() {
  last_failed_request_millis_since_unix_epoch_ = int64_t{0};
  _has_bits_[0] &= ~0x00000040u;
}
inline int64_t LocalTrustedVaultPerUser::_internal_last_failed_request_millis_since_unix_epoch() const {
  return last_failed_request_millis_since_unix_epoch_;
}
inline int64_t LocalTrustedVaultPerUser::last_failed_request_millis_since_unix_epoch() const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalTrustedVaultPerUser.last_failed_request_millis_since_unix_epoch)
  return _internal_last_failed_request_millis_since_unix_epoch();
}
inline void LocalTrustedVaultPerUser::_internal_set_last_failed_request_millis_since_unix_epoch(int64_t value) {
  _has_bits_[0] |= 0x00000040u;
  last_failed_request_millis_since_unix_epoch_ = value;
}
inline void LocalTrustedVaultPerUser::set_last_failed_request_millis_since_unix_epoch(int64_t value) {
  _internal_set_last_failed_request_millis_since_unix_epoch(value);
  // @@protoc_insertion_point(field_set:sync_pb.LocalTrustedVaultPerUser.last_failed_request_millis_since_unix_epoch)
}

// optional bool should_delete_keys_when_non_primary = 7;
inline bool LocalTrustedVaultPerUser::_internal_has_should_delete_keys_when_non_primary() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LocalTrustedVaultPerUser::has_should_delete_keys_when_non_primary() const {
  return _internal_has_should_delete_keys_when_non_primary();
}
inline void LocalTrustedVaultPerUser::clear_should_delete_keys_when_non_primary() {
  should_delete_keys_when_non_primary_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool LocalTrustedVaultPerUser::_internal_should_delete_keys_when_non_primary() const {
  return should_delete_keys_when_non_primary_;
}
inline bool LocalTrustedVaultPerUser::should_delete_keys_when_non_primary() const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalTrustedVaultPerUser.should_delete_keys_when_non_primary)
  return _internal_should_delete_keys_when_non_primary();
}
inline void LocalTrustedVaultPerUser::_internal_set_should_delete_keys_when_non_primary(bool value) {
  _has_bits_[0] |= 0x00000020u;
  should_delete_keys_when_non_primary_ = value;
}
inline void LocalTrustedVaultPerUser::set_should_delete_keys_when_non_primary(bool value) {
  _internal_set_should_delete_keys_when_non_primary(value);
  // @@protoc_insertion_point(field_set:sync_pb.LocalTrustedVaultPerUser.should_delete_keys_when_non_primary)
}

// optional .sync_pb.LocalTrustedVaultDegradedRecoverabilityState degraded_recoverability_state = 8;
inline bool LocalTrustedVaultPerUser::_internal_has_degraded_recoverability_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || degraded_recoverability_state_ != nullptr);
  return value;
}
inline bool LocalTrustedVaultPerUser::has_degraded_recoverability_state() const {
  return _internal_has_degraded_recoverability_state();
}
inline void LocalTrustedVaultPerUser::clear_degraded_recoverability_state() {
  if (degraded_recoverability_state_ != nullptr) degraded_recoverability_state_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState& LocalTrustedVaultPerUser::_internal_degraded_recoverability_state() const {
  const ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState* p = degraded_recoverability_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState&>(
      ::sync_pb::_LocalTrustedVaultDegradedRecoverabilityState_default_instance_);
}
inline const ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState& LocalTrustedVaultPerUser::degraded_recoverability_state() const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalTrustedVaultPerUser.degraded_recoverability_state)
  return _internal_degraded_recoverability_state();
}
inline void LocalTrustedVaultPerUser::unsafe_arena_set_allocated_degraded_recoverability_state(
    ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState* degraded_recoverability_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(degraded_recoverability_state_);
  }
  degraded_recoverability_state_ = degraded_recoverability_state;
  if (degraded_recoverability_state) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.LocalTrustedVaultPerUser.degraded_recoverability_state)
}
inline ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState* LocalTrustedVaultPerUser::release_degraded_recoverability_state() {
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState* temp = degraded_recoverability_state_;
  degraded_recoverability_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState* LocalTrustedVaultPerUser::unsafe_arena_release_degraded_recoverability_state() {
  // @@protoc_insertion_point(field_release:sync_pb.LocalTrustedVaultPerUser.degraded_recoverability_state)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState* temp = degraded_recoverability_state_;
  degraded_recoverability_state_ = nullptr;
  return temp;
}
inline ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState* LocalTrustedVaultPerUser::_internal_mutable_degraded_recoverability_state() {
  _has_bits_[0] |= 0x00000004u;
  if (degraded_recoverability_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::LocalTrustedVaultDegradedRecoverabilityState>(GetArenaForAllocation());
    degraded_recoverability_state_ = p;
  }
  return degraded_recoverability_state_;
}
inline ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState* LocalTrustedVaultPerUser::mutable_degraded_recoverability_state() {
  ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState* _msg = _internal_mutable_degraded_recoverability_state();
  // @@protoc_insertion_point(field_mutable:sync_pb.LocalTrustedVaultPerUser.degraded_recoverability_state)
  return _msg;
}
inline void LocalTrustedVaultPerUser::set_allocated_degraded_recoverability_state(::sync_pb::LocalTrustedVaultDegradedRecoverabilityState* degraded_recoverability_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete degraded_recoverability_state_;
  }
  if (degraded_recoverability_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(degraded_recoverability_state);
    if (message_arena != submessage_arena) {
      degraded_recoverability_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, degraded_recoverability_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  degraded_recoverability_state_ = degraded_recoverability_state;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.LocalTrustedVaultPerUser.degraded_recoverability_state)
}

// -------------------------------------------------------------------

// LocalTrustedVault

// repeated .sync_pb.LocalTrustedVaultPerUser user = 1;
inline int LocalTrustedVault::_internal_user_size() const {
  return user_.size();
}
inline int LocalTrustedVault::user_size() const {
  return _internal_user_size();
}
inline void LocalTrustedVault::clear_user() {
  user_.Clear();
}
inline ::sync_pb::LocalTrustedVaultPerUser* LocalTrustedVault::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.LocalTrustedVault.user)
  return user_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LocalTrustedVaultPerUser >*
LocalTrustedVault::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.LocalTrustedVault.user)
  return &user_;
}
inline const ::sync_pb::LocalTrustedVaultPerUser& LocalTrustedVault::_internal_user(int index) const {
  return user_.Get(index);
}
inline const ::sync_pb::LocalTrustedVaultPerUser& LocalTrustedVault::user(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalTrustedVault.user)
  return _internal_user(index);
}
inline ::sync_pb::LocalTrustedVaultPerUser* LocalTrustedVault::_internal_add_user() {
  return user_.Add();
}
inline ::sync_pb::LocalTrustedVaultPerUser* LocalTrustedVault::add_user() {
  ::sync_pb::LocalTrustedVaultPerUser* _add = _internal_add_user();
  // @@protoc_insertion_point(field_add:sync_pb.LocalTrustedVault.user)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::LocalTrustedVaultPerUser >&
LocalTrustedVault::user() const {
  // @@protoc_insertion_point(field_list:sync_pb.LocalTrustedVault.user)
  return user_;
}

// optional int32 data_version = 2;
inline bool LocalTrustedVault::_internal_has_data_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LocalTrustedVault::has_data_version() const {
  return _internal_has_data_version();
}
inline void LocalTrustedVault::clear_data_version() {
  data_version_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t LocalTrustedVault::_internal_data_version() const {
  return data_version_;
}
inline int32_t LocalTrustedVault::data_version() const {
  // @@protoc_insertion_point(field_get:sync_pb.LocalTrustedVault.data_version)
  return _internal_data_version();
}
inline void LocalTrustedVault::_internal_set_data_version(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  data_version_ = value;
}
inline void LocalTrustedVault::set_data_version(int32_t value) {
  _internal_set_data_version(value);
  // @@protoc_insertion_point(field_set:sync_pb.LocalTrustedVault.data_version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2flocal_5ftrusted_5fvault_2eproto
