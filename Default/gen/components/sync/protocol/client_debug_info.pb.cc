// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/client_debug_info.proto

#include "components/sync/protocol/client_debug_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR TypeHint::TypeHint(
    ::_pbi::ConstantInitialized)
  : data_type_id_(0)
  , has_valid_hint_(false){}
struct TypeHintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeHintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeHintDefaultTypeInternal() {}
  union {
    TypeHint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeHintDefaultTypeInternal _TypeHint_default_instance_;
PROTOBUF_CONSTEXPR SyncCycleCompletedEventInfo::SyncCycleCompletedEventInfo(
    ::_pbi::ConstantInitialized)
  : caller_info_(nullptr)
  , num_encryption_conflicts_(0)
  , num_hierarchy_conflicts_(0)
  , num_simple_conflicts_(0)
  , num_server_conflicts_(0)
  , num_updates_downloaded_(0)
  , num_reflected_updates_downloaded_(0)
  , get_updates_origin_(0)
{}
struct SyncCycleCompletedEventInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncCycleCompletedEventInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncCycleCompletedEventInfoDefaultTypeInternal() {}
  union {
    SyncCycleCompletedEventInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncCycleCompletedEventInfoDefaultTypeInternal _SyncCycleCompletedEventInfo_default_instance_;
PROTOBUF_CONSTEXPR DebugEventInfo::DebugEventInfo(
    ::_pbi::ConstantInitialized)
  : datatypes_notified_from_server_()
  , sync_cycle_completed_event_info_(nullptr)
  , nudging_datatype_(0)
  , singleton_event_(1)
{}
struct DebugEventInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugEventInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugEventInfoDefaultTypeInternal() {}
  union {
    DebugEventInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugEventInfoDefaultTypeInternal _DebugEventInfo_default_instance_;
PROTOBUF_CONSTEXPR DebugInfo::DebugInfo(
    ::_pbi::ConstantInitialized)
  : events_()
  , cryptographer_ready_(false)
  , cryptographer_has_pending_keys_(false)
  , events_dropped_(false){}
struct DebugInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugInfoDefaultTypeInternal() {}
  union {
    DebugInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugInfoDefaultTypeInternal _DebugInfo_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class TypeHint::_Internal {
 public:
  using HasBits = decltype(std::declval<TypeHint>()._has_bits_);
  static void set_has_data_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_valid_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TypeHint::TypeHint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.TypeHint)
}
TypeHint::TypeHint(const TypeHint& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&data_type_id_, &from.data_type_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_valid_hint_) -
    reinterpret_cast<char*>(&data_type_id_)) + sizeof(has_valid_hint_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.TypeHint)
}

inline void TypeHint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_type_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_valid_hint_) -
    reinterpret_cast<char*>(&data_type_id_)) + sizeof(has_valid_hint_));
}

TypeHint::~TypeHint() {
  // @@protoc_insertion_point(destructor:sync_pb.TypeHint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TypeHint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TypeHint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TypeHint::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.TypeHint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&data_type_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_valid_hint_) -
        reinterpret_cast<char*>(&data_type_id_)) + sizeof(has_valid_hint_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TypeHint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 data_type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_data_type_id(&has_bits);
          data_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_valid_hint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_has_valid_hint(&has_bits);
          has_valid_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypeHint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.TypeHint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 data_type_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_data_type_id(), target);
  }

  // optional bool has_valid_hint = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_has_valid_hint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.TypeHint)
  return target;
}

size_t TypeHint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.TypeHint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 data_type_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_type_id());
    }

    // optional bool has_valid_hint = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TypeHint::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TypeHint*>(
      &from));
}

void TypeHint::MergeFrom(const TypeHint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.TypeHint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data_type_id_ = from.data_type_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      has_valid_hint_ = from.has_valid_hint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TypeHint::CopyFrom(const TypeHint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.TypeHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeHint::IsInitialized() const {
  return true;
}

void TypeHint::InternalSwap(TypeHint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TypeHint, has_valid_hint_)
      + sizeof(TypeHint::has_valid_hint_)
      - PROTOBUF_FIELD_OFFSET(TypeHint, data_type_id_)>(
          reinterpret_cast<char*>(&data_type_id_),
          reinterpret_cast<char*>(&other->data_type_id_));
}

std::string TypeHint::GetTypeName() const {
  return "sync_pb.TypeHint";
}


// ===================================================================

class SyncCycleCompletedEventInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncCycleCompletedEventInfo>()._has_bits_);
  static void set_has_num_encryption_conflicts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_hierarchy_conflicts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_simple_conflicts(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_server_conflicts(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_updates_downloaded(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_reflected_updates_downloaded(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::sync_pb::GetUpdatesCallerInfo& caller_info(const SyncCycleCompletedEventInfo* msg);
  static void set_has_caller_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_get_updates_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::sync_pb::GetUpdatesCallerInfo&
SyncCycleCompletedEventInfo::_Internal::caller_info(const SyncCycleCompletedEventInfo* msg) {
  return *msg->caller_info_;
}
void SyncCycleCompletedEventInfo::clear_caller_info() {
  if (caller_info_ != nullptr) caller_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SyncCycleCompletedEventInfo::SyncCycleCompletedEventInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SyncCycleCompletedEventInfo)
}
SyncCycleCompletedEventInfo::SyncCycleCompletedEventInfo(const SyncCycleCompletedEventInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_caller_info()) {
    caller_info_ = new ::sync_pb::GetUpdatesCallerInfo(*from.caller_info_);
  } else {
    caller_info_ = nullptr;
  }
  ::memcpy(&num_encryption_conflicts_, &from.num_encryption_conflicts_,
    static_cast<size_t>(reinterpret_cast<char*>(&get_updates_origin_) -
    reinterpret_cast<char*>(&num_encryption_conflicts_)) + sizeof(get_updates_origin_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.SyncCycleCompletedEventInfo)
}

inline void SyncCycleCompletedEventInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&caller_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&get_updates_origin_) -
    reinterpret_cast<char*>(&caller_info_)) + sizeof(get_updates_origin_));
}

SyncCycleCompletedEventInfo::~SyncCycleCompletedEventInfo() {
  // @@protoc_insertion_point(destructor:sync_pb.SyncCycleCompletedEventInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncCycleCompletedEventInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete caller_info_;
}

void SyncCycleCompletedEventInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncCycleCompletedEventInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SyncCycleCompletedEventInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(caller_info_ != nullptr);
    caller_info_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&num_encryption_conflicts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&get_updates_origin_) -
        reinterpret_cast<char*>(&num_encryption_conflicts_)) + sizeof(get_updates_origin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SyncCycleCompletedEventInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 num_encryption_conflicts = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_encryption_conflicts(&has_bits);
          num_encryption_conflicts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_hierarchy_conflicts = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_num_hierarchy_conflicts(&has_bits);
          num_hierarchy_conflicts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_simple_conflicts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_num_simple_conflicts(&has_bits);
          num_simple_conflicts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_server_conflicts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_num_server_conflicts(&has_bits);
          num_server_conflicts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_updates_downloaded = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_num_updates_downloaded(&has_bits);
          num_updates_downloaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_reflected_updates_downloaded = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_num_reflected_updates_downloaded(&has_bits);
          num_reflected_updates_downloaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_caller_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SyncEnums_GetUpdatesOrigin_IsValid(val))) {
            _internal_set_get_updates_origin(static_cast<::sync_pb::SyncEnums_GetUpdatesOrigin>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncCycleCompletedEventInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SyncCycleCompletedEventInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_encryption_conflicts = 4 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_encryption_conflicts(), target);
  }

  // optional int32 num_hierarchy_conflicts = 5 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_num_hierarchy_conflicts(), target);
  }

  // optional int32 num_simple_conflicts = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_num_simple_conflicts(), target);
  }

  // optional int32 num_server_conflicts = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_num_server_conflicts(), target);
  }

  // optional int32 num_updates_downloaded = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_num_updates_downloaded(), target);
  }

  // optional int32 num_reflected_updates_downloaded = 9 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_num_reflected_updates_downloaded(), target);
  }

  // optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::caller_info(this),
        _Internal::caller_info(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_get_updates_origin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SyncCycleCompletedEventInfo)
  return target;
}

size_t SyncCycleCompletedEventInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SyncCycleCompletedEventInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *caller_info_);
    }

    // optional int32 num_encryption_conflicts = 4 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_encryption_conflicts());
    }

    // optional int32 num_hierarchy_conflicts = 5 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_hierarchy_conflicts());
    }

    // optional int32 num_simple_conflicts = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_simple_conflicts());
    }

    // optional int32 num_server_conflicts = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_server_conflicts());
    }

    // optional int32 num_updates_downloaded = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_updates_downloaded());
    }

    // optional int32 num_reflected_updates_downloaded = 9 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_reflected_updates_downloaded());
    }

    // optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_get_updates_origin());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncCycleCompletedEventInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SyncCycleCompletedEventInfo*>(
      &from));
}

void SyncCycleCompletedEventInfo::MergeFrom(const SyncCycleCompletedEventInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SyncCycleCompletedEventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_caller_info()->::sync_pb::GetUpdatesCallerInfo::MergeFrom(from._internal_caller_info());
    }
    if (cached_has_bits & 0x00000002u) {
      num_encryption_conflicts_ = from.num_encryption_conflicts_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_hierarchy_conflicts_ = from.num_hierarchy_conflicts_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_simple_conflicts_ = from.num_simple_conflicts_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_server_conflicts_ = from.num_server_conflicts_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_updates_downloaded_ = from.num_updates_downloaded_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_reflected_updates_downloaded_ = from.num_reflected_updates_downloaded_;
    }
    if (cached_has_bits & 0x00000080u) {
      get_updates_origin_ = from.get_updates_origin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SyncCycleCompletedEventInfo::CopyFrom(const SyncCycleCompletedEventInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SyncCycleCompletedEventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncCycleCompletedEventInfo::IsInitialized() const {
  if (_internal_has_caller_info()) {
    if (!caller_info_->IsInitialized()) return false;
  }
  return true;
}

void SyncCycleCompletedEventInfo::InternalSwap(SyncCycleCompletedEventInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncCycleCompletedEventInfo, get_updates_origin_)
      + sizeof(SyncCycleCompletedEventInfo::get_updates_origin_)
      - PROTOBUF_FIELD_OFFSET(SyncCycleCompletedEventInfo, caller_info_)>(
          reinterpret_cast<char*>(&caller_info_),
          reinterpret_cast<char*>(&other->caller_info_));
}

std::string SyncCycleCompletedEventInfo::GetTypeName() const {
  return "sync_pb.SyncCycleCompletedEventInfo";
}


// ===================================================================

class DebugEventInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugEventInfo>()._has_bits_);
  static void set_has_singleton_event(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sync_pb::SyncCycleCompletedEventInfo& sync_cycle_completed_event_info(const DebugEventInfo* msg);
  static void set_has_sync_cycle_completed_event_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nudging_datatype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sync_pb::SyncCycleCompletedEventInfo&
DebugEventInfo::_Internal::sync_cycle_completed_event_info(const DebugEventInfo* msg) {
  return *msg->sync_cycle_completed_event_info_;
}
DebugEventInfo::DebugEventInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  datatypes_notified_from_server_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.DebugEventInfo)
}
DebugEventInfo::DebugEventInfo(const DebugEventInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      datatypes_notified_from_server_(from.datatypes_notified_from_server_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_sync_cycle_completed_event_info()) {
    sync_cycle_completed_event_info_ = new ::sync_pb::SyncCycleCompletedEventInfo(*from.sync_cycle_completed_event_info_);
  } else {
    sync_cycle_completed_event_info_ = nullptr;
  }
  ::memcpy(&nudging_datatype_, &from.nudging_datatype_,
    static_cast<size_t>(reinterpret_cast<char*>(&singleton_event_) -
    reinterpret_cast<char*>(&nudging_datatype_)) + sizeof(singleton_event_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.DebugEventInfo)
}

inline void DebugEventInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sync_cycle_completed_event_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nudging_datatype_) -
    reinterpret_cast<char*>(&sync_cycle_completed_event_info_)) + sizeof(nudging_datatype_));
singleton_event_ = 1;
}

DebugEventInfo::~DebugEventInfo() {
  // @@protoc_insertion_point(destructor:sync_pb.DebugEventInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugEventInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sync_cycle_completed_event_info_;
}

void DebugEventInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DebugEventInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.DebugEventInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datatypes_notified_from_server_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sync_cycle_completed_event_info_ != nullptr);
    sync_cycle_completed_event_info_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    nudging_datatype_ = 0;
    singleton_event_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DebugEventInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.SyncEnums.SingletonDebugEventType singleton_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SyncEnums_SingletonDebugEventType_IsValid(val))) {
            _internal_set_singleton_event(static_cast<::sync_pb::SyncEnums_SingletonDebugEventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.SyncCycleCompletedEventInfo sync_cycle_completed_event_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync_cycle_completed_event_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 nudging_datatype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_nudging_datatype(&has_bits);
          nudging_datatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 datatypes_notified_from_server = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_datatypes_notified_from_server(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_datatypes_notified_from_server(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugEventInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.DebugEventInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.SyncEnums.SingletonDebugEventType singleton_event = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_singleton_event(), target);
  }

  // optional .sync_pb.SyncCycleCompletedEventInfo sync_cycle_completed_event_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sync_cycle_completed_event_info(this),
        _Internal::sync_cycle_completed_event_info(this).GetCachedSize(), target, stream);
  }

  // optional int32 nudging_datatype = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_nudging_datatype(), target);
  }

  // repeated int32 datatypes_notified_from_server = 4;
  for (int i = 0, n = this->_internal_datatypes_notified_from_server_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_datatypes_notified_from_server(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.DebugEventInfo)
  return target;
}

size_t DebugEventInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.DebugEventInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 datatypes_notified_from_server = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->datatypes_notified_from_server_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_datatypes_notified_from_server_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .sync_pb.SyncCycleCompletedEventInfo sync_cycle_completed_event_info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sync_cycle_completed_event_info_);
    }

    // optional int32 nudging_datatype = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nudging_datatype());
    }

    // optional .sync_pb.SyncEnums.SingletonDebugEventType singleton_event = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_singleton_event());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugEventInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DebugEventInfo*>(
      &from));
}

void DebugEventInfo::MergeFrom(const DebugEventInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.DebugEventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  datatypes_notified_from_server_.MergeFrom(from.datatypes_notified_from_server_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sync_cycle_completed_event_info()->::sync_pb::SyncCycleCompletedEventInfo::MergeFrom(from._internal_sync_cycle_completed_event_info());
    }
    if (cached_has_bits & 0x00000002u) {
      nudging_datatype_ = from.nudging_datatype_;
    }
    if (cached_has_bits & 0x00000004u) {
      singleton_event_ = from.singleton_event_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DebugEventInfo::CopyFrom(const DebugEventInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.DebugEventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugEventInfo::IsInitialized() const {
  if (_internal_has_sync_cycle_completed_event_info()) {
    if (!sync_cycle_completed_event_info_->IsInitialized()) return false;
  }
  return true;
}

void DebugEventInfo::InternalSwap(DebugEventInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datatypes_notified_from_server_.InternalSwap(&other->datatypes_notified_from_server_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugEventInfo, nudging_datatype_)
      + sizeof(DebugEventInfo::nudging_datatype_)
      - PROTOBUF_FIELD_OFFSET(DebugEventInfo, sync_cycle_completed_event_info_)>(
          reinterpret_cast<char*>(&sync_cycle_completed_event_info_),
          reinterpret_cast<char*>(&other->sync_cycle_completed_event_info_));
  swap(singleton_event_, other->singleton_event_);
}

std::string DebugEventInfo::GetTypeName() const {
  return "sync_pb.DebugEventInfo";
}


// ===================================================================

class DebugInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugInfo>()._has_bits_);
  static void set_has_cryptographer_ready(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cryptographer_has_pending_keys(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_events_dropped(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DebugInfo::DebugInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  events_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.DebugInfo)
}
DebugInfo::DebugInfo(const DebugInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&cryptographer_ready_, &from.cryptographer_ready_,
    static_cast<size_t>(reinterpret_cast<char*>(&events_dropped_) -
    reinterpret_cast<char*>(&cryptographer_ready_)) + sizeof(events_dropped_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.DebugInfo)
}

inline void DebugInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cryptographer_ready_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&events_dropped_) -
    reinterpret_cast<char*>(&cryptographer_ready_)) + sizeof(events_dropped_));
}

DebugInfo::~DebugInfo() {
  // @@protoc_insertion_point(destructor:sync_pb.DebugInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DebugInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.DebugInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  ::memset(&cryptographer_ready_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&events_dropped_) -
      reinterpret_cast<char*>(&cryptographer_ready_)) + sizeof(events_dropped_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DebugInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sync_pb.DebugEventInfo events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool cryptographer_ready = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cryptographer_ready(&has_bits);
          cryptographer_ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cryptographer_has_pending_keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_cryptographer_has_pending_keys(&has_bits);
          cryptographer_has_pending_keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool events_dropped = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_events_dropped(&has_bits);
          events_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.DebugInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sync_pb.DebugEventInfo events = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool cryptographer_ready = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_cryptographer_ready(), target);
  }

  // optional bool cryptographer_has_pending_keys = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_cryptographer_has_pending_keys(), target);
  }

  // optional bool events_dropped = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_events_dropped(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.DebugInfo)
  return target;
}

size_t DebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.DebugInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.DebugEventInfo events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool cryptographer_ready = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool cryptographer_has_pending_keys = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool events_dropped = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DebugInfo*>(
      &from));
}

void DebugInfo::MergeFrom(const DebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.DebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      cryptographer_ready_ = from.cryptographer_ready_;
    }
    if (cached_has_bits & 0x00000002u) {
      cryptographer_has_pending_keys_ = from.cryptographer_has_pending_keys_;
    }
    if (cached_has_bits & 0x00000004u) {
      events_dropped_ = from.events_dropped_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DebugInfo::CopyFrom(const DebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.DebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugInfo::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(events_))
    return false;
  return true;
}

void DebugInfo::InternalSwap(DebugInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  events_.InternalSwap(&other->events_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugInfo, events_dropped_)
      + sizeof(DebugInfo::events_dropped_)
      - PROTOBUF_FIELD_OFFSET(DebugInfo, cryptographer_ready_)>(
          reinterpret_cast<char*>(&cryptographer_ready_),
          reinterpret_cast<char*>(&other->cryptographer_ready_));
}

std::string DebugInfo::GetTypeName() const {
  return "sync_pb.DebugInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::TypeHint*
Arena::CreateMaybeMessage< ::sync_pb::TypeHint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::TypeHint >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SyncCycleCompletedEventInfo*
Arena::CreateMaybeMessage< ::sync_pb::SyncCycleCompletedEventInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SyncCycleCompletedEventInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::DebugEventInfo*
Arena::CreateMaybeMessage< ::sync_pb::DebugEventInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::DebugEventInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::DebugInfo*
Arena::CreateMaybeMessage< ::sync_pb::DebugInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::DebugInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
