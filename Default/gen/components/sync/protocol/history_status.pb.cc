// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/history_status.proto

#include "components/sync/protocol/history_status.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR HistoryStatusRequest::HistoryStatusRequest(
    ::_pbi::ConstantInitialized){}
struct HistoryStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistoryStatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistoryStatusRequestDefaultTypeInternal() {}
  union {
    HistoryStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistoryStatusRequestDefaultTypeInternal _HistoryStatusRequest_default_instance_;
PROTOBUF_CONSTEXPR HistoryStatusResponse::HistoryStatusResponse(
    ::_pbi::ConstantInitialized)
  : has_derived_data_(false)
  , min_poll_interval_seconds_(3600){}
struct HistoryStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistoryStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistoryStatusResponseDefaultTypeInternal() {}
  union {
    HistoryStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistoryStatusResponseDefaultTypeInternal _HistoryStatusResponse_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class HistoryStatusRequest::_Internal {
 public:
};

HistoryStatusRequest::HistoryStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.HistoryStatusRequest)
}
HistoryStatusRequest::HistoryStatusRequest(const HistoryStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.HistoryStatusRequest)
}

inline void HistoryStatusRequest::SharedCtor() {
}

HistoryStatusRequest::~HistoryStatusRequest() {
  // @@protoc_insertion_point(destructor:sync_pb.HistoryStatusRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HistoryStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HistoryStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HistoryStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.HistoryStatusRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* HistoryStatusRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HistoryStatusRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.HistoryStatusRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.HistoryStatusRequest)
  return target;
}

size_t HistoryStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.HistoryStatusRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoryStatusRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HistoryStatusRequest*>(
      &from));
}

void HistoryStatusRequest::MergeFrom(const HistoryStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.HistoryStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HistoryStatusRequest::CopyFrom(const HistoryStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.HistoryStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryStatusRequest::IsInitialized() const {
  return true;
}

void HistoryStatusRequest::InternalSwap(HistoryStatusRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string HistoryStatusRequest::GetTypeName() const {
  return "sync_pb.HistoryStatusRequest";
}


// ===================================================================

class HistoryStatusResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<HistoryStatusResponse>()._has_bits_);
  static void set_has_min_poll_interval_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_has_derived_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HistoryStatusResponse::HistoryStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.HistoryStatusResponse)
}
HistoryStatusResponse::HistoryStatusResponse(const HistoryStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&has_derived_data_, &from.has_derived_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_poll_interval_seconds_) -
    reinterpret_cast<char*>(&has_derived_data_)) + sizeof(min_poll_interval_seconds_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.HistoryStatusResponse)
}

inline void HistoryStatusResponse::SharedCtor() {
has_derived_data_ = false;
min_poll_interval_seconds_ = 3600;
}

HistoryStatusResponse::~HistoryStatusResponse() {
  // @@protoc_insertion_point(destructor:sync_pb.HistoryStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HistoryStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HistoryStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HistoryStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.HistoryStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    has_derived_data_ = false;
    min_poll_interval_seconds_ = 3600;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HistoryStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 min_poll_interval_seconds = 1 [default = 3600];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_min_poll_interval_seconds(&has_bits);
          min_poll_interval_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_derived_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_has_derived_data(&has_bits);
          has_derived_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HistoryStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.HistoryStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 min_poll_interval_seconds = 1 [default = 3600];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_min_poll_interval_seconds(), target);
  }

  // optional bool has_derived_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_has_derived_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.HistoryStatusResponse)
  return target;
}

size_t HistoryStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.HistoryStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool has_derived_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 min_poll_interval_seconds = 1 [default = 3600];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_min_poll_interval_seconds());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoryStatusResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HistoryStatusResponse*>(
      &from));
}

void HistoryStatusResponse::MergeFrom(const HistoryStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.HistoryStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      has_derived_data_ = from.has_derived_data_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_poll_interval_seconds_ = from.min_poll_interval_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HistoryStatusResponse::CopyFrom(const HistoryStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.HistoryStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryStatusResponse::IsInitialized() const {
  return true;
}

void HistoryStatusResponse::InternalSwap(HistoryStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(has_derived_data_, other->has_derived_data_);
  swap(min_poll_interval_seconds_, other->min_poll_interval_seconds_);
}

std::string HistoryStatusResponse::GetTypeName() const {
  return "sync_pb.HistoryStatusResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::HistoryStatusRequest*
Arena::CreateMaybeMessage< ::sync_pb::HistoryStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::HistoryStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::HistoryStatusResponse*
Arena::CreateMaybeMessage< ::sync_pb::HistoryStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::HistoryStatusResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
