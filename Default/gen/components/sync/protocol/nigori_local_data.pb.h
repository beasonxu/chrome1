// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/nigori_local_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fnigori_5flocal_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fnigori_5flocal_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "components/sync/protocol/encryption.pb.h"
#include "components/sync/protocol/entity_metadata.pb.h"
#include "components/sync/protocol/model_type_state.pb.h"
#include "components/sync/protocol/nigori_specifics.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fnigori_5flocal_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fnigori_5flocal_5fdata_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class CryptographerData;
struct CryptographerDataDefaultTypeInternal;
extern CryptographerDataDefaultTypeInternal _CryptographerData_default_instance_;
class CustomPassphraseKeyDerivationParams;
struct CustomPassphraseKeyDerivationParamsDefaultTypeInternal;
extern CustomPassphraseKeyDerivationParamsDefaultTypeInternal _CustomPassphraseKeyDerivationParams_default_instance_;
class NigoriLocalData;
struct NigoriLocalDataDefaultTypeInternal;
extern NigoriLocalDataDefaultTypeInternal _NigoriLocalData_default_instance_;
class NigoriModel;
struct NigoriModelDefaultTypeInternal;
extern NigoriModelDefaultTypeInternal _NigoriModel_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::CryptographerData* Arena::CreateMaybeMessage<::sync_pb::CryptographerData>(Arena*);
template<> ::sync_pb::CustomPassphraseKeyDerivationParams* Arena::CreateMaybeMessage<::sync_pb::CustomPassphraseKeyDerivationParams>(Arena*);
template<> ::sync_pb::NigoriLocalData* Arena::CreateMaybeMessage<::sync_pb::NigoriLocalData>(Arena*);
template<> ::sync_pb::NigoriModel* Arena::CreateMaybeMessage<::sync_pb::NigoriModel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class CryptographerData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.CryptographerData) */ {
 public:
  inline CryptographerData() : CryptographerData(nullptr) {}
  ~CryptographerData() override;
  explicit PROTOBUF_CONSTEXPR CryptographerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CryptographerData(const CryptographerData& from);
  CryptographerData(CryptographerData&& from) noexcept
    : CryptographerData() {
    *this = ::std::move(from);
  }

  inline CryptographerData& operator=(const CryptographerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CryptographerData& operator=(CryptographerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CryptographerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CryptographerData* internal_default_instance() {
    return reinterpret_cast<const CryptographerData*>(
               &_CryptographerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CryptographerData& a, CryptographerData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CryptographerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CryptographerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CryptographerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CryptographerData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CryptographerData& from);
  void MergeFrom(const CryptographerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CryptographerData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.CryptographerData";
  }
  protected:
  explicit CryptographerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultKeyNameFieldNumber = 2,
    kKeyBagFieldNumber = 1,
  };
  // optional string default_key_name = 2;
  bool has_default_key_name() const;
  private:
  bool _internal_has_default_key_name() const;
  public:
  void clear_default_key_name();
  const std::string& default_key_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_key_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_key_name();
  PROTOBUF_NODISCARD std::string* release_default_key_name();
  void set_allocated_default_key_name(std::string* default_key_name);
  private:
  const std::string& _internal_default_key_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_key_name(const std::string& value);
  std::string* _internal_mutable_default_key_name();
  public:

  // optional .sync_pb.NigoriKeyBag key_bag = 1;
  bool has_key_bag() const;
  private:
  bool _internal_has_key_bag() const;
  public:
  void clear_key_bag();
  const ::sync_pb::NigoriKeyBag& key_bag() const;
  PROTOBUF_NODISCARD ::sync_pb::NigoriKeyBag* release_key_bag();
  ::sync_pb::NigoriKeyBag* mutable_key_bag();
  void set_allocated_key_bag(::sync_pb::NigoriKeyBag* key_bag);
  private:
  const ::sync_pb::NigoriKeyBag& _internal_key_bag() const;
  ::sync_pb::NigoriKeyBag* _internal_mutable_key_bag();
  public:
  void unsafe_arena_set_allocated_key_bag(
      ::sync_pb::NigoriKeyBag* key_bag);
  ::sync_pb::NigoriKeyBag* unsafe_arena_release_key_bag();

  // @@protoc_insertion_point(class_scope:sync_pb.CryptographerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_key_name_;
  ::sync_pb::NigoriKeyBag* key_bag_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fnigori_5flocal_5fdata_2eproto;
};
// -------------------------------------------------------------------

class CustomPassphraseKeyDerivationParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.CustomPassphraseKeyDerivationParams) */ {
 public:
  inline CustomPassphraseKeyDerivationParams() : CustomPassphraseKeyDerivationParams(nullptr) {}
  ~CustomPassphraseKeyDerivationParams() override;
  explicit PROTOBUF_CONSTEXPR CustomPassphraseKeyDerivationParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomPassphraseKeyDerivationParams(const CustomPassphraseKeyDerivationParams& from);
  CustomPassphraseKeyDerivationParams(CustomPassphraseKeyDerivationParams&& from) noexcept
    : CustomPassphraseKeyDerivationParams() {
    *this = ::std::move(from);
  }

  inline CustomPassphraseKeyDerivationParams& operator=(const CustomPassphraseKeyDerivationParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomPassphraseKeyDerivationParams& operator=(CustomPassphraseKeyDerivationParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CustomPassphraseKeyDerivationParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomPassphraseKeyDerivationParams* internal_default_instance() {
    return reinterpret_cast<const CustomPassphraseKeyDerivationParams*>(
               &_CustomPassphraseKeyDerivationParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CustomPassphraseKeyDerivationParams& a, CustomPassphraseKeyDerivationParams& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CustomPassphraseKeyDerivationParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomPassphraseKeyDerivationParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomPassphraseKeyDerivationParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomPassphraseKeyDerivationParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CustomPassphraseKeyDerivationParams& from);
  void MergeFrom(const CustomPassphraseKeyDerivationParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CustomPassphraseKeyDerivationParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.CustomPassphraseKeyDerivationParams";
  }
  protected:
  explicit CustomPassphraseKeyDerivationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomPassphraseKeyDerivationSaltFieldNumber = 2,
    kCustomPassphraseKeyDerivationMethodFieldNumber = 1,
  };
  // optional string custom_passphrase_key_derivation_salt = 2;
  bool has_custom_passphrase_key_derivation_salt() const;
  private:
  bool _internal_has_custom_passphrase_key_derivation_salt() const;
  public:
  void clear_custom_passphrase_key_derivation_salt();
  const std::string& custom_passphrase_key_derivation_salt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_passphrase_key_derivation_salt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_passphrase_key_derivation_salt();
  PROTOBUF_NODISCARD std::string* release_custom_passphrase_key_derivation_salt();
  void set_allocated_custom_passphrase_key_derivation_salt(std::string* custom_passphrase_key_derivation_salt);
  private:
  const std::string& _internal_custom_passphrase_key_derivation_salt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_passphrase_key_derivation_salt(const std::string& value);
  std::string* _internal_mutable_custom_passphrase_key_derivation_salt();
  public:

  // optional .sync_pb.NigoriSpecifics.KeyDerivationMethod custom_passphrase_key_derivation_method = 1;
  bool has_custom_passphrase_key_derivation_method() const;
  private:
  bool _internal_has_custom_passphrase_key_derivation_method() const;
  public:
  void clear_custom_passphrase_key_derivation_method();
  ::sync_pb::NigoriSpecifics_KeyDerivationMethod custom_passphrase_key_derivation_method() const;
  void set_custom_passphrase_key_derivation_method(::sync_pb::NigoriSpecifics_KeyDerivationMethod value);
  private:
  ::sync_pb::NigoriSpecifics_KeyDerivationMethod _internal_custom_passphrase_key_derivation_method() const;
  void _internal_set_custom_passphrase_key_derivation_method(::sync_pb::NigoriSpecifics_KeyDerivationMethod value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.CustomPassphraseKeyDerivationParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_passphrase_key_derivation_salt_;
  int custom_passphrase_key_derivation_method_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fnigori_5flocal_5fdata_2eproto;
};
// -------------------------------------------------------------------

class NigoriModel final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.NigoriModel) */ {
 public:
  inline NigoriModel() : NigoriModel(nullptr) {}
  ~NigoriModel() override;
  explicit PROTOBUF_CONSTEXPR NigoriModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NigoriModel(const NigoriModel& from);
  NigoriModel(NigoriModel&& from) noexcept
    : NigoriModel() {
    *this = ::std::move(from);
  }

  inline NigoriModel& operator=(const NigoriModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline NigoriModel& operator=(NigoriModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NigoriModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const NigoriModel* internal_default_instance() {
    return reinterpret_cast<const NigoriModel*>(
               &_NigoriModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NigoriModel& a, NigoriModel& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(NigoriModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NigoriModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NigoriModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NigoriModel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const NigoriModel& from);
  void MergeFrom(const NigoriModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NigoriModel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.NigoriModel";
  }
  protected:
  explicit NigoriModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedTypesSpecificsFieldNumberFieldNumber = 9,
    kKeystoreKeyFieldNumber = 10,
    kCurrentKeystoreKeyNameFieldNumber = 2,
    kLastDefaultTrustedVaultKeyNameFieldNumber = 12,
    kCryptographerDataFieldNumber = 1,
    kPendingKeysFieldNumber = 3,
    kCustomPassphraseKeyDerivationParamsFieldNumber = 7,
    kPendingKeystoreDecryptorTokenFieldNumber = 11,
    kTrustedVaultDebugInfoFieldNumber = 13,
    kKeystoreMigrationTimeFieldNumber = 5,
    kCustomPassphraseTimeFieldNumber = 6,
    kPassphraseTypeFieldNumber = 4,
    kEncryptEverythingFieldNumber = 8,
  };
  // repeated int32 encrypted_types_specifics_field_number = 9;
  int encrypted_types_specifics_field_number_size() const;
  private:
  int _internal_encrypted_types_specifics_field_number_size() const;
  public:
  void clear_encrypted_types_specifics_field_number();
  private:
  int32_t _internal_encrypted_types_specifics_field_number(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_encrypted_types_specifics_field_number() const;
  void _internal_add_encrypted_types_specifics_field_number(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_encrypted_types_specifics_field_number();
  public:
  int32_t encrypted_types_specifics_field_number(int index) const;
  void set_encrypted_types_specifics_field_number(int index, int32_t value);
  void add_encrypted_types_specifics_field_number(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      encrypted_types_specifics_field_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_encrypted_types_specifics_field_number();

  // repeated string keystore_key = 10;
  int keystore_key_size() const;
  private:
  int _internal_keystore_key_size() const;
  public:
  void clear_keystore_key();
  const std::string& keystore_key(int index) const;
  std::string* mutable_keystore_key(int index);
  void set_keystore_key(int index, const std::string& value);
  void set_keystore_key(int index, std::string&& value);
  void set_keystore_key(int index, const char* value);
  void set_keystore_key(int index, const char* value, size_t size);
  std::string* add_keystore_key();
  void add_keystore_key(const std::string& value);
  void add_keystore_key(std::string&& value);
  void add_keystore_key(const char* value);
  void add_keystore_key(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keystore_key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keystore_key();
  private:
  const std::string& _internal_keystore_key(int index) const;
  std::string* _internal_add_keystore_key();
  public:

  // optional string current_keystore_key_name = 2;
  bool has_current_keystore_key_name() const;
  private:
  bool _internal_has_current_keystore_key_name() const;
  public:
  void clear_current_keystore_key_name();
  const std::string& current_keystore_key_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_current_keystore_key_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_current_keystore_key_name();
  PROTOBUF_NODISCARD std::string* release_current_keystore_key_name();
  void set_allocated_current_keystore_key_name(std::string* current_keystore_key_name);
  private:
  const std::string& _internal_current_keystore_key_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_keystore_key_name(const std::string& value);
  std::string* _internal_mutable_current_keystore_key_name();
  public:

  // optional string last_default_trusted_vault_key_name = 12;
  bool has_last_default_trusted_vault_key_name() const;
  private:
  bool _internal_has_last_default_trusted_vault_key_name() const;
  public:
  void clear_last_default_trusted_vault_key_name();
  const std::string& last_default_trusted_vault_key_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_default_trusted_vault_key_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_default_trusted_vault_key_name();
  PROTOBUF_NODISCARD std::string* release_last_default_trusted_vault_key_name();
  void set_allocated_last_default_trusted_vault_key_name(std::string* last_default_trusted_vault_key_name);
  private:
  const std::string& _internal_last_default_trusted_vault_key_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_default_trusted_vault_key_name(const std::string& value);
  std::string* _internal_mutable_last_default_trusted_vault_key_name();
  public:

  // optional .sync_pb.CryptographerData cryptographer_data = 1;
  bool has_cryptographer_data() const;
  private:
  bool _internal_has_cryptographer_data() const;
  public:
  void clear_cryptographer_data();
  const ::sync_pb::CryptographerData& cryptographer_data() const;
  PROTOBUF_NODISCARD ::sync_pb::CryptographerData* release_cryptographer_data();
  ::sync_pb::CryptographerData* mutable_cryptographer_data();
  void set_allocated_cryptographer_data(::sync_pb::CryptographerData* cryptographer_data);
  private:
  const ::sync_pb::CryptographerData& _internal_cryptographer_data() const;
  ::sync_pb::CryptographerData* _internal_mutable_cryptographer_data();
  public:
  void unsafe_arena_set_allocated_cryptographer_data(
      ::sync_pb::CryptographerData* cryptographer_data);
  ::sync_pb::CryptographerData* unsafe_arena_release_cryptographer_data();

  // optional .sync_pb.EncryptedData pending_keys = 3;
  bool has_pending_keys() const;
  private:
  bool _internal_has_pending_keys() const;
  public:
  void clear_pending_keys();
  const ::sync_pb::EncryptedData& pending_keys() const;
  PROTOBUF_NODISCARD ::sync_pb::EncryptedData* release_pending_keys();
  ::sync_pb::EncryptedData* mutable_pending_keys();
  void set_allocated_pending_keys(::sync_pb::EncryptedData* pending_keys);
  private:
  const ::sync_pb::EncryptedData& _internal_pending_keys() const;
  ::sync_pb::EncryptedData* _internal_mutable_pending_keys();
  public:
  void unsafe_arena_set_allocated_pending_keys(
      ::sync_pb::EncryptedData* pending_keys);
  ::sync_pb::EncryptedData* unsafe_arena_release_pending_keys();

  // optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;
  bool has_custom_passphrase_key_derivation_params() const;
  private:
  bool _internal_has_custom_passphrase_key_derivation_params() const;
  public:
  void clear_custom_passphrase_key_derivation_params();
  const ::sync_pb::CustomPassphraseKeyDerivationParams& custom_passphrase_key_derivation_params() const;
  PROTOBUF_NODISCARD ::sync_pb::CustomPassphraseKeyDerivationParams* release_custom_passphrase_key_derivation_params();
  ::sync_pb::CustomPassphraseKeyDerivationParams* mutable_custom_passphrase_key_derivation_params();
  void set_allocated_custom_passphrase_key_derivation_params(::sync_pb::CustomPassphraseKeyDerivationParams* custom_passphrase_key_derivation_params);
  private:
  const ::sync_pb::CustomPassphraseKeyDerivationParams& _internal_custom_passphrase_key_derivation_params() const;
  ::sync_pb::CustomPassphraseKeyDerivationParams* _internal_mutable_custom_passphrase_key_derivation_params();
  public:
  void unsafe_arena_set_allocated_custom_passphrase_key_derivation_params(
      ::sync_pb::CustomPassphraseKeyDerivationParams* custom_passphrase_key_derivation_params);
  ::sync_pb::CustomPassphraseKeyDerivationParams* unsafe_arena_release_custom_passphrase_key_derivation_params();

  // optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;
  bool has_pending_keystore_decryptor_token() const;
  private:
  bool _internal_has_pending_keystore_decryptor_token() const;
  public:
  void clear_pending_keystore_decryptor_token();
  const ::sync_pb::EncryptedData& pending_keystore_decryptor_token() const;
  PROTOBUF_NODISCARD ::sync_pb::EncryptedData* release_pending_keystore_decryptor_token();
  ::sync_pb::EncryptedData* mutable_pending_keystore_decryptor_token();
  void set_allocated_pending_keystore_decryptor_token(::sync_pb::EncryptedData* pending_keystore_decryptor_token);
  private:
  const ::sync_pb::EncryptedData& _internal_pending_keystore_decryptor_token() const;
  ::sync_pb::EncryptedData* _internal_mutable_pending_keystore_decryptor_token();
  public:
  void unsafe_arena_set_allocated_pending_keystore_decryptor_token(
      ::sync_pb::EncryptedData* pending_keystore_decryptor_token);
  ::sync_pb::EncryptedData* unsafe_arena_release_pending_keystore_decryptor_token();

  // optional .sync_pb.NigoriSpecifics.TrustedVaultDebugInfo trusted_vault_debug_info = 13;
  bool has_trusted_vault_debug_info() const;
  private:
  bool _internal_has_trusted_vault_debug_info() const;
  public:
  void clear_trusted_vault_debug_info();
  const ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo& trusted_vault_debug_info() const;
  PROTOBUF_NODISCARD ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo* release_trusted_vault_debug_info();
  ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo* mutable_trusted_vault_debug_info();
  void set_allocated_trusted_vault_debug_info(::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo* trusted_vault_debug_info);
  private:
  const ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo& _internal_trusted_vault_debug_info() const;
  ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo* _internal_mutable_trusted_vault_debug_info();
  public:
  void unsafe_arena_set_allocated_trusted_vault_debug_info(
      ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo* trusted_vault_debug_info);
  ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo* unsafe_arena_release_trusted_vault_debug_info();

  // optional int64 keystore_migration_time = 5;
  bool has_keystore_migration_time() const;
  private:
  bool _internal_has_keystore_migration_time() const;
  public:
  void clear_keystore_migration_time();
  int64_t keystore_migration_time() const;
  void set_keystore_migration_time(int64_t value);
  private:
  int64_t _internal_keystore_migration_time() const;
  void _internal_set_keystore_migration_time(int64_t value);
  public:

  // optional int64 custom_passphrase_time = 6;
  bool has_custom_passphrase_time() const;
  private:
  bool _internal_has_custom_passphrase_time() const;
  public:
  void clear_custom_passphrase_time();
  int64_t custom_passphrase_time() const;
  void set_custom_passphrase_time(int64_t value);
  private:
  int64_t _internal_custom_passphrase_time() const;
  void _internal_set_custom_passphrase_time(int64_t value);
  public:

  // optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];
  bool has_passphrase_type() const;
  private:
  bool _internal_has_passphrase_type() const;
  public:
  void clear_passphrase_type();
  ::sync_pb::NigoriSpecifics_PassphraseType passphrase_type() const;
  void set_passphrase_type(::sync_pb::NigoriSpecifics_PassphraseType value);
  private:
  ::sync_pb::NigoriSpecifics_PassphraseType _internal_passphrase_type() const;
  void _internal_set_passphrase_type(::sync_pb::NigoriSpecifics_PassphraseType value);
  public:

  // optional bool encrypt_everything = 8;
  bool has_encrypt_everything() const;
  private:
  bool _internal_has_encrypt_everything() const;
  public:
  void clear_encrypt_everything();
  bool encrypt_everything() const;
  void set_encrypt_everything(bool value);
  private:
  bool _internal_encrypt_everything() const;
  void _internal_set_encrypt_everything(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.NigoriModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > encrypted_types_specifics_field_number_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keystore_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_keystore_key_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_default_trusted_vault_key_name_;
  ::sync_pb::CryptographerData* cryptographer_data_;
  ::sync_pb::EncryptedData* pending_keys_;
  ::sync_pb::CustomPassphraseKeyDerivationParams* custom_passphrase_key_derivation_params_;
  ::sync_pb::EncryptedData* pending_keystore_decryptor_token_;
  ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo* trusted_vault_debug_info_;
  int64_t keystore_migration_time_;
  int64_t custom_passphrase_time_;
  int passphrase_type_;
  bool encrypt_everything_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fnigori_5flocal_5fdata_2eproto;
};
// -------------------------------------------------------------------

class NigoriLocalData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.NigoriLocalData) */ {
 public:
  inline NigoriLocalData() : NigoriLocalData(nullptr) {}
  ~NigoriLocalData() override;
  explicit PROTOBUF_CONSTEXPR NigoriLocalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NigoriLocalData(const NigoriLocalData& from);
  NigoriLocalData(NigoriLocalData&& from) noexcept
    : NigoriLocalData() {
    *this = ::std::move(from);
  }

  inline NigoriLocalData& operator=(const NigoriLocalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NigoriLocalData& operator=(NigoriLocalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NigoriLocalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const NigoriLocalData* internal_default_instance() {
    return reinterpret_cast<const NigoriLocalData*>(
               &_NigoriLocalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NigoriLocalData& a, NigoriLocalData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(NigoriLocalData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NigoriLocalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NigoriLocalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NigoriLocalData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const NigoriLocalData& from);
  void MergeFrom(const NigoriLocalData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NigoriLocalData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.NigoriLocalData";
  }
  protected:
  explicit NigoriLocalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelTypeStateFieldNumber = 1,
    kEntityMetadataFieldNumber = 2,
    kNigoriModelFieldNumber = 3,
  };
  // optional .sync_pb.ModelTypeState model_type_state = 1;
  bool has_model_type_state() const;
  private:
  bool _internal_has_model_type_state() const;
  public:
  void clear_model_type_state();
  const ::sync_pb::ModelTypeState& model_type_state() const;
  PROTOBUF_NODISCARD ::sync_pb::ModelTypeState* release_model_type_state();
  ::sync_pb::ModelTypeState* mutable_model_type_state();
  void set_allocated_model_type_state(::sync_pb::ModelTypeState* model_type_state);
  private:
  const ::sync_pb::ModelTypeState& _internal_model_type_state() const;
  ::sync_pb::ModelTypeState* _internal_mutable_model_type_state();
  public:
  void unsafe_arena_set_allocated_model_type_state(
      ::sync_pb::ModelTypeState* model_type_state);
  ::sync_pb::ModelTypeState* unsafe_arena_release_model_type_state();

  // optional .sync_pb.EntityMetadata entity_metadata = 2;
  bool has_entity_metadata() const;
  private:
  bool _internal_has_entity_metadata() const;
  public:
  void clear_entity_metadata();
  const ::sync_pb::EntityMetadata& entity_metadata() const;
  PROTOBUF_NODISCARD ::sync_pb::EntityMetadata* release_entity_metadata();
  ::sync_pb::EntityMetadata* mutable_entity_metadata();
  void set_allocated_entity_metadata(::sync_pb::EntityMetadata* entity_metadata);
  private:
  const ::sync_pb::EntityMetadata& _internal_entity_metadata() const;
  ::sync_pb::EntityMetadata* _internal_mutable_entity_metadata();
  public:
  void unsafe_arena_set_allocated_entity_metadata(
      ::sync_pb::EntityMetadata* entity_metadata);
  ::sync_pb::EntityMetadata* unsafe_arena_release_entity_metadata();

  // optional .sync_pb.NigoriModel nigori_model = 3;
  bool has_nigori_model() const;
  private:
  bool _internal_has_nigori_model() const;
  public:
  void clear_nigori_model();
  const ::sync_pb::NigoriModel& nigori_model() const;
  PROTOBUF_NODISCARD ::sync_pb::NigoriModel* release_nigori_model();
  ::sync_pb::NigoriModel* mutable_nigori_model();
  void set_allocated_nigori_model(::sync_pb::NigoriModel* nigori_model);
  private:
  const ::sync_pb::NigoriModel& _internal_nigori_model() const;
  ::sync_pb::NigoriModel* _internal_mutable_nigori_model();
  public:
  void unsafe_arena_set_allocated_nigori_model(
      ::sync_pb::NigoriModel* nigori_model);
  ::sync_pb::NigoriModel* unsafe_arena_release_nigori_model();

  // @@protoc_insertion_point(class_scope:sync_pb.NigoriLocalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sync_pb::ModelTypeState* model_type_state_;
  ::sync_pb::EntityMetadata* entity_metadata_;
  ::sync_pb::NigoriModel* nigori_model_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fnigori_5flocal_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CryptographerData

// optional .sync_pb.NigoriKeyBag key_bag = 1;
inline bool CryptographerData::_internal_has_key_bag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || key_bag_ != nullptr);
  return value;
}
inline bool CryptographerData::has_key_bag() const {
  return _internal_has_key_bag();
}
inline const ::sync_pb::NigoriKeyBag& CryptographerData::_internal_key_bag() const {
  const ::sync_pb::NigoriKeyBag* p = key_bag_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::NigoriKeyBag&>(
      ::sync_pb::_NigoriKeyBag_default_instance_);
}
inline const ::sync_pb::NigoriKeyBag& CryptographerData::key_bag() const {
  // @@protoc_insertion_point(field_get:sync_pb.CryptographerData.key_bag)
  return _internal_key_bag();
}
inline void CryptographerData::unsafe_arena_set_allocated_key_bag(
    ::sync_pb::NigoriKeyBag* key_bag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_bag_);
  }
  key_bag_ = key_bag;
  if (key_bag) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.CryptographerData.key_bag)
}
inline ::sync_pb::NigoriKeyBag* CryptographerData::release_key_bag() {
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::NigoriKeyBag* temp = key_bag_;
  key_bag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::NigoriKeyBag* CryptographerData::unsafe_arena_release_key_bag() {
  // @@protoc_insertion_point(field_release:sync_pb.CryptographerData.key_bag)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::NigoriKeyBag* temp = key_bag_;
  key_bag_ = nullptr;
  return temp;
}
inline ::sync_pb::NigoriKeyBag* CryptographerData::_internal_mutable_key_bag() {
  _has_bits_[0] |= 0x00000002u;
  if (key_bag_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::NigoriKeyBag>(GetArenaForAllocation());
    key_bag_ = p;
  }
  return key_bag_;
}
inline ::sync_pb::NigoriKeyBag* CryptographerData::mutable_key_bag() {
  ::sync_pb::NigoriKeyBag* _msg = _internal_mutable_key_bag();
  // @@protoc_insertion_point(field_mutable:sync_pb.CryptographerData.key_bag)
  return _msg;
}
inline void CryptographerData::set_allocated_key_bag(::sync_pb::NigoriKeyBag* key_bag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_bag_);
  }
  if (key_bag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_bag));
    if (message_arena != submessage_arena) {
      key_bag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_bag, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  key_bag_ = key_bag;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CryptographerData.key_bag)
}

// optional string default_key_name = 2;
inline bool CryptographerData::_internal_has_default_key_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CryptographerData::has_default_key_name() const {
  return _internal_has_default_key_name();
}
inline void CryptographerData::clear_default_key_name() {
  default_key_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CryptographerData::default_key_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.CryptographerData.default_key_name)
  return _internal_default_key_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CryptographerData::set_default_key_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 default_key_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.CryptographerData.default_key_name)
}
inline std::string* CryptographerData::mutable_default_key_name() {
  std::string* _s = _internal_mutable_default_key_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.CryptographerData.default_key_name)
  return _s;
}
inline const std::string& CryptographerData::_internal_default_key_name() const {
  return default_key_name_.Get();
}
inline void CryptographerData::_internal_set_default_key_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  default_key_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CryptographerData::_internal_mutable_default_key_name() {
  _has_bits_[0] |= 0x00000001u;
  return default_key_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CryptographerData::release_default_key_name() {
  // @@protoc_insertion_point(field_release:sync_pb.CryptographerData.default_key_name)
  if (!_internal_has_default_key_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = default_key_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (default_key_name_.IsDefault()) {
    default_key_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CryptographerData::set_allocated_default_key_name(std::string* default_key_name) {
  if (default_key_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  default_key_name_.SetAllocated(default_key_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (default_key_name_.IsDefault()) {
    default_key_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CryptographerData.default_key_name)
}

// -------------------------------------------------------------------

// CustomPassphraseKeyDerivationParams

// optional .sync_pb.NigoriSpecifics.KeyDerivationMethod custom_passphrase_key_derivation_method = 1;
inline bool CustomPassphraseKeyDerivationParams::_internal_has_custom_passphrase_key_derivation_method() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CustomPassphraseKeyDerivationParams::has_custom_passphrase_key_derivation_method() const {
  return _internal_has_custom_passphrase_key_derivation_method();
}
inline void CustomPassphraseKeyDerivationParams::clear_custom_passphrase_key_derivation_method() {
  custom_passphrase_key_derivation_method_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::sync_pb::NigoriSpecifics_KeyDerivationMethod CustomPassphraseKeyDerivationParams::_internal_custom_passphrase_key_derivation_method() const {
  return static_cast< ::sync_pb::NigoriSpecifics_KeyDerivationMethod >(custom_passphrase_key_derivation_method_);
}
inline ::sync_pb::NigoriSpecifics_KeyDerivationMethod CustomPassphraseKeyDerivationParams::custom_passphrase_key_derivation_method() const {
  // @@protoc_insertion_point(field_get:sync_pb.CustomPassphraseKeyDerivationParams.custom_passphrase_key_derivation_method)
  return _internal_custom_passphrase_key_derivation_method();
}
inline void CustomPassphraseKeyDerivationParams::_internal_set_custom_passphrase_key_derivation_method(::sync_pb::NigoriSpecifics_KeyDerivationMethod value) {
  assert(::sync_pb::NigoriSpecifics_KeyDerivationMethod_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  custom_passphrase_key_derivation_method_ = value;
}
inline void CustomPassphraseKeyDerivationParams::set_custom_passphrase_key_derivation_method(::sync_pb::NigoriSpecifics_KeyDerivationMethod value) {
  _internal_set_custom_passphrase_key_derivation_method(value);
  // @@protoc_insertion_point(field_set:sync_pb.CustomPassphraseKeyDerivationParams.custom_passphrase_key_derivation_method)
}

// optional string custom_passphrase_key_derivation_salt = 2;
inline bool CustomPassphraseKeyDerivationParams::_internal_has_custom_passphrase_key_derivation_salt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomPassphraseKeyDerivationParams::has_custom_passphrase_key_derivation_salt() const {
  return _internal_has_custom_passphrase_key_derivation_salt();
}
inline void CustomPassphraseKeyDerivationParams::clear_custom_passphrase_key_derivation_salt() {
  custom_passphrase_key_derivation_salt_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomPassphraseKeyDerivationParams::custom_passphrase_key_derivation_salt() const {
  // @@protoc_insertion_point(field_get:sync_pb.CustomPassphraseKeyDerivationParams.custom_passphrase_key_derivation_salt)
  return _internal_custom_passphrase_key_derivation_salt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomPassphraseKeyDerivationParams::set_custom_passphrase_key_derivation_salt(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 custom_passphrase_key_derivation_salt_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.CustomPassphraseKeyDerivationParams.custom_passphrase_key_derivation_salt)
}
inline std::string* CustomPassphraseKeyDerivationParams::mutable_custom_passphrase_key_derivation_salt() {
  std::string* _s = _internal_mutable_custom_passphrase_key_derivation_salt();
  // @@protoc_insertion_point(field_mutable:sync_pb.CustomPassphraseKeyDerivationParams.custom_passphrase_key_derivation_salt)
  return _s;
}
inline const std::string& CustomPassphraseKeyDerivationParams::_internal_custom_passphrase_key_derivation_salt() const {
  return custom_passphrase_key_derivation_salt_.Get();
}
inline void CustomPassphraseKeyDerivationParams::_internal_set_custom_passphrase_key_derivation_salt(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  custom_passphrase_key_derivation_salt_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomPassphraseKeyDerivationParams::_internal_mutable_custom_passphrase_key_derivation_salt() {
  _has_bits_[0] |= 0x00000001u;
  return custom_passphrase_key_derivation_salt_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomPassphraseKeyDerivationParams::release_custom_passphrase_key_derivation_salt() {
  // @@protoc_insertion_point(field_release:sync_pb.CustomPassphraseKeyDerivationParams.custom_passphrase_key_derivation_salt)
  if (!_internal_has_custom_passphrase_key_derivation_salt()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = custom_passphrase_key_derivation_salt_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (custom_passphrase_key_derivation_salt_.IsDefault()) {
    custom_passphrase_key_derivation_salt_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomPassphraseKeyDerivationParams::set_allocated_custom_passphrase_key_derivation_salt(std::string* custom_passphrase_key_derivation_salt) {
  if (custom_passphrase_key_derivation_salt != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  custom_passphrase_key_derivation_salt_.SetAllocated(custom_passphrase_key_derivation_salt, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (custom_passphrase_key_derivation_salt_.IsDefault()) {
    custom_passphrase_key_derivation_salt_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.CustomPassphraseKeyDerivationParams.custom_passphrase_key_derivation_salt)
}

// -------------------------------------------------------------------

// NigoriModel

// optional .sync_pb.CryptographerData cryptographer_data = 1;
inline bool NigoriModel::_internal_has_cryptographer_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || cryptographer_data_ != nullptr);
  return value;
}
inline bool NigoriModel::has_cryptographer_data() const {
  return _internal_has_cryptographer_data();
}
inline void NigoriModel::clear_cryptographer_data() {
  if (cryptographer_data_ != nullptr) cryptographer_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::CryptographerData& NigoriModel::_internal_cryptographer_data() const {
  const ::sync_pb::CryptographerData* p = cryptographer_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::CryptographerData&>(
      ::sync_pb::_CryptographerData_default_instance_);
}
inline const ::sync_pb::CryptographerData& NigoriModel::cryptographer_data() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriModel.cryptographer_data)
  return _internal_cryptographer_data();
}
inline void NigoriModel::unsafe_arena_set_allocated_cryptographer_data(
    ::sync_pb::CryptographerData* cryptographer_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cryptographer_data_);
  }
  cryptographer_data_ = cryptographer_data;
  if (cryptographer_data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.NigoriModel.cryptographer_data)
}
inline ::sync_pb::CryptographerData* NigoriModel::release_cryptographer_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::CryptographerData* temp = cryptographer_data_;
  cryptographer_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::CryptographerData* NigoriModel::unsafe_arena_release_cryptographer_data() {
  // @@protoc_insertion_point(field_release:sync_pb.NigoriModel.cryptographer_data)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::CryptographerData* temp = cryptographer_data_;
  cryptographer_data_ = nullptr;
  return temp;
}
inline ::sync_pb::CryptographerData* NigoriModel::_internal_mutable_cryptographer_data() {
  _has_bits_[0] |= 0x00000004u;
  if (cryptographer_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::CryptographerData>(GetArenaForAllocation());
    cryptographer_data_ = p;
  }
  return cryptographer_data_;
}
inline ::sync_pb::CryptographerData* NigoriModel::mutable_cryptographer_data() {
  ::sync_pb::CryptographerData* _msg = _internal_mutable_cryptographer_data();
  // @@protoc_insertion_point(field_mutable:sync_pb.NigoriModel.cryptographer_data)
  return _msg;
}
inline void NigoriModel::set_allocated_cryptographer_data(::sync_pb::CryptographerData* cryptographer_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cryptographer_data_;
  }
  if (cryptographer_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cryptographer_data);
    if (message_arena != submessage_arena) {
      cryptographer_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cryptographer_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cryptographer_data_ = cryptographer_data;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriModel.cryptographer_data)
}

// optional string current_keystore_key_name = 2;
inline bool NigoriModel::_internal_has_current_keystore_key_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NigoriModel::has_current_keystore_key_name() const {
  return _internal_has_current_keystore_key_name();
}
inline void NigoriModel::clear_current_keystore_key_name() {
  current_keystore_key_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NigoriModel::current_keystore_key_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriModel.current_keystore_key_name)
  return _internal_current_keystore_key_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NigoriModel::set_current_keystore_key_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 current_keystore_key_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.NigoriModel.current_keystore_key_name)
}
inline std::string* NigoriModel::mutable_current_keystore_key_name() {
  std::string* _s = _internal_mutable_current_keystore_key_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.NigoriModel.current_keystore_key_name)
  return _s;
}
inline const std::string& NigoriModel::_internal_current_keystore_key_name() const {
  return current_keystore_key_name_.Get();
}
inline void NigoriModel::_internal_set_current_keystore_key_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  current_keystore_key_name_.Set(value, GetArenaForAllocation());
}
inline std::string* NigoriModel::_internal_mutable_current_keystore_key_name() {
  _has_bits_[0] |= 0x00000001u;
  return current_keystore_key_name_.Mutable(GetArenaForAllocation());
}
inline std::string* NigoriModel::release_current_keystore_key_name() {
  // @@protoc_insertion_point(field_release:sync_pb.NigoriModel.current_keystore_key_name)
  if (!_internal_has_current_keystore_key_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = current_keystore_key_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (current_keystore_key_name_.IsDefault()) {
    current_keystore_key_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NigoriModel::set_allocated_current_keystore_key_name(std::string* current_keystore_key_name) {
  if (current_keystore_key_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  current_keystore_key_name_.SetAllocated(current_keystore_key_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (current_keystore_key_name_.IsDefault()) {
    current_keystore_key_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriModel.current_keystore_key_name)
}

// optional .sync_pb.EncryptedData pending_keys = 3;
inline bool NigoriModel::_internal_has_pending_keys() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || pending_keys_ != nullptr);
  return value;
}
inline bool NigoriModel::has_pending_keys() const {
  return _internal_has_pending_keys();
}
inline const ::sync_pb::EncryptedData& NigoriModel::_internal_pending_keys() const {
  const ::sync_pb::EncryptedData* p = pending_keys_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::EncryptedData&>(
      ::sync_pb::_EncryptedData_default_instance_);
}
inline const ::sync_pb::EncryptedData& NigoriModel::pending_keys() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriModel.pending_keys)
  return _internal_pending_keys();
}
inline void NigoriModel::unsafe_arena_set_allocated_pending_keys(
    ::sync_pb::EncryptedData* pending_keys) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pending_keys_);
  }
  pending_keys_ = pending_keys;
  if (pending_keys) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.NigoriModel.pending_keys)
}
inline ::sync_pb::EncryptedData* NigoriModel::release_pending_keys() {
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::EncryptedData* temp = pending_keys_;
  pending_keys_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::EncryptedData* NigoriModel::unsafe_arena_release_pending_keys() {
  // @@protoc_insertion_point(field_release:sync_pb.NigoriModel.pending_keys)
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::EncryptedData* temp = pending_keys_;
  pending_keys_ = nullptr;
  return temp;
}
inline ::sync_pb::EncryptedData* NigoriModel::_internal_mutable_pending_keys() {
  _has_bits_[0] |= 0x00000008u;
  if (pending_keys_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::EncryptedData>(GetArenaForAllocation());
    pending_keys_ = p;
  }
  return pending_keys_;
}
inline ::sync_pb::EncryptedData* NigoriModel::mutable_pending_keys() {
  ::sync_pb::EncryptedData* _msg = _internal_mutable_pending_keys();
  // @@protoc_insertion_point(field_mutable:sync_pb.NigoriModel.pending_keys)
  return _msg;
}
inline void NigoriModel::set_allocated_pending_keys(::sync_pb::EncryptedData* pending_keys) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pending_keys_);
  }
  if (pending_keys) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pending_keys));
    if (message_arena != submessage_arena) {
      pending_keys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pending_keys, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  pending_keys_ = pending_keys;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriModel.pending_keys)
}

// optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];
inline bool NigoriModel::_internal_has_passphrase_type() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool NigoriModel::has_passphrase_type() const {
  return _internal_has_passphrase_type();
}
inline void NigoriModel::clear_passphrase_type() {
  passphrase_type_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::sync_pb::NigoriSpecifics_PassphraseType NigoriModel::_internal_passphrase_type() const {
  return static_cast< ::sync_pb::NigoriSpecifics_PassphraseType >(passphrase_type_);
}
inline ::sync_pb::NigoriSpecifics_PassphraseType NigoriModel::passphrase_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriModel.passphrase_type)
  return _internal_passphrase_type();
}
inline void NigoriModel::_internal_set_passphrase_type(::sync_pb::NigoriSpecifics_PassphraseType value) {
  assert(::sync_pb::NigoriSpecifics_PassphraseType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  passphrase_type_ = value;
}
inline void NigoriModel::set_passphrase_type(::sync_pb::NigoriSpecifics_PassphraseType value) {
  _internal_set_passphrase_type(value);
  // @@protoc_insertion_point(field_set:sync_pb.NigoriModel.passphrase_type)
}

// optional int64 keystore_migration_time = 5;
inline bool NigoriModel::_internal_has_keystore_migration_time() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NigoriModel::has_keystore_migration_time() const {
  return _internal_has_keystore_migration_time();
}
inline void NigoriModel::clear_keystore_migration_time() {
  keystore_migration_time_ = int64_t{0};
  _has_bits_[0] &= ~0x00000080u;
}
inline int64_t NigoriModel::_internal_keystore_migration_time() const {
  return keystore_migration_time_;
}
inline int64_t NigoriModel::keystore_migration_time() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriModel.keystore_migration_time)
  return _internal_keystore_migration_time();
}
inline void NigoriModel::_internal_set_keystore_migration_time(int64_t value) {
  _has_bits_[0] |= 0x00000080u;
  keystore_migration_time_ = value;
}
inline void NigoriModel::set_keystore_migration_time(int64_t value) {
  _internal_set_keystore_migration_time(value);
  // @@protoc_insertion_point(field_set:sync_pb.NigoriModel.keystore_migration_time)
}

// optional int64 custom_passphrase_time = 6;
inline bool NigoriModel::_internal_has_custom_passphrase_time() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool NigoriModel::has_custom_passphrase_time() const {
  return _internal_has_custom_passphrase_time();
}
inline void NigoriModel::clear_custom_passphrase_time() {
  custom_passphrase_time_ = int64_t{0};
  _has_bits_[0] &= ~0x00000100u;
}
inline int64_t NigoriModel::_internal_custom_passphrase_time() const {
  return custom_passphrase_time_;
}
inline int64_t NigoriModel::custom_passphrase_time() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriModel.custom_passphrase_time)
  return _internal_custom_passphrase_time();
}
inline void NigoriModel::_internal_set_custom_passphrase_time(int64_t value) {
  _has_bits_[0] |= 0x00000100u;
  custom_passphrase_time_ = value;
}
inline void NigoriModel::set_custom_passphrase_time(int64_t value) {
  _internal_set_custom_passphrase_time(value);
  // @@protoc_insertion_point(field_set:sync_pb.NigoriModel.custom_passphrase_time)
}

// optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;
inline bool NigoriModel::_internal_has_custom_passphrase_key_derivation_params() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || custom_passphrase_key_derivation_params_ != nullptr);
  return value;
}
inline bool NigoriModel::has_custom_passphrase_key_derivation_params() const {
  return _internal_has_custom_passphrase_key_derivation_params();
}
inline void NigoriModel::clear_custom_passphrase_key_derivation_params() {
  if (custom_passphrase_key_derivation_params_ != nullptr) custom_passphrase_key_derivation_params_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::sync_pb::CustomPassphraseKeyDerivationParams& NigoriModel::_internal_custom_passphrase_key_derivation_params() const {
  const ::sync_pb::CustomPassphraseKeyDerivationParams* p = custom_passphrase_key_derivation_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::CustomPassphraseKeyDerivationParams&>(
      ::sync_pb::_CustomPassphraseKeyDerivationParams_default_instance_);
}
inline const ::sync_pb::CustomPassphraseKeyDerivationParams& NigoriModel::custom_passphrase_key_derivation_params() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriModel.custom_passphrase_key_derivation_params)
  return _internal_custom_passphrase_key_derivation_params();
}
inline void NigoriModel::unsafe_arena_set_allocated_custom_passphrase_key_derivation_params(
    ::sync_pb::CustomPassphraseKeyDerivationParams* custom_passphrase_key_derivation_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_passphrase_key_derivation_params_);
  }
  custom_passphrase_key_derivation_params_ = custom_passphrase_key_derivation_params;
  if (custom_passphrase_key_derivation_params) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.NigoriModel.custom_passphrase_key_derivation_params)
}
inline ::sync_pb::CustomPassphraseKeyDerivationParams* NigoriModel::release_custom_passphrase_key_derivation_params() {
  _has_bits_[0] &= ~0x00000010u;
  ::sync_pb::CustomPassphraseKeyDerivationParams* temp = custom_passphrase_key_derivation_params_;
  custom_passphrase_key_derivation_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::CustomPassphraseKeyDerivationParams* NigoriModel::unsafe_arena_release_custom_passphrase_key_derivation_params() {
  // @@protoc_insertion_point(field_release:sync_pb.NigoriModel.custom_passphrase_key_derivation_params)
  _has_bits_[0] &= ~0x00000010u;
  ::sync_pb::CustomPassphraseKeyDerivationParams* temp = custom_passphrase_key_derivation_params_;
  custom_passphrase_key_derivation_params_ = nullptr;
  return temp;
}
inline ::sync_pb::CustomPassphraseKeyDerivationParams* NigoriModel::_internal_mutable_custom_passphrase_key_derivation_params() {
  _has_bits_[0] |= 0x00000010u;
  if (custom_passphrase_key_derivation_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::CustomPassphraseKeyDerivationParams>(GetArenaForAllocation());
    custom_passphrase_key_derivation_params_ = p;
  }
  return custom_passphrase_key_derivation_params_;
}
inline ::sync_pb::CustomPassphraseKeyDerivationParams* NigoriModel::mutable_custom_passphrase_key_derivation_params() {
  ::sync_pb::CustomPassphraseKeyDerivationParams* _msg = _internal_mutable_custom_passphrase_key_derivation_params();
  // @@protoc_insertion_point(field_mutable:sync_pb.NigoriModel.custom_passphrase_key_derivation_params)
  return _msg;
}
inline void NigoriModel::set_allocated_custom_passphrase_key_derivation_params(::sync_pb::CustomPassphraseKeyDerivationParams* custom_passphrase_key_derivation_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete custom_passphrase_key_derivation_params_;
  }
  if (custom_passphrase_key_derivation_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custom_passphrase_key_derivation_params);
    if (message_arena != submessage_arena) {
      custom_passphrase_key_derivation_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_passphrase_key_derivation_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  custom_passphrase_key_derivation_params_ = custom_passphrase_key_derivation_params;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriModel.custom_passphrase_key_derivation_params)
}

// optional bool encrypt_everything = 8;
inline bool NigoriModel::_internal_has_encrypt_everything() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool NigoriModel::has_encrypt_everything() const {
  return _internal_has_encrypt_everything();
}
inline void NigoriModel::clear_encrypt_everything() {
  encrypt_everything_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool NigoriModel::_internal_encrypt_everything() const {
  return encrypt_everything_;
}
inline bool NigoriModel::encrypt_everything() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriModel.encrypt_everything)
  return _internal_encrypt_everything();
}
inline void NigoriModel::_internal_set_encrypt_everything(bool value) {
  _has_bits_[0] |= 0x00000400u;
  encrypt_everything_ = value;
}
inline void NigoriModel::set_encrypt_everything(bool value) {
  _internal_set_encrypt_everything(value);
  // @@protoc_insertion_point(field_set:sync_pb.NigoriModel.encrypt_everything)
}

// repeated int32 encrypted_types_specifics_field_number = 9;
inline int NigoriModel::_internal_encrypted_types_specifics_field_number_size() const {
  return encrypted_types_specifics_field_number_.size();
}
inline int NigoriModel::encrypted_types_specifics_field_number_size() const {
  return _internal_encrypted_types_specifics_field_number_size();
}
inline void NigoriModel::clear_encrypted_types_specifics_field_number() {
  encrypted_types_specifics_field_number_.Clear();
}
inline int32_t NigoriModel::_internal_encrypted_types_specifics_field_number(int index) const {
  return encrypted_types_specifics_field_number_.Get(index);
}
inline int32_t NigoriModel::encrypted_types_specifics_field_number(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriModel.encrypted_types_specifics_field_number)
  return _internal_encrypted_types_specifics_field_number(index);
}
inline void NigoriModel::set_encrypted_types_specifics_field_number(int index, int32_t value) {
  encrypted_types_specifics_field_number_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.NigoriModel.encrypted_types_specifics_field_number)
}
inline void NigoriModel::_internal_add_encrypted_types_specifics_field_number(int32_t value) {
  encrypted_types_specifics_field_number_.Add(value);
}
inline void NigoriModel::add_encrypted_types_specifics_field_number(int32_t value) {
  _internal_add_encrypted_types_specifics_field_number(value);
  // @@protoc_insertion_point(field_add:sync_pb.NigoriModel.encrypted_types_specifics_field_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NigoriModel::_internal_encrypted_types_specifics_field_number() const {
  return encrypted_types_specifics_field_number_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NigoriModel::encrypted_types_specifics_field_number() const {
  // @@protoc_insertion_point(field_list:sync_pb.NigoriModel.encrypted_types_specifics_field_number)
  return _internal_encrypted_types_specifics_field_number();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NigoriModel::_internal_mutable_encrypted_types_specifics_field_number() {
  return &encrypted_types_specifics_field_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NigoriModel::mutable_encrypted_types_specifics_field_number() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.NigoriModel.encrypted_types_specifics_field_number)
  return _internal_mutable_encrypted_types_specifics_field_number();
}

// repeated string keystore_key = 10;
inline int NigoriModel::_internal_keystore_key_size() const {
  return keystore_key_.size();
}
inline int NigoriModel::keystore_key_size() const {
  return _internal_keystore_key_size();
}
inline void NigoriModel::clear_keystore_key() {
  keystore_key_.Clear();
}
inline std::string* NigoriModel::add_keystore_key() {
  std::string* _s = _internal_add_keystore_key();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.NigoriModel.keystore_key)
  return _s;
}
inline const std::string& NigoriModel::_internal_keystore_key(int index) const {
  return keystore_key_.Get(index);
}
inline const std::string& NigoriModel::keystore_key(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriModel.keystore_key)
  return _internal_keystore_key(index);
}
inline std::string* NigoriModel::mutable_keystore_key(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.NigoriModel.keystore_key)
  return keystore_key_.Mutable(index);
}
inline void NigoriModel::set_keystore_key(int index, const std::string& value) {
  keystore_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.NigoriModel.keystore_key)
}
inline void NigoriModel::set_keystore_key(int index, std::string&& value) {
  keystore_key_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.NigoriModel.keystore_key)
}
inline void NigoriModel::set_keystore_key(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keystore_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.NigoriModel.keystore_key)
}
inline void NigoriModel::set_keystore_key(int index, const char* value, size_t size) {
  keystore_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.NigoriModel.keystore_key)
}
inline std::string* NigoriModel::_internal_add_keystore_key() {
  return keystore_key_.Add();
}
inline void NigoriModel::add_keystore_key(const std::string& value) {
  keystore_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.NigoriModel.keystore_key)
}
inline void NigoriModel::add_keystore_key(std::string&& value) {
  keystore_key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.NigoriModel.keystore_key)
}
inline void NigoriModel::add_keystore_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keystore_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.NigoriModel.keystore_key)
}
inline void NigoriModel::add_keystore_key(const char* value, size_t size) {
  keystore_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.NigoriModel.keystore_key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NigoriModel::keystore_key() const {
  // @@protoc_insertion_point(field_list:sync_pb.NigoriModel.keystore_key)
  return keystore_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NigoriModel::mutable_keystore_key() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.NigoriModel.keystore_key)
  return &keystore_key_;
}

// optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;
inline bool NigoriModel::_internal_has_pending_keystore_decryptor_token() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || pending_keystore_decryptor_token_ != nullptr);
  return value;
}
inline bool NigoriModel::has_pending_keystore_decryptor_token() const {
  return _internal_has_pending_keystore_decryptor_token();
}
inline const ::sync_pb::EncryptedData& NigoriModel::_internal_pending_keystore_decryptor_token() const {
  const ::sync_pb::EncryptedData* p = pending_keystore_decryptor_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::EncryptedData&>(
      ::sync_pb::_EncryptedData_default_instance_);
}
inline const ::sync_pb::EncryptedData& NigoriModel::pending_keystore_decryptor_token() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriModel.pending_keystore_decryptor_token)
  return _internal_pending_keystore_decryptor_token();
}
inline void NigoriModel::unsafe_arena_set_allocated_pending_keystore_decryptor_token(
    ::sync_pb::EncryptedData* pending_keystore_decryptor_token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pending_keystore_decryptor_token_);
  }
  pending_keystore_decryptor_token_ = pending_keystore_decryptor_token;
  if (pending_keystore_decryptor_token) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.NigoriModel.pending_keystore_decryptor_token)
}
inline ::sync_pb::EncryptedData* NigoriModel::release_pending_keystore_decryptor_token() {
  _has_bits_[0] &= ~0x00000020u;
  ::sync_pb::EncryptedData* temp = pending_keystore_decryptor_token_;
  pending_keystore_decryptor_token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::EncryptedData* NigoriModel::unsafe_arena_release_pending_keystore_decryptor_token() {
  // @@protoc_insertion_point(field_release:sync_pb.NigoriModel.pending_keystore_decryptor_token)
  _has_bits_[0] &= ~0x00000020u;
  ::sync_pb::EncryptedData* temp = pending_keystore_decryptor_token_;
  pending_keystore_decryptor_token_ = nullptr;
  return temp;
}
inline ::sync_pb::EncryptedData* NigoriModel::_internal_mutable_pending_keystore_decryptor_token() {
  _has_bits_[0] |= 0x00000020u;
  if (pending_keystore_decryptor_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::EncryptedData>(GetArenaForAllocation());
    pending_keystore_decryptor_token_ = p;
  }
  return pending_keystore_decryptor_token_;
}
inline ::sync_pb::EncryptedData* NigoriModel::mutable_pending_keystore_decryptor_token() {
  ::sync_pb::EncryptedData* _msg = _internal_mutable_pending_keystore_decryptor_token();
  // @@protoc_insertion_point(field_mutable:sync_pb.NigoriModel.pending_keystore_decryptor_token)
  return _msg;
}
inline void NigoriModel::set_allocated_pending_keystore_decryptor_token(::sync_pb::EncryptedData* pending_keystore_decryptor_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pending_keystore_decryptor_token_);
  }
  if (pending_keystore_decryptor_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pending_keystore_decryptor_token));
    if (message_arena != submessage_arena) {
      pending_keystore_decryptor_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pending_keystore_decryptor_token, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  pending_keystore_decryptor_token_ = pending_keystore_decryptor_token;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriModel.pending_keystore_decryptor_token)
}

// optional string last_default_trusted_vault_key_name = 12;
inline bool NigoriModel::_internal_has_last_default_trusted_vault_key_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NigoriModel::has_last_default_trusted_vault_key_name() const {
  return _internal_has_last_default_trusted_vault_key_name();
}
inline void NigoriModel::clear_last_default_trusted_vault_key_name() {
  last_default_trusted_vault_key_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NigoriModel::last_default_trusted_vault_key_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriModel.last_default_trusted_vault_key_name)
  return _internal_last_default_trusted_vault_key_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NigoriModel::set_last_default_trusted_vault_key_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 last_default_trusted_vault_key_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.NigoriModel.last_default_trusted_vault_key_name)
}
inline std::string* NigoriModel::mutable_last_default_trusted_vault_key_name() {
  std::string* _s = _internal_mutable_last_default_trusted_vault_key_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.NigoriModel.last_default_trusted_vault_key_name)
  return _s;
}
inline const std::string& NigoriModel::_internal_last_default_trusted_vault_key_name() const {
  return last_default_trusted_vault_key_name_.Get();
}
inline void NigoriModel::_internal_set_last_default_trusted_vault_key_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  last_default_trusted_vault_key_name_.Set(value, GetArenaForAllocation());
}
inline std::string* NigoriModel::_internal_mutable_last_default_trusted_vault_key_name() {
  _has_bits_[0] |= 0x00000002u;
  return last_default_trusted_vault_key_name_.Mutable(GetArenaForAllocation());
}
inline std::string* NigoriModel::release_last_default_trusted_vault_key_name() {
  // @@protoc_insertion_point(field_release:sync_pb.NigoriModel.last_default_trusted_vault_key_name)
  if (!_internal_has_last_default_trusted_vault_key_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = last_default_trusted_vault_key_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_default_trusted_vault_key_name_.IsDefault()) {
    last_default_trusted_vault_key_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NigoriModel::set_allocated_last_default_trusted_vault_key_name(std::string* last_default_trusted_vault_key_name) {
  if (last_default_trusted_vault_key_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  last_default_trusted_vault_key_name_.SetAllocated(last_default_trusted_vault_key_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_default_trusted_vault_key_name_.IsDefault()) {
    last_default_trusted_vault_key_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriModel.last_default_trusted_vault_key_name)
}

// optional .sync_pb.NigoriSpecifics.TrustedVaultDebugInfo trusted_vault_debug_info = 13;
inline bool NigoriModel::_internal_has_trusted_vault_debug_info() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || trusted_vault_debug_info_ != nullptr);
  return value;
}
inline bool NigoriModel::has_trusted_vault_debug_info() const {
  return _internal_has_trusted_vault_debug_info();
}
inline const ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo& NigoriModel::_internal_trusted_vault_debug_info() const {
  const ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo* p = trusted_vault_debug_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo&>(
      ::sync_pb::_NigoriSpecifics_TrustedVaultDebugInfo_default_instance_);
}
inline const ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo& NigoriModel::trusted_vault_debug_info() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriModel.trusted_vault_debug_info)
  return _internal_trusted_vault_debug_info();
}
inline void NigoriModel::unsafe_arena_set_allocated_trusted_vault_debug_info(
    ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo* trusted_vault_debug_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusted_vault_debug_info_);
  }
  trusted_vault_debug_info_ = trusted_vault_debug_info;
  if (trusted_vault_debug_info) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.NigoriModel.trusted_vault_debug_info)
}
inline ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo* NigoriModel::release_trusted_vault_debug_info() {
  _has_bits_[0] &= ~0x00000040u;
  ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo* temp = trusted_vault_debug_info_;
  trusted_vault_debug_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo* NigoriModel::unsafe_arena_release_trusted_vault_debug_info() {
  // @@protoc_insertion_point(field_release:sync_pb.NigoriModel.trusted_vault_debug_info)
  _has_bits_[0] &= ~0x00000040u;
  ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo* temp = trusted_vault_debug_info_;
  trusted_vault_debug_info_ = nullptr;
  return temp;
}
inline ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo* NigoriModel::_internal_mutable_trusted_vault_debug_info() {
  _has_bits_[0] |= 0x00000040u;
  if (trusted_vault_debug_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo>(GetArenaForAllocation());
    trusted_vault_debug_info_ = p;
  }
  return trusted_vault_debug_info_;
}
inline ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo* NigoriModel::mutable_trusted_vault_debug_info() {
  ::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo* _msg = _internal_mutable_trusted_vault_debug_info();
  // @@protoc_insertion_point(field_mutable:sync_pb.NigoriModel.trusted_vault_debug_info)
  return _msg;
}
inline void NigoriModel::set_allocated_trusted_vault_debug_info(::sync_pb::NigoriSpecifics_TrustedVaultDebugInfo* trusted_vault_debug_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusted_vault_debug_info_);
  }
  if (trusted_vault_debug_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusted_vault_debug_info));
    if (message_arena != submessage_arena) {
      trusted_vault_debug_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusted_vault_debug_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  trusted_vault_debug_info_ = trusted_vault_debug_info;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriModel.trusted_vault_debug_info)
}

// -------------------------------------------------------------------

// NigoriLocalData

// optional .sync_pb.ModelTypeState model_type_state = 1;
inline bool NigoriLocalData::_internal_has_model_type_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || model_type_state_ != nullptr);
  return value;
}
inline bool NigoriLocalData::has_model_type_state() const {
  return _internal_has_model_type_state();
}
inline const ::sync_pb::ModelTypeState& NigoriLocalData::_internal_model_type_state() const {
  const ::sync_pb::ModelTypeState* p = model_type_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::ModelTypeState&>(
      ::sync_pb::_ModelTypeState_default_instance_);
}
inline const ::sync_pb::ModelTypeState& NigoriLocalData::model_type_state() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriLocalData.model_type_state)
  return _internal_model_type_state();
}
inline void NigoriLocalData::unsafe_arena_set_allocated_model_type_state(
    ::sync_pb::ModelTypeState* model_type_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_type_state_);
  }
  model_type_state_ = model_type_state;
  if (model_type_state) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.NigoriLocalData.model_type_state)
}
inline ::sync_pb::ModelTypeState* NigoriLocalData::release_model_type_state() {
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::ModelTypeState* temp = model_type_state_;
  model_type_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::ModelTypeState* NigoriLocalData::unsafe_arena_release_model_type_state() {
  // @@protoc_insertion_point(field_release:sync_pb.NigoriLocalData.model_type_state)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::ModelTypeState* temp = model_type_state_;
  model_type_state_ = nullptr;
  return temp;
}
inline ::sync_pb::ModelTypeState* NigoriLocalData::_internal_mutable_model_type_state() {
  _has_bits_[0] |= 0x00000001u;
  if (model_type_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::ModelTypeState>(GetArenaForAllocation());
    model_type_state_ = p;
  }
  return model_type_state_;
}
inline ::sync_pb::ModelTypeState* NigoriLocalData::mutable_model_type_state() {
  ::sync_pb::ModelTypeState* _msg = _internal_mutable_model_type_state();
  // @@protoc_insertion_point(field_mutable:sync_pb.NigoriLocalData.model_type_state)
  return _msg;
}
inline void NigoriLocalData::set_allocated_model_type_state(::sync_pb::ModelTypeState* model_type_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_type_state_);
  }
  if (model_type_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_type_state));
    if (message_arena != submessage_arena) {
      model_type_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_type_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_type_state_ = model_type_state;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriLocalData.model_type_state)
}

// optional .sync_pb.EntityMetadata entity_metadata = 2;
inline bool NigoriLocalData::_internal_has_entity_metadata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || entity_metadata_ != nullptr);
  return value;
}
inline bool NigoriLocalData::has_entity_metadata() const {
  return _internal_has_entity_metadata();
}
inline const ::sync_pb::EntityMetadata& NigoriLocalData::_internal_entity_metadata() const {
  const ::sync_pb::EntityMetadata* p = entity_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::EntityMetadata&>(
      ::sync_pb::_EntityMetadata_default_instance_);
}
inline const ::sync_pb::EntityMetadata& NigoriLocalData::entity_metadata() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriLocalData.entity_metadata)
  return _internal_entity_metadata();
}
inline void NigoriLocalData::unsafe_arena_set_allocated_entity_metadata(
    ::sync_pb::EntityMetadata* entity_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_metadata_);
  }
  entity_metadata_ = entity_metadata;
  if (entity_metadata) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.NigoriLocalData.entity_metadata)
}
inline ::sync_pb::EntityMetadata* NigoriLocalData::release_entity_metadata() {
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::EntityMetadata* temp = entity_metadata_;
  entity_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::EntityMetadata* NigoriLocalData::unsafe_arena_release_entity_metadata() {
  // @@protoc_insertion_point(field_release:sync_pb.NigoriLocalData.entity_metadata)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::EntityMetadata* temp = entity_metadata_;
  entity_metadata_ = nullptr;
  return temp;
}
inline ::sync_pb::EntityMetadata* NigoriLocalData::_internal_mutable_entity_metadata() {
  _has_bits_[0] |= 0x00000002u;
  if (entity_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::EntityMetadata>(GetArenaForAllocation());
    entity_metadata_ = p;
  }
  return entity_metadata_;
}
inline ::sync_pb::EntityMetadata* NigoriLocalData::mutable_entity_metadata() {
  ::sync_pb::EntityMetadata* _msg = _internal_mutable_entity_metadata();
  // @@protoc_insertion_point(field_mutable:sync_pb.NigoriLocalData.entity_metadata)
  return _msg;
}
inline void NigoriLocalData::set_allocated_entity_metadata(::sync_pb::EntityMetadata* entity_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_metadata_);
  }
  if (entity_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_metadata));
    if (message_arena != submessage_arena) {
      entity_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  entity_metadata_ = entity_metadata;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriLocalData.entity_metadata)
}

// optional .sync_pb.NigoriModel nigori_model = 3;
inline bool NigoriLocalData::_internal_has_nigori_model() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || nigori_model_ != nullptr);
  return value;
}
inline bool NigoriLocalData::has_nigori_model() const {
  return _internal_has_nigori_model();
}
inline void NigoriLocalData::clear_nigori_model() {
  if (nigori_model_ != nullptr) nigori_model_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::NigoriModel& NigoriLocalData::_internal_nigori_model() const {
  const ::sync_pb::NigoriModel* p = nigori_model_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::NigoriModel&>(
      ::sync_pb::_NigoriModel_default_instance_);
}
inline const ::sync_pb::NigoriModel& NigoriLocalData::nigori_model() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriLocalData.nigori_model)
  return _internal_nigori_model();
}
inline void NigoriLocalData::unsafe_arena_set_allocated_nigori_model(
    ::sync_pb::NigoriModel* nigori_model) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nigori_model_);
  }
  nigori_model_ = nigori_model;
  if (nigori_model) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.NigoriLocalData.nigori_model)
}
inline ::sync_pb::NigoriModel* NigoriLocalData::release_nigori_model() {
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::NigoriModel* temp = nigori_model_;
  nigori_model_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::NigoriModel* NigoriLocalData::unsafe_arena_release_nigori_model() {
  // @@protoc_insertion_point(field_release:sync_pb.NigoriLocalData.nigori_model)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::NigoriModel* temp = nigori_model_;
  nigori_model_ = nullptr;
  return temp;
}
inline ::sync_pb::NigoriModel* NigoriLocalData::_internal_mutable_nigori_model() {
  _has_bits_[0] |= 0x00000004u;
  if (nigori_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::NigoriModel>(GetArenaForAllocation());
    nigori_model_ = p;
  }
  return nigori_model_;
}
inline ::sync_pb::NigoriModel* NigoriLocalData::mutable_nigori_model() {
  ::sync_pb::NigoriModel* _msg = _internal_mutable_nigori_model();
  // @@protoc_insertion_point(field_mutable:sync_pb.NigoriLocalData.nigori_model)
  return _msg;
}
inline void NigoriLocalData::set_allocated_nigori_model(::sync_pb::NigoriModel* nigori_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nigori_model_;
  }
  if (nigori_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nigori_model);
    if (message_arena != submessage_arena) {
      nigori_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nigori_model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  nigori_model_ = nigori_model;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriLocalData.nigori_model)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fnigori_5flocal_5fdata_2eproto
