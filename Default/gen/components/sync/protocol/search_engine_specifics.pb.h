// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/search_engine_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fsearch_5fengine_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fsearch_5fengine_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fsearch_5fengine_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fsearch_5fengine_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class SearchEngineSpecifics;
struct SearchEngineSpecificsDefaultTypeInternal;
extern SearchEngineSpecificsDefaultTypeInternal _SearchEngineSpecifics_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::SearchEngineSpecifics* Arena::CreateMaybeMessage<::sync_pb::SearchEngineSpecifics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum SearchEngineSpecifics_ActiveStatus : int {
  SearchEngineSpecifics_ActiveStatus_ACTIVE_STATUS_UNSPECIFIED = 0,
  SearchEngineSpecifics_ActiveStatus_ACTIVE_STATUS_TRUE = 1,
  SearchEngineSpecifics_ActiveStatus_ACTIVE_STATUS_FALSE = 2
};
bool SearchEngineSpecifics_ActiveStatus_IsValid(int value);
constexpr SearchEngineSpecifics_ActiveStatus SearchEngineSpecifics_ActiveStatus_ActiveStatus_MIN = SearchEngineSpecifics_ActiveStatus_ACTIVE_STATUS_UNSPECIFIED;
constexpr SearchEngineSpecifics_ActiveStatus SearchEngineSpecifics_ActiveStatus_ActiveStatus_MAX = SearchEngineSpecifics_ActiveStatus_ACTIVE_STATUS_FALSE;
constexpr int SearchEngineSpecifics_ActiveStatus_ActiveStatus_ARRAYSIZE = SearchEngineSpecifics_ActiveStatus_ActiveStatus_MAX + 1;

const std::string& SearchEngineSpecifics_ActiveStatus_Name(SearchEngineSpecifics_ActiveStatus value);
template<typename T>
inline const std::string& SearchEngineSpecifics_ActiveStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SearchEngineSpecifics_ActiveStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SearchEngineSpecifics_ActiveStatus_Name.");
  return SearchEngineSpecifics_ActiveStatus_Name(static_cast<SearchEngineSpecifics_ActiveStatus>(enum_t_value));
}
bool SearchEngineSpecifics_ActiveStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SearchEngineSpecifics_ActiveStatus* value);
// ===================================================================

class SearchEngineSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SearchEngineSpecifics) */ {
 public:
  inline SearchEngineSpecifics() : SearchEngineSpecifics(nullptr) {}
  ~SearchEngineSpecifics() override;
  explicit PROTOBUF_CONSTEXPR SearchEngineSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchEngineSpecifics(const SearchEngineSpecifics& from);
  SearchEngineSpecifics(SearchEngineSpecifics&& from) noexcept
    : SearchEngineSpecifics() {
    *this = ::std::move(from);
  }

  inline SearchEngineSpecifics& operator=(const SearchEngineSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchEngineSpecifics& operator=(SearchEngineSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SearchEngineSpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchEngineSpecifics* internal_default_instance() {
    return reinterpret_cast<const SearchEngineSpecifics*>(
               &_SearchEngineSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SearchEngineSpecifics& a, SearchEngineSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SearchEngineSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchEngineSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchEngineSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchEngineSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SearchEngineSpecifics& from);
  void MergeFrom(const SearchEngineSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SearchEngineSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SearchEngineSpecifics";
  }
  protected:
  explicit SearchEngineSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SearchEngineSpecifics_ActiveStatus ActiveStatus;
  static constexpr ActiveStatus ACTIVE_STATUS_UNSPECIFIED =
    SearchEngineSpecifics_ActiveStatus_ACTIVE_STATUS_UNSPECIFIED;
  static constexpr ActiveStatus ACTIVE_STATUS_TRUE =
    SearchEngineSpecifics_ActiveStatus_ACTIVE_STATUS_TRUE;
  static constexpr ActiveStatus ACTIVE_STATUS_FALSE =
    SearchEngineSpecifics_ActiveStatus_ACTIVE_STATUS_FALSE;
  static inline bool ActiveStatus_IsValid(int value) {
    return SearchEngineSpecifics_ActiveStatus_IsValid(value);
  }
  static constexpr ActiveStatus ActiveStatus_MIN =
    SearchEngineSpecifics_ActiveStatus_ActiveStatus_MIN;
  static constexpr ActiveStatus ActiveStatus_MAX =
    SearchEngineSpecifics_ActiveStatus_ActiveStatus_MAX;
  static constexpr int ActiveStatus_ARRAYSIZE =
    SearchEngineSpecifics_ActiveStatus_ActiveStatus_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ActiveStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ActiveStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ActiveStatus_Name.");
    return SearchEngineSpecifics_ActiveStatus_Name(enum_t_value);
  }
  static inline bool ActiveStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ActiveStatus* value) {
    return SearchEngineSpecifics_ActiveStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAlternateUrlsFieldNumber = 19,
    kShortNameFieldNumber = 1,
    kKeywordFieldNumber = 2,
    kFaviconUrlFieldNumber = 3,
    kUrlFieldNumber = 4,
    kOriginatingUrlFieldNumber = 6,
    kInputEncodingsFieldNumber = 8,
    kSuggestionsUrlFieldNumber = 10,
    kInstantUrlFieldNumber = 15,
    kSyncGuidFieldNumber = 18,
    kSearchTermsReplacementKeyFieldNumber = 20,
    kImageUrlFieldNumber = 21,
    kSearchUrlPostParamsFieldNumber = 22,
    kSuggestionsUrlPostParamsFieldNumber = 23,
    kInstantUrlPostParamsFieldNumber = 24,
    kImageUrlPostParamsFieldNumber = 25,
    kNewTabUrlFieldNumber = 26,
    kDateCreatedFieldNumber = 7,
    kSafeForAutoreplaceFieldNumber = 5,
    kDeprecatedShowInDefaultListFieldNumber = 9,
    kAutogenerateKeywordFieldNumber = 12,
    kPrepopulateIdFieldNumber = 11,
    kLastModifiedFieldNumber = 17,
    kIsActiveFieldNumber = 27,
    kStarterPackIdFieldNumber = 28,
  };
  // repeated string alternate_urls = 19;
  int alternate_urls_size() const;
  private:
  int _internal_alternate_urls_size() const;
  public:
  void clear_alternate_urls();
  const std::string& alternate_urls(int index) const;
  std::string* mutable_alternate_urls(int index);
  void set_alternate_urls(int index, const std::string& value);
  void set_alternate_urls(int index, std::string&& value);
  void set_alternate_urls(int index, const char* value);
  void set_alternate_urls(int index, const char* value, size_t size);
  std::string* add_alternate_urls();
  void add_alternate_urls(const std::string& value);
  void add_alternate_urls(std::string&& value);
  void add_alternate_urls(const char* value);
  void add_alternate_urls(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& alternate_urls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_alternate_urls();
  private:
  const std::string& _internal_alternate_urls(int index) const;
  std::string* _internal_add_alternate_urls();
  public:

  // optional string short_name = 1;
  bool has_short_name() const;
  private:
  bool _internal_has_short_name() const;
  public:
  void clear_short_name();
  const std::string& short_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_short_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_short_name();
  PROTOBUF_NODISCARD std::string* release_short_name();
  void set_allocated_short_name(std::string* short_name);
  private:
  const std::string& _internal_short_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_short_name(const std::string& value);
  std::string* _internal_mutable_short_name();
  public:

  // optional string keyword = 2;
  bool has_keyword() const;
  private:
  bool _internal_has_keyword() const;
  public:
  void clear_keyword();
  const std::string& keyword() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyword(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyword();
  PROTOBUF_NODISCARD std::string* release_keyword();
  void set_allocated_keyword(std::string* keyword);
  private:
  const std::string& _internal_keyword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyword(const std::string& value);
  std::string* _internal_mutable_keyword();
  public:

  // optional string favicon_url = 3;
  bool has_favicon_url() const;
  private:
  bool _internal_has_favicon_url() const;
  public:
  void clear_favicon_url();
  const std::string& favicon_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_favicon_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_favicon_url();
  PROTOBUF_NODISCARD std::string* release_favicon_url();
  void set_allocated_favicon_url(std::string* favicon_url);
  private:
  const std::string& _internal_favicon_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_favicon_url(const std::string& value);
  std::string* _internal_mutable_favicon_url();
  public:

  // optional string url = 4;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string originating_url = 6;
  bool has_originating_url() const;
  private:
  bool _internal_has_originating_url() const;
  public:
  void clear_originating_url();
  const std::string& originating_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_originating_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_originating_url();
  PROTOBUF_NODISCARD std::string* release_originating_url();
  void set_allocated_originating_url(std::string* originating_url);
  private:
  const std::string& _internal_originating_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originating_url(const std::string& value);
  std::string* _internal_mutable_originating_url();
  public:

  // optional string input_encodings = 8;
  bool has_input_encodings() const;
  private:
  bool _internal_has_input_encodings() const;
  public:
  void clear_input_encodings();
  const std::string& input_encodings() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_encodings(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_encodings();
  PROTOBUF_NODISCARD std::string* release_input_encodings();
  void set_allocated_input_encodings(std::string* input_encodings);
  private:
  const std::string& _internal_input_encodings() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_encodings(const std::string& value);
  std::string* _internal_mutable_input_encodings();
  public:

  // optional string suggestions_url = 10;
  bool has_suggestions_url() const;
  private:
  bool _internal_has_suggestions_url() const;
  public:
  void clear_suggestions_url();
  const std::string& suggestions_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_suggestions_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_suggestions_url();
  PROTOBUF_NODISCARD std::string* release_suggestions_url();
  void set_allocated_suggestions_url(std::string* suggestions_url);
  private:
  const std::string& _internal_suggestions_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_suggestions_url(const std::string& value);
  std::string* _internal_mutable_suggestions_url();
  public:

  // optional string instant_url = 15 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_instant_url() const;
  private:
  bool _internal_has_instant_url() const;
  public:
  PROTOBUF_DEPRECATED void clear_instant_url();
  PROTOBUF_DEPRECATED const std::string& instant_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_instant_url(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_instant_url();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_instant_url();
  PROTOBUF_DEPRECATED void set_allocated_instant_url(std::string* instant_url);
  private:
  const std::string& _internal_instant_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instant_url(const std::string& value);
  std::string* _internal_mutable_instant_url();
  public:

  // optional string sync_guid = 18;
  bool has_sync_guid() const;
  private:
  bool _internal_has_sync_guid() const;
  public:
  void clear_sync_guid();
  const std::string& sync_guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sync_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sync_guid();
  PROTOBUF_NODISCARD std::string* release_sync_guid();
  void set_allocated_sync_guid(std::string* sync_guid);
  private:
  const std::string& _internal_sync_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sync_guid(const std::string& value);
  std::string* _internal_mutable_sync_guid();
  public:

  // optional string search_terms_replacement_key = 20 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_search_terms_replacement_key() const;
  private:
  bool _internal_has_search_terms_replacement_key() const;
  public:
  PROTOBUF_DEPRECATED void clear_search_terms_replacement_key();
  PROTOBUF_DEPRECATED const std::string& search_terms_replacement_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_search_terms_replacement_key(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_search_terms_replacement_key();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_search_terms_replacement_key();
  PROTOBUF_DEPRECATED void set_allocated_search_terms_replacement_key(std::string* search_terms_replacement_key);
  private:
  const std::string& _internal_search_terms_replacement_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_search_terms_replacement_key(const std::string& value);
  std::string* _internal_mutable_search_terms_replacement_key();
  public:

  // optional string image_url = 21;
  bool has_image_url() const;
  private:
  bool _internal_has_image_url() const;
  public:
  void clear_image_url();
  const std::string& image_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_url();
  PROTOBUF_NODISCARD std::string* release_image_url();
  void set_allocated_image_url(std::string* image_url);
  private:
  const std::string& _internal_image_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_url(const std::string& value);
  std::string* _internal_mutable_image_url();
  public:

  // optional string search_url_post_params = 22;
  bool has_search_url_post_params() const;
  private:
  bool _internal_has_search_url_post_params() const;
  public:
  void clear_search_url_post_params();
  const std::string& search_url_post_params() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_search_url_post_params(ArgT0&& arg0, ArgT... args);
  std::string* mutable_search_url_post_params();
  PROTOBUF_NODISCARD std::string* release_search_url_post_params();
  void set_allocated_search_url_post_params(std::string* search_url_post_params);
  private:
  const std::string& _internal_search_url_post_params() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_search_url_post_params(const std::string& value);
  std::string* _internal_mutable_search_url_post_params();
  public:

  // optional string suggestions_url_post_params = 23;
  bool has_suggestions_url_post_params() const;
  private:
  bool _internal_has_suggestions_url_post_params() const;
  public:
  void clear_suggestions_url_post_params();
  const std::string& suggestions_url_post_params() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_suggestions_url_post_params(ArgT0&& arg0, ArgT... args);
  std::string* mutable_suggestions_url_post_params();
  PROTOBUF_NODISCARD std::string* release_suggestions_url_post_params();
  void set_allocated_suggestions_url_post_params(std::string* suggestions_url_post_params);
  private:
  const std::string& _internal_suggestions_url_post_params() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_suggestions_url_post_params(const std::string& value);
  std::string* _internal_mutable_suggestions_url_post_params();
  public:

  // optional string instant_url_post_params = 24 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_instant_url_post_params() const;
  private:
  bool _internal_has_instant_url_post_params() const;
  public:
  PROTOBUF_DEPRECATED void clear_instant_url_post_params();
  PROTOBUF_DEPRECATED const std::string& instant_url_post_params() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_instant_url_post_params(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_instant_url_post_params();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_instant_url_post_params();
  PROTOBUF_DEPRECATED void set_allocated_instant_url_post_params(std::string* instant_url_post_params);
  private:
  const std::string& _internal_instant_url_post_params() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instant_url_post_params(const std::string& value);
  std::string* _internal_mutable_instant_url_post_params();
  public:

  // optional string image_url_post_params = 25;
  bool has_image_url_post_params() const;
  private:
  bool _internal_has_image_url_post_params() const;
  public:
  void clear_image_url_post_params();
  const std::string& image_url_post_params() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_url_post_params(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_url_post_params();
  PROTOBUF_NODISCARD std::string* release_image_url_post_params();
  void set_allocated_image_url_post_params(std::string* image_url_post_params);
  private:
  const std::string& _internal_image_url_post_params() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_url_post_params(const std::string& value);
  std::string* _internal_mutable_image_url_post_params();
  public:

  // optional string new_tab_url = 26;
  bool has_new_tab_url() const;
  private:
  bool _internal_has_new_tab_url() const;
  public:
  void clear_new_tab_url();
  const std::string& new_tab_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_tab_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_tab_url();
  PROTOBUF_NODISCARD std::string* release_new_tab_url();
  void set_allocated_new_tab_url(std::string* new_tab_url);
  private:
  const std::string& _internal_new_tab_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_tab_url(const std::string& value);
  std::string* _internal_mutable_new_tab_url();
  public:

  // optional int64 date_created = 7;
  bool has_date_created() const;
  private:
  bool _internal_has_date_created() const;
  public:
  void clear_date_created();
  int64_t date_created() const;
  void set_date_created(int64_t value);
  private:
  int64_t _internal_date_created() const;
  void _internal_set_date_created(int64_t value);
  public:

  // optional bool safe_for_autoreplace = 5;
  bool has_safe_for_autoreplace() const;
  private:
  bool _internal_has_safe_for_autoreplace() const;
  public:
  void clear_safe_for_autoreplace();
  bool safe_for_autoreplace() const;
  void set_safe_for_autoreplace(bool value);
  private:
  bool _internal_safe_for_autoreplace() const;
  void _internal_set_safe_for_autoreplace(bool value);
  public:

  // optional bool deprecated_show_in_default_list = 9 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_deprecated_show_in_default_list() const;
  private:
  bool _internal_has_deprecated_show_in_default_list() const;
  public:
  PROTOBUF_DEPRECATED void clear_deprecated_show_in_default_list();
  PROTOBUF_DEPRECATED bool deprecated_show_in_default_list() const;
  PROTOBUF_DEPRECATED void set_deprecated_show_in_default_list(bool value);
  private:
  bool _internal_deprecated_show_in_default_list() const;
  void _internal_set_deprecated_show_in_default_list(bool value);
  public:

  // optional bool autogenerate_keyword = 12 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_autogenerate_keyword() const;
  private:
  bool _internal_has_autogenerate_keyword() const;
  public:
  PROTOBUF_DEPRECATED void clear_autogenerate_keyword();
  PROTOBUF_DEPRECATED bool autogenerate_keyword() const;
  PROTOBUF_DEPRECATED void set_autogenerate_keyword(bool value);
  private:
  bool _internal_autogenerate_keyword() const;
  void _internal_set_autogenerate_keyword(bool value);
  public:

  // optional int32 prepopulate_id = 11;
  bool has_prepopulate_id() const;
  private:
  bool _internal_has_prepopulate_id() const;
  public:
  void clear_prepopulate_id();
  int32_t prepopulate_id() const;
  void set_prepopulate_id(int32_t value);
  private:
  int32_t _internal_prepopulate_id() const;
  void _internal_set_prepopulate_id(int32_t value);
  public:

  // optional int64 last_modified = 17;
  bool has_last_modified() const;
  private:
  bool _internal_has_last_modified() const;
  public:
  void clear_last_modified();
  int64_t last_modified() const;
  void set_last_modified(int64_t value);
  private:
  int64_t _internal_last_modified() const;
  void _internal_set_last_modified(int64_t value);
  public:

  // optional .sync_pb.SearchEngineSpecifics.ActiveStatus is_active = 27;
  bool has_is_active() const;
  private:
  bool _internal_has_is_active() const;
  public:
  void clear_is_active();
  ::sync_pb::SearchEngineSpecifics_ActiveStatus is_active() const;
  void set_is_active(::sync_pb::SearchEngineSpecifics_ActiveStatus value);
  private:
  ::sync_pb::SearchEngineSpecifics_ActiveStatus _internal_is_active() const;
  void _internal_set_is_active(::sync_pb::SearchEngineSpecifics_ActiveStatus value);
  public:

  // optional int32 starter_pack_id = 28;
  bool has_starter_pack_id() const;
  private:
  bool _internal_has_starter_pack_id() const;
  public:
  void clear_starter_pack_id();
  int32_t starter_pack_id() const;
  void set_starter_pack_id(int32_t value);
  private:
  int32_t _internal_starter_pack_id() const;
  void _internal_set_starter_pack_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.SearchEngineSpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> alternate_urls_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyword_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr favicon_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originating_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_encodings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suggestions_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instant_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sync_guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_terms_replacement_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_url_post_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suggestions_url_post_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instant_url_post_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_url_post_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_tab_url_;
  int64_t date_created_;
  bool safe_for_autoreplace_;
  bool deprecated_show_in_default_list_;
  bool autogenerate_keyword_;
  int32_t prepopulate_id_;
  int64_t last_modified_;
  int is_active_;
  int32_t starter_pack_id_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fsearch_5fengine_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SearchEngineSpecifics

// optional string short_name = 1;
inline bool SearchEngineSpecifics::_internal_has_short_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_short_name() const {
  return _internal_has_short_name();
}
inline void SearchEngineSpecifics::clear_short_name() {
  short_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SearchEngineSpecifics::short_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.short_name)
  return _internal_short_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchEngineSpecifics::set_short_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 short_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.short_name)
}
inline std::string* SearchEngineSpecifics::mutable_short_name() {
  std::string* _s = _internal_mutable_short_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.SearchEngineSpecifics.short_name)
  return _s;
}
inline const std::string& SearchEngineSpecifics::_internal_short_name() const {
  return short_name_.Get();
}
inline void SearchEngineSpecifics::_internal_set_short_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  short_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::_internal_mutable_short_name() {
  _has_bits_[0] |= 0x00000001u;
  return short_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::release_short_name() {
  // @@protoc_insertion_point(field_release:sync_pb.SearchEngineSpecifics.short_name)
  if (!_internal_has_short_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = short_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (short_name_.IsDefault()) {
    short_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SearchEngineSpecifics::set_allocated_short_name(std::string* short_name) {
  if (short_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  short_name_.SetAllocated(short_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (short_name_.IsDefault()) {
    short_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SearchEngineSpecifics.short_name)
}

// optional string keyword = 2;
inline bool SearchEngineSpecifics::_internal_has_keyword() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_keyword() const {
  return _internal_has_keyword();
}
inline void SearchEngineSpecifics::clear_keyword() {
  keyword_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SearchEngineSpecifics::keyword() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.keyword)
  return _internal_keyword();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchEngineSpecifics::set_keyword(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 keyword_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.keyword)
}
inline std::string* SearchEngineSpecifics::mutable_keyword() {
  std::string* _s = _internal_mutable_keyword();
  // @@protoc_insertion_point(field_mutable:sync_pb.SearchEngineSpecifics.keyword)
  return _s;
}
inline const std::string& SearchEngineSpecifics::_internal_keyword() const {
  return keyword_.Get();
}
inline void SearchEngineSpecifics::_internal_set_keyword(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  keyword_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::_internal_mutable_keyword() {
  _has_bits_[0] |= 0x00000002u;
  return keyword_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::release_keyword() {
  // @@protoc_insertion_point(field_release:sync_pb.SearchEngineSpecifics.keyword)
  if (!_internal_has_keyword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = keyword_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keyword_.IsDefault()) {
    keyword_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SearchEngineSpecifics::set_allocated_keyword(std::string* keyword) {
  if (keyword != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  keyword_.SetAllocated(keyword, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keyword_.IsDefault()) {
    keyword_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SearchEngineSpecifics.keyword)
}

// optional string favicon_url = 3;
inline bool SearchEngineSpecifics::_internal_has_favicon_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_favicon_url() const {
  return _internal_has_favicon_url();
}
inline void SearchEngineSpecifics::clear_favicon_url() {
  favicon_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SearchEngineSpecifics::favicon_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.favicon_url)
  return _internal_favicon_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchEngineSpecifics::set_favicon_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 favicon_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.favicon_url)
}
inline std::string* SearchEngineSpecifics::mutable_favicon_url() {
  std::string* _s = _internal_mutable_favicon_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.SearchEngineSpecifics.favicon_url)
  return _s;
}
inline const std::string& SearchEngineSpecifics::_internal_favicon_url() const {
  return favicon_url_.Get();
}
inline void SearchEngineSpecifics::_internal_set_favicon_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  favicon_url_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::_internal_mutable_favicon_url() {
  _has_bits_[0] |= 0x00000004u;
  return favicon_url_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::release_favicon_url() {
  // @@protoc_insertion_point(field_release:sync_pb.SearchEngineSpecifics.favicon_url)
  if (!_internal_has_favicon_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = favicon_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (favicon_url_.IsDefault()) {
    favicon_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SearchEngineSpecifics::set_allocated_favicon_url(std::string* favicon_url) {
  if (favicon_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  favicon_url_.SetAllocated(favicon_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (favicon_url_.IsDefault()) {
    favicon_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SearchEngineSpecifics.favicon_url)
}

// optional string url = 4;
inline bool SearchEngineSpecifics::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_url() const {
  return _internal_has_url();
}
inline void SearchEngineSpecifics::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SearchEngineSpecifics::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchEngineSpecifics::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.url)
}
inline std::string* SearchEngineSpecifics::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.SearchEngineSpecifics.url)
  return _s;
}
inline const std::string& SearchEngineSpecifics::_internal_url() const {
  return url_.Get();
}
inline void SearchEngineSpecifics::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000008u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.SearchEngineSpecifics.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SearchEngineSpecifics::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SearchEngineSpecifics.url)
}

// optional bool safe_for_autoreplace = 5;
inline bool SearchEngineSpecifics::_internal_has_safe_for_autoreplace() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_safe_for_autoreplace() const {
  return _internal_has_safe_for_autoreplace();
}
inline void SearchEngineSpecifics::clear_safe_for_autoreplace() {
  safe_for_autoreplace_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool SearchEngineSpecifics::_internal_safe_for_autoreplace() const {
  return safe_for_autoreplace_;
}
inline bool SearchEngineSpecifics::safe_for_autoreplace() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.safe_for_autoreplace)
  return _internal_safe_for_autoreplace();
}
inline void SearchEngineSpecifics::_internal_set_safe_for_autoreplace(bool value) {
  _has_bits_[0] |= 0x00020000u;
  safe_for_autoreplace_ = value;
}
inline void SearchEngineSpecifics::set_safe_for_autoreplace(bool value) {
  _internal_set_safe_for_autoreplace(value);
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.safe_for_autoreplace)
}

// optional string originating_url = 6;
inline bool SearchEngineSpecifics::_internal_has_originating_url() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_originating_url() const {
  return _internal_has_originating_url();
}
inline void SearchEngineSpecifics::clear_originating_url() {
  originating_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SearchEngineSpecifics::originating_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.originating_url)
  return _internal_originating_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchEngineSpecifics::set_originating_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 originating_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.originating_url)
}
inline std::string* SearchEngineSpecifics::mutable_originating_url() {
  std::string* _s = _internal_mutable_originating_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.SearchEngineSpecifics.originating_url)
  return _s;
}
inline const std::string& SearchEngineSpecifics::_internal_originating_url() const {
  return originating_url_.Get();
}
inline void SearchEngineSpecifics::_internal_set_originating_url(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  originating_url_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::_internal_mutable_originating_url() {
  _has_bits_[0] |= 0x00000010u;
  return originating_url_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::release_originating_url() {
  // @@protoc_insertion_point(field_release:sync_pb.SearchEngineSpecifics.originating_url)
  if (!_internal_has_originating_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = originating_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (originating_url_.IsDefault()) {
    originating_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SearchEngineSpecifics::set_allocated_originating_url(std::string* originating_url) {
  if (originating_url != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  originating_url_.SetAllocated(originating_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (originating_url_.IsDefault()) {
    originating_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SearchEngineSpecifics.originating_url)
}

// optional int64 date_created = 7;
inline bool SearchEngineSpecifics::_internal_has_date_created() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_date_created() const {
  return _internal_has_date_created();
}
inline void SearchEngineSpecifics::clear_date_created() {
  date_created_ = int64_t{0};
  _has_bits_[0] &= ~0x00010000u;
}
inline int64_t SearchEngineSpecifics::_internal_date_created() const {
  return date_created_;
}
inline int64_t SearchEngineSpecifics::date_created() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.date_created)
  return _internal_date_created();
}
inline void SearchEngineSpecifics::_internal_set_date_created(int64_t value) {
  _has_bits_[0] |= 0x00010000u;
  date_created_ = value;
}
inline void SearchEngineSpecifics::set_date_created(int64_t value) {
  _internal_set_date_created(value);
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.date_created)
}

// optional string input_encodings = 8;
inline bool SearchEngineSpecifics::_internal_has_input_encodings() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_input_encodings() const {
  return _internal_has_input_encodings();
}
inline void SearchEngineSpecifics::clear_input_encodings() {
  input_encodings_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& SearchEngineSpecifics::input_encodings() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.input_encodings)
  return _internal_input_encodings();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchEngineSpecifics::set_input_encodings(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 input_encodings_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.input_encodings)
}
inline std::string* SearchEngineSpecifics::mutable_input_encodings() {
  std::string* _s = _internal_mutable_input_encodings();
  // @@protoc_insertion_point(field_mutable:sync_pb.SearchEngineSpecifics.input_encodings)
  return _s;
}
inline const std::string& SearchEngineSpecifics::_internal_input_encodings() const {
  return input_encodings_.Get();
}
inline void SearchEngineSpecifics::_internal_set_input_encodings(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  input_encodings_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::_internal_mutable_input_encodings() {
  _has_bits_[0] |= 0x00000020u;
  return input_encodings_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::release_input_encodings() {
  // @@protoc_insertion_point(field_release:sync_pb.SearchEngineSpecifics.input_encodings)
  if (!_internal_has_input_encodings()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = input_encodings_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (input_encodings_.IsDefault()) {
    input_encodings_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SearchEngineSpecifics::set_allocated_input_encodings(std::string* input_encodings) {
  if (input_encodings != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  input_encodings_.SetAllocated(input_encodings, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (input_encodings_.IsDefault()) {
    input_encodings_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SearchEngineSpecifics.input_encodings)
}

// optional bool deprecated_show_in_default_list = 9 [deprecated = true];
inline bool SearchEngineSpecifics::_internal_has_deprecated_show_in_default_list() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_deprecated_show_in_default_list() const {
  return _internal_has_deprecated_show_in_default_list();
}
inline void SearchEngineSpecifics::clear_deprecated_show_in_default_list() {
  deprecated_show_in_default_list_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool SearchEngineSpecifics::_internal_deprecated_show_in_default_list() const {
  return deprecated_show_in_default_list_;
}
inline bool SearchEngineSpecifics::deprecated_show_in_default_list() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.deprecated_show_in_default_list)
  return _internal_deprecated_show_in_default_list();
}
inline void SearchEngineSpecifics::_internal_set_deprecated_show_in_default_list(bool value) {
  _has_bits_[0] |= 0x00040000u;
  deprecated_show_in_default_list_ = value;
}
inline void SearchEngineSpecifics::set_deprecated_show_in_default_list(bool value) {
  _internal_set_deprecated_show_in_default_list(value);
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.deprecated_show_in_default_list)
}

// optional string suggestions_url = 10;
inline bool SearchEngineSpecifics::_internal_has_suggestions_url() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_suggestions_url() const {
  return _internal_has_suggestions_url();
}
inline void SearchEngineSpecifics::clear_suggestions_url() {
  suggestions_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& SearchEngineSpecifics::suggestions_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.suggestions_url)
  return _internal_suggestions_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchEngineSpecifics::set_suggestions_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 suggestions_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.suggestions_url)
}
inline std::string* SearchEngineSpecifics::mutable_suggestions_url() {
  std::string* _s = _internal_mutable_suggestions_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.SearchEngineSpecifics.suggestions_url)
  return _s;
}
inline const std::string& SearchEngineSpecifics::_internal_suggestions_url() const {
  return suggestions_url_.Get();
}
inline void SearchEngineSpecifics::_internal_set_suggestions_url(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  suggestions_url_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::_internal_mutable_suggestions_url() {
  _has_bits_[0] |= 0x00000040u;
  return suggestions_url_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::release_suggestions_url() {
  // @@protoc_insertion_point(field_release:sync_pb.SearchEngineSpecifics.suggestions_url)
  if (!_internal_has_suggestions_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = suggestions_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (suggestions_url_.IsDefault()) {
    suggestions_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SearchEngineSpecifics::set_allocated_suggestions_url(std::string* suggestions_url) {
  if (suggestions_url != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  suggestions_url_.SetAllocated(suggestions_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (suggestions_url_.IsDefault()) {
    suggestions_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SearchEngineSpecifics.suggestions_url)
}

// optional int32 prepopulate_id = 11;
inline bool SearchEngineSpecifics::_internal_has_prepopulate_id() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_prepopulate_id() const {
  return _internal_has_prepopulate_id();
}
inline void SearchEngineSpecifics::clear_prepopulate_id() {
  prepopulate_id_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline int32_t SearchEngineSpecifics::_internal_prepopulate_id() const {
  return prepopulate_id_;
}
inline int32_t SearchEngineSpecifics::prepopulate_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.prepopulate_id)
  return _internal_prepopulate_id();
}
inline void SearchEngineSpecifics::_internal_set_prepopulate_id(int32_t value) {
  _has_bits_[0] |= 0x00100000u;
  prepopulate_id_ = value;
}
inline void SearchEngineSpecifics::set_prepopulate_id(int32_t value) {
  _internal_set_prepopulate_id(value);
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.prepopulate_id)
}

// optional bool autogenerate_keyword = 12 [deprecated = true];
inline bool SearchEngineSpecifics::_internal_has_autogenerate_keyword() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_autogenerate_keyword() const {
  return _internal_has_autogenerate_keyword();
}
inline void SearchEngineSpecifics::clear_autogenerate_keyword() {
  autogenerate_keyword_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool SearchEngineSpecifics::_internal_autogenerate_keyword() const {
  return autogenerate_keyword_;
}
inline bool SearchEngineSpecifics::autogenerate_keyword() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.autogenerate_keyword)
  return _internal_autogenerate_keyword();
}
inline void SearchEngineSpecifics::_internal_set_autogenerate_keyword(bool value) {
  _has_bits_[0] |= 0x00080000u;
  autogenerate_keyword_ = value;
}
inline void SearchEngineSpecifics::set_autogenerate_keyword(bool value) {
  _internal_set_autogenerate_keyword(value);
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.autogenerate_keyword)
}

// optional string instant_url = 15 [deprecated = true];
inline bool SearchEngineSpecifics::_internal_has_instant_url() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_instant_url() const {
  return _internal_has_instant_url();
}
inline void SearchEngineSpecifics::clear_instant_url() {
  instant_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& SearchEngineSpecifics::instant_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.instant_url)
  return _internal_instant_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchEngineSpecifics::set_instant_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 instant_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.instant_url)
}
inline std::string* SearchEngineSpecifics::mutable_instant_url() {
  std::string* _s = _internal_mutable_instant_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.SearchEngineSpecifics.instant_url)
  return _s;
}
inline const std::string& SearchEngineSpecifics::_internal_instant_url() const {
  return instant_url_.Get();
}
inline void SearchEngineSpecifics::_internal_set_instant_url(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  instant_url_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::_internal_mutable_instant_url() {
  _has_bits_[0] |= 0x00000080u;
  return instant_url_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::release_instant_url() {
  // @@protoc_insertion_point(field_release:sync_pb.SearchEngineSpecifics.instant_url)
  if (!_internal_has_instant_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = instant_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instant_url_.IsDefault()) {
    instant_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SearchEngineSpecifics::set_allocated_instant_url(std::string* instant_url) {
  if (instant_url != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  instant_url_.SetAllocated(instant_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instant_url_.IsDefault()) {
    instant_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SearchEngineSpecifics.instant_url)
}

// optional int64 last_modified = 17;
inline bool SearchEngineSpecifics::_internal_has_last_modified() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_last_modified() const {
  return _internal_has_last_modified();
}
inline void SearchEngineSpecifics::clear_last_modified() {
  last_modified_ = int64_t{0};
  _has_bits_[0] &= ~0x00200000u;
}
inline int64_t SearchEngineSpecifics::_internal_last_modified() const {
  return last_modified_;
}
inline int64_t SearchEngineSpecifics::last_modified() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.last_modified)
  return _internal_last_modified();
}
inline void SearchEngineSpecifics::_internal_set_last_modified(int64_t value) {
  _has_bits_[0] |= 0x00200000u;
  last_modified_ = value;
}
inline void SearchEngineSpecifics::set_last_modified(int64_t value) {
  _internal_set_last_modified(value);
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.last_modified)
}

// optional string sync_guid = 18;
inline bool SearchEngineSpecifics::_internal_has_sync_guid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_sync_guid() const {
  return _internal_has_sync_guid();
}
inline void SearchEngineSpecifics::clear_sync_guid() {
  sync_guid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& SearchEngineSpecifics::sync_guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.sync_guid)
  return _internal_sync_guid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchEngineSpecifics::set_sync_guid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000100u;
 sync_guid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.sync_guid)
}
inline std::string* SearchEngineSpecifics::mutable_sync_guid() {
  std::string* _s = _internal_mutable_sync_guid();
  // @@protoc_insertion_point(field_mutable:sync_pb.SearchEngineSpecifics.sync_guid)
  return _s;
}
inline const std::string& SearchEngineSpecifics::_internal_sync_guid() const {
  return sync_guid_.Get();
}
inline void SearchEngineSpecifics::_internal_set_sync_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  sync_guid_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::_internal_mutable_sync_guid() {
  _has_bits_[0] |= 0x00000100u;
  return sync_guid_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::release_sync_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.SearchEngineSpecifics.sync_guid)
  if (!_internal_has_sync_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  auto* p = sync_guid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sync_guid_.IsDefault()) {
    sync_guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SearchEngineSpecifics::set_allocated_sync_guid(std::string* sync_guid) {
  if (sync_guid != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  sync_guid_.SetAllocated(sync_guid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sync_guid_.IsDefault()) {
    sync_guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SearchEngineSpecifics.sync_guid)
}

// repeated string alternate_urls = 19;
inline int SearchEngineSpecifics::_internal_alternate_urls_size() const {
  return alternate_urls_.size();
}
inline int SearchEngineSpecifics::alternate_urls_size() const {
  return _internal_alternate_urls_size();
}
inline void SearchEngineSpecifics::clear_alternate_urls() {
  alternate_urls_.Clear();
}
inline std::string* SearchEngineSpecifics::add_alternate_urls() {
  std::string* _s = _internal_add_alternate_urls();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.SearchEngineSpecifics.alternate_urls)
  return _s;
}
inline const std::string& SearchEngineSpecifics::_internal_alternate_urls(int index) const {
  return alternate_urls_.Get(index);
}
inline const std::string& SearchEngineSpecifics::alternate_urls(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.alternate_urls)
  return _internal_alternate_urls(index);
}
inline std::string* SearchEngineSpecifics::mutable_alternate_urls(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.SearchEngineSpecifics.alternate_urls)
  return alternate_urls_.Mutable(index);
}
inline void SearchEngineSpecifics::set_alternate_urls(int index, const std::string& value) {
  alternate_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.alternate_urls)
}
inline void SearchEngineSpecifics::set_alternate_urls(int index, std::string&& value) {
  alternate_urls_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.alternate_urls)
}
inline void SearchEngineSpecifics::set_alternate_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  alternate_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.SearchEngineSpecifics.alternate_urls)
}
inline void SearchEngineSpecifics::set_alternate_urls(int index, const char* value, size_t size) {
  alternate_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SearchEngineSpecifics.alternate_urls)
}
inline std::string* SearchEngineSpecifics::_internal_add_alternate_urls() {
  return alternate_urls_.Add();
}
inline void SearchEngineSpecifics::add_alternate_urls(const std::string& value) {
  alternate_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.SearchEngineSpecifics.alternate_urls)
}
inline void SearchEngineSpecifics::add_alternate_urls(std::string&& value) {
  alternate_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.SearchEngineSpecifics.alternate_urls)
}
inline void SearchEngineSpecifics::add_alternate_urls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  alternate_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.SearchEngineSpecifics.alternate_urls)
}
inline void SearchEngineSpecifics::add_alternate_urls(const char* value, size_t size) {
  alternate_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.SearchEngineSpecifics.alternate_urls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchEngineSpecifics::alternate_urls() const {
  // @@protoc_insertion_point(field_list:sync_pb.SearchEngineSpecifics.alternate_urls)
  return alternate_urls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchEngineSpecifics::mutable_alternate_urls() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.SearchEngineSpecifics.alternate_urls)
  return &alternate_urls_;
}

// optional string search_terms_replacement_key = 20 [deprecated = true];
inline bool SearchEngineSpecifics::_internal_has_search_terms_replacement_key() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_search_terms_replacement_key() const {
  return _internal_has_search_terms_replacement_key();
}
inline void SearchEngineSpecifics::clear_search_terms_replacement_key() {
  search_terms_replacement_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& SearchEngineSpecifics::search_terms_replacement_key() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.search_terms_replacement_key)
  return _internal_search_terms_replacement_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchEngineSpecifics::set_search_terms_replacement_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000200u;
 search_terms_replacement_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.search_terms_replacement_key)
}
inline std::string* SearchEngineSpecifics::mutable_search_terms_replacement_key() {
  std::string* _s = _internal_mutable_search_terms_replacement_key();
  // @@protoc_insertion_point(field_mutable:sync_pb.SearchEngineSpecifics.search_terms_replacement_key)
  return _s;
}
inline const std::string& SearchEngineSpecifics::_internal_search_terms_replacement_key() const {
  return search_terms_replacement_key_.Get();
}
inline void SearchEngineSpecifics::_internal_set_search_terms_replacement_key(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  search_terms_replacement_key_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::_internal_mutable_search_terms_replacement_key() {
  _has_bits_[0] |= 0x00000200u;
  return search_terms_replacement_key_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::release_search_terms_replacement_key() {
  // @@protoc_insertion_point(field_release:sync_pb.SearchEngineSpecifics.search_terms_replacement_key)
  if (!_internal_has_search_terms_replacement_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  auto* p = search_terms_replacement_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (search_terms_replacement_key_.IsDefault()) {
    search_terms_replacement_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SearchEngineSpecifics::set_allocated_search_terms_replacement_key(std::string* search_terms_replacement_key) {
  if (search_terms_replacement_key != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  search_terms_replacement_key_.SetAllocated(search_terms_replacement_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (search_terms_replacement_key_.IsDefault()) {
    search_terms_replacement_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SearchEngineSpecifics.search_terms_replacement_key)
}

// optional string image_url = 21;
inline bool SearchEngineSpecifics::_internal_has_image_url() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_image_url() const {
  return _internal_has_image_url();
}
inline void SearchEngineSpecifics::clear_image_url() {
  image_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& SearchEngineSpecifics::image_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.image_url)
  return _internal_image_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchEngineSpecifics::set_image_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000400u;
 image_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.image_url)
}
inline std::string* SearchEngineSpecifics::mutable_image_url() {
  std::string* _s = _internal_mutable_image_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.SearchEngineSpecifics.image_url)
  return _s;
}
inline const std::string& SearchEngineSpecifics::_internal_image_url() const {
  return image_url_.Get();
}
inline void SearchEngineSpecifics::_internal_set_image_url(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  image_url_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::_internal_mutable_image_url() {
  _has_bits_[0] |= 0x00000400u;
  return image_url_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::release_image_url() {
  // @@protoc_insertion_point(field_release:sync_pb.SearchEngineSpecifics.image_url)
  if (!_internal_has_image_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  auto* p = image_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_url_.IsDefault()) {
    image_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SearchEngineSpecifics::set_allocated_image_url(std::string* image_url) {
  if (image_url != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  image_url_.SetAllocated(image_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_url_.IsDefault()) {
    image_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SearchEngineSpecifics.image_url)
}

// optional string search_url_post_params = 22;
inline bool SearchEngineSpecifics::_internal_has_search_url_post_params() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_search_url_post_params() const {
  return _internal_has_search_url_post_params();
}
inline void SearchEngineSpecifics::clear_search_url_post_params() {
  search_url_post_params_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& SearchEngineSpecifics::search_url_post_params() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.search_url_post_params)
  return _internal_search_url_post_params();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchEngineSpecifics::set_search_url_post_params(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000800u;
 search_url_post_params_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.search_url_post_params)
}
inline std::string* SearchEngineSpecifics::mutable_search_url_post_params() {
  std::string* _s = _internal_mutable_search_url_post_params();
  // @@protoc_insertion_point(field_mutable:sync_pb.SearchEngineSpecifics.search_url_post_params)
  return _s;
}
inline const std::string& SearchEngineSpecifics::_internal_search_url_post_params() const {
  return search_url_post_params_.Get();
}
inline void SearchEngineSpecifics::_internal_set_search_url_post_params(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  search_url_post_params_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::_internal_mutable_search_url_post_params() {
  _has_bits_[0] |= 0x00000800u;
  return search_url_post_params_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::release_search_url_post_params() {
  // @@protoc_insertion_point(field_release:sync_pb.SearchEngineSpecifics.search_url_post_params)
  if (!_internal_has_search_url_post_params()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  auto* p = search_url_post_params_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (search_url_post_params_.IsDefault()) {
    search_url_post_params_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SearchEngineSpecifics::set_allocated_search_url_post_params(std::string* search_url_post_params) {
  if (search_url_post_params != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  search_url_post_params_.SetAllocated(search_url_post_params, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (search_url_post_params_.IsDefault()) {
    search_url_post_params_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SearchEngineSpecifics.search_url_post_params)
}

// optional string suggestions_url_post_params = 23;
inline bool SearchEngineSpecifics::_internal_has_suggestions_url_post_params() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_suggestions_url_post_params() const {
  return _internal_has_suggestions_url_post_params();
}
inline void SearchEngineSpecifics::clear_suggestions_url_post_params() {
  suggestions_url_post_params_.ClearToEmpty();
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& SearchEngineSpecifics::suggestions_url_post_params() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.suggestions_url_post_params)
  return _internal_suggestions_url_post_params();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchEngineSpecifics::set_suggestions_url_post_params(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00001000u;
 suggestions_url_post_params_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.suggestions_url_post_params)
}
inline std::string* SearchEngineSpecifics::mutable_suggestions_url_post_params() {
  std::string* _s = _internal_mutable_suggestions_url_post_params();
  // @@protoc_insertion_point(field_mutable:sync_pb.SearchEngineSpecifics.suggestions_url_post_params)
  return _s;
}
inline const std::string& SearchEngineSpecifics::_internal_suggestions_url_post_params() const {
  return suggestions_url_post_params_.Get();
}
inline void SearchEngineSpecifics::_internal_set_suggestions_url_post_params(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  suggestions_url_post_params_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::_internal_mutable_suggestions_url_post_params() {
  _has_bits_[0] |= 0x00001000u;
  return suggestions_url_post_params_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::release_suggestions_url_post_params() {
  // @@protoc_insertion_point(field_release:sync_pb.SearchEngineSpecifics.suggestions_url_post_params)
  if (!_internal_has_suggestions_url_post_params()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  auto* p = suggestions_url_post_params_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (suggestions_url_post_params_.IsDefault()) {
    suggestions_url_post_params_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SearchEngineSpecifics::set_allocated_suggestions_url_post_params(std::string* suggestions_url_post_params) {
  if (suggestions_url_post_params != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  suggestions_url_post_params_.SetAllocated(suggestions_url_post_params, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (suggestions_url_post_params_.IsDefault()) {
    suggestions_url_post_params_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SearchEngineSpecifics.suggestions_url_post_params)
}

// optional string instant_url_post_params = 24 [deprecated = true];
inline bool SearchEngineSpecifics::_internal_has_instant_url_post_params() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_instant_url_post_params() const {
  return _internal_has_instant_url_post_params();
}
inline void SearchEngineSpecifics::clear_instant_url_post_params() {
  instant_url_post_params_.ClearToEmpty();
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& SearchEngineSpecifics::instant_url_post_params() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.instant_url_post_params)
  return _internal_instant_url_post_params();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchEngineSpecifics::set_instant_url_post_params(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00002000u;
 instant_url_post_params_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.instant_url_post_params)
}
inline std::string* SearchEngineSpecifics::mutable_instant_url_post_params() {
  std::string* _s = _internal_mutable_instant_url_post_params();
  // @@protoc_insertion_point(field_mutable:sync_pb.SearchEngineSpecifics.instant_url_post_params)
  return _s;
}
inline const std::string& SearchEngineSpecifics::_internal_instant_url_post_params() const {
  return instant_url_post_params_.Get();
}
inline void SearchEngineSpecifics::_internal_set_instant_url_post_params(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  instant_url_post_params_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::_internal_mutable_instant_url_post_params() {
  _has_bits_[0] |= 0x00002000u;
  return instant_url_post_params_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::release_instant_url_post_params() {
  // @@protoc_insertion_point(field_release:sync_pb.SearchEngineSpecifics.instant_url_post_params)
  if (!_internal_has_instant_url_post_params()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  auto* p = instant_url_post_params_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instant_url_post_params_.IsDefault()) {
    instant_url_post_params_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SearchEngineSpecifics::set_allocated_instant_url_post_params(std::string* instant_url_post_params) {
  if (instant_url_post_params != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  instant_url_post_params_.SetAllocated(instant_url_post_params, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instant_url_post_params_.IsDefault()) {
    instant_url_post_params_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SearchEngineSpecifics.instant_url_post_params)
}

// optional string image_url_post_params = 25;
inline bool SearchEngineSpecifics::_internal_has_image_url_post_params() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_image_url_post_params() const {
  return _internal_has_image_url_post_params();
}
inline void SearchEngineSpecifics::clear_image_url_post_params() {
  image_url_post_params_.ClearToEmpty();
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& SearchEngineSpecifics::image_url_post_params() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.image_url_post_params)
  return _internal_image_url_post_params();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchEngineSpecifics::set_image_url_post_params(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00004000u;
 image_url_post_params_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.image_url_post_params)
}
inline std::string* SearchEngineSpecifics::mutable_image_url_post_params() {
  std::string* _s = _internal_mutable_image_url_post_params();
  // @@protoc_insertion_point(field_mutable:sync_pb.SearchEngineSpecifics.image_url_post_params)
  return _s;
}
inline const std::string& SearchEngineSpecifics::_internal_image_url_post_params() const {
  return image_url_post_params_.Get();
}
inline void SearchEngineSpecifics::_internal_set_image_url_post_params(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  image_url_post_params_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::_internal_mutable_image_url_post_params() {
  _has_bits_[0] |= 0x00004000u;
  return image_url_post_params_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::release_image_url_post_params() {
  // @@protoc_insertion_point(field_release:sync_pb.SearchEngineSpecifics.image_url_post_params)
  if (!_internal_has_image_url_post_params()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  auto* p = image_url_post_params_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_url_post_params_.IsDefault()) {
    image_url_post_params_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SearchEngineSpecifics::set_allocated_image_url_post_params(std::string* image_url_post_params) {
  if (image_url_post_params != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  image_url_post_params_.SetAllocated(image_url_post_params, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_url_post_params_.IsDefault()) {
    image_url_post_params_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SearchEngineSpecifics.image_url_post_params)
}

// optional string new_tab_url = 26;
inline bool SearchEngineSpecifics::_internal_has_new_tab_url() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_new_tab_url() const {
  return _internal_has_new_tab_url();
}
inline void SearchEngineSpecifics::clear_new_tab_url() {
  new_tab_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00008000u;
}
inline const std::string& SearchEngineSpecifics::new_tab_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.new_tab_url)
  return _internal_new_tab_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchEngineSpecifics::set_new_tab_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00008000u;
 new_tab_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.new_tab_url)
}
inline std::string* SearchEngineSpecifics::mutable_new_tab_url() {
  std::string* _s = _internal_mutable_new_tab_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.SearchEngineSpecifics.new_tab_url)
  return _s;
}
inline const std::string& SearchEngineSpecifics::_internal_new_tab_url() const {
  return new_tab_url_.Get();
}
inline void SearchEngineSpecifics::_internal_set_new_tab_url(const std::string& value) {
  _has_bits_[0] |= 0x00008000u;
  new_tab_url_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::_internal_mutable_new_tab_url() {
  _has_bits_[0] |= 0x00008000u;
  return new_tab_url_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchEngineSpecifics::release_new_tab_url() {
  // @@protoc_insertion_point(field_release:sync_pb.SearchEngineSpecifics.new_tab_url)
  if (!_internal_has_new_tab_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00008000u;
  auto* p = new_tab_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (new_tab_url_.IsDefault()) {
    new_tab_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SearchEngineSpecifics::set_allocated_new_tab_url(std::string* new_tab_url) {
  if (new_tab_url != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  new_tab_url_.SetAllocated(new_tab_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (new_tab_url_.IsDefault()) {
    new_tab_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SearchEngineSpecifics.new_tab_url)
}

// optional .sync_pb.SearchEngineSpecifics.ActiveStatus is_active = 27;
inline bool SearchEngineSpecifics::_internal_has_is_active() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_is_active() const {
  return _internal_has_is_active();
}
inline void SearchEngineSpecifics::clear_is_active() {
  is_active_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::sync_pb::SearchEngineSpecifics_ActiveStatus SearchEngineSpecifics::_internal_is_active() const {
  return static_cast< ::sync_pb::SearchEngineSpecifics_ActiveStatus >(is_active_);
}
inline ::sync_pb::SearchEngineSpecifics_ActiveStatus SearchEngineSpecifics::is_active() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.is_active)
  return _internal_is_active();
}
inline void SearchEngineSpecifics::_internal_set_is_active(::sync_pb::SearchEngineSpecifics_ActiveStatus value) {
  assert(::sync_pb::SearchEngineSpecifics_ActiveStatus_IsValid(value));
  _has_bits_[0] |= 0x00400000u;
  is_active_ = value;
}
inline void SearchEngineSpecifics::set_is_active(::sync_pb::SearchEngineSpecifics_ActiveStatus value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.is_active)
}

// optional int32 starter_pack_id = 28;
inline bool SearchEngineSpecifics::_internal_has_starter_pack_id() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool SearchEngineSpecifics::has_starter_pack_id() const {
  return _internal_has_starter_pack_id();
}
inline void SearchEngineSpecifics::clear_starter_pack_id() {
  starter_pack_id_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline int32_t SearchEngineSpecifics::_internal_starter_pack_id() const {
  return starter_pack_id_;
}
inline int32_t SearchEngineSpecifics::starter_pack_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.SearchEngineSpecifics.starter_pack_id)
  return _internal_starter_pack_id();
}
inline void SearchEngineSpecifics::_internal_set_starter_pack_id(int32_t value) {
  _has_bits_[0] |= 0x00800000u;
  starter_pack_id_ = value;
}
inline void SearchEngineSpecifics::set_starter_pack_id(int32_t value) {
  _internal_set_starter_pack_id(value);
  // @@protoc_insertion_point(field_set:sync_pb.SearchEngineSpecifics.starter_pack_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::SearchEngineSpecifics_ActiveStatus> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fsearch_5fengine_5fspecifics_2eproto
