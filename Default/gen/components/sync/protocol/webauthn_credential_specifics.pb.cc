// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/webauthn_credential_specifics.proto

#include "components/sync/protocol/webauthn_credential_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR WebauthnCredentialSpecifics::WebauthnCredentialSpecifics(
    ::_pbi::ConstantInitialized)
  : newly_shadowed_credential_ids_()
  , sync_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , credential_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , rp_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_display_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , private_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , creation_time_(int64_t{0})
  , third_party_payments_support_(false){}
struct WebauthnCredentialSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebauthnCredentialSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebauthnCredentialSpecificsDefaultTypeInternal() {}
  union {
    WebauthnCredentialSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebauthnCredentialSpecificsDefaultTypeInternal _WebauthnCredentialSpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class WebauthnCredentialSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<WebauthnCredentialSpecifics>()._has_bits_);
  static void set_has_sync_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_credential_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rp_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_user_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_private_key(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_third_party_payments_support(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

WebauthnCredentialSpecifics::WebauthnCredentialSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  newly_shadowed_credential_ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WebauthnCredentialSpecifics)
}
WebauthnCredentialSpecifics::WebauthnCredentialSpecifics(const WebauthnCredentialSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      newly_shadowed_credential_ids_(from.newly_shadowed_credential_ids_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  sync_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sync_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sync_id()) {
    sync_id_.Set(from._internal_sync_id(), 
      GetArenaForAllocation());
  }
  credential_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    credential_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_credential_id()) {
    credential_id_.Set(from._internal_credential_id(), 
      GetArenaForAllocation());
  }
  rp_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rp_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rp_id()) {
    rp_id_.Set(from._internal_rp_id(), 
      GetArenaForAllocation());
  }
  user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    user_id_.Set(from._internal_user_id(), 
      GetArenaForAllocation());
  }
  user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_name()) {
    user_name_.Set(from._internal_user_name(), 
      GetArenaForAllocation());
  }
  user_display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_display_name()) {
    user_display_name_.Set(from._internal_user_display_name(), 
      GetArenaForAllocation());
  }
  private_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    private_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_private_key()) {
    private_key_.Set(from._internal_private_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&creation_time_, &from.creation_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&third_party_payments_support_) -
    reinterpret_cast<char*>(&creation_time_)) + sizeof(third_party_payments_support_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.WebauthnCredentialSpecifics)
}

inline void WebauthnCredentialSpecifics::SharedCtor() {
sync_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sync_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
credential_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  credential_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rp_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rp_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_display_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_display_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
private_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  private_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&creation_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&third_party_payments_support_) -
    reinterpret_cast<char*>(&creation_time_)) + sizeof(third_party_payments_support_));
}

WebauthnCredentialSpecifics::~WebauthnCredentialSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.WebauthnCredentialSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebauthnCredentialSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sync_id_.Destroy();
  credential_id_.Destroy();
  rp_id_.Destroy();
  user_id_.Destroy();
  user_name_.Destroy();
  user_display_name_.Destroy();
  private_key_.Destroy();
}

void WebauthnCredentialSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WebauthnCredentialSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WebauthnCredentialSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  newly_shadowed_credential_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      sync_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      credential_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      rp_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      user_display_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      private_key_.ClearNonDefaultToEmpty();
    }
  }
  creation_time_ = int64_t{0};
  third_party_payments_support_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WebauthnCredentialSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes sync_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sync_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes credential_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_credential_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rp_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rp_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes newly_shadowed_credential_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_newly_shadowed_credential_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 creation_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_creation_time(&has_bits);
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string user_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string user_display_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_user_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes private_key = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_private_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool third_party_payments_support = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_third_party_payments_support(&has_bits);
          third_party_payments_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebauthnCredentialSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WebauthnCredentialSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes sync_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sync_id(), target);
  }

  // optional bytes credential_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_credential_id(), target);
  }

  // optional string rp_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rp_id(), target);
  }

  // optional bytes user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_user_id(), target);
  }

  // repeated bytes newly_shadowed_credential_ids = 5;
  for (int i = 0, n = this->_internal_newly_shadowed_credential_ids_size(); i < n; i++) {
    const auto& s = this->_internal_newly_shadowed_credential_ids(i);
    target = stream->WriteBytes(5, s, target);
  }

  // optional int64 creation_time = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_creation_time(), target);
  }

  // optional string user_name = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_user_name(), target);
  }

  // optional string user_display_name = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_user_display_name(), target);
  }

  // optional bytes private_key = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_private_key(), target);
  }

  // optional bool third_party_payments_support = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_third_party_payments_support(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WebauthnCredentialSpecifics)
  return target;
}

size_t WebauthnCredentialSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WebauthnCredentialSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes newly_shadowed_credential_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(newly_shadowed_credential_ids_.size());
  for (int i = 0, n = newly_shadowed_credential_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      newly_shadowed_credential_ids_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes sync_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sync_id());
    }

    // optional bytes credential_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_credential_id());
    }

    // optional string rp_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rp_id());
    }

    // optional bytes user_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_user_id());
    }

    // optional string user_name = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_name());
    }

    // optional string user_display_name = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_display_name());
    }

    // optional bytes private_key = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_private_key());
    }

    // optional int64 creation_time = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_creation_time());
    }

  }
  // optional bool third_party_payments_support = 11;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebauthnCredentialSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WebauthnCredentialSpecifics*>(
      &from));
}

void WebauthnCredentialSpecifics::MergeFrom(const WebauthnCredentialSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WebauthnCredentialSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  newly_shadowed_credential_ids_.MergeFrom(from.newly_shadowed_credential_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sync_id(from._internal_sync_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_credential_id(from._internal_credential_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_rp_id(from._internal_rp_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_user_display_name(from._internal_user_display_name());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_private_key(from._internal_private_key());
    }
    if (cached_has_bits & 0x00000080u) {
      creation_time_ = from.creation_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_third_party_payments_support(from._internal_third_party_payments_support());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WebauthnCredentialSpecifics::CopyFrom(const WebauthnCredentialSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WebauthnCredentialSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebauthnCredentialSpecifics::IsInitialized() const {
  return true;
}

void WebauthnCredentialSpecifics::InternalSwap(WebauthnCredentialSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  newly_shadowed_credential_ids_.InternalSwap(&other->newly_shadowed_credential_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sync_id_, lhs_arena,
      &other->sync_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &credential_id_, lhs_arena,
      &other->credential_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rp_id_, lhs_arena,
      &other->rp_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_name_, lhs_arena,
      &other->user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_display_name_, lhs_arena,
      &other->user_display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &private_key_, lhs_arena,
      &other->private_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WebauthnCredentialSpecifics, third_party_payments_support_)
      + sizeof(WebauthnCredentialSpecifics::third_party_payments_support_)
      - PROTOBUF_FIELD_OFFSET(WebauthnCredentialSpecifics, creation_time_)>(
          reinterpret_cast<char*>(&creation_time_),
          reinterpret_cast<char*>(&other->creation_time_));
}

std::string WebauthnCredentialSpecifics::GetTypeName() const {
  return "sync_pb.WebauthnCredentialSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::WebauthnCredentialSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::WebauthnCredentialSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WebauthnCredentialSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
