// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/sync_invalidations_payload.proto

#include "components/sync/protocol/sync_invalidations_payload.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR SyncInvalidationsPayload_DataTypeInvalidation::SyncInvalidationsPayload_DataTypeInvalidation(
    ::_pbi::ConstantInitialized)
  : data_type_id_(0){}
struct SyncInvalidationsPayload_DataTypeInvalidationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncInvalidationsPayload_DataTypeInvalidationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncInvalidationsPayload_DataTypeInvalidationDefaultTypeInternal() {}
  union {
    SyncInvalidationsPayload_DataTypeInvalidation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncInvalidationsPayload_DataTypeInvalidationDefaultTypeInternal _SyncInvalidationsPayload_DataTypeInvalidation_default_instance_;
PROTOBUF_CONSTEXPR SyncInvalidationsPayload::SyncInvalidationsPayload(
    ::_pbi::ConstantInitialized)
  : data_type_invalidations_()
  , hint_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , version_(int64_t{0}){}
struct SyncInvalidationsPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncInvalidationsPayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncInvalidationsPayloadDefaultTypeInternal() {}
  union {
    SyncInvalidationsPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncInvalidationsPayloadDefaultTypeInternal _SyncInvalidationsPayload_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class SyncInvalidationsPayload_DataTypeInvalidation::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncInvalidationsPayload_DataTypeInvalidation>()._has_bits_);
  static void set_has_data_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncInvalidationsPayload_DataTypeInvalidation::SyncInvalidationsPayload_DataTypeInvalidation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SyncInvalidationsPayload.DataTypeInvalidation)
}
SyncInvalidationsPayload_DataTypeInvalidation::SyncInvalidationsPayload_DataTypeInvalidation(const SyncInvalidationsPayload_DataTypeInvalidation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  data_type_id_ = from.data_type_id_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.SyncInvalidationsPayload.DataTypeInvalidation)
}

inline void SyncInvalidationsPayload_DataTypeInvalidation::SharedCtor() {
data_type_id_ = 0;
}

SyncInvalidationsPayload_DataTypeInvalidation::~SyncInvalidationsPayload_DataTypeInvalidation() {
  // @@protoc_insertion_point(destructor:sync_pb.SyncInvalidationsPayload.DataTypeInvalidation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncInvalidationsPayload_DataTypeInvalidation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncInvalidationsPayload_DataTypeInvalidation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncInvalidationsPayload_DataTypeInvalidation::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SyncInvalidationsPayload.DataTypeInvalidation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_type_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SyncInvalidationsPayload_DataTypeInvalidation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 data_type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_data_type_id(&has_bits);
          data_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncInvalidationsPayload_DataTypeInvalidation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SyncInvalidationsPayload.DataTypeInvalidation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 data_type_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_data_type_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SyncInvalidationsPayload.DataTypeInvalidation)
  return target;
}

size_t SyncInvalidationsPayload_DataTypeInvalidation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SyncInvalidationsPayload.DataTypeInvalidation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 data_type_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_type_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncInvalidationsPayload_DataTypeInvalidation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SyncInvalidationsPayload_DataTypeInvalidation*>(
      &from));
}

void SyncInvalidationsPayload_DataTypeInvalidation::MergeFrom(const SyncInvalidationsPayload_DataTypeInvalidation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SyncInvalidationsPayload.DataTypeInvalidation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data_type_id()) {
    _internal_set_data_type_id(from._internal_data_type_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SyncInvalidationsPayload_DataTypeInvalidation::CopyFrom(const SyncInvalidationsPayload_DataTypeInvalidation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SyncInvalidationsPayload.DataTypeInvalidation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncInvalidationsPayload_DataTypeInvalidation::IsInitialized() const {
  return true;
}

void SyncInvalidationsPayload_DataTypeInvalidation::InternalSwap(SyncInvalidationsPayload_DataTypeInvalidation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_type_id_, other->data_type_id_);
}

std::string SyncInvalidationsPayload_DataTypeInvalidation::GetTypeName() const {
  return "sync_pb.SyncInvalidationsPayload.DataTypeInvalidation";
}


// ===================================================================

class SyncInvalidationsPayload::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncInvalidationsPayload>()._has_bits_);
  static void set_has_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SyncInvalidationsPayload::SyncInvalidationsPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  data_type_invalidations_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SyncInvalidationsPayload)
}
SyncInvalidationsPayload::SyncInvalidationsPayload(const SyncInvalidationsPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      data_type_invalidations_(from.data_type_invalidations_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  hint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hint()) {
    hint_.Set(from._internal_hint(), 
      GetArenaForAllocation());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.SyncInvalidationsPayload)
}

inline void SyncInvalidationsPayload::SharedCtor() {
hint_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hint_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_ = int64_t{0};
}

SyncInvalidationsPayload::~SyncInvalidationsPayload() {
  // @@protoc_insertion_point(destructor:sync_pb.SyncInvalidationsPayload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncInvalidationsPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hint_.Destroy();
}

void SyncInvalidationsPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncInvalidationsPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SyncInvalidationsPayload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_type_invalidations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hint_.ClearNonDefaultToEmpty();
  }
  version_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SyncInvalidationsPayload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sync_pb.SyncInvalidationsPayload.DataTypeInvalidation data_type_invalidations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_type_invalidations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes hint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncInvalidationsPayload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SyncInvalidationsPayload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sync_pb.SyncInvalidationsPayload.DataTypeInvalidation data_type_invalidations = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_type_invalidations_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_type_invalidations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes hint = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_hint(), target);
  }

  // optional int64 version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SyncInvalidationsPayload)
  return target;
}

size_t SyncInvalidationsPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SyncInvalidationsPayload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.SyncInvalidationsPayload.DataTypeInvalidation data_type_invalidations = 1;
  total_size += 1UL * this->_internal_data_type_invalidations_size();
  for (const auto& msg : this->data_type_invalidations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes hint = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hint());
    }

    // optional int64 version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncInvalidationsPayload::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SyncInvalidationsPayload*>(
      &from));
}

void SyncInvalidationsPayload::MergeFrom(const SyncInvalidationsPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SyncInvalidationsPayload)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_type_invalidations_.MergeFrom(from.data_type_invalidations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hint(from._internal_hint());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SyncInvalidationsPayload::CopyFrom(const SyncInvalidationsPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SyncInvalidationsPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncInvalidationsPayload::IsInitialized() const {
  return true;
}

void SyncInvalidationsPayload::InternalSwap(SyncInvalidationsPayload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_type_invalidations_.InternalSwap(&other->data_type_invalidations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hint_, lhs_arena,
      &other->hint_, rhs_arena
  );
  swap(version_, other->version_);
}

std::string SyncInvalidationsPayload::GetTypeName() const {
  return "sync_pb.SyncInvalidationsPayload";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::SyncInvalidationsPayload_DataTypeInvalidation*
Arena::CreateMaybeMessage< ::sync_pb::SyncInvalidationsPayload_DataTypeInvalidation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SyncInvalidationsPayload_DataTypeInvalidation >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SyncInvalidationsPayload*
Arena::CreateMaybeMessage< ::sync_pb::SyncInvalidationsPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SyncInvalidationsPayload >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
