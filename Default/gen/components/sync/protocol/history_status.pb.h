// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/history_status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fhistory_5fstatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fhistory_5fstatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fhistory_5fstatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fhistory_5fstatus_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class HistoryStatusRequest;
struct HistoryStatusRequestDefaultTypeInternal;
extern HistoryStatusRequestDefaultTypeInternal _HistoryStatusRequest_default_instance_;
class HistoryStatusResponse;
struct HistoryStatusResponseDefaultTypeInternal;
extern HistoryStatusResponseDefaultTypeInternal _HistoryStatusResponse_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::HistoryStatusRequest* Arena::CreateMaybeMessage<::sync_pb::HistoryStatusRequest>(Arena*);
template<> ::sync_pb::HistoryStatusResponse* Arena::CreateMaybeMessage<::sync_pb::HistoryStatusResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class HistoryStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.HistoryStatusRequest) */ {
 public:
  inline HistoryStatusRequest() : HistoryStatusRequest(nullptr) {}
  ~HistoryStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR HistoryStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HistoryStatusRequest(const HistoryStatusRequest& from);
  HistoryStatusRequest(HistoryStatusRequest&& from) noexcept
    : HistoryStatusRequest() {
    *this = ::std::move(from);
  }

  inline HistoryStatusRequest& operator=(const HistoryStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryStatusRequest& operator=(HistoryStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HistoryStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HistoryStatusRequest* internal_default_instance() {
    return reinterpret_cast<const HistoryStatusRequest*>(
               &_HistoryStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HistoryStatusRequest& a, HistoryStatusRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(HistoryStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoryStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HistoryStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HistoryStatusRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HistoryStatusRequest& from);
  void MergeFrom(const HistoryStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HistoryStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.HistoryStatusRequest";
  }
  protected:
  explicit HistoryStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sync_pb.HistoryStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fhistory_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class HistoryStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.HistoryStatusResponse) */ {
 public:
  inline HistoryStatusResponse() : HistoryStatusResponse(nullptr) {}
  ~HistoryStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR HistoryStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HistoryStatusResponse(const HistoryStatusResponse& from);
  HistoryStatusResponse(HistoryStatusResponse&& from) noexcept
    : HistoryStatusResponse() {
    *this = ::std::move(from);
  }

  inline HistoryStatusResponse& operator=(const HistoryStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryStatusResponse& operator=(HistoryStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HistoryStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HistoryStatusResponse* internal_default_instance() {
    return reinterpret_cast<const HistoryStatusResponse*>(
               &_HistoryStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HistoryStatusResponse& a, HistoryStatusResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(HistoryStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoryStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HistoryStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HistoryStatusResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HistoryStatusResponse& from);
  void MergeFrom(const HistoryStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HistoryStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.HistoryStatusResponse";
  }
  protected:
  explicit HistoryStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHasDerivedDataFieldNumber = 2,
    kMinPollIntervalSecondsFieldNumber = 1,
  };
  // optional bool has_derived_data = 2;
  bool has_has_derived_data() const;
  private:
  bool _internal_has_has_derived_data() const;
  public:
  void clear_has_derived_data();
  bool has_derived_data() const;
  void set_has_derived_data(bool value);
  private:
  bool _internal_has_derived_data() const;
  void _internal_set_has_derived_data(bool value);
  public:

  // optional int32 min_poll_interval_seconds = 1 [default = 3600];
  bool has_min_poll_interval_seconds() const;
  private:
  bool _internal_has_min_poll_interval_seconds() const;
  public:
  void clear_min_poll_interval_seconds();
  int32_t min_poll_interval_seconds() const;
  void set_min_poll_interval_seconds(int32_t value);
  private:
  int32_t _internal_min_poll_interval_seconds() const;
  void _internal_set_min_poll_interval_seconds(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.HistoryStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool has_derived_data_;
  int32_t min_poll_interval_seconds_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fhistory_5fstatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HistoryStatusRequest

// -------------------------------------------------------------------

// HistoryStatusResponse

// optional int32 min_poll_interval_seconds = 1 [default = 3600];
inline bool HistoryStatusResponse::_internal_has_min_poll_interval_seconds() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HistoryStatusResponse::has_min_poll_interval_seconds() const {
  return _internal_has_min_poll_interval_seconds();
}
inline void HistoryStatusResponse::clear_min_poll_interval_seconds() {
  min_poll_interval_seconds_ = 3600;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t HistoryStatusResponse::_internal_min_poll_interval_seconds() const {
  return min_poll_interval_seconds_;
}
inline int32_t HistoryStatusResponse::min_poll_interval_seconds() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistoryStatusResponse.min_poll_interval_seconds)
  return _internal_min_poll_interval_seconds();
}
inline void HistoryStatusResponse::_internal_set_min_poll_interval_seconds(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  min_poll_interval_seconds_ = value;
}
inline void HistoryStatusResponse::set_min_poll_interval_seconds(int32_t value) {
  _internal_set_min_poll_interval_seconds(value);
  // @@protoc_insertion_point(field_set:sync_pb.HistoryStatusResponse.min_poll_interval_seconds)
}

// optional bool has_derived_data = 2;
inline bool HistoryStatusResponse::_internal_has_has_derived_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HistoryStatusResponse::has_has_derived_data() const {
  return _internal_has_has_derived_data();
}
inline void HistoryStatusResponse::clear_has_derived_data() {
  has_derived_data_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool HistoryStatusResponse::_internal_has_derived_data() const {
  return has_derived_data_;
}
inline bool HistoryStatusResponse::has_derived_data() const {
  // @@protoc_insertion_point(field_get:sync_pb.HistoryStatusResponse.has_derived_data)
  return _internal_has_derived_data();
}
inline void HistoryStatusResponse::_internal_set_has_derived_data(bool value) {
  _has_bits_[0] |= 0x00000001u;
  has_derived_data_ = value;
}
inline void HistoryStatusResponse::set_has_derived_data(bool value) {
  _internal_set_has_derived_data(value);
  // @@protoc_insertion_point(field_set:sync_pb.HistoryStatusResponse.has_derived_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fhistory_5fstatus_2eproto
