// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/search_engine_specifics.proto

#include "components/sync/protocol/search_engine_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR SearchEngineSpecifics::SearchEngineSpecifics(
    ::_pbi::ConstantInitialized)
  : alternate_urls_()
  , short_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , keyword_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , favicon_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , originating_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , input_encodings_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , suggestions_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , instant_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sync_guid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , search_terms_replacement_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , image_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , search_url_post_params_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , suggestions_url_post_params_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , instant_url_post_params_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , image_url_post_params_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , new_tab_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , date_created_(int64_t{0})
  , safe_for_autoreplace_(false)
  , deprecated_show_in_default_list_(false)
  , autogenerate_keyword_(false)
  , prepopulate_id_(0)
  , last_modified_(int64_t{0})
  , is_active_(0)

  , starter_pack_id_(0){}
struct SearchEngineSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchEngineSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchEngineSpecificsDefaultTypeInternal() {}
  union {
    SearchEngineSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchEngineSpecificsDefaultTypeInternal _SearchEngineSpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {
bool SearchEngineSpecifics_ActiveStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SearchEngineSpecifics_ActiveStatus_strings[3] = {};

static const char SearchEngineSpecifics_ActiveStatus_names[] =
  "ACTIVE_STATUS_FALSE"
  "ACTIVE_STATUS_TRUE"
  "ACTIVE_STATUS_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SearchEngineSpecifics_ActiveStatus_entries[] = {
  { {SearchEngineSpecifics_ActiveStatus_names + 0, 19}, 2 },
  { {SearchEngineSpecifics_ActiveStatus_names + 19, 18}, 1 },
  { {SearchEngineSpecifics_ActiveStatus_names + 37, 25}, 0 },
};

static const int SearchEngineSpecifics_ActiveStatus_entries_by_number[] = {
  2, // 0 -> ACTIVE_STATUS_UNSPECIFIED
  1, // 1 -> ACTIVE_STATUS_TRUE
  0, // 2 -> ACTIVE_STATUS_FALSE
};

const std::string& SearchEngineSpecifics_ActiveStatus_Name(
    SearchEngineSpecifics_ActiveStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SearchEngineSpecifics_ActiveStatus_entries,
          SearchEngineSpecifics_ActiveStatus_entries_by_number,
          3, SearchEngineSpecifics_ActiveStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SearchEngineSpecifics_ActiveStatus_entries,
      SearchEngineSpecifics_ActiveStatus_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SearchEngineSpecifics_ActiveStatus_strings[idx].get();
}
bool SearchEngineSpecifics_ActiveStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SearchEngineSpecifics_ActiveStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SearchEngineSpecifics_ActiveStatus_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<SearchEngineSpecifics_ActiveStatus>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SearchEngineSpecifics_ActiveStatus SearchEngineSpecifics::ACTIVE_STATUS_UNSPECIFIED;
constexpr SearchEngineSpecifics_ActiveStatus SearchEngineSpecifics::ACTIVE_STATUS_TRUE;
constexpr SearchEngineSpecifics_ActiveStatus SearchEngineSpecifics::ACTIVE_STATUS_FALSE;
constexpr SearchEngineSpecifics_ActiveStatus SearchEngineSpecifics::ActiveStatus_MIN;
constexpr SearchEngineSpecifics_ActiveStatus SearchEngineSpecifics::ActiveStatus_MAX;
constexpr int SearchEngineSpecifics::ActiveStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SearchEngineSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<SearchEngineSpecifics>()._has_bits_);
  static void set_has_short_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_keyword(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_favicon_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_safe_for_autoreplace(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_originating_url(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_date_created(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_input_encodings(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_deprecated_show_in_default_list(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_suggestions_url(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_prepopulate_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_autogenerate_keyword(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_instant_url(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_last_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_sync_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_search_terms_replacement_key(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_image_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_search_url_post_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_suggestions_url_post_params(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_instant_url_post_params(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_image_url_post_params(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_new_tab_url(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_is_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_starter_pack_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
};

SearchEngineSpecifics::SearchEngineSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  alternate_urls_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SearchEngineSpecifics)
}
SearchEngineSpecifics::SearchEngineSpecifics(const SearchEngineSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      alternate_urls_(from.alternate_urls_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  short_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    short_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_short_name()) {
    short_name_.Set(from._internal_short_name(), 
      GetArenaForAllocation());
  }
  keyword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    keyword_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_keyword()) {
    keyword_.Set(from._internal_keyword(), 
      GetArenaForAllocation());
  }
  favicon_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    favicon_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_favicon_url()) {
    favicon_url_.Set(from._internal_favicon_url(), 
      GetArenaForAllocation());
  }
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  originating_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    originating_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_originating_url()) {
    originating_url_.Set(from._internal_originating_url(), 
      GetArenaForAllocation());
  }
  input_encodings_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    input_encodings_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_input_encodings()) {
    input_encodings_.Set(from._internal_input_encodings(), 
      GetArenaForAllocation());
  }
  suggestions_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    suggestions_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_suggestions_url()) {
    suggestions_url_.Set(from._internal_suggestions_url(), 
      GetArenaForAllocation());
  }
  instant_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instant_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instant_url()) {
    instant_url_.Set(from._internal_instant_url(), 
      GetArenaForAllocation());
  }
  sync_guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sync_guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sync_guid()) {
    sync_guid_.Set(from._internal_sync_guid(), 
      GetArenaForAllocation());
  }
  search_terms_replacement_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    search_terms_replacement_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_search_terms_replacement_key()) {
    search_terms_replacement_key_.Set(from._internal_search_terms_replacement_key(), 
      GetArenaForAllocation());
  }
  image_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_image_url()) {
    image_url_.Set(from._internal_image_url(), 
      GetArenaForAllocation());
  }
  search_url_post_params_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    search_url_post_params_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_search_url_post_params()) {
    search_url_post_params_.Set(from._internal_search_url_post_params(), 
      GetArenaForAllocation());
  }
  suggestions_url_post_params_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    suggestions_url_post_params_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_suggestions_url_post_params()) {
    suggestions_url_post_params_.Set(from._internal_suggestions_url_post_params(), 
      GetArenaForAllocation());
  }
  instant_url_post_params_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instant_url_post_params_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instant_url_post_params()) {
    instant_url_post_params_.Set(from._internal_instant_url_post_params(), 
      GetArenaForAllocation());
  }
  image_url_post_params_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_url_post_params_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_image_url_post_params()) {
    image_url_post_params_.Set(from._internal_image_url_post_params(), 
      GetArenaForAllocation());
  }
  new_tab_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    new_tab_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_new_tab_url()) {
    new_tab_url_.Set(from._internal_new_tab_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&date_created_, &from.date_created_,
    static_cast<size_t>(reinterpret_cast<char*>(&starter_pack_id_) -
    reinterpret_cast<char*>(&date_created_)) + sizeof(starter_pack_id_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.SearchEngineSpecifics)
}

inline void SearchEngineSpecifics::SharedCtor() {
short_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  short_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
keyword_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  keyword_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
favicon_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  favicon_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
originating_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  originating_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
input_encodings_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  input_encodings_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
suggestions_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  suggestions_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instant_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instant_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sync_guid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sync_guid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
search_terms_replacement_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  search_terms_replacement_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
image_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
search_url_post_params_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  search_url_post_params_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
suggestions_url_post_params_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  suggestions_url_post_params_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instant_url_post_params_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instant_url_post_params_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
image_url_post_params_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_url_post_params_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
new_tab_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  new_tab_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&date_created_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&starter_pack_id_) -
    reinterpret_cast<char*>(&date_created_)) + sizeof(starter_pack_id_));
}

SearchEngineSpecifics::~SearchEngineSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.SearchEngineSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchEngineSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  short_name_.Destroy();
  keyword_.Destroy();
  favicon_url_.Destroy();
  url_.Destroy();
  originating_url_.Destroy();
  input_encodings_.Destroy();
  suggestions_url_.Destroy();
  instant_url_.Destroy();
  sync_guid_.Destroy();
  search_terms_replacement_key_.Destroy();
  image_url_.Destroy();
  search_url_post_params_.Destroy();
  suggestions_url_post_params_.Destroy();
  instant_url_post_params_.Destroy();
  image_url_post_params_.Destroy();
  new_tab_url_.Destroy();
}

void SearchEngineSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SearchEngineSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SearchEngineSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternate_urls_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      short_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      keyword_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      favicon_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      originating_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      input_encodings_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      suggestions_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      instant_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      sync_guid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      search_terms_replacement_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      image_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      search_url_post_params_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      suggestions_url_post_params_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      instant_url_post_params_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      image_url_post_params_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      new_tab_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&date_created_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&starter_pack_id_) -
        reinterpret_cast<char*>(&date_created_)) + sizeof(starter_pack_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SearchEngineSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string short_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_short_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string keyword = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_keyword();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string favicon_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_favicon_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool safe_for_autoreplace = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_safe_for_autoreplace(&has_bits);
          safe_for_autoreplace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string originating_url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_originating_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 date_created = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_date_created(&has_bits);
          date_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string input_encodings = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_input_encodings();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool deprecated_show_in_default_list = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_deprecated_show_in_default_list(&has_bits);
          deprecated_show_in_default_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string suggestions_url = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_suggestions_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 prepopulate_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_prepopulate_id(&has_bits);
          prepopulate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool autogenerate_keyword = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_autogenerate_keyword(&has_bits);
          autogenerate_keyword_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string instant_url = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_instant_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 last_modified = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_last_modified(&has_bits);
          last_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sync_guid = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_sync_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string alternate_urls = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_alternate_urls();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string search_terms_replacement_key = 20 [deprecated = true];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_search_terms_replacement_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string image_url = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_image_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string search_url_post_params = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_search_url_post_params();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string suggestions_url_post_params = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_suggestions_url_post_params();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string instant_url_post_params = 24 [deprecated = true];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_instant_url_post_params();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string image_url_post_params = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_image_url_post_params();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string new_tab_url = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_new_tab_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.SearchEngineSpecifics.ActiveStatus is_active = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SearchEngineSpecifics_ActiveStatus_IsValid(val))) {
            _internal_set_is_active(static_cast<::sync_pb::SearchEngineSpecifics_ActiveStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 starter_pack_id = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_starter_pack_id(&has_bits);
          starter_pack_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchEngineSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SearchEngineSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string short_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_short_name(), target);
  }

  // optional string keyword = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_keyword(), target);
  }

  // optional string favicon_url = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_favicon_url(), target);
  }

  // optional string url = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_url(), target);
  }

  // optional bool safe_for_autoreplace = 5;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_safe_for_autoreplace(), target);
  }

  // optional string originating_url = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_originating_url(), target);
  }

  // optional int64 date_created = 7;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_date_created(), target);
  }

  // optional string input_encodings = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_input_encodings(), target);
  }

  // optional bool deprecated_show_in_default_list = 9 [deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_deprecated_show_in_default_list(), target);
  }

  // optional string suggestions_url = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_suggestions_url(), target);
  }

  // optional int32 prepopulate_id = 11;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_prepopulate_id(), target);
  }

  // optional bool autogenerate_keyword = 12 [deprecated = true];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_autogenerate_keyword(), target);
  }

  // optional string instant_url = 15 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_instant_url(), target);
  }

  // optional int64 last_modified = 17;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_last_modified(), target);
  }

  // optional string sync_guid = 18;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_sync_guid(), target);
  }

  // repeated string alternate_urls = 19;
  for (int i = 0, n = this->_internal_alternate_urls_size(); i < n; i++) {
    const auto& s = this->_internal_alternate_urls(i);
    target = stream->WriteString(19, s, target);
  }

  // optional string search_terms_replacement_key = 20 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_search_terms_replacement_key(), target);
  }

  // optional string image_url = 21;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_image_url(), target);
  }

  // optional string search_url_post_params = 22;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_search_url_post_params(), target);
  }

  // optional string suggestions_url_post_params = 23;
  if (cached_has_bits & 0x00001000u) {
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_suggestions_url_post_params(), target);
  }

  // optional string instant_url_post_params = 24 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_instant_url_post_params(), target);
  }

  // optional string image_url_post_params = 25;
  if (cached_has_bits & 0x00004000u) {
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_image_url_post_params(), target);
  }

  // optional string new_tab_url = 26;
  if (cached_has_bits & 0x00008000u) {
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_new_tab_url(), target);
  }

  // optional .sync_pb.SearchEngineSpecifics.ActiveStatus is_active = 27;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      27, this->_internal_is_active(), target);
  }

  // optional int32 starter_pack_id = 28;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_starter_pack_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SearchEngineSpecifics)
  return target;
}

size_t SearchEngineSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SearchEngineSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string alternate_urls = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(alternate_urls_.size());
  for (int i = 0, n = alternate_urls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      alternate_urls_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string short_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_short_name());
    }

    // optional string keyword = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_keyword());
    }

    // optional string favicon_url = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_favicon_url());
    }

    // optional string url = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string originating_url = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_originating_url());
    }

    // optional string input_encodings = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_encodings());
    }

    // optional string suggestions_url = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_suggestions_url());
    }

    // optional string instant_url = 15 [deprecated = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instant_url());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string sync_guid = 18;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sync_guid());
    }

    // optional string search_terms_replacement_key = 20 [deprecated = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_search_terms_replacement_key());
    }

    // optional string image_url = 21;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image_url());
    }

    // optional string search_url_post_params = 22;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_search_url_post_params());
    }

    // optional string suggestions_url_post_params = 23;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_suggestions_url_post_params());
    }

    // optional string instant_url_post_params = 24 [deprecated = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instant_url_post_params());
    }

    // optional string image_url_post_params = 25;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image_url_post_params());
    }

    // optional string new_tab_url = 26;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_new_tab_url());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int64 date_created = 7;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_date_created());
    }

    // optional bool safe_for_autoreplace = 5;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool deprecated_show_in_default_list = 9 [deprecated = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool autogenerate_keyword = 12 [deprecated = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional int32 prepopulate_id = 11;
    if (cached_has_bits & 0x00100000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prepopulate_id());
    }

    // optional int64 last_modified = 17;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_last_modified());
    }

    // optional .sync_pb.SearchEngineSpecifics.ActiveStatus is_active = 27;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_is_active());
    }

    // optional int32 starter_pack_id = 28;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_starter_pack_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchEngineSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SearchEngineSpecifics*>(
      &from));
}

void SearchEngineSpecifics::MergeFrom(const SearchEngineSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SearchEngineSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  alternate_urls_.MergeFrom(from.alternate_urls_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_short_name(from._internal_short_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_keyword(from._internal_keyword());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_favicon_url(from._internal_favicon_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_originating_url(from._internal_originating_url());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_input_encodings(from._internal_input_encodings());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_suggestions_url(from._internal_suggestions_url());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_instant_url(from._internal_instant_url());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_sync_guid(from._internal_sync_guid());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_search_terms_replacement_key(from._internal_search_terms_replacement_key());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_image_url(from._internal_image_url());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_search_url_post_params(from._internal_search_url_post_params());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_suggestions_url_post_params(from._internal_suggestions_url_post_params());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_instant_url_post_params(from._internal_instant_url_post_params());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_image_url_post_params(from._internal_image_url_post_params());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_new_tab_url(from._internal_new_tab_url());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      date_created_ = from.date_created_;
    }
    if (cached_has_bits & 0x00020000u) {
      safe_for_autoreplace_ = from.safe_for_autoreplace_;
    }
    if (cached_has_bits & 0x00040000u) {
      deprecated_show_in_default_list_ = from.deprecated_show_in_default_list_;
    }
    if (cached_has_bits & 0x00080000u) {
      autogenerate_keyword_ = from.autogenerate_keyword_;
    }
    if (cached_has_bits & 0x00100000u) {
      prepopulate_id_ = from.prepopulate_id_;
    }
    if (cached_has_bits & 0x00200000u) {
      last_modified_ = from.last_modified_;
    }
    if (cached_has_bits & 0x00400000u) {
      is_active_ = from.is_active_;
    }
    if (cached_has_bits & 0x00800000u) {
      starter_pack_id_ = from.starter_pack_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SearchEngineSpecifics::CopyFrom(const SearchEngineSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SearchEngineSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchEngineSpecifics::IsInitialized() const {
  return true;
}

void SearchEngineSpecifics::InternalSwap(SearchEngineSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  alternate_urls_.InternalSwap(&other->alternate_urls_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &short_name_, lhs_arena,
      &other->short_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &keyword_, lhs_arena,
      &other->keyword_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &favicon_url_, lhs_arena,
      &other->favicon_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &originating_url_, lhs_arena,
      &other->originating_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &input_encodings_, lhs_arena,
      &other->input_encodings_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &suggestions_url_, lhs_arena,
      &other->suggestions_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &instant_url_, lhs_arena,
      &other->instant_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sync_guid_, lhs_arena,
      &other->sync_guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &search_terms_replacement_key_, lhs_arena,
      &other->search_terms_replacement_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &image_url_, lhs_arena,
      &other->image_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &search_url_post_params_, lhs_arena,
      &other->search_url_post_params_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &suggestions_url_post_params_, lhs_arena,
      &other->suggestions_url_post_params_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &instant_url_post_params_, lhs_arena,
      &other->instant_url_post_params_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &image_url_post_params_, lhs_arena,
      &other->image_url_post_params_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &new_tab_url_, lhs_arena,
      &other->new_tab_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchEngineSpecifics, starter_pack_id_)
      + sizeof(SearchEngineSpecifics::starter_pack_id_)
      - PROTOBUF_FIELD_OFFSET(SearchEngineSpecifics, date_created_)>(
          reinterpret_cast<char*>(&date_created_),
          reinterpret_cast<char*>(&other->date_created_));
}

std::string SearchEngineSpecifics::GetTypeName() const {
  return "sync_pb.SearchEngineSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::SearchEngineSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::SearchEngineSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SearchEngineSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
