// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/app_specifics.proto

#include "components/sync/protocol/app_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR AppNotificationSettings::AppNotificationSettings(
    ::_pbi::ConstantInitialized)
  : oauth_client_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , initial_setup_done_(false)
  , disabled_(false){}
struct AppNotificationSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppNotificationSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppNotificationSettingsDefaultTypeInternal() {}
  union {
    AppNotificationSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppNotificationSettingsDefaultTypeInternal _AppNotificationSettings_default_instance_;
PROTOBUF_CONSTEXPR LinkedAppIconInfo::LinkedAppIconInfo(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , size_(0u){}
struct LinkedAppIconInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinkedAppIconInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinkedAppIconInfoDefaultTypeInternal() {}
  union {
    LinkedAppIconInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinkedAppIconInfoDefaultTypeInternal _LinkedAppIconInfo_default_instance_;
PROTOBUF_CONSTEXPR AppSpecifics::AppSpecifics(
    ::_pbi::ConstantInitialized)
  : linked_app_icons_()
  , app_launch_ordinal_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , page_ordinal_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bookmark_app_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bookmark_app_description_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bookmark_app_icon_color_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bookmark_app_scope_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extension_(nullptr)
  , notification_settings_(nullptr)
  , launch_type_(0)

  , bookmark_app_theme_color_(0u){}
struct AppSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppSpecificsDefaultTypeInternal() {}
  union {
    AppSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppSpecificsDefaultTypeInternal _AppSpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {
bool AppSpecifics_LaunchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AppSpecifics_LaunchType_strings[4] = {};

static const char AppSpecifics_LaunchType_names[] =
  "FULLSCREEN"
  "PINNED"
  "REGULAR"
  "WINDOW";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AppSpecifics_LaunchType_entries[] = {
  { {AppSpecifics_LaunchType_names + 0, 10}, 2 },
  { {AppSpecifics_LaunchType_names + 10, 6}, 0 },
  { {AppSpecifics_LaunchType_names + 16, 7}, 1 },
  { {AppSpecifics_LaunchType_names + 23, 6}, 3 },
};

static const int AppSpecifics_LaunchType_entries_by_number[] = {
  1, // 0 -> PINNED
  2, // 1 -> REGULAR
  0, // 2 -> FULLSCREEN
  3, // 3 -> WINDOW
};

const std::string& AppSpecifics_LaunchType_Name(
    AppSpecifics_LaunchType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AppSpecifics_LaunchType_entries,
          AppSpecifics_LaunchType_entries_by_number,
          4, AppSpecifics_LaunchType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AppSpecifics_LaunchType_entries,
      AppSpecifics_LaunchType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AppSpecifics_LaunchType_strings[idx].get();
}
bool AppSpecifics_LaunchType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AppSpecifics_LaunchType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AppSpecifics_LaunchType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<AppSpecifics_LaunchType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AppSpecifics_LaunchType AppSpecifics::PINNED;
constexpr AppSpecifics_LaunchType AppSpecifics::REGULAR;
constexpr AppSpecifics_LaunchType AppSpecifics::FULLSCREEN;
constexpr AppSpecifics_LaunchType AppSpecifics::WINDOW;
constexpr AppSpecifics_LaunchType AppSpecifics::LaunchType_MIN;
constexpr AppSpecifics_LaunchType AppSpecifics::LaunchType_MAX;
constexpr int AppSpecifics::LaunchType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class AppNotificationSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<AppNotificationSettings>()._has_bits_);
  static void set_has_initial_setup_done(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_oauth_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppNotificationSettings::AppNotificationSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.AppNotificationSettings)
}
AppNotificationSettings::AppNotificationSettings(const AppNotificationSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  oauth_client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    oauth_client_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_oauth_client_id()) {
    oauth_client_id_.Set(from._internal_oauth_client_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&initial_setup_done_, &from.initial_setup_done_,
    static_cast<size_t>(reinterpret_cast<char*>(&disabled_) -
    reinterpret_cast<char*>(&initial_setup_done_)) + sizeof(disabled_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.AppNotificationSettings)
}

inline void AppNotificationSettings::SharedCtor() {
oauth_client_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  oauth_client_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&initial_setup_done_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disabled_) -
    reinterpret_cast<char*>(&initial_setup_done_)) + sizeof(disabled_));
}

AppNotificationSettings::~AppNotificationSettings() {
  // @@protoc_insertion_point(destructor:sync_pb.AppNotificationSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppNotificationSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  oauth_client_id_.Destroy();
}

void AppNotificationSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppNotificationSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AppNotificationSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    oauth_client_id_.ClearNonDefaultToEmpty();
  }
  ::memset(&initial_setup_done_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disabled_) -
      reinterpret_cast<char*>(&initial_setup_done_)) + sizeof(disabled_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AppNotificationSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool initial_setup_done = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_initial_setup_done(&has_bits);
          initial_setup_done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_disabled(&has_bits);
          disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string oauth_client_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_oauth_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppNotificationSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.AppNotificationSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool initial_setup_done = 1 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_initial_setup_done(), target);
  }

  // optional bool disabled = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_disabled(), target);
  }

  // optional string oauth_client_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_oauth_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.AppNotificationSettings)
  return target;
}

size_t AppNotificationSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AppNotificationSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string oauth_client_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oauth_client_id());
    }

    // optional bool initial_setup_done = 1 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool disabled = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppNotificationSettings::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AppNotificationSettings*>(
      &from));
}

void AppNotificationSettings::MergeFrom(const AppNotificationSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AppNotificationSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_oauth_client_id(from._internal_oauth_client_id());
    }
    if (cached_has_bits & 0x00000002u) {
      initial_setup_done_ = from.initial_setup_done_;
    }
    if (cached_has_bits & 0x00000004u) {
      disabled_ = from.disabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AppNotificationSettings::CopyFrom(const AppNotificationSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AppNotificationSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppNotificationSettings::IsInitialized() const {
  return true;
}

void AppNotificationSettings::InternalSwap(AppNotificationSettings* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &oauth_client_id_, lhs_arena,
      &other->oauth_client_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppNotificationSettings, disabled_)
      + sizeof(AppNotificationSettings::disabled_)
      - PROTOBUF_FIELD_OFFSET(AppNotificationSettings, initial_setup_done_)>(
          reinterpret_cast<char*>(&initial_setup_done_),
          reinterpret_cast<char*>(&other->initial_setup_done_));
}

std::string AppNotificationSettings::GetTypeName() const {
  return "sync_pb.AppNotificationSettings";
}


// ===================================================================

class LinkedAppIconInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<LinkedAppIconInfo>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LinkedAppIconInfo::LinkedAppIconInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.LinkedAppIconInfo)
}
LinkedAppIconInfo::LinkedAppIconInfo(const LinkedAppIconInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.LinkedAppIconInfo)
}

inline void LinkedAppIconInfo::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
size_ = 0u;
}

LinkedAppIconInfo::~LinkedAppIconInfo() {
  // @@protoc_insertion_point(destructor:sync_pb.LinkedAppIconInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LinkedAppIconInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
}

void LinkedAppIconInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LinkedAppIconInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.LinkedAppIconInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  size_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LinkedAppIconInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinkedAppIconInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.LinkedAppIconInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.LinkedAppIconInfo)
  return target;
}

size_t LinkedAppIconInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.LinkedAppIconInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional uint32 size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkedAppIconInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LinkedAppIconInfo*>(
      &from));
}

void LinkedAppIconInfo::MergeFrom(const LinkedAppIconInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.LinkedAppIconInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LinkedAppIconInfo::CopyFrom(const LinkedAppIconInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.LinkedAppIconInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkedAppIconInfo::IsInitialized() const {
  return true;
}

void LinkedAppIconInfo::InternalSwap(LinkedAppIconInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  swap(size_, other->size_);
}

std::string LinkedAppIconInfo::GetTypeName() const {
  return "sync_pb.LinkedAppIconInfo";
}


// ===================================================================

class AppSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<AppSpecifics>()._has_bits_);
  static const ::sync_pb::ExtensionSpecifics& extension(const AppSpecifics* msg);
  static void set_has_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::sync_pb::AppNotificationSettings& notification_settings(const AppSpecifics* msg);
  static void set_has_notification_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_app_launch_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_page_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_launch_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bookmark_app_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bookmark_app_description(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bookmark_app_icon_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bookmark_app_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bookmark_app_theme_color(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::sync_pb::ExtensionSpecifics&
AppSpecifics::_Internal::extension(const AppSpecifics* msg) {
  return *msg->extension_;
}
const ::sync_pb::AppNotificationSettings&
AppSpecifics::_Internal::notification_settings(const AppSpecifics* msg) {
  return *msg->notification_settings_;
}
void AppSpecifics::clear_extension() {
  if (extension_ != nullptr) extension_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
AppSpecifics::AppSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  linked_app_icons_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.AppSpecifics)
}
AppSpecifics::AppSpecifics(const AppSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      linked_app_icons_(from.linked_app_icons_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  app_launch_ordinal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_launch_ordinal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_launch_ordinal()) {
    app_launch_ordinal_.Set(from._internal_app_launch_ordinal(), 
      GetArenaForAllocation());
  }
  page_ordinal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    page_ordinal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_page_ordinal()) {
    page_ordinal_.Set(from._internal_page_ordinal(), 
      GetArenaForAllocation());
  }
  bookmark_app_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bookmark_app_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bookmark_app_url()) {
    bookmark_app_url_.Set(from._internal_bookmark_app_url(), 
      GetArenaForAllocation());
  }
  bookmark_app_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bookmark_app_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bookmark_app_description()) {
    bookmark_app_description_.Set(from._internal_bookmark_app_description(), 
      GetArenaForAllocation());
  }
  bookmark_app_icon_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bookmark_app_icon_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bookmark_app_icon_color()) {
    bookmark_app_icon_color_.Set(from._internal_bookmark_app_icon_color(), 
      GetArenaForAllocation());
  }
  bookmark_app_scope_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bookmark_app_scope_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bookmark_app_scope()) {
    bookmark_app_scope_.Set(from._internal_bookmark_app_scope(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extension()) {
    extension_ = new ::sync_pb::ExtensionSpecifics(*from.extension_);
  } else {
    extension_ = nullptr;
  }
  if (from._internal_has_notification_settings()) {
    notification_settings_ = new ::sync_pb::AppNotificationSettings(*from.notification_settings_);
  } else {
    notification_settings_ = nullptr;
  }
  ::memcpy(&launch_type_, &from.launch_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&bookmark_app_theme_color_) -
    reinterpret_cast<char*>(&launch_type_)) + sizeof(bookmark_app_theme_color_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.AppSpecifics)
}

inline void AppSpecifics::SharedCtor() {
app_launch_ordinal_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_launch_ordinal_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_ordinal_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  page_ordinal_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bookmark_app_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bookmark_app_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bookmark_app_description_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bookmark_app_description_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bookmark_app_icon_color_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bookmark_app_icon_color_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bookmark_app_scope_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bookmark_app_scope_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&extension_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bookmark_app_theme_color_) -
    reinterpret_cast<char*>(&extension_)) + sizeof(bookmark_app_theme_color_));
}

AppSpecifics::~AppSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.AppSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_launch_ordinal_.Destroy();
  page_ordinal_.Destroy();
  bookmark_app_url_.Destroy();
  bookmark_app_description_.Destroy();
  bookmark_app_icon_color_.Destroy();
  bookmark_app_scope_.Destroy();
  if (this != internal_default_instance()) delete extension_;
  if (this != internal_default_instance()) delete notification_settings_;
}

void AppSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AppSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  linked_app_icons_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      app_launch_ordinal_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      page_ordinal_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      bookmark_app_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      bookmark_app_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      bookmark_app_icon_color_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      bookmark_app_scope_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(extension_ != nullptr);
      extension_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(notification_settings_ != nullptr);
      notification_settings_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&launch_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bookmark_app_theme_color_) -
        reinterpret_cast<char*>(&launch_type_)) + sizeof(bookmark_app_theme_color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AppSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.ExtensionSpecifics extension = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AppNotificationSettings notification_settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_notification_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string app_launch_ordinal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_app_launch_ordinal();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string page_ordinal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_page_ordinal();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AppSpecifics.LaunchType launch_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::AppSpecifics_LaunchType_IsValid(val))) {
            _internal_set_launch_type(static_cast<::sync_pb::AppSpecifics_LaunchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string bookmark_app_url = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_bookmark_app_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string bookmark_app_description = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_bookmark_app_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string bookmark_app_icon_color = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_bookmark_app_icon_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.LinkedAppIconInfo linked_app_icons = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_linked_app_icons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string bookmark_app_scope = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_bookmark_app_scope();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bookmark_app_theme_color = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_bookmark_app_theme_color(&has_bits);
          bookmark_app_theme_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.AppSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.ExtensionSpecifics extension = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::extension(this),
        _Internal::extension(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.AppNotificationSettings notification_settings = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::notification_settings(this),
        _Internal::notification_settings(this).GetCachedSize(), target, stream);
  }

  // optional string app_launch_ordinal = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_app_launch_ordinal(), target);
  }

  // optional string page_ordinal = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_page_ordinal(), target);
  }

  // optional .sync_pb.AppSpecifics.LaunchType launch_type = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_launch_type(), target);
  }

  // optional string bookmark_app_url = 6 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_bookmark_app_url(), target);
  }

  // optional string bookmark_app_description = 7 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_bookmark_app_description(), target);
  }

  // optional string bookmark_app_icon_color = 8 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_bookmark_app_icon_color(), target);
  }

  // repeated .sync_pb.LinkedAppIconInfo linked_app_icons = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_linked_app_icons_size()); i < n; i++) {
    const auto& repfield = this->_internal_linked_app_icons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string bookmark_app_scope = 10 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_bookmark_app_scope(), target);
  }

  // optional uint32 bookmark_app_theme_color = 11 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_bookmark_app_theme_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.AppSpecifics)
  return target;
}

size_t AppSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AppSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.LinkedAppIconInfo linked_app_icons = 9;
  total_size += 1UL * this->_internal_linked_app_icons_size();
  for (const auto& msg : this->linked_app_icons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string app_launch_ordinal = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_launch_ordinal());
    }

    // optional string page_ordinal = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_page_ordinal());
    }

    // optional string bookmark_app_url = 6 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bookmark_app_url());
    }

    // optional string bookmark_app_description = 7 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bookmark_app_description());
    }

    // optional string bookmark_app_icon_color = 8 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bookmark_app_icon_color());
    }

    // optional string bookmark_app_scope = 10 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bookmark_app_scope());
    }

    // optional .sync_pb.ExtensionSpecifics extension = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *extension_);
    }

    // optional .sync_pb.AppNotificationSettings notification_settings = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *notification_settings_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .sync_pb.AppSpecifics.LaunchType launch_type = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_launch_type());
    }

    // optional uint32 bookmark_app_theme_color = 11 [deprecated = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bookmark_app_theme_color());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AppSpecifics*>(
      &from));
}

void AppSpecifics::MergeFrom(const AppSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AppSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  linked_app_icons_.MergeFrom(from.linked_app_icons_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_app_launch_ordinal(from._internal_app_launch_ordinal());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_page_ordinal(from._internal_page_ordinal());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_bookmark_app_url(from._internal_bookmark_app_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_bookmark_app_description(from._internal_bookmark_app_description());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_bookmark_app_icon_color(from._internal_bookmark_app_icon_color());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_bookmark_app_scope(from._internal_bookmark_app_scope());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_extension()->::sync_pb::ExtensionSpecifics::MergeFrom(from._internal_extension());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_notification_settings()->::sync_pb::AppNotificationSettings::MergeFrom(from._internal_notification_settings());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      launch_type_ = from.launch_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      bookmark_app_theme_color_ = from.bookmark_app_theme_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AppSpecifics::CopyFrom(const AppSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AppSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppSpecifics::IsInitialized() const {
  return true;
}

void AppSpecifics::InternalSwap(AppSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  linked_app_icons_.InternalSwap(&other->linked_app_icons_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &app_launch_ordinal_, lhs_arena,
      &other->app_launch_ordinal_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &page_ordinal_, lhs_arena,
      &other->page_ordinal_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bookmark_app_url_, lhs_arena,
      &other->bookmark_app_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bookmark_app_description_, lhs_arena,
      &other->bookmark_app_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bookmark_app_icon_color_, lhs_arena,
      &other->bookmark_app_icon_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bookmark_app_scope_, lhs_arena,
      &other->bookmark_app_scope_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppSpecifics, bookmark_app_theme_color_)
      + sizeof(AppSpecifics::bookmark_app_theme_color_)
      - PROTOBUF_FIELD_OFFSET(AppSpecifics, extension_)>(
          reinterpret_cast<char*>(&extension_),
          reinterpret_cast<char*>(&other->extension_));
}

std::string AppSpecifics::GetTypeName() const {
  return "sync_pb.AppSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::AppNotificationSettings*
Arena::CreateMaybeMessage< ::sync_pb::AppNotificationSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::AppNotificationSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::LinkedAppIconInfo*
Arena::CreateMaybeMessage< ::sync_pb::LinkedAppIconInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::LinkedAppIconInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::AppSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::AppSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::AppSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
