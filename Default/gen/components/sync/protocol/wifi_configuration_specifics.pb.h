// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/wifi_configuration_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fwifi_5fconfiguration_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fwifi_5fconfiguration_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fwifi_5fconfiguration_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fwifi_5fconfiguration_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class WifiConfigurationSpecifics;
struct WifiConfigurationSpecificsDefaultTypeInternal;
extern WifiConfigurationSpecificsDefaultTypeInternal _WifiConfigurationSpecifics_default_instance_;
class WifiConfigurationSpecifics_ProxyConfiguration;
struct WifiConfigurationSpecifics_ProxyConfigurationDefaultTypeInternal;
extern WifiConfigurationSpecifics_ProxyConfigurationDefaultTypeInternal _WifiConfigurationSpecifics_ProxyConfiguration_default_instance_;
class WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration;
struct WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfigurationDefaultTypeInternal;
extern WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfigurationDefaultTypeInternal _WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::WifiConfigurationSpecifics* Arena::CreateMaybeMessage<::sync_pb::WifiConfigurationSpecifics>(Arena*);
template<> ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* Arena::CreateMaybeMessage<::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration>(Arena*);
template<> ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* Arena::CreateMaybeMessage<::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption : int {
  WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_UNSPECIFIED = 0,
  WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_DISABLED = 1,
  WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_AUTOMATIC = 2,
  WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_AUTODISCOVERY = 3,
  WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_MANUAL = 4
};
bool WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_IsValid(int value);
constexpr WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_ProxyOption_MIN = WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_UNSPECIFIED;
constexpr WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_ProxyOption_MAX = WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_MANUAL;
constexpr int WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_ProxyOption_ARRAYSIZE = WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_ProxyOption_MAX + 1;

const std::string& WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_Name(WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption value);
template<typename T>
inline const std::string& WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_Name.");
  return WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_Name(static_cast<WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption>(enum_t_value));
}
bool WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption* value);
enum WifiConfigurationSpecifics_SecurityType : int {
  WifiConfigurationSpecifics_SecurityType_SECURITY_TYPE_UNSPECIFIED = 0,
  WifiConfigurationSpecifics_SecurityType_SECURITY_TYPE_NONE = 1,
  WifiConfigurationSpecifics_SecurityType_SECURITY_TYPE_WEP = 2,
  WifiConfigurationSpecifics_SecurityType_SECURITY_TYPE_PSK = 3
};
bool WifiConfigurationSpecifics_SecurityType_IsValid(int value);
constexpr WifiConfigurationSpecifics_SecurityType WifiConfigurationSpecifics_SecurityType_SecurityType_MIN = WifiConfigurationSpecifics_SecurityType_SECURITY_TYPE_UNSPECIFIED;
constexpr WifiConfigurationSpecifics_SecurityType WifiConfigurationSpecifics_SecurityType_SecurityType_MAX = WifiConfigurationSpecifics_SecurityType_SECURITY_TYPE_PSK;
constexpr int WifiConfigurationSpecifics_SecurityType_SecurityType_ARRAYSIZE = WifiConfigurationSpecifics_SecurityType_SecurityType_MAX + 1;

const std::string& WifiConfigurationSpecifics_SecurityType_Name(WifiConfigurationSpecifics_SecurityType value);
template<typename T>
inline const std::string& WifiConfigurationSpecifics_SecurityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WifiConfigurationSpecifics_SecurityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WifiConfigurationSpecifics_SecurityType_Name.");
  return WifiConfigurationSpecifics_SecurityType_Name(static_cast<WifiConfigurationSpecifics_SecurityType>(enum_t_value));
}
bool WifiConfigurationSpecifics_SecurityType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WifiConfigurationSpecifics_SecurityType* value);
enum WifiConfigurationSpecifics_AutomaticallyConnectOption : int {
  WifiConfigurationSpecifics_AutomaticallyConnectOption_AUTOMATICALLY_CONNECT_UNSPECIFIED = 0,
  WifiConfigurationSpecifics_AutomaticallyConnectOption_AUTOMATICALLY_CONNECT_DISABLED = 1,
  WifiConfigurationSpecifics_AutomaticallyConnectOption_AUTOMATICALLY_CONNECT_ENABLED = 2
};
bool WifiConfigurationSpecifics_AutomaticallyConnectOption_IsValid(int value);
constexpr WifiConfigurationSpecifics_AutomaticallyConnectOption WifiConfigurationSpecifics_AutomaticallyConnectOption_AutomaticallyConnectOption_MIN = WifiConfigurationSpecifics_AutomaticallyConnectOption_AUTOMATICALLY_CONNECT_UNSPECIFIED;
constexpr WifiConfigurationSpecifics_AutomaticallyConnectOption WifiConfigurationSpecifics_AutomaticallyConnectOption_AutomaticallyConnectOption_MAX = WifiConfigurationSpecifics_AutomaticallyConnectOption_AUTOMATICALLY_CONNECT_ENABLED;
constexpr int WifiConfigurationSpecifics_AutomaticallyConnectOption_AutomaticallyConnectOption_ARRAYSIZE = WifiConfigurationSpecifics_AutomaticallyConnectOption_AutomaticallyConnectOption_MAX + 1;

const std::string& WifiConfigurationSpecifics_AutomaticallyConnectOption_Name(WifiConfigurationSpecifics_AutomaticallyConnectOption value);
template<typename T>
inline const std::string& WifiConfigurationSpecifics_AutomaticallyConnectOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WifiConfigurationSpecifics_AutomaticallyConnectOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WifiConfigurationSpecifics_AutomaticallyConnectOption_Name.");
  return WifiConfigurationSpecifics_AutomaticallyConnectOption_Name(static_cast<WifiConfigurationSpecifics_AutomaticallyConnectOption>(enum_t_value));
}
bool WifiConfigurationSpecifics_AutomaticallyConnectOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WifiConfigurationSpecifics_AutomaticallyConnectOption* value);
enum WifiConfigurationSpecifics_IsPreferredOption : int {
  WifiConfigurationSpecifics_IsPreferredOption_IS_PREFERRED_UNSPECIFIED = 0,
  WifiConfigurationSpecifics_IsPreferredOption_IS_PREFERRED_DISABLED = 1,
  WifiConfigurationSpecifics_IsPreferredOption_IS_PREFERRED_ENABLED = 2
};
bool WifiConfigurationSpecifics_IsPreferredOption_IsValid(int value);
constexpr WifiConfigurationSpecifics_IsPreferredOption WifiConfigurationSpecifics_IsPreferredOption_IsPreferredOption_MIN = WifiConfigurationSpecifics_IsPreferredOption_IS_PREFERRED_UNSPECIFIED;
constexpr WifiConfigurationSpecifics_IsPreferredOption WifiConfigurationSpecifics_IsPreferredOption_IsPreferredOption_MAX = WifiConfigurationSpecifics_IsPreferredOption_IS_PREFERRED_ENABLED;
constexpr int WifiConfigurationSpecifics_IsPreferredOption_IsPreferredOption_ARRAYSIZE = WifiConfigurationSpecifics_IsPreferredOption_IsPreferredOption_MAX + 1;

const std::string& WifiConfigurationSpecifics_IsPreferredOption_Name(WifiConfigurationSpecifics_IsPreferredOption value);
template<typename T>
inline const std::string& WifiConfigurationSpecifics_IsPreferredOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WifiConfigurationSpecifics_IsPreferredOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WifiConfigurationSpecifics_IsPreferredOption_Name.");
  return WifiConfigurationSpecifics_IsPreferredOption_Name(static_cast<WifiConfigurationSpecifics_IsPreferredOption>(enum_t_value));
}
bool WifiConfigurationSpecifics_IsPreferredOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WifiConfigurationSpecifics_IsPreferredOption* value);
enum WifiConfigurationSpecifics_MeteredOption : int {
  WifiConfigurationSpecifics_MeteredOption_METERED_OPTION_UNSPECIFIED = 0,
  WifiConfigurationSpecifics_MeteredOption_METERED_OPTION_NO = 1,
  WifiConfigurationSpecifics_MeteredOption_METERED_OPTION_YES = 2,
  WifiConfigurationSpecifics_MeteredOption_METERED_OPTION_AUTO = 3
};
bool WifiConfigurationSpecifics_MeteredOption_IsValid(int value);
constexpr WifiConfigurationSpecifics_MeteredOption WifiConfigurationSpecifics_MeteredOption_MeteredOption_MIN = WifiConfigurationSpecifics_MeteredOption_METERED_OPTION_UNSPECIFIED;
constexpr WifiConfigurationSpecifics_MeteredOption WifiConfigurationSpecifics_MeteredOption_MeteredOption_MAX = WifiConfigurationSpecifics_MeteredOption_METERED_OPTION_AUTO;
constexpr int WifiConfigurationSpecifics_MeteredOption_MeteredOption_ARRAYSIZE = WifiConfigurationSpecifics_MeteredOption_MeteredOption_MAX + 1;

const std::string& WifiConfigurationSpecifics_MeteredOption_Name(WifiConfigurationSpecifics_MeteredOption value);
template<typename T>
inline const std::string& WifiConfigurationSpecifics_MeteredOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WifiConfigurationSpecifics_MeteredOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WifiConfigurationSpecifics_MeteredOption_Name.");
  return WifiConfigurationSpecifics_MeteredOption_Name(static_cast<WifiConfigurationSpecifics_MeteredOption>(enum_t_value));
}
bool WifiConfigurationSpecifics_MeteredOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WifiConfigurationSpecifics_MeteredOption* value);
enum WifiConfigurationSpecifics_DnsOption : int {
  WifiConfigurationSpecifics_DnsOption_DNS_OPTION_UNSPECIFIED = 0,
  WifiConfigurationSpecifics_DnsOption_DNS_OPTION_DEFAULT_DHCP = 1,
  WifiConfigurationSpecifics_DnsOption_DNS_OPTION_CUSTOM = 2
};
bool WifiConfigurationSpecifics_DnsOption_IsValid(int value);
constexpr WifiConfigurationSpecifics_DnsOption WifiConfigurationSpecifics_DnsOption_DnsOption_MIN = WifiConfigurationSpecifics_DnsOption_DNS_OPTION_UNSPECIFIED;
constexpr WifiConfigurationSpecifics_DnsOption WifiConfigurationSpecifics_DnsOption_DnsOption_MAX = WifiConfigurationSpecifics_DnsOption_DNS_OPTION_CUSTOM;
constexpr int WifiConfigurationSpecifics_DnsOption_DnsOption_ARRAYSIZE = WifiConfigurationSpecifics_DnsOption_DnsOption_MAX + 1;

const std::string& WifiConfigurationSpecifics_DnsOption_Name(WifiConfigurationSpecifics_DnsOption value);
template<typename T>
inline const std::string& WifiConfigurationSpecifics_DnsOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WifiConfigurationSpecifics_DnsOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WifiConfigurationSpecifics_DnsOption_Name.");
  return WifiConfigurationSpecifics_DnsOption_Name(static_cast<WifiConfigurationSpecifics_DnsOption>(enum_t_value));
}
bool WifiConfigurationSpecifics_DnsOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WifiConfigurationSpecifics_DnsOption* value);
// ===================================================================

class WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration) */ {
 public:
  inline WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration() : WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration(nullptr) {}
  ~WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration() override;
  explicit PROTOBUF_CONSTEXPR WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration(const WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& from);
  WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration(WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration&& from) noexcept
    : WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration() {
    *this = ::std::move(from);
  }

  inline WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& operator=(const WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& operator=(WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* internal_default_instance() {
    return reinterpret_cast<const WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration*>(
               &_WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& a, WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& from);
  void MergeFrom(const WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration";
  }
  protected:
  explicit WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExcludedDomainsFieldNumber = 7,
    kHttpProxyUrlFieldNumber = 1,
    kSecureHttpProxyUrlFieldNumber = 3,
    kSocksHostUrlFieldNumber = 5,
    kHttpProxyPortFieldNumber = 2,
    kSecureHttpProxyPortFieldNumber = 4,
    kSocksHostPortFieldNumber = 6,
  };
  // repeated string excluded_domains = 7;
  int excluded_domains_size() const;
  private:
  int _internal_excluded_domains_size() const;
  public:
  void clear_excluded_domains();
  const std::string& excluded_domains(int index) const;
  std::string* mutable_excluded_domains(int index);
  void set_excluded_domains(int index, const std::string& value);
  void set_excluded_domains(int index, std::string&& value);
  void set_excluded_domains(int index, const char* value);
  void set_excluded_domains(int index, const char* value, size_t size);
  std::string* add_excluded_domains();
  void add_excluded_domains(const std::string& value);
  void add_excluded_domains(std::string&& value);
  void add_excluded_domains(const char* value);
  void add_excluded_domains(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& excluded_domains() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_excluded_domains();
  private:
  const std::string& _internal_excluded_domains(int index) const;
  std::string* _internal_add_excluded_domains();
  public:

  // optional string http_proxy_url = 1;
  bool has_http_proxy_url() const;
  private:
  bool _internal_has_http_proxy_url() const;
  public:
  void clear_http_proxy_url();
  const std::string& http_proxy_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_http_proxy_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_http_proxy_url();
  PROTOBUF_NODISCARD std::string* release_http_proxy_url();
  void set_allocated_http_proxy_url(std::string* http_proxy_url);
  private:
  const std::string& _internal_http_proxy_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_http_proxy_url(const std::string& value);
  std::string* _internal_mutable_http_proxy_url();
  public:

  // optional string secure_http_proxy_url = 3;
  bool has_secure_http_proxy_url() const;
  private:
  bool _internal_has_secure_http_proxy_url() const;
  public:
  void clear_secure_http_proxy_url();
  const std::string& secure_http_proxy_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secure_http_proxy_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secure_http_proxy_url();
  PROTOBUF_NODISCARD std::string* release_secure_http_proxy_url();
  void set_allocated_secure_http_proxy_url(std::string* secure_http_proxy_url);
  private:
  const std::string& _internal_secure_http_proxy_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secure_http_proxy_url(const std::string& value);
  std::string* _internal_mutable_secure_http_proxy_url();
  public:

  // optional string socks_host_url = 5;
  bool has_socks_host_url() const;
  private:
  bool _internal_has_socks_host_url() const;
  public:
  void clear_socks_host_url();
  const std::string& socks_host_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_socks_host_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_socks_host_url();
  PROTOBUF_NODISCARD std::string* release_socks_host_url();
  void set_allocated_socks_host_url(std::string* socks_host_url);
  private:
  const std::string& _internal_socks_host_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_socks_host_url(const std::string& value);
  std::string* _internal_mutable_socks_host_url();
  public:

  // optional int32 http_proxy_port = 2;
  bool has_http_proxy_port() const;
  private:
  bool _internal_has_http_proxy_port() const;
  public:
  void clear_http_proxy_port();
  int32_t http_proxy_port() const;
  void set_http_proxy_port(int32_t value);
  private:
  int32_t _internal_http_proxy_port() const;
  void _internal_set_http_proxy_port(int32_t value);
  public:

  // optional int32 secure_http_proxy_port = 4;
  bool has_secure_http_proxy_port() const;
  private:
  bool _internal_has_secure_http_proxy_port() const;
  public:
  void clear_secure_http_proxy_port();
  int32_t secure_http_proxy_port() const;
  void set_secure_http_proxy_port(int32_t value);
  private:
  int32_t _internal_secure_http_proxy_port() const;
  void _internal_set_secure_http_proxy_port(int32_t value);
  public:

  // optional int32 socks_host_port = 6;
  bool has_socks_host_port() const;
  private:
  bool _internal_has_socks_host_port() const;
  public:
  void clear_socks_host_port();
  int32_t socks_host_port() const;
  void set_socks_host_port(int32_t value);
  private:
  int32_t _internal_socks_host_port() const;
  void _internal_set_socks_host_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> excluded_domains_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr http_proxy_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secure_http_proxy_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr socks_host_url_;
  int32_t http_proxy_port_;
  int32_t secure_http_proxy_port_;
  int32_t socks_host_port_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fwifi_5fconfiguration_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WifiConfigurationSpecifics_ProxyConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration) */ {
 public:
  inline WifiConfigurationSpecifics_ProxyConfiguration() : WifiConfigurationSpecifics_ProxyConfiguration(nullptr) {}
  ~WifiConfigurationSpecifics_ProxyConfiguration() override;
  explicit PROTOBUF_CONSTEXPR WifiConfigurationSpecifics_ProxyConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WifiConfigurationSpecifics_ProxyConfiguration(const WifiConfigurationSpecifics_ProxyConfiguration& from);
  WifiConfigurationSpecifics_ProxyConfiguration(WifiConfigurationSpecifics_ProxyConfiguration&& from) noexcept
    : WifiConfigurationSpecifics_ProxyConfiguration() {
    *this = ::std::move(from);
  }

  inline WifiConfigurationSpecifics_ProxyConfiguration& operator=(const WifiConfigurationSpecifics_ProxyConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline WifiConfigurationSpecifics_ProxyConfiguration& operator=(WifiConfigurationSpecifics_ProxyConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WifiConfigurationSpecifics_ProxyConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const WifiConfigurationSpecifics_ProxyConfiguration* internal_default_instance() {
    return reinterpret_cast<const WifiConfigurationSpecifics_ProxyConfiguration*>(
               &_WifiConfigurationSpecifics_ProxyConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WifiConfigurationSpecifics_ProxyConfiguration& a, WifiConfigurationSpecifics_ProxyConfiguration& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WifiConfigurationSpecifics_ProxyConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WifiConfigurationSpecifics_ProxyConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WifiConfigurationSpecifics_ProxyConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WifiConfigurationSpecifics_ProxyConfiguration>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WifiConfigurationSpecifics_ProxyConfiguration& from);
  void MergeFrom(const WifiConfigurationSpecifics_ProxyConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WifiConfigurationSpecifics_ProxyConfiguration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WifiConfigurationSpecifics.ProxyConfiguration";
  }
  protected:
  explicit WifiConfigurationSpecifics_ProxyConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration ManualProxyConfiguration;

  typedef WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption ProxyOption;
  static constexpr ProxyOption PROXY_OPTION_UNSPECIFIED =
    WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_UNSPECIFIED;
  static constexpr ProxyOption PROXY_OPTION_DISABLED =
    WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_DISABLED;
  static constexpr ProxyOption PROXY_OPTION_AUTOMATIC =
    WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_AUTOMATIC;
  static constexpr ProxyOption PROXY_OPTION_AUTODISCOVERY =
    WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_AUTODISCOVERY;
  static constexpr ProxyOption PROXY_OPTION_MANUAL =
    WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_MANUAL;
  static inline bool ProxyOption_IsValid(int value) {
    return WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_IsValid(value);
  }
  static constexpr ProxyOption ProxyOption_MIN =
    WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_ProxyOption_MIN;
  static constexpr ProxyOption ProxyOption_MAX =
    WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_ProxyOption_MAX;
  static constexpr int ProxyOption_ARRAYSIZE =
    WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_ProxyOption_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ProxyOption_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProxyOption>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProxyOption_Name.");
    return WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_Name(enum_t_value);
  }
  static inline bool ProxyOption_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProxyOption* value) {
    return WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAutoconfigurationUrlFieldNumber = 2,
    kManualProxyConfigurationFieldNumber = 3,
    kProxyOptionFieldNumber = 1,
  };
  // optional string autoconfiguration_url = 2;
  bool has_autoconfiguration_url() const;
  private:
  bool _internal_has_autoconfiguration_url() const;
  public:
  void clear_autoconfiguration_url();
  const std::string& autoconfiguration_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_autoconfiguration_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_autoconfiguration_url();
  PROTOBUF_NODISCARD std::string* release_autoconfiguration_url();
  void set_allocated_autoconfiguration_url(std::string* autoconfiguration_url);
  private:
  const std::string& _internal_autoconfiguration_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_autoconfiguration_url(const std::string& value);
  std::string* _internal_mutable_autoconfiguration_url();
  public:

  // optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration manual_proxy_configuration = 3;
  bool has_manual_proxy_configuration() const;
  private:
  bool _internal_has_manual_proxy_configuration() const;
  public:
  void clear_manual_proxy_configuration();
  const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& manual_proxy_configuration() const;
  PROTOBUF_NODISCARD ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* release_manual_proxy_configuration();
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* mutable_manual_proxy_configuration();
  void set_allocated_manual_proxy_configuration(::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* manual_proxy_configuration);
  private:
  const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& _internal_manual_proxy_configuration() const;
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* _internal_mutable_manual_proxy_configuration();
  public:
  void unsafe_arena_set_allocated_manual_proxy_configuration(
      ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* manual_proxy_configuration);
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* unsafe_arena_release_manual_proxy_configuration();

  // optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ProxyOption proxy_option = 1;
  bool has_proxy_option() const;
  private:
  bool _internal_has_proxy_option() const;
  public:
  void clear_proxy_option();
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption proxy_option() const;
  void set_proxy_option(::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption value);
  private:
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption _internal_proxy_option() const;
  void _internal_set_proxy_option(::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr autoconfiguration_url_;
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* manual_proxy_configuration_;
  int proxy_option_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fwifi_5fconfiguration_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WifiConfigurationSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WifiConfigurationSpecifics) */ {
 public:
  inline WifiConfigurationSpecifics() : WifiConfigurationSpecifics(nullptr) {}
  ~WifiConfigurationSpecifics() override;
  explicit PROTOBUF_CONSTEXPR WifiConfigurationSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WifiConfigurationSpecifics(const WifiConfigurationSpecifics& from);
  WifiConfigurationSpecifics(WifiConfigurationSpecifics&& from) noexcept
    : WifiConfigurationSpecifics() {
    *this = ::std::move(from);
  }

  inline WifiConfigurationSpecifics& operator=(const WifiConfigurationSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline WifiConfigurationSpecifics& operator=(WifiConfigurationSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WifiConfigurationSpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const WifiConfigurationSpecifics* internal_default_instance() {
    return reinterpret_cast<const WifiConfigurationSpecifics*>(
               &_WifiConfigurationSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WifiConfigurationSpecifics& a, WifiConfigurationSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WifiConfigurationSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WifiConfigurationSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WifiConfigurationSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WifiConfigurationSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WifiConfigurationSpecifics& from);
  void MergeFrom(const WifiConfigurationSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WifiConfigurationSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WifiConfigurationSpecifics";
  }
  protected:
  explicit WifiConfigurationSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WifiConfigurationSpecifics_ProxyConfiguration ProxyConfiguration;

  typedef WifiConfigurationSpecifics_SecurityType SecurityType;
  static constexpr SecurityType SECURITY_TYPE_UNSPECIFIED =
    WifiConfigurationSpecifics_SecurityType_SECURITY_TYPE_UNSPECIFIED;
  static constexpr SecurityType SECURITY_TYPE_NONE =
    WifiConfigurationSpecifics_SecurityType_SECURITY_TYPE_NONE;
  static constexpr SecurityType SECURITY_TYPE_WEP =
    WifiConfigurationSpecifics_SecurityType_SECURITY_TYPE_WEP;
  static constexpr SecurityType SECURITY_TYPE_PSK =
    WifiConfigurationSpecifics_SecurityType_SECURITY_TYPE_PSK;
  static inline bool SecurityType_IsValid(int value) {
    return WifiConfigurationSpecifics_SecurityType_IsValid(value);
  }
  static constexpr SecurityType SecurityType_MIN =
    WifiConfigurationSpecifics_SecurityType_SecurityType_MIN;
  static constexpr SecurityType SecurityType_MAX =
    WifiConfigurationSpecifics_SecurityType_SecurityType_MAX;
  static constexpr int SecurityType_ARRAYSIZE =
    WifiConfigurationSpecifics_SecurityType_SecurityType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SecurityType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SecurityType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SecurityType_Name.");
    return WifiConfigurationSpecifics_SecurityType_Name(enum_t_value);
  }
  static inline bool SecurityType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SecurityType* value) {
    return WifiConfigurationSpecifics_SecurityType_Parse(name, value);
  }

  typedef WifiConfigurationSpecifics_AutomaticallyConnectOption AutomaticallyConnectOption;
  static constexpr AutomaticallyConnectOption AUTOMATICALLY_CONNECT_UNSPECIFIED =
    WifiConfigurationSpecifics_AutomaticallyConnectOption_AUTOMATICALLY_CONNECT_UNSPECIFIED;
  static constexpr AutomaticallyConnectOption AUTOMATICALLY_CONNECT_DISABLED =
    WifiConfigurationSpecifics_AutomaticallyConnectOption_AUTOMATICALLY_CONNECT_DISABLED;
  static constexpr AutomaticallyConnectOption AUTOMATICALLY_CONNECT_ENABLED =
    WifiConfigurationSpecifics_AutomaticallyConnectOption_AUTOMATICALLY_CONNECT_ENABLED;
  static inline bool AutomaticallyConnectOption_IsValid(int value) {
    return WifiConfigurationSpecifics_AutomaticallyConnectOption_IsValid(value);
  }
  static constexpr AutomaticallyConnectOption AutomaticallyConnectOption_MIN =
    WifiConfigurationSpecifics_AutomaticallyConnectOption_AutomaticallyConnectOption_MIN;
  static constexpr AutomaticallyConnectOption AutomaticallyConnectOption_MAX =
    WifiConfigurationSpecifics_AutomaticallyConnectOption_AutomaticallyConnectOption_MAX;
  static constexpr int AutomaticallyConnectOption_ARRAYSIZE =
    WifiConfigurationSpecifics_AutomaticallyConnectOption_AutomaticallyConnectOption_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AutomaticallyConnectOption_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AutomaticallyConnectOption>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AutomaticallyConnectOption_Name.");
    return WifiConfigurationSpecifics_AutomaticallyConnectOption_Name(enum_t_value);
  }
  static inline bool AutomaticallyConnectOption_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AutomaticallyConnectOption* value) {
    return WifiConfigurationSpecifics_AutomaticallyConnectOption_Parse(name, value);
  }

  typedef WifiConfigurationSpecifics_IsPreferredOption IsPreferredOption;
  static constexpr IsPreferredOption IS_PREFERRED_UNSPECIFIED =
    WifiConfigurationSpecifics_IsPreferredOption_IS_PREFERRED_UNSPECIFIED;
  static constexpr IsPreferredOption IS_PREFERRED_DISABLED =
    WifiConfigurationSpecifics_IsPreferredOption_IS_PREFERRED_DISABLED;
  static constexpr IsPreferredOption IS_PREFERRED_ENABLED =
    WifiConfigurationSpecifics_IsPreferredOption_IS_PREFERRED_ENABLED;
  static inline bool IsPreferredOption_IsValid(int value) {
    return WifiConfigurationSpecifics_IsPreferredOption_IsValid(value);
  }
  static constexpr IsPreferredOption IsPreferredOption_MIN =
    WifiConfigurationSpecifics_IsPreferredOption_IsPreferredOption_MIN;
  static constexpr IsPreferredOption IsPreferredOption_MAX =
    WifiConfigurationSpecifics_IsPreferredOption_IsPreferredOption_MAX;
  static constexpr int IsPreferredOption_ARRAYSIZE =
    WifiConfigurationSpecifics_IsPreferredOption_IsPreferredOption_ARRAYSIZE;
  template<typename T>
  static inline const std::string& IsPreferredOption_Name(T enum_t_value) {
    static_assert(::std::is_same<T, IsPreferredOption>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function IsPreferredOption_Name.");
    return WifiConfigurationSpecifics_IsPreferredOption_Name(enum_t_value);
  }
  static inline bool IsPreferredOption_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      IsPreferredOption* value) {
    return WifiConfigurationSpecifics_IsPreferredOption_Parse(name, value);
  }

  typedef WifiConfigurationSpecifics_MeteredOption MeteredOption;
  static constexpr MeteredOption METERED_OPTION_UNSPECIFIED =
    WifiConfigurationSpecifics_MeteredOption_METERED_OPTION_UNSPECIFIED;
  static constexpr MeteredOption METERED_OPTION_NO =
    WifiConfigurationSpecifics_MeteredOption_METERED_OPTION_NO;
  static constexpr MeteredOption METERED_OPTION_YES =
    WifiConfigurationSpecifics_MeteredOption_METERED_OPTION_YES;
  static constexpr MeteredOption METERED_OPTION_AUTO =
    WifiConfigurationSpecifics_MeteredOption_METERED_OPTION_AUTO;
  static inline bool MeteredOption_IsValid(int value) {
    return WifiConfigurationSpecifics_MeteredOption_IsValid(value);
  }
  static constexpr MeteredOption MeteredOption_MIN =
    WifiConfigurationSpecifics_MeteredOption_MeteredOption_MIN;
  static constexpr MeteredOption MeteredOption_MAX =
    WifiConfigurationSpecifics_MeteredOption_MeteredOption_MAX;
  static constexpr int MeteredOption_ARRAYSIZE =
    WifiConfigurationSpecifics_MeteredOption_MeteredOption_ARRAYSIZE;
  template<typename T>
  static inline const std::string& MeteredOption_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MeteredOption>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MeteredOption_Name.");
    return WifiConfigurationSpecifics_MeteredOption_Name(enum_t_value);
  }
  static inline bool MeteredOption_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MeteredOption* value) {
    return WifiConfigurationSpecifics_MeteredOption_Parse(name, value);
  }

  typedef WifiConfigurationSpecifics_DnsOption DnsOption;
  static constexpr DnsOption DNS_OPTION_UNSPECIFIED =
    WifiConfigurationSpecifics_DnsOption_DNS_OPTION_UNSPECIFIED;
  static constexpr DnsOption DNS_OPTION_DEFAULT_DHCP =
    WifiConfigurationSpecifics_DnsOption_DNS_OPTION_DEFAULT_DHCP;
  static constexpr DnsOption DNS_OPTION_CUSTOM =
    WifiConfigurationSpecifics_DnsOption_DNS_OPTION_CUSTOM;
  static inline bool DnsOption_IsValid(int value) {
    return WifiConfigurationSpecifics_DnsOption_IsValid(value);
  }
  static constexpr DnsOption DnsOption_MIN =
    WifiConfigurationSpecifics_DnsOption_DnsOption_MIN;
  static constexpr DnsOption DnsOption_MAX =
    WifiConfigurationSpecifics_DnsOption_DnsOption_MAX;
  static constexpr int DnsOption_ARRAYSIZE =
    WifiConfigurationSpecifics_DnsOption_DnsOption_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DnsOption_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DnsOption>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DnsOption_Name.");
    return WifiConfigurationSpecifics_DnsOption_Name(enum_t_value);
  }
  static inline bool DnsOption_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DnsOption* value) {
    return WifiConfigurationSpecifics_DnsOption_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCustomDnsFieldNumber = 8,
    kHexSsidFieldNumber = 1,
    kPassphraseFieldNumber = 3,
    kProxyConfigurationFieldNumber = 7,
    kSecurityTypeFieldNumber = 2,
    kAutomaticallyConnectFieldNumber = 4,
    kIsPreferredFieldNumber = 5,
    kMeteredFieldNumber = 6,
    kLastConnectedTimestampFieldNumber = 9,
    kDnsOptionFieldNumber = 10,
  };
  // repeated string custom_dns = 8;
  int custom_dns_size() const;
  private:
  int _internal_custom_dns_size() const;
  public:
  void clear_custom_dns();
  const std::string& custom_dns(int index) const;
  std::string* mutable_custom_dns(int index);
  void set_custom_dns(int index, const std::string& value);
  void set_custom_dns(int index, std::string&& value);
  void set_custom_dns(int index, const char* value);
  void set_custom_dns(int index, const char* value, size_t size);
  std::string* add_custom_dns();
  void add_custom_dns(const std::string& value);
  void add_custom_dns(std::string&& value);
  void add_custom_dns(const char* value);
  void add_custom_dns(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& custom_dns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_custom_dns();
  private:
  const std::string& _internal_custom_dns(int index) const;
  std::string* _internal_add_custom_dns();
  public:

  // optional bytes hex_ssid = 1;
  bool has_hex_ssid() const;
  private:
  bool _internal_has_hex_ssid() const;
  public:
  void clear_hex_ssid();
  const std::string& hex_ssid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hex_ssid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hex_ssid();
  PROTOBUF_NODISCARD std::string* release_hex_ssid();
  void set_allocated_hex_ssid(std::string* hex_ssid);
  private:
  const std::string& _internal_hex_ssid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hex_ssid(const std::string& value);
  std::string* _internal_mutable_hex_ssid();
  public:

  // optional bytes passphrase = 3;
  bool has_passphrase() const;
  private:
  bool _internal_has_passphrase() const;
  public:
  void clear_passphrase();
  const std::string& passphrase() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passphrase(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passphrase();
  PROTOBUF_NODISCARD std::string* release_passphrase();
  void set_allocated_passphrase(std::string* passphrase);
  private:
  const std::string& _internal_passphrase() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passphrase(const std::string& value);
  std::string* _internal_mutable_passphrase();
  public:

  // optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration proxy_configuration = 7;
  bool has_proxy_configuration() const;
  private:
  bool _internal_has_proxy_configuration() const;
  public:
  void clear_proxy_configuration();
  const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration& proxy_configuration() const;
  PROTOBUF_NODISCARD ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* release_proxy_configuration();
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* mutable_proxy_configuration();
  void set_allocated_proxy_configuration(::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* proxy_configuration);
  private:
  const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration& _internal_proxy_configuration() const;
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* _internal_mutable_proxy_configuration();
  public:
  void unsafe_arena_set_allocated_proxy_configuration(
      ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* proxy_configuration);
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* unsafe_arena_release_proxy_configuration();

  // optional .sync_pb.WifiConfigurationSpecifics.SecurityType security_type = 2;
  bool has_security_type() const;
  private:
  bool _internal_has_security_type() const;
  public:
  void clear_security_type();
  ::sync_pb::WifiConfigurationSpecifics_SecurityType security_type() const;
  void set_security_type(::sync_pb::WifiConfigurationSpecifics_SecurityType value);
  private:
  ::sync_pb::WifiConfigurationSpecifics_SecurityType _internal_security_type() const;
  void _internal_set_security_type(::sync_pb::WifiConfigurationSpecifics_SecurityType value);
  public:

  // optional .sync_pb.WifiConfigurationSpecifics.AutomaticallyConnectOption automatically_connect = 4;
  bool has_automatically_connect() const;
  private:
  bool _internal_has_automatically_connect() const;
  public:
  void clear_automatically_connect();
  ::sync_pb::WifiConfigurationSpecifics_AutomaticallyConnectOption automatically_connect() const;
  void set_automatically_connect(::sync_pb::WifiConfigurationSpecifics_AutomaticallyConnectOption value);
  private:
  ::sync_pb::WifiConfigurationSpecifics_AutomaticallyConnectOption _internal_automatically_connect() const;
  void _internal_set_automatically_connect(::sync_pb::WifiConfigurationSpecifics_AutomaticallyConnectOption value);
  public:

  // optional .sync_pb.WifiConfigurationSpecifics.IsPreferredOption is_preferred = 5;
  bool has_is_preferred() const;
  private:
  bool _internal_has_is_preferred() const;
  public:
  void clear_is_preferred();
  ::sync_pb::WifiConfigurationSpecifics_IsPreferredOption is_preferred() const;
  void set_is_preferred(::sync_pb::WifiConfigurationSpecifics_IsPreferredOption value);
  private:
  ::sync_pb::WifiConfigurationSpecifics_IsPreferredOption _internal_is_preferred() const;
  void _internal_set_is_preferred(::sync_pb::WifiConfigurationSpecifics_IsPreferredOption value);
  public:

  // optional .sync_pb.WifiConfigurationSpecifics.MeteredOption metered = 6;
  bool has_metered() const;
  private:
  bool _internal_has_metered() const;
  public:
  void clear_metered();
  ::sync_pb::WifiConfigurationSpecifics_MeteredOption metered() const;
  void set_metered(::sync_pb::WifiConfigurationSpecifics_MeteredOption value);
  private:
  ::sync_pb::WifiConfigurationSpecifics_MeteredOption _internal_metered() const;
  void _internal_set_metered(::sync_pb::WifiConfigurationSpecifics_MeteredOption value);
  public:

  // optional int64 last_connected_timestamp = 9;
  bool has_last_connected_timestamp() const;
  private:
  bool _internal_has_last_connected_timestamp() const;
  public:
  void clear_last_connected_timestamp();
  int64_t last_connected_timestamp() const;
  void set_last_connected_timestamp(int64_t value);
  private:
  int64_t _internal_last_connected_timestamp() const;
  void _internal_set_last_connected_timestamp(int64_t value);
  public:

  // optional .sync_pb.WifiConfigurationSpecifics.DnsOption dns_option = 10;
  bool has_dns_option() const;
  private:
  bool _internal_has_dns_option() const;
  public:
  void clear_dns_option();
  ::sync_pb::WifiConfigurationSpecifics_DnsOption dns_option() const;
  void set_dns_option(::sync_pb::WifiConfigurationSpecifics_DnsOption value);
  private:
  ::sync_pb::WifiConfigurationSpecifics_DnsOption _internal_dns_option() const;
  void _internal_set_dns_option(::sync_pb::WifiConfigurationSpecifics_DnsOption value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.WifiConfigurationSpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> custom_dns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hex_ssid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passphrase_;
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* proxy_configuration_;
  int security_type_;
  int automatically_connect_;
  int is_preferred_;
  int metered_;
  int64_t last_connected_timestamp_;
  int dns_option_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fwifi_5fconfiguration_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration

// optional string http_proxy_url = 1;
inline bool WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_has_http_proxy_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::has_http_proxy_url() const {
  return _internal_has_http_proxy_url();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::clear_http_proxy_url() {
  http_proxy_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::http_proxy_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.http_proxy_url)
  return _internal_http_proxy_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_http_proxy_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 http_proxy_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.http_proxy_url)
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::mutable_http_proxy_url() {
  std::string* _s = _internal_mutable_http_proxy_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.http_proxy_url)
  return _s;
}
inline const std::string& WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_http_proxy_url() const {
  return http_proxy_url_.Get();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_set_http_proxy_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  http_proxy_url_.Set(value, GetArenaForAllocation());
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_mutable_http_proxy_url() {
  _has_bits_[0] |= 0x00000001u;
  return http_proxy_url_.Mutable(GetArenaForAllocation());
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::release_http_proxy_url() {
  // @@protoc_insertion_point(field_release:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.http_proxy_url)
  if (!_internal_has_http_proxy_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = http_proxy_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (http_proxy_url_.IsDefault()) {
    http_proxy_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_allocated_http_proxy_url(std::string* http_proxy_url) {
  if (http_proxy_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  http_proxy_url_.SetAllocated(http_proxy_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (http_proxy_url_.IsDefault()) {
    http_proxy_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.http_proxy_url)
}

// optional int32 http_proxy_port = 2;
inline bool WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_has_http_proxy_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::has_http_proxy_port() const {
  return _internal_has_http_proxy_port();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::clear_http_proxy_port() {
  http_proxy_port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_http_proxy_port() const {
  return http_proxy_port_;
}
inline int32_t WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::http_proxy_port() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.http_proxy_port)
  return _internal_http_proxy_port();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_set_http_proxy_port(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  http_proxy_port_ = value;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_http_proxy_port(int32_t value) {
  _internal_set_http_proxy_port(value);
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.http_proxy_port)
}

// optional string secure_http_proxy_url = 3;
inline bool WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_has_secure_http_proxy_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::has_secure_http_proxy_url() const {
  return _internal_has_secure_http_proxy_url();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::clear_secure_http_proxy_url() {
  secure_http_proxy_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::secure_http_proxy_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.secure_http_proxy_url)
  return _internal_secure_http_proxy_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_secure_http_proxy_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 secure_http_proxy_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.secure_http_proxy_url)
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::mutable_secure_http_proxy_url() {
  std::string* _s = _internal_mutable_secure_http_proxy_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.secure_http_proxy_url)
  return _s;
}
inline const std::string& WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_secure_http_proxy_url() const {
  return secure_http_proxy_url_.Get();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_set_secure_http_proxy_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  secure_http_proxy_url_.Set(value, GetArenaForAllocation());
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_mutable_secure_http_proxy_url() {
  _has_bits_[0] |= 0x00000002u;
  return secure_http_proxy_url_.Mutable(GetArenaForAllocation());
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::release_secure_http_proxy_url() {
  // @@protoc_insertion_point(field_release:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.secure_http_proxy_url)
  if (!_internal_has_secure_http_proxy_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = secure_http_proxy_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secure_http_proxy_url_.IsDefault()) {
    secure_http_proxy_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_allocated_secure_http_proxy_url(std::string* secure_http_proxy_url) {
  if (secure_http_proxy_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  secure_http_proxy_url_.SetAllocated(secure_http_proxy_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secure_http_proxy_url_.IsDefault()) {
    secure_http_proxy_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.secure_http_proxy_url)
}

// optional int32 secure_http_proxy_port = 4;
inline bool WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_has_secure_http_proxy_port() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::has_secure_http_proxy_port() const {
  return _internal_has_secure_http_proxy_port();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::clear_secure_http_proxy_port() {
  secure_http_proxy_port_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_secure_http_proxy_port() const {
  return secure_http_proxy_port_;
}
inline int32_t WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::secure_http_proxy_port() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.secure_http_proxy_port)
  return _internal_secure_http_proxy_port();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_set_secure_http_proxy_port(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  secure_http_proxy_port_ = value;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_secure_http_proxy_port(int32_t value) {
  _internal_set_secure_http_proxy_port(value);
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.secure_http_proxy_port)
}

// optional string socks_host_url = 5;
inline bool WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_has_socks_host_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::has_socks_host_url() const {
  return _internal_has_socks_host_url();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::clear_socks_host_url() {
  socks_host_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::socks_host_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.socks_host_url)
  return _internal_socks_host_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_socks_host_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 socks_host_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.socks_host_url)
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::mutable_socks_host_url() {
  std::string* _s = _internal_mutable_socks_host_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.socks_host_url)
  return _s;
}
inline const std::string& WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_socks_host_url() const {
  return socks_host_url_.Get();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_set_socks_host_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  socks_host_url_.Set(value, GetArenaForAllocation());
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_mutable_socks_host_url() {
  _has_bits_[0] |= 0x00000004u;
  return socks_host_url_.Mutable(GetArenaForAllocation());
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::release_socks_host_url() {
  // @@protoc_insertion_point(field_release:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.socks_host_url)
  if (!_internal_has_socks_host_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = socks_host_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (socks_host_url_.IsDefault()) {
    socks_host_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_allocated_socks_host_url(std::string* socks_host_url) {
  if (socks_host_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  socks_host_url_.SetAllocated(socks_host_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (socks_host_url_.IsDefault()) {
    socks_host_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.socks_host_url)
}

// optional int32 socks_host_port = 6;
inline bool WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_has_socks_host_port() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::has_socks_host_port() const {
  return _internal_has_socks_host_port();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::clear_socks_host_port() {
  socks_host_port_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_socks_host_port() const {
  return socks_host_port_;
}
inline int32_t WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::socks_host_port() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.socks_host_port)
  return _internal_socks_host_port();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_set_socks_host_port(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  socks_host_port_ = value;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_socks_host_port(int32_t value) {
  _internal_set_socks_host_port(value);
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.socks_host_port)
}

// repeated string excluded_domains = 7;
inline int WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_excluded_domains_size() const {
  return excluded_domains_.size();
}
inline int WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::excluded_domains_size() const {
  return _internal_excluded_domains_size();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::clear_excluded_domains() {
  excluded_domains_.Clear();
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::add_excluded_domains() {
  std::string* _s = _internal_add_excluded_domains();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.excluded_domains)
  return _s;
}
inline const std::string& WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_excluded_domains(int index) const {
  return excluded_domains_.Get(index);
}
inline const std::string& WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::excluded_domains(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.excluded_domains)
  return _internal_excluded_domains(index);
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::mutable_excluded_domains(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.excluded_domains)
  return excluded_domains_.Mutable(index);
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_excluded_domains(int index, const std::string& value) {
  excluded_domains_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.excluded_domains)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_excluded_domains(int index, std::string&& value) {
  excluded_domains_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.excluded_domains)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_excluded_domains(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  excluded_domains_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.excluded_domains)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_excluded_domains(int index, const char* value, size_t size) {
  excluded_domains_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.excluded_domains)
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_internal_add_excluded_domains() {
  return excluded_domains_.Add();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::add_excluded_domains(const std::string& value) {
  excluded_domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.excluded_domains)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::add_excluded_domains(std::string&& value) {
  excluded_domains_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.excluded_domains)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::add_excluded_domains(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  excluded_domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.excluded_domains)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::add_excluded_domains(const char* value, size_t size) {
  excluded_domains_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.excluded_domains)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::excluded_domains() const {
  // @@protoc_insertion_point(field_list:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.excluded_domains)
  return excluded_domains_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::mutable_excluded_domains() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.excluded_domains)
  return &excluded_domains_;
}

// -------------------------------------------------------------------

// WifiConfigurationSpecifics_ProxyConfiguration

// optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ProxyOption proxy_option = 1;
inline bool WifiConfigurationSpecifics_ProxyConfiguration::_internal_has_proxy_option() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WifiConfigurationSpecifics_ProxyConfiguration::has_proxy_option() const {
  return _internal_has_proxy_option();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration::clear_proxy_option() {
  proxy_option_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption WifiConfigurationSpecifics_ProxyConfiguration::_internal_proxy_option() const {
  return static_cast< ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption >(proxy_option_);
}
inline ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption WifiConfigurationSpecifics_ProxyConfiguration::proxy_option() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.proxy_option)
  return _internal_proxy_option();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration::_internal_set_proxy_option(::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption value) {
  assert(::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  proxy_option_ = value;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration::set_proxy_option(::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption value) {
  _internal_set_proxy_option(value);
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.proxy_option)
}

// optional string autoconfiguration_url = 2;
inline bool WifiConfigurationSpecifics_ProxyConfiguration::_internal_has_autoconfiguration_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WifiConfigurationSpecifics_ProxyConfiguration::has_autoconfiguration_url() const {
  return _internal_has_autoconfiguration_url();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration::clear_autoconfiguration_url() {
  autoconfiguration_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WifiConfigurationSpecifics_ProxyConfiguration::autoconfiguration_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.autoconfiguration_url)
  return _internal_autoconfiguration_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WifiConfigurationSpecifics_ProxyConfiguration::set_autoconfiguration_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 autoconfiguration_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.autoconfiguration_url)
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration::mutable_autoconfiguration_url() {
  std::string* _s = _internal_mutable_autoconfiguration_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.autoconfiguration_url)
  return _s;
}
inline const std::string& WifiConfigurationSpecifics_ProxyConfiguration::_internal_autoconfiguration_url() const {
  return autoconfiguration_url_.Get();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration::_internal_set_autoconfiguration_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  autoconfiguration_url_.Set(value, GetArenaForAllocation());
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration::_internal_mutable_autoconfiguration_url() {
  _has_bits_[0] |= 0x00000001u;
  return autoconfiguration_url_.Mutable(GetArenaForAllocation());
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration::release_autoconfiguration_url() {
  // @@protoc_insertion_point(field_release:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.autoconfiguration_url)
  if (!_internal_has_autoconfiguration_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = autoconfiguration_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (autoconfiguration_url_.IsDefault()) {
    autoconfiguration_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration::set_allocated_autoconfiguration_url(std::string* autoconfiguration_url) {
  if (autoconfiguration_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  autoconfiguration_url_.SetAllocated(autoconfiguration_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (autoconfiguration_url_.IsDefault()) {
    autoconfiguration_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.autoconfiguration_url)
}

// optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration manual_proxy_configuration = 3;
inline bool WifiConfigurationSpecifics_ProxyConfiguration::_internal_has_manual_proxy_configuration() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || manual_proxy_configuration_ != nullptr);
  return value;
}
inline bool WifiConfigurationSpecifics_ProxyConfiguration::has_manual_proxy_configuration() const {
  return _internal_has_manual_proxy_configuration();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration::clear_manual_proxy_configuration() {
  if (manual_proxy_configuration_ != nullptr) manual_proxy_configuration_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& WifiConfigurationSpecifics_ProxyConfiguration::_internal_manual_proxy_configuration() const {
  const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* p = manual_proxy_configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration&>(
      ::sync_pb::_WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration_default_instance_);
}
inline const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& WifiConfigurationSpecifics_ProxyConfiguration::manual_proxy_configuration() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.manual_proxy_configuration)
  return _internal_manual_proxy_configuration();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration::unsafe_arena_set_allocated_manual_proxy_configuration(
    ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* manual_proxy_configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(manual_proxy_configuration_);
  }
  manual_proxy_configuration_ = manual_proxy_configuration;
  if (manual_proxy_configuration) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.manual_proxy_configuration)
}
inline ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* WifiConfigurationSpecifics_ProxyConfiguration::release_manual_proxy_configuration() {
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* temp = manual_proxy_configuration_;
  manual_proxy_configuration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* WifiConfigurationSpecifics_ProxyConfiguration::unsafe_arena_release_manual_proxy_configuration() {
  // @@protoc_insertion_point(field_release:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.manual_proxy_configuration)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* temp = manual_proxy_configuration_;
  manual_proxy_configuration_ = nullptr;
  return temp;
}
inline ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* WifiConfigurationSpecifics_ProxyConfiguration::_internal_mutable_manual_proxy_configuration() {
  _has_bits_[0] |= 0x00000002u;
  if (manual_proxy_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration>(GetArenaForAllocation());
    manual_proxy_configuration_ = p;
  }
  return manual_proxy_configuration_;
}
inline ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* WifiConfigurationSpecifics_ProxyConfiguration::mutable_manual_proxy_configuration() {
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* _msg = _internal_mutable_manual_proxy_configuration();
  // @@protoc_insertion_point(field_mutable:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.manual_proxy_configuration)
  return _msg;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration::set_allocated_manual_proxy_configuration(::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* manual_proxy_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete manual_proxy_configuration_;
  }
  if (manual_proxy_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(manual_proxy_configuration);
    if (message_arena != submessage_arena) {
      manual_proxy_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, manual_proxy_configuration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  manual_proxy_configuration_ = manual_proxy_configuration;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.manual_proxy_configuration)
}

// -------------------------------------------------------------------

// WifiConfigurationSpecifics

// optional bytes hex_ssid = 1;
inline bool WifiConfigurationSpecifics::_internal_has_hex_ssid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WifiConfigurationSpecifics::has_hex_ssid() const {
  return _internal_has_hex_ssid();
}
inline void WifiConfigurationSpecifics::clear_hex_ssid() {
  hex_ssid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WifiConfigurationSpecifics::hex_ssid() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.hex_ssid)
  return _internal_hex_ssid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WifiConfigurationSpecifics::set_hex_ssid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 hex_ssid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.hex_ssid)
}
inline std::string* WifiConfigurationSpecifics::mutable_hex_ssid() {
  std::string* _s = _internal_mutable_hex_ssid();
  // @@protoc_insertion_point(field_mutable:sync_pb.WifiConfigurationSpecifics.hex_ssid)
  return _s;
}
inline const std::string& WifiConfigurationSpecifics::_internal_hex_ssid() const {
  return hex_ssid_.Get();
}
inline void WifiConfigurationSpecifics::_internal_set_hex_ssid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hex_ssid_.Set(value, GetArenaForAllocation());
}
inline std::string* WifiConfigurationSpecifics::_internal_mutable_hex_ssid() {
  _has_bits_[0] |= 0x00000001u;
  return hex_ssid_.Mutable(GetArenaForAllocation());
}
inline std::string* WifiConfigurationSpecifics::release_hex_ssid() {
  // @@protoc_insertion_point(field_release:sync_pb.WifiConfigurationSpecifics.hex_ssid)
  if (!_internal_has_hex_ssid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = hex_ssid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hex_ssid_.IsDefault()) {
    hex_ssid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WifiConfigurationSpecifics::set_allocated_hex_ssid(std::string* hex_ssid) {
  if (hex_ssid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hex_ssid_.SetAllocated(hex_ssid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hex_ssid_.IsDefault()) {
    hex_ssid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WifiConfigurationSpecifics.hex_ssid)
}

// optional .sync_pb.WifiConfigurationSpecifics.SecurityType security_type = 2;
inline bool WifiConfigurationSpecifics::_internal_has_security_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WifiConfigurationSpecifics::has_security_type() const {
  return _internal_has_security_type();
}
inline void WifiConfigurationSpecifics::clear_security_type() {
  security_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::sync_pb::WifiConfigurationSpecifics_SecurityType WifiConfigurationSpecifics::_internal_security_type() const {
  return static_cast< ::sync_pb::WifiConfigurationSpecifics_SecurityType >(security_type_);
}
inline ::sync_pb::WifiConfigurationSpecifics_SecurityType WifiConfigurationSpecifics::security_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.security_type)
  return _internal_security_type();
}
inline void WifiConfigurationSpecifics::_internal_set_security_type(::sync_pb::WifiConfigurationSpecifics_SecurityType value) {
  assert(::sync_pb::WifiConfigurationSpecifics_SecurityType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  security_type_ = value;
}
inline void WifiConfigurationSpecifics::set_security_type(::sync_pb::WifiConfigurationSpecifics_SecurityType value) {
  _internal_set_security_type(value);
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.security_type)
}

// optional bytes passphrase = 3;
inline bool WifiConfigurationSpecifics::_internal_has_passphrase() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WifiConfigurationSpecifics::has_passphrase() const {
  return _internal_has_passphrase();
}
inline void WifiConfigurationSpecifics::clear_passphrase() {
  passphrase_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WifiConfigurationSpecifics::passphrase() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.passphrase)
  return _internal_passphrase();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WifiConfigurationSpecifics::set_passphrase(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 passphrase_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.passphrase)
}
inline std::string* WifiConfigurationSpecifics::mutable_passphrase() {
  std::string* _s = _internal_mutable_passphrase();
  // @@protoc_insertion_point(field_mutable:sync_pb.WifiConfigurationSpecifics.passphrase)
  return _s;
}
inline const std::string& WifiConfigurationSpecifics::_internal_passphrase() const {
  return passphrase_.Get();
}
inline void WifiConfigurationSpecifics::_internal_set_passphrase(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  passphrase_.Set(value, GetArenaForAllocation());
}
inline std::string* WifiConfigurationSpecifics::_internal_mutable_passphrase() {
  _has_bits_[0] |= 0x00000002u;
  return passphrase_.Mutable(GetArenaForAllocation());
}
inline std::string* WifiConfigurationSpecifics::release_passphrase() {
  // @@protoc_insertion_point(field_release:sync_pb.WifiConfigurationSpecifics.passphrase)
  if (!_internal_has_passphrase()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = passphrase_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (passphrase_.IsDefault()) {
    passphrase_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WifiConfigurationSpecifics::set_allocated_passphrase(std::string* passphrase) {
  if (passphrase != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  passphrase_.SetAllocated(passphrase, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (passphrase_.IsDefault()) {
    passphrase_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WifiConfigurationSpecifics.passphrase)
}

// optional .sync_pb.WifiConfigurationSpecifics.AutomaticallyConnectOption automatically_connect = 4;
inline bool WifiConfigurationSpecifics::_internal_has_automatically_connect() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WifiConfigurationSpecifics::has_automatically_connect() const {
  return _internal_has_automatically_connect();
}
inline void WifiConfigurationSpecifics::clear_automatically_connect() {
  automatically_connect_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::sync_pb::WifiConfigurationSpecifics_AutomaticallyConnectOption WifiConfigurationSpecifics::_internal_automatically_connect() const {
  return static_cast< ::sync_pb::WifiConfigurationSpecifics_AutomaticallyConnectOption >(automatically_connect_);
}
inline ::sync_pb::WifiConfigurationSpecifics_AutomaticallyConnectOption WifiConfigurationSpecifics::automatically_connect() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.automatically_connect)
  return _internal_automatically_connect();
}
inline void WifiConfigurationSpecifics::_internal_set_automatically_connect(::sync_pb::WifiConfigurationSpecifics_AutomaticallyConnectOption value) {
  assert(::sync_pb::WifiConfigurationSpecifics_AutomaticallyConnectOption_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  automatically_connect_ = value;
}
inline void WifiConfigurationSpecifics::set_automatically_connect(::sync_pb::WifiConfigurationSpecifics_AutomaticallyConnectOption value) {
  _internal_set_automatically_connect(value);
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.automatically_connect)
}

// optional .sync_pb.WifiConfigurationSpecifics.IsPreferredOption is_preferred = 5;
inline bool WifiConfigurationSpecifics::_internal_has_is_preferred() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WifiConfigurationSpecifics::has_is_preferred() const {
  return _internal_has_is_preferred();
}
inline void WifiConfigurationSpecifics::clear_is_preferred() {
  is_preferred_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::sync_pb::WifiConfigurationSpecifics_IsPreferredOption WifiConfigurationSpecifics::_internal_is_preferred() const {
  return static_cast< ::sync_pb::WifiConfigurationSpecifics_IsPreferredOption >(is_preferred_);
}
inline ::sync_pb::WifiConfigurationSpecifics_IsPreferredOption WifiConfigurationSpecifics::is_preferred() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.is_preferred)
  return _internal_is_preferred();
}
inline void WifiConfigurationSpecifics::_internal_set_is_preferred(::sync_pb::WifiConfigurationSpecifics_IsPreferredOption value) {
  assert(::sync_pb::WifiConfigurationSpecifics_IsPreferredOption_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  is_preferred_ = value;
}
inline void WifiConfigurationSpecifics::set_is_preferred(::sync_pb::WifiConfigurationSpecifics_IsPreferredOption value) {
  _internal_set_is_preferred(value);
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.is_preferred)
}

// optional .sync_pb.WifiConfigurationSpecifics.MeteredOption metered = 6;
inline bool WifiConfigurationSpecifics::_internal_has_metered() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool WifiConfigurationSpecifics::has_metered() const {
  return _internal_has_metered();
}
inline void WifiConfigurationSpecifics::clear_metered() {
  metered_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::sync_pb::WifiConfigurationSpecifics_MeteredOption WifiConfigurationSpecifics::_internal_metered() const {
  return static_cast< ::sync_pb::WifiConfigurationSpecifics_MeteredOption >(metered_);
}
inline ::sync_pb::WifiConfigurationSpecifics_MeteredOption WifiConfigurationSpecifics::metered() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.metered)
  return _internal_metered();
}
inline void WifiConfigurationSpecifics::_internal_set_metered(::sync_pb::WifiConfigurationSpecifics_MeteredOption value) {
  assert(::sync_pb::WifiConfigurationSpecifics_MeteredOption_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  metered_ = value;
}
inline void WifiConfigurationSpecifics::set_metered(::sync_pb::WifiConfigurationSpecifics_MeteredOption value) {
  _internal_set_metered(value);
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.metered)
}

// optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration proxy_configuration = 7;
inline bool WifiConfigurationSpecifics::_internal_has_proxy_configuration() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || proxy_configuration_ != nullptr);
  return value;
}
inline bool WifiConfigurationSpecifics::has_proxy_configuration() const {
  return _internal_has_proxy_configuration();
}
inline void WifiConfigurationSpecifics::clear_proxy_configuration() {
  if (proxy_configuration_ != nullptr) proxy_configuration_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration& WifiConfigurationSpecifics::_internal_proxy_configuration() const {
  const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* p = proxy_configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration&>(
      ::sync_pb::_WifiConfigurationSpecifics_ProxyConfiguration_default_instance_);
}
inline const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration& WifiConfigurationSpecifics::proxy_configuration() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.proxy_configuration)
  return _internal_proxy_configuration();
}
inline void WifiConfigurationSpecifics::unsafe_arena_set_allocated_proxy_configuration(
    ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* proxy_configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proxy_configuration_);
  }
  proxy_configuration_ = proxy_configuration;
  if (proxy_configuration) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.WifiConfigurationSpecifics.proxy_configuration)
}
inline ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* WifiConfigurationSpecifics::release_proxy_configuration() {
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* temp = proxy_configuration_;
  proxy_configuration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* WifiConfigurationSpecifics::unsafe_arena_release_proxy_configuration() {
  // @@protoc_insertion_point(field_release:sync_pb.WifiConfigurationSpecifics.proxy_configuration)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* temp = proxy_configuration_;
  proxy_configuration_ = nullptr;
  return temp;
}
inline ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* WifiConfigurationSpecifics::_internal_mutable_proxy_configuration() {
  _has_bits_[0] |= 0x00000004u;
  if (proxy_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration>(GetArenaForAllocation());
    proxy_configuration_ = p;
  }
  return proxy_configuration_;
}
inline ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* WifiConfigurationSpecifics::mutable_proxy_configuration() {
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* _msg = _internal_mutable_proxy_configuration();
  // @@protoc_insertion_point(field_mutable:sync_pb.WifiConfigurationSpecifics.proxy_configuration)
  return _msg;
}
inline void WifiConfigurationSpecifics::set_allocated_proxy_configuration(::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* proxy_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete proxy_configuration_;
  }
  if (proxy_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(proxy_configuration);
    if (message_arena != submessage_arena) {
      proxy_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proxy_configuration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  proxy_configuration_ = proxy_configuration;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WifiConfigurationSpecifics.proxy_configuration)
}

// optional .sync_pb.WifiConfigurationSpecifics.DnsOption dns_option = 10;
inline bool WifiConfigurationSpecifics::_internal_has_dns_option() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool WifiConfigurationSpecifics::has_dns_option() const {
  return _internal_has_dns_option();
}
inline void WifiConfigurationSpecifics::clear_dns_option() {
  dns_option_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::sync_pb::WifiConfigurationSpecifics_DnsOption WifiConfigurationSpecifics::_internal_dns_option() const {
  return static_cast< ::sync_pb::WifiConfigurationSpecifics_DnsOption >(dns_option_);
}
inline ::sync_pb::WifiConfigurationSpecifics_DnsOption WifiConfigurationSpecifics::dns_option() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.dns_option)
  return _internal_dns_option();
}
inline void WifiConfigurationSpecifics::_internal_set_dns_option(::sync_pb::WifiConfigurationSpecifics_DnsOption value) {
  assert(::sync_pb::WifiConfigurationSpecifics_DnsOption_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  dns_option_ = value;
}
inline void WifiConfigurationSpecifics::set_dns_option(::sync_pb::WifiConfigurationSpecifics_DnsOption value) {
  _internal_set_dns_option(value);
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.dns_option)
}

// repeated string custom_dns = 8;
inline int WifiConfigurationSpecifics::_internal_custom_dns_size() const {
  return custom_dns_.size();
}
inline int WifiConfigurationSpecifics::custom_dns_size() const {
  return _internal_custom_dns_size();
}
inline void WifiConfigurationSpecifics::clear_custom_dns() {
  custom_dns_.Clear();
}
inline std::string* WifiConfigurationSpecifics::add_custom_dns() {
  std::string* _s = _internal_add_custom_dns();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.WifiConfigurationSpecifics.custom_dns)
  return _s;
}
inline const std::string& WifiConfigurationSpecifics::_internal_custom_dns(int index) const {
  return custom_dns_.Get(index);
}
inline const std::string& WifiConfigurationSpecifics::custom_dns(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.custom_dns)
  return _internal_custom_dns(index);
}
inline std::string* WifiConfigurationSpecifics::mutable_custom_dns(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.WifiConfigurationSpecifics.custom_dns)
  return custom_dns_.Mutable(index);
}
inline void WifiConfigurationSpecifics::set_custom_dns(int index, const std::string& value) {
  custom_dns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.custom_dns)
}
inline void WifiConfigurationSpecifics::set_custom_dns(int index, std::string&& value) {
  custom_dns_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.custom_dns)
}
inline void WifiConfigurationSpecifics::set_custom_dns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  custom_dns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.WifiConfigurationSpecifics.custom_dns)
}
inline void WifiConfigurationSpecifics::set_custom_dns(int index, const char* value, size_t size) {
  custom_dns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WifiConfigurationSpecifics.custom_dns)
}
inline std::string* WifiConfigurationSpecifics::_internal_add_custom_dns() {
  return custom_dns_.Add();
}
inline void WifiConfigurationSpecifics::add_custom_dns(const std::string& value) {
  custom_dns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.WifiConfigurationSpecifics.custom_dns)
}
inline void WifiConfigurationSpecifics::add_custom_dns(std::string&& value) {
  custom_dns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.WifiConfigurationSpecifics.custom_dns)
}
inline void WifiConfigurationSpecifics::add_custom_dns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  custom_dns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.WifiConfigurationSpecifics.custom_dns)
}
inline void WifiConfigurationSpecifics::add_custom_dns(const char* value, size_t size) {
  custom_dns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.WifiConfigurationSpecifics.custom_dns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WifiConfigurationSpecifics::custom_dns() const {
  // @@protoc_insertion_point(field_list:sync_pb.WifiConfigurationSpecifics.custom_dns)
  return custom_dns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WifiConfigurationSpecifics::mutable_custom_dns() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.WifiConfigurationSpecifics.custom_dns)
  return &custom_dns_;
}

// optional int64 last_connected_timestamp = 9;
inline bool WifiConfigurationSpecifics::_internal_has_last_connected_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool WifiConfigurationSpecifics::has_last_connected_timestamp() const {
  return _internal_has_last_connected_timestamp();
}
inline void WifiConfigurationSpecifics::clear_last_connected_timestamp() {
  last_connected_timestamp_ = int64_t{0};
  _has_bits_[0] &= ~0x00000080u;
}
inline int64_t WifiConfigurationSpecifics::_internal_last_connected_timestamp() const {
  return last_connected_timestamp_;
}
inline int64_t WifiConfigurationSpecifics::last_connected_timestamp() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.last_connected_timestamp)
  return _internal_last_connected_timestamp();
}
inline void WifiConfigurationSpecifics::_internal_set_last_connected_timestamp(int64_t value) {
  _has_bits_[0] |= 0x00000080u;
  last_connected_timestamp_ = value;
}
inline void WifiConfigurationSpecifics::set_last_connected_timestamp(int64_t value) {
  _internal_set_last_connected_timestamp(value);
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.last_connected_timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WifiConfigurationSpecifics_SecurityType> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WifiConfigurationSpecifics_AutomaticallyConnectOption> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WifiConfigurationSpecifics_IsPreferredOption> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WifiConfigurationSpecifics_MeteredOption> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WifiConfigurationSpecifics_DnsOption> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fwifi_5fconfiguration_5fspecifics_2eproto
