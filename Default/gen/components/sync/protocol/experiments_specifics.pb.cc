// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/experiments_specifics.proto

#include "components/sync/protocol/experiments_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR KeystoreEncryptionFlags::KeystoreEncryptionFlags(
    ::_pbi::ConstantInitialized)
  : enabled_(false){}
struct KeystoreEncryptionFlagsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeystoreEncryptionFlagsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeystoreEncryptionFlagsDefaultTypeInternal() {}
  union {
    KeystoreEncryptionFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeystoreEncryptionFlagsDefaultTypeInternal _KeystoreEncryptionFlags_default_instance_;
PROTOBUF_CONSTEXPR HistoryDeleteDirectives::HistoryDeleteDirectives(
    ::_pbi::ConstantInitialized)
  : enabled_(false){}
struct HistoryDeleteDirectivesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistoryDeleteDirectivesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistoryDeleteDirectivesDefaultTypeInternal() {}
  union {
    HistoryDeleteDirectives _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistoryDeleteDirectivesDefaultTypeInternal _HistoryDeleteDirectives_default_instance_;
PROTOBUF_CONSTEXPR AutofillCullingFlags::AutofillCullingFlags(
    ::_pbi::ConstantInitialized)
  : enabled_(false){}
struct AutofillCullingFlagsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillCullingFlagsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillCullingFlagsDefaultTypeInternal() {}
  union {
    AutofillCullingFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillCullingFlagsDefaultTypeInternal _AutofillCullingFlags_default_instance_;
PROTOBUF_CONSTEXPR FaviconSyncFlags::FaviconSyncFlags(
    ::_pbi::ConstantInitialized)
  : enabled_(false)
  , favicon_sync_limit_(200){}
struct FaviconSyncFlagsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FaviconSyncFlagsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FaviconSyncFlagsDefaultTypeInternal() {}
  union {
    FaviconSyncFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FaviconSyncFlagsDefaultTypeInternal _FaviconSyncFlags_default_instance_;
PROTOBUF_CONSTEXPR PreCommitUpdateAvoidanceFlags::PreCommitUpdateAvoidanceFlags(
    ::_pbi::ConstantInitialized)
  : enabled_(false){}
struct PreCommitUpdateAvoidanceFlagsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PreCommitUpdateAvoidanceFlagsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PreCommitUpdateAvoidanceFlagsDefaultTypeInternal() {}
  union {
    PreCommitUpdateAvoidanceFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PreCommitUpdateAvoidanceFlagsDefaultTypeInternal _PreCommitUpdateAvoidanceFlags_default_instance_;
PROTOBUF_CONSTEXPR GcmChannelFlags::GcmChannelFlags(
    ::_pbi::ConstantInitialized)
  : enabled_(false){}
struct GcmChannelFlagsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GcmChannelFlagsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GcmChannelFlagsDefaultTypeInternal() {}
  union {
    GcmChannelFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GcmChannelFlagsDefaultTypeInternal _GcmChannelFlags_default_instance_;
PROTOBUF_CONSTEXPR EnhancedBookmarksFlags::EnhancedBookmarksFlags(
    ::_pbi::ConstantInitialized)
  : extension_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , enabled_(false){}
struct EnhancedBookmarksFlagsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnhancedBookmarksFlagsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnhancedBookmarksFlagsDefaultTypeInternal() {}
  union {
    EnhancedBookmarksFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnhancedBookmarksFlagsDefaultTypeInternal _EnhancedBookmarksFlags_default_instance_;
PROTOBUF_CONSTEXPR GcmInvalidationsFlags::GcmInvalidationsFlags(
    ::_pbi::ConstantInitialized)
  : enabled_(false){}
struct GcmInvalidationsFlagsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GcmInvalidationsFlagsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GcmInvalidationsFlagsDefaultTypeInternal() {}
  union {
    GcmInvalidationsFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GcmInvalidationsFlagsDefaultTypeInternal _GcmInvalidationsFlags_default_instance_;
PROTOBUF_CONSTEXPR WalletSyncFlags::WalletSyncFlags(
    ::_pbi::ConstantInitialized)
  : enabled_(false){}
struct WalletSyncFlagsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WalletSyncFlagsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WalletSyncFlagsDefaultTypeInternal() {}
  union {
    WalletSyncFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WalletSyncFlagsDefaultTypeInternal _WalletSyncFlags_default_instance_;
PROTOBUF_CONSTEXPR ExperimentsSpecifics::ExperimentsSpecifics(
    ::_pbi::ConstantInitialized)
  : keystore_encryption_(nullptr)
  , history_delete_directives_(nullptr)
  , autofill_culling_(nullptr)
  , favicon_sync_(nullptr)
  , pre_commit_update_avoidance_(nullptr)
  , gcm_channel_(nullptr)
  , obsolete_enhanced_bookmarks_(nullptr)
  , gcm_invalidations_(nullptr)
  , obsolete_wallet_sync_(nullptr){}
struct ExperimentsSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExperimentsSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExperimentsSpecificsDefaultTypeInternal() {}
  union {
    ExperimentsSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExperimentsSpecificsDefaultTypeInternal _ExperimentsSpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class KeystoreEncryptionFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<KeystoreEncryptionFlags>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

KeystoreEncryptionFlags::KeystoreEncryptionFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.KeystoreEncryptionFlags)
}
KeystoreEncryptionFlags::KeystoreEncryptionFlags(const KeystoreEncryptionFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.KeystoreEncryptionFlags)
}

inline void KeystoreEncryptionFlags::SharedCtor() {
enabled_ = false;
}

KeystoreEncryptionFlags::~KeystoreEncryptionFlags() {
  // @@protoc_insertion_point(destructor:sync_pb.KeystoreEncryptionFlags)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeystoreEncryptionFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeystoreEncryptionFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeystoreEncryptionFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.KeystoreEncryptionFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KeystoreEncryptionFlags::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeystoreEncryptionFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.KeystoreEncryptionFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.KeystoreEncryptionFlags)
  return target;
}

size_t KeystoreEncryptionFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.KeystoreEncryptionFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeystoreEncryptionFlags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const KeystoreEncryptionFlags*>(
      &from));
}

void KeystoreEncryptionFlags::MergeFrom(const KeystoreEncryptionFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.KeystoreEncryptionFlags)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _internal_set_enabled(from._internal_enabled());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void KeystoreEncryptionFlags::CopyFrom(const KeystoreEncryptionFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.KeystoreEncryptionFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeystoreEncryptionFlags::IsInitialized() const {
  return true;
}

void KeystoreEncryptionFlags::InternalSwap(KeystoreEncryptionFlags* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string KeystoreEncryptionFlags::GetTypeName() const {
  return "sync_pb.KeystoreEncryptionFlags";
}


// ===================================================================

class HistoryDeleteDirectives::_Internal {
 public:
  using HasBits = decltype(std::declval<HistoryDeleteDirectives>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HistoryDeleteDirectives::HistoryDeleteDirectives(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.HistoryDeleteDirectives)
}
HistoryDeleteDirectives::HistoryDeleteDirectives(const HistoryDeleteDirectives& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.HistoryDeleteDirectives)
}

inline void HistoryDeleteDirectives::SharedCtor() {
enabled_ = false;
}

HistoryDeleteDirectives::~HistoryDeleteDirectives() {
  // @@protoc_insertion_point(destructor:sync_pb.HistoryDeleteDirectives)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HistoryDeleteDirectives::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HistoryDeleteDirectives::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HistoryDeleteDirectives::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.HistoryDeleteDirectives)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HistoryDeleteDirectives::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HistoryDeleteDirectives::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.HistoryDeleteDirectives)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.HistoryDeleteDirectives)
  return target;
}

size_t HistoryDeleteDirectives::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.HistoryDeleteDirectives)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoryDeleteDirectives::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HistoryDeleteDirectives*>(
      &from));
}

void HistoryDeleteDirectives::MergeFrom(const HistoryDeleteDirectives& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.HistoryDeleteDirectives)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _internal_set_enabled(from._internal_enabled());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HistoryDeleteDirectives::CopyFrom(const HistoryDeleteDirectives& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.HistoryDeleteDirectives)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryDeleteDirectives::IsInitialized() const {
  return true;
}

void HistoryDeleteDirectives::InternalSwap(HistoryDeleteDirectives* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string HistoryDeleteDirectives::GetTypeName() const {
  return "sync_pb.HistoryDeleteDirectives";
}


// ===================================================================

class AutofillCullingFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillCullingFlags>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AutofillCullingFlags::AutofillCullingFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.AutofillCullingFlags)
}
AutofillCullingFlags::AutofillCullingFlags(const AutofillCullingFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.AutofillCullingFlags)
}

inline void AutofillCullingFlags::SharedCtor() {
enabled_ = false;
}

AutofillCullingFlags::~AutofillCullingFlags() {
  // @@protoc_insertion_point(destructor:sync_pb.AutofillCullingFlags)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillCullingFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AutofillCullingFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillCullingFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.AutofillCullingFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillCullingFlags::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillCullingFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.AutofillCullingFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.AutofillCullingFlags)
  return target;
}

size_t AutofillCullingFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.AutofillCullingFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillCullingFlags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillCullingFlags*>(
      &from));
}

void AutofillCullingFlags::MergeFrom(const AutofillCullingFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AutofillCullingFlags)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _internal_set_enabled(from._internal_enabled());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillCullingFlags::CopyFrom(const AutofillCullingFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AutofillCullingFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillCullingFlags::IsInitialized() const {
  return true;
}

void AutofillCullingFlags::InternalSwap(AutofillCullingFlags* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string AutofillCullingFlags::GetTypeName() const {
  return "sync_pb.AutofillCullingFlags";
}


// ===================================================================

class FaviconSyncFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<FaviconSyncFlags>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_favicon_sync_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FaviconSyncFlags::FaviconSyncFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.FaviconSyncFlags)
}
FaviconSyncFlags::FaviconSyncFlags(const FaviconSyncFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&favicon_sync_limit_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(favicon_sync_limit_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.FaviconSyncFlags)
}

inline void FaviconSyncFlags::SharedCtor() {
enabled_ = false;
favicon_sync_limit_ = 200;
}

FaviconSyncFlags::~FaviconSyncFlags() {
  // @@protoc_insertion_point(destructor:sync_pb.FaviconSyncFlags)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FaviconSyncFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FaviconSyncFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FaviconSyncFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.FaviconSyncFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    enabled_ = false;
    favicon_sync_limit_ = 200;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FaviconSyncFlags::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 favicon_sync_limit = 2 [default = 200];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_favicon_sync_limit(&has_bits);
          favicon_sync_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaviconSyncFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.FaviconSyncFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // optional int32 favicon_sync_limit = 2 [default = 200];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_favicon_sync_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.FaviconSyncFlags)
  return target;
}

size_t FaviconSyncFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.FaviconSyncFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool enabled = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 favicon_sync_limit = 2 [default = 200];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_favicon_sync_limit());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaviconSyncFlags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FaviconSyncFlags*>(
      &from));
}

void FaviconSyncFlags::MergeFrom(const FaviconSyncFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.FaviconSyncFlags)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      favicon_sync_limit_ = from.favicon_sync_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FaviconSyncFlags::CopyFrom(const FaviconSyncFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.FaviconSyncFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaviconSyncFlags::IsInitialized() const {
  return true;
}

void FaviconSyncFlags::InternalSwap(FaviconSyncFlags* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
  swap(favicon_sync_limit_, other->favicon_sync_limit_);
}

std::string FaviconSyncFlags::GetTypeName() const {
  return "sync_pb.FaviconSyncFlags";
}


// ===================================================================

class PreCommitUpdateAvoidanceFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<PreCommitUpdateAvoidanceFlags>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PreCommitUpdateAvoidanceFlags::PreCommitUpdateAvoidanceFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.PreCommitUpdateAvoidanceFlags)
}
PreCommitUpdateAvoidanceFlags::PreCommitUpdateAvoidanceFlags(const PreCommitUpdateAvoidanceFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.PreCommitUpdateAvoidanceFlags)
}

inline void PreCommitUpdateAvoidanceFlags::SharedCtor() {
enabled_ = false;
}

PreCommitUpdateAvoidanceFlags::~PreCommitUpdateAvoidanceFlags() {
  // @@protoc_insertion_point(destructor:sync_pb.PreCommitUpdateAvoidanceFlags)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PreCommitUpdateAvoidanceFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PreCommitUpdateAvoidanceFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreCommitUpdateAvoidanceFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.PreCommitUpdateAvoidanceFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PreCommitUpdateAvoidanceFlags::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreCommitUpdateAvoidanceFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.PreCommitUpdateAvoidanceFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.PreCommitUpdateAvoidanceFlags)
  return target;
}

size_t PreCommitUpdateAvoidanceFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.PreCommitUpdateAvoidanceFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreCommitUpdateAvoidanceFlags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PreCommitUpdateAvoidanceFlags*>(
      &from));
}

void PreCommitUpdateAvoidanceFlags::MergeFrom(const PreCommitUpdateAvoidanceFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.PreCommitUpdateAvoidanceFlags)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _internal_set_enabled(from._internal_enabled());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PreCommitUpdateAvoidanceFlags::CopyFrom(const PreCommitUpdateAvoidanceFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.PreCommitUpdateAvoidanceFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreCommitUpdateAvoidanceFlags::IsInitialized() const {
  return true;
}

void PreCommitUpdateAvoidanceFlags::InternalSwap(PreCommitUpdateAvoidanceFlags* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string PreCommitUpdateAvoidanceFlags::GetTypeName() const {
  return "sync_pb.PreCommitUpdateAvoidanceFlags";
}


// ===================================================================

class GcmChannelFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<GcmChannelFlags>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GcmChannelFlags::GcmChannelFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.GcmChannelFlags)
}
GcmChannelFlags::GcmChannelFlags(const GcmChannelFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.GcmChannelFlags)
}

inline void GcmChannelFlags::SharedCtor() {
enabled_ = false;
}

GcmChannelFlags::~GcmChannelFlags() {
  // @@protoc_insertion_point(destructor:sync_pb.GcmChannelFlags)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GcmChannelFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GcmChannelFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GcmChannelFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GcmChannelFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GcmChannelFlags::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GcmChannelFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.GcmChannelFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.GcmChannelFlags)
  return target;
}

size_t GcmChannelFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GcmChannelFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcmChannelFlags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GcmChannelFlags*>(
      &from));
}

void GcmChannelFlags::MergeFrom(const GcmChannelFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GcmChannelFlags)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _internal_set_enabled(from._internal_enabled());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GcmChannelFlags::CopyFrom(const GcmChannelFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GcmChannelFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcmChannelFlags::IsInitialized() const {
  return true;
}

void GcmChannelFlags::InternalSwap(GcmChannelFlags* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string GcmChannelFlags::GetTypeName() const {
  return "sync_pb.GcmChannelFlags";
}


// ===================================================================

class EnhancedBookmarksFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<EnhancedBookmarksFlags>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_extension_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnhancedBookmarksFlags::EnhancedBookmarksFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.EnhancedBookmarksFlags)
}
EnhancedBookmarksFlags::EnhancedBookmarksFlags(const EnhancedBookmarksFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  extension_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    extension_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_extension_id()) {
    extension_id_.Set(from._internal_extension_id(), 
      GetArenaForAllocation());
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.EnhancedBookmarksFlags)
}

inline void EnhancedBookmarksFlags::SharedCtor() {
extension_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  extension_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
enabled_ = false;
}

EnhancedBookmarksFlags::~EnhancedBookmarksFlags() {
  // @@protoc_insertion_point(destructor:sync_pb.EnhancedBookmarksFlags)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnhancedBookmarksFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  extension_id_.Destroy();
}

void EnhancedBookmarksFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnhancedBookmarksFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.EnhancedBookmarksFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    extension_id_.ClearNonDefaultToEmpty();
  }
  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnhancedBookmarksFlags::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string extension_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_extension_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnhancedBookmarksFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.EnhancedBookmarksFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // optional string extension_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_extension_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.EnhancedBookmarksFlags)
  return target;
}

size_t EnhancedBookmarksFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.EnhancedBookmarksFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string extension_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_extension_id());
    }

    // optional bool enabled = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnhancedBookmarksFlags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnhancedBookmarksFlags*>(
      &from));
}

void EnhancedBookmarksFlags::MergeFrom(const EnhancedBookmarksFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.EnhancedBookmarksFlags)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_extension_id(from._internal_extension_id());
    }
    if (cached_has_bits & 0x00000002u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnhancedBookmarksFlags::CopyFrom(const EnhancedBookmarksFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.EnhancedBookmarksFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnhancedBookmarksFlags::IsInitialized() const {
  return true;
}

void EnhancedBookmarksFlags::InternalSwap(EnhancedBookmarksFlags* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &extension_id_, lhs_arena,
      &other->extension_id_, rhs_arena
  );
  swap(enabled_, other->enabled_);
}

std::string EnhancedBookmarksFlags::GetTypeName() const {
  return "sync_pb.EnhancedBookmarksFlags";
}


// ===================================================================

class GcmInvalidationsFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<GcmInvalidationsFlags>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GcmInvalidationsFlags::GcmInvalidationsFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.GcmInvalidationsFlags)
}
GcmInvalidationsFlags::GcmInvalidationsFlags(const GcmInvalidationsFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.GcmInvalidationsFlags)
}

inline void GcmInvalidationsFlags::SharedCtor() {
enabled_ = false;
}

GcmInvalidationsFlags::~GcmInvalidationsFlags() {
  // @@protoc_insertion_point(destructor:sync_pb.GcmInvalidationsFlags)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GcmInvalidationsFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GcmInvalidationsFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GcmInvalidationsFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GcmInvalidationsFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GcmInvalidationsFlags::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GcmInvalidationsFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.GcmInvalidationsFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.GcmInvalidationsFlags)
  return target;
}

size_t GcmInvalidationsFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GcmInvalidationsFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcmInvalidationsFlags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GcmInvalidationsFlags*>(
      &from));
}

void GcmInvalidationsFlags::MergeFrom(const GcmInvalidationsFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GcmInvalidationsFlags)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _internal_set_enabled(from._internal_enabled());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GcmInvalidationsFlags::CopyFrom(const GcmInvalidationsFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GcmInvalidationsFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcmInvalidationsFlags::IsInitialized() const {
  return true;
}

void GcmInvalidationsFlags::InternalSwap(GcmInvalidationsFlags* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string GcmInvalidationsFlags::GetTypeName() const {
  return "sync_pb.GcmInvalidationsFlags";
}


// ===================================================================

class WalletSyncFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<WalletSyncFlags>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WalletSyncFlags::WalletSyncFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WalletSyncFlags)
}
WalletSyncFlags::WalletSyncFlags(const WalletSyncFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.WalletSyncFlags)
}

inline void WalletSyncFlags::SharedCtor() {
enabled_ = false;
}

WalletSyncFlags::~WalletSyncFlags() {
  // @@protoc_insertion_point(destructor:sync_pb.WalletSyncFlags)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WalletSyncFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WalletSyncFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WalletSyncFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WalletSyncFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WalletSyncFlags::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WalletSyncFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WalletSyncFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WalletSyncFlags)
  return target;
}

size_t WalletSyncFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WalletSyncFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WalletSyncFlags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WalletSyncFlags*>(
      &from));
}

void WalletSyncFlags::MergeFrom(const WalletSyncFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WalletSyncFlags)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _internal_set_enabled(from._internal_enabled());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WalletSyncFlags::CopyFrom(const WalletSyncFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WalletSyncFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletSyncFlags::IsInitialized() const {
  return true;
}

void WalletSyncFlags::InternalSwap(WalletSyncFlags* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string WalletSyncFlags::GetTypeName() const {
  return "sync_pb.WalletSyncFlags";
}


// ===================================================================

class ExperimentsSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<ExperimentsSpecifics>()._has_bits_);
  static const ::sync_pb::KeystoreEncryptionFlags& keystore_encryption(const ExperimentsSpecifics* msg);
  static void set_has_keystore_encryption(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::HistoryDeleteDirectives& history_delete_directives(const ExperimentsSpecifics* msg);
  static void set_has_history_delete_directives(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::AutofillCullingFlags& autofill_culling(const ExperimentsSpecifics* msg);
  static void set_has_autofill_culling(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::sync_pb::FaviconSyncFlags& favicon_sync(const ExperimentsSpecifics* msg);
  static void set_has_favicon_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::sync_pb::PreCommitUpdateAvoidanceFlags& pre_commit_update_avoidance(const ExperimentsSpecifics* msg);
  static void set_has_pre_commit_update_avoidance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::sync_pb::GcmChannelFlags& gcm_channel(const ExperimentsSpecifics* msg);
  static void set_has_gcm_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::sync_pb::EnhancedBookmarksFlags& obsolete_enhanced_bookmarks(const ExperimentsSpecifics* msg);
  static void set_has_obsolete_enhanced_bookmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::sync_pb::GcmInvalidationsFlags& gcm_invalidations(const ExperimentsSpecifics* msg);
  static void set_has_gcm_invalidations(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::sync_pb::WalletSyncFlags& obsolete_wallet_sync(const ExperimentsSpecifics* msg);
  static void set_has_obsolete_wallet_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::sync_pb::KeystoreEncryptionFlags&
ExperimentsSpecifics::_Internal::keystore_encryption(const ExperimentsSpecifics* msg) {
  return *msg->keystore_encryption_;
}
const ::sync_pb::HistoryDeleteDirectives&
ExperimentsSpecifics::_Internal::history_delete_directives(const ExperimentsSpecifics* msg) {
  return *msg->history_delete_directives_;
}
const ::sync_pb::AutofillCullingFlags&
ExperimentsSpecifics::_Internal::autofill_culling(const ExperimentsSpecifics* msg) {
  return *msg->autofill_culling_;
}
const ::sync_pb::FaviconSyncFlags&
ExperimentsSpecifics::_Internal::favicon_sync(const ExperimentsSpecifics* msg) {
  return *msg->favicon_sync_;
}
const ::sync_pb::PreCommitUpdateAvoidanceFlags&
ExperimentsSpecifics::_Internal::pre_commit_update_avoidance(const ExperimentsSpecifics* msg) {
  return *msg->pre_commit_update_avoidance_;
}
const ::sync_pb::GcmChannelFlags&
ExperimentsSpecifics::_Internal::gcm_channel(const ExperimentsSpecifics* msg) {
  return *msg->gcm_channel_;
}
const ::sync_pb::EnhancedBookmarksFlags&
ExperimentsSpecifics::_Internal::obsolete_enhanced_bookmarks(const ExperimentsSpecifics* msg) {
  return *msg->obsolete_enhanced_bookmarks_;
}
const ::sync_pb::GcmInvalidationsFlags&
ExperimentsSpecifics::_Internal::gcm_invalidations(const ExperimentsSpecifics* msg) {
  return *msg->gcm_invalidations_;
}
const ::sync_pb::WalletSyncFlags&
ExperimentsSpecifics::_Internal::obsolete_wallet_sync(const ExperimentsSpecifics* msg) {
  return *msg->obsolete_wallet_sync_;
}
ExperimentsSpecifics::ExperimentsSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.ExperimentsSpecifics)
}
ExperimentsSpecifics::ExperimentsSpecifics(const ExperimentsSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_keystore_encryption()) {
    keystore_encryption_ = new ::sync_pb::KeystoreEncryptionFlags(*from.keystore_encryption_);
  } else {
    keystore_encryption_ = nullptr;
  }
  if (from._internal_has_history_delete_directives()) {
    history_delete_directives_ = new ::sync_pb::HistoryDeleteDirectives(*from.history_delete_directives_);
  } else {
    history_delete_directives_ = nullptr;
  }
  if (from._internal_has_autofill_culling()) {
    autofill_culling_ = new ::sync_pb::AutofillCullingFlags(*from.autofill_culling_);
  } else {
    autofill_culling_ = nullptr;
  }
  if (from._internal_has_favicon_sync()) {
    favicon_sync_ = new ::sync_pb::FaviconSyncFlags(*from.favicon_sync_);
  } else {
    favicon_sync_ = nullptr;
  }
  if (from._internal_has_pre_commit_update_avoidance()) {
    pre_commit_update_avoidance_ = new ::sync_pb::PreCommitUpdateAvoidanceFlags(*from.pre_commit_update_avoidance_);
  } else {
    pre_commit_update_avoidance_ = nullptr;
  }
  if (from._internal_has_gcm_channel()) {
    gcm_channel_ = new ::sync_pb::GcmChannelFlags(*from.gcm_channel_);
  } else {
    gcm_channel_ = nullptr;
  }
  if (from._internal_has_obsolete_enhanced_bookmarks()) {
    obsolete_enhanced_bookmarks_ = new ::sync_pb::EnhancedBookmarksFlags(*from.obsolete_enhanced_bookmarks_);
  } else {
    obsolete_enhanced_bookmarks_ = nullptr;
  }
  if (from._internal_has_gcm_invalidations()) {
    gcm_invalidations_ = new ::sync_pb::GcmInvalidationsFlags(*from.gcm_invalidations_);
  } else {
    gcm_invalidations_ = nullptr;
  }
  if (from._internal_has_obsolete_wallet_sync()) {
    obsolete_wallet_sync_ = new ::sync_pb::WalletSyncFlags(*from.obsolete_wallet_sync_);
  } else {
    obsolete_wallet_sync_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.ExperimentsSpecifics)
}

inline void ExperimentsSpecifics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&keystore_encryption_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&obsolete_wallet_sync_) -
    reinterpret_cast<char*>(&keystore_encryption_)) + sizeof(obsolete_wallet_sync_));
}

ExperimentsSpecifics::~ExperimentsSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.ExperimentsSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExperimentsSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete keystore_encryption_;
  if (this != internal_default_instance()) delete history_delete_directives_;
  if (this != internal_default_instance()) delete autofill_culling_;
  if (this != internal_default_instance()) delete favicon_sync_;
  if (this != internal_default_instance()) delete pre_commit_update_avoidance_;
  if (this != internal_default_instance()) delete gcm_channel_;
  if (this != internal_default_instance()) delete obsolete_enhanced_bookmarks_;
  if (this != internal_default_instance()) delete gcm_invalidations_;
  if (this != internal_default_instance()) delete obsolete_wallet_sync_;
}

void ExperimentsSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExperimentsSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ExperimentsSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(keystore_encryption_ != nullptr);
      keystore_encryption_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(history_delete_directives_ != nullptr);
      history_delete_directives_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(autofill_culling_ != nullptr);
      autofill_culling_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(favicon_sync_ != nullptr);
      favicon_sync_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(pre_commit_update_avoidance_ != nullptr);
      pre_commit_update_avoidance_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(gcm_channel_ != nullptr);
      gcm_channel_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(obsolete_enhanced_bookmarks_ != nullptr);
      obsolete_enhanced_bookmarks_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(gcm_invalidations_ != nullptr);
      gcm_invalidations_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(obsolete_wallet_sync_ != nullptr);
    obsolete_wallet_sync_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExperimentsSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.KeystoreEncryptionFlags keystore_encryption = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_keystore_encryption(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.HistoryDeleteDirectives history_delete_directives = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_history_delete_directives(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.AutofillCullingFlags autofill_culling = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_autofill_culling(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.FaviconSyncFlags favicon_sync = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_favicon_sync(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.PreCommitUpdateAvoidanceFlags pre_commit_update_avoidance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pre_commit_update_avoidance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.GcmChannelFlags gcm_channel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_gcm_channel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.EnhancedBookmarksFlags obsolete_enhanced_bookmarks = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_obsolete_enhanced_bookmarks(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.GcmInvalidationsFlags gcm_invalidations = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_gcm_invalidations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WalletSyncFlags obsolete_wallet_sync = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_obsolete_wallet_sync(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExperimentsSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.ExperimentsSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.KeystoreEncryptionFlags keystore_encryption = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::keystore_encryption(this),
        _Internal::keystore_encryption(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.HistoryDeleteDirectives history_delete_directives = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::history_delete_directives(this),
        _Internal::history_delete_directives(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.AutofillCullingFlags autofill_culling = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::autofill_culling(this),
        _Internal::autofill_culling(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.FaviconSyncFlags favicon_sync = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::favicon_sync(this),
        _Internal::favicon_sync(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.PreCommitUpdateAvoidanceFlags pre_commit_update_avoidance = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::pre_commit_update_avoidance(this),
        _Internal::pre_commit_update_avoidance(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.GcmChannelFlags gcm_channel = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::gcm_channel(this),
        _Internal::gcm_channel(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.EnhancedBookmarksFlags obsolete_enhanced_bookmarks = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::obsolete_enhanced_bookmarks(this),
        _Internal::obsolete_enhanced_bookmarks(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.GcmInvalidationsFlags gcm_invalidations = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::gcm_invalidations(this),
        _Internal::gcm_invalidations(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.WalletSyncFlags obsolete_wallet_sync = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::obsolete_wallet_sync(this),
        _Internal::obsolete_wallet_sync(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.ExperimentsSpecifics)
  return target;
}

size_t ExperimentsSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ExperimentsSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .sync_pb.KeystoreEncryptionFlags keystore_encryption = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *keystore_encryption_);
    }

    // optional .sync_pb.HistoryDeleteDirectives history_delete_directives = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *history_delete_directives_);
    }

    // optional .sync_pb.AutofillCullingFlags autofill_culling = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *autofill_culling_);
    }

    // optional .sync_pb.FaviconSyncFlags favicon_sync = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *favicon_sync_);
    }

    // optional .sync_pb.PreCommitUpdateAvoidanceFlags pre_commit_update_avoidance = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pre_commit_update_avoidance_);
    }

    // optional .sync_pb.GcmChannelFlags gcm_channel = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gcm_channel_);
    }

    // optional .sync_pb.EnhancedBookmarksFlags obsolete_enhanced_bookmarks = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obsolete_enhanced_bookmarks_);
    }

    // optional .sync_pb.GcmInvalidationsFlags gcm_invalidations = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gcm_invalidations_);
    }

  }
  // optional .sync_pb.WalletSyncFlags obsolete_wallet_sync = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obsolete_wallet_sync_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExperimentsSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ExperimentsSpecifics*>(
      &from));
}

void ExperimentsSpecifics::MergeFrom(const ExperimentsSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ExperimentsSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_keystore_encryption()->::sync_pb::KeystoreEncryptionFlags::MergeFrom(from._internal_keystore_encryption());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_history_delete_directives()->::sync_pb::HistoryDeleteDirectives::MergeFrom(from._internal_history_delete_directives());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_autofill_culling()->::sync_pb::AutofillCullingFlags::MergeFrom(from._internal_autofill_culling());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_favicon_sync()->::sync_pb::FaviconSyncFlags::MergeFrom(from._internal_favicon_sync());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_pre_commit_update_avoidance()->::sync_pb::PreCommitUpdateAvoidanceFlags::MergeFrom(from._internal_pre_commit_update_avoidance());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_gcm_channel()->::sync_pb::GcmChannelFlags::MergeFrom(from._internal_gcm_channel());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_obsolete_enhanced_bookmarks()->::sync_pb::EnhancedBookmarksFlags::MergeFrom(from._internal_obsolete_enhanced_bookmarks());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_gcm_invalidations()->::sync_pb::GcmInvalidationsFlags::MergeFrom(from._internal_gcm_invalidations());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_mutable_obsolete_wallet_sync()->::sync_pb::WalletSyncFlags::MergeFrom(from._internal_obsolete_wallet_sync());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ExperimentsSpecifics::CopyFrom(const ExperimentsSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ExperimentsSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExperimentsSpecifics::IsInitialized() const {
  return true;
}

void ExperimentsSpecifics::InternalSwap(ExperimentsSpecifics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExperimentsSpecifics, obsolete_wallet_sync_)
      + sizeof(ExperimentsSpecifics::obsolete_wallet_sync_)
      - PROTOBUF_FIELD_OFFSET(ExperimentsSpecifics, keystore_encryption_)>(
          reinterpret_cast<char*>(&keystore_encryption_),
          reinterpret_cast<char*>(&other->keystore_encryption_));
}

std::string ExperimentsSpecifics::GetTypeName() const {
  return "sync_pb.ExperimentsSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::KeystoreEncryptionFlags*
Arena::CreateMaybeMessage< ::sync_pb::KeystoreEncryptionFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::KeystoreEncryptionFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::HistoryDeleteDirectives*
Arena::CreateMaybeMessage< ::sync_pb::HistoryDeleteDirectives >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::HistoryDeleteDirectives >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::AutofillCullingFlags*
Arena::CreateMaybeMessage< ::sync_pb::AutofillCullingFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::AutofillCullingFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::FaviconSyncFlags*
Arena::CreateMaybeMessage< ::sync_pb::FaviconSyncFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::FaviconSyncFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::PreCommitUpdateAvoidanceFlags*
Arena::CreateMaybeMessage< ::sync_pb::PreCommitUpdateAvoidanceFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::PreCommitUpdateAvoidanceFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::GcmChannelFlags*
Arena::CreateMaybeMessage< ::sync_pb::GcmChannelFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::GcmChannelFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::EnhancedBookmarksFlags*
Arena::CreateMaybeMessage< ::sync_pb::EnhancedBookmarksFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::EnhancedBookmarksFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::GcmInvalidationsFlags*
Arena::CreateMaybeMessage< ::sync_pb::GcmInvalidationsFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::GcmInvalidationsFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WalletSyncFlags*
Arena::CreateMaybeMessage< ::sync_pb::WalletSyncFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WalletSyncFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::ExperimentsSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::ExperimentsSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::ExperimentsSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
