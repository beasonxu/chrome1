// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/saved_tab_group_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fsaved_5ftab_5fgroup_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fsaved_5ftab_5fgroup_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fsaved_5ftab_5fgroup_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fsaved_5ftab_5fgroup_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class SavedTabGroup;
struct SavedTabGroupDefaultTypeInternal;
extern SavedTabGroupDefaultTypeInternal _SavedTabGroup_default_instance_;
class SavedTabGroupSpecifics;
struct SavedTabGroupSpecificsDefaultTypeInternal;
extern SavedTabGroupSpecificsDefaultTypeInternal _SavedTabGroupSpecifics_default_instance_;
class SavedTabGroupTab;
struct SavedTabGroupTabDefaultTypeInternal;
extern SavedTabGroupTabDefaultTypeInternal _SavedTabGroupTab_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::SavedTabGroup* Arena::CreateMaybeMessage<::sync_pb::SavedTabGroup>(Arena*);
template<> ::sync_pb::SavedTabGroupSpecifics* Arena::CreateMaybeMessage<::sync_pb::SavedTabGroupSpecifics>(Arena*);
template<> ::sync_pb::SavedTabGroupTab* Arena::CreateMaybeMessage<::sync_pb::SavedTabGroupTab>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum SavedTabGroup_SavedTabGroupColor : int {
  SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_UNSPECIFIED = 0,
  SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_GREY = 1,
  SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_BLUE = 2,
  SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_RED = 3,
  SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_YELLOW = 4,
  SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_GREEN = 5,
  SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_PINK = 6,
  SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_PURPLE = 7,
  SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_CYAN = 8,
  SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_ORANGE = 9
};
bool SavedTabGroup_SavedTabGroupColor_IsValid(int value);
constexpr SavedTabGroup_SavedTabGroupColor SavedTabGroup_SavedTabGroupColor_SavedTabGroupColor_MIN = SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_UNSPECIFIED;
constexpr SavedTabGroup_SavedTabGroupColor SavedTabGroup_SavedTabGroupColor_SavedTabGroupColor_MAX = SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_ORANGE;
constexpr int SavedTabGroup_SavedTabGroupColor_SavedTabGroupColor_ARRAYSIZE = SavedTabGroup_SavedTabGroupColor_SavedTabGroupColor_MAX + 1;

const std::string& SavedTabGroup_SavedTabGroupColor_Name(SavedTabGroup_SavedTabGroupColor value);
template<typename T>
inline const std::string& SavedTabGroup_SavedTabGroupColor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SavedTabGroup_SavedTabGroupColor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SavedTabGroup_SavedTabGroupColor_Name.");
  return SavedTabGroup_SavedTabGroupColor_Name(static_cast<SavedTabGroup_SavedTabGroupColor>(enum_t_value));
}
bool SavedTabGroup_SavedTabGroupColor_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SavedTabGroup_SavedTabGroupColor* value);
// ===================================================================

class SavedTabGroup final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SavedTabGroup) */ {
 public:
  inline SavedTabGroup() : SavedTabGroup(nullptr) {}
  ~SavedTabGroup() override;
  explicit PROTOBUF_CONSTEXPR SavedTabGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SavedTabGroup(const SavedTabGroup& from);
  SavedTabGroup(SavedTabGroup&& from) noexcept
    : SavedTabGroup() {
    *this = ::std::move(from);
  }

  inline SavedTabGroup& operator=(const SavedTabGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline SavedTabGroup& operator=(SavedTabGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SavedTabGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const SavedTabGroup* internal_default_instance() {
    return reinterpret_cast<const SavedTabGroup*>(
               &_SavedTabGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SavedTabGroup& a, SavedTabGroup& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SavedTabGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SavedTabGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SavedTabGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SavedTabGroup>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SavedTabGroup& from);
  void MergeFrom(const SavedTabGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SavedTabGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SavedTabGroup";
  }
  protected:
  explicit SavedTabGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SavedTabGroup_SavedTabGroupColor SavedTabGroupColor;
  static constexpr SavedTabGroupColor SAVED_TAB_GROUP_COLOR_UNSPECIFIED =
    SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_UNSPECIFIED;
  static constexpr SavedTabGroupColor SAVED_TAB_GROUP_COLOR_GREY =
    SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_GREY;
  static constexpr SavedTabGroupColor SAVED_TAB_GROUP_COLOR_BLUE =
    SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_BLUE;
  static constexpr SavedTabGroupColor SAVED_TAB_GROUP_COLOR_RED =
    SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_RED;
  static constexpr SavedTabGroupColor SAVED_TAB_GROUP_COLOR_YELLOW =
    SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_YELLOW;
  static constexpr SavedTabGroupColor SAVED_TAB_GROUP_COLOR_GREEN =
    SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_GREEN;
  static constexpr SavedTabGroupColor SAVED_TAB_GROUP_COLOR_PINK =
    SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_PINK;
  static constexpr SavedTabGroupColor SAVED_TAB_GROUP_COLOR_PURPLE =
    SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_PURPLE;
  static constexpr SavedTabGroupColor SAVED_TAB_GROUP_COLOR_CYAN =
    SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_CYAN;
  static constexpr SavedTabGroupColor SAVED_TAB_GROUP_COLOR_ORANGE =
    SavedTabGroup_SavedTabGroupColor_SAVED_TAB_GROUP_COLOR_ORANGE;
  static inline bool SavedTabGroupColor_IsValid(int value) {
    return SavedTabGroup_SavedTabGroupColor_IsValid(value);
  }
  static constexpr SavedTabGroupColor SavedTabGroupColor_MIN =
    SavedTabGroup_SavedTabGroupColor_SavedTabGroupColor_MIN;
  static constexpr SavedTabGroupColor SavedTabGroupColor_MAX =
    SavedTabGroup_SavedTabGroupColor_SavedTabGroupColor_MAX;
  static constexpr int SavedTabGroupColor_ARRAYSIZE =
    SavedTabGroup_SavedTabGroupColor_SavedTabGroupColor_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SavedTabGroupColor_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SavedTabGroupColor>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SavedTabGroupColor_Name.");
    return SavedTabGroup_SavedTabGroupColor_Name(enum_t_value);
  }
  static inline bool SavedTabGroupColor_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SavedTabGroupColor* value) {
    return SavedTabGroup_SavedTabGroupColor_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kPositionFieldNumber = 1,
    kColorFieldNumber = 3,
  };
  // optional string title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional int64 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  int64_t position() const;
  void set_position(int64_t value);
  private:
  int64_t _internal_position() const;
  void _internal_set_position(int64_t value);
  public:

  // optional .sync_pb.SavedTabGroup.SavedTabGroupColor color = 3;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::sync_pb::SavedTabGroup_SavedTabGroupColor color() const;
  void set_color(::sync_pb::SavedTabGroup_SavedTabGroupColor value);
  private:
  ::sync_pb::SavedTabGroup_SavedTabGroupColor _internal_color() const;
  void _internal_set_color(::sync_pb::SavedTabGroup_SavedTabGroupColor value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.SavedTabGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  int64_t position_;
  int color_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fsaved_5ftab_5fgroup_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class SavedTabGroupTab final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SavedTabGroupTab) */ {
 public:
  inline SavedTabGroupTab() : SavedTabGroupTab(nullptr) {}
  ~SavedTabGroupTab() override;
  explicit PROTOBUF_CONSTEXPR SavedTabGroupTab(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SavedTabGroupTab(const SavedTabGroupTab& from);
  SavedTabGroupTab(SavedTabGroupTab&& from) noexcept
    : SavedTabGroupTab() {
    *this = ::std::move(from);
  }

  inline SavedTabGroupTab& operator=(const SavedTabGroupTab& from) {
    CopyFrom(from);
    return *this;
  }
  inline SavedTabGroupTab& operator=(SavedTabGroupTab&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SavedTabGroupTab& default_instance() {
    return *internal_default_instance();
  }
  static inline const SavedTabGroupTab* internal_default_instance() {
    return reinterpret_cast<const SavedTabGroupTab*>(
               &_SavedTabGroupTab_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SavedTabGroupTab& a, SavedTabGroupTab& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SavedTabGroupTab* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SavedTabGroupTab* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SavedTabGroupTab* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SavedTabGroupTab>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SavedTabGroupTab& from);
  void MergeFrom(const SavedTabGroupTab& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SavedTabGroupTab* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SavedTabGroupTab";
  }
  protected:
  explicit SavedTabGroupTab(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupGuidFieldNumber = 1,
    kUrlFieldNumber = 3,
    kPositionFieldNumber = 2,
  };
  // optional string group_guid = 1;
  bool has_group_guid() const;
  private:
  bool _internal_has_group_guid() const;
  public:
  void clear_group_guid();
  const std::string& group_guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_guid();
  PROTOBUF_NODISCARD std::string* release_group_guid();
  void set_allocated_group_guid(std::string* group_guid);
  private:
  const std::string& _internal_group_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_guid(const std::string& value);
  std::string* _internal_mutable_group_guid();
  public:

  // optional string url = 3;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional int64 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  int64_t position() const;
  void set_position(int64_t value);
  private:
  int64_t _internal_position() const;
  void _internal_set_position(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.SavedTabGroupTab)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  int64_t position_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fsaved_5ftab_5fgroup_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class SavedTabGroupSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SavedTabGroupSpecifics) */ {
 public:
  inline SavedTabGroupSpecifics() : SavedTabGroupSpecifics(nullptr) {}
  ~SavedTabGroupSpecifics() override;
  explicit PROTOBUF_CONSTEXPR SavedTabGroupSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SavedTabGroupSpecifics(const SavedTabGroupSpecifics& from);
  SavedTabGroupSpecifics(SavedTabGroupSpecifics&& from) noexcept
    : SavedTabGroupSpecifics() {
    *this = ::std::move(from);
  }

  inline SavedTabGroupSpecifics& operator=(const SavedTabGroupSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline SavedTabGroupSpecifics& operator=(SavedTabGroupSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SavedTabGroupSpecifics& default_instance() {
    return *internal_default_instance();
  }
  enum EntityCase {
    kGroup = 4,
    kTab = 5,
    ENTITY_NOT_SET = 0,
  };

  static inline const SavedTabGroupSpecifics* internal_default_instance() {
    return reinterpret_cast<const SavedTabGroupSpecifics*>(
               &_SavedTabGroupSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SavedTabGroupSpecifics& a, SavedTabGroupSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SavedTabGroupSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SavedTabGroupSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SavedTabGroupSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SavedTabGroupSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SavedTabGroupSpecifics& from);
  void MergeFrom(const SavedTabGroupSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SavedTabGroupSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SavedTabGroupSpecifics";
  }
  protected:
  explicit SavedTabGroupSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuidFieldNumber = 1,
    kCreationTimeWindowsEpochMicrosFieldNumber = 2,
    kUpdateTimeWindowsEpochMicrosFieldNumber = 3,
    kGroupFieldNumber = 4,
    kTabFieldNumber = 5,
  };
  // optional string guid = 1;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  const std::string& guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guid();
  PROTOBUF_NODISCARD std::string* release_guid();
  void set_allocated_guid(std::string* guid);
  private:
  const std::string& _internal_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guid(const std::string& value);
  std::string* _internal_mutable_guid();
  public:

  // optional int64 creation_time_windows_epoch_micros = 2;
  bool has_creation_time_windows_epoch_micros() const;
  private:
  bool _internal_has_creation_time_windows_epoch_micros() const;
  public:
  void clear_creation_time_windows_epoch_micros();
  int64_t creation_time_windows_epoch_micros() const;
  void set_creation_time_windows_epoch_micros(int64_t value);
  private:
  int64_t _internal_creation_time_windows_epoch_micros() const;
  void _internal_set_creation_time_windows_epoch_micros(int64_t value);
  public:

  // optional int64 update_time_windows_epoch_micros = 3;
  bool has_update_time_windows_epoch_micros() const;
  private:
  bool _internal_has_update_time_windows_epoch_micros() const;
  public:
  void clear_update_time_windows_epoch_micros();
  int64_t update_time_windows_epoch_micros() const;
  void set_update_time_windows_epoch_micros(int64_t value);
  private:
  int64_t _internal_update_time_windows_epoch_micros() const;
  void _internal_set_update_time_windows_epoch_micros(int64_t value);
  public:

  // .sync_pb.SavedTabGroup group = 4;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const ::sync_pb::SavedTabGroup& group() const;
  PROTOBUF_NODISCARD ::sync_pb::SavedTabGroup* release_group();
  ::sync_pb::SavedTabGroup* mutable_group();
  void set_allocated_group(::sync_pb::SavedTabGroup* group);
  private:
  const ::sync_pb::SavedTabGroup& _internal_group() const;
  ::sync_pb::SavedTabGroup* _internal_mutable_group();
  public:
  void unsafe_arena_set_allocated_group(
      ::sync_pb::SavedTabGroup* group);
  ::sync_pb::SavedTabGroup* unsafe_arena_release_group();

  // .sync_pb.SavedTabGroupTab tab = 5;
  bool has_tab() const;
  private:
  bool _internal_has_tab() const;
  public:
  void clear_tab();
  const ::sync_pb::SavedTabGroupTab& tab() const;
  PROTOBUF_NODISCARD ::sync_pb::SavedTabGroupTab* release_tab();
  ::sync_pb::SavedTabGroupTab* mutable_tab();
  void set_allocated_tab(::sync_pb::SavedTabGroupTab* tab);
  private:
  const ::sync_pb::SavedTabGroupTab& _internal_tab() const;
  ::sync_pb::SavedTabGroupTab* _internal_mutable_tab();
  public:
  void unsafe_arena_set_allocated_tab(
      ::sync_pb::SavedTabGroupTab* tab);
  ::sync_pb::SavedTabGroupTab* unsafe_arena_release_tab();

  void clear_entity();
  EntityCase entity_case() const;
  // @@protoc_insertion_point(class_scope:sync_pb.SavedTabGroupSpecifics)
 private:
  class _Internal;
  void set_has_group();
  void set_has_tab();

  inline bool has_entity() const;
  inline void clear_has_entity();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  int64_t creation_time_windows_epoch_micros_;
  int64_t update_time_windows_epoch_micros_;
  union EntityUnion {
    constexpr EntityUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::sync_pb::SavedTabGroup* group_;
    ::sync_pb::SavedTabGroupTab* tab_;
  } entity_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2fsync_2fprotocol_2fsaved_5ftab_5fgroup_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SavedTabGroup

// optional int64 position = 1;
inline bool SavedTabGroup::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SavedTabGroup::has_position() const {
  return _internal_has_position();
}
inline void SavedTabGroup::clear_position() {
  position_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t SavedTabGroup::_internal_position() const {
  return position_;
}
inline int64_t SavedTabGroup::position() const {
  // @@protoc_insertion_point(field_get:sync_pb.SavedTabGroup.position)
  return _internal_position();
}
inline void SavedTabGroup::_internal_set_position(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  position_ = value;
}
inline void SavedTabGroup::set_position(int64_t value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:sync_pb.SavedTabGroup.position)
}

// optional string title = 2;
inline bool SavedTabGroup::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SavedTabGroup::has_title() const {
  return _internal_has_title();
}
inline void SavedTabGroup::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SavedTabGroup::title() const {
  // @@protoc_insertion_point(field_get:sync_pb.SavedTabGroup.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SavedTabGroup::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SavedTabGroup.title)
}
inline std::string* SavedTabGroup::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:sync_pb.SavedTabGroup.title)
  return _s;
}
inline const std::string& SavedTabGroup::_internal_title() const {
  return title_.Get();
}
inline void SavedTabGroup::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* SavedTabGroup::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* SavedTabGroup::release_title() {
  // @@protoc_insertion_point(field_release:sync_pb.SavedTabGroup.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SavedTabGroup::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SavedTabGroup.title)
}

// optional .sync_pb.SavedTabGroup.SavedTabGroupColor color = 3;
inline bool SavedTabGroup::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SavedTabGroup::has_color() const {
  return _internal_has_color();
}
inline void SavedTabGroup::clear_color() {
  color_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::sync_pb::SavedTabGroup_SavedTabGroupColor SavedTabGroup::_internal_color() const {
  return static_cast< ::sync_pb::SavedTabGroup_SavedTabGroupColor >(color_);
}
inline ::sync_pb::SavedTabGroup_SavedTabGroupColor SavedTabGroup::color() const {
  // @@protoc_insertion_point(field_get:sync_pb.SavedTabGroup.color)
  return _internal_color();
}
inline void SavedTabGroup::_internal_set_color(::sync_pb::SavedTabGroup_SavedTabGroupColor value) {
  assert(::sync_pb::SavedTabGroup_SavedTabGroupColor_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  color_ = value;
}
inline void SavedTabGroup::set_color(::sync_pb::SavedTabGroup_SavedTabGroupColor value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:sync_pb.SavedTabGroup.color)
}

// -------------------------------------------------------------------

// SavedTabGroupTab

// optional string group_guid = 1;
inline bool SavedTabGroupTab::_internal_has_group_guid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SavedTabGroupTab::has_group_guid() const {
  return _internal_has_group_guid();
}
inline void SavedTabGroupTab::clear_group_guid() {
  group_guid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SavedTabGroupTab::group_guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.SavedTabGroupTab.group_guid)
  return _internal_group_guid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SavedTabGroupTab::set_group_guid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 group_guid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SavedTabGroupTab.group_guid)
}
inline std::string* SavedTabGroupTab::mutable_group_guid() {
  std::string* _s = _internal_mutable_group_guid();
  // @@protoc_insertion_point(field_mutable:sync_pb.SavedTabGroupTab.group_guid)
  return _s;
}
inline const std::string& SavedTabGroupTab::_internal_group_guid() const {
  return group_guid_.Get();
}
inline void SavedTabGroupTab::_internal_set_group_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  group_guid_.Set(value, GetArenaForAllocation());
}
inline std::string* SavedTabGroupTab::_internal_mutable_group_guid() {
  _has_bits_[0] |= 0x00000001u;
  return group_guid_.Mutable(GetArenaForAllocation());
}
inline std::string* SavedTabGroupTab::release_group_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.SavedTabGroupTab.group_guid)
  if (!_internal_has_group_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = group_guid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (group_guid_.IsDefault()) {
    group_guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SavedTabGroupTab::set_allocated_group_guid(std::string* group_guid) {
  if (group_guid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  group_guid_.SetAllocated(group_guid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (group_guid_.IsDefault()) {
    group_guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SavedTabGroupTab.group_guid)
}

// optional int64 position = 2;
inline bool SavedTabGroupTab::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SavedTabGroupTab::has_position() const {
  return _internal_has_position();
}
inline void SavedTabGroupTab::clear_position() {
  position_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t SavedTabGroupTab::_internal_position() const {
  return position_;
}
inline int64_t SavedTabGroupTab::position() const {
  // @@protoc_insertion_point(field_get:sync_pb.SavedTabGroupTab.position)
  return _internal_position();
}
inline void SavedTabGroupTab::_internal_set_position(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  position_ = value;
}
inline void SavedTabGroupTab::set_position(int64_t value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:sync_pb.SavedTabGroupTab.position)
}

// optional string url = 3;
inline bool SavedTabGroupTab::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SavedTabGroupTab::has_url() const {
  return _internal_has_url();
}
inline void SavedTabGroupTab::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SavedTabGroupTab::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.SavedTabGroupTab.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SavedTabGroupTab::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SavedTabGroupTab.url)
}
inline std::string* SavedTabGroupTab::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.SavedTabGroupTab.url)
  return _s;
}
inline const std::string& SavedTabGroupTab::_internal_url() const {
  return url_.Get();
}
inline void SavedTabGroupTab::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* SavedTabGroupTab::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000002u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* SavedTabGroupTab::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.SavedTabGroupTab.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SavedTabGroupTab::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SavedTabGroupTab.url)
}

// -------------------------------------------------------------------

// SavedTabGroupSpecifics

// optional string guid = 1;
inline bool SavedTabGroupSpecifics::_internal_has_guid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SavedTabGroupSpecifics::has_guid() const {
  return _internal_has_guid();
}
inline void SavedTabGroupSpecifics::clear_guid() {
  guid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SavedTabGroupSpecifics::guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.SavedTabGroupSpecifics.guid)
  return _internal_guid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SavedTabGroupSpecifics::set_guid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 guid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.SavedTabGroupSpecifics.guid)
}
inline std::string* SavedTabGroupSpecifics::mutable_guid() {
  std::string* _s = _internal_mutable_guid();
  // @@protoc_insertion_point(field_mutable:sync_pb.SavedTabGroupSpecifics.guid)
  return _s;
}
inline const std::string& SavedTabGroupSpecifics::_internal_guid() const {
  return guid_.Get();
}
inline void SavedTabGroupSpecifics::_internal_set_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  guid_.Set(value, GetArenaForAllocation());
}
inline std::string* SavedTabGroupSpecifics::_internal_mutable_guid() {
  _has_bits_[0] |= 0x00000001u;
  return guid_.Mutable(GetArenaForAllocation());
}
inline std::string* SavedTabGroupSpecifics::release_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.SavedTabGroupSpecifics.guid)
  if (!_internal_has_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = guid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault()) {
    guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SavedTabGroupSpecifics::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  guid_.SetAllocated(guid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault()) {
    guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SavedTabGroupSpecifics.guid)
}

// optional int64 creation_time_windows_epoch_micros = 2;
inline bool SavedTabGroupSpecifics::_internal_has_creation_time_windows_epoch_micros() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SavedTabGroupSpecifics::has_creation_time_windows_epoch_micros() const {
  return _internal_has_creation_time_windows_epoch_micros();
}
inline void SavedTabGroupSpecifics::clear_creation_time_windows_epoch_micros() {
  creation_time_windows_epoch_micros_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t SavedTabGroupSpecifics::_internal_creation_time_windows_epoch_micros() const {
  return creation_time_windows_epoch_micros_;
}
inline int64_t SavedTabGroupSpecifics::creation_time_windows_epoch_micros() const {
  // @@protoc_insertion_point(field_get:sync_pb.SavedTabGroupSpecifics.creation_time_windows_epoch_micros)
  return _internal_creation_time_windows_epoch_micros();
}
inline void SavedTabGroupSpecifics::_internal_set_creation_time_windows_epoch_micros(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  creation_time_windows_epoch_micros_ = value;
}
inline void SavedTabGroupSpecifics::set_creation_time_windows_epoch_micros(int64_t value) {
  _internal_set_creation_time_windows_epoch_micros(value);
  // @@protoc_insertion_point(field_set:sync_pb.SavedTabGroupSpecifics.creation_time_windows_epoch_micros)
}

// optional int64 update_time_windows_epoch_micros = 3;
inline bool SavedTabGroupSpecifics::_internal_has_update_time_windows_epoch_micros() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SavedTabGroupSpecifics::has_update_time_windows_epoch_micros() const {
  return _internal_has_update_time_windows_epoch_micros();
}
inline void SavedTabGroupSpecifics::clear_update_time_windows_epoch_micros() {
  update_time_windows_epoch_micros_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t SavedTabGroupSpecifics::_internal_update_time_windows_epoch_micros() const {
  return update_time_windows_epoch_micros_;
}
inline int64_t SavedTabGroupSpecifics::update_time_windows_epoch_micros() const {
  // @@protoc_insertion_point(field_get:sync_pb.SavedTabGroupSpecifics.update_time_windows_epoch_micros)
  return _internal_update_time_windows_epoch_micros();
}
inline void SavedTabGroupSpecifics::_internal_set_update_time_windows_epoch_micros(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  update_time_windows_epoch_micros_ = value;
}
inline void SavedTabGroupSpecifics::set_update_time_windows_epoch_micros(int64_t value) {
  _internal_set_update_time_windows_epoch_micros(value);
  // @@protoc_insertion_point(field_set:sync_pb.SavedTabGroupSpecifics.update_time_windows_epoch_micros)
}

// .sync_pb.SavedTabGroup group = 4;
inline bool SavedTabGroupSpecifics::_internal_has_group() const {
  return entity_case() == kGroup;
}
inline bool SavedTabGroupSpecifics::has_group() const {
  return _internal_has_group();
}
inline void SavedTabGroupSpecifics::set_has_group() {
  _oneof_case_[0] = kGroup;
}
inline void SavedTabGroupSpecifics::clear_group() {
  if (_internal_has_group()) {
    if (GetArenaForAllocation() == nullptr) {
      delete entity_.group_;
    }
    clear_has_entity();
  }
}
inline ::sync_pb::SavedTabGroup* SavedTabGroupSpecifics::release_group() {
  // @@protoc_insertion_point(field_release:sync_pb.SavedTabGroupSpecifics.group)
  if (_internal_has_group()) {
    clear_has_entity();
    ::sync_pb::SavedTabGroup* temp = entity_.group_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entity_.group_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::SavedTabGroup& SavedTabGroupSpecifics::_internal_group() const {
  return _internal_has_group()
      ? *entity_.group_
      : reinterpret_cast< ::sync_pb::SavedTabGroup&>(::sync_pb::_SavedTabGroup_default_instance_);
}
inline const ::sync_pb::SavedTabGroup& SavedTabGroupSpecifics::group() const {
  // @@protoc_insertion_point(field_get:sync_pb.SavedTabGroupSpecifics.group)
  return _internal_group();
}
inline ::sync_pb::SavedTabGroup* SavedTabGroupSpecifics::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.SavedTabGroupSpecifics.group)
  if (_internal_has_group()) {
    clear_has_entity();
    ::sync_pb::SavedTabGroup* temp = entity_.group_;
    entity_.group_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SavedTabGroupSpecifics::unsafe_arena_set_allocated_group(::sync_pb::SavedTabGroup* group) {
  clear_entity();
  if (group) {
    set_has_group();
    entity_.group_ = group;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.SavedTabGroupSpecifics.group)
}
inline ::sync_pb::SavedTabGroup* SavedTabGroupSpecifics::_internal_mutable_group() {
  if (!_internal_has_group()) {
    clear_entity();
    set_has_group();
    entity_.group_ = CreateMaybeMessage< ::sync_pb::SavedTabGroup >(GetArenaForAllocation());
  }
  return entity_.group_;
}
inline ::sync_pb::SavedTabGroup* SavedTabGroupSpecifics::mutable_group() {
  ::sync_pb::SavedTabGroup* _msg = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:sync_pb.SavedTabGroupSpecifics.group)
  return _msg;
}

// .sync_pb.SavedTabGroupTab tab = 5;
inline bool SavedTabGroupSpecifics::_internal_has_tab() const {
  return entity_case() == kTab;
}
inline bool SavedTabGroupSpecifics::has_tab() const {
  return _internal_has_tab();
}
inline void SavedTabGroupSpecifics::set_has_tab() {
  _oneof_case_[0] = kTab;
}
inline void SavedTabGroupSpecifics::clear_tab() {
  if (_internal_has_tab()) {
    if (GetArenaForAllocation() == nullptr) {
      delete entity_.tab_;
    }
    clear_has_entity();
  }
}
inline ::sync_pb::SavedTabGroupTab* SavedTabGroupSpecifics::release_tab() {
  // @@protoc_insertion_point(field_release:sync_pb.SavedTabGroupSpecifics.tab)
  if (_internal_has_tab()) {
    clear_has_entity();
    ::sync_pb::SavedTabGroupTab* temp = entity_.tab_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entity_.tab_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::SavedTabGroupTab& SavedTabGroupSpecifics::_internal_tab() const {
  return _internal_has_tab()
      ? *entity_.tab_
      : reinterpret_cast< ::sync_pb::SavedTabGroupTab&>(::sync_pb::_SavedTabGroupTab_default_instance_);
}
inline const ::sync_pb::SavedTabGroupTab& SavedTabGroupSpecifics::tab() const {
  // @@protoc_insertion_point(field_get:sync_pb.SavedTabGroupSpecifics.tab)
  return _internal_tab();
}
inline ::sync_pb::SavedTabGroupTab* SavedTabGroupSpecifics::unsafe_arena_release_tab() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.SavedTabGroupSpecifics.tab)
  if (_internal_has_tab()) {
    clear_has_entity();
    ::sync_pb::SavedTabGroupTab* temp = entity_.tab_;
    entity_.tab_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SavedTabGroupSpecifics::unsafe_arena_set_allocated_tab(::sync_pb::SavedTabGroupTab* tab) {
  clear_entity();
  if (tab) {
    set_has_tab();
    entity_.tab_ = tab;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.SavedTabGroupSpecifics.tab)
}
inline ::sync_pb::SavedTabGroupTab* SavedTabGroupSpecifics::_internal_mutable_tab() {
  if (!_internal_has_tab()) {
    clear_entity();
    set_has_tab();
    entity_.tab_ = CreateMaybeMessage< ::sync_pb::SavedTabGroupTab >(GetArenaForAllocation());
  }
  return entity_.tab_;
}
inline ::sync_pb::SavedTabGroupTab* SavedTabGroupSpecifics::mutable_tab() {
  ::sync_pb::SavedTabGroupTab* _msg = _internal_mutable_tab();
  // @@protoc_insertion_point(field_mutable:sync_pb.SavedTabGroupSpecifics.tab)
  return _msg;
}

inline bool SavedTabGroupSpecifics::has_entity() const {
  return entity_case() != ENTITY_NOT_SET;
}
inline void SavedTabGroupSpecifics::clear_has_entity() {
  _oneof_case_[0] = ENTITY_NOT_SET;
}
inline SavedTabGroupSpecifics::EntityCase SavedTabGroupSpecifics::entity_case() const {
  return SavedTabGroupSpecifics::EntityCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::SavedTabGroup_SavedTabGroupColor> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fsaved_5ftab_5fgroup_5fspecifics_2eproto
