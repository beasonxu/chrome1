// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/get_updates_caller_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fget_5fupdates_5fcaller_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fget_5fupdates_5fcaller_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fget_5fupdates_5fcaller_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fget_5fupdates_5fcaller_5finfo_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class GetUpdatesCallerInfo;
struct GetUpdatesCallerInfoDefaultTypeInternal;
extern GetUpdatesCallerInfoDefaultTypeInternal _GetUpdatesCallerInfo_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::GetUpdatesCallerInfo* Arena::CreateMaybeMessage<::sync_pb::GetUpdatesCallerInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum GetUpdatesCallerInfo_GetUpdatesSource : int {
  GetUpdatesCallerInfo_GetUpdatesSource_UNKNOWN = 0,
  GetUpdatesCallerInfo_GetUpdatesSource_FIRST_UPDATE = 1,
  GetUpdatesCallerInfo_GetUpdatesSource_LOCAL = 2,
  GetUpdatesCallerInfo_GetUpdatesSource_NOTIFICATION = 3,
  GetUpdatesCallerInfo_GetUpdatesSource_PERIODIC = 4,
  GetUpdatesCallerInfo_GetUpdatesSource_SYNC_CYCLE_CONTINUATION = 5,
  GetUpdatesCallerInfo_GetUpdatesSource_NEWLY_SUPPORTED_DATATYPE = 7,
  GetUpdatesCallerInfo_GetUpdatesSource_MIGRATION = 8,
  GetUpdatesCallerInfo_GetUpdatesSource_NEW_CLIENT = 9,
  GetUpdatesCallerInfo_GetUpdatesSource_RECONFIGURATION = 10,
  GetUpdatesCallerInfo_GetUpdatesSource_DATATYPE_REFRESH = 11,
  GetUpdatesCallerInfo_GetUpdatesSource_RETRY = 13,
  GetUpdatesCallerInfo_GetUpdatesSource_PROGRAMMATIC = 14
};
bool GetUpdatesCallerInfo_GetUpdatesSource_IsValid(int value);
constexpr GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo_GetUpdatesSource_GetUpdatesSource_MIN = GetUpdatesCallerInfo_GetUpdatesSource_UNKNOWN;
constexpr GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo_GetUpdatesSource_GetUpdatesSource_MAX = GetUpdatesCallerInfo_GetUpdatesSource_PROGRAMMATIC;
constexpr int GetUpdatesCallerInfo_GetUpdatesSource_GetUpdatesSource_ARRAYSIZE = GetUpdatesCallerInfo_GetUpdatesSource_GetUpdatesSource_MAX + 1;

const std::string& GetUpdatesCallerInfo_GetUpdatesSource_Name(GetUpdatesCallerInfo_GetUpdatesSource value);
template<typename T>
inline const std::string& GetUpdatesCallerInfo_GetUpdatesSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetUpdatesCallerInfo_GetUpdatesSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetUpdatesCallerInfo_GetUpdatesSource_Name.");
  return GetUpdatesCallerInfo_GetUpdatesSource_Name(static_cast<GetUpdatesCallerInfo_GetUpdatesSource>(enum_t_value));
}
bool GetUpdatesCallerInfo_GetUpdatesSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetUpdatesCallerInfo_GetUpdatesSource* value);
// ===================================================================

class GetUpdatesCallerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.GetUpdatesCallerInfo) */ {
 public:
  inline GetUpdatesCallerInfo() : GetUpdatesCallerInfo(nullptr) {}
  ~GetUpdatesCallerInfo() override;
  explicit PROTOBUF_CONSTEXPR GetUpdatesCallerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUpdatesCallerInfo(const GetUpdatesCallerInfo& from);
  GetUpdatesCallerInfo(GetUpdatesCallerInfo&& from) noexcept
    : GetUpdatesCallerInfo() {
    *this = ::std::move(from);
  }

  inline GetUpdatesCallerInfo& operator=(const GetUpdatesCallerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUpdatesCallerInfo& operator=(GetUpdatesCallerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetUpdatesCallerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUpdatesCallerInfo* internal_default_instance() {
    return reinterpret_cast<const GetUpdatesCallerInfo*>(
               &_GetUpdatesCallerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetUpdatesCallerInfo& a, GetUpdatesCallerInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(GetUpdatesCallerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUpdatesCallerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUpdatesCallerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUpdatesCallerInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetUpdatesCallerInfo& from);
  void MergeFrom(const GetUpdatesCallerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetUpdatesCallerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.GetUpdatesCallerInfo";
  }
  protected:
  explicit GetUpdatesCallerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesSource;
  static constexpr GetUpdatesSource UNKNOWN =
    GetUpdatesCallerInfo_GetUpdatesSource_UNKNOWN;
  static constexpr GetUpdatesSource FIRST_UPDATE =
    GetUpdatesCallerInfo_GetUpdatesSource_FIRST_UPDATE;
  static constexpr GetUpdatesSource LOCAL =
    GetUpdatesCallerInfo_GetUpdatesSource_LOCAL;
  static constexpr GetUpdatesSource NOTIFICATION =
    GetUpdatesCallerInfo_GetUpdatesSource_NOTIFICATION;
  static constexpr GetUpdatesSource PERIODIC =
    GetUpdatesCallerInfo_GetUpdatesSource_PERIODIC;
  static constexpr GetUpdatesSource SYNC_CYCLE_CONTINUATION =
    GetUpdatesCallerInfo_GetUpdatesSource_SYNC_CYCLE_CONTINUATION;
  static constexpr GetUpdatesSource NEWLY_SUPPORTED_DATATYPE =
    GetUpdatesCallerInfo_GetUpdatesSource_NEWLY_SUPPORTED_DATATYPE;
  static constexpr GetUpdatesSource MIGRATION =
    GetUpdatesCallerInfo_GetUpdatesSource_MIGRATION;
  static constexpr GetUpdatesSource NEW_CLIENT =
    GetUpdatesCallerInfo_GetUpdatesSource_NEW_CLIENT;
  static constexpr GetUpdatesSource RECONFIGURATION =
    GetUpdatesCallerInfo_GetUpdatesSource_RECONFIGURATION;
  static constexpr GetUpdatesSource DATATYPE_REFRESH =
    GetUpdatesCallerInfo_GetUpdatesSource_DATATYPE_REFRESH;
  static constexpr GetUpdatesSource RETRY =
    GetUpdatesCallerInfo_GetUpdatesSource_RETRY;
  static constexpr GetUpdatesSource PROGRAMMATIC =
    GetUpdatesCallerInfo_GetUpdatesSource_PROGRAMMATIC;
  static inline bool GetUpdatesSource_IsValid(int value) {
    return GetUpdatesCallerInfo_GetUpdatesSource_IsValid(value);
  }
  static constexpr GetUpdatesSource GetUpdatesSource_MIN =
    GetUpdatesCallerInfo_GetUpdatesSource_GetUpdatesSource_MIN;
  static constexpr GetUpdatesSource GetUpdatesSource_MAX =
    GetUpdatesCallerInfo_GetUpdatesSource_GetUpdatesSource_MAX;
  static constexpr int GetUpdatesSource_ARRAYSIZE =
    GetUpdatesCallerInfo_GetUpdatesSource_GetUpdatesSource_ARRAYSIZE;
  template<typename T>
  static inline const std::string& GetUpdatesSource_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GetUpdatesSource>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GetUpdatesSource_Name.");
    return GetUpdatesCallerInfo_GetUpdatesSource_Name(enum_t_value);
  }
  static inline bool GetUpdatesSource_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GetUpdatesSource* value) {
    return GetUpdatesCallerInfo_GetUpdatesSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kNotificationsEnabledFieldNumber = 2,
  };
  // required .sync_pb.GetUpdatesCallerInfo.GetUpdatesSource source = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  PROTOBUF_DEPRECATED void clear_source();
  PROTOBUF_DEPRECATED ::sync_pb::GetUpdatesCallerInfo_GetUpdatesSource source() const;
  PROTOBUF_DEPRECATED void set_source(::sync_pb::GetUpdatesCallerInfo_GetUpdatesSource value);
  private:
  ::sync_pb::GetUpdatesCallerInfo_GetUpdatesSource _internal_source() const;
  void _internal_set_source(::sync_pb::GetUpdatesCallerInfo_GetUpdatesSource value);
  public:

  // optional bool notifications_enabled = 2;
  bool has_notifications_enabled() const;
  private:
  bool _internal_has_notifications_enabled() const;
  public:
  void clear_notifications_enabled();
  bool notifications_enabled() const;
  void set_notifications_enabled(bool value);
  private:
  bool _internal_notifications_enabled() const;
  void _internal_set_notifications_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.GetUpdatesCallerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int source_;
  bool notifications_enabled_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fget_5fupdates_5fcaller_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetUpdatesCallerInfo

// required .sync_pb.GetUpdatesCallerInfo.GetUpdatesSource source = 1 [deprecated = true];
inline bool GetUpdatesCallerInfo::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetUpdatesCallerInfo::has_source() const {
  return _internal_has_source();
}
inline void GetUpdatesCallerInfo::clear_source() {
  source_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::sync_pb::GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::_internal_source() const {
  return static_cast< ::sync_pb::GetUpdatesCallerInfo_GetUpdatesSource >(source_);
}
inline ::sync_pb::GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::source() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesCallerInfo.source)
  return _internal_source();
}
inline void GetUpdatesCallerInfo::_internal_set_source(::sync_pb::GetUpdatesCallerInfo_GetUpdatesSource value) {
  assert(::sync_pb::GetUpdatesCallerInfo_GetUpdatesSource_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  source_ = value;
}
inline void GetUpdatesCallerInfo::set_source(::sync_pb::GetUpdatesCallerInfo_GetUpdatesSource value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesCallerInfo.source)
}

// optional bool notifications_enabled = 2;
inline bool GetUpdatesCallerInfo::_internal_has_notifications_enabled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetUpdatesCallerInfo::has_notifications_enabled() const {
  return _internal_has_notifications_enabled();
}
inline void GetUpdatesCallerInfo::clear_notifications_enabled() {
  notifications_enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool GetUpdatesCallerInfo::_internal_notifications_enabled() const {
  return notifications_enabled_;
}
inline bool GetUpdatesCallerInfo::notifications_enabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.GetUpdatesCallerInfo.notifications_enabled)
  return _internal_notifications_enabled();
}
inline void GetUpdatesCallerInfo::_internal_set_notifications_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  notifications_enabled_ = value;
}
inline void GetUpdatesCallerInfo::set_notifications_enabled(bool value) {
  _internal_set_notifications_enabled(value);
  // @@protoc_insertion_point(field_set:sync_pb.GetUpdatesCallerInfo.notifications_enabled)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::GetUpdatesCallerInfo_GetUpdatesSource> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fget_5fupdates_5fcaller_5finfo_2eproto
