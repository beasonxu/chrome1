// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/security_event_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fsecurity_5fevent_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fsecurity_5fevent_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "components/sync/protocol/gaia_password_reuse.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fsecurity_5fevent_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fsecurity_5fevent_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class SecurityEventSpecifics;
struct SecurityEventSpecificsDefaultTypeInternal;
extern SecurityEventSpecificsDefaultTypeInternal _SecurityEventSpecifics_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::SecurityEventSpecifics* Arena::CreateMaybeMessage<::sync_pb::SecurityEventSpecifics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class SecurityEventSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.SecurityEventSpecifics) */ {
 public:
  inline SecurityEventSpecifics() : SecurityEventSpecifics(nullptr) {}
  ~SecurityEventSpecifics() override;
  explicit PROTOBUF_CONSTEXPR SecurityEventSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityEventSpecifics(const SecurityEventSpecifics& from);
  SecurityEventSpecifics(SecurityEventSpecifics&& from) noexcept
    : SecurityEventSpecifics() {
    *this = ::std::move(from);
  }

  inline SecurityEventSpecifics& operator=(const SecurityEventSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityEventSpecifics& operator=(SecurityEventSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SecurityEventSpecifics& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kGaiaPasswordReuseEvent = 1,
    EVENT_NOT_SET = 0,
  };

  static inline const SecurityEventSpecifics* internal_default_instance() {
    return reinterpret_cast<const SecurityEventSpecifics*>(
               &_SecurityEventSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SecurityEventSpecifics& a, SecurityEventSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SecurityEventSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityEventSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityEventSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityEventSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SecurityEventSpecifics& from);
  void MergeFrom(const SecurityEventSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SecurityEventSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.SecurityEventSpecifics";
  }
  protected:
  explicit SecurityEventSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventTimeUsecFieldNumber = 2,
    kGaiaPasswordReuseEventFieldNumber = 1,
  };
  // optional int64 event_time_usec = 2;
  bool has_event_time_usec() const;
  private:
  bool _internal_has_event_time_usec() const;
  public:
  void clear_event_time_usec();
  int64_t event_time_usec() const;
  void set_event_time_usec(int64_t value);
  private:
  int64_t _internal_event_time_usec() const;
  void _internal_set_event_time_usec(int64_t value);
  public:

  // .sync_pb.GaiaPasswordReuse gaia_password_reuse_event = 1;
  bool has_gaia_password_reuse_event() const;
  private:
  bool _internal_has_gaia_password_reuse_event() const;
  public:
  void clear_gaia_password_reuse_event();
  const ::sync_pb::GaiaPasswordReuse& gaia_password_reuse_event() const;
  PROTOBUF_NODISCARD ::sync_pb::GaiaPasswordReuse* release_gaia_password_reuse_event();
  ::sync_pb::GaiaPasswordReuse* mutable_gaia_password_reuse_event();
  void set_allocated_gaia_password_reuse_event(::sync_pb::GaiaPasswordReuse* gaia_password_reuse_event);
  private:
  const ::sync_pb::GaiaPasswordReuse& _internal_gaia_password_reuse_event() const;
  ::sync_pb::GaiaPasswordReuse* _internal_mutable_gaia_password_reuse_event();
  public:
  void unsafe_arena_set_allocated_gaia_password_reuse_event(
      ::sync_pb::GaiaPasswordReuse* gaia_password_reuse_event);
  ::sync_pb::GaiaPasswordReuse* unsafe_arena_release_gaia_password_reuse_event();

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:sync_pb.SecurityEventSpecifics)
 private:
  class _Internal;
  void set_has_gaia_password_reuse_event();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t event_time_usec_;
  union EventUnion {
    constexpr EventUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::sync_pb::GaiaPasswordReuse* gaia_password_reuse_event_;
  } event_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2fsync_2fprotocol_2fsecurity_5fevent_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SecurityEventSpecifics

// .sync_pb.GaiaPasswordReuse gaia_password_reuse_event = 1;
inline bool SecurityEventSpecifics::_internal_has_gaia_password_reuse_event() const {
  return event_case() == kGaiaPasswordReuseEvent;
}
inline bool SecurityEventSpecifics::has_gaia_password_reuse_event() const {
  return _internal_has_gaia_password_reuse_event();
}
inline void SecurityEventSpecifics::set_has_gaia_password_reuse_event() {
  _oneof_case_[0] = kGaiaPasswordReuseEvent;
}
inline ::sync_pb::GaiaPasswordReuse* SecurityEventSpecifics::release_gaia_password_reuse_event() {
  // @@protoc_insertion_point(field_release:sync_pb.SecurityEventSpecifics.gaia_password_reuse_event)
  if (_internal_has_gaia_password_reuse_event()) {
    clear_has_event();
    ::sync_pb::GaiaPasswordReuse* temp = event_.gaia_password_reuse_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.gaia_password_reuse_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::GaiaPasswordReuse& SecurityEventSpecifics::_internal_gaia_password_reuse_event() const {
  return _internal_has_gaia_password_reuse_event()
      ? *event_.gaia_password_reuse_event_
      : reinterpret_cast< ::sync_pb::GaiaPasswordReuse&>(::sync_pb::_GaiaPasswordReuse_default_instance_);
}
inline const ::sync_pb::GaiaPasswordReuse& SecurityEventSpecifics::gaia_password_reuse_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.SecurityEventSpecifics.gaia_password_reuse_event)
  return _internal_gaia_password_reuse_event();
}
inline ::sync_pb::GaiaPasswordReuse* SecurityEventSpecifics::unsafe_arena_release_gaia_password_reuse_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.SecurityEventSpecifics.gaia_password_reuse_event)
  if (_internal_has_gaia_password_reuse_event()) {
    clear_has_event();
    ::sync_pb::GaiaPasswordReuse* temp = event_.gaia_password_reuse_event_;
    event_.gaia_password_reuse_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SecurityEventSpecifics::unsafe_arena_set_allocated_gaia_password_reuse_event(::sync_pb::GaiaPasswordReuse* gaia_password_reuse_event) {
  clear_event();
  if (gaia_password_reuse_event) {
    set_has_gaia_password_reuse_event();
    event_.gaia_password_reuse_event_ = gaia_password_reuse_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.SecurityEventSpecifics.gaia_password_reuse_event)
}
inline ::sync_pb::GaiaPasswordReuse* SecurityEventSpecifics::_internal_mutable_gaia_password_reuse_event() {
  if (!_internal_has_gaia_password_reuse_event()) {
    clear_event();
    set_has_gaia_password_reuse_event();
    event_.gaia_password_reuse_event_ = CreateMaybeMessage< ::sync_pb::GaiaPasswordReuse >(GetArenaForAllocation());
  }
  return event_.gaia_password_reuse_event_;
}
inline ::sync_pb::GaiaPasswordReuse* SecurityEventSpecifics::mutable_gaia_password_reuse_event() {
  ::sync_pb::GaiaPasswordReuse* _msg = _internal_mutable_gaia_password_reuse_event();
  // @@protoc_insertion_point(field_mutable:sync_pb.SecurityEventSpecifics.gaia_password_reuse_event)
  return _msg;
}

// optional int64 event_time_usec = 2;
inline bool SecurityEventSpecifics::_internal_has_event_time_usec() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SecurityEventSpecifics::has_event_time_usec() const {
  return _internal_has_event_time_usec();
}
inline void SecurityEventSpecifics::clear_event_time_usec() {
  event_time_usec_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t SecurityEventSpecifics::_internal_event_time_usec() const {
  return event_time_usec_;
}
inline int64_t SecurityEventSpecifics::event_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.SecurityEventSpecifics.event_time_usec)
  return _internal_event_time_usec();
}
inline void SecurityEventSpecifics::_internal_set_event_time_usec(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  event_time_usec_ = value;
}
inline void SecurityEventSpecifics::set_event_time_usec(int64_t value) {
  _internal_set_event_time_usec(value);
  // @@protoc_insertion_point(field_set:sync_pb.SecurityEventSpecifics.event_time_usec)
}

inline bool SecurityEventSpecifics::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void SecurityEventSpecifics::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline SecurityEventSpecifics::EventCase SecurityEventSpecifics::event_case() const {
  return SecurityEventSpecifics::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fsecurity_5fevent_5fspecifics_2eproto
