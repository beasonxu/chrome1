// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/password_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fpassword_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fpassword_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/sync/protocol/encryption.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fpassword_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fpassword_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class PasswordSpecifics;
struct PasswordSpecificsDefaultTypeInternal;
extern PasswordSpecificsDefaultTypeInternal _PasswordSpecifics_default_instance_;
class PasswordSpecificsData;
struct PasswordSpecificsDataDefaultTypeInternal;
extern PasswordSpecificsDataDefaultTypeInternal _PasswordSpecificsData_default_instance_;
class PasswordSpecificsData_Notes;
struct PasswordSpecificsData_NotesDefaultTypeInternal;
extern PasswordSpecificsData_NotesDefaultTypeInternal _PasswordSpecificsData_Notes_default_instance_;
class PasswordSpecificsData_Notes_Note;
struct PasswordSpecificsData_Notes_NoteDefaultTypeInternal;
extern PasswordSpecificsData_Notes_NoteDefaultTypeInternal _PasswordSpecificsData_Notes_Note_default_instance_;
class PasswordSpecificsData_PasswordIssues;
struct PasswordSpecificsData_PasswordIssuesDefaultTypeInternal;
extern PasswordSpecificsData_PasswordIssuesDefaultTypeInternal _PasswordSpecificsData_PasswordIssues_default_instance_;
class PasswordSpecificsData_PasswordIssues_PasswordIssue;
struct PasswordSpecificsData_PasswordIssues_PasswordIssueDefaultTypeInternal;
extern PasswordSpecificsData_PasswordIssues_PasswordIssueDefaultTypeInternal _PasswordSpecificsData_PasswordIssues_PasswordIssue_default_instance_;
class PasswordSpecificsMetadata;
struct PasswordSpecificsMetadataDefaultTypeInternal;
extern PasswordSpecificsMetadataDefaultTypeInternal _PasswordSpecificsMetadata_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::PasswordSpecifics* Arena::CreateMaybeMessage<::sync_pb::PasswordSpecifics>(Arena*);
template<> ::sync_pb::PasswordSpecificsData* Arena::CreateMaybeMessage<::sync_pb::PasswordSpecificsData>(Arena*);
template<> ::sync_pb::PasswordSpecificsData_Notes* Arena::CreateMaybeMessage<::sync_pb::PasswordSpecificsData_Notes>(Arena*);
template<> ::sync_pb::PasswordSpecificsData_Notes_Note* Arena::CreateMaybeMessage<::sync_pb::PasswordSpecificsData_Notes_Note>(Arena*);
template<> ::sync_pb::PasswordSpecificsData_PasswordIssues* Arena::CreateMaybeMessage<::sync_pb::PasswordSpecificsData_PasswordIssues>(Arena*);
template<> ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* Arena::CreateMaybeMessage<::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue>(Arena*);
template<> ::sync_pb::PasswordSpecificsMetadata* Arena::CreateMaybeMessage<::sync_pb::PasswordSpecificsMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum PasswordSpecificsData_Scheme : int {
  PasswordSpecificsData_Scheme_SCHEME_HTML = 0,
  PasswordSpecificsData_Scheme_SCHEME_BASIC = 1,
  PasswordSpecificsData_Scheme_SCHEME_DIGEST = 2,
  PasswordSpecificsData_Scheme_SCHEME_OTHER = 3,
  PasswordSpecificsData_Scheme_USERNAME_ONLY = 4
};
bool PasswordSpecificsData_Scheme_IsValid(int value);
constexpr PasswordSpecificsData_Scheme PasswordSpecificsData_Scheme_Scheme_MIN = PasswordSpecificsData_Scheme_SCHEME_HTML;
constexpr PasswordSpecificsData_Scheme PasswordSpecificsData_Scheme_Scheme_MAX = PasswordSpecificsData_Scheme_USERNAME_ONLY;
constexpr int PasswordSpecificsData_Scheme_Scheme_ARRAYSIZE = PasswordSpecificsData_Scheme_Scheme_MAX + 1;

const std::string& PasswordSpecificsData_Scheme_Name(PasswordSpecificsData_Scheme value);
template<typename T>
inline const std::string& PasswordSpecificsData_Scheme_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PasswordSpecificsData_Scheme>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PasswordSpecificsData_Scheme_Name.");
  return PasswordSpecificsData_Scheme_Name(static_cast<PasswordSpecificsData_Scheme>(enum_t_value));
}
bool PasswordSpecificsData_Scheme_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PasswordSpecificsData_Scheme* value);
// ===================================================================

class PasswordSpecificsData_PasswordIssues_PasswordIssue final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue) */ {
 public:
  inline PasswordSpecificsData_PasswordIssues_PasswordIssue() : PasswordSpecificsData_PasswordIssues_PasswordIssue(nullptr) {}
  ~PasswordSpecificsData_PasswordIssues_PasswordIssue() override;
  explicit PROTOBUF_CONSTEXPR PasswordSpecificsData_PasswordIssues_PasswordIssue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PasswordSpecificsData_PasswordIssues_PasswordIssue(const PasswordSpecificsData_PasswordIssues_PasswordIssue& from);
  PasswordSpecificsData_PasswordIssues_PasswordIssue(PasswordSpecificsData_PasswordIssues_PasswordIssue&& from) noexcept
    : PasswordSpecificsData_PasswordIssues_PasswordIssue() {
    *this = ::std::move(from);
  }

  inline PasswordSpecificsData_PasswordIssues_PasswordIssue& operator=(const PasswordSpecificsData_PasswordIssues_PasswordIssue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordSpecificsData_PasswordIssues_PasswordIssue& operator=(PasswordSpecificsData_PasswordIssues_PasswordIssue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PasswordSpecificsData_PasswordIssues_PasswordIssue& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasswordSpecificsData_PasswordIssues_PasswordIssue* internal_default_instance() {
    return reinterpret_cast<const PasswordSpecificsData_PasswordIssues_PasswordIssue*>(
               &_PasswordSpecificsData_PasswordIssues_PasswordIssue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PasswordSpecificsData_PasswordIssues_PasswordIssue& a, PasswordSpecificsData_PasswordIssues_PasswordIssue& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PasswordSpecificsData_PasswordIssues_PasswordIssue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasswordSpecificsData_PasswordIssues_PasswordIssue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PasswordSpecificsData_PasswordIssues_PasswordIssue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PasswordSpecificsData_PasswordIssues_PasswordIssue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PasswordSpecificsData_PasswordIssues_PasswordIssue& from);
  void MergeFrom(const PasswordSpecificsData_PasswordIssues_PasswordIssue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PasswordSpecificsData_PasswordIssues_PasswordIssue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue";
  }
  protected:
  explicit PasswordSpecificsData_PasswordIssues_PasswordIssue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateFirstDetectionMicrosecondsFieldNumber = 1,
    kIsMutedFieldNumber = 2,
  };
  // optional uint64 date_first_detection_microseconds = 1;
  bool has_date_first_detection_microseconds() const;
  private:
  bool _internal_has_date_first_detection_microseconds() const;
  public:
  void clear_date_first_detection_microseconds();
  uint64_t date_first_detection_microseconds() const;
  void set_date_first_detection_microseconds(uint64_t value);
  private:
  uint64_t _internal_date_first_detection_microseconds() const;
  void _internal_set_date_first_detection_microseconds(uint64_t value);
  public:

  // optional bool is_muted = 2;
  bool has_is_muted() const;
  private:
  bool _internal_has_is_muted() const;
  public:
  void clear_is_muted();
  bool is_muted() const;
  void set_is_muted(bool value);
  private:
  bool _internal_is_muted() const;
  void _internal_set_is_muted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t date_first_detection_microseconds_;
  bool is_muted_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fpassword_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class PasswordSpecificsData_PasswordIssues final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.PasswordSpecificsData.PasswordIssues) */ {
 public:
  inline PasswordSpecificsData_PasswordIssues() : PasswordSpecificsData_PasswordIssues(nullptr) {}
  ~PasswordSpecificsData_PasswordIssues() override;
  explicit PROTOBUF_CONSTEXPR PasswordSpecificsData_PasswordIssues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PasswordSpecificsData_PasswordIssues(const PasswordSpecificsData_PasswordIssues& from);
  PasswordSpecificsData_PasswordIssues(PasswordSpecificsData_PasswordIssues&& from) noexcept
    : PasswordSpecificsData_PasswordIssues() {
    *this = ::std::move(from);
  }

  inline PasswordSpecificsData_PasswordIssues& operator=(const PasswordSpecificsData_PasswordIssues& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordSpecificsData_PasswordIssues& operator=(PasswordSpecificsData_PasswordIssues&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PasswordSpecificsData_PasswordIssues& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasswordSpecificsData_PasswordIssues* internal_default_instance() {
    return reinterpret_cast<const PasswordSpecificsData_PasswordIssues*>(
               &_PasswordSpecificsData_PasswordIssues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PasswordSpecificsData_PasswordIssues& a, PasswordSpecificsData_PasswordIssues& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PasswordSpecificsData_PasswordIssues* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasswordSpecificsData_PasswordIssues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PasswordSpecificsData_PasswordIssues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PasswordSpecificsData_PasswordIssues>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PasswordSpecificsData_PasswordIssues& from);
  void MergeFrom(const PasswordSpecificsData_PasswordIssues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PasswordSpecificsData_PasswordIssues* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.PasswordSpecificsData.PasswordIssues";
  }
  protected:
  explicit PasswordSpecificsData_PasswordIssues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PasswordSpecificsData_PasswordIssues_PasswordIssue PasswordIssue;

  // accessors -------------------------------------------------------

  enum : int {
    kLeakedPasswordIssueFieldNumber = 1,
    kReusedPasswordIssueFieldNumber = 2,
    kWeakPasswordIssueFieldNumber = 3,
    kPhishedPasswordIssueFieldNumber = 4,
  };
  // optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue leaked_password_issue = 1;
  bool has_leaked_password_issue() const;
  private:
  bool _internal_has_leaked_password_issue() const;
  public:
  void clear_leaked_password_issue();
  const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue& leaked_password_issue() const;
  PROTOBUF_NODISCARD ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* release_leaked_password_issue();
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* mutable_leaked_password_issue();
  void set_allocated_leaked_password_issue(::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* leaked_password_issue);
  private:
  const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue& _internal_leaked_password_issue() const;
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* _internal_mutable_leaked_password_issue();
  public:
  void unsafe_arena_set_allocated_leaked_password_issue(
      ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* leaked_password_issue);
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* unsafe_arena_release_leaked_password_issue();

  // optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue reused_password_issue = 2;
  bool has_reused_password_issue() const;
  private:
  bool _internal_has_reused_password_issue() const;
  public:
  void clear_reused_password_issue();
  const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue& reused_password_issue() const;
  PROTOBUF_NODISCARD ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* release_reused_password_issue();
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* mutable_reused_password_issue();
  void set_allocated_reused_password_issue(::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* reused_password_issue);
  private:
  const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue& _internal_reused_password_issue() const;
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* _internal_mutable_reused_password_issue();
  public:
  void unsafe_arena_set_allocated_reused_password_issue(
      ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* reused_password_issue);
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* unsafe_arena_release_reused_password_issue();

  // optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue weak_password_issue = 3;
  bool has_weak_password_issue() const;
  private:
  bool _internal_has_weak_password_issue() const;
  public:
  void clear_weak_password_issue();
  const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue& weak_password_issue() const;
  PROTOBUF_NODISCARD ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* release_weak_password_issue();
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* mutable_weak_password_issue();
  void set_allocated_weak_password_issue(::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* weak_password_issue);
  private:
  const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue& _internal_weak_password_issue() const;
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* _internal_mutable_weak_password_issue();
  public:
  void unsafe_arena_set_allocated_weak_password_issue(
      ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* weak_password_issue);
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* unsafe_arena_release_weak_password_issue();

  // optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue phished_password_issue = 4;
  bool has_phished_password_issue() const;
  private:
  bool _internal_has_phished_password_issue() const;
  public:
  void clear_phished_password_issue();
  const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue& phished_password_issue() const;
  PROTOBUF_NODISCARD ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* release_phished_password_issue();
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* mutable_phished_password_issue();
  void set_allocated_phished_password_issue(::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* phished_password_issue);
  private:
  const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue& _internal_phished_password_issue() const;
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* _internal_mutable_phished_password_issue();
  public:
  void unsafe_arena_set_allocated_phished_password_issue(
      ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* phished_password_issue);
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* unsafe_arena_release_phished_password_issue();

  // @@protoc_insertion_point(class_scope:sync_pb.PasswordSpecificsData.PasswordIssues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* leaked_password_issue_;
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* reused_password_issue_;
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* weak_password_issue_;
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* phished_password_issue_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fpassword_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class PasswordSpecificsData_Notes_Note final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.PasswordSpecificsData.Notes.Note) */ {
 public:
  inline PasswordSpecificsData_Notes_Note() : PasswordSpecificsData_Notes_Note(nullptr) {}
  ~PasswordSpecificsData_Notes_Note() override;
  explicit PROTOBUF_CONSTEXPR PasswordSpecificsData_Notes_Note(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PasswordSpecificsData_Notes_Note(const PasswordSpecificsData_Notes_Note& from);
  PasswordSpecificsData_Notes_Note(PasswordSpecificsData_Notes_Note&& from) noexcept
    : PasswordSpecificsData_Notes_Note() {
    *this = ::std::move(from);
  }

  inline PasswordSpecificsData_Notes_Note& operator=(const PasswordSpecificsData_Notes_Note& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordSpecificsData_Notes_Note& operator=(PasswordSpecificsData_Notes_Note&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PasswordSpecificsData_Notes_Note& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasswordSpecificsData_Notes_Note* internal_default_instance() {
    return reinterpret_cast<const PasswordSpecificsData_Notes_Note*>(
               &_PasswordSpecificsData_Notes_Note_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PasswordSpecificsData_Notes_Note& a, PasswordSpecificsData_Notes_Note& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PasswordSpecificsData_Notes_Note* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasswordSpecificsData_Notes_Note* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PasswordSpecificsData_Notes_Note* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PasswordSpecificsData_Notes_Note>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PasswordSpecificsData_Notes_Note& from);
  void MergeFrom(const PasswordSpecificsData_Notes_Note& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PasswordSpecificsData_Notes_Note* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.PasswordSpecificsData.Notes.Note";
  }
  protected:
  explicit PasswordSpecificsData_Notes_Note(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniqueDisplayNameFieldNumber = 1,
    kValueFieldNumber = 2,
    kDateCreatedWindowsEpochMicrosFieldNumber = 3,
    kHideByDefaultFieldNumber = 4,
  };
  // optional string unique_display_name = 1;
  bool has_unique_display_name() const;
  private:
  bool _internal_has_unique_display_name() const;
  public:
  void clear_unique_display_name();
  const std::string& unique_display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unique_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unique_display_name();
  PROTOBUF_NODISCARD std::string* release_unique_display_name();
  void set_allocated_unique_display_name(std::string* unique_display_name);
  private:
  const std::string& _internal_unique_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique_display_name(const std::string& value);
  std::string* _internal_mutable_unique_display_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional int64 date_created_windows_epoch_micros = 3;
  bool has_date_created_windows_epoch_micros() const;
  private:
  bool _internal_has_date_created_windows_epoch_micros() const;
  public:
  void clear_date_created_windows_epoch_micros();
  int64_t date_created_windows_epoch_micros() const;
  void set_date_created_windows_epoch_micros(int64_t value);
  private:
  int64_t _internal_date_created_windows_epoch_micros() const;
  void _internal_set_date_created_windows_epoch_micros(int64_t value);
  public:

  // optional bool hide_by_default = 4;
  bool has_hide_by_default() const;
  private:
  bool _internal_has_hide_by_default() const;
  public:
  void clear_hide_by_default();
  bool hide_by_default() const;
  void set_hide_by_default(bool value);
  private:
  bool _internal_hide_by_default() const;
  void _internal_set_hide_by_default(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.PasswordSpecificsData.Notes.Note)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int64_t date_created_windows_epoch_micros_;
  bool hide_by_default_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fpassword_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class PasswordSpecificsData_Notes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.PasswordSpecificsData.Notes) */ {
 public:
  inline PasswordSpecificsData_Notes() : PasswordSpecificsData_Notes(nullptr) {}
  ~PasswordSpecificsData_Notes() override;
  explicit PROTOBUF_CONSTEXPR PasswordSpecificsData_Notes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PasswordSpecificsData_Notes(const PasswordSpecificsData_Notes& from);
  PasswordSpecificsData_Notes(PasswordSpecificsData_Notes&& from) noexcept
    : PasswordSpecificsData_Notes() {
    *this = ::std::move(from);
  }

  inline PasswordSpecificsData_Notes& operator=(const PasswordSpecificsData_Notes& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordSpecificsData_Notes& operator=(PasswordSpecificsData_Notes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PasswordSpecificsData_Notes& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasswordSpecificsData_Notes* internal_default_instance() {
    return reinterpret_cast<const PasswordSpecificsData_Notes*>(
               &_PasswordSpecificsData_Notes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PasswordSpecificsData_Notes& a, PasswordSpecificsData_Notes& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PasswordSpecificsData_Notes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasswordSpecificsData_Notes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PasswordSpecificsData_Notes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PasswordSpecificsData_Notes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PasswordSpecificsData_Notes& from);
  void MergeFrom(const PasswordSpecificsData_Notes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PasswordSpecificsData_Notes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.PasswordSpecificsData.Notes";
  }
  protected:
  explicit PasswordSpecificsData_Notes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PasswordSpecificsData_Notes_Note Note;

  // accessors -------------------------------------------------------

  enum : int {
    kNoteFieldNumber = 1,
  };
  // repeated .sync_pb.PasswordSpecificsData.Notes.Note note = 1;
  int note_size() const;
  private:
  int _internal_note_size() const;
  public:
  void clear_note();
  ::sync_pb::PasswordSpecificsData_Notes_Note* mutable_note(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::PasswordSpecificsData_Notes_Note >*
      mutable_note();
  private:
  const ::sync_pb::PasswordSpecificsData_Notes_Note& _internal_note(int index) const;
  ::sync_pb::PasswordSpecificsData_Notes_Note* _internal_add_note();
  public:
  const ::sync_pb::PasswordSpecificsData_Notes_Note& note(int index) const;
  ::sync_pb::PasswordSpecificsData_Notes_Note* add_note();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::PasswordSpecificsData_Notes_Note >&
      note() const;

  // @@protoc_insertion_point(class_scope:sync_pb.PasswordSpecificsData.Notes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::PasswordSpecificsData_Notes_Note > note_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fpassword_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class PasswordSpecificsData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.PasswordSpecificsData) */ {
 public:
  inline PasswordSpecificsData() : PasswordSpecificsData(nullptr) {}
  ~PasswordSpecificsData() override;
  explicit PROTOBUF_CONSTEXPR PasswordSpecificsData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PasswordSpecificsData(const PasswordSpecificsData& from);
  PasswordSpecificsData(PasswordSpecificsData&& from) noexcept
    : PasswordSpecificsData() {
    *this = ::std::move(from);
  }

  inline PasswordSpecificsData& operator=(const PasswordSpecificsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordSpecificsData& operator=(PasswordSpecificsData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PasswordSpecificsData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasswordSpecificsData* internal_default_instance() {
    return reinterpret_cast<const PasswordSpecificsData*>(
               &_PasswordSpecificsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PasswordSpecificsData& a, PasswordSpecificsData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PasswordSpecificsData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasswordSpecificsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PasswordSpecificsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PasswordSpecificsData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PasswordSpecificsData& from);
  void MergeFrom(const PasswordSpecificsData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PasswordSpecificsData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.PasswordSpecificsData";
  }
  protected:
  explicit PasswordSpecificsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PasswordSpecificsData_PasswordIssues PasswordIssues;
  typedef PasswordSpecificsData_Notes Notes;

  typedef PasswordSpecificsData_Scheme Scheme;
  static constexpr Scheme SCHEME_HTML =
    PasswordSpecificsData_Scheme_SCHEME_HTML;
  static constexpr Scheme SCHEME_BASIC =
    PasswordSpecificsData_Scheme_SCHEME_BASIC;
  static constexpr Scheme SCHEME_DIGEST =
    PasswordSpecificsData_Scheme_SCHEME_DIGEST;
  static constexpr Scheme SCHEME_OTHER =
    PasswordSpecificsData_Scheme_SCHEME_OTHER;
  static constexpr Scheme USERNAME_ONLY =
    PasswordSpecificsData_Scheme_USERNAME_ONLY;
  static inline bool Scheme_IsValid(int value) {
    return PasswordSpecificsData_Scheme_IsValid(value);
  }
  static constexpr Scheme Scheme_MIN =
    PasswordSpecificsData_Scheme_Scheme_MIN;
  static constexpr Scheme Scheme_MAX =
    PasswordSpecificsData_Scheme_Scheme_MAX;
  static constexpr int Scheme_ARRAYSIZE =
    PasswordSpecificsData_Scheme_Scheme_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Scheme_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Scheme>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Scheme_Name.");
    return PasswordSpecificsData_Scheme_Name(enum_t_value);
  }
  static inline bool Scheme_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Scheme* value) {
    return PasswordSpecificsData_Scheme_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSignonRealmFieldNumber = 2,
    kOriginFieldNumber = 3,
    kActionFieldNumber = 4,
    kUsernameElementFieldNumber = 5,
    kUsernameValueFieldNumber = 6,
    kPasswordElementFieldNumber = 7,
    kPasswordValueFieldNumber = 8,
    kDisplayNameFieldNumber = 15,
    kAvatarUrlFieldNumber = 16,
    kFederationUrlFieldNumber = 17,
    kPasswordIssuesFieldNumber = 19,
    kNotesFieldNumber = 21,
    kSchemeFieldNumber = 1,
    kSslValidFieldNumber = 9,
    kPreferredFieldNumber = 10,
    kBlacklistedFieldNumber = 12,
    kDateCreatedFieldNumber = 11,
    kTypeFieldNumber = 13,
    kTimesUsedFieldNumber = 14,
    kDateLastUsedFieldNumber = 18,
    kDatePasswordModifiedWindowsEpochMicrosFieldNumber = 20,
  };
  // optional string signon_realm = 2;
  bool has_signon_realm() const;
  private:
  bool _internal_has_signon_realm() const;
  public:
  void clear_signon_realm();
  const std::string& signon_realm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signon_realm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signon_realm();
  PROTOBUF_NODISCARD std::string* release_signon_realm();
  void set_allocated_signon_realm(std::string* signon_realm);
  private:
  const std::string& _internal_signon_realm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signon_realm(const std::string& value);
  std::string* _internal_mutable_signon_realm();
  public:

  // optional string origin = 3;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const std::string& origin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_origin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_origin();
  PROTOBUF_NODISCARD std::string* release_origin();
  void set_allocated_origin(std::string* origin);
  private:
  const std::string& _internal_origin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin(const std::string& value);
  std::string* _internal_mutable_origin();
  public:

  // optional string action = 4;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // optional string username_element = 5;
  bool has_username_element() const;
  private:
  bool _internal_has_username_element() const;
  public:
  void clear_username_element();
  const std::string& username_element() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username_element(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username_element();
  PROTOBUF_NODISCARD std::string* release_username_element();
  void set_allocated_username_element(std::string* username_element);
  private:
  const std::string& _internal_username_element() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username_element(const std::string& value);
  std::string* _internal_mutable_username_element();
  public:

  // optional string username_value = 6;
  bool has_username_value() const;
  private:
  bool _internal_has_username_value() const;
  public:
  void clear_username_value();
  const std::string& username_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username_value();
  PROTOBUF_NODISCARD std::string* release_username_value();
  void set_allocated_username_value(std::string* username_value);
  private:
  const std::string& _internal_username_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username_value(const std::string& value);
  std::string* _internal_mutable_username_value();
  public:

  // optional string password_element = 7;
  bool has_password_element() const;
  private:
  bool _internal_has_password_element() const;
  public:
  void clear_password_element();
  const std::string& password_element() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password_element(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password_element();
  PROTOBUF_NODISCARD std::string* release_password_element();
  void set_allocated_password_element(std::string* password_element);
  private:
  const std::string& _internal_password_element() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password_element(const std::string& value);
  std::string* _internal_mutable_password_element();
  public:

  // optional string password_value = 8;
  bool has_password_value() const;
  private:
  bool _internal_has_password_value() const;
  public:
  void clear_password_value();
  const std::string& password_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password_value();
  PROTOBUF_NODISCARD std::string* release_password_value();
  void set_allocated_password_value(std::string* password_value);
  private:
  const std::string& _internal_password_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password_value(const std::string& value);
  std::string* _internal_mutable_password_value();
  public:

  // optional string display_name = 15;
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // optional string avatar_url = 16;
  bool has_avatar_url() const;
  private:
  bool _internal_has_avatar_url() const;
  public:
  void clear_avatar_url();
  const std::string& avatar_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_url();
  PROTOBUF_NODISCARD std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // optional string federation_url = 17;
  bool has_federation_url() const;
  private:
  bool _internal_has_federation_url() const;
  public:
  void clear_federation_url();
  const std::string& federation_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_federation_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_federation_url();
  PROTOBUF_NODISCARD std::string* release_federation_url();
  void set_allocated_federation_url(std::string* federation_url);
  private:
  const std::string& _internal_federation_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_federation_url(const std::string& value);
  std::string* _internal_mutable_federation_url();
  public:

  // optional .sync_pb.PasswordSpecificsData.PasswordIssues password_issues = 19;
  bool has_password_issues() const;
  private:
  bool _internal_has_password_issues() const;
  public:
  void clear_password_issues();
  const ::sync_pb::PasswordSpecificsData_PasswordIssues& password_issues() const;
  PROTOBUF_NODISCARD ::sync_pb::PasswordSpecificsData_PasswordIssues* release_password_issues();
  ::sync_pb::PasswordSpecificsData_PasswordIssues* mutable_password_issues();
  void set_allocated_password_issues(::sync_pb::PasswordSpecificsData_PasswordIssues* password_issues);
  private:
  const ::sync_pb::PasswordSpecificsData_PasswordIssues& _internal_password_issues() const;
  ::sync_pb::PasswordSpecificsData_PasswordIssues* _internal_mutable_password_issues();
  public:
  void unsafe_arena_set_allocated_password_issues(
      ::sync_pb::PasswordSpecificsData_PasswordIssues* password_issues);
  ::sync_pb::PasswordSpecificsData_PasswordIssues* unsafe_arena_release_password_issues();

  // optional .sync_pb.PasswordSpecificsData.Notes notes = 21;
  bool has_notes() const;
  private:
  bool _internal_has_notes() const;
  public:
  void clear_notes();
  const ::sync_pb::PasswordSpecificsData_Notes& notes() const;
  PROTOBUF_NODISCARD ::sync_pb::PasswordSpecificsData_Notes* release_notes();
  ::sync_pb::PasswordSpecificsData_Notes* mutable_notes();
  void set_allocated_notes(::sync_pb::PasswordSpecificsData_Notes* notes);
  private:
  const ::sync_pb::PasswordSpecificsData_Notes& _internal_notes() const;
  ::sync_pb::PasswordSpecificsData_Notes* _internal_mutable_notes();
  public:
  void unsafe_arena_set_allocated_notes(
      ::sync_pb::PasswordSpecificsData_Notes* notes);
  ::sync_pb::PasswordSpecificsData_Notes* unsafe_arena_release_notes();

  // optional int32 scheme = 1;
  bool has_scheme() const;
  private:
  bool _internal_has_scheme() const;
  public:
  void clear_scheme();
  int32_t scheme() const;
  void set_scheme(int32_t value);
  private:
  int32_t _internal_scheme() const;
  void _internal_set_scheme(int32_t value);
  public:

  // optional bool ssl_valid = 9 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_ssl_valid() const;
  private:
  bool _internal_has_ssl_valid() const;
  public:
  PROTOBUF_DEPRECATED void clear_ssl_valid();
  PROTOBUF_DEPRECATED bool ssl_valid() const;
  PROTOBUF_DEPRECATED void set_ssl_valid(bool value);
  private:
  bool _internal_ssl_valid() const;
  void _internal_set_ssl_valid(bool value);
  public:

  // optional bool preferred = 10 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_preferred() const;
  private:
  bool _internal_has_preferred() const;
  public:
  PROTOBUF_DEPRECATED void clear_preferred();
  PROTOBUF_DEPRECATED bool preferred() const;
  PROTOBUF_DEPRECATED void set_preferred(bool value);
  private:
  bool _internal_preferred() const;
  void _internal_set_preferred(bool value);
  public:

  // optional bool blacklisted = 12;
  bool has_blacklisted() const;
  private:
  bool _internal_has_blacklisted() const;
  public:
  void clear_blacklisted();
  bool blacklisted() const;
  void set_blacklisted(bool value);
  private:
  bool _internal_blacklisted() const;
  void _internal_set_blacklisted(bool value);
  public:

  // optional int64 date_created = 11;
  bool has_date_created() const;
  private:
  bool _internal_has_date_created() const;
  public:
  void clear_date_created();
  int64_t date_created() const;
  void set_date_created(int64_t value);
  private:
  int64_t _internal_date_created() const;
  void _internal_set_date_created(int64_t value);
  public:

  // optional int32 type = 13;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // optional int32 times_used = 14;
  bool has_times_used() const;
  private:
  bool _internal_has_times_used() const;
  public:
  void clear_times_used();
  int32_t times_used() const;
  void set_times_used(int32_t value);
  private:
  int32_t _internal_times_used() const;
  void _internal_set_times_used(int32_t value);
  public:

  // optional int64 date_last_used = 18;
  bool has_date_last_used() const;
  private:
  bool _internal_has_date_last_used() const;
  public:
  void clear_date_last_used();
  int64_t date_last_used() const;
  void set_date_last_used(int64_t value);
  private:
  int64_t _internal_date_last_used() const;
  void _internal_set_date_last_used(int64_t value);
  public:

  // optional int64 date_password_modified_windows_epoch_micros = 20;
  bool has_date_password_modified_windows_epoch_micros() const;
  private:
  bool _internal_has_date_password_modified_windows_epoch_micros() const;
  public:
  void clear_date_password_modified_windows_epoch_micros();
  int64_t date_password_modified_windows_epoch_micros() const;
  void set_date_password_modified_windows_epoch_micros(int64_t value);
  private:
  int64_t _internal_date_password_modified_windows_epoch_micros() const;
  void _internal_set_date_password_modified_windows_epoch_micros(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.PasswordSpecificsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signon_realm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_element_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_element_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr federation_url_;
  ::sync_pb::PasswordSpecificsData_PasswordIssues* password_issues_;
  ::sync_pb::PasswordSpecificsData_Notes* notes_;
  int32_t scheme_;
  bool ssl_valid_;
  bool preferred_;
  bool blacklisted_;
  int64_t date_created_;
  int32_t type_;
  int32_t times_used_;
  int64_t date_last_used_;
  int64_t date_password_modified_windows_epoch_micros_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fpassword_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class PasswordSpecificsMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.PasswordSpecificsMetadata) */ {
 public:
  inline PasswordSpecificsMetadata() : PasswordSpecificsMetadata(nullptr) {}
  ~PasswordSpecificsMetadata() override;
  explicit PROTOBUF_CONSTEXPR PasswordSpecificsMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PasswordSpecificsMetadata(const PasswordSpecificsMetadata& from);
  PasswordSpecificsMetadata(PasswordSpecificsMetadata&& from) noexcept
    : PasswordSpecificsMetadata() {
    *this = ::std::move(from);
  }

  inline PasswordSpecificsMetadata& operator=(const PasswordSpecificsMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordSpecificsMetadata& operator=(PasswordSpecificsMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PasswordSpecificsMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasswordSpecificsMetadata* internal_default_instance() {
    return reinterpret_cast<const PasswordSpecificsMetadata*>(
               &_PasswordSpecificsMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PasswordSpecificsMetadata& a, PasswordSpecificsMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PasswordSpecificsMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasswordSpecificsMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PasswordSpecificsMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PasswordSpecificsMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PasswordSpecificsMetadata& from);
  void MergeFrom(const PasswordSpecificsMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PasswordSpecificsMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.PasswordSpecificsMetadata";
  }
  protected:
  explicit PasswordSpecificsMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kBlacklistedFieldNumber = 2,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional bool blacklisted = 2;
  bool has_blacklisted() const;
  private:
  bool _internal_has_blacklisted() const;
  public:
  void clear_blacklisted();
  bool blacklisted() const;
  void set_blacklisted(bool value);
  private:
  bool _internal_blacklisted() const;
  void _internal_set_blacklisted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.PasswordSpecificsMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  bool blacklisted_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fpassword_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class PasswordSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.PasswordSpecifics) */ {
 public:
  inline PasswordSpecifics() : PasswordSpecifics(nullptr) {}
  ~PasswordSpecifics() override;
  explicit PROTOBUF_CONSTEXPR PasswordSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PasswordSpecifics(const PasswordSpecifics& from);
  PasswordSpecifics(PasswordSpecifics&& from) noexcept
    : PasswordSpecifics() {
    *this = ::std::move(from);
  }

  inline PasswordSpecifics& operator=(const PasswordSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordSpecifics& operator=(PasswordSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PasswordSpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasswordSpecifics* internal_default_instance() {
    return reinterpret_cast<const PasswordSpecifics*>(
               &_PasswordSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PasswordSpecifics& a, PasswordSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PasswordSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasswordSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PasswordSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PasswordSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PasswordSpecifics& from);
  void MergeFrom(const PasswordSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PasswordSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.PasswordSpecifics";
  }
  protected:
  explicit PasswordSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedFieldNumber = 1,
    kClientOnlyEncryptedDataFieldNumber = 2,
    kUnencryptedMetadataFieldNumber = 3,
    kEncryptedNotesBackupFieldNumber = 4,
  };
  // optional .sync_pb.EncryptedData encrypted = 1;
  bool has_encrypted() const;
  private:
  bool _internal_has_encrypted() const;
  public:
  void clear_encrypted();
  const ::sync_pb::EncryptedData& encrypted() const;
  PROTOBUF_NODISCARD ::sync_pb::EncryptedData* release_encrypted();
  ::sync_pb::EncryptedData* mutable_encrypted();
  void set_allocated_encrypted(::sync_pb::EncryptedData* encrypted);
  private:
  const ::sync_pb::EncryptedData& _internal_encrypted() const;
  ::sync_pb::EncryptedData* _internal_mutable_encrypted();
  public:
  void unsafe_arena_set_allocated_encrypted(
      ::sync_pb::EncryptedData* encrypted);
  ::sync_pb::EncryptedData* unsafe_arena_release_encrypted();

  // optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;
  bool has_client_only_encrypted_data() const;
  private:
  bool _internal_has_client_only_encrypted_data() const;
  public:
  void clear_client_only_encrypted_data();
  const ::sync_pb::PasswordSpecificsData& client_only_encrypted_data() const;
  PROTOBUF_NODISCARD ::sync_pb::PasswordSpecificsData* release_client_only_encrypted_data();
  ::sync_pb::PasswordSpecificsData* mutable_client_only_encrypted_data();
  void set_allocated_client_only_encrypted_data(::sync_pb::PasswordSpecificsData* client_only_encrypted_data);
  private:
  const ::sync_pb::PasswordSpecificsData& _internal_client_only_encrypted_data() const;
  ::sync_pb::PasswordSpecificsData* _internal_mutable_client_only_encrypted_data();
  public:
  void unsafe_arena_set_allocated_client_only_encrypted_data(
      ::sync_pb::PasswordSpecificsData* client_only_encrypted_data);
  ::sync_pb::PasswordSpecificsData* unsafe_arena_release_client_only_encrypted_data();

  // optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;
  bool has_unencrypted_metadata() const;
  private:
  bool _internal_has_unencrypted_metadata() const;
  public:
  void clear_unencrypted_metadata();
  const ::sync_pb::PasswordSpecificsMetadata& unencrypted_metadata() const;
  PROTOBUF_NODISCARD ::sync_pb::PasswordSpecificsMetadata* release_unencrypted_metadata();
  ::sync_pb::PasswordSpecificsMetadata* mutable_unencrypted_metadata();
  void set_allocated_unencrypted_metadata(::sync_pb::PasswordSpecificsMetadata* unencrypted_metadata);
  private:
  const ::sync_pb::PasswordSpecificsMetadata& _internal_unencrypted_metadata() const;
  ::sync_pb::PasswordSpecificsMetadata* _internal_mutable_unencrypted_metadata();
  public:
  void unsafe_arena_set_allocated_unencrypted_metadata(
      ::sync_pb::PasswordSpecificsMetadata* unencrypted_metadata);
  ::sync_pb::PasswordSpecificsMetadata* unsafe_arena_release_unencrypted_metadata();

  // optional .sync_pb.EncryptedData encrypted_notes_backup = 4;
  bool has_encrypted_notes_backup() const;
  private:
  bool _internal_has_encrypted_notes_backup() const;
  public:
  void clear_encrypted_notes_backup();
  const ::sync_pb::EncryptedData& encrypted_notes_backup() const;
  PROTOBUF_NODISCARD ::sync_pb::EncryptedData* release_encrypted_notes_backup();
  ::sync_pb::EncryptedData* mutable_encrypted_notes_backup();
  void set_allocated_encrypted_notes_backup(::sync_pb::EncryptedData* encrypted_notes_backup);
  private:
  const ::sync_pb::EncryptedData& _internal_encrypted_notes_backup() const;
  ::sync_pb::EncryptedData* _internal_mutable_encrypted_notes_backup();
  public:
  void unsafe_arena_set_allocated_encrypted_notes_backup(
      ::sync_pb::EncryptedData* encrypted_notes_backup);
  ::sync_pb::EncryptedData* unsafe_arena_release_encrypted_notes_backup();

  // @@protoc_insertion_point(class_scope:sync_pb.PasswordSpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sync_pb::EncryptedData* encrypted_;
  ::sync_pb::PasswordSpecificsData* client_only_encrypted_data_;
  ::sync_pb::PasswordSpecificsMetadata* unencrypted_metadata_;
  ::sync_pb::EncryptedData* encrypted_notes_backup_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fpassword_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PasswordSpecificsData_PasswordIssues_PasswordIssue

// optional uint64 date_first_detection_microseconds = 1;
inline bool PasswordSpecificsData_PasswordIssues_PasswordIssue::_internal_has_date_first_detection_microseconds() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PasswordSpecificsData_PasswordIssues_PasswordIssue::has_date_first_detection_microseconds() const {
  return _internal_has_date_first_detection_microseconds();
}
inline void PasswordSpecificsData_PasswordIssues_PasswordIssue::clear_date_first_detection_microseconds() {
  date_first_detection_microseconds_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t PasswordSpecificsData_PasswordIssues_PasswordIssue::_internal_date_first_detection_microseconds() const {
  return date_first_detection_microseconds_;
}
inline uint64_t PasswordSpecificsData_PasswordIssues_PasswordIssue::date_first_detection_microseconds() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue.date_first_detection_microseconds)
  return _internal_date_first_detection_microseconds();
}
inline void PasswordSpecificsData_PasswordIssues_PasswordIssue::_internal_set_date_first_detection_microseconds(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  date_first_detection_microseconds_ = value;
}
inline void PasswordSpecificsData_PasswordIssues_PasswordIssue::set_date_first_detection_microseconds(uint64_t value) {
  _internal_set_date_first_detection_microseconds(value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue.date_first_detection_microseconds)
}

// optional bool is_muted = 2;
inline bool PasswordSpecificsData_PasswordIssues_PasswordIssue::_internal_has_is_muted() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PasswordSpecificsData_PasswordIssues_PasswordIssue::has_is_muted() const {
  return _internal_has_is_muted();
}
inline void PasswordSpecificsData_PasswordIssues_PasswordIssue::clear_is_muted() {
  is_muted_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PasswordSpecificsData_PasswordIssues_PasswordIssue::_internal_is_muted() const {
  return is_muted_;
}
inline bool PasswordSpecificsData_PasswordIssues_PasswordIssue::is_muted() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue.is_muted)
  return _internal_is_muted();
}
inline void PasswordSpecificsData_PasswordIssues_PasswordIssue::_internal_set_is_muted(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_muted_ = value;
}
inline void PasswordSpecificsData_PasswordIssues_PasswordIssue::set_is_muted(bool value) {
  _internal_set_is_muted(value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue.is_muted)
}

// -------------------------------------------------------------------

// PasswordSpecificsData_PasswordIssues

// optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue leaked_password_issue = 1;
inline bool PasswordSpecificsData_PasswordIssues::_internal_has_leaked_password_issue() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || leaked_password_issue_ != nullptr);
  return value;
}
inline bool PasswordSpecificsData_PasswordIssues::has_leaked_password_issue() const {
  return _internal_has_leaked_password_issue();
}
inline void PasswordSpecificsData_PasswordIssues::clear_leaked_password_issue() {
  if (leaked_password_issue_ != nullptr) leaked_password_issue_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue& PasswordSpecificsData_PasswordIssues::_internal_leaked_password_issue() const {
  const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* p = leaked_password_issue_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue&>(
      ::sync_pb::_PasswordSpecificsData_PasswordIssues_PasswordIssue_default_instance_);
}
inline const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue& PasswordSpecificsData_PasswordIssues::leaked_password_issue() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.PasswordIssues.leaked_password_issue)
  return _internal_leaked_password_issue();
}
inline void PasswordSpecificsData_PasswordIssues::unsafe_arena_set_allocated_leaked_password_issue(
    ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* leaked_password_issue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leaked_password_issue_);
  }
  leaked_password_issue_ = leaked_password_issue;
  if (leaked_password_issue) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.PasswordSpecificsData.PasswordIssues.leaked_password_issue)
}
inline ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* PasswordSpecificsData_PasswordIssues::release_leaked_password_issue() {
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* temp = leaked_password_issue_;
  leaked_password_issue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* PasswordSpecificsData_PasswordIssues::unsafe_arena_release_leaked_password_issue() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.PasswordIssues.leaked_password_issue)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* temp = leaked_password_issue_;
  leaked_password_issue_ = nullptr;
  return temp;
}
inline ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* PasswordSpecificsData_PasswordIssues::_internal_mutable_leaked_password_issue() {
  _has_bits_[0] |= 0x00000001u;
  if (leaked_password_issue_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue>(GetArenaForAllocation());
    leaked_password_issue_ = p;
  }
  return leaked_password_issue_;
}
inline ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* PasswordSpecificsData_PasswordIssues::mutable_leaked_password_issue() {
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* _msg = _internal_mutable_leaked_password_issue();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.PasswordIssues.leaked_password_issue)
  return _msg;
}
inline void PasswordSpecificsData_PasswordIssues::set_allocated_leaked_password_issue(::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* leaked_password_issue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete leaked_password_issue_;
  }
  if (leaked_password_issue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(leaked_password_issue);
    if (message_arena != submessage_arena) {
      leaked_password_issue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaked_password_issue, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  leaked_password_issue_ = leaked_password_issue;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.PasswordIssues.leaked_password_issue)
}

// optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue reused_password_issue = 2;
inline bool PasswordSpecificsData_PasswordIssues::_internal_has_reused_password_issue() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || reused_password_issue_ != nullptr);
  return value;
}
inline bool PasswordSpecificsData_PasswordIssues::has_reused_password_issue() const {
  return _internal_has_reused_password_issue();
}
inline void PasswordSpecificsData_PasswordIssues::clear_reused_password_issue() {
  if (reused_password_issue_ != nullptr) reused_password_issue_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue& PasswordSpecificsData_PasswordIssues::_internal_reused_password_issue() const {
  const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* p = reused_password_issue_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue&>(
      ::sync_pb::_PasswordSpecificsData_PasswordIssues_PasswordIssue_default_instance_);
}
inline const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue& PasswordSpecificsData_PasswordIssues::reused_password_issue() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.PasswordIssues.reused_password_issue)
  return _internal_reused_password_issue();
}
inline void PasswordSpecificsData_PasswordIssues::unsafe_arena_set_allocated_reused_password_issue(
    ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* reused_password_issue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reused_password_issue_);
  }
  reused_password_issue_ = reused_password_issue;
  if (reused_password_issue) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.PasswordSpecificsData.PasswordIssues.reused_password_issue)
}
inline ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* PasswordSpecificsData_PasswordIssues::release_reused_password_issue() {
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* temp = reused_password_issue_;
  reused_password_issue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* PasswordSpecificsData_PasswordIssues::unsafe_arena_release_reused_password_issue() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.PasswordIssues.reused_password_issue)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* temp = reused_password_issue_;
  reused_password_issue_ = nullptr;
  return temp;
}
inline ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* PasswordSpecificsData_PasswordIssues::_internal_mutable_reused_password_issue() {
  _has_bits_[0] |= 0x00000002u;
  if (reused_password_issue_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue>(GetArenaForAllocation());
    reused_password_issue_ = p;
  }
  return reused_password_issue_;
}
inline ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* PasswordSpecificsData_PasswordIssues::mutable_reused_password_issue() {
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* _msg = _internal_mutable_reused_password_issue();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.PasswordIssues.reused_password_issue)
  return _msg;
}
inline void PasswordSpecificsData_PasswordIssues::set_allocated_reused_password_issue(::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* reused_password_issue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reused_password_issue_;
  }
  if (reused_password_issue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reused_password_issue);
    if (message_arena != submessage_arena) {
      reused_password_issue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reused_password_issue, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  reused_password_issue_ = reused_password_issue;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.PasswordIssues.reused_password_issue)
}

// optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue weak_password_issue = 3;
inline bool PasswordSpecificsData_PasswordIssues::_internal_has_weak_password_issue() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || weak_password_issue_ != nullptr);
  return value;
}
inline bool PasswordSpecificsData_PasswordIssues::has_weak_password_issue() const {
  return _internal_has_weak_password_issue();
}
inline void PasswordSpecificsData_PasswordIssues::clear_weak_password_issue() {
  if (weak_password_issue_ != nullptr) weak_password_issue_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue& PasswordSpecificsData_PasswordIssues::_internal_weak_password_issue() const {
  const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* p = weak_password_issue_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue&>(
      ::sync_pb::_PasswordSpecificsData_PasswordIssues_PasswordIssue_default_instance_);
}
inline const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue& PasswordSpecificsData_PasswordIssues::weak_password_issue() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.PasswordIssues.weak_password_issue)
  return _internal_weak_password_issue();
}
inline void PasswordSpecificsData_PasswordIssues::unsafe_arena_set_allocated_weak_password_issue(
    ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* weak_password_issue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weak_password_issue_);
  }
  weak_password_issue_ = weak_password_issue;
  if (weak_password_issue) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.PasswordSpecificsData.PasswordIssues.weak_password_issue)
}
inline ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* PasswordSpecificsData_PasswordIssues::release_weak_password_issue() {
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* temp = weak_password_issue_;
  weak_password_issue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* PasswordSpecificsData_PasswordIssues::unsafe_arena_release_weak_password_issue() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.PasswordIssues.weak_password_issue)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* temp = weak_password_issue_;
  weak_password_issue_ = nullptr;
  return temp;
}
inline ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* PasswordSpecificsData_PasswordIssues::_internal_mutable_weak_password_issue() {
  _has_bits_[0] |= 0x00000004u;
  if (weak_password_issue_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue>(GetArenaForAllocation());
    weak_password_issue_ = p;
  }
  return weak_password_issue_;
}
inline ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* PasswordSpecificsData_PasswordIssues::mutable_weak_password_issue() {
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* _msg = _internal_mutable_weak_password_issue();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.PasswordIssues.weak_password_issue)
  return _msg;
}
inline void PasswordSpecificsData_PasswordIssues::set_allocated_weak_password_issue(::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* weak_password_issue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete weak_password_issue_;
  }
  if (weak_password_issue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weak_password_issue);
    if (message_arena != submessage_arena) {
      weak_password_issue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weak_password_issue, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  weak_password_issue_ = weak_password_issue;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.PasswordIssues.weak_password_issue)
}

// optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue phished_password_issue = 4;
inline bool PasswordSpecificsData_PasswordIssues::_internal_has_phished_password_issue() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || phished_password_issue_ != nullptr);
  return value;
}
inline bool PasswordSpecificsData_PasswordIssues::has_phished_password_issue() const {
  return _internal_has_phished_password_issue();
}
inline void PasswordSpecificsData_PasswordIssues::clear_phished_password_issue() {
  if (phished_password_issue_ != nullptr) phished_password_issue_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue& PasswordSpecificsData_PasswordIssues::_internal_phished_password_issue() const {
  const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* p = phished_password_issue_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue&>(
      ::sync_pb::_PasswordSpecificsData_PasswordIssues_PasswordIssue_default_instance_);
}
inline const ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue& PasswordSpecificsData_PasswordIssues::phished_password_issue() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.PasswordIssues.phished_password_issue)
  return _internal_phished_password_issue();
}
inline void PasswordSpecificsData_PasswordIssues::unsafe_arena_set_allocated_phished_password_issue(
    ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* phished_password_issue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phished_password_issue_);
  }
  phished_password_issue_ = phished_password_issue;
  if (phished_password_issue) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.PasswordSpecificsData.PasswordIssues.phished_password_issue)
}
inline ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* PasswordSpecificsData_PasswordIssues::release_phished_password_issue() {
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* temp = phished_password_issue_;
  phished_password_issue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* PasswordSpecificsData_PasswordIssues::unsafe_arena_release_phished_password_issue() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.PasswordIssues.phished_password_issue)
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* temp = phished_password_issue_;
  phished_password_issue_ = nullptr;
  return temp;
}
inline ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* PasswordSpecificsData_PasswordIssues::_internal_mutable_phished_password_issue() {
  _has_bits_[0] |= 0x00000008u;
  if (phished_password_issue_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue>(GetArenaForAllocation());
    phished_password_issue_ = p;
  }
  return phished_password_issue_;
}
inline ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* PasswordSpecificsData_PasswordIssues::mutable_phished_password_issue() {
  ::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* _msg = _internal_mutable_phished_password_issue();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.PasswordIssues.phished_password_issue)
  return _msg;
}
inline void PasswordSpecificsData_PasswordIssues::set_allocated_phished_password_issue(::sync_pb::PasswordSpecificsData_PasswordIssues_PasswordIssue* phished_password_issue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete phished_password_issue_;
  }
  if (phished_password_issue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(phished_password_issue);
    if (message_arena != submessage_arena) {
      phished_password_issue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phished_password_issue, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  phished_password_issue_ = phished_password_issue;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.PasswordIssues.phished_password_issue)
}

// -------------------------------------------------------------------

// PasswordSpecificsData_Notes_Note

// optional string unique_display_name = 1;
inline bool PasswordSpecificsData_Notes_Note::_internal_has_unique_display_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PasswordSpecificsData_Notes_Note::has_unique_display_name() const {
  return _internal_has_unique_display_name();
}
inline void PasswordSpecificsData_Notes_Note::clear_unique_display_name() {
  unique_display_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PasswordSpecificsData_Notes_Note::unique_display_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.Notes.Note.unique_display_name)
  return _internal_unique_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasswordSpecificsData_Notes_Note::set_unique_display_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 unique_display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.Notes.Note.unique_display_name)
}
inline std::string* PasswordSpecificsData_Notes_Note::mutable_unique_display_name() {
  std::string* _s = _internal_mutable_unique_display_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.Notes.Note.unique_display_name)
  return _s;
}
inline const std::string& PasswordSpecificsData_Notes_Note::_internal_unique_display_name() const {
  return unique_display_name_.Get();
}
inline void PasswordSpecificsData_Notes_Note::_internal_set_unique_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  unique_display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData_Notes_Note::_internal_mutable_unique_display_name() {
  _has_bits_[0] |= 0x00000001u;
  return unique_display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData_Notes_Note::release_unique_display_name() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.Notes.Note.unique_display_name)
  if (!_internal_has_unique_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = unique_display_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unique_display_name_.IsDefault()) {
    unique_display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PasswordSpecificsData_Notes_Note::set_allocated_unique_display_name(std::string* unique_display_name) {
  if (unique_display_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  unique_display_name_.SetAllocated(unique_display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unique_display_name_.IsDefault()) {
    unique_display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.Notes.Note.unique_display_name)
}

// optional string value = 2;
inline bool PasswordSpecificsData_Notes_Note::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PasswordSpecificsData_Notes_Note::has_value() const {
  return _internal_has_value();
}
inline void PasswordSpecificsData_Notes_Note::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PasswordSpecificsData_Notes_Note::value() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.Notes.Note.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasswordSpecificsData_Notes_Note::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.Notes.Note.value)
}
inline std::string* PasswordSpecificsData_Notes_Note::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.Notes.Note.value)
  return _s;
}
inline const std::string& PasswordSpecificsData_Notes_Note::_internal_value() const {
  return value_.Get();
}
inline void PasswordSpecificsData_Notes_Note::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData_Notes_Note::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData_Notes_Note::release_value() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.Notes.Note.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PasswordSpecificsData_Notes_Note::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.Notes.Note.value)
}

// optional int64 date_created_windows_epoch_micros = 3;
inline bool PasswordSpecificsData_Notes_Note::_internal_has_date_created_windows_epoch_micros() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PasswordSpecificsData_Notes_Note::has_date_created_windows_epoch_micros() const {
  return _internal_has_date_created_windows_epoch_micros();
}
inline void PasswordSpecificsData_Notes_Note::clear_date_created_windows_epoch_micros() {
  date_created_windows_epoch_micros_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t PasswordSpecificsData_Notes_Note::_internal_date_created_windows_epoch_micros() const {
  return date_created_windows_epoch_micros_;
}
inline int64_t PasswordSpecificsData_Notes_Note::date_created_windows_epoch_micros() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.Notes.Note.date_created_windows_epoch_micros)
  return _internal_date_created_windows_epoch_micros();
}
inline void PasswordSpecificsData_Notes_Note::_internal_set_date_created_windows_epoch_micros(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  date_created_windows_epoch_micros_ = value;
}
inline void PasswordSpecificsData_Notes_Note::set_date_created_windows_epoch_micros(int64_t value) {
  _internal_set_date_created_windows_epoch_micros(value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.Notes.Note.date_created_windows_epoch_micros)
}

// optional bool hide_by_default = 4;
inline bool PasswordSpecificsData_Notes_Note::_internal_has_hide_by_default() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PasswordSpecificsData_Notes_Note::has_hide_by_default() const {
  return _internal_has_hide_by_default();
}
inline void PasswordSpecificsData_Notes_Note::clear_hide_by_default() {
  hide_by_default_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PasswordSpecificsData_Notes_Note::_internal_hide_by_default() const {
  return hide_by_default_;
}
inline bool PasswordSpecificsData_Notes_Note::hide_by_default() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.Notes.Note.hide_by_default)
  return _internal_hide_by_default();
}
inline void PasswordSpecificsData_Notes_Note::_internal_set_hide_by_default(bool value) {
  _has_bits_[0] |= 0x00000008u;
  hide_by_default_ = value;
}
inline void PasswordSpecificsData_Notes_Note::set_hide_by_default(bool value) {
  _internal_set_hide_by_default(value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.Notes.Note.hide_by_default)
}

// -------------------------------------------------------------------

// PasswordSpecificsData_Notes

// repeated .sync_pb.PasswordSpecificsData.Notes.Note note = 1;
inline int PasswordSpecificsData_Notes::_internal_note_size() const {
  return note_.size();
}
inline int PasswordSpecificsData_Notes::note_size() const {
  return _internal_note_size();
}
inline void PasswordSpecificsData_Notes::clear_note() {
  note_.Clear();
}
inline ::sync_pb::PasswordSpecificsData_Notes_Note* PasswordSpecificsData_Notes::mutable_note(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.Notes.note)
  return note_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::PasswordSpecificsData_Notes_Note >*
PasswordSpecificsData_Notes::mutable_note() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.PasswordSpecificsData.Notes.note)
  return &note_;
}
inline const ::sync_pb::PasswordSpecificsData_Notes_Note& PasswordSpecificsData_Notes::_internal_note(int index) const {
  return note_.Get(index);
}
inline const ::sync_pb::PasswordSpecificsData_Notes_Note& PasswordSpecificsData_Notes::note(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.Notes.note)
  return _internal_note(index);
}
inline ::sync_pb::PasswordSpecificsData_Notes_Note* PasswordSpecificsData_Notes::_internal_add_note() {
  return note_.Add();
}
inline ::sync_pb::PasswordSpecificsData_Notes_Note* PasswordSpecificsData_Notes::add_note() {
  ::sync_pb::PasswordSpecificsData_Notes_Note* _add = _internal_add_note();
  // @@protoc_insertion_point(field_add:sync_pb.PasswordSpecificsData.Notes.note)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::PasswordSpecificsData_Notes_Note >&
PasswordSpecificsData_Notes::note() const {
  // @@protoc_insertion_point(field_list:sync_pb.PasswordSpecificsData.Notes.note)
  return note_;
}

// -------------------------------------------------------------------

// PasswordSpecificsData

// optional int32 scheme = 1;
inline bool PasswordSpecificsData::_internal_has_scheme() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PasswordSpecificsData::has_scheme() const {
  return _internal_has_scheme();
}
inline void PasswordSpecificsData::clear_scheme() {
  scheme_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline int32_t PasswordSpecificsData::_internal_scheme() const {
  return scheme_;
}
inline int32_t PasswordSpecificsData::scheme() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.scheme)
  return _internal_scheme();
}
inline void PasswordSpecificsData::_internal_set_scheme(int32_t value) {
  _has_bits_[0] |= 0x00001000u;
  scheme_ = value;
}
inline void PasswordSpecificsData::set_scheme(int32_t value) {
  _internal_set_scheme(value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.scheme)
}

// optional string signon_realm = 2;
inline bool PasswordSpecificsData::_internal_has_signon_realm() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PasswordSpecificsData::has_signon_realm() const {
  return _internal_has_signon_realm();
}
inline void PasswordSpecificsData::clear_signon_realm() {
  signon_realm_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PasswordSpecificsData::signon_realm() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.signon_realm)
  return _internal_signon_realm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasswordSpecificsData::set_signon_realm(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 signon_realm_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.signon_realm)
}
inline std::string* PasswordSpecificsData::mutable_signon_realm() {
  std::string* _s = _internal_mutable_signon_realm();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.signon_realm)
  return _s;
}
inline const std::string& PasswordSpecificsData::_internal_signon_realm() const {
  return signon_realm_.Get();
}
inline void PasswordSpecificsData::_internal_set_signon_realm(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  signon_realm_.Set(value, GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData::_internal_mutable_signon_realm() {
  _has_bits_[0] |= 0x00000001u;
  return signon_realm_.Mutable(GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData::release_signon_realm() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.signon_realm)
  if (!_internal_has_signon_realm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = signon_realm_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signon_realm_.IsDefault()) {
    signon_realm_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PasswordSpecificsData::set_allocated_signon_realm(std::string* signon_realm) {
  if (signon_realm != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signon_realm_.SetAllocated(signon_realm, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signon_realm_.IsDefault()) {
    signon_realm_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.signon_realm)
}

// optional string origin = 3;
inline bool PasswordSpecificsData::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PasswordSpecificsData::has_origin() const {
  return _internal_has_origin();
}
inline void PasswordSpecificsData::clear_origin() {
  origin_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PasswordSpecificsData::origin() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.origin)
  return _internal_origin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasswordSpecificsData::set_origin(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 origin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.origin)
}
inline std::string* PasswordSpecificsData::mutable_origin() {
  std::string* _s = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.origin)
  return _s;
}
inline const std::string& PasswordSpecificsData::_internal_origin() const {
  return origin_.Get();
}
inline void PasswordSpecificsData::_internal_set_origin(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  origin_.Set(value, GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData::_internal_mutable_origin() {
  _has_bits_[0] |= 0x00000002u;
  return origin_.Mutable(GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData::release_origin() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.origin)
  if (!_internal_has_origin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = origin_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (origin_.IsDefault()) {
    origin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PasswordSpecificsData::set_allocated_origin(std::string* origin) {
  if (origin != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  origin_.SetAllocated(origin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (origin_.IsDefault()) {
    origin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.origin)
}

// optional string action = 4;
inline bool PasswordSpecificsData::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PasswordSpecificsData::has_action() const {
  return _internal_has_action();
}
inline void PasswordSpecificsData::clear_action() {
  action_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PasswordSpecificsData::action() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasswordSpecificsData::set_action(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.action)
}
inline std::string* PasswordSpecificsData::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.action)
  return _s;
}
inline const std::string& PasswordSpecificsData::_internal_action() const {
  return action_.Get();
}
inline void PasswordSpecificsData::_internal_set_action(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  action_.Set(value, GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData::_internal_mutable_action() {
  _has_bits_[0] |= 0x00000004u;
  return action_.Mutable(GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData::release_action() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.action)
  if (!_internal_has_action()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = action_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault()) {
    action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PasswordSpecificsData::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault()) {
    action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.action)
}

// optional string username_element = 5;
inline bool PasswordSpecificsData::_internal_has_username_element() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PasswordSpecificsData::has_username_element() const {
  return _internal_has_username_element();
}
inline void PasswordSpecificsData::clear_username_element() {
  username_element_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PasswordSpecificsData::username_element() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.username_element)
  return _internal_username_element();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasswordSpecificsData::set_username_element(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 username_element_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.username_element)
}
inline std::string* PasswordSpecificsData::mutable_username_element() {
  std::string* _s = _internal_mutable_username_element();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.username_element)
  return _s;
}
inline const std::string& PasswordSpecificsData::_internal_username_element() const {
  return username_element_.Get();
}
inline void PasswordSpecificsData::_internal_set_username_element(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  username_element_.Set(value, GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData::_internal_mutable_username_element() {
  _has_bits_[0] |= 0x00000008u;
  return username_element_.Mutable(GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData::release_username_element() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.username_element)
  if (!_internal_has_username_element()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = username_element_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_element_.IsDefault()) {
    username_element_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PasswordSpecificsData::set_allocated_username_element(std::string* username_element) {
  if (username_element != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  username_element_.SetAllocated(username_element, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_element_.IsDefault()) {
    username_element_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.username_element)
}

// optional string username_value = 6;
inline bool PasswordSpecificsData::_internal_has_username_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PasswordSpecificsData::has_username_value() const {
  return _internal_has_username_value();
}
inline void PasswordSpecificsData::clear_username_value() {
  username_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PasswordSpecificsData::username_value() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.username_value)
  return _internal_username_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasswordSpecificsData::set_username_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 username_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.username_value)
}
inline std::string* PasswordSpecificsData::mutable_username_value() {
  std::string* _s = _internal_mutable_username_value();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.username_value)
  return _s;
}
inline const std::string& PasswordSpecificsData::_internal_username_value() const {
  return username_value_.Get();
}
inline void PasswordSpecificsData::_internal_set_username_value(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  username_value_.Set(value, GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData::_internal_mutable_username_value() {
  _has_bits_[0] |= 0x00000010u;
  return username_value_.Mutable(GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData::release_username_value() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.username_value)
  if (!_internal_has_username_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = username_value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_value_.IsDefault()) {
    username_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PasswordSpecificsData::set_allocated_username_value(std::string* username_value) {
  if (username_value != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  username_value_.SetAllocated(username_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_value_.IsDefault()) {
    username_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.username_value)
}

// optional string password_element = 7;
inline bool PasswordSpecificsData::_internal_has_password_element() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PasswordSpecificsData::has_password_element() const {
  return _internal_has_password_element();
}
inline void PasswordSpecificsData::clear_password_element() {
  password_element_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& PasswordSpecificsData::password_element() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.password_element)
  return _internal_password_element();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasswordSpecificsData::set_password_element(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 password_element_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.password_element)
}
inline std::string* PasswordSpecificsData::mutable_password_element() {
  std::string* _s = _internal_mutable_password_element();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.password_element)
  return _s;
}
inline const std::string& PasswordSpecificsData::_internal_password_element() const {
  return password_element_.Get();
}
inline void PasswordSpecificsData::_internal_set_password_element(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  password_element_.Set(value, GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData::_internal_mutable_password_element() {
  _has_bits_[0] |= 0x00000020u;
  return password_element_.Mutable(GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData::release_password_element() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.password_element)
  if (!_internal_has_password_element()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = password_element_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_element_.IsDefault()) {
    password_element_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PasswordSpecificsData::set_allocated_password_element(std::string* password_element) {
  if (password_element != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  password_element_.SetAllocated(password_element, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_element_.IsDefault()) {
    password_element_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.password_element)
}

// optional string password_value = 8;
inline bool PasswordSpecificsData::_internal_has_password_value() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PasswordSpecificsData::has_password_value() const {
  return _internal_has_password_value();
}
inline void PasswordSpecificsData::clear_password_value() {
  password_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& PasswordSpecificsData::password_value() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.password_value)
  return _internal_password_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasswordSpecificsData::set_password_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 password_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.password_value)
}
inline std::string* PasswordSpecificsData::mutable_password_value() {
  std::string* _s = _internal_mutable_password_value();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.password_value)
  return _s;
}
inline const std::string& PasswordSpecificsData::_internal_password_value() const {
  return password_value_.Get();
}
inline void PasswordSpecificsData::_internal_set_password_value(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  password_value_.Set(value, GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData::_internal_mutable_password_value() {
  _has_bits_[0] |= 0x00000040u;
  return password_value_.Mutable(GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData::release_password_value() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.password_value)
  if (!_internal_has_password_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = password_value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_value_.IsDefault()) {
    password_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PasswordSpecificsData::set_allocated_password_value(std::string* password_value) {
  if (password_value != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  password_value_.SetAllocated(password_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_value_.IsDefault()) {
    password_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.password_value)
}

// optional bool ssl_valid = 9 [deprecated = true];
inline bool PasswordSpecificsData::_internal_has_ssl_valid() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool PasswordSpecificsData::has_ssl_valid() const {
  return _internal_has_ssl_valid();
}
inline void PasswordSpecificsData::clear_ssl_valid() {
  ssl_valid_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool PasswordSpecificsData::_internal_ssl_valid() const {
  return ssl_valid_;
}
inline bool PasswordSpecificsData::ssl_valid() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.ssl_valid)
  return _internal_ssl_valid();
}
inline void PasswordSpecificsData::_internal_set_ssl_valid(bool value) {
  _has_bits_[0] |= 0x00002000u;
  ssl_valid_ = value;
}
inline void PasswordSpecificsData::set_ssl_valid(bool value) {
  _internal_set_ssl_valid(value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.ssl_valid)
}

// optional bool preferred = 10 [deprecated = true];
inline bool PasswordSpecificsData::_internal_has_preferred() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool PasswordSpecificsData::has_preferred() const {
  return _internal_has_preferred();
}
inline void PasswordSpecificsData::clear_preferred() {
  preferred_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool PasswordSpecificsData::_internal_preferred() const {
  return preferred_;
}
inline bool PasswordSpecificsData::preferred() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.preferred)
  return _internal_preferred();
}
inline void PasswordSpecificsData::_internal_set_preferred(bool value) {
  _has_bits_[0] |= 0x00004000u;
  preferred_ = value;
}
inline void PasswordSpecificsData::set_preferred(bool value) {
  _internal_set_preferred(value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.preferred)
}

// optional int64 date_created = 11;
inline bool PasswordSpecificsData::_internal_has_date_created() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool PasswordSpecificsData::has_date_created() const {
  return _internal_has_date_created();
}
inline void PasswordSpecificsData::clear_date_created() {
  date_created_ = int64_t{0};
  _has_bits_[0] &= ~0x00010000u;
}
inline int64_t PasswordSpecificsData::_internal_date_created() const {
  return date_created_;
}
inline int64_t PasswordSpecificsData::date_created() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.date_created)
  return _internal_date_created();
}
inline void PasswordSpecificsData::_internal_set_date_created(int64_t value) {
  _has_bits_[0] |= 0x00010000u;
  date_created_ = value;
}
inline void PasswordSpecificsData::set_date_created(int64_t value) {
  _internal_set_date_created(value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.date_created)
}

// optional bool blacklisted = 12;
inline bool PasswordSpecificsData::_internal_has_blacklisted() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool PasswordSpecificsData::has_blacklisted() const {
  return _internal_has_blacklisted();
}
inline void PasswordSpecificsData::clear_blacklisted() {
  blacklisted_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool PasswordSpecificsData::_internal_blacklisted() const {
  return blacklisted_;
}
inline bool PasswordSpecificsData::blacklisted() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.blacklisted)
  return _internal_blacklisted();
}
inline void PasswordSpecificsData::_internal_set_blacklisted(bool value) {
  _has_bits_[0] |= 0x00008000u;
  blacklisted_ = value;
}
inline void PasswordSpecificsData::set_blacklisted(bool value) {
  _internal_set_blacklisted(value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.blacklisted)
}

// optional int32 type = 13;
inline bool PasswordSpecificsData::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool PasswordSpecificsData::has_type() const {
  return _internal_has_type();
}
inline void PasswordSpecificsData::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline int32_t PasswordSpecificsData::_internal_type() const {
  return type_;
}
inline int32_t PasswordSpecificsData::type() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.type)
  return _internal_type();
}
inline void PasswordSpecificsData::_internal_set_type(int32_t value) {
  _has_bits_[0] |= 0x00020000u;
  type_ = value;
}
inline void PasswordSpecificsData::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.type)
}

// optional int32 times_used = 14;
inline bool PasswordSpecificsData::_internal_has_times_used() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool PasswordSpecificsData::has_times_used() const {
  return _internal_has_times_used();
}
inline void PasswordSpecificsData::clear_times_used() {
  times_used_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline int32_t PasswordSpecificsData::_internal_times_used() const {
  return times_used_;
}
inline int32_t PasswordSpecificsData::times_used() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.times_used)
  return _internal_times_used();
}
inline void PasswordSpecificsData::_internal_set_times_used(int32_t value) {
  _has_bits_[0] |= 0x00040000u;
  times_used_ = value;
}
inline void PasswordSpecificsData::set_times_used(int32_t value) {
  _internal_set_times_used(value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.times_used)
}

// optional string display_name = 15;
inline bool PasswordSpecificsData::_internal_has_display_name() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PasswordSpecificsData::has_display_name() const {
  return _internal_has_display_name();
}
inline void PasswordSpecificsData::clear_display_name() {
  display_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& PasswordSpecificsData::display_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasswordSpecificsData::set_display_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.display_name)
}
inline std::string* PasswordSpecificsData::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.display_name)
  return _s;
}
inline const std::string& PasswordSpecificsData::_internal_display_name() const {
  return display_name_.Get();
}
inline void PasswordSpecificsData::_internal_set_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData::_internal_mutable_display_name() {
  _has_bits_[0] |= 0x00000080u;
  return display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData::release_display_name() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.display_name)
  if (!_internal_has_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = display_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault()) {
    display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PasswordSpecificsData::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault()) {
    display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.display_name)
}

// optional string avatar_url = 16;
inline bool PasswordSpecificsData::_internal_has_avatar_url() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PasswordSpecificsData::has_avatar_url() const {
  return _internal_has_avatar_url();
}
inline void PasswordSpecificsData::clear_avatar_url() {
  avatar_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& PasswordSpecificsData::avatar_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.avatar_url)
  return _internal_avatar_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasswordSpecificsData::set_avatar_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000100u;
 avatar_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.avatar_url)
}
inline std::string* PasswordSpecificsData::mutable_avatar_url() {
  std::string* _s = _internal_mutable_avatar_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.avatar_url)
  return _s;
}
inline const std::string& PasswordSpecificsData::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void PasswordSpecificsData::_internal_set_avatar_url(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  avatar_url_.Set(value, GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData::_internal_mutable_avatar_url() {
  _has_bits_[0] |= 0x00000100u;
  return avatar_url_.Mutable(GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData::release_avatar_url() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.avatar_url)
  if (!_internal_has_avatar_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  auto* p = avatar_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (avatar_url_.IsDefault()) {
    avatar_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PasswordSpecificsData::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  avatar_url_.SetAllocated(avatar_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (avatar_url_.IsDefault()) {
    avatar_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.avatar_url)
}

// optional string federation_url = 17;
inline bool PasswordSpecificsData::_internal_has_federation_url() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PasswordSpecificsData::has_federation_url() const {
  return _internal_has_federation_url();
}
inline void PasswordSpecificsData::clear_federation_url() {
  federation_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& PasswordSpecificsData::federation_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.federation_url)
  return _internal_federation_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasswordSpecificsData::set_federation_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000200u;
 federation_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.federation_url)
}
inline std::string* PasswordSpecificsData::mutable_federation_url() {
  std::string* _s = _internal_mutable_federation_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.federation_url)
  return _s;
}
inline const std::string& PasswordSpecificsData::_internal_federation_url() const {
  return federation_url_.Get();
}
inline void PasswordSpecificsData::_internal_set_federation_url(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  federation_url_.Set(value, GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData::_internal_mutable_federation_url() {
  _has_bits_[0] |= 0x00000200u;
  return federation_url_.Mutable(GetArenaForAllocation());
}
inline std::string* PasswordSpecificsData::release_federation_url() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.federation_url)
  if (!_internal_has_federation_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  auto* p = federation_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (federation_url_.IsDefault()) {
    federation_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PasswordSpecificsData::set_allocated_federation_url(std::string* federation_url) {
  if (federation_url != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  federation_url_.SetAllocated(federation_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (federation_url_.IsDefault()) {
    federation_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.federation_url)
}

// optional int64 date_last_used = 18;
inline bool PasswordSpecificsData::_internal_has_date_last_used() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool PasswordSpecificsData::has_date_last_used() const {
  return _internal_has_date_last_used();
}
inline void PasswordSpecificsData::clear_date_last_used() {
  date_last_used_ = int64_t{0};
  _has_bits_[0] &= ~0x00080000u;
}
inline int64_t PasswordSpecificsData::_internal_date_last_used() const {
  return date_last_used_;
}
inline int64_t PasswordSpecificsData::date_last_used() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.date_last_used)
  return _internal_date_last_used();
}
inline void PasswordSpecificsData::_internal_set_date_last_used(int64_t value) {
  _has_bits_[0] |= 0x00080000u;
  date_last_used_ = value;
}
inline void PasswordSpecificsData::set_date_last_used(int64_t value) {
  _internal_set_date_last_used(value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.date_last_used)
}

// optional .sync_pb.PasswordSpecificsData.PasswordIssues password_issues = 19;
inline bool PasswordSpecificsData::_internal_has_password_issues() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || password_issues_ != nullptr);
  return value;
}
inline bool PasswordSpecificsData::has_password_issues() const {
  return _internal_has_password_issues();
}
inline void PasswordSpecificsData::clear_password_issues() {
  if (password_issues_ != nullptr) password_issues_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::sync_pb::PasswordSpecificsData_PasswordIssues& PasswordSpecificsData::_internal_password_issues() const {
  const ::sync_pb::PasswordSpecificsData_PasswordIssues* p = password_issues_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::PasswordSpecificsData_PasswordIssues&>(
      ::sync_pb::_PasswordSpecificsData_PasswordIssues_default_instance_);
}
inline const ::sync_pb::PasswordSpecificsData_PasswordIssues& PasswordSpecificsData::password_issues() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.password_issues)
  return _internal_password_issues();
}
inline void PasswordSpecificsData::unsafe_arena_set_allocated_password_issues(
    ::sync_pb::PasswordSpecificsData_PasswordIssues* password_issues) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_issues_);
  }
  password_issues_ = password_issues;
  if (password_issues) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.PasswordSpecificsData.password_issues)
}
inline ::sync_pb::PasswordSpecificsData_PasswordIssues* PasswordSpecificsData::release_password_issues() {
  _has_bits_[0] &= ~0x00000400u;
  ::sync_pb::PasswordSpecificsData_PasswordIssues* temp = password_issues_;
  password_issues_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::PasswordSpecificsData_PasswordIssues* PasswordSpecificsData::unsafe_arena_release_password_issues() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.password_issues)
  _has_bits_[0] &= ~0x00000400u;
  ::sync_pb::PasswordSpecificsData_PasswordIssues* temp = password_issues_;
  password_issues_ = nullptr;
  return temp;
}
inline ::sync_pb::PasswordSpecificsData_PasswordIssues* PasswordSpecificsData::_internal_mutable_password_issues() {
  _has_bits_[0] |= 0x00000400u;
  if (password_issues_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::PasswordSpecificsData_PasswordIssues>(GetArenaForAllocation());
    password_issues_ = p;
  }
  return password_issues_;
}
inline ::sync_pb::PasswordSpecificsData_PasswordIssues* PasswordSpecificsData::mutable_password_issues() {
  ::sync_pb::PasswordSpecificsData_PasswordIssues* _msg = _internal_mutable_password_issues();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.password_issues)
  return _msg;
}
inline void PasswordSpecificsData::set_allocated_password_issues(::sync_pb::PasswordSpecificsData_PasswordIssues* password_issues) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete password_issues_;
  }
  if (password_issues) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(password_issues);
    if (message_arena != submessage_arena) {
      password_issues = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, password_issues, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  password_issues_ = password_issues;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.password_issues)
}

// optional int64 date_password_modified_windows_epoch_micros = 20;
inline bool PasswordSpecificsData::_internal_has_date_password_modified_windows_epoch_micros() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool PasswordSpecificsData::has_date_password_modified_windows_epoch_micros() const {
  return _internal_has_date_password_modified_windows_epoch_micros();
}
inline void PasswordSpecificsData::clear_date_password_modified_windows_epoch_micros() {
  date_password_modified_windows_epoch_micros_ = int64_t{0};
  _has_bits_[0] &= ~0x00100000u;
}
inline int64_t PasswordSpecificsData::_internal_date_password_modified_windows_epoch_micros() const {
  return date_password_modified_windows_epoch_micros_;
}
inline int64_t PasswordSpecificsData::date_password_modified_windows_epoch_micros() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.date_password_modified_windows_epoch_micros)
  return _internal_date_password_modified_windows_epoch_micros();
}
inline void PasswordSpecificsData::_internal_set_date_password_modified_windows_epoch_micros(int64_t value) {
  _has_bits_[0] |= 0x00100000u;
  date_password_modified_windows_epoch_micros_ = value;
}
inline void PasswordSpecificsData::set_date_password_modified_windows_epoch_micros(int64_t value) {
  _internal_set_date_password_modified_windows_epoch_micros(value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.date_password_modified_windows_epoch_micros)
}

// optional .sync_pb.PasswordSpecificsData.Notes notes = 21;
inline bool PasswordSpecificsData::_internal_has_notes() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || notes_ != nullptr);
  return value;
}
inline bool PasswordSpecificsData::has_notes() const {
  return _internal_has_notes();
}
inline void PasswordSpecificsData::clear_notes() {
  if (notes_ != nullptr) notes_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::sync_pb::PasswordSpecificsData_Notes& PasswordSpecificsData::_internal_notes() const {
  const ::sync_pb::PasswordSpecificsData_Notes* p = notes_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::PasswordSpecificsData_Notes&>(
      ::sync_pb::_PasswordSpecificsData_Notes_default_instance_);
}
inline const ::sync_pb::PasswordSpecificsData_Notes& PasswordSpecificsData::notes() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.notes)
  return _internal_notes();
}
inline void PasswordSpecificsData::unsafe_arena_set_allocated_notes(
    ::sync_pb::PasswordSpecificsData_Notes* notes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(notes_);
  }
  notes_ = notes;
  if (notes) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.PasswordSpecificsData.notes)
}
inline ::sync_pb::PasswordSpecificsData_Notes* PasswordSpecificsData::release_notes() {
  _has_bits_[0] &= ~0x00000800u;
  ::sync_pb::PasswordSpecificsData_Notes* temp = notes_;
  notes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::PasswordSpecificsData_Notes* PasswordSpecificsData::unsafe_arena_release_notes() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.notes)
  _has_bits_[0] &= ~0x00000800u;
  ::sync_pb::PasswordSpecificsData_Notes* temp = notes_;
  notes_ = nullptr;
  return temp;
}
inline ::sync_pb::PasswordSpecificsData_Notes* PasswordSpecificsData::_internal_mutable_notes() {
  _has_bits_[0] |= 0x00000800u;
  if (notes_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::PasswordSpecificsData_Notes>(GetArenaForAllocation());
    notes_ = p;
  }
  return notes_;
}
inline ::sync_pb::PasswordSpecificsData_Notes* PasswordSpecificsData::mutable_notes() {
  ::sync_pb::PasswordSpecificsData_Notes* _msg = _internal_mutable_notes();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.notes)
  return _msg;
}
inline void PasswordSpecificsData::set_allocated_notes(::sync_pb::PasswordSpecificsData_Notes* notes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete notes_;
  }
  if (notes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(notes);
    if (message_arena != submessage_arena) {
      notes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  notes_ = notes;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.notes)
}

// -------------------------------------------------------------------

// PasswordSpecificsMetadata

// optional string url = 1;
inline bool PasswordSpecificsMetadata::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PasswordSpecificsMetadata::has_url() const {
  return _internal_has_url();
}
inline void PasswordSpecificsMetadata::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PasswordSpecificsMetadata::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsMetadata.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasswordSpecificsMetadata::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsMetadata.url)
}
inline std::string* PasswordSpecificsMetadata::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsMetadata.url)
  return _s;
}
inline const std::string& PasswordSpecificsMetadata::_internal_url() const {
  return url_.Get();
}
inline void PasswordSpecificsMetadata::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* PasswordSpecificsMetadata::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* PasswordSpecificsMetadata::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsMetadata.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PasswordSpecificsMetadata::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsMetadata.url)
}

// optional bool blacklisted = 2;
inline bool PasswordSpecificsMetadata::_internal_has_blacklisted() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PasswordSpecificsMetadata::has_blacklisted() const {
  return _internal_has_blacklisted();
}
inline void PasswordSpecificsMetadata::clear_blacklisted() {
  blacklisted_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PasswordSpecificsMetadata::_internal_blacklisted() const {
  return blacklisted_;
}
inline bool PasswordSpecificsMetadata::blacklisted() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsMetadata.blacklisted)
  return _internal_blacklisted();
}
inline void PasswordSpecificsMetadata::_internal_set_blacklisted(bool value) {
  _has_bits_[0] |= 0x00000002u;
  blacklisted_ = value;
}
inline void PasswordSpecificsMetadata::set_blacklisted(bool value) {
  _internal_set_blacklisted(value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsMetadata.blacklisted)
}

// -------------------------------------------------------------------

// PasswordSpecifics

// optional .sync_pb.EncryptedData encrypted = 1;
inline bool PasswordSpecifics::_internal_has_encrypted() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || encrypted_ != nullptr);
  return value;
}
inline bool PasswordSpecifics::has_encrypted() const {
  return _internal_has_encrypted();
}
inline const ::sync_pb::EncryptedData& PasswordSpecifics::_internal_encrypted() const {
  const ::sync_pb::EncryptedData* p = encrypted_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::EncryptedData&>(
      ::sync_pb::_EncryptedData_default_instance_);
}
inline const ::sync_pb::EncryptedData& PasswordSpecifics::encrypted() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecifics.encrypted)
  return _internal_encrypted();
}
inline void PasswordSpecifics::unsafe_arena_set_allocated_encrypted(
    ::sync_pb::EncryptedData* encrypted) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_);
  }
  encrypted_ = encrypted;
  if (encrypted) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.PasswordSpecifics.encrypted)
}
inline ::sync_pb::EncryptedData* PasswordSpecifics::release_encrypted() {
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::EncryptedData* temp = encrypted_;
  encrypted_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::EncryptedData* PasswordSpecifics::unsafe_arena_release_encrypted() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecifics.encrypted)
  _has_bits_[0] &= ~0x00000001u;
  ::sync_pb::EncryptedData* temp = encrypted_;
  encrypted_ = nullptr;
  return temp;
}
inline ::sync_pb::EncryptedData* PasswordSpecifics::_internal_mutable_encrypted() {
  _has_bits_[0] |= 0x00000001u;
  if (encrypted_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::EncryptedData>(GetArenaForAllocation());
    encrypted_ = p;
  }
  return encrypted_;
}
inline ::sync_pb::EncryptedData* PasswordSpecifics::mutable_encrypted() {
  ::sync_pb::EncryptedData* _msg = _internal_mutable_encrypted();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecifics.encrypted)
  return _msg;
}
inline void PasswordSpecifics::set_allocated_encrypted(::sync_pb::EncryptedData* encrypted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_);
  }
  if (encrypted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted));
    if (message_arena != submessage_arena) {
      encrypted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypted, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encrypted_ = encrypted;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecifics.encrypted)
}

// optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;
inline bool PasswordSpecifics::_internal_has_client_only_encrypted_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || client_only_encrypted_data_ != nullptr);
  return value;
}
inline bool PasswordSpecifics::has_client_only_encrypted_data() const {
  return _internal_has_client_only_encrypted_data();
}
inline void PasswordSpecifics::clear_client_only_encrypted_data() {
  if (client_only_encrypted_data_ != nullptr) client_only_encrypted_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sync_pb::PasswordSpecificsData& PasswordSpecifics::_internal_client_only_encrypted_data() const {
  const ::sync_pb::PasswordSpecificsData* p = client_only_encrypted_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::PasswordSpecificsData&>(
      ::sync_pb::_PasswordSpecificsData_default_instance_);
}
inline const ::sync_pb::PasswordSpecificsData& PasswordSpecifics::client_only_encrypted_data() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecifics.client_only_encrypted_data)
  return _internal_client_only_encrypted_data();
}
inline void PasswordSpecifics::unsafe_arena_set_allocated_client_only_encrypted_data(
    ::sync_pb::PasswordSpecificsData* client_only_encrypted_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_only_encrypted_data_);
  }
  client_only_encrypted_data_ = client_only_encrypted_data;
  if (client_only_encrypted_data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.PasswordSpecifics.client_only_encrypted_data)
}
inline ::sync_pb::PasswordSpecificsData* PasswordSpecifics::release_client_only_encrypted_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::PasswordSpecificsData* temp = client_only_encrypted_data_;
  client_only_encrypted_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::PasswordSpecificsData* PasswordSpecifics::unsafe_arena_release_client_only_encrypted_data() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecifics.client_only_encrypted_data)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::PasswordSpecificsData* temp = client_only_encrypted_data_;
  client_only_encrypted_data_ = nullptr;
  return temp;
}
inline ::sync_pb::PasswordSpecificsData* PasswordSpecifics::_internal_mutable_client_only_encrypted_data() {
  _has_bits_[0] |= 0x00000002u;
  if (client_only_encrypted_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::PasswordSpecificsData>(GetArenaForAllocation());
    client_only_encrypted_data_ = p;
  }
  return client_only_encrypted_data_;
}
inline ::sync_pb::PasswordSpecificsData* PasswordSpecifics::mutable_client_only_encrypted_data() {
  ::sync_pb::PasswordSpecificsData* _msg = _internal_mutable_client_only_encrypted_data();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecifics.client_only_encrypted_data)
  return _msg;
}
inline void PasswordSpecifics::set_allocated_client_only_encrypted_data(::sync_pb::PasswordSpecificsData* client_only_encrypted_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete client_only_encrypted_data_;
  }
  if (client_only_encrypted_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(client_only_encrypted_data);
    if (message_arena != submessage_arena) {
      client_only_encrypted_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_only_encrypted_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_only_encrypted_data_ = client_only_encrypted_data;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecifics.client_only_encrypted_data)
}

// optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;
inline bool PasswordSpecifics::_internal_has_unencrypted_metadata() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || unencrypted_metadata_ != nullptr);
  return value;
}
inline bool PasswordSpecifics::has_unencrypted_metadata() const {
  return _internal_has_unencrypted_metadata();
}
inline void PasswordSpecifics::clear_unencrypted_metadata() {
  if (unencrypted_metadata_ != nullptr) unencrypted_metadata_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::PasswordSpecificsMetadata& PasswordSpecifics::_internal_unencrypted_metadata() const {
  const ::sync_pb::PasswordSpecificsMetadata* p = unencrypted_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::PasswordSpecificsMetadata&>(
      ::sync_pb::_PasswordSpecificsMetadata_default_instance_);
}
inline const ::sync_pb::PasswordSpecificsMetadata& PasswordSpecifics::unencrypted_metadata() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecifics.unencrypted_metadata)
  return _internal_unencrypted_metadata();
}
inline void PasswordSpecifics::unsafe_arena_set_allocated_unencrypted_metadata(
    ::sync_pb::PasswordSpecificsMetadata* unencrypted_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unencrypted_metadata_);
  }
  unencrypted_metadata_ = unencrypted_metadata;
  if (unencrypted_metadata) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.PasswordSpecifics.unencrypted_metadata)
}
inline ::sync_pb::PasswordSpecificsMetadata* PasswordSpecifics::release_unencrypted_metadata() {
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::PasswordSpecificsMetadata* temp = unencrypted_metadata_;
  unencrypted_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::PasswordSpecificsMetadata* PasswordSpecifics::unsafe_arena_release_unencrypted_metadata() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecifics.unencrypted_metadata)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::PasswordSpecificsMetadata* temp = unencrypted_metadata_;
  unencrypted_metadata_ = nullptr;
  return temp;
}
inline ::sync_pb::PasswordSpecificsMetadata* PasswordSpecifics::_internal_mutable_unencrypted_metadata() {
  _has_bits_[0] |= 0x00000004u;
  if (unencrypted_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::PasswordSpecificsMetadata>(GetArenaForAllocation());
    unencrypted_metadata_ = p;
  }
  return unencrypted_metadata_;
}
inline ::sync_pb::PasswordSpecificsMetadata* PasswordSpecifics::mutable_unencrypted_metadata() {
  ::sync_pb::PasswordSpecificsMetadata* _msg = _internal_mutable_unencrypted_metadata();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecifics.unencrypted_metadata)
  return _msg;
}
inline void PasswordSpecifics::set_allocated_unencrypted_metadata(::sync_pb::PasswordSpecificsMetadata* unencrypted_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete unencrypted_metadata_;
  }
  if (unencrypted_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unencrypted_metadata);
    if (message_arena != submessage_arena) {
      unencrypted_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unencrypted_metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  unencrypted_metadata_ = unencrypted_metadata;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecifics.unencrypted_metadata)
}

// optional .sync_pb.EncryptedData encrypted_notes_backup = 4;
inline bool PasswordSpecifics::_internal_has_encrypted_notes_backup() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || encrypted_notes_backup_ != nullptr);
  return value;
}
inline bool PasswordSpecifics::has_encrypted_notes_backup() const {
  return _internal_has_encrypted_notes_backup();
}
inline const ::sync_pb::EncryptedData& PasswordSpecifics::_internal_encrypted_notes_backup() const {
  const ::sync_pb::EncryptedData* p = encrypted_notes_backup_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::EncryptedData&>(
      ::sync_pb::_EncryptedData_default_instance_);
}
inline const ::sync_pb::EncryptedData& PasswordSpecifics::encrypted_notes_backup() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecifics.encrypted_notes_backup)
  return _internal_encrypted_notes_backup();
}
inline void PasswordSpecifics::unsafe_arena_set_allocated_encrypted_notes_backup(
    ::sync_pb::EncryptedData* encrypted_notes_backup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_notes_backup_);
  }
  encrypted_notes_backup_ = encrypted_notes_backup;
  if (encrypted_notes_backup) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.PasswordSpecifics.encrypted_notes_backup)
}
inline ::sync_pb::EncryptedData* PasswordSpecifics::release_encrypted_notes_backup() {
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::EncryptedData* temp = encrypted_notes_backup_;
  encrypted_notes_backup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::EncryptedData* PasswordSpecifics::unsafe_arena_release_encrypted_notes_backup() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecifics.encrypted_notes_backup)
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::EncryptedData* temp = encrypted_notes_backup_;
  encrypted_notes_backup_ = nullptr;
  return temp;
}
inline ::sync_pb::EncryptedData* PasswordSpecifics::_internal_mutable_encrypted_notes_backup() {
  _has_bits_[0] |= 0x00000008u;
  if (encrypted_notes_backup_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::EncryptedData>(GetArenaForAllocation());
    encrypted_notes_backup_ = p;
  }
  return encrypted_notes_backup_;
}
inline ::sync_pb::EncryptedData* PasswordSpecifics::mutable_encrypted_notes_backup() {
  ::sync_pb::EncryptedData* _msg = _internal_mutable_encrypted_notes_backup();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecifics.encrypted_notes_backup)
  return _msg;
}
inline void PasswordSpecifics::set_allocated_encrypted_notes_backup(::sync_pb::EncryptedData* encrypted_notes_backup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_notes_backup_);
  }
  if (encrypted_notes_backup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_notes_backup));
    if (message_arena != submessage_arena) {
      encrypted_notes_backup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypted_notes_backup, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  encrypted_notes_backup_ = encrypted_notes_backup;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecifics.encrypted_notes_backup)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::PasswordSpecificsData_Scheme> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fpassword_5fspecifics_2eproto
