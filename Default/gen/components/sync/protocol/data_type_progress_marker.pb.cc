// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/data_type_progress_marker.proto

#include "components/sync/protocol/data_type_progress_marker.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR DataTypeProgressMarker::DataTypeProgressMarker(
    ::_pbi::ConstantInitialized)
  : token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , get_update_triggers_(nullptr)
  , gc_directive_(nullptr)
  , data_type_id_(0){}
struct DataTypeProgressMarkerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataTypeProgressMarkerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataTypeProgressMarkerDefaultTypeInternal() {}
  union {
    DataTypeProgressMarker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataTypeProgressMarkerDefaultTypeInternal _DataTypeProgressMarker_default_instance_;
PROTOBUF_CONSTEXPR DataTypeContext::DataTypeContext(
    ::_pbi::ConstantInitialized)
  : context_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , version_(int64_t{0})
  , data_type_id_(0){}
struct DataTypeContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataTypeContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataTypeContextDefaultTypeInternal() {}
  union {
    DataTypeContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataTypeContextDefaultTypeInternal _DataTypeContext_default_instance_;
PROTOBUF_CONSTEXPR GarbageCollectionDirective::GarbageCollectionDirective(
    ::_pbi::ConstantInitialized)
  : version_watermark_(int64_t{0})
  , type_(0)

  , age_watermark_in_days_(0){}
struct GarbageCollectionDirectiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GarbageCollectionDirectiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GarbageCollectionDirectiveDefaultTypeInternal() {}
  union {
    GarbageCollectionDirective _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GarbageCollectionDirectiveDefaultTypeInternal _GarbageCollectionDirective_default_instance_;
PROTOBUF_CONSTEXPR GetUpdateTriggers::GetUpdateTriggers(
    ::_pbi::ConstantInitialized)
  : notification_hint_()
  , local_modification_nudges_(int64_t{0})
  , datatype_refresh_nudges_(int64_t{0})
  , client_dropped_hints_(false)
  , invalidations_out_of_sync_(false)
  , server_dropped_hints_(false)
  , initial_sync_in_progress_(false)
  , sync_for_resolve_conflict_in_progress_(false){}
struct GetUpdateTriggersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUpdateTriggersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUpdateTriggersDefaultTypeInternal() {}
  union {
    GetUpdateTriggers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUpdateTriggersDefaultTypeInternal _GetUpdateTriggers_default_instance_;
}  // namespace sync_pb
namespace sync_pb {
bool GarbageCollectionDirective_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GarbageCollectionDirective_Type_strings[4] = {};

static const char GarbageCollectionDirective_Type_names[] =
  "AGE_WATERMARK"
  "DEPRECATED_MAX_ITEM_COUNT"
  "UNKNOWN"
  "VERSION_WATERMARK";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GarbageCollectionDirective_Type_entries[] = {
  { {GarbageCollectionDirective_Type_names + 0, 13}, 2 },
  { {GarbageCollectionDirective_Type_names + 13, 25}, 3 },
  { {GarbageCollectionDirective_Type_names + 38, 7}, 0 },
  { {GarbageCollectionDirective_Type_names + 45, 17}, 1 },
};

static const int GarbageCollectionDirective_Type_entries_by_number[] = {
  2, // 0 -> UNKNOWN
  3, // 1 -> VERSION_WATERMARK
  0, // 2 -> AGE_WATERMARK
  1, // 3 -> DEPRECATED_MAX_ITEM_COUNT
};

const std::string& GarbageCollectionDirective_Type_Name(
    GarbageCollectionDirective_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GarbageCollectionDirective_Type_entries,
          GarbageCollectionDirective_Type_entries_by_number,
          4, GarbageCollectionDirective_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GarbageCollectionDirective_Type_entries,
      GarbageCollectionDirective_Type_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GarbageCollectionDirective_Type_strings[idx].get();
}
bool GarbageCollectionDirective_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GarbageCollectionDirective_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GarbageCollectionDirective_Type_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<GarbageCollectionDirective_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GarbageCollectionDirective_Type GarbageCollectionDirective::UNKNOWN;
constexpr GarbageCollectionDirective_Type GarbageCollectionDirective::VERSION_WATERMARK;
constexpr GarbageCollectionDirective_Type GarbageCollectionDirective::AGE_WATERMARK;
constexpr GarbageCollectionDirective_Type GarbageCollectionDirective::DEPRECATED_MAX_ITEM_COUNT;
constexpr GarbageCollectionDirective_Type GarbageCollectionDirective::Type_MIN;
constexpr GarbageCollectionDirective_Type GarbageCollectionDirective::Type_MAX;
constexpr int GarbageCollectionDirective::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class DataTypeProgressMarker::_Internal {
 public:
  using HasBits = decltype(std::declval<DataTypeProgressMarker>()._has_bits_);
  static void set_has_data_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::GetUpdateTriggers& get_update_triggers(const DataTypeProgressMarker* msg);
  static void set_has_get_update_triggers(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::GarbageCollectionDirective& gc_directive(const DataTypeProgressMarker* msg);
  static void set_has_gc_directive(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sync_pb::GetUpdateTriggers&
DataTypeProgressMarker::_Internal::get_update_triggers(const DataTypeProgressMarker* msg) {
  return *msg->get_update_triggers_;
}
const ::sync_pb::GarbageCollectionDirective&
DataTypeProgressMarker::_Internal::gc_directive(const DataTypeProgressMarker* msg) {
  return *msg->gc_directive_;
}
DataTypeProgressMarker::DataTypeProgressMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.DataTypeProgressMarker)
}
DataTypeProgressMarker::DataTypeProgressMarker(const DataTypeProgressMarker& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    token_.Set(from._internal_token(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_get_update_triggers()) {
    get_update_triggers_ = new ::sync_pb::GetUpdateTriggers(*from.get_update_triggers_);
  } else {
    get_update_triggers_ = nullptr;
  }
  if (from._internal_has_gc_directive()) {
    gc_directive_ = new ::sync_pb::GarbageCollectionDirective(*from.gc_directive_);
  } else {
    gc_directive_ = nullptr;
  }
  data_type_id_ = from.data_type_id_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.DataTypeProgressMarker)
}

inline void DataTypeProgressMarker::SharedCtor() {
token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&get_update_triggers_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_type_id_) -
    reinterpret_cast<char*>(&get_update_triggers_)) + sizeof(data_type_id_));
}

DataTypeProgressMarker::~DataTypeProgressMarker() {
  // @@protoc_insertion_point(destructor:sync_pb.DataTypeProgressMarker)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataTypeProgressMarker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.Destroy();
  if (this != internal_default_instance()) delete get_update_triggers_;
  if (this != internal_default_instance()) delete gc_directive_;
}

void DataTypeProgressMarker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataTypeProgressMarker::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.DataTypeProgressMarker)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(get_update_triggers_ != nullptr);
      get_update_triggers_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(gc_directive_ != nullptr);
      gc_directive_->Clear();
    }
  }
  data_type_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DataTypeProgressMarker::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 data_type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_data_type_id(&has_bits);
          data_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_update_triggers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.GarbageCollectionDirective gc_directive = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_gc_directive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataTypeProgressMarker::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.DataTypeProgressMarker)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 data_type_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_data_type_id(), target);
  }

  // optional bytes token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_token(), target);
  }

  // optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::get_update_triggers(this),
        _Internal::get_update_triggers(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.GarbageCollectionDirective gc_directive = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::gc_directive(this),
        _Internal::gc_directive(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.DataTypeProgressMarker)
  return target;
}

size_t DataTypeProgressMarker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.DataTypeProgressMarker)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_token());
    }

    // optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *get_update_triggers_);
    }

    // optional .sync_pb.GarbageCollectionDirective gc_directive = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gc_directive_);
    }

    // optional int32 data_type_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_type_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataTypeProgressMarker::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DataTypeProgressMarker*>(
      &from));
}

void DataTypeProgressMarker::MergeFrom(const DataTypeProgressMarker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.DataTypeProgressMarker)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_get_update_triggers()->::sync_pb::GetUpdateTriggers::MergeFrom(from._internal_get_update_triggers());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_gc_directive()->::sync_pb::GarbageCollectionDirective::MergeFrom(from._internal_gc_directive());
    }
    if (cached_has_bits & 0x00000008u) {
      data_type_id_ = from.data_type_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DataTypeProgressMarker::CopyFrom(const DataTypeProgressMarker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.DataTypeProgressMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTypeProgressMarker::IsInitialized() const {
  return true;
}

void DataTypeProgressMarker::InternalSwap(DataTypeProgressMarker* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataTypeProgressMarker, data_type_id_)
      + sizeof(DataTypeProgressMarker::data_type_id_)
      - PROTOBUF_FIELD_OFFSET(DataTypeProgressMarker, get_update_triggers_)>(
          reinterpret_cast<char*>(&get_update_triggers_),
          reinterpret_cast<char*>(&other->get_update_triggers_));
}

std::string DataTypeProgressMarker::GetTypeName() const {
  return "sync_pb.DataTypeProgressMarker";
}


// ===================================================================

class DataTypeContext::_Internal {
 public:
  using HasBits = decltype(std::declval<DataTypeContext>()._has_bits_);
  static void set_has_data_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DataTypeContext::DataTypeContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.DataTypeContext)
}
DataTypeContext::DataTypeContext(const DataTypeContext& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  context_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    context_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_context()) {
    context_.Set(from._internal_context(), 
      GetArenaForAllocation());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_type_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(data_type_id_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.DataTypeContext)
}

inline void DataTypeContext::SharedCtor() {
context_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  context_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_type_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(data_type_id_));
}

DataTypeContext::~DataTypeContext() {
  // @@protoc_insertion_point(destructor:sync_pb.DataTypeContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataTypeContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  context_.Destroy();
}

void DataTypeContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataTypeContext::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.DataTypeContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    context_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_type_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(data_type_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DataTypeContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 data_type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_data_type_id(&has_bits);
          data_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_context();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataTypeContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.DataTypeContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 data_type_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_data_type_id(), target);
  }

  // optional bytes context = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_context(), target);
  }

  // optional int64 version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.DataTypeContext)
  return target;
}

size_t DataTypeContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.DataTypeContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes context = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_context());
    }

    // optional int64 version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version());
    }

    // optional int32 data_type_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_type_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataTypeContext::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DataTypeContext*>(
      &from));
}

void DataTypeContext::MergeFrom(const DataTypeContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.DataTypeContext)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_context(from._internal_context());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      data_type_id_ = from.data_type_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DataTypeContext::CopyFrom(const DataTypeContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.DataTypeContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTypeContext::IsInitialized() const {
  return true;
}

void DataTypeContext::InternalSwap(DataTypeContext* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &context_, lhs_arena,
      &other->context_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataTypeContext, data_type_id_)
      + sizeof(DataTypeContext::data_type_id_)
      - PROTOBUF_FIELD_OFFSET(DataTypeContext, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

std::string DataTypeContext::GetTypeName() const {
  return "sync_pb.DataTypeContext";
}


// ===================================================================

class GarbageCollectionDirective::_Internal {
 public:
  using HasBits = decltype(std::declval<GarbageCollectionDirective>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version_watermark(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_age_watermark_in_days(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GarbageCollectionDirective::GarbageCollectionDirective(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.GarbageCollectionDirective)
}
GarbageCollectionDirective::GarbageCollectionDirective(const GarbageCollectionDirective& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&version_watermark_, &from.version_watermark_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_watermark_in_days_) -
    reinterpret_cast<char*>(&version_watermark_)) + sizeof(age_watermark_in_days_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.GarbageCollectionDirective)
}

inline void GarbageCollectionDirective::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_watermark_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&age_watermark_in_days_) -
    reinterpret_cast<char*>(&version_watermark_)) + sizeof(age_watermark_in_days_));
}

GarbageCollectionDirective::~GarbageCollectionDirective() {
  // @@protoc_insertion_point(destructor:sync_pb.GarbageCollectionDirective)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GarbageCollectionDirective::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GarbageCollectionDirective::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GarbageCollectionDirective::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GarbageCollectionDirective)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&version_watermark_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&age_watermark_in_days_) -
        reinterpret_cast<char*>(&version_watermark_)) + sizeof(age_watermark_in_days_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GarbageCollectionDirective::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.GarbageCollectionDirective.Type type = 1 [default = UNKNOWN];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::GarbageCollectionDirective_Type_IsValid(val))) {
            _internal_set_type(static_cast<::sync_pb::GarbageCollectionDirective_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 version_watermark = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version_watermark(&has_bits);
          version_watermark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 age_watermark_in_days = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_age_watermark_in_days(&has_bits);
          age_watermark_in_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GarbageCollectionDirective::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.GarbageCollectionDirective)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.GarbageCollectionDirective.Type type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional int64 version_watermark = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_version_watermark(), target);
  }

  // optional int32 age_watermark_in_days = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_age_watermark_in_days(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.GarbageCollectionDirective)
  return target;
}

size_t GarbageCollectionDirective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GarbageCollectionDirective)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 version_watermark = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version_watermark());
    }

    // optional .sync_pb.GarbageCollectionDirective.Type type = 1 [default = UNKNOWN];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional int32 age_watermark_in_days = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_age_watermark_in_days());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GarbageCollectionDirective::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GarbageCollectionDirective*>(
      &from));
}

void GarbageCollectionDirective::MergeFrom(const GarbageCollectionDirective& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GarbageCollectionDirective)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      version_watermark_ = from.version_watermark_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      age_watermark_in_days_ = from.age_watermark_in_days_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GarbageCollectionDirective::CopyFrom(const GarbageCollectionDirective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GarbageCollectionDirective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GarbageCollectionDirective::IsInitialized() const {
  return true;
}

void GarbageCollectionDirective::InternalSwap(GarbageCollectionDirective* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GarbageCollectionDirective, age_watermark_in_days_)
      + sizeof(GarbageCollectionDirective::age_watermark_in_days_)
      - PROTOBUF_FIELD_OFFSET(GarbageCollectionDirective, version_watermark_)>(
          reinterpret_cast<char*>(&version_watermark_),
          reinterpret_cast<char*>(&other->version_watermark_));
}

std::string GarbageCollectionDirective::GetTypeName() const {
  return "sync_pb.GarbageCollectionDirective";
}


// ===================================================================

class GetUpdateTriggers::_Internal {
 public:
  using HasBits = decltype(std::declval<GetUpdateTriggers>()._has_bits_);
  static void set_has_client_dropped_hints(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_invalidations_out_of_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_local_modification_nudges(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_datatype_refresh_nudges(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_dropped_hints(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_initial_sync_in_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sync_for_resolve_conflict_in_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

GetUpdateTriggers::GetUpdateTriggers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  notification_hint_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.GetUpdateTriggers)
}
GetUpdateTriggers::GetUpdateTriggers(const GetUpdateTriggers& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      notification_hint_(from.notification_hint_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&local_modification_nudges_, &from.local_modification_nudges_,
    static_cast<size_t>(reinterpret_cast<char*>(&sync_for_resolve_conflict_in_progress_) -
    reinterpret_cast<char*>(&local_modification_nudges_)) + sizeof(sync_for_resolve_conflict_in_progress_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.GetUpdateTriggers)
}

inline void GetUpdateTriggers::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&local_modification_nudges_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sync_for_resolve_conflict_in_progress_) -
    reinterpret_cast<char*>(&local_modification_nudges_)) + sizeof(sync_for_resolve_conflict_in_progress_));
}

GetUpdateTriggers::~GetUpdateTriggers() {
  // @@protoc_insertion_point(destructor:sync_pb.GetUpdateTriggers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUpdateTriggers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetUpdateTriggers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetUpdateTriggers::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.GetUpdateTriggers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notification_hint_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&local_modification_nudges_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sync_for_resolve_conflict_in_progress_) -
        reinterpret_cast<char*>(&local_modification_nudges_)) + sizeof(sync_for_resolve_conflict_in_progress_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetUpdateTriggers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string notification_hint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_notification_hint();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool client_dropped_hints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_dropped_hints(&has_bits);
          client_dropped_hints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool invalidations_out_of_sync = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_invalidations_out_of_sync(&has_bits);
          invalidations_out_of_sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 local_modification_nudges = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_local_modification_nudges(&has_bits);
          local_modification_nudges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 datatype_refresh_nudges = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_datatype_refresh_nudges(&has_bits);
          datatype_refresh_nudges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool server_dropped_hints = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_server_dropped_hints(&has_bits);
          server_dropped_hints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool initial_sync_in_progress = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_initial_sync_in_progress(&has_bits);
          initial_sync_in_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool sync_for_resolve_conflict_in_progress = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_sync_for_resolve_conflict_in_progress(&has_bits);
          sync_for_resolve_conflict_in_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUpdateTriggers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.GetUpdateTriggers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string notification_hint = 1;
  for (int i = 0, n = this->_internal_notification_hint_size(); i < n; i++) {
    const auto& s = this->_internal_notification_hint(i);
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool client_dropped_hints = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_client_dropped_hints(), target);
  }

  // optional bool invalidations_out_of_sync = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_invalidations_out_of_sync(), target);
  }

  // optional int64 local_modification_nudges = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_local_modification_nudges(), target);
  }

  // optional int64 datatype_refresh_nudges = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_datatype_refresh_nudges(), target);
  }

  // optional bool server_dropped_hints = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_server_dropped_hints(), target);
  }

  // optional bool initial_sync_in_progress = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_initial_sync_in_progress(), target);
  }

  // optional bool sync_for_resolve_conflict_in_progress = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_sync_for_resolve_conflict_in_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.GetUpdateTriggers)
  return target;
}

size_t GetUpdateTriggers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.GetUpdateTriggers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string notification_hint = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(notification_hint_.size());
  for (int i = 0, n = notification_hint_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      notification_hint_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int64 local_modification_nudges = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_local_modification_nudges());
    }

    // optional int64 datatype_refresh_nudges = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datatype_refresh_nudges());
    }

    // optional bool client_dropped_hints = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool invalidations_out_of_sync = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool server_dropped_hints = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool initial_sync_in_progress = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool sync_for_resolve_conflict_in_progress = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUpdateTriggers::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetUpdateTriggers*>(
      &from));
}

void GetUpdateTriggers::MergeFrom(const GetUpdateTriggers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GetUpdateTriggers)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  notification_hint_.MergeFrom(from.notification_hint_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      local_modification_nudges_ = from.local_modification_nudges_;
    }
    if (cached_has_bits & 0x00000002u) {
      datatype_refresh_nudges_ = from.datatype_refresh_nudges_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_dropped_hints_ = from.client_dropped_hints_;
    }
    if (cached_has_bits & 0x00000008u) {
      invalidations_out_of_sync_ = from.invalidations_out_of_sync_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_dropped_hints_ = from.server_dropped_hints_;
    }
    if (cached_has_bits & 0x00000020u) {
      initial_sync_in_progress_ = from.initial_sync_in_progress_;
    }
    if (cached_has_bits & 0x00000040u) {
      sync_for_resolve_conflict_in_progress_ = from.sync_for_resolve_conflict_in_progress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetUpdateTriggers::CopyFrom(const GetUpdateTriggers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GetUpdateTriggers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdateTriggers::IsInitialized() const {
  return true;
}

void GetUpdateTriggers::InternalSwap(GetUpdateTriggers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  notification_hint_.InternalSwap(&other->notification_hint_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUpdateTriggers, sync_for_resolve_conflict_in_progress_)
      + sizeof(GetUpdateTriggers::sync_for_resolve_conflict_in_progress_)
      - PROTOBUF_FIELD_OFFSET(GetUpdateTriggers, local_modification_nudges_)>(
          reinterpret_cast<char*>(&local_modification_nudges_),
          reinterpret_cast<char*>(&other->local_modification_nudges_));
}

std::string GetUpdateTriggers::GetTypeName() const {
  return "sync_pb.GetUpdateTriggers";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::DataTypeProgressMarker*
Arena::CreateMaybeMessage< ::sync_pb::DataTypeProgressMarker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::DataTypeProgressMarker >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::DataTypeContext*
Arena::CreateMaybeMessage< ::sync_pb::DataTypeContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::DataTypeContext >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::GarbageCollectionDirective*
Arena::CreateMaybeMessage< ::sync_pb::GarbageCollectionDirective >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::GarbageCollectionDirective >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::GetUpdateTriggers*
Arena::CreateMaybeMessage< ::sync_pb::GetUpdateTriggers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::GetUpdateTriggers >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
