// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/local_trusted_vault.proto

#include "components/sync/protocol/local_trusted_vault.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR LocalTrustedVaultKey::LocalTrustedVaultKey(
    ::_pbi::ConstantInitialized)
  : key_material_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct LocalTrustedVaultKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalTrustedVaultKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalTrustedVaultKeyDefaultTypeInternal() {}
  union {
    LocalTrustedVaultKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalTrustedVaultKeyDefaultTypeInternal _LocalTrustedVaultKey_default_instance_;
PROTOBUF_CONSTEXPR LocalDeviceRegistrationInfo::LocalDeviceRegistrationInfo(
    ::_pbi::ConstantInitialized)
  : private_key_material_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , device_registered_(false)
  , device_registered_version_(0){}
struct LocalDeviceRegistrationInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalDeviceRegistrationInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalDeviceRegistrationInfoDefaultTypeInternal() {}
  union {
    LocalDeviceRegistrationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalDeviceRegistrationInfoDefaultTypeInternal _LocalDeviceRegistrationInfo_default_instance_;
PROTOBUF_CONSTEXPR LocalTrustedVaultDegradedRecoverabilityState::LocalTrustedVaultDegradedRecoverabilityState(
    ::_pbi::ConstantInitialized)
  : last_refresh_time_millis_since_unix_epoch_(int64_t{0})
  , is_recoverability_degraded_(false){}
struct LocalTrustedVaultDegradedRecoverabilityStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalTrustedVaultDegradedRecoverabilityStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalTrustedVaultDegradedRecoverabilityStateDefaultTypeInternal() {}
  union {
    LocalTrustedVaultDegradedRecoverabilityState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalTrustedVaultDegradedRecoverabilityStateDefaultTypeInternal _LocalTrustedVaultDegradedRecoverabilityState_default_instance_;
PROTOBUF_CONSTEXPR LocalTrustedVaultPerUser::LocalTrustedVaultPerUser(
    ::_pbi::ConstantInitialized)
  : vault_key_()
  , gaia_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , local_device_registration_info_(nullptr)
  , degraded_recoverability_state_(nullptr)
  , last_vault_key_version_(0)
  , keys_are_stale_(false)
  , should_delete_keys_when_non_primary_(false)
  , last_failed_request_millis_since_unix_epoch_(int64_t{0}){}
struct LocalTrustedVaultPerUserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalTrustedVaultPerUserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalTrustedVaultPerUserDefaultTypeInternal() {}
  union {
    LocalTrustedVaultPerUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalTrustedVaultPerUserDefaultTypeInternal _LocalTrustedVaultPerUser_default_instance_;
PROTOBUF_CONSTEXPR LocalTrustedVault::LocalTrustedVault(
    ::_pbi::ConstantInitialized)
  : user_()
  , data_version_(0){}
struct LocalTrustedVaultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalTrustedVaultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalTrustedVaultDefaultTypeInternal() {}
  union {
    LocalTrustedVault _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalTrustedVaultDefaultTypeInternal _LocalTrustedVault_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class LocalTrustedVaultKey::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalTrustedVaultKey>()._has_bits_);
  static void set_has_key_material(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LocalTrustedVaultKey::LocalTrustedVaultKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.LocalTrustedVaultKey)
}
LocalTrustedVaultKey::LocalTrustedVaultKey(const LocalTrustedVaultKey& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  key_material_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_material_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key_material()) {
    key_material_.Set(from._internal_key_material(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.LocalTrustedVaultKey)
}

inline void LocalTrustedVaultKey::SharedCtor() {
key_material_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_material_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocalTrustedVaultKey::~LocalTrustedVaultKey() {
  // @@protoc_insertion_point(destructor:sync_pb.LocalTrustedVaultKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalTrustedVaultKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_material_.Destroy();
}

void LocalTrustedVaultKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalTrustedVaultKey::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.LocalTrustedVaultKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_material_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LocalTrustedVaultKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes key_material = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key_material();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalTrustedVaultKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.LocalTrustedVaultKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key_material = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key_material(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.LocalTrustedVaultKey)
  return target;
}

size_t LocalTrustedVaultKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.LocalTrustedVaultKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes key_material = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key_material());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalTrustedVaultKey::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LocalTrustedVaultKey*>(
      &from));
}

void LocalTrustedVaultKey::MergeFrom(const LocalTrustedVaultKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.LocalTrustedVaultKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key_material()) {
    _internal_set_key_material(from._internal_key_material());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LocalTrustedVaultKey::CopyFrom(const LocalTrustedVaultKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.LocalTrustedVaultKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrustedVaultKey::IsInitialized() const {
  return true;
}

void LocalTrustedVaultKey::InternalSwap(LocalTrustedVaultKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_material_, lhs_arena,
      &other->key_material_, rhs_arena
  );
}

std::string LocalTrustedVaultKey::GetTypeName() const {
  return "sync_pb.LocalTrustedVaultKey";
}


// ===================================================================

class LocalDeviceRegistrationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalDeviceRegistrationInfo>()._has_bits_);
  static void set_has_private_key_material(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_device_registered(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_device_registered_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LocalDeviceRegistrationInfo::LocalDeviceRegistrationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.LocalDeviceRegistrationInfo)
}
LocalDeviceRegistrationInfo::LocalDeviceRegistrationInfo(const LocalDeviceRegistrationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  private_key_material_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    private_key_material_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_private_key_material()) {
    private_key_material_.Set(from._internal_private_key_material(), 
      GetArenaForAllocation());
  }
  ::memcpy(&device_registered_, &from.device_registered_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_registered_version_) -
    reinterpret_cast<char*>(&device_registered_)) + sizeof(device_registered_version_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.LocalDeviceRegistrationInfo)
}

inline void LocalDeviceRegistrationInfo::SharedCtor() {
private_key_material_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  private_key_material_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_registered_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&device_registered_version_) -
    reinterpret_cast<char*>(&device_registered_)) + sizeof(device_registered_version_));
}

LocalDeviceRegistrationInfo::~LocalDeviceRegistrationInfo() {
  // @@protoc_insertion_point(destructor:sync_pb.LocalDeviceRegistrationInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalDeviceRegistrationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  private_key_material_.Destroy();
}

void LocalDeviceRegistrationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalDeviceRegistrationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.LocalDeviceRegistrationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    private_key_material_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&device_registered_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&device_registered_version_) -
        reinterpret_cast<char*>(&device_registered_)) + sizeof(device_registered_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LocalDeviceRegistrationInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes private_key_material = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_private_key_material();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool device_registered = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_device_registered(&has_bits);
          device_registered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 device_registered_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_device_registered_version(&has_bits);
          device_registered_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalDeviceRegistrationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.LocalDeviceRegistrationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes private_key_material = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_private_key_material(), target);
  }

  // optional bool device_registered = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_device_registered(), target);
  }

  // optional int32 device_registered_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_device_registered_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.LocalDeviceRegistrationInfo)
  return target;
}

size_t LocalDeviceRegistrationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.LocalDeviceRegistrationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes private_key_material = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_private_key_material());
    }

    // optional bool device_registered = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 device_registered_version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_device_registered_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalDeviceRegistrationInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LocalDeviceRegistrationInfo*>(
      &from));
}

void LocalDeviceRegistrationInfo::MergeFrom(const LocalDeviceRegistrationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.LocalDeviceRegistrationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_private_key_material(from._internal_private_key_material());
    }
    if (cached_has_bits & 0x00000002u) {
      device_registered_ = from.device_registered_;
    }
    if (cached_has_bits & 0x00000004u) {
      device_registered_version_ = from.device_registered_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LocalDeviceRegistrationInfo::CopyFrom(const LocalDeviceRegistrationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.LocalDeviceRegistrationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalDeviceRegistrationInfo::IsInitialized() const {
  return true;
}

void LocalDeviceRegistrationInfo::InternalSwap(LocalDeviceRegistrationInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &private_key_material_, lhs_arena,
      &other->private_key_material_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalDeviceRegistrationInfo, device_registered_version_)
      + sizeof(LocalDeviceRegistrationInfo::device_registered_version_)
      - PROTOBUF_FIELD_OFFSET(LocalDeviceRegistrationInfo, device_registered_)>(
          reinterpret_cast<char*>(&device_registered_),
          reinterpret_cast<char*>(&other->device_registered_));
}

std::string LocalDeviceRegistrationInfo::GetTypeName() const {
  return "sync_pb.LocalDeviceRegistrationInfo";
}


// ===================================================================

class LocalTrustedVaultDegradedRecoverabilityState::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalTrustedVaultDegradedRecoverabilityState>()._has_bits_);
  static void set_has_is_recoverability_degraded(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_refresh_time_millis_since_unix_epoch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LocalTrustedVaultDegradedRecoverabilityState::LocalTrustedVaultDegradedRecoverabilityState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.LocalTrustedVaultDegradedRecoverabilityState)
}
LocalTrustedVaultDegradedRecoverabilityState::LocalTrustedVaultDegradedRecoverabilityState(const LocalTrustedVaultDegradedRecoverabilityState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&last_refresh_time_millis_since_unix_epoch_, &from.last_refresh_time_millis_since_unix_epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_recoverability_degraded_) -
    reinterpret_cast<char*>(&last_refresh_time_millis_since_unix_epoch_)) + sizeof(is_recoverability_degraded_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.LocalTrustedVaultDegradedRecoverabilityState)
}

inline void LocalTrustedVaultDegradedRecoverabilityState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_refresh_time_millis_since_unix_epoch_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_recoverability_degraded_) -
    reinterpret_cast<char*>(&last_refresh_time_millis_since_unix_epoch_)) + sizeof(is_recoverability_degraded_));
}

LocalTrustedVaultDegradedRecoverabilityState::~LocalTrustedVaultDegradedRecoverabilityState() {
  // @@protoc_insertion_point(destructor:sync_pb.LocalTrustedVaultDegradedRecoverabilityState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalTrustedVaultDegradedRecoverabilityState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LocalTrustedVaultDegradedRecoverabilityState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalTrustedVaultDegradedRecoverabilityState::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.LocalTrustedVaultDegradedRecoverabilityState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&last_refresh_time_millis_since_unix_epoch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_recoverability_degraded_) -
        reinterpret_cast<char*>(&last_refresh_time_millis_since_unix_epoch_)) + sizeof(is_recoverability_degraded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LocalTrustedVaultDegradedRecoverabilityState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_recoverability_degraded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_recoverability_degraded(&has_bits);
          is_recoverability_degraded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 last_refresh_time_millis_since_unix_epoch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_last_refresh_time_millis_since_unix_epoch(&has_bits);
          last_refresh_time_millis_since_unix_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalTrustedVaultDegradedRecoverabilityState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.LocalTrustedVaultDegradedRecoverabilityState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_recoverability_degraded = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_recoverability_degraded(), target);
  }

  // optional int64 last_refresh_time_millis_since_unix_epoch = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_last_refresh_time_millis_since_unix_epoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.LocalTrustedVaultDegradedRecoverabilityState)
  return target;
}

size_t LocalTrustedVaultDegradedRecoverabilityState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.LocalTrustedVaultDegradedRecoverabilityState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 last_refresh_time_millis_since_unix_epoch = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_refresh_time_millis_since_unix_epoch());
    }

    // optional bool is_recoverability_degraded = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalTrustedVaultDegradedRecoverabilityState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LocalTrustedVaultDegradedRecoverabilityState*>(
      &from));
}

void LocalTrustedVaultDegradedRecoverabilityState::MergeFrom(const LocalTrustedVaultDegradedRecoverabilityState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.LocalTrustedVaultDegradedRecoverabilityState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      last_refresh_time_millis_since_unix_epoch_ = from.last_refresh_time_millis_since_unix_epoch_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_recoverability_degraded_ = from.is_recoverability_degraded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LocalTrustedVaultDegradedRecoverabilityState::CopyFrom(const LocalTrustedVaultDegradedRecoverabilityState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.LocalTrustedVaultDegradedRecoverabilityState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrustedVaultDegradedRecoverabilityState::IsInitialized() const {
  return true;
}

void LocalTrustedVaultDegradedRecoverabilityState::InternalSwap(LocalTrustedVaultDegradedRecoverabilityState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalTrustedVaultDegradedRecoverabilityState, is_recoverability_degraded_)
      + sizeof(LocalTrustedVaultDegradedRecoverabilityState::is_recoverability_degraded_)
      - PROTOBUF_FIELD_OFFSET(LocalTrustedVaultDegradedRecoverabilityState, last_refresh_time_millis_since_unix_epoch_)>(
          reinterpret_cast<char*>(&last_refresh_time_millis_since_unix_epoch_),
          reinterpret_cast<char*>(&other->last_refresh_time_millis_since_unix_epoch_));
}

std::string LocalTrustedVaultDegradedRecoverabilityState::GetTypeName() const {
  return "sync_pb.LocalTrustedVaultDegradedRecoverabilityState";
}


// ===================================================================

class LocalTrustedVaultPerUser::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalTrustedVaultPerUser>()._has_bits_);
  static void set_has_gaia_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_vault_key_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_keys_are_stale(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::sync_pb::LocalDeviceRegistrationInfo& local_device_registration_info(const LocalTrustedVaultPerUser* msg);
  static void set_has_local_device_registration_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_failed_request_millis_since_unix_epoch(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_should_delete_keys_when_non_primary(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState& degraded_recoverability_state(const LocalTrustedVaultPerUser* msg);
  static void set_has_degraded_recoverability_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::sync_pb::LocalDeviceRegistrationInfo&
LocalTrustedVaultPerUser::_Internal::local_device_registration_info(const LocalTrustedVaultPerUser* msg) {
  return *msg->local_device_registration_info_;
}
const ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState&
LocalTrustedVaultPerUser::_Internal::degraded_recoverability_state(const LocalTrustedVaultPerUser* msg) {
  return *msg->degraded_recoverability_state_;
}
LocalTrustedVaultPerUser::LocalTrustedVaultPerUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  vault_key_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.LocalTrustedVaultPerUser)
}
LocalTrustedVaultPerUser::LocalTrustedVaultPerUser(const LocalTrustedVaultPerUser& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      vault_key_(from.vault_key_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  gaia_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gaia_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gaia_id()) {
    gaia_id_.Set(from._internal_gaia_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_local_device_registration_info()) {
    local_device_registration_info_ = new ::sync_pb::LocalDeviceRegistrationInfo(*from.local_device_registration_info_);
  } else {
    local_device_registration_info_ = nullptr;
  }
  if (from._internal_has_degraded_recoverability_state()) {
    degraded_recoverability_state_ = new ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState(*from.degraded_recoverability_state_);
  } else {
    degraded_recoverability_state_ = nullptr;
  }
  ::memcpy(&last_vault_key_version_, &from.last_vault_key_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_failed_request_millis_since_unix_epoch_) -
    reinterpret_cast<char*>(&last_vault_key_version_)) + sizeof(last_failed_request_millis_since_unix_epoch_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.LocalTrustedVaultPerUser)
}

inline void LocalTrustedVaultPerUser::SharedCtor() {
gaia_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gaia_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&local_device_registration_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_failed_request_millis_since_unix_epoch_) -
    reinterpret_cast<char*>(&local_device_registration_info_)) + sizeof(last_failed_request_millis_since_unix_epoch_));
}

LocalTrustedVaultPerUser::~LocalTrustedVaultPerUser() {
  // @@protoc_insertion_point(destructor:sync_pb.LocalTrustedVaultPerUser)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalTrustedVaultPerUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  gaia_id_.Destroy();
  if (this != internal_default_instance()) delete local_device_registration_info_;
  if (this != internal_default_instance()) delete degraded_recoverability_state_;
}

void LocalTrustedVaultPerUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalTrustedVaultPerUser::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.LocalTrustedVaultPerUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vault_key_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      gaia_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(local_device_registration_info_ != nullptr);
      local_device_registration_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(degraded_recoverability_state_ != nullptr);
      degraded_recoverability_state_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&last_vault_key_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_failed_request_millis_since_unix_epoch_) -
        reinterpret_cast<char*>(&last_vault_key_version_)) + sizeof(last_failed_request_millis_since_unix_epoch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LocalTrustedVaultPerUser::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes gaia_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_gaia_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.LocalTrustedVaultKey vault_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vault_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 last_vault_key_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_last_vault_key_version(&has_bits);
          last_vault_key_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool keys_are_stale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_keys_are_stale(&has_bits);
          keys_are_stale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.LocalDeviceRegistrationInfo local_device_registration_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_device_registration_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 last_failed_request_millis_since_unix_epoch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_last_failed_request_millis_since_unix_epoch(&has_bits);
          last_failed_request_millis_since_unix_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool should_delete_keys_when_non_primary = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_should_delete_keys_when_non_primary(&has_bits);
          should_delete_keys_when_non_primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.LocalTrustedVaultDegradedRecoverabilityState degraded_recoverability_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_degraded_recoverability_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalTrustedVaultPerUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.LocalTrustedVaultPerUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes gaia_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_gaia_id(), target);
  }

  // repeated .sync_pb.LocalTrustedVaultKey vault_key = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vault_key_size()); i < n; i++) {
    const auto& repfield = this->_internal_vault_key(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 last_vault_key_version = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_last_vault_key_version(), target);
  }

  // optional bool keys_are_stale = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_keys_are_stale(), target);
  }

  // optional .sync_pb.LocalDeviceRegistrationInfo local_device_registration_info = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::local_device_registration_info(this),
        _Internal::local_device_registration_info(this).GetCachedSize(), target, stream);
  }

  // optional int64 last_failed_request_millis_since_unix_epoch = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_last_failed_request_millis_since_unix_epoch(), target);
  }

  // optional bool should_delete_keys_when_non_primary = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_should_delete_keys_when_non_primary(), target);
  }

  // optional .sync_pb.LocalTrustedVaultDegradedRecoverabilityState degraded_recoverability_state = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::degraded_recoverability_state(this),
        _Internal::degraded_recoverability_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.LocalTrustedVaultPerUser)
  return target;
}

size_t LocalTrustedVaultPerUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.LocalTrustedVaultPerUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.LocalTrustedVaultKey vault_key = 2;
  total_size += 1UL * this->_internal_vault_key_size();
  for (const auto& msg : this->vault_key_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes gaia_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_gaia_id());
    }

    // optional .sync_pb.LocalDeviceRegistrationInfo local_device_registration_info = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *local_device_registration_info_);
    }

    // optional .sync_pb.LocalTrustedVaultDegradedRecoverabilityState degraded_recoverability_state = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *degraded_recoverability_state_);
    }

    // optional int32 last_vault_key_version = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_vault_key_version());
    }

    // optional bool keys_are_stale = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool should_delete_keys_when_non_primary = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int64 last_failed_request_millis_since_unix_epoch = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_failed_request_millis_since_unix_epoch());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalTrustedVaultPerUser::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LocalTrustedVaultPerUser*>(
      &from));
}

void LocalTrustedVaultPerUser::MergeFrom(const LocalTrustedVaultPerUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.LocalTrustedVaultPerUser)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vault_key_.MergeFrom(from.vault_key_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gaia_id(from._internal_gaia_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_local_device_registration_info()->::sync_pb::LocalDeviceRegistrationInfo::MergeFrom(from._internal_local_device_registration_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_degraded_recoverability_state()->::sync_pb::LocalTrustedVaultDegradedRecoverabilityState::MergeFrom(from._internal_degraded_recoverability_state());
    }
    if (cached_has_bits & 0x00000008u) {
      last_vault_key_version_ = from.last_vault_key_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      keys_are_stale_ = from.keys_are_stale_;
    }
    if (cached_has_bits & 0x00000020u) {
      should_delete_keys_when_non_primary_ = from.should_delete_keys_when_non_primary_;
    }
    if (cached_has_bits & 0x00000040u) {
      last_failed_request_millis_since_unix_epoch_ = from.last_failed_request_millis_since_unix_epoch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LocalTrustedVaultPerUser::CopyFrom(const LocalTrustedVaultPerUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.LocalTrustedVaultPerUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrustedVaultPerUser::IsInitialized() const {
  return true;
}

void LocalTrustedVaultPerUser::InternalSwap(LocalTrustedVaultPerUser* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vault_key_.InternalSwap(&other->vault_key_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &gaia_id_, lhs_arena,
      &other->gaia_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalTrustedVaultPerUser, last_failed_request_millis_since_unix_epoch_)
      + sizeof(LocalTrustedVaultPerUser::last_failed_request_millis_since_unix_epoch_)
      - PROTOBUF_FIELD_OFFSET(LocalTrustedVaultPerUser, local_device_registration_info_)>(
          reinterpret_cast<char*>(&local_device_registration_info_),
          reinterpret_cast<char*>(&other->local_device_registration_info_));
}

std::string LocalTrustedVaultPerUser::GetTypeName() const {
  return "sync_pb.LocalTrustedVaultPerUser";
}


// ===================================================================

class LocalTrustedVault::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalTrustedVault>()._has_bits_);
  static void set_has_data_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LocalTrustedVault::LocalTrustedVault(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  user_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.LocalTrustedVault)
}
LocalTrustedVault::LocalTrustedVault(const LocalTrustedVault& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      user_(from.user_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  data_version_ = from.data_version_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.LocalTrustedVault)
}

inline void LocalTrustedVault::SharedCtor() {
data_version_ = 0;
}

LocalTrustedVault::~LocalTrustedVault() {
  // @@protoc_insertion_point(destructor:sync_pb.LocalTrustedVault)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalTrustedVault::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LocalTrustedVault::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalTrustedVault::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.LocalTrustedVault)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.Clear();
  data_version_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LocalTrustedVault::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sync_pb.LocalTrustedVaultPerUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 data_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_data_version(&has_bits);
          data_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalTrustedVault::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.LocalTrustedVault)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sync_pb.LocalTrustedVaultPerUser user = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_user_size()); i < n; i++) {
    const auto& repfield = this->_internal_user(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 data_version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_data_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.LocalTrustedVault)
  return target;
}

size_t LocalTrustedVault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.LocalTrustedVault)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.LocalTrustedVaultPerUser user = 1;
  total_size += 1UL * this->_internal_user_size();
  for (const auto& msg : this->user_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 data_version = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalTrustedVault::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LocalTrustedVault*>(
      &from));
}

void LocalTrustedVault::MergeFrom(const LocalTrustedVault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.LocalTrustedVault)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_.MergeFrom(from.user_);
  if (from._internal_has_data_version()) {
    _internal_set_data_version(from._internal_data_version());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LocalTrustedVault::CopyFrom(const LocalTrustedVault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.LocalTrustedVault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrustedVault::IsInitialized() const {
  return true;
}

void LocalTrustedVault::InternalSwap(LocalTrustedVault* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_.InternalSwap(&other->user_);
  swap(data_version_, other->data_version_);
}

std::string LocalTrustedVault::GetTypeName() const {
  return "sync_pb.LocalTrustedVault";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::LocalTrustedVaultKey*
Arena::CreateMaybeMessage< ::sync_pb::LocalTrustedVaultKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::LocalTrustedVaultKey >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::LocalDeviceRegistrationInfo*
Arena::CreateMaybeMessage< ::sync_pb::LocalDeviceRegistrationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::LocalDeviceRegistrationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState*
Arena::CreateMaybeMessage< ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::LocalTrustedVaultDegradedRecoverabilityState >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::LocalTrustedVaultPerUser*
Arena::CreateMaybeMessage< ::sync_pb::LocalTrustedVaultPerUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::LocalTrustedVaultPerUser >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::LocalTrustedVault*
Arena::CreateMaybeMessage< ::sync_pb::LocalTrustedVault >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::LocalTrustedVault >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
