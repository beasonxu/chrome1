// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/session_specifics.proto

#include "components/sync/protocol/session_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR SessionSpecifics::SessionSpecifics(
    ::_pbi::ConstantInitialized)
  : session_tag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr)
  , tab_(nullptr)
  , tab_node_id_(-1){}
struct SessionSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionSpecificsDefaultTypeInternal() {}
  union {
    SessionSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionSpecificsDefaultTypeInternal _SessionSpecifics_default_instance_;
PROTOBUF_CONSTEXPR SessionHeader::SessionHeader(
    ::_pbi::ConstantInitialized)
  : window_()
  , client_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , device_type_(0)
{}
struct SessionHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionHeaderDefaultTypeInternal() {}
  union {
    SessionHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionHeaderDefaultTypeInternal _SessionHeader_default_instance_;
PROTOBUF_CONSTEXPR SessionWindow::SessionWindow(
    ::_pbi::ConstantInitialized)
  : tab_()
  , window_id_(0)
  , selected_tab_index_(-1)
  , browser_type_(1)
{}
struct SessionWindowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionWindowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionWindowDefaultTypeInternal() {}
  union {
    SessionWindow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionWindowDefaultTypeInternal _SessionWindow_default_instance_;
PROTOBUF_CONSTEXPR SessionTab::SessionTab(
    ::_pbi::ConstantInitialized)
  : navigation_()
  , variation_id_()
  , extension_app_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , favicon_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , favicon_source_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , window_id_(0)
  , pinned_(false)
  , browser_type_(1)

  , tab_id_(-1)
  , tab_visual_index_(-1)
  , current_navigation_index_(-1)
  , favicon_type_(1)
{}
struct SessionTabDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionTabDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionTabDefaultTypeInternal() {}
  union {
    SessionTab _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionTabDefaultTypeInternal _SessionTab_default_instance_;
PROTOBUF_CONSTEXPR TabNavigation::TabNavigation(
    ::_pbi::ConstantInitialized)
  : navigation_redirect_()
  , ancestor_task_id_()
  , virtual_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , referrer_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , search_terms_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , favicon_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , last_navigation_redirect_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , page_language_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , replaced_navigation_(nullptr)
  , page_transition_(0)

  , unique_id_(0)
  , timestamp_msec_(int64_t{0})
  , navigation_forward_back_(false)
  , navigation_from_address_bar_(false)
  , navigation_home_page_(false)
  , navigation_chain_start_(false)
  , navigation_chain_end_(false)
  , is_restored_(false)
  , global_id_(int64_t{0})
  , http_status_code_(0)
  , obsolete_referrer_policy_(0)
  , task_id_(int64_t{0})
  , password_state_(0)

  , correct_referrer_policy_(1)
  , redirect_type_(1)

  , blocked_state_(1)
{}
struct TabNavigationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TabNavigationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TabNavigationDefaultTypeInternal() {}
  union {
    TabNavigation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TabNavigationDefaultTypeInternal _TabNavigation_default_instance_;
PROTOBUF_CONSTEXPR NavigationRedirect::NavigationRedirect(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct NavigationRedirectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NavigationRedirectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NavigationRedirectDefaultTypeInternal() {}
  union {
    NavigationRedirect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NavigationRedirectDefaultTypeInternal _NavigationRedirect_default_instance_;
PROTOBUF_CONSTEXPR ReplacedNavigation::ReplacedNavigation(
    ::_pbi::ConstantInitialized)
  : first_committed_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , first_timestamp_msec_(int64_t{0})
  , first_page_transition_(0)
{}
struct ReplacedNavigationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplacedNavigationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplacedNavigationDefaultTypeInternal() {}
  union {
    ReplacedNavigation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplacedNavigationDefaultTypeInternal _ReplacedNavigation_default_instance_;
}  // namespace sync_pb
namespace sync_pb {
bool SessionTab_FaviconType_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SessionTab_FaviconType_strings[1] = {};

static const char SessionTab_FaviconType_names[] =
  "TYPE_WEB_FAVICON";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SessionTab_FaviconType_entries[] = {
  { {SessionTab_FaviconType_names + 0, 16}, 1 },
};

static const int SessionTab_FaviconType_entries_by_number[] = {
  0, // 1 -> TYPE_WEB_FAVICON
};

const std::string& SessionTab_FaviconType_Name(
    SessionTab_FaviconType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SessionTab_FaviconType_entries,
          SessionTab_FaviconType_entries_by_number,
          1, SessionTab_FaviconType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SessionTab_FaviconType_entries,
      SessionTab_FaviconType_entries_by_number,
      1, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SessionTab_FaviconType_strings[idx].get();
}
bool SessionTab_FaviconType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SessionTab_FaviconType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SessionTab_FaviconType_entries, 1, name, &int_value);
  if (success) {
    *value = static_cast<SessionTab_FaviconType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SessionTab_FaviconType SessionTab::TYPE_WEB_FAVICON;
constexpr SessionTab_FaviconType SessionTab::FaviconType_MIN;
constexpr SessionTab_FaviconType SessionTab::FaviconType_MAX;
constexpr int SessionTab::FaviconType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool TabNavigation_BlockedState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TabNavigation_BlockedState_strings[2] = {};

static const char TabNavigation_BlockedState_names[] =
  "STATE_ALLOWED"
  "STATE_BLOCKED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TabNavigation_BlockedState_entries[] = {
  { {TabNavigation_BlockedState_names + 0, 13}, 1 },
  { {TabNavigation_BlockedState_names + 13, 13}, 2 },
};

static const int TabNavigation_BlockedState_entries_by_number[] = {
  0, // 1 -> STATE_ALLOWED
  1, // 2 -> STATE_BLOCKED
};

const std::string& TabNavigation_BlockedState_Name(
    TabNavigation_BlockedState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TabNavigation_BlockedState_entries,
          TabNavigation_BlockedState_entries_by_number,
          2, TabNavigation_BlockedState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TabNavigation_BlockedState_entries,
      TabNavigation_BlockedState_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TabNavigation_BlockedState_strings[idx].get();
}
bool TabNavigation_BlockedState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TabNavigation_BlockedState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TabNavigation_BlockedState_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<TabNavigation_BlockedState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TabNavigation_BlockedState TabNavigation::STATE_ALLOWED;
constexpr TabNavigation_BlockedState TabNavigation::STATE_BLOCKED;
constexpr TabNavigation_BlockedState TabNavigation::BlockedState_MIN;
constexpr TabNavigation_BlockedState TabNavigation::BlockedState_MAX;
constexpr int TabNavigation::BlockedState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool TabNavigation_PasswordState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TabNavigation_PasswordState_strings[3] = {};

static const char TabNavigation_PasswordState_names[] =
  "HAS_PASSWORD_FIELD"
  "NO_PASSWORD_FIELD"
  "PASSWORD_STATE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TabNavigation_PasswordState_entries[] = {
  { {TabNavigation_PasswordState_names + 0, 18}, 2 },
  { {TabNavigation_PasswordState_names + 18, 17}, 1 },
  { {TabNavigation_PasswordState_names + 35, 22}, 0 },
};

static const int TabNavigation_PasswordState_entries_by_number[] = {
  2, // 0 -> PASSWORD_STATE_UNKNOWN
  1, // 1 -> NO_PASSWORD_FIELD
  0, // 2 -> HAS_PASSWORD_FIELD
};

const std::string& TabNavigation_PasswordState_Name(
    TabNavigation_PasswordState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TabNavigation_PasswordState_entries,
          TabNavigation_PasswordState_entries_by_number,
          3, TabNavigation_PasswordState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TabNavigation_PasswordState_entries,
      TabNavigation_PasswordState_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TabNavigation_PasswordState_strings[idx].get();
}
bool TabNavigation_PasswordState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TabNavigation_PasswordState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TabNavigation_PasswordState_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<TabNavigation_PasswordState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TabNavigation_PasswordState TabNavigation::PASSWORD_STATE_UNKNOWN;
constexpr TabNavigation_PasswordState TabNavigation::NO_PASSWORD_FIELD;
constexpr TabNavigation_PasswordState TabNavigation::HAS_PASSWORD_FIELD;
constexpr TabNavigation_PasswordState TabNavigation::PasswordState_MIN;
constexpr TabNavigation_PasswordState TabNavigation::PasswordState_MAX;
constexpr int TabNavigation::PasswordState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SessionSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionSpecifics>()._has_bits_);
  static void set_has_session_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::SessionHeader& header(const SessionSpecifics* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::sync_pb::SessionTab& tab(const SessionSpecifics* msg);
  static void set_has_tab(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tab_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::sync_pb::SessionHeader&
SessionSpecifics::_Internal::header(const SessionSpecifics* msg) {
  return *msg->header_;
}
const ::sync_pb::SessionTab&
SessionSpecifics::_Internal::tab(const SessionSpecifics* msg) {
  return *msg->tab_;
}
SessionSpecifics::SessionSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SessionSpecifics)
}
SessionSpecifics::SessionSpecifics(const SessionSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  session_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_tag()) {
    session_tag_.Set(from._internal_session_tag(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::sync_pb::SessionHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_tab()) {
    tab_ = new ::sync_pb::SessionTab(*from.tab_);
  } else {
    tab_ = nullptr;
  }
  tab_node_id_ = from.tab_node_id_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.SessionSpecifics)
}

inline void SessionSpecifics::SharedCtor() {
session_tag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_tag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tab_) -
    reinterpret_cast<char*>(&header_)) + sizeof(tab_));
tab_node_id_ = -1;
}

SessionSpecifics::~SessionSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.SessionSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_tag_.Destroy();
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete tab_;
}

void SessionSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SessionSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      session_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tab_ != nullptr);
      tab_->Clear();
    }
    tab_node_id_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SessionSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string session_tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.SessionHeader header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.SessionTab tab = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tab(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tab_node_id = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tab_node_id(&has_bits);
          tab_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SessionSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_tag(), target);
  }

  // optional .sync_pb.SessionHeader header = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .sync_pb.SessionTab tab = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::tab(this),
        _Internal::tab(this).GetCachedSize(), target, stream);
  }

  // optional int32 tab_node_id = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_tab_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SessionSpecifics)
  return target;
}

size_t SessionSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SessionSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string session_tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_tag());
    }

    // optional .sync_pb.SessionHeader header = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .sync_pb.SessionTab tab = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tab_);
    }

    // optional int32 tab_node_id = 4 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tab_node_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SessionSpecifics*>(
      &from));
}

void SessionSpecifics::MergeFrom(const SessionSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SessionSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session_tag(from._internal_session_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::sync_pb::SessionHeader::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tab()->::sync_pb::SessionTab::MergeFrom(from._internal_tab());
    }
    if (cached_has_bits & 0x00000008u) {
      tab_node_id_ = from.tab_node_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SessionSpecifics::CopyFrom(const SessionSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SessionSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionSpecifics::IsInitialized() const {
  return true;
}

void SessionSpecifics::InternalSwap(SessionSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &session_tag_, lhs_arena,
      &other->session_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionSpecifics, tab_)
      + sizeof(SessionSpecifics::tab_)
      - PROTOBUF_FIELD_OFFSET(SessionSpecifics, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
  swap(tab_node_id_, other->tab_node_id_);
}

std::string SessionSpecifics::GetTypeName() const {
  return "sync_pb.SessionSpecifics";
}


// ===================================================================

class SessionHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionHeader>()._has_bits_);
  static void set_has_client_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_device_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SessionHeader::SessionHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  window_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SessionHeader)
}
SessionHeader::SessionHeader(const SessionHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      window_(from.window_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  client_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_client_name()) {
    client_name_.Set(from._internal_client_name(), 
      GetArenaForAllocation());
  }
  device_type_ = from.device_type_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.SessionHeader)
}

inline void SessionHeader::SharedCtor() {
client_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
device_type_ = 0;
}

SessionHeader::~SessionHeader() {
  // @@protoc_insertion_point(destructor:sync_pb.SessionHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  client_name_.Destroy();
}

void SessionHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SessionHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  window_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    client_name_.ClearNonDefaultToEmpty();
  }
  device_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SessionHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sync_pb.SessionWindow window = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_window(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string client_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_client_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.SyncEnums.DeviceType device_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SyncEnums_DeviceType_IsValid(val))) {
            _internal_set_device_type(static_cast<::sync_pb::SyncEnums_DeviceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SessionHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sync_pb.SessionWindow window = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_window_size()); i < n; i++) {
    const auto& repfield = this->_internal_window(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string client_name = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_client_name(), target);
  }

  // optional .sync_pb.SyncEnums.DeviceType device_type = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_device_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SessionHeader)
  return target;
}

size_t SessionHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SessionHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.SessionWindow window = 2;
  total_size += 1UL * this->_internal_window_size();
  for (const auto& msg : this->window_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string client_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_name());
    }

    // optional .sync_pb.SyncEnums.DeviceType device_type = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_device_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionHeader::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SessionHeader*>(
      &from));
}

void SessionHeader::MergeFrom(const SessionHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SessionHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  window_.MergeFrom(from.window_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_client_name(from._internal_client_name());
    }
    if (cached_has_bits & 0x00000002u) {
      device_type_ = from.device_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SessionHeader::CopyFrom(const SessionHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SessionHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionHeader::IsInitialized() const {
  return true;
}

void SessionHeader::InternalSwap(SessionHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  window_.InternalSwap(&other->window_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &client_name_, lhs_arena,
      &other->client_name_, rhs_arena
  );
  swap(device_type_, other->device_type_);
}

std::string SessionHeader::GetTypeName() const {
  return "sync_pb.SessionHeader";
}


// ===================================================================

class SessionWindow::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionWindow>()._has_bits_);
  static void set_has_window_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selected_tab_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_browser_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SessionWindow::SessionWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  tab_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SessionWindow)
}
SessionWindow::SessionWindow(const SessionWindow& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      tab_(from.tab_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&window_id_, &from.window_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&browser_type_) -
    reinterpret_cast<char*>(&window_id_)) + sizeof(browser_type_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.SessionWindow)
}

inline void SessionWindow::SharedCtor() {
window_id_ = 0;
selected_tab_index_ = -1;
browser_type_ = 1;
}

SessionWindow::~SessionWindow() {
  // @@protoc_insertion_point(destructor:sync_pb.SessionWindow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionWindow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SessionWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SessionWindow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tab_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    window_id_ = 0;
    selected_tab_index_ = -1;
    browser_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SessionWindow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 window_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_window_id(&has_bits);
          window_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 selected_tab_index = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_selected_tab_index(&has_bits);
          selected_tab_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.SyncEnums.BrowserType browser_type = 3 [default = TYPE_TABBED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SyncEnums_BrowserType_IsValid(val))) {
            _internal_set_browser_type(static_cast<::sync_pb::SyncEnums_BrowserType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated int32 tab = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tab(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_tab(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionWindow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SessionWindow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 window_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_window_id(), target);
  }

  // optional int32 selected_tab_index = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_selected_tab_index(), target);
  }

  // optional .sync_pb.SyncEnums.BrowserType browser_type = 3 [default = TYPE_TABBED];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_browser_type(), target);
  }

  // repeated int32 tab = 4;
  for (int i = 0, n = this->_internal_tab_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_tab(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SessionWindow)
  return target;
}

size_t SessionWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SessionWindow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 tab = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->tab_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_tab_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 window_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_window_id());
    }

    // optional int32 selected_tab_index = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_selected_tab_index());
    }

    // optional .sync_pb.SyncEnums.BrowserType browser_type = 3 [default = TYPE_TABBED];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_browser_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionWindow::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SessionWindow*>(
      &from));
}

void SessionWindow::MergeFrom(const SessionWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SessionWindow)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tab_.MergeFrom(from.tab_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      window_id_ = from.window_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      selected_tab_index_ = from.selected_tab_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      browser_type_ = from.browser_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SessionWindow::CopyFrom(const SessionWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SessionWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionWindow::IsInitialized() const {
  return true;
}

void SessionWindow::InternalSwap(SessionWindow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tab_.InternalSwap(&other->tab_);
  swap(window_id_, other->window_id_);
  swap(selected_tab_index_, other->selected_tab_index_);
  swap(browser_type_, other->browser_type_);
}

std::string SessionWindow::GetTypeName() const {
  return "sync_pb.SessionWindow";
}


// ===================================================================

class SessionTab::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionTab>()._has_bits_);
  static void set_has_tab_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_window_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tab_visual_index(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_current_navigation_index(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_pinned(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_extension_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_favicon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_favicon_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_favicon_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_browser_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

SessionTab::SessionTab(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  navigation_(arena),
  variation_id_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SessionTab)
}
SessionTab::SessionTab(const SessionTab& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      navigation_(from.navigation_),
      variation_id_(from.variation_id_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  extension_app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    extension_app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_extension_app_id()) {
    extension_app_id_.Set(from._internal_extension_app_id(), 
      GetArenaForAllocation());
  }
  favicon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    favicon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_favicon()) {
    favicon_.Set(from._internal_favicon(), 
      GetArenaForAllocation());
  }
  favicon_source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    favicon_source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_favicon_source()) {
    favicon_source_.Set(from._internal_favicon_source(), 
      GetArenaForAllocation());
  }
  ::memcpy(&window_id_, &from.window_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&favicon_type_) -
    reinterpret_cast<char*>(&window_id_)) + sizeof(favicon_type_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.SessionTab)
}

inline void SessionTab::SharedCtor() {
extension_app_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  extension_app_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
favicon_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  favicon_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
favicon_source_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  favicon_source_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&window_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pinned_) -
    reinterpret_cast<char*>(&window_id_)) + sizeof(pinned_));
browser_type_ = 1;
tab_id_ = -1;
tab_visual_index_ = -1;
current_navigation_index_ = -1;
favicon_type_ = 1;
}

SessionTab::~SessionTab() {
  // @@protoc_insertion_point(destructor:sync_pb.SessionTab)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionTab::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  extension_app_id_.Destroy();
  favicon_.Destroy();
  favicon_source_.Destroy();
}

void SessionTab::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SessionTab::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SessionTab)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  navigation_.Clear();
  variation_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      extension_app_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      favicon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      favicon_source_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&window_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pinned_) -
        reinterpret_cast<char*>(&window_id_)) + sizeof(pinned_));
    browser_type_ = 1;
    tab_id_ = -1;
    tab_visual_index_ = -1;
  }
  if (cached_has_bits & 0x00000300u) {
    current_navigation_index_ = -1;
    favicon_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SessionTab::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tab_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tab_id(&has_bits);
          tab_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 window_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_window_id(&has_bits);
          window_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tab_visual_index = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tab_visual_index(&has_bits);
          tab_visual_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 current_navigation_index = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_current_navigation_index(&has_bits);
          current_navigation_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pinned = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_pinned(&has_bits);
          pinned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string extension_app_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_extension_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.TabNavigation navigation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_navigation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes favicon = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_favicon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.SessionTab.FaviconType favicon_type = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SessionTab_FaviconType_IsValid(val))) {
            _internal_set_favicon_type(static_cast<::sync_pb::SessionTab_FaviconType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string favicon_source = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_favicon_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 variation_id = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_variation_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<uint8_t>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_variation_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.SyncEnums.BrowserType browser_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SyncEnums_BrowserType_IsValid(val))) {
            _internal_set_browser_type(static_cast<::sync_pb::SyncEnums_BrowserType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionTab::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SessionTab)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tab_id = 1 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tab_id(), target);
  }

  // optional int32 window_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_window_id(), target);
  }

  // optional int32 tab_visual_index = 3 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_tab_visual_index(), target);
  }

  // optional int32 current_navigation_index = 4 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_current_navigation_index(), target);
  }

  // optional bool pinned = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_pinned(), target);
  }

  // optional string extension_app_id = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_extension_app_id(), target);
  }

  // repeated .sync_pb.TabNavigation navigation = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_navigation_size()); i < n; i++) {
    const auto& repfield = this->_internal_navigation(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes favicon = 8 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_favicon(), target);
  }

  // optional .sync_pb.SessionTab.FaviconType favicon_type = 9 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_favicon_type(), target);
  }

  // optional string favicon_source = 11 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_favicon_source(), target);
  }

  // repeated uint64 variation_id = 12 [deprecated = true];
  for (int i = 0, n = this->_internal_variation_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_variation_id(i), target);
  }

  // optional .sync_pb.SyncEnums.BrowserType browser_type = 13;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_browser_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SessionTab)
  return target;
}

size_t SessionTab::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SessionTab)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.TabNavigation navigation = 7;
  total_size += 1UL * this->_internal_navigation_size();
  for (const auto& msg : this->navigation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 variation_id = 12 [deprecated = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->variation_id_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_variation_id_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string extension_app_id = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_extension_app_id());
    }

    // optional bytes favicon = 8 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_favicon());
    }

    // optional string favicon_source = 11 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_favicon_source());
    }

    // optional int32 window_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_window_id());
    }

    // optional bool pinned = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .sync_pb.SyncEnums.BrowserType browser_type = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_browser_type());
    }

    // optional int32 tab_id = 1 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tab_id());
    }

    // optional int32 tab_visual_index = 3 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tab_visual_index());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 current_navigation_index = 4 [default = -1];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_current_navigation_index());
    }

    // optional .sync_pb.SessionTab.FaviconType favicon_type = 9 [deprecated = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_favicon_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionTab::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SessionTab*>(
      &from));
}

void SessionTab::MergeFrom(const SessionTab& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SessionTab)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  navigation_.MergeFrom(from.navigation_);
  variation_id_.MergeFrom(from.variation_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_extension_app_id(from._internal_extension_app_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_favicon(from._internal_favicon());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_favicon_source(from._internal_favicon_source());
    }
    if (cached_has_bits & 0x00000008u) {
      window_id_ = from.window_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      pinned_ = from.pinned_;
    }
    if (cached_has_bits & 0x00000020u) {
      browser_type_ = from.browser_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      tab_id_ = from.tab_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      tab_visual_index_ = from.tab_visual_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      current_navigation_index_ = from.current_navigation_index_;
    }
    if (cached_has_bits & 0x00000200u) {
      favicon_type_ = from.favicon_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SessionTab::CopyFrom(const SessionTab& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SessionTab)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionTab::IsInitialized() const {
  return true;
}

void SessionTab::InternalSwap(SessionTab* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  navigation_.InternalSwap(&other->navigation_);
  variation_id_.InternalSwap(&other->variation_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &extension_app_id_, lhs_arena,
      &other->extension_app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &favicon_, lhs_arena,
      &other->favicon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &favicon_source_, lhs_arena,
      &other->favicon_source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionTab, pinned_)
      + sizeof(SessionTab::pinned_)
      - PROTOBUF_FIELD_OFFSET(SessionTab, window_id_)>(
          reinterpret_cast<char*>(&window_id_),
          reinterpret_cast<char*>(&other->window_id_));
  swap(browser_type_, other->browser_type_);
  swap(tab_id_, other->tab_id_);
  swap(tab_visual_index_, other->tab_visual_index_);
  swap(current_navigation_index_, other->current_navigation_index_);
  swap(favicon_type_, other->favicon_type_);
}

std::string SessionTab::GetTypeName() const {
  return "sync_pb.SessionTab";
}


// ===================================================================

class TabNavigation::_Internal {
 public:
  using HasBits = decltype(std::declval<TabNavigation>()._has_bits_);
  static void set_has_virtual_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_referrer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_page_transition(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_redirect_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timestamp_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_navigation_forward_back(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_navigation_from_address_bar(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_navigation_home_page(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_navigation_chain_start(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_navigation_chain_end(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_global_id(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_search_terms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_favicon_url(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_blocked_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_http_status_code(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_obsolete_referrer_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_is_restored(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_last_navigation_redirect_url(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_correct_referrer_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_password_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_task_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::sync_pb::ReplacedNavigation& replaced_navigation(const TabNavigation* msg);
  static void set_has_replaced_navigation(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_page_language(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::sync_pb::ReplacedNavigation&
TabNavigation::_Internal::replaced_navigation(const TabNavigation* msg) {
  return *msg->replaced_navigation_;
}
TabNavigation::TabNavigation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  navigation_redirect_(arena),
  ancestor_task_id_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.TabNavigation)
}
TabNavigation::TabNavigation(const TabNavigation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      navigation_redirect_(from.navigation_redirect_),
      ancestor_task_id_(from.ancestor_task_id_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  virtual_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    virtual_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_virtual_url()) {
    virtual_url_.Set(from._internal_virtual_url(), 
      GetArenaForAllocation());
  }
  referrer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    referrer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_referrer()) {
    referrer_.Set(from._internal_referrer(), 
      GetArenaForAllocation());
  }
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  search_terms_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    search_terms_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_search_terms()) {
    search_terms_.Set(from._internal_search_terms(), 
      GetArenaForAllocation());
  }
  favicon_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    favicon_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_favicon_url()) {
    favicon_url_.Set(from._internal_favicon_url(), 
      GetArenaForAllocation());
  }
  last_navigation_redirect_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_navigation_redirect_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_last_navigation_redirect_url()) {
    last_navigation_redirect_url_.Set(from._internal_last_navigation_redirect_url(), 
      GetArenaForAllocation());
  }
  page_language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    page_language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_page_language()) {
    page_language_.Set(from._internal_page_language(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_replaced_navigation()) {
    replaced_navigation_ = new ::sync_pb::ReplacedNavigation(*from.replaced_navigation_);
  } else {
    replaced_navigation_ = nullptr;
  }
  ::memcpy(&page_transition_, &from.page_transition_,
    static_cast<size_t>(reinterpret_cast<char*>(&blocked_state_) -
    reinterpret_cast<char*>(&page_transition_)) + sizeof(blocked_state_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.TabNavigation)
}

inline void TabNavigation::SharedCtor() {
virtual_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  virtual_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
referrer_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  referrer_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
search_terms_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  search_terms_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
favicon_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  favicon_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_navigation_redirect_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_navigation_redirect_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_language_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  page_language_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&replaced_navigation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&password_state_) -
    reinterpret_cast<char*>(&replaced_navigation_)) + sizeof(password_state_));
correct_referrer_policy_ = 1;
redirect_type_ = 1;
blocked_state_ = 1;
}

TabNavigation::~TabNavigation() {
  // @@protoc_insertion_point(destructor:sync_pb.TabNavigation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TabNavigation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  virtual_url_.Destroy();
  referrer_.Destroy();
  title_.Destroy();
  search_terms_.Destroy();
  favicon_url_.Destroy();
  last_navigation_redirect_url_.Destroy();
  page_language_.Destroy();
  if (this != internal_default_instance()) delete replaced_navigation_;
}

void TabNavigation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TabNavigation::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.TabNavigation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  navigation_redirect_.Clear();
  ancestor_task_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      virtual_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      referrer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      search_terms_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      favicon_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      last_navigation_redirect_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      page_language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(replaced_navigation_ != nullptr);
      replaced_navigation_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&page_transition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&navigation_chain_end_) -
        reinterpret_cast<char*>(&page_transition_)) + sizeof(navigation_chain_end_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&is_restored_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&password_state_) -
        reinterpret_cast<char*>(&is_restored_)) + sizeof(password_state_));
    correct_referrer_policy_ = 1;
    redirect_type_ = 1;
  }
  blocked_state_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TabNavigation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string virtual_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_virtual_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string referrer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_referrer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.SyncEnums.PageTransition page_transition = 6 [default = LINK];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SyncEnums_PageTransition_IsValid(val))) {
            _internal_set_page_transition(static_cast<::sync_pb::SyncEnums_PageTransition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.SyncEnums.PageTransitionRedirectType redirect_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SyncEnums_PageTransitionRedirectType_IsValid(val))) {
            _internal_set_redirect_type(static_cast<::sync_pb::SyncEnums_PageTransitionRedirectType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 unique_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_unique_id(&has_bits);
          unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp_msec = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_timestamp_msec(&has_bits);
          timestamp_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool navigation_forward_back = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_navigation_forward_back(&has_bits);
          navigation_forward_back_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool navigation_from_address_bar = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_navigation_from_address_bar(&has_bits);
          navigation_from_address_bar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool navigation_home_page = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_navigation_home_page(&has_bits);
          navigation_home_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool navigation_chain_start = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_navigation_chain_start(&has_bits);
          navigation_chain_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool navigation_chain_end = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_navigation_chain_end(&has_bits);
          navigation_chain_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 global_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_global_id(&has_bits);
          global_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string search_terms = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_search_terms();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string favicon_url = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_favicon_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.TabNavigation.BlockedState blocked_state = 18 [default = STATE_ALLOWED];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::TabNavigation_BlockedState_IsValid(val))) {
            _internal_set_blocked_state(static_cast<::sync_pb::TabNavigation_BlockedState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 http_status_code = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_http_status_code(&has_bits);
          http_status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 obsolete_referrer_policy = 21 [deprecated = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_obsolete_referrer_policy(&has_bits);
          obsolete_referrer_policy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_restored = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_is_restored(&has_bits);
          is_restored_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.NavigationRedirect navigation_redirect = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_navigation_redirect(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string last_navigation_redirect_url = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_last_navigation_redirect_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 correct_referrer_policy = 25 [default = 1];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_correct_referrer_policy(&has_bits);
          correct_referrer_policy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.TabNavigation.PasswordState password_state = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::TabNavigation_PasswordState_IsValid(val))) {
            _internal_set_password_state(static_cast<::sync_pb::TabNavigation_PasswordState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 task_id = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_task_id(&has_bits);
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 ancestor_task_id = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ancestor_task_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<224>(ptr));
        } else if (static_cast<uint8_t>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_ancestor_task_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.ReplacedNavigation replaced_navigation = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_replaced_navigation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string page_language = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_page_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TabNavigation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.TabNavigation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string virtual_url = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_virtual_url(), target);
  }

  // optional string referrer = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_referrer(), target);
  }

  // optional string title = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_title(), target);
  }

  // optional .sync_pb.SyncEnums.PageTransition page_transition = 6 [default = LINK];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_page_transition(), target);
  }

  // optional .sync_pb.SyncEnums.PageTransitionRedirectType redirect_type = 7;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_redirect_type(), target);
  }

  // optional int32 unique_id = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_unique_id(), target);
  }

  // optional int64 timestamp_msec = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_timestamp_msec(), target);
  }

  // optional bool navigation_forward_back = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_navigation_forward_back(), target);
  }

  // optional bool navigation_from_address_bar = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_navigation_from_address_bar(), target);
  }

  // optional bool navigation_home_page = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_navigation_home_page(), target);
  }

  // optional bool navigation_chain_start = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_navigation_chain_start(), target);
  }

  // optional bool navigation_chain_end = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_navigation_chain_end(), target);
  }

  // optional int64 global_id = 15;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_global_id(), target);
  }

  // optional string search_terms = 16 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_search_terms(), target);
  }

  // optional string favicon_url = 17;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_favicon_url(), target);
  }

  // optional .sync_pb.TabNavigation.BlockedState blocked_state = 18 [default = STATE_ALLOWED];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_blocked_state(), target);
  }

  // optional int32 http_status_code = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_http_status_code(), target);
  }

  // optional int32 obsolete_referrer_policy = 21 [deprecated = true];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_obsolete_referrer_policy(), target);
  }

  // optional bool is_restored = 22;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_is_restored(), target);
  }

  // repeated .sync_pb.NavigationRedirect navigation_redirect = 23;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_navigation_redirect_size()); i < n; i++) {
    const auto& repfield = this->_internal_navigation_redirect(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string last_navigation_redirect_url = 24;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_last_navigation_redirect_url(), target);
  }

  // optional int32 correct_referrer_policy = 25 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_correct_referrer_policy(), target);
  }

  // optional .sync_pb.TabNavigation.PasswordState password_state = 26;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      26, this->_internal_password_state(), target);
  }

  // optional int64 task_id = 27;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(27, this->_internal_task_id(), target);
  }

  // repeated int64 ancestor_task_id = 28;
  for (int i = 0, n = this->_internal_ancestor_task_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(28, this->_internal_ancestor_task_id(i), target);
  }

  // optional .sync_pb.ReplacedNavigation replaced_navigation = 29;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::replaced_navigation(this),
        _Internal::replaced_navigation(this).GetCachedSize(), target, stream);
  }

  // optional string page_language = 30;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_page_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.TabNavigation)
  return target;
}

size_t TabNavigation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.TabNavigation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.NavigationRedirect navigation_redirect = 23;
  total_size += 2UL * this->_internal_navigation_redirect_size();
  for (const auto& msg : this->navigation_redirect_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 ancestor_task_id = 28;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->ancestor_task_id_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_ancestor_task_id_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string virtual_url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_virtual_url());
    }

    // optional string referrer = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_referrer());
    }

    // optional string title = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string search_terms = 16 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_search_terms());
    }

    // optional string favicon_url = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_favicon_url());
    }

    // optional string last_navigation_redirect_url = 24;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_navigation_redirect_url());
    }

    // optional string page_language = 30;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_page_language());
    }

    // optional .sync_pb.ReplacedNavigation replaced_navigation = 29;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *replaced_navigation_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .sync_pb.SyncEnums.PageTransition page_transition = 6 [default = LINK];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_page_transition());
    }

    // optional int32 unique_id = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unique_id());
    }

    // optional int64 timestamp_msec = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_msec());
    }

    // optional bool navigation_forward_back = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool navigation_from_address_bar = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool navigation_home_page = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool navigation_chain_start = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool navigation_chain_end = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool is_restored = 22;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional int64 global_id = 15;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_global_id());
    }

    // optional int32 http_status_code = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_http_status_code());
    }

    // optional int32 obsolete_referrer_policy = 21 [deprecated = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_obsolete_referrer_policy());
    }

    // optional int64 task_id = 27;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_task_id());
    }

    // optional .sync_pb.TabNavigation.PasswordState password_state = 26;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_password_state());
    }

    // optional int32 correct_referrer_policy = 25 [default = 1];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_correct_referrer_policy());
    }

    // optional .sync_pb.SyncEnums.PageTransitionRedirectType redirect_type = 7;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_redirect_type());
    }

  }
  // optional .sync_pb.TabNavigation.BlockedState blocked_state = 18 [default = STATE_ALLOWED];
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_blocked_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TabNavigation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TabNavigation*>(
      &from));
}

void TabNavigation::MergeFrom(const TabNavigation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.TabNavigation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  navigation_redirect_.MergeFrom(from.navigation_redirect_);
  ancestor_task_id_.MergeFrom(from.ancestor_task_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_virtual_url(from._internal_virtual_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_referrer(from._internal_referrer());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_search_terms(from._internal_search_terms());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_favicon_url(from._internal_favicon_url());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_last_navigation_redirect_url(from._internal_last_navigation_redirect_url());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_page_language(from._internal_page_language());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_replaced_navigation()->::sync_pb::ReplacedNavigation::MergeFrom(from._internal_replaced_navigation());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      page_transition_ = from.page_transition_;
    }
    if (cached_has_bits & 0x00000200u) {
      unique_id_ = from.unique_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      timestamp_msec_ = from.timestamp_msec_;
    }
    if (cached_has_bits & 0x00000800u) {
      navigation_forward_back_ = from.navigation_forward_back_;
    }
    if (cached_has_bits & 0x00001000u) {
      navigation_from_address_bar_ = from.navigation_from_address_bar_;
    }
    if (cached_has_bits & 0x00002000u) {
      navigation_home_page_ = from.navigation_home_page_;
    }
    if (cached_has_bits & 0x00004000u) {
      navigation_chain_start_ = from.navigation_chain_start_;
    }
    if (cached_has_bits & 0x00008000u) {
      navigation_chain_end_ = from.navigation_chain_end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      is_restored_ = from.is_restored_;
    }
    if (cached_has_bits & 0x00020000u) {
      global_id_ = from.global_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      http_status_code_ = from.http_status_code_;
    }
    if (cached_has_bits & 0x00080000u) {
      obsolete_referrer_policy_ = from.obsolete_referrer_policy_;
    }
    if (cached_has_bits & 0x00100000u) {
      task_id_ = from.task_id_;
    }
    if (cached_has_bits & 0x00200000u) {
      password_state_ = from.password_state_;
    }
    if (cached_has_bits & 0x00400000u) {
      correct_referrer_policy_ = from.correct_referrer_policy_;
    }
    if (cached_has_bits & 0x00800000u) {
      redirect_type_ = from.redirect_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_blocked_state(from._internal_blocked_state());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TabNavigation::CopyFrom(const TabNavigation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.TabNavigation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabNavigation::IsInitialized() const {
  return true;
}

void TabNavigation::InternalSwap(TabNavigation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  navigation_redirect_.InternalSwap(&other->navigation_redirect_);
  ancestor_task_id_.InternalSwap(&other->ancestor_task_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &virtual_url_, lhs_arena,
      &other->virtual_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &referrer_, lhs_arena,
      &other->referrer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &search_terms_, lhs_arena,
      &other->search_terms_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &favicon_url_, lhs_arena,
      &other->favicon_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &last_navigation_redirect_url_, lhs_arena,
      &other->last_navigation_redirect_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &page_language_, lhs_arena,
      &other->page_language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TabNavigation, password_state_)
      + sizeof(TabNavigation::password_state_)
      - PROTOBUF_FIELD_OFFSET(TabNavigation, replaced_navigation_)>(
          reinterpret_cast<char*>(&replaced_navigation_),
          reinterpret_cast<char*>(&other->replaced_navigation_));
  swap(correct_referrer_policy_, other->correct_referrer_policy_);
  swap(redirect_type_, other->redirect_type_);
  swap(blocked_state_, other->blocked_state_);
}

std::string TabNavigation::GetTypeName() const {
  return "sync_pb.TabNavigation";
}


// ===================================================================

class NavigationRedirect::_Internal {
 public:
  using HasBits = decltype(std::declval<NavigationRedirect>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NavigationRedirect::NavigationRedirect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.NavigationRedirect)
}
NavigationRedirect::NavigationRedirect(const NavigationRedirect& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.NavigationRedirect)
}

inline void NavigationRedirect::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NavigationRedirect::~NavigationRedirect() {
  // @@protoc_insertion_point(destructor:sync_pb.NavigationRedirect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NavigationRedirect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
}

void NavigationRedirect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NavigationRedirect::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.NavigationRedirect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NavigationRedirect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NavigationRedirect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.NavigationRedirect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.NavigationRedirect)
  return target;
}

size_t NavigationRedirect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.NavigationRedirect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string url = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationRedirect::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NavigationRedirect*>(
      &from));
}

void NavigationRedirect::MergeFrom(const NavigationRedirect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.NavigationRedirect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_url()) {
    _internal_set_url(from._internal_url());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NavigationRedirect::CopyFrom(const NavigationRedirect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.NavigationRedirect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationRedirect::IsInitialized() const {
  return true;
}

void NavigationRedirect::InternalSwap(NavigationRedirect* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
}

std::string NavigationRedirect::GetTypeName() const {
  return "sync_pb.NavigationRedirect";
}


// ===================================================================

class ReplacedNavigation::_Internal {
 public:
  using HasBits = decltype(std::declval<ReplacedNavigation>()._has_bits_);
  static void set_has_first_committed_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_first_timestamp_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_first_page_transition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ReplacedNavigation::ReplacedNavigation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.ReplacedNavigation)
}
ReplacedNavigation::ReplacedNavigation(const ReplacedNavigation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  first_committed_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    first_committed_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_first_committed_url()) {
    first_committed_url_.Set(from._internal_first_committed_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&first_timestamp_msec_, &from.first_timestamp_msec_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_page_transition_) -
    reinterpret_cast<char*>(&first_timestamp_msec_)) + sizeof(first_page_transition_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.ReplacedNavigation)
}

inline void ReplacedNavigation::SharedCtor() {
first_committed_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  first_committed_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&first_timestamp_msec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&first_page_transition_) -
    reinterpret_cast<char*>(&first_timestamp_msec_)) + sizeof(first_page_transition_));
}

ReplacedNavigation::~ReplacedNavigation() {
  // @@protoc_insertion_point(destructor:sync_pb.ReplacedNavigation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReplacedNavigation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  first_committed_url_.Destroy();
}

void ReplacedNavigation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReplacedNavigation::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ReplacedNavigation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    first_committed_url_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&first_timestamp_msec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_page_transition_) -
        reinterpret_cast<char*>(&first_timestamp_msec_)) + sizeof(first_page_transition_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ReplacedNavigation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string first_committed_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_first_committed_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 first_timestamp_msec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_first_timestamp_msec(&has_bits);
          first_timestamp_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.SyncEnums.PageTransition first_page_transition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SyncEnums_PageTransition_IsValid(val))) {
            _internal_set_first_page_transition(static_cast<::sync_pb::SyncEnums_PageTransition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReplacedNavigation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.ReplacedNavigation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string first_committed_url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_first_committed_url(), target);
  }

  // optional int64 first_timestamp_msec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_first_timestamp_msec(), target);
  }

  // optional .sync_pb.SyncEnums.PageTransition first_page_transition = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_first_page_transition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.ReplacedNavigation)
  return target;
}

size_t ReplacedNavigation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ReplacedNavigation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string first_committed_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_first_committed_url());
    }

    // optional int64 first_timestamp_msec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_first_timestamp_msec());
    }

    // optional .sync_pb.SyncEnums.PageTransition first_page_transition = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_first_page_transition());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplacedNavigation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ReplacedNavigation*>(
      &from));
}

void ReplacedNavigation::MergeFrom(const ReplacedNavigation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ReplacedNavigation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_first_committed_url(from._internal_first_committed_url());
    }
    if (cached_has_bits & 0x00000002u) {
      first_timestamp_msec_ = from.first_timestamp_msec_;
    }
    if (cached_has_bits & 0x00000004u) {
      first_page_transition_ = from.first_page_transition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ReplacedNavigation::CopyFrom(const ReplacedNavigation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ReplacedNavigation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplacedNavigation::IsInitialized() const {
  return true;
}

void ReplacedNavigation::InternalSwap(ReplacedNavigation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &first_committed_url_, lhs_arena,
      &other->first_committed_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplacedNavigation, first_page_transition_)
      + sizeof(ReplacedNavigation::first_page_transition_)
      - PROTOBUF_FIELD_OFFSET(ReplacedNavigation, first_timestamp_msec_)>(
          reinterpret_cast<char*>(&first_timestamp_msec_),
          reinterpret_cast<char*>(&other->first_timestamp_msec_));
}

std::string ReplacedNavigation::GetTypeName() const {
  return "sync_pb.ReplacedNavigation";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::SessionSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::SessionSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SessionSpecifics >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SessionHeader*
Arena::CreateMaybeMessage< ::sync_pb::SessionHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SessionHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SessionWindow*
Arena::CreateMaybeMessage< ::sync_pb::SessionWindow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SessionWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SessionTab*
Arena::CreateMaybeMessage< ::sync_pb::SessionTab >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SessionTab >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::TabNavigation*
Arena::CreateMaybeMessage< ::sync_pb::TabNavigation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::TabNavigation >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::NavigationRedirect*
Arena::CreateMaybeMessage< ::sync_pb::NavigationRedirect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::NavigationRedirect >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::ReplacedNavigation*
Arena::CreateMaybeMessage< ::sync_pb::ReplacedNavigation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::ReplacedNavigation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
