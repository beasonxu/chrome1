// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/app_notification_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fapp_5fnotification_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fapp_5fnotification_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fapp_5fnotification_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fapp_5fnotification_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class AppNotification;
struct AppNotificationDefaultTypeInternal;
extern AppNotificationDefaultTypeInternal _AppNotification_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::AppNotification* Arena::CreateMaybeMessage<::sync_pb::AppNotification>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class AppNotification final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AppNotification) */ {
 public:
  inline AppNotification() : AppNotification(nullptr) {}
  ~AppNotification() override;
  explicit PROTOBUF_CONSTEXPR AppNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppNotification(const AppNotification& from);
  AppNotification(AppNotification&& from) noexcept
    : AppNotification() {
    *this = ::std::move(from);
  }

  inline AppNotification& operator=(const AppNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppNotification& operator=(AppNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AppNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppNotification* internal_default_instance() {
    return reinterpret_cast<const AppNotification*>(
               &_AppNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AppNotification& a, AppNotification& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AppNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppNotification>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AppNotification& from);
  void MergeFrom(const AppNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AppNotification";
  }
  protected:
  explicit AppNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuidFieldNumber = 1,
    kAppIdFieldNumber = 2,
    kTitleFieldNumber = 4,
    kBodyTextFieldNumber = 5,
    kLinkUrlFieldNumber = 6,
    kLinkTextFieldNumber = 7,
    kCreationTimestampMsFieldNumber = 3,
  };
  // optional string guid = 1;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  const std::string& guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guid();
  PROTOBUF_NODISCARD std::string* release_guid();
  void set_allocated_guid(std::string* guid);
  private:
  const std::string& _internal_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guid(const std::string& value);
  std::string* _internal_mutable_guid();
  public:

  // optional string app_id = 2;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // optional string title = 4;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string body_text = 5;
  bool has_body_text() const;
  private:
  bool _internal_has_body_text() const;
  public:
  void clear_body_text();
  const std::string& body_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body_text();
  PROTOBUF_NODISCARD std::string* release_body_text();
  void set_allocated_body_text(std::string* body_text);
  private:
  const std::string& _internal_body_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body_text(const std::string& value);
  std::string* _internal_mutable_body_text();
  public:

  // optional string link_url = 6;
  bool has_link_url() const;
  private:
  bool _internal_has_link_url() const;
  public:
  void clear_link_url();
  const std::string& link_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_link_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_link_url();
  PROTOBUF_NODISCARD std::string* release_link_url();
  void set_allocated_link_url(std::string* link_url);
  private:
  const std::string& _internal_link_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_link_url(const std::string& value);
  std::string* _internal_mutable_link_url();
  public:

  // optional string link_text = 7;
  bool has_link_text() const;
  private:
  bool _internal_has_link_text() const;
  public:
  void clear_link_text();
  const std::string& link_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_link_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_link_text();
  PROTOBUF_NODISCARD std::string* release_link_text();
  void set_allocated_link_text(std::string* link_text);
  private:
  const std::string& _internal_link_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_link_text(const std::string& value);
  std::string* _internal_mutable_link_text();
  public:

  // optional int64 creation_timestamp_ms = 3;
  bool has_creation_timestamp_ms() const;
  private:
  bool _internal_has_creation_timestamp_ms() const;
  public:
  void clear_creation_timestamp_ms();
  int64_t creation_timestamp_ms() const;
  void set_creation_timestamp_ms(int64_t value);
  private:
  int64_t _internal_creation_timestamp_ms() const;
  void _internal_set_creation_timestamp_ms(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.AppNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr link_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr link_text_;
  int64_t creation_timestamp_ms_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fapp_5fnotification_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AppNotification

// optional string guid = 1;
inline bool AppNotification::_internal_has_guid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppNotification::has_guid() const {
  return _internal_has_guid();
}
inline void AppNotification::clear_guid() {
  guid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppNotification::guid() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppNotification.guid)
  return _internal_guid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppNotification::set_guid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 guid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AppNotification.guid)
}
inline std::string* AppNotification::mutable_guid() {
  std::string* _s = _internal_mutable_guid();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppNotification.guid)
  return _s;
}
inline const std::string& AppNotification::_internal_guid() const {
  return guid_.Get();
}
inline void AppNotification::_internal_set_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  guid_.Set(value, GetArenaForAllocation());
}
inline std::string* AppNotification::_internal_mutable_guid() {
  _has_bits_[0] |= 0x00000001u;
  return guid_.Mutable(GetArenaForAllocation());
}
inline std::string* AppNotification::release_guid() {
  // @@protoc_insertion_point(field_release:sync_pb.AppNotification.guid)
  if (!_internal_has_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = guid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault()) {
    guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppNotification::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  guid_.SetAllocated(guid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (guid_.IsDefault()) {
    guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppNotification.guid)
}

// optional string app_id = 2;
inline bool AppNotification::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppNotification::has_app_id() const {
  return _internal_has_app_id();
}
inline void AppNotification::clear_app_id() {
  app_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AppNotification::app_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppNotification.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppNotification::set_app_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 app_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AppNotification.app_id)
}
inline std::string* AppNotification::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppNotification.app_id)
  return _s;
}
inline const std::string& AppNotification::_internal_app_id() const {
  return app_id_.Get();
}
inline void AppNotification::_internal_set_app_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AppNotification::_internal_mutable_app_id() {
  _has_bits_[0] |= 0x00000002u;
  return app_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AppNotification::release_app_id() {
  // @@protoc_insertion_point(field_release:sync_pb.AppNotification.app_id)
  if (!_internal_has_app_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = app_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_id_.IsDefault()) {
    app_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppNotification::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  app_id_.SetAllocated(app_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_id_.IsDefault()) {
    app_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppNotification.app_id)
}

// optional int64 creation_timestamp_ms = 3;
inline bool AppNotification::_internal_has_creation_timestamp_ms() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AppNotification::has_creation_timestamp_ms() const {
  return _internal_has_creation_timestamp_ms();
}
inline void AppNotification::clear_creation_timestamp_ms() {
  creation_timestamp_ms_ = int64_t{0};
  _has_bits_[0] &= ~0x00000040u;
}
inline int64_t AppNotification::_internal_creation_timestamp_ms() const {
  return creation_timestamp_ms_;
}
inline int64_t AppNotification::creation_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppNotification.creation_timestamp_ms)
  return _internal_creation_timestamp_ms();
}
inline void AppNotification::_internal_set_creation_timestamp_ms(int64_t value) {
  _has_bits_[0] |= 0x00000040u;
  creation_timestamp_ms_ = value;
}
inline void AppNotification::set_creation_timestamp_ms(int64_t value) {
  _internal_set_creation_timestamp_ms(value);
  // @@protoc_insertion_point(field_set:sync_pb.AppNotification.creation_timestamp_ms)
}

// optional string title = 4;
inline bool AppNotification::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppNotification::has_title() const {
  return _internal_has_title();
}
inline void AppNotification::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AppNotification::title() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppNotification.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppNotification::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AppNotification.title)
}
inline std::string* AppNotification::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppNotification.title)
  return _s;
}
inline const std::string& AppNotification::_internal_title() const {
  return title_.Get();
}
inline void AppNotification::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* AppNotification::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000004u;
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* AppNotification::release_title() {
  // @@protoc_insertion_point(field_release:sync_pb.AppNotification.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppNotification::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppNotification.title)
}

// optional string body_text = 5;
inline bool AppNotification::_internal_has_body_text() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AppNotification::has_body_text() const {
  return _internal_has_body_text();
}
inline void AppNotification::clear_body_text() {
  body_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AppNotification::body_text() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppNotification.body_text)
  return _internal_body_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppNotification::set_body_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 body_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AppNotification.body_text)
}
inline std::string* AppNotification::mutable_body_text() {
  std::string* _s = _internal_mutable_body_text();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppNotification.body_text)
  return _s;
}
inline const std::string& AppNotification::_internal_body_text() const {
  return body_text_.Get();
}
inline void AppNotification::_internal_set_body_text(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  body_text_.Set(value, GetArenaForAllocation());
}
inline std::string* AppNotification::_internal_mutable_body_text() {
  _has_bits_[0] |= 0x00000008u;
  return body_text_.Mutable(GetArenaForAllocation());
}
inline std::string* AppNotification::release_body_text() {
  // @@protoc_insertion_point(field_release:sync_pb.AppNotification.body_text)
  if (!_internal_has_body_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = body_text_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (body_text_.IsDefault()) {
    body_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppNotification::set_allocated_body_text(std::string* body_text) {
  if (body_text != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  body_text_.SetAllocated(body_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (body_text_.IsDefault()) {
    body_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppNotification.body_text)
}

// optional string link_url = 6;
inline bool AppNotification::_internal_has_link_url() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AppNotification::has_link_url() const {
  return _internal_has_link_url();
}
inline void AppNotification::clear_link_url() {
  link_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AppNotification::link_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppNotification.link_url)
  return _internal_link_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppNotification::set_link_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 link_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AppNotification.link_url)
}
inline std::string* AppNotification::mutable_link_url() {
  std::string* _s = _internal_mutable_link_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppNotification.link_url)
  return _s;
}
inline const std::string& AppNotification::_internal_link_url() const {
  return link_url_.Get();
}
inline void AppNotification::_internal_set_link_url(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  link_url_.Set(value, GetArenaForAllocation());
}
inline std::string* AppNotification::_internal_mutable_link_url() {
  _has_bits_[0] |= 0x00000010u;
  return link_url_.Mutable(GetArenaForAllocation());
}
inline std::string* AppNotification::release_link_url() {
  // @@protoc_insertion_point(field_release:sync_pb.AppNotification.link_url)
  if (!_internal_has_link_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = link_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (link_url_.IsDefault()) {
    link_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppNotification::set_allocated_link_url(std::string* link_url) {
  if (link_url != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  link_url_.SetAllocated(link_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (link_url_.IsDefault()) {
    link_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppNotification.link_url)
}

// optional string link_text = 7;
inline bool AppNotification::_internal_has_link_text() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AppNotification::has_link_text() const {
  return _internal_has_link_text();
}
inline void AppNotification::clear_link_text() {
  link_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AppNotification::link_text() const {
  // @@protoc_insertion_point(field_get:sync_pb.AppNotification.link_text)
  return _internal_link_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppNotification::set_link_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 link_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AppNotification.link_text)
}
inline std::string* AppNotification::mutable_link_text() {
  std::string* _s = _internal_mutable_link_text();
  // @@protoc_insertion_point(field_mutable:sync_pb.AppNotification.link_text)
  return _s;
}
inline const std::string& AppNotification::_internal_link_text() const {
  return link_text_.Get();
}
inline void AppNotification::_internal_set_link_text(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  link_text_.Set(value, GetArenaForAllocation());
}
inline std::string* AppNotification::_internal_mutable_link_text() {
  _has_bits_[0] |= 0x00000020u;
  return link_text_.Mutable(GetArenaForAllocation());
}
inline std::string* AppNotification::release_link_text() {
  // @@protoc_insertion_point(field_release:sync_pb.AppNotification.link_text)
  if (!_internal_has_link_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = link_text_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (link_text_.IsDefault()) {
    link_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppNotification::set_allocated_link_text(std::string* link_text) {
  if (link_text != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  link_text_.SetAllocated(link_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (link_text_.IsDefault()) {
    link_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AppNotification.link_text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fapp_5fnotification_5fspecifics_2eproto
