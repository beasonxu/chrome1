// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/sharing_message_specifics.proto

#include "components/sync/protocol/sharing_message_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration(
    ::_pbi::ConstantInitialized)
  : token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ttl_(0)
  , priority_(0){}
struct SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfigurationDefaultTypeInternal() {}
  union {
    SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfigurationDefaultTypeInternal _SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration_default_instance_;
PROTOBUF_CONSTEXPR SharingMessageSpecifics_ChannelConfiguration::SharingMessageSpecifics_ChannelConfiguration(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct SharingMessageSpecifics_ChannelConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SharingMessageSpecifics_ChannelConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SharingMessageSpecifics_ChannelConfigurationDefaultTypeInternal() {}
  union {
    SharingMessageSpecifics_ChannelConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SharingMessageSpecifics_ChannelConfigurationDefaultTypeInternal _SharingMessageSpecifics_ChannelConfiguration_default_instance_;
PROTOBUF_CONSTEXPR SharingMessageSpecifics::SharingMessageSpecifics(
    ::_pbi::ConstantInitialized)
  : message_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , payload_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , channel_configuration_(nullptr){}
struct SharingMessageSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SharingMessageSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SharingMessageSpecificsDefaultTypeInternal() {}
  union {
    SharingMessageSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SharingMessageSpecificsDefaultTypeInternal _SharingMessageSpecifics_default_instance_;
PROTOBUF_CONSTEXPR SharingMessageCommitError::SharingMessageCommitError(
    ::_pbi::ConstantInitialized)
  : error_code_(0)
{}
struct SharingMessageCommitErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SharingMessageCommitErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SharingMessageCommitErrorDefaultTypeInternal() {}
  union {
    SharingMessageCommitError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SharingMessageCommitErrorDefaultTypeInternal _SharingMessageCommitError_default_instance_;
}  // namespace sync_pb
namespace sync_pb {
bool SharingMessageCommitError_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SharingMessageCommitError_ErrorCode_strings[14] = {};

static const char SharingMessageCommitError_ErrorCode_names[] =
  "DEPRECATED_SYNC_SERVER_OR_AUTH_ERROR"
  "INTERNAL"
  "INVALID_ARGUMENT"
  "NONE"
  "NOT_FOUND"
  "PERMISSION_DENIED"
  "RESOURCE_EXHAUSTED"
  "SYNC_AUTH_ERROR"
  "SYNC_NETWORK_ERROR"
  "SYNC_SERVER_ERROR"
  "SYNC_TIMEOUT"
  "SYNC_TURNED_OFF"
  "UNAUTHENTICATED"
  "UNAVAILABLE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SharingMessageCommitError_ErrorCode_entries[] = {
  { {SharingMessageCommitError_ErrorCode_names + 0, 36}, 10 },
  { {SharingMessageCommitError_ErrorCode_names + 36, 8}, 3 },
  { {SharingMessageCommitError_ErrorCode_names + 44, 16}, 1 },
  { {SharingMessageCommitError_ErrorCode_names + 60, 4}, 0 },
  { {SharingMessageCommitError_ErrorCode_names + 64, 9}, 2 },
  { {SharingMessageCommitError_ErrorCode_names + 73, 17}, 7 },
  { {SharingMessageCommitError_ErrorCode_names + 90, 18}, 5 },
  { {SharingMessageCommitError_ErrorCode_names + 108, 15}, 13 },
  { {SharingMessageCommitError_ErrorCode_names + 123, 18}, 9 },
  { {SharingMessageCommitError_ErrorCode_names + 141, 17}, 12 },
  { {SharingMessageCommitError_ErrorCode_names + 158, 12}, 11 },
  { {SharingMessageCommitError_ErrorCode_names + 170, 15}, 8 },
  { {SharingMessageCommitError_ErrorCode_names + 185, 15}, 6 },
  { {SharingMessageCommitError_ErrorCode_names + 200, 11}, 4 },
};

static const int SharingMessageCommitError_ErrorCode_entries_by_number[] = {
  3, // 0 -> NONE
  2, // 1 -> INVALID_ARGUMENT
  4, // 2 -> NOT_FOUND
  1, // 3 -> INTERNAL
  13, // 4 -> UNAVAILABLE
  6, // 5 -> RESOURCE_EXHAUSTED
  12, // 6 -> UNAUTHENTICATED
  5, // 7 -> PERMISSION_DENIED
  11, // 8 -> SYNC_TURNED_OFF
  8, // 9 -> SYNC_NETWORK_ERROR
  0, // 10 -> DEPRECATED_SYNC_SERVER_OR_AUTH_ERROR
  10, // 11 -> SYNC_TIMEOUT
  9, // 12 -> SYNC_SERVER_ERROR
  7, // 13 -> SYNC_AUTH_ERROR
};

const std::string& SharingMessageCommitError_ErrorCode_Name(
    SharingMessageCommitError_ErrorCode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SharingMessageCommitError_ErrorCode_entries,
          SharingMessageCommitError_ErrorCode_entries_by_number,
          14, SharingMessageCommitError_ErrorCode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SharingMessageCommitError_ErrorCode_entries,
      SharingMessageCommitError_ErrorCode_entries_by_number,
      14, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SharingMessageCommitError_ErrorCode_strings[idx].get();
}
bool SharingMessageCommitError_ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SharingMessageCommitError_ErrorCode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SharingMessageCommitError_ErrorCode_entries, 14, name, &int_value);
  if (success) {
    *value = static_cast<SharingMessageCommitError_ErrorCode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::NONE;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::INVALID_ARGUMENT;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::NOT_FOUND;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::INTERNAL;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::UNAVAILABLE;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::RESOURCE_EXHAUSTED;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::UNAUTHENTICATED;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::PERMISSION_DENIED;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::SYNC_TURNED_OFF;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::SYNC_NETWORK_ERROR;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::DEPRECATED_SYNC_SERVER_OR_AUTH_ERROR;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::SYNC_TIMEOUT;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::SYNC_SERVER_ERROR;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::SYNC_AUTH_ERROR;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::ErrorCode_MIN;
constexpr SharingMessageCommitError_ErrorCode SharingMessageCommitError::ErrorCode_MAX;
constexpr int SharingMessageCommitError::ErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration>()._has_bits_);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ttl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
}
SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration(const SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    token_.Set(from._internal_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ttl_, &from.ttl_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&ttl_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
}

inline void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::SharedCtor() {
token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ttl_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&ttl_)) + sizeof(priority_));
}

SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::~SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration() {
  // @@protoc_insertion_point(destructor:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.Destroy();
}

void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&ttl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&priority_) -
        reinterpret_cast<char*>(&ttl_)) + sizeof(priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ttl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ttl(&has_bits);
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // optional int32 ttl = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ttl(), target);
  }

  // optional int32 priority = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
  return target;
}

size_t SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token());
    }

    // optional int32 ttl = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ttl());
    }

    // optional int32 priority = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration*>(
      &from));
}

void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::MergeFrom(const SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      ttl_ = from.ttl_;
    }
    if (cached_has_bits & 0x00000004u) {
      priority_ = from.priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::CopyFrom(const SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::IsInitialized() const {
  return true;
}

void SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::InternalSwap(SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration, priority_)
      + sizeof(SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::priority_)
      - PROTOBUF_FIELD_OFFSET(SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration, ttl_)>(
          reinterpret_cast<char*>(&ttl_),
          reinterpret_cast<char*>(&other->ttl_));
}

std::string SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::GetTypeName() const {
  return "sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration";
}


// ===================================================================

class SharingMessageSpecifics_ChannelConfiguration::_Internal {
 public:
  static const ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration& fcm(const SharingMessageSpecifics_ChannelConfiguration* msg);
};

const ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration&
SharingMessageSpecifics_ChannelConfiguration::_Internal::fcm(const SharingMessageSpecifics_ChannelConfiguration* msg) {
  return *msg->channel_configuration_.fcm_;
}
void SharingMessageSpecifics_ChannelConfiguration::set_allocated_fcm(::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration* fcm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_channel_configuration();
  if (fcm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fcm);
    if (message_arena != submessage_arena) {
      fcm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fcm, submessage_arena);
    }
    set_has_fcm();
    channel_configuration_.fcm_ = fcm;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SharingMessageSpecifics.ChannelConfiguration.fcm)
}
SharingMessageSpecifics_ChannelConfiguration::SharingMessageSpecifics_ChannelConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
}
SharingMessageSpecifics_ChannelConfiguration::SharingMessageSpecifics_ChannelConfiguration(const SharingMessageSpecifics_ChannelConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_channel_configuration();
  switch (from.channel_configuration_case()) {
    case kFcm: {
      _internal_mutable_fcm()->::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::MergeFrom(from._internal_fcm());
      break;
    }
    case kServer: {
      _internal_set_server(from._internal_server());
      break;
    }
    case CHANNEL_CONFIGURATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
}

inline void SharingMessageSpecifics_ChannelConfiguration::SharedCtor() {
clear_has_channel_configuration();
}

SharingMessageSpecifics_ChannelConfiguration::~SharingMessageSpecifics_ChannelConfiguration() {
  // @@protoc_insertion_point(destructor:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SharingMessageSpecifics_ChannelConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_channel_configuration()) {
    clear_channel_configuration();
  }
}

void SharingMessageSpecifics_ChannelConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingMessageSpecifics_ChannelConfiguration::clear_channel_configuration() {
// @@protoc_insertion_point(one_of_clear_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
  switch (channel_configuration_case()) {
    case kFcm: {
      if (GetArenaForAllocation() == nullptr) {
        delete channel_configuration_.fcm_;
      }
      break;
    }
    case kServer: {
      channel_configuration_.server_.Destroy();
      break;
    }
    case CHANNEL_CONFIGURATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHANNEL_CONFIGURATION_NOT_SET;
}


void SharingMessageSpecifics_ChannelConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_channel_configuration();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingMessageSpecifics_ChannelConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fcm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes server = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_server();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingMessageSpecifics_ChannelConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (channel_configuration_case()) {
    case kFcm: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::fcm(this),
          _Internal::fcm(this).GetCachedSize(), target, stream);
      break;
    }
    case kServer: {
      target = stream->WriteBytesMaybeAliased(
          2, this->_internal_server(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
  return target;
}

size_t SharingMessageSpecifics_ChannelConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (channel_configuration_case()) {
    // .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;
    case kFcm: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *channel_configuration_.fcm_);
      break;
    }
    // bytes server = 2;
    case kServer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_server());
      break;
    }
    case CHANNEL_CONFIGURATION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingMessageSpecifics_ChannelConfiguration::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SharingMessageSpecifics_ChannelConfiguration*>(
      &from));
}

void SharingMessageSpecifics_ChannelConfiguration::MergeFrom(const SharingMessageSpecifics_ChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.channel_configuration_case()) {
    case kFcm: {
      _internal_mutable_fcm()->::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration::MergeFrom(from._internal_fcm());
      break;
    }
    case kServer: {
      _internal_set_server(from._internal_server());
      break;
    }
    case CHANNEL_CONFIGURATION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingMessageSpecifics_ChannelConfiguration::CopyFrom(const SharingMessageSpecifics_ChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingMessageSpecifics_ChannelConfiguration::IsInitialized() const {
  return true;
}

void SharingMessageSpecifics_ChannelConfiguration::InternalSwap(SharingMessageSpecifics_ChannelConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(channel_configuration_, other->channel_configuration_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string SharingMessageSpecifics_ChannelConfiguration::GetTypeName() const {
  return "sync_pb.SharingMessageSpecifics.ChannelConfiguration";
}


// ===================================================================

class SharingMessageSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingMessageSpecifics>()._has_bits_);
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::SharingMessageSpecifics_ChannelConfiguration& channel_configuration(const SharingMessageSpecifics* msg);
  static void set_has_channel_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sync_pb::SharingMessageSpecifics_ChannelConfiguration&
SharingMessageSpecifics::_Internal::channel_configuration(const SharingMessageSpecifics* msg) {
  return *msg->channel_configuration_;
}
SharingMessageSpecifics::SharingMessageSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SharingMessageSpecifics)
}
SharingMessageSpecifics::SharingMessageSpecifics(const SharingMessageSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message_id()) {
    message_id_.Set(from._internal_message_id(), 
      GetArenaForAllocation());
  }
  payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload()) {
    payload_.Set(from._internal_payload(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_channel_configuration()) {
    channel_configuration_ = new ::sync_pb::SharingMessageSpecifics_ChannelConfiguration(*from.channel_configuration_);
  } else {
    channel_configuration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.SharingMessageSpecifics)
}

inline void SharingMessageSpecifics::SharedCtor() {
message_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
payload_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
channel_configuration_ = nullptr;
}

SharingMessageSpecifics::~SharingMessageSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.SharingMessageSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SharingMessageSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_id_.Destroy();
  payload_.Destroy();
  if (this != internal_default_instance()) delete channel_configuration_;
}

void SharingMessageSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingMessageSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SharingMessageSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      message_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      payload_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(channel_configuration_ != nullptr);
      channel_configuration_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingMessageSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingMessageSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SharingMessageSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_id(), target);
  }

  // optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::channel_configuration(this),
        _Internal::channel_configuration(this).GetCachedSize(), target, stream);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SharingMessageSpecifics)
  return target;
}

size_t SharingMessageSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SharingMessageSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string message_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_id());
    }

    // optional bytes payload = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

    // optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *channel_configuration_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingMessageSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SharingMessageSpecifics*>(
      &from));
}

void SharingMessageSpecifics::MergeFrom(const SharingMessageSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SharingMessageSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message_id(from._internal_message_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_channel_configuration()->::sync_pb::SharingMessageSpecifics_ChannelConfiguration::MergeFrom(from._internal_channel_configuration());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingMessageSpecifics::CopyFrom(const SharingMessageSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SharingMessageSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingMessageSpecifics::IsInitialized() const {
  return true;
}

void SharingMessageSpecifics::InternalSwap(SharingMessageSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_id_, lhs_arena,
      &other->message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
  swap(channel_configuration_, other->channel_configuration_);
}

std::string SharingMessageSpecifics::GetTypeName() const {
  return "sync_pb.SharingMessageSpecifics";
}


// ===================================================================

class SharingMessageCommitError::_Internal {
 public:
  using HasBits = decltype(std::declval<SharingMessageCommitError>()._has_bits_);
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SharingMessageCommitError::SharingMessageCommitError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.SharingMessageCommitError)
}
SharingMessageCommitError::SharingMessageCommitError(const SharingMessageCommitError& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.SharingMessageCommitError)
}

inline void SharingMessageCommitError::SharedCtor() {
error_code_ = 0;
}

SharingMessageCommitError::~SharingMessageCommitError() {
  // @@protoc_insertion_point(destructor:sync_pb.SharingMessageCommitError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SharingMessageCommitError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharingMessageCommitError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingMessageCommitError::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SharingMessageCommitError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingMessageCommitError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.SharingMessageCommitError.ErrorCode error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::SharingMessageCommitError_ErrorCode_IsValid(val))) {
            _internal_set_error_code(static_cast<::sync_pb::SharingMessageCommitError_ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingMessageCommitError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.SharingMessageCommitError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.SharingMessageCommitError.ErrorCode error_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.SharingMessageCommitError)
  return target;
}

size_t SharingMessageCommitError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SharingMessageCommitError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .sync_pb.SharingMessageCommitError.ErrorCode error_code = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingMessageCommitError::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SharingMessageCommitError*>(
      &from));
}

void SharingMessageCommitError::MergeFrom(const SharingMessageCommitError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SharingMessageCommitError)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error_code()) {
    _internal_set_error_code(from._internal_error_code());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingMessageCommitError::CopyFrom(const SharingMessageCommitError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SharingMessageCommitError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingMessageCommitError::IsInitialized() const {
  return true;
}

void SharingMessageCommitError::InternalSwap(SharingMessageCommitError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(error_code_, other->error_code_);
}

std::string SharingMessageCommitError::GetTypeName() const {
  return "sync_pb.SharingMessageCommitError";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration*
Arena::CreateMaybeMessage< ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SharingMessageSpecifics_ChannelConfiguration_FCMChannelConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SharingMessageSpecifics_ChannelConfiguration*
Arena::CreateMaybeMessage< ::sync_pb::SharingMessageSpecifics_ChannelConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SharingMessageSpecifics_ChannelConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SharingMessageSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::SharingMessageSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SharingMessageSpecifics >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::SharingMessageCommitError*
Arena::CreateMaybeMessage< ::sync_pb::SharingMessageCommitError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::SharingMessageCommitError >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
