// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/wifi_configuration_specifics.proto

#include "components/sync/protocol/wifi_configuration_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration(
    ::_pbi::ConstantInitialized)
  : excluded_domains_()
  , http_proxy_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secure_http_proxy_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , socks_host_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , http_proxy_port_(0)
  , secure_http_proxy_port_(0)
  , socks_host_port_(0){}
struct WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfigurationDefaultTypeInternal() {}
  union {
    WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfigurationDefaultTypeInternal _WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration_default_instance_;
PROTOBUF_CONSTEXPR WifiConfigurationSpecifics_ProxyConfiguration::WifiConfigurationSpecifics_ProxyConfiguration(
    ::_pbi::ConstantInitialized)
  : autoconfiguration_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , manual_proxy_configuration_(nullptr)
  , proxy_option_(0)
{}
struct WifiConfigurationSpecifics_ProxyConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WifiConfigurationSpecifics_ProxyConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WifiConfigurationSpecifics_ProxyConfigurationDefaultTypeInternal() {}
  union {
    WifiConfigurationSpecifics_ProxyConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WifiConfigurationSpecifics_ProxyConfigurationDefaultTypeInternal _WifiConfigurationSpecifics_ProxyConfiguration_default_instance_;
PROTOBUF_CONSTEXPR WifiConfigurationSpecifics::WifiConfigurationSpecifics(
    ::_pbi::ConstantInitialized)
  : custom_dns_()
  , hex_ssid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , passphrase_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , proxy_configuration_(nullptr)
  , security_type_(0)

  , automatically_connect_(0)

  , is_preferred_(0)

  , metered_(0)

  , last_connected_timestamp_(int64_t{0})
  , dns_option_(0)
{}
struct WifiConfigurationSpecificsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WifiConfigurationSpecificsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WifiConfigurationSpecificsDefaultTypeInternal() {}
  union {
    WifiConfigurationSpecifics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WifiConfigurationSpecificsDefaultTypeInternal _WifiConfigurationSpecifics_default_instance_;
}  // namespace sync_pb
namespace sync_pb {
bool WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_strings[5] = {};

static const char WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_names[] =
  "PROXY_OPTION_AUTODISCOVERY"
  "PROXY_OPTION_AUTOMATIC"
  "PROXY_OPTION_DISABLED"
  "PROXY_OPTION_MANUAL"
  "PROXY_OPTION_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_entries[] = {
  { {WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_names + 0, 26}, 3 },
  { {WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_names + 26, 22}, 2 },
  { {WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_names + 48, 21}, 1 },
  { {WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_names + 69, 19}, 4 },
  { {WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_names + 88, 24}, 0 },
};

static const int WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_entries_by_number[] = {
  4, // 0 -> PROXY_OPTION_UNSPECIFIED
  2, // 1 -> PROXY_OPTION_DISABLED
  1, // 2 -> PROXY_OPTION_AUTOMATIC
  0, // 3 -> PROXY_OPTION_AUTODISCOVERY
  3, // 4 -> PROXY_OPTION_MANUAL
};

const std::string& WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_Name(
    WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_entries,
          WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_entries_by_number,
          5, WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_entries,
      WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_strings[idx].get();
}
bool WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption WifiConfigurationSpecifics_ProxyConfiguration::PROXY_OPTION_UNSPECIFIED;
constexpr WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption WifiConfigurationSpecifics_ProxyConfiguration::PROXY_OPTION_DISABLED;
constexpr WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption WifiConfigurationSpecifics_ProxyConfiguration::PROXY_OPTION_AUTOMATIC;
constexpr WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption WifiConfigurationSpecifics_ProxyConfiguration::PROXY_OPTION_AUTODISCOVERY;
constexpr WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption WifiConfigurationSpecifics_ProxyConfiguration::PROXY_OPTION_MANUAL;
constexpr WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption WifiConfigurationSpecifics_ProxyConfiguration::ProxyOption_MIN;
constexpr WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption WifiConfigurationSpecifics_ProxyConfiguration::ProxyOption_MAX;
constexpr int WifiConfigurationSpecifics_ProxyConfiguration::ProxyOption_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool WifiConfigurationSpecifics_SecurityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WifiConfigurationSpecifics_SecurityType_strings[4] = {};

static const char WifiConfigurationSpecifics_SecurityType_names[] =
  "SECURITY_TYPE_NONE"
  "SECURITY_TYPE_PSK"
  "SECURITY_TYPE_UNSPECIFIED"
  "SECURITY_TYPE_WEP";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WifiConfigurationSpecifics_SecurityType_entries[] = {
  { {WifiConfigurationSpecifics_SecurityType_names + 0, 18}, 1 },
  { {WifiConfigurationSpecifics_SecurityType_names + 18, 17}, 3 },
  { {WifiConfigurationSpecifics_SecurityType_names + 35, 25}, 0 },
  { {WifiConfigurationSpecifics_SecurityType_names + 60, 17}, 2 },
};

static const int WifiConfigurationSpecifics_SecurityType_entries_by_number[] = {
  2, // 0 -> SECURITY_TYPE_UNSPECIFIED
  0, // 1 -> SECURITY_TYPE_NONE
  3, // 2 -> SECURITY_TYPE_WEP
  1, // 3 -> SECURITY_TYPE_PSK
};

const std::string& WifiConfigurationSpecifics_SecurityType_Name(
    WifiConfigurationSpecifics_SecurityType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WifiConfigurationSpecifics_SecurityType_entries,
          WifiConfigurationSpecifics_SecurityType_entries_by_number,
          4, WifiConfigurationSpecifics_SecurityType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WifiConfigurationSpecifics_SecurityType_entries,
      WifiConfigurationSpecifics_SecurityType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WifiConfigurationSpecifics_SecurityType_strings[idx].get();
}
bool WifiConfigurationSpecifics_SecurityType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WifiConfigurationSpecifics_SecurityType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WifiConfigurationSpecifics_SecurityType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<WifiConfigurationSpecifics_SecurityType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WifiConfigurationSpecifics_SecurityType WifiConfigurationSpecifics::SECURITY_TYPE_UNSPECIFIED;
constexpr WifiConfigurationSpecifics_SecurityType WifiConfigurationSpecifics::SECURITY_TYPE_NONE;
constexpr WifiConfigurationSpecifics_SecurityType WifiConfigurationSpecifics::SECURITY_TYPE_WEP;
constexpr WifiConfigurationSpecifics_SecurityType WifiConfigurationSpecifics::SECURITY_TYPE_PSK;
constexpr WifiConfigurationSpecifics_SecurityType WifiConfigurationSpecifics::SecurityType_MIN;
constexpr WifiConfigurationSpecifics_SecurityType WifiConfigurationSpecifics::SecurityType_MAX;
constexpr int WifiConfigurationSpecifics::SecurityType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool WifiConfigurationSpecifics_AutomaticallyConnectOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WifiConfigurationSpecifics_AutomaticallyConnectOption_strings[3] = {};

static const char WifiConfigurationSpecifics_AutomaticallyConnectOption_names[] =
  "AUTOMATICALLY_CONNECT_DISABLED"
  "AUTOMATICALLY_CONNECT_ENABLED"
  "AUTOMATICALLY_CONNECT_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WifiConfigurationSpecifics_AutomaticallyConnectOption_entries[] = {
  { {WifiConfigurationSpecifics_AutomaticallyConnectOption_names + 0, 30}, 1 },
  { {WifiConfigurationSpecifics_AutomaticallyConnectOption_names + 30, 29}, 2 },
  { {WifiConfigurationSpecifics_AutomaticallyConnectOption_names + 59, 33}, 0 },
};

static const int WifiConfigurationSpecifics_AutomaticallyConnectOption_entries_by_number[] = {
  2, // 0 -> AUTOMATICALLY_CONNECT_UNSPECIFIED
  0, // 1 -> AUTOMATICALLY_CONNECT_DISABLED
  1, // 2 -> AUTOMATICALLY_CONNECT_ENABLED
};

const std::string& WifiConfigurationSpecifics_AutomaticallyConnectOption_Name(
    WifiConfigurationSpecifics_AutomaticallyConnectOption value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WifiConfigurationSpecifics_AutomaticallyConnectOption_entries,
          WifiConfigurationSpecifics_AutomaticallyConnectOption_entries_by_number,
          3, WifiConfigurationSpecifics_AutomaticallyConnectOption_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WifiConfigurationSpecifics_AutomaticallyConnectOption_entries,
      WifiConfigurationSpecifics_AutomaticallyConnectOption_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WifiConfigurationSpecifics_AutomaticallyConnectOption_strings[idx].get();
}
bool WifiConfigurationSpecifics_AutomaticallyConnectOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WifiConfigurationSpecifics_AutomaticallyConnectOption* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WifiConfigurationSpecifics_AutomaticallyConnectOption_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<WifiConfigurationSpecifics_AutomaticallyConnectOption>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WifiConfigurationSpecifics_AutomaticallyConnectOption WifiConfigurationSpecifics::AUTOMATICALLY_CONNECT_UNSPECIFIED;
constexpr WifiConfigurationSpecifics_AutomaticallyConnectOption WifiConfigurationSpecifics::AUTOMATICALLY_CONNECT_DISABLED;
constexpr WifiConfigurationSpecifics_AutomaticallyConnectOption WifiConfigurationSpecifics::AUTOMATICALLY_CONNECT_ENABLED;
constexpr WifiConfigurationSpecifics_AutomaticallyConnectOption WifiConfigurationSpecifics::AutomaticallyConnectOption_MIN;
constexpr WifiConfigurationSpecifics_AutomaticallyConnectOption WifiConfigurationSpecifics::AutomaticallyConnectOption_MAX;
constexpr int WifiConfigurationSpecifics::AutomaticallyConnectOption_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool WifiConfigurationSpecifics_IsPreferredOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WifiConfigurationSpecifics_IsPreferredOption_strings[3] = {};

static const char WifiConfigurationSpecifics_IsPreferredOption_names[] =
  "IS_PREFERRED_DISABLED"
  "IS_PREFERRED_ENABLED"
  "IS_PREFERRED_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WifiConfigurationSpecifics_IsPreferredOption_entries[] = {
  { {WifiConfigurationSpecifics_IsPreferredOption_names + 0, 21}, 1 },
  { {WifiConfigurationSpecifics_IsPreferredOption_names + 21, 20}, 2 },
  { {WifiConfigurationSpecifics_IsPreferredOption_names + 41, 24}, 0 },
};

static const int WifiConfigurationSpecifics_IsPreferredOption_entries_by_number[] = {
  2, // 0 -> IS_PREFERRED_UNSPECIFIED
  0, // 1 -> IS_PREFERRED_DISABLED
  1, // 2 -> IS_PREFERRED_ENABLED
};

const std::string& WifiConfigurationSpecifics_IsPreferredOption_Name(
    WifiConfigurationSpecifics_IsPreferredOption value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WifiConfigurationSpecifics_IsPreferredOption_entries,
          WifiConfigurationSpecifics_IsPreferredOption_entries_by_number,
          3, WifiConfigurationSpecifics_IsPreferredOption_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WifiConfigurationSpecifics_IsPreferredOption_entries,
      WifiConfigurationSpecifics_IsPreferredOption_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WifiConfigurationSpecifics_IsPreferredOption_strings[idx].get();
}
bool WifiConfigurationSpecifics_IsPreferredOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WifiConfigurationSpecifics_IsPreferredOption* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WifiConfigurationSpecifics_IsPreferredOption_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<WifiConfigurationSpecifics_IsPreferredOption>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WifiConfigurationSpecifics_IsPreferredOption WifiConfigurationSpecifics::IS_PREFERRED_UNSPECIFIED;
constexpr WifiConfigurationSpecifics_IsPreferredOption WifiConfigurationSpecifics::IS_PREFERRED_DISABLED;
constexpr WifiConfigurationSpecifics_IsPreferredOption WifiConfigurationSpecifics::IS_PREFERRED_ENABLED;
constexpr WifiConfigurationSpecifics_IsPreferredOption WifiConfigurationSpecifics::IsPreferredOption_MIN;
constexpr WifiConfigurationSpecifics_IsPreferredOption WifiConfigurationSpecifics::IsPreferredOption_MAX;
constexpr int WifiConfigurationSpecifics::IsPreferredOption_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool WifiConfigurationSpecifics_MeteredOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WifiConfigurationSpecifics_MeteredOption_strings[4] = {};

static const char WifiConfigurationSpecifics_MeteredOption_names[] =
  "METERED_OPTION_AUTO"
  "METERED_OPTION_NO"
  "METERED_OPTION_UNSPECIFIED"
  "METERED_OPTION_YES";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WifiConfigurationSpecifics_MeteredOption_entries[] = {
  { {WifiConfigurationSpecifics_MeteredOption_names + 0, 19}, 3 },
  { {WifiConfigurationSpecifics_MeteredOption_names + 19, 17}, 1 },
  { {WifiConfigurationSpecifics_MeteredOption_names + 36, 26}, 0 },
  { {WifiConfigurationSpecifics_MeteredOption_names + 62, 18}, 2 },
};

static const int WifiConfigurationSpecifics_MeteredOption_entries_by_number[] = {
  2, // 0 -> METERED_OPTION_UNSPECIFIED
  1, // 1 -> METERED_OPTION_NO
  3, // 2 -> METERED_OPTION_YES
  0, // 3 -> METERED_OPTION_AUTO
};

const std::string& WifiConfigurationSpecifics_MeteredOption_Name(
    WifiConfigurationSpecifics_MeteredOption value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WifiConfigurationSpecifics_MeteredOption_entries,
          WifiConfigurationSpecifics_MeteredOption_entries_by_number,
          4, WifiConfigurationSpecifics_MeteredOption_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WifiConfigurationSpecifics_MeteredOption_entries,
      WifiConfigurationSpecifics_MeteredOption_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WifiConfigurationSpecifics_MeteredOption_strings[idx].get();
}
bool WifiConfigurationSpecifics_MeteredOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WifiConfigurationSpecifics_MeteredOption* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WifiConfigurationSpecifics_MeteredOption_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<WifiConfigurationSpecifics_MeteredOption>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WifiConfigurationSpecifics_MeteredOption WifiConfigurationSpecifics::METERED_OPTION_UNSPECIFIED;
constexpr WifiConfigurationSpecifics_MeteredOption WifiConfigurationSpecifics::METERED_OPTION_NO;
constexpr WifiConfigurationSpecifics_MeteredOption WifiConfigurationSpecifics::METERED_OPTION_YES;
constexpr WifiConfigurationSpecifics_MeteredOption WifiConfigurationSpecifics::METERED_OPTION_AUTO;
constexpr WifiConfigurationSpecifics_MeteredOption WifiConfigurationSpecifics::MeteredOption_MIN;
constexpr WifiConfigurationSpecifics_MeteredOption WifiConfigurationSpecifics::MeteredOption_MAX;
constexpr int WifiConfigurationSpecifics::MeteredOption_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool WifiConfigurationSpecifics_DnsOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WifiConfigurationSpecifics_DnsOption_strings[3] = {};

static const char WifiConfigurationSpecifics_DnsOption_names[] =
  "DNS_OPTION_CUSTOM"
  "DNS_OPTION_DEFAULT_DHCP"
  "DNS_OPTION_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WifiConfigurationSpecifics_DnsOption_entries[] = {
  { {WifiConfigurationSpecifics_DnsOption_names + 0, 17}, 2 },
  { {WifiConfigurationSpecifics_DnsOption_names + 17, 23}, 1 },
  { {WifiConfigurationSpecifics_DnsOption_names + 40, 22}, 0 },
};

static const int WifiConfigurationSpecifics_DnsOption_entries_by_number[] = {
  2, // 0 -> DNS_OPTION_UNSPECIFIED
  1, // 1 -> DNS_OPTION_DEFAULT_DHCP
  0, // 2 -> DNS_OPTION_CUSTOM
};

const std::string& WifiConfigurationSpecifics_DnsOption_Name(
    WifiConfigurationSpecifics_DnsOption value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WifiConfigurationSpecifics_DnsOption_entries,
          WifiConfigurationSpecifics_DnsOption_entries_by_number,
          3, WifiConfigurationSpecifics_DnsOption_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WifiConfigurationSpecifics_DnsOption_entries,
      WifiConfigurationSpecifics_DnsOption_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WifiConfigurationSpecifics_DnsOption_strings[idx].get();
}
bool WifiConfigurationSpecifics_DnsOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WifiConfigurationSpecifics_DnsOption* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WifiConfigurationSpecifics_DnsOption_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<WifiConfigurationSpecifics_DnsOption>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WifiConfigurationSpecifics_DnsOption WifiConfigurationSpecifics::DNS_OPTION_UNSPECIFIED;
constexpr WifiConfigurationSpecifics_DnsOption WifiConfigurationSpecifics::DNS_OPTION_DEFAULT_DHCP;
constexpr WifiConfigurationSpecifics_DnsOption WifiConfigurationSpecifics::DNS_OPTION_CUSTOM;
constexpr WifiConfigurationSpecifics_DnsOption WifiConfigurationSpecifics::DnsOption_MIN;
constexpr WifiConfigurationSpecifics_DnsOption WifiConfigurationSpecifics::DnsOption_MAX;
constexpr int WifiConfigurationSpecifics::DnsOption_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration>()._has_bits_);
  static void set_has_http_proxy_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_http_proxy_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_secure_http_proxy_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_secure_http_proxy_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_socks_host_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_socks_host_port(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  excluded_domains_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration)
}
WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration(const WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      excluded_domains_(from.excluded_domains_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  http_proxy_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    http_proxy_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_http_proxy_url()) {
    http_proxy_url_.Set(from._internal_http_proxy_url(), 
      GetArenaForAllocation());
  }
  secure_http_proxy_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secure_http_proxy_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_secure_http_proxy_url()) {
    secure_http_proxy_url_.Set(from._internal_secure_http_proxy_url(), 
      GetArenaForAllocation());
  }
  socks_host_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    socks_host_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_socks_host_url()) {
    socks_host_url_.Set(from._internal_socks_host_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&http_proxy_port_, &from.http_proxy_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&socks_host_port_) -
    reinterpret_cast<char*>(&http_proxy_port_)) + sizeof(socks_host_port_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration)
}

inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::SharedCtor() {
http_proxy_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  http_proxy_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secure_http_proxy_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secure_http_proxy_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
socks_host_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  socks_host_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&http_proxy_port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&socks_host_port_) -
    reinterpret_cast<char*>(&http_proxy_port_)) + sizeof(socks_host_port_));
}

WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::~WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration() {
  // @@protoc_insertion_point(destructor:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  http_proxy_url_.Destroy();
  secure_http_proxy_url_.Destroy();
  socks_host_url_.Destroy();
}

void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  excluded_domains_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      http_proxy_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      secure_http_proxy_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      socks_host_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&http_proxy_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&socks_host_port_) -
        reinterpret_cast<char*>(&http_proxy_port_)) + sizeof(socks_host_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string http_proxy_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_http_proxy_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 http_proxy_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_http_proxy_port(&has_bits);
          http_proxy_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string secure_http_proxy_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_secure_http_proxy_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 secure_http_proxy_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_secure_http_proxy_port(&has_bits);
          secure_http_proxy_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string socks_host_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_socks_host_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 socks_host_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_socks_host_port(&has_bits);
          socks_host_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string excluded_domains = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_excluded_domains();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string http_proxy_url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_http_proxy_url(), target);
  }

  // optional int32 http_proxy_port = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_http_proxy_port(), target);
  }

  // optional string secure_http_proxy_url = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_secure_http_proxy_url(), target);
  }

  // optional int32 secure_http_proxy_port = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_secure_http_proxy_port(), target);
  }

  // optional string socks_host_url = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_socks_host_url(), target);
  }

  // optional int32 socks_host_port = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_socks_host_port(), target);
  }

  // repeated string excluded_domains = 7;
  for (int i = 0, n = this->_internal_excluded_domains_size(); i < n; i++) {
    const auto& s = this->_internal_excluded_domains(i);
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration)
  return target;
}

size_t WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string excluded_domains = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(excluded_domains_.size());
  for (int i = 0, n = excluded_domains_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      excluded_domains_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string http_proxy_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_http_proxy_url());
    }

    // optional string secure_http_proxy_url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_secure_http_proxy_url());
    }

    // optional string socks_host_url = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_socks_host_url());
    }

    // optional int32 http_proxy_port = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_http_proxy_port());
    }

    // optional int32 secure_http_proxy_port = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_secure_http_proxy_port());
    }

    // optional int32 socks_host_port = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_socks_host_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration*>(
      &from));
}

void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::MergeFrom(const WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  excluded_domains_.MergeFrom(from.excluded_domains_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_http_proxy_url(from._internal_http_proxy_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_secure_http_proxy_url(from._internal_secure_http_proxy_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_socks_host_url(from._internal_socks_host_url());
    }
    if (cached_has_bits & 0x00000008u) {
      http_proxy_port_ = from.http_proxy_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      secure_http_proxy_port_ = from.secure_http_proxy_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      socks_host_port_ = from.socks_host_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::CopyFrom(const WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::IsInitialized() const {
  return true;
}

void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::InternalSwap(WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  excluded_domains_.InternalSwap(&other->excluded_domains_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &http_proxy_url_, lhs_arena,
      &other->http_proxy_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secure_http_proxy_url_, lhs_arena,
      &other->secure_http_proxy_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &socks_host_url_, lhs_arena,
      &other->socks_host_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration, socks_host_port_)
      + sizeof(WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::socks_host_port_)
      - PROTOBUF_FIELD_OFFSET(WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration, http_proxy_port_)>(
          reinterpret_cast<char*>(&http_proxy_port_),
          reinterpret_cast<char*>(&other->http_proxy_port_));
}

std::string WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::GetTypeName() const {
  return "sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration";
}


// ===================================================================

class WifiConfigurationSpecifics_ProxyConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<WifiConfigurationSpecifics_ProxyConfiguration>()._has_bits_);
  static void set_has_proxy_option(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_autoconfiguration_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& manual_proxy_configuration(const WifiConfigurationSpecifics_ProxyConfiguration* msg);
  static void set_has_manual_proxy_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration&
WifiConfigurationSpecifics_ProxyConfiguration::_Internal::manual_proxy_configuration(const WifiConfigurationSpecifics_ProxyConfiguration* msg) {
  return *msg->manual_proxy_configuration_;
}
WifiConfigurationSpecifics_ProxyConfiguration::WifiConfigurationSpecifics_ProxyConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration)
}
WifiConfigurationSpecifics_ProxyConfiguration::WifiConfigurationSpecifics_ProxyConfiguration(const WifiConfigurationSpecifics_ProxyConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  autoconfiguration_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    autoconfiguration_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_autoconfiguration_url()) {
    autoconfiguration_url_.Set(from._internal_autoconfiguration_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_manual_proxy_configuration()) {
    manual_proxy_configuration_ = new ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration(*from.manual_proxy_configuration_);
  } else {
    manual_proxy_configuration_ = nullptr;
  }
  proxy_option_ = from.proxy_option_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration)
}

inline void WifiConfigurationSpecifics_ProxyConfiguration::SharedCtor() {
autoconfiguration_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  autoconfiguration_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&manual_proxy_configuration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&proxy_option_) -
    reinterpret_cast<char*>(&manual_proxy_configuration_)) + sizeof(proxy_option_));
}

WifiConfigurationSpecifics_ProxyConfiguration::~WifiConfigurationSpecifics_ProxyConfiguration() {
  // @@protoc_insertion_point(destructor:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WifiConfigurationSpecifics_ProxyConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  autoconfiguration_url_.Destroy();
  if (this != internal_default_instance()) delete manual_proxy_configuration_;
}

void WifiConfigurationSpecifics_ProxyConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WifiConfigurationSpecifics_ProxyConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      autoconfiguration_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(manual_proxy_configuration_ != nullptr);
      manual_proxy_configuration_->Clear();
    }
  }
  proxy_option_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WifiConfigurationSpecifics_ProxyConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ProxyOption proxy_option = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_IsValid(val))) {
            _internal_set_proxy_option(static_cast<::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string autoconfiguration_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_autoconfiguration_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration manual_proxy_configuration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_manual_proxy_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WifiConfigurationSpecifics_ProxyConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ProxyOption proxy_option = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_proxy_option(), target);
  }

  // optional string autoconfiguration_url = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_autoconfiguration_url(), target);
  }

  // optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration manual_proxy_configuration = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::manual_proxy_configuration(this),
        _Internal::manual_proxy_configuration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration)
  return target;
}

size_t WifiConfigurationSpecifics_ProxyConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string autoconfiguration_url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_autoconfiguration_url());
    }

    // optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration manual_proxy_configuration = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *manual_proxy_configuration_);
    }

    // optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ProxyOption proxy_option = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_proxy_option());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WifiConfigurationSpecifics_ProxyConfiguration::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WifiConfigurationSpecifics_ProxyConfiguration*>(
      &from));
}

void WifiConfigurationSpecifics_ProxyConfiguration::MergeFrom(const WifiConfigurationSpecifics_ProxyConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_autoconfiguration_url(from._internal_autoconfiguration_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_manual_proxy_configuration()->::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::MergeFrom(from._internal_manual_proxy_configuration());
    }
    if (cached_has_bits & 0x00000004u) {
      proxy_option_ = from.proxy_option_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WifiConfigurationSpecifics_ProxyConfiguration::CopyFrom(const WifiConfigurationSpecifics_ProxyConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiConfigurationSpecifics_ProxyConfiguration::IsInitialized() const {
  return true;
}

void WifiConfigurationSpecifics_ProxyConfiguration::InternalSwap(WifiConfigurationSpecifics_ProxyConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &autoconfiguration_url_, lhs_arena,
      &other->autoconfiguration_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WifiConfigurationSpecifics_ProxyConfiguration, proxy_option_)
      + sizeof(WifiConfigurationSpecifics_ProxyConfiguration::proxy_option_)
      - PROTOBUF_FIELD_OFFSET(WifiConfigurationSpecifics_ProxyConfiguration, manual_proxy_configuration_)>(
          reinterpret_cast<char*>(&manual_proxy_configuration_),
          reinterpret_cast<char*>(&other->manual_proxy_configuration_));
}

std::string WifiConfigurationSpecifics_ProxyConfiguration::GetTypeName() const {
  return "sync_pb.WifiConfigurationSpecifics.ProxyConfiguration";
}


// ===================================================================

class WifiConfigurationSpecifics::_Internal {
 public:
  using HasBits = decltype(std::declval<WifiConfigurationSpecifics>()._has_bits_);
  static void set_has_hex_ssid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_security_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_passphrase(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_automatically_connect(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_preferred(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_metered(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration& proxy_configuration(const WifiConfigurationSpecifics* msg);
  static void set_has_proxy_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dns_option(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_last_connected_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration&
WifiConfigurationSpecifics::_Internal::proxy_configuration(const WifiConfigurationSpecifics* msg) {
  return *msg->proxy_configuration_;
}
WifiConfigurationSpecifics::WifiConfigurationSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  custom_dns_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.WifiConfigurationSpecifics)
}
WifiConfigurationSpecifics::WifiConfigurationSpecifics(const WifiConfigurationSpecifics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      custom_dns_(from.custom_dns_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  hex_ssid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hex_ssid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hex_ssid()) {
    hex_ssid_.Set(from._internal_hex_ssid(), 
      GetArenaForAllocation());
  }
  passphrase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    passphrase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_passphrase()) {
    passphrase_.Set(from._internal_passphrase(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_proxy_configuration()) {
    proxy_configuration_ = new ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration(*from.proxy_configuration_);
  } else {
    proxy_configuration_ = nullptr;
  }
  ::memcpy(&security_type_, &from.security_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&dns_option_) -
    reinterpret_cast<char*>(&security_type_)) + sizeof(dns_option_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.WifiConfigurationSpecifics)
}

inline void WifiConfigurationSpecifics::SharedCtor() {
hex_ssid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hex_ssid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
passphrase_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  passphrase_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&proxy_configuration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dns_option_) -
    reinterpret_cast<char*>(&proxy_configuration_)) + sizeof(dns_option_));
}

WifiConfigurationSpecifics::~WifiConfigurationSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.WifiConfigurationSpecifics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WifiConfigurationSpecifics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hex_ssid_.Destroy();
  passphrase_.Destroy();
  if (this != internal_default_instance()) delete proxy_configuration_;
}

void WifiConfigurationSpecifics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WifiConfigurationSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.WifiConfigurationSpecifics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_dns_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hex_ssid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      passphrase_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(proxy_configuration_ != nullptr);
      proxy_configuration_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&security_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_connected_timestamp_) -
        reinterpret_cast<char*>(&security_type_)) + sizeof(last_connected_timestamp_));
  }
  dns_option_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WifiConfigurationSpecifics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes hex_ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hex_ssid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WifiConfigurationSpecifics.SecurityType security_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WifiConfigurationSpecifics_SecurityType_IsValid(val))) {
            _internal_set_security_type(static_cast<::sync_pb::WifiConfigurationSpecifics_SecurityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes passphrase = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_passphrase();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WifiConfigurationSpecifics.AutomaticallyConnectOption automatically_connect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WifiConfigurationSpecifics_AutomaticallyConnectOption_IsValid(val))) {
            _internal_set_automatically_connect(static_cast<::sync_pb::WifiConfigurationSpecifics_AutomaticallyConnectOption>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WifiConfigurationSpecifics.IsPreferredOption is_preferred = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WifiConfigurationSpecifics_IsPreferredOption_IsValid(val))) {
            _internal_set_is_preferred(static_cast<::sync_pb::WifiConfigurationSpecifics_IsPreferredOption>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WifiConfigurationSpecifics.MeteredOption metered = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WifiConfigurationSpecifics_MeteredOption_IsValid(val))) {
            _internal_set_metered(static_cast<::sync_pb::WifiConfigurationSpecifics_MeteredOption>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration proxy_configuration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_proxy_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string custom_dns = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_custom_dns();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 last_connected_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_last_connected_timestamp(&has_bits);
          last_connected_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sync_pb.WifiConfigurationSpecifics.DnsOption dns_option = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sync_pb::WifiConfigurationSpecifics_DnsOption_IsValid(val))) {
            _internal_set_dns_option(static_cast<::sync_pb::WifiConfigurationSpecifics_DnsOption>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WifiConfigurationSpecifics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.WifiConfigurationSpecifics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes hex_ssid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hex_ssid(), target);
  }

  // optional .sync_pb.WifiConfigurationSpecifics.SecurityType security_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_security_type(), target);
  }

  // optional bytes passphrase = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_passphrase(), target);
  }

  // optional .sync_pb.WifiConfigurationSpecifics.AutomaticallyConnectOption automatically_connect = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_automatically_connect(), target);
  }

  // optional .sync_pb.WifiConfigurationSpecifics.IsPreferredOption is_preferred = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_is_preferred(), target);
  }

  // optional .sync_pb.WifiConfigurationSpecifics.MeteredOption metered = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_metered(), target);
  }

  // optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration proxy_configuration = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::proxy_configuration(this),
        _Internal::proxy_configuration(this).GetCachedSize(), target, stream);
  }

  // repeated string custom_dns = 8;
  for (int i = 0, n = this->_internal_custom_dns_size(); i < n; i++) {
    const auto& s = this->_internal_custom_dns(i);
    target = stream->WriteString(8, s, target);
  }

  // optional int64 last_connected_timestamp = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_last_connected_timestamp(), target);
  }

  // optional .sync_pb.WifiConfigurationSpecifics.DnsOption dns_option = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_dns_option(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.WifiConfigurationSpecifics)
  return target;
}

size_t WifiConfigurationSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.WifiConfigurationSpecifics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string custom_dns = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(custom_dns_.size());
  for (int i = 0, n = custom_dns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      custom_dns_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes hex_ssid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hex_ssid());
    }

    // optional bytes passphrase = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_passphrase());
    }

    // optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration proxy_configuration = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proxy_configuration_);
    }

    // optional .sync_pb.WifiConfigurationSpecifics.SecurityType security_type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_security_type());
    }

    // optional .sync_pb.WifiConfigurationSpecifics.AutomaticallyConnectOption automatically_connect = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_automatically_connect());
    }

    // optional .sync_pb.WifiConfigurationSpecifics.IsPreferredOption is_preferred = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_is_preferred());
    }

    // optional .sync_pb.WifiConfigurationSpecifics.MeteredOption metered = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_metered());
    }

    // optional int64 last_connected_timestamp = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_connected_timestamp());
    }

  }
  // optional .sync_pb.WifiConfigurationSpecifics.DnsOption dns_option = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dns_option());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WifiConfigurationSpecifics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WifiConfigurationSpecifics*>(
      &from));
}

void WifiConfigurationSpecifics::MergeFrom(const WifiConfigurationSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WifiConfigurationSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  custom_dns_.MergeFrom(from.custom_dns_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hex_ssid(from._internal_hex_ssid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_passphrase(from._internal_passphrase());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_proxy_configuration()->::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration::MergeFrom(from._internal_proxy_configuration());
    }
    if (cached_has_bits & 0x00000008u) {
      security_type_ = from.security_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      automatically_connect_ = from.automatically_connect_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_preferred_ = from.is_preferred_;
    }
    if (cached_has_bits & 0x00000040u) {
      metered_ = from.metered_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_connected_timestamp_ = from.last_connected_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_dns_option(from._internal_dns_option());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WifiConfigurationSpecifics::CopyFrom(const WifiConfigurationSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WifiConfigurationSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiConfigurationSpecifics::IsInitialized() const {
  return true;
}

void WifiConfigurationSpecifics::InternalSwap(WifiConfigurationSpecifics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  custom_dns_.InternalSwap(&other->custom_dns_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hex_ssid_, lhs_arena,
      &other->hex_ssid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &passphrase_, lhs_arena,
      &other->passphrase_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WifiConfigurationSpecifics, dns_option_)
      + sizeof(WifiConfigurationSpecifics::dns_option_)
      - PROTOBUF_FIELD_OFFSET(WifiConfigurationSpecifics, proxy_configuration_)>(
          reinterpret_cast<char*>(&proxy_configuration_),
          reinterpret_cast<char*>(&other->proxy_configuration_));
}

std::string WifiConfigurationSpecifics::GetTypeName() const {
  return "sync_pb.WifiConfigurationSpecifics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration*
Arena::CreateMaybeMessage< ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration*
Arena::CreateMaybeMessage< ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::WifiConfigurationSpecifics*
Arena::CreateMaybeMessage< ::sync_pb::WifiConfigurationSpecifics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::WifiConfigurationSpecifics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
