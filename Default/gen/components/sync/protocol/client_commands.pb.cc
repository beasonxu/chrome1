// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/client_commands.proto

#include "components/sync/protocol/client_commands.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sync_pb {
PROTOBUF_CONSTEXPR CustomNudgeDelay::CustomNudgeDelay(
    ::_pbi::ConstantInitialized)
  : datatype_id_(0)
  , delay_ms_(0){}
struct CustomNudgeDelayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomNudgeDelayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomNudgeDelayDefaultTypeInternal() {}
  union {
    CustomNudgeDelay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomNudgeDelayDefaultTypeInternal _CustomNudgeDelay_default_instance_;
PROTOBUF_CONSTEXPR ClientCommand::ClientCommand(
    ::_pbi::ConstantInitialized)
  : custom_nudge_delays_()
  , set_sync_poll_interval_(0)
  , set_sync_long_poll_interval_(0)
  , max_commit_batch_size_(0)
  , sessions_commit_delay_seconds_(0)
  , throttle_delay_seconds_(0)
  , client_invalidation_hint_buffer_size_(0)
  , gu_retry_delay_seconds_(0)
  , extension_types_max_tokens_(0)
  , extension_types_refill_interval_seconds_(0)
  , extension_types_depleted_quota_nudge_delay_seconds_(0){}
struct ClientCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientCommandDefaultTypeInternal() {}
  union {
    ClientCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientCommandDefaultTypeInternal _ClientCommand_default_instance_;
}  // namespace sync_pb
namespace sync_pb {

// ===================================================================

class CustomNudgeDelay::_Internal {
 public:
  using HasBits = decltype(std::declval<CustomNudgeDelay>()._has_bits_);
  static void set_has_datatype_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CustomNudgeDelay::CustomNudgeDelay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.CustomNudgeDelay)
}
CustomNudgeDelay::CustomNudgeDelay(const CustomNudgeDelay& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&datatype_id_, &from.datatype_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay_ms_) -
    reinterpret_cast<char*>(&datatype_id_)) + sizeof(delay_ms_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.CustomNudgeDelay)
}

inline void CustomNudgeDelay::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&datatype_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delay_ms_) -
    reinterpret_cast<char*>(&datatype_id_)) + sizeof(delay_ms_));
}

CustomNudgeDelay::~CustomNudgeDelay() {
  // @@protoc_insertion_point(destructor:sync_pb.CustomNudgeDelay)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomNudgeDelay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CustomNudgeDelay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CustomNudgeDelay::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.CustomNudgeDelay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&datatype_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delay_ms_) -
        reinterpret_cast<char*>(&datatype_id_)) + sizeof(delay_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CustomNudgeDelay::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 datatype_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_datatype_id(&has_bits);
          datatype_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 delay_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_delay_ms(&has_bits);
          delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomNudgeDelay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.CustomNudgeDelay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 datatype_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_datatype_id(), target);
  }

  // optional int32 delay_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_delay_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.CustomNudgeDelay)
  return target;
}

size_t CustomNudgeDelay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.CustomNudgeDelay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 datatype_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_datatype_id());
    }

    // optional int32 delay_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_delay_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomNudgeDelay::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CustomNudgeDelay*>(
      &from));
}

void CustomNudgeDelay::MergeFrom(const CustomNudgeDelay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.CustomNudgeDelay)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      datatype_id_ = from.datatype_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      delay_ms_ = from.delay_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CustomNudgeDelay::CopyFrom(const CustomNudgeDelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.CustomNudgeDelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomNudgeDelay::IsInitialized() const {
  return true;
}

void CustomNudgeDelay::InternalSwap(CustomNudgeDelay* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CustomNudgeDelay, delay_ms_)
      + sizeof(CustomNudgeDelay::delay_ms_)
      - PROTOBUF_FIELD_OFFSET(CustomNudgeDelay, datatype_id_)>(
          reinterpret_cast<char*>(&datatype_id_),
          reinterpret_cast<char*>(&other->datatype_id_));
}

std::string CustomNudgeDelay::GetTypeName() const {
  return "sync_pb.CustomNudgeDelay";
}


// ===================================================================

class ClientCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientCommand>()._has_bits_);
  static void set_has_set_sync_poll_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_set_sync_long_poll_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_commit_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sessions_commit_delay_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_throttle_delay_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_client_invalidation_hint_buffer_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gu_retry_delay_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_extension_types_max_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_extension_types_refill_interval_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_extension_types_depleted_quota_nudge_delay_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

ClientCommand::ClientCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  custom_nudge_delays_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sync_pb.ClientCommand)
}
ClientCommand::ClientCommand(const ClientCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      custom_nudge_delays_(from.custom_nudge_delays_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&set_sync_poll_interval_, &from.set_sync_poll_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&extension_types_depleted_quota_nudge_delay_seconds_) -
    reinterpret_cast<char*>(&set_sync_poll_interval_)) + sizeof(extension_types_depleted_quota_nudge_delay_seconds_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.ClientCommand)
}

inline void ClientCommand::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&set_sync_poll_interval_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extension_types_depleted_quota_nudge_delay_seconds_) -
    reinterpret_cast<char*>(&set_sync_poll_interval_)) + sizeof(extension_types_depleted_quota_nudge_delay_seconds_));
}

ClientCommand::~ClientCommand() {
  // @@protoc_insertion_point(destructor:sync_pb.ClientCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ClientCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_nudge_delays_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&set_sync_poll_interval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&extension_types_max_tokens_) -
        reinterpret_cast<char*>(&set_sync_poll_interval_)) + sizeof(extension_types_max_tokens_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&extension_types_refill_interval_seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&extension_types_depleted_quota_nudge_delay_seconds_) -
        reinterpret_cast<char*>(&extension_types_refill_interval_seconds_)) + sizeof(extension_types_depleted_quota_nudge_delay_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 set_sync_poll_interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_set_sync_poll_interval(&has_bits);
          set_sync_poll_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 set_sync_long_poll_interval = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_set_sync_long_poll_interval(&has_bits);
          set_sync_long_poll_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_commit_batch_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max_commit_batch_size(&has_bits);
          max_commit_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sessions_commit_delay_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_sessions_commit_delay_seconds(&has_bits);
          sessions_commit_delay_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 throttle_delay_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_throttle_delay_seconds(&has_bits);
          throttle_delay_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 client_invalidation_hint_buffer_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_client_invalidation_hint_buffer_size(&has_bits);
          client_invalidation_hint_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 gu_retry_delay_seconds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_gu_retry_delay_seconds(&has_bits);
          gu_retry_delay_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sync_pb.CustomNudgeDelay custom_nudge_delays = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_nudge_delays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 extension_types_max_tokens = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_extension_types_max_tokens(&has_bits);
          extension_types_max_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 extension_types_refill_interval_seconds = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_extension_types_refill_interval_seconds(&has_bits);
          extension_types_refill_interval_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 extension_types_depleted_quota_nudge_delay_seconds = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_extension_types_depleted_quota_nudge_delay_seconds(&has_bits);
          extension_types_depleted_quota_nudge_delay_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sync_pb.ClientCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 set_sync_poll_interval = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_set_sync_poll_interval(), target);
  }

  // optional int32 set_sync_long_poll_interval = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_set_sync_long_poll_interval(), target);
  }

  // optional int32 max_commit_batch_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_commit_batch_size(), target);
  }

  // optional int32 sessions_commit_delay_seconds = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_sessions_commit_delay_seconds(), target);
  }

  // optional int32 throttle_delay_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_throttle_delay_seconds(), target);
  }

  // optional int32 client_invalidation_hint_buffer_size = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_client_invalidation_hint_buffer_size(), target);
  }

  // optional int32 gu_retry_delay_seconds = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_gu_retry_delay_seconds(), target);
  }

  // repeated .sync_pb.CustomNudgeDelay custom_nudge_delays = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_nudge_delays_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_nudge_delays(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 extension_types_max_tokens = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_extension_types_max_tokens(), target);
  }

  // optional int32 extension_types_refill_interval_seconds = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_extension_types_refill_interval_seconds(), target);
  }

  // optional int32 extension_types_depleted_quota_nudge_delay_seconds = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_extension_types_depleted_quota_nudge_delay_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sync_pb.ClientCommand)
  return target;
}

size_t ClientCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ClientCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.CustomNudgeDelay custom_nudge_delays = 8;
  total_size += 1UL * this->_internal_custom_nudge_delays_size();
  for (const auto& msg : this->custom_nudge_delays_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 set_sync_poll_interval = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_set_sync_poll_interval());
    }

    // optional int32 set_sync_long_poll_interval = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_set_sync_long_poll_interval());
    }

    // optional int32 max_commit_batch_size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_commit_batch_size());
    }

    // optional int32 sessions_commit_delay_seconds = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sessions_commit_delay_seconds());
    }

    // optional int32 throttle_delay_seconds = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_throttle_delay_seconds());
    }

    // optional int32 client_invalidation_hint_buffer_size = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_client_invalidation_hint_buffer_size());
    }

    // optional int32 gu_retry_delay_seconds = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gu_retry_delay_seconds());
    }

    // optional int32 extension_types_max_tokens = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_extension_types_max_tokens());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 extension_types_refill_interval_seconds = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_extension_types_refill_interval_seconds());
    }

    // optional int32 extension_types_depleted_quota_nudge_delay_seconds = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_extension_types_depleted_quota_nudge_delay_seconds());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientCommand::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientCommand*>(
      &from));
}

void ClientCommand::MergeFrom(const ClientCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ClientCommand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  custom_nudge_delays_.MergeFrom(from.custom_nudge_delays_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      set_sync_poll_interval_ = from.set_sync_poll_interval_;
    }
    if (cached_has_bits & 0x00000002u) {
      set_sync_long_poll_interval_ = from.set_sync_long_poll_interval_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_commit_batch_size_ = from.max_commit_batch_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      sessions_commit_delay_seconds_ = from.sessions_commit_delay_seconds_;
    }
    if (cached_has_bits & 0x00000010u) {
      throttle_delay_seconds_ = from.throttle_delay_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_invalidation_hint_buffer_size_ = from.client_invalidation_hint_buffer_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      gu_retry_delay_seconds_ = from.gu_retry_delay_seconds_;
    }
    if (cached_has_bits & 0x00000080u) {
      extension_types_max_tokens_ = from.extension_types_max_tokens_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      extension_types_refill_interval_seconds_ = from.extension_types_refill_interval_seconds_;
    }
    if (cached_has_bits & 0x00000200u) {
      extension_types_depleted_quota_nudge_delay_seconds_ = from.extension_types_depleted_quota_nudge_delay_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientCommand::CopyFrom(const ClientCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ClientCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCommand::IsInitialized() const {
  return true;
}

void ClientCommand::InternalSwap(ClientCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  custom_nudge_delays_.InternalSwap(&other->custom_nudge_delays_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientCommand, extension_types_depleted_quota_nudge_delay_seconds_)
      + sizeof(ClientCommand::extension_types_depleted_quota_nudge_delay_seconds_)
      - PROTOBUF_FIELD_OFFSET(ClientCommand, set_sync_poll_interval_)>(
          reinterpret_cast<char*>(&set_sync_poll_interval_),
          reinterpret_cast<char*>(&other->set_sync_poll_interval_));
}

std::string ClientCommand::GetTypeName() const {
  return "sync_pb.ClientCommand";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sync_pb::CustomNudgeDelay*
Arena::CreateMaybeMessage< ::sync_pb::CustomNudgeDelay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::CustomNudgeDelay >(arena);
}
template<> PROTOBUF_NOINLINE ::sync_pb::ClientCommand*
Arena::CreateMaybeMessage< ::sync_pb::ClientCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sync_pb::ClientCommand >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
