// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/autofill_offer_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fautofill_5foffer_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fautofill_5foffer_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fautofill_5foffer_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fautofill_5foffer_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace sync_pb {
class AutofillOfferSpecifics;
struct AutofillOfferSpecificsDefaultTypeInternal;
extern AutofillOfferSpecificsDefaultTypeInternal _AutofillOfferSpecifics_default_instance_;
class AutofillOfferSpecifics_CardLinkedOfferData;
struct AutofillOfferSpecifics_CardLinkedOfferDataDefaultTypeInternal;
extern AutofillOfferSpecifics_CardLinkedOfferDataDefaultTypeInternal _AutofillOfferSpecifics_CardLinkedOfferData_default_instance_;
class AutofillOfferSpecifics_DisplayStrings;
struct AutofillOfferSpecifics_DisplayStringsDefaultTypeInternal;
extern AutofillOfferSpecifics_DisplayStringsDefaultTypeInternal _AutofillOfferSpecifics_DisplayStrings_default_instance_;
class AutofillOfferSpecifics_FixedAmountReward;
struct AutofillOfferSpecifics_FixedAmountRewardDefaultTypeInternal;
extern AutofillOfferSpecifics_FixedAmountRewardDefaultTypeInternal _AutofillOfferSpecifics_FixedAmountReward_default_instance_;
class AutofillOfferSpecifics_PercentageReward;
struct AutofillOfferSpecifics_PercentageRewardDefaultTypeInternal;
extern AutofillOfferSpecifics_PercentageRewardDefaultTypeInternal _AutofillOfferSpecifics_PercentageReward_default_instance_;
class AutofillOfferSpecifics_PromoCodeOfferData;
struct AutofillOfferSpecifics_PromoCodeOfferDataDefaultTypeInternal;
extern AutofillOfferSpecifics_PromoCodeOfferDataDefaultTypeInternal _AutofillOfferSpecifics_PromoCodeOfferData_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::AutofillOfferSpecifics* Arena::CreateMaybeMessage<::sync_pb::AutofillOfferSpecifics>(Arena*);
template<> ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData* Arena::CreateMaybeMessage<::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData>(Arena*);
template<> ::sync_pb::AutofillOfferSpecifics_DisplayStrings* Arena::CreateMaybeMessage<::sync_pb::AutofillOfferSpecifics_DisplayStrings>(Arena*);
template<> ::sync_pb::AutofillOfferSpecifics_FixedAmountReward* Arena::CreateMaybeMessage<::sync_pb::AutofillOfferSpecifics_FixedAmountReward>(Arena*);
template<> ::sync_pb::AutofillOfferSpecifics_PercentageReward* Arena::CreateMaybeMessage<::sync_pb::AutofillOfferSpecifics_PercentageReward>(Arena*);
template<> ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData* Arena::CreateMaybeMessage<::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

// ===================================================================

class AutofillOfferSpecifics_CardLinkedOfferData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AutofillOfferSpecifics.CardLinkedOfferData) */ {
 public:
  inline AutofillOfferSpecifics_CardLinkedOfferData() : AutofillOfferSpecifics_CardLinkedOfferData(nullptr) {}
  ~AutofillOfferSpecifics_CardLinkedOfferData() override;
  explicit PROTOBUF_CONSTEXPR AutofillOfferSpecifics_CardLinkedOfferData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillOfferSpecifics_CardLinkedOfferData(const AutofillOfferSpecifics_CardLinkedOfferData& from);
  AutofillOfferSpecifics_CardLinkedOfferData(AutofillOfferSpecifics_CardLinkedOfferData&& from) noexcept
    : AutofillOfferSpecifics_CardLinkedOfferData() {
    *this = ::std::move(from);
  }

  inline AutofillOfferSpecifics_CardLinkedOfferData& operator=(const AutofillOfferSpecifics_CardLinkedOfferData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillOfferSpecifics_CardLinkedOfferData& operator=(AutofillOfferSpecifics_CardLinkedOfferData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutofillOfferSpecifics_CardLinkedOfferData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutofillOfferSpecifics_CardLinkedOfferData* internal_default_instance() {
    return reinterpret_cast<const AutofillOfferSpecifics_CardLinkedOfferData*>(
               &_AutofillOfferSpecifics_CardLinkedOfferData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AutofillOfferSpecifics_CardLinkedOfferData& a, AutofillOfferSpecifics_CardLinkedOfferData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AutofillOfferSpecifics_CardLinkedOfferData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillOfferSpecifics_CardLinkedOfferData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutofillOfferSpecifics_CardLinkedOfferData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutofillOfferSpecifics_CardLinkedOfferData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AutofillOfferSpecifics_CardLinkedOfferData& from);
  void MergeFrom(const AutofillOfferSpecifics_CardLinkedOfferData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillOfferSpecifics_CardLinkedOfferData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AutofillOfferSpecifics.CardLinkedOfferData";
  }
  protected:
  explicit AutofillOfferSpecifics_CardLinkedOfferData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentIdFieldNumber = 3,
  };
  // repeated int64 instrument_id = 3;
  int instrument_id_size() const;
  private:
  int _internal_instrument_id_size() const;
  public:
  void clear_instrument_id();
  private:
  int64_t _internal_instrument_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_instrument_id() const;
  void _internal_add_instrument_id(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_instrument_id();
  public:
  int64_t instrument_id(int index) const;
  void set_instrument_id(int index, int64_t value);
  void add_instrument_id(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      instrument_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_instrument_id();

  // @@protoc_insertion_point(class_scope:sync_pb.AutofillOfferSpecifics.CardLinkedOfferData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > instrument_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fautofill_5foffer_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class AutofillOfferSpecifics_PromoCodeOfferData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AutofillOfferSpecifics.PromoCodeOfferData) */ {
 public:
  inline AutofillOfferSpecifics_PromoCodeOfferData() : AutofillOfferSpecifics_PromoCodeOfferData(nullptr) {}
  ~AutofillOfferSpecifics_PromoCodeOfferData() override;
  explicit PROTOBUF_CONSTEXPR AutofillOfferSpecifics_PromoCodeOfferData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillOfferSpecifics_PromoCodeOfferData(const AutofillOfferSpecifics_PromoCodeOfferData& from);
  AutofillOfferSpecifics_PromoCodeOfferData(AutofillOfferSpecifics_PromoCodeOfferData&& from) noexcept
    : AutofillOfferSpecifics_PromoCodeOfferData() {
    *this = ::std::move(from);
  }

  inline AutofillOfferSpecifics_PromoCodeOfferData& operator=(const AutofillOfferSpecifics_PromoCodeOfferData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillOfferSpecifics_PromoCodeOfferData& operator=(AutofillOfferSpecifics_PromoCodeOfferData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutofillOfferSpecifics_PromoCodeOfferData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutofillOfferSpecifics_PromoCodeOfferData* internal_default_instance() {
    return reinterpret_cast<const AutofillOfferSpecifics_PromoCodeOfferData*>(
               &_AutofillOfferSpecifics_PromoCodeOfferData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AutofillOfferSpecifics_PromoCodeOfferData& a, AutofillOfferSpecifics_PromoCodeOfferData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AutofillOfferSpecifics_PromoCodeOfferData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillOfferSpecifics_PromoCodeOfferData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutofillOfferSpecifics_PromoCodeOfferData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutofillOfferSpecifics_PromoCodeOfferData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AutofillOfferSpecifics_PromoCodeOfferData& from);
  void MergeFrom(const AutofillOfferSpecifics_PromoCodeOfferData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillOfferSpecifics_PromoCodeOfferData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AutofillOfferSpecifics.PromoCodeOfferData";
  }
  protected:
  explicit AutofillOfferSpecifics_PromoCodeOfferData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPromoCodeFieldNumber = 1,
  };
  // optional string promo_code = 1;
  bool has_promo_code() const;
  private:
  bool _internal_has_promo_code() const;
  public:
  void clear_promo_code();
  const std::string& promo_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_promo_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_promo_code();
  PROTOBUF_NODISCARD std::string* release_promo_code();
  void set_allocated_promo_code(std::string* promo_code);
  private:
  const std::string& _internal_promo_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_promo_code(const std::string& value);
  std::string* _internal_mutable_promo_code();
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.AutofillOfferSpecifics.PromoCodeOfferData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr promo_code_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fautofill_5foffer_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class AutofillOfferSpecifics_DisplayStrings final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AutofillOfferSpecifics.DisplayStrings) */ {
 public:
  inline AutofillOfferSpecifics_DisplayStrings() : AutofillOfferSpecifics_DisplayStrings(nullptr) {}
  ~AutofillOfferSpecifics_DisplayStrings() override;
  explicit PROTOBUF_CONSTEXPR AutofillOfferSpecifics_DisplayStrings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillOfferSpecifics_DisplayStrings(const AutofillOfferSpecifics_DisplayStrings& from);
  AutofillOfferSpecifics_DisplayStrings(AutofillOfferSpecifics_DisplayStrings&& from) noexcept
    : AutofillOfferSpecifics_DisplayStrings() {
    *this = ::std::move(from);
  }

  inline AutofillOfferSpecifics_DisplayStrings& operator=(const AutofillOfferSpecifics_DisplayStrings& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillOfferSpecifics_DisplayStrings& operator=(AutofillOfferSpecifics_DisplayStrings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutofillOfferSpecifics_DisplayStrings& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutofillOfferSpecifics_DisplayStrings* internal_default_instance() {
    return reinterpret_cast<const AutofillOfferSpecifics_DisplayStrings*>(
               &_AutofillOfferSpecifics_DisplayStrings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AutofillOfferSpecifics_DisplayStrings& a, AutofillOfferSpecifics_DisplayStrings& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AutofillOfferSpecifics_DisplayStrings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillOfferSpecifics_DisplayStrings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutofillOfferSpecifics_DisplayStrings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutofillOfferSpecifics_DisplayStrings>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AutofillOfferSpecifics_DisplayStrings& from);
  void MergeFrom(const AutofillOfferSpecifics_DisplayStrings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillOfferSpecifics_DisplayStrings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AutofillOfferSpecifics.DisplayStrings";
  }
  protected:
  explicit AutofillOfferSpecifics_DisplayStrings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuePropTextFieldNumber = 1,
    kSeeDetailsTextMobileFieldNumber = 2,
    kSeeDetailsTextDesktopFieldNumber = 3,
    kUsageInstructionsTextMobileFieldNumber = 4,
    kUsageInstructionsTextDesktopFieldNumber = 5,
  };
  // optional string value_prop_text = 1;
  bool has_value_prop_text() const;
  private:
  bool _internal_has_value_prop_text() const;
  public:
  void clear_value_prop_text();
  const std::string& value_prop_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_prop_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_prop_text();
  PROTOBUF_NODISCARD std::string* release_value_prop_text();
  void set_allocated_value_prop_text(std::string* value_prop_text);
  private:
  const std::string& _internal_value_prop_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_prop_text(const std::string& value);
  std::string* _internal_mutable_value_prop_text();
  public:

  // optional string see_details_text_mobile = 2;
  bool has_see_details_text_mobile() const;
  private:
  bool _internal_has_see_details_text_mobile() const;
  public:
  void clear_see_details_text_mobile();
  const std::string& see_details_text_mobile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_see_details_text_mobile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_see_details_text_mobile();
  PROTOBUF_NODISCARD std::string* release_see_details_text_mobile();
  void set_allocated_see_details_text_mobile(std::string* see_details_text_mobile);
  private:
  const std::string& _internal_see_details_text_mobile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_see_details_text_mobile(const std::string& value);
  std::string* _internal_mutable_see_details_text_mobile();
  public:

  // optional string see_details_text_desktop = 3;
  bool has_see_details_text_desktop() const;
  private:
  bool _internal_has_see_details_text_desktop() const;
  public:
  void clear_see_details_text_desktop();
  const std::string& see_details_text_desktop() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_see_details_text_desktop(ArgT0&& arg0, ArgT... args);
  std::string* mutable_see_details_text_desktop();
  PROTOBUF_NODISCARD std::string* release_see_details_text_desktop();
  void set_allocated_see_details_text_desktop(std::string* see_details_text_desktop);
  private:
  const std::string& _internal_see_details_text_desktop() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_see_details_text_desktop(const std::string& value);
  std::string* _internal_mutable_see_details_text_desktop();
  public:

  // optional string usage_instructions_text_mobile = 4;
  bool has_usage_instructions_text_mobile() const;
  private:
  bool _internal_has_usage_instructions_text_mobile() const;
  public:
  void clear_usage_instructions_text_mobile();
  const std::string& usage_instructions_text_mobile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usage_instructions_text_mobile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usage_instructions_text_mobile();
  PROTOBUF_NODISCARD std::string* release_usage_instructions_text_mobile();
  void set_allocated_usage_instructions_text_mobile(std::string* usage_instructions_text_mobile);
  private:
  const std::string& _internal_usage_instructions_text_mobile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usage_instructions_text_mobile(const std::string& value);
  std::string* _internal_mutable_usage_instructions_text_mobile();
  public:

  // optional string usage_instructions_text_desktop = 5;
  bool has_usage_instructions_text_desktop() const;
  private:
  bool _internal_has_usage_instructions_text_desktop() const;
  public:
  void clear_usage_instructions_text_desktop();
  const std::string& usage_instructions_text_desktop() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usage_instructions_text_desktop(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usage_instructions_text_desktop();
  PROTOBUF_NODISCARD std::string* release_usage_instructions_text_desktop();
  void set_allocated_usage_instructions_text_desktop(std::string* usage_instructions_text_desktop);
  private:
  const std::string& _internal_usage_instructions_text_desktop() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usage_instructions_text_desktop(const std::string& value);
  std::string* _internal_mutable_usage_instructions_text_desktop();
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.AutofillOfferSpecifics.DisplayStrings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_prop_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr see_details_text_mobile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr see_details_text_desktop_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usage_instructions_text_mobile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usage_instructions_text_desktop_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fautofill_5foffer_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class AutofillOfferSpecifics_PercentageReward final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AutofillOfferSpecifics.PercentageReward) */ {
 public:
  inline AutofillOfferSpecifics_PercentageReward() : AutofillOfferSpecifics_PercentageReward(nullptr) {}
  ~AutofillOfferSpecifics_PercentageReward() override;
  explicit PROTOBUF_CONSTEXPR AutofillOfferSpecifics_PercentageReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillOfferSpecifics_PercentageReward(const AutofillOfferSpecifics_PercentageReward& from);
  AutofillOfferSpecifics_PercentageReward(AutofillOfferSpecifics_PercentageReward&& from) noexcept
    : AutofillOfferSpecifics_PercentageReward() {
    *this = ::std::move(from);
  }

  inline AutofillOfferSpecifics_PercentageReward& operator=(const AutofillOfferSpecifics_PercentageReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillOfferSpecifics_PercentageReward& operator=(AutofillOfferSpecifics_PercentageReward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutofillOfferSpecifics_PercentageReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutofillOfferSpecifics_PercentageReward* internal_default_instance() {
    return reinterpret_cast<const AutofillOfferSpecifics_PercentageReward*>(
               &_AutofillOfferSpecifics_PercentageReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AutofillOfferSpecifics_PercentageReward& a, AutofillOfferSpecifics_PercentageReward& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AutofillOfferSpecifics_PercentageReward* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillOfferSpecifics_PercentageReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutofillOfferSpecifics_PercentageReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutofillOfferSpecifics_PercentageReward>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AutofillOfferSpecifics_PercentageReward& from);
  void MergeFrom(const AutofillOfferSpecifics_PercentageReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillOfferSpecifics_PercentageReward* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AutofillOfferSpecifics.PercentageReward";
  }
  protected:
  explicit AutofillOfferSpecifics_PercentageReward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPercentageFieldNumber = 1,
  };
  // optional string percentage = 1;
  bool has_percentage() const;
  private:
  bool _internal_has_percentage() const;
  public:
  void clear_percentage();
  const std::string& percentage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_percentage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_percentage();
  PROTOBUF_NODISCARD std::string* release_percentage();
  void set_allocated_percentage(std::string* percentage);
  private:
  const std::string& _internal_percentage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_percentage(const std::string& value);
  std::string* _internal_mutable_percentage();
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.AutofillOfferSpecifics.PercentageReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr percentage_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fautofill_5foffer_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class AutofillOfferSpecifics_FixedAmountReward final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AutofillOfferSpecifics.FixedAmountReward) */ {
 public:
  inline AutofillOfferSpecifics_FixedAmountReward() : AutofillOfferSpecifics_FixedAmountReward(nullptr) {}
  ~AutofillOfferSpecifics_FixedAmountReward() override;
  explicit PROTOBUF_CONSTEXPR AutofillOfferSpecifics_FixedAmountReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillOfferSpecifics_FixedAmountReward(const AutofillOfferSpecifics_FixedAmountReward& from);
  AutofillOfferSpecifics_FixedAmountReward(AutofillOfferSpecifics_FixedAmountReward&& from) noexcept
    : AutofillOfferSpecifics_FixedAmountReward() {
    *this = ::std::move(from);
  }

  inline AutofillOfferSpecifics_FixedAmountReward& operator=(const AutofillOfferSpecifics_FixedAmountReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillOfferSpecifics_FixedAmountReward& operator=(AutofillOfferSpecifics_FixedAmountReward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutofillOfferSpecifics_FixedAmountReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutofillOfferSpecifics_FixedAmountReward* internal_default_instance() {
    return reinterpret_cast<const AutofillOfferSpecifics_FixedAmountReward*>(
               &_AutofillOfferSpecifics_FixedAmountReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AutofillOfferSpecifics_FixedAmountReward& a, AutofillOfferSpecifics_FixedAmountReward& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AutofillOfferSpecifics_FixedAmountReward* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillOfferSpecifics_FixedAmountReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutofillOfferSpecifics_FixedAmountReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutofillOfferSpecifics_FixedAmountReward>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AutofillOfferSpecifics_FixedAmountReward& from);
  void MergeFrom(const AutofillOfferSpecifics_FixedAmountReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillOfferSpecifics_FixedAmountReward* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AutofillOfferSpecifics.FixedAmountReward";
  }
  protected:
  explicit AutofillOfferSpecifics_FixedAmountReward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
  };
  // optional string amount = 1;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:sync_pb.AutofillOfferSpecifics.FixedAmountReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fautofill_5foffer_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class AutofillOfferSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.AutofillOfferSpecifics) */ {
 public:
  inline AutofillOfferSpecifics() : AutofillOfferSpecifics(nullptr) {}
  ~AutofillOfferSpecifics() override;
  explicit PROTOBUF_CONSTEXPR AutofillOfferSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillOfferSpecifics(const AutofillOfferSpecifics& from);
  AutofillOfferSpecifics(AutofillOfferSpecifics&& from) noexcept
    : AutofillOfferSpecifics() {
    *this = ::std::move(from);
  }

  inline AutofillOfferSpecifics& operator=(const AutofillOfferSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillOfferSpecifics& operator=(AutofillOfferSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutofillOfferSpecifics& default_instance() {
    return *internal_default_instance();
  }
  enum TypeSpecificOfferDataCase {
    kCardLinkedOfferData = 6,
    kPromoCodeOfferData = 9,
    TYPE_SPECIFIC_OFFER_DATA_NOT_SET = 0,
  };

  enum RewardTypeCase {
    kPercentageReward = 7,
    kFixedAmountReward = 8,
    REWARD_TYPE_NOT_SET = 0,
  };

  static inline const AutofillOfferSpecifics* internal_default_instance() {
    return reinterpret_cast<const AutofillOfferSpecifics*>(
               &_AutofillOfferSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AutofillOfferSpecifics& a, AutofillOfferSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AutofillOfferSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillOfferSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutofillOfferSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutofillOfferSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AutofillOfferSpecifics& from);
  void MergeFrom(const AutofillOfferSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillOfferSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.AutofillOfferSpecifics";
  }
  protected:
  explicit AutofillOfferSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AutofillOfferSpecifics_CardLinkedOfferData CardLinkedOfferData;
  typedef AutofillOfferSpecifics_PromoCodeOfferData PromoCodeOfferData;
  typedef AutofillOfferSpecifics_DisplayStrings DisplayStrings;
  typedef AutofillOfferSpecifics_PercentageReward PercentageReward;
  typedef AutofillOfferSpecifics_FixedAmountReward FixedAmountReward;

  // accessors -------------------------------------------------------

  enum : int {
    kMerchantDomainFieldNumber = 3,
    kMerchantAppPackageFieldNumber = 4,
    kOfferDetailsUrlFieldNumber = 2,
    kDisplayStringsFieldNumber = 10,
    kIdFieldNumber = 1,
    kOfferExpiryDateFieldNumber = 5,
    kCardLinkedOfferDataFieldNumber = 6,
    kPromoCodeOfferDataFieldNumber = 9,
    kPercentageRewardFieldNumber = 7,
    kFixedAmountRewardFieldNumber = 8,
  };
  // repeated string merchant_domain = 3;
  int merchant_domain_size() const;
  private:
  int _internal_merchant_domain_size() const;
  public:
  void clear_merchant_domain();
  const std::string& merchant_domain(int index) const;
  std::string* mutable_merchant_domain(int index);
  void set_merchant_domain(int index, const std::string& value);
  void set_merchant_domain(int index, std::string&& value);
  void set_merchant_domain(int index, const char* value);
  void set_merchant_domain(int index, const char* value, size_t size);
  std::string* add_merchant_domain();
  void add_merchant_domain(const std::string& value);
  void add_merchant_domain(std::string&& value);
  void add_merchant_domain(const char* value);
  void add_merchant_domain(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& merchant_domain() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_merchant_domain();
  private:
  const std::string& _internal_merchant_domain(int index) const;
  std::string* _internal_add_merchant_domain();
  public:

  // repeated string merchant_app_package = 4;
  int merchant_app_package_size() const;
  private:
  int _internal_merchant_app_package_size() const;
  public:
  void clear_merchant_app_package();
  const std::string& merchant_app_package(int index) const;
  std::string* mutable_merchant_app_package(int index);
  void set_merchant_app_package(int index, const std::string& value);
  void set_merchant_app_package(int index, std::string&& value);
  void set_merchant_app_package(int index, const char* value);
  void set_merchant_app_package(int index, const char* value, size_t size);
  std::string* add_merchant_app_package();
  void add_merchant_app_package(const std::string& value);
  void add_merchant_app_package(std::string&& value);
  void add_merchant_app_package(const char* value);
  void add_merchant_app_package(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& merchant_app_package() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_merchant_app_package();
  private:
  const std::string& _internal_merchant_app_package(int index) const;
  std::string* _internal_add_merchant_app_package();
  public:

  // optional string offer_details_url = 2;
  bool has_offer_details_url() const;
  private:
  bool _internal_has_offer_details_url() const;
  public:
  void clear_offer_details_url();
  const std::string& offer_details_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_offer_details_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_offer_details_url();
  PROTOBUF_NODISCARD std::string* release_offer_details_url();
  void set_allocated_offer_details_url(std::string* offer_details_url);
  private:
  const std::string& _internal_offer_details_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_offer_details_url(const std::string& value);
  std::string* _internal_mutable_offer_details_url();
  public:

  // optional .sync_pb.AutofillOfferSpecifics.DisplayStrings display_strings = 10;
  bool has_display_strings() const;
  private:
  bool _internal_has_display_strings() const;
  public:
  void clear_display_strings();
  const ::sync_pb::AutofillOfferSpecifics_DisplayStrings& display_strings() const;
  PROTOBUF_NODISCARD ::sync_pb::AutofillOfferSpecifics_DisplayStrings* release_display_strings();
  ::sync_pb::AutofillOfferSpecifics_DisplayStrings* mutable_display_strings();
  void set_allocated_display_strings(::sync_pb::AutofillOfferSpecifics_DisplayStrings* display_strings);
  private:
  const ::sync_pb::AutofillOfferSpecifics_DisplayStrings& _internal_display_strings() const;
  ::sync_pb::AutofillOfferSpecifics_DisplayStrings* _internal_mutable_display_strings();
  public:
  void unsafe_arena_set_allocated_display_strings(
      ::sync_pb::AutofillOfferSpecifics_DisplayStrings* display_strings);
  ::sync_pb::AutofillOfferSpecifics_DisplayStrings* unsafe_arena_release_display_strings();

  // optional int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // optional int64 offer_expiry_date = 5;
  bool has_offer_expiry_date() const;
  private:
  bool _internal_has_offer_expiry_date() const;
  public:
  void clear_offer_expiry_date();
  int64_t offer_expiry_date() const;
  void set_offer_expiry_date(int64_t value);
  private:
  int64_t _internal_offer_expiry_date() const;
  void _internal_set_offer_expiry_date(int64_t value);
  public:

  // .sync_pb.AutofillOfferSpecifics.CardLinkedOfferData card_linked_offer_data = 6;
  bool has_card_linked_offer_data() const;
  private:
  bool _internal_has_card_linked_offer_data() const;
  public:
  void clear_card_linked_offer_data();
  const ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData& card_linked_offer_data() const;
  PROTOBUF_NODISCARD ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData* release_card_linked_offer_data();
  ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData* mutable_card_linked_offer_data();
  void set_allocated_card_linked_offer_data(::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData* card_linked_offer_data);
  private:
  const ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData& _internal_card_linked_offer_data() const;
  ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData* _internal_mutable_card_linked_offer_data();
  public:
  void unsafe_arena_set_allocated_card_linked_offer_data(
      ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData* card_linked_offer_data);
  ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData* unsafe_arena_release_card_linked_offer_data();

  // .sync_pb.AutofillOfferSpecifics.PromoCodeOfferData promo_code_offer_data = 9;
  bool has_promo_code_offer_data() const;
  private:
  bool _internal_has_promo_code_offer_data() const;
  public:
  void clear_promo_code_offer_data();
  const ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData& promo_code_offer_data() const;
  PROTOBUF_NODISCARD ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData* release_promo_code_offer_data();
  ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData* mutable_promo_code_offer_data();
  void set_allocated_promo_code_offer_data(::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData* promo_code_offer_data);
  private:
  const ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData& _internal_promo_code_offer_data() const;
  ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData* _internal_mutable_promo_code_offer_data();
  public:
  void unsafe_arena_set_allocated_promo_code_offer_data(
      ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData* promo_code_offer_data);
  ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData* unsafe_arena_release_promo_code_offer_data();

  // .sync_pb.AutofillOfferSpecifics.PercentageReward percentage_reward = 7;
  bool has_percentage_reward() const;
  private:
  bool _internal_has_percentage_reward() const;
  public:
  void clear_percentage_reward();
  const ::sync_pb::AutofillOfferSpecifics_PercentageReward& percentage_reward() const;
  PROTOBUF_NODISCARD ::sync_pb::AutofillOfferSpecifics_PercentageReward* release_percentage_reward();
  ::sync_pb::AutofillOfferSpecifics_PercentageReward* mutable_percentage_reward();
  void set_allocated_percentage_reward(::sync_pb::AutofillOfferSpecifics_PercentageReward* percentage_reward);
  private:
  const ::sync_pb::AutofillOfferSpecifics_PercentageReward& _internal_percentage_reward() const;
  ::sync_pb::AutofillOfferSpecifics_PercentageReward* _internal_mutable_percentage_reward();
  public:
  void unsafe_arena_set_allocated_percentage_reward(
      ::sync_pb::AutofillOfferSpecifics_PercentageReward* percentage_reward);
  ::sync_pb::AutofillOfferSpecifics_PercentageReward* unsafe_arena_release_percentage_reward();

  // .sync_pb.AutofillOfferSpecifics.FixedAmountReward fixed_amount_reward = 8;
  bool has_fixed_amount_reward() const;
  private:
  bool _internal_has_fixed_amount_reward() const;
  public:
  void clear_fixed_amount_reward();
  const ::sync_pb::AutofillOfferSpecifics_FixedAmountReward& fixed_amount_reward() const;
  PROTOBUF_NODISCARD ::sync_pb::AutofillOfferSpecifics_FixedAmountReward* release_fixed_amount_reward();
  ::sync_pb::AutofillOfferSpecifics_FixedAmountReward* mutable_fixed_amount_reward();
  void set_allocated_fixed_amount_reward(::sync_pb::AutofillOfferSpecifics_FixedAmountReward* fixed_amount_reward);
  private:
  const ::sync_pb::AutofillOfferSpecifics_FixedAmountReward& _internal_fixed_amount_reward() const;
  ::sync_pb::AutofillOfferSpecifics_FixedAmountReward* _internal_mutable_fixed_amount_reward();
  public:
  void unsafe_arena_set_allocated_fixed_amount_reward(
      ::sync_pb::AutofillOfferSpecifics_FixedAmountReward* fixed_amount_reward);
  ::sync_pb::AutofillOfferSpecifics_FixedAmountReward* unsafe_arena_release_fixed_amount_reward();

  void clear_type_specific_offer_data();
  TypeSpecificOfferDataCase type_specific_offer_data_case() const;
  void clear_reward_type();
  RewardTypeCase reward_type_case() const;
  // @@protoc_insertion_point(class_scope:sync_pb.AutofillOfferSpecifics)
 private:
  class _Internal;
  void set_has_card_linked_offer_data();
  void set_has_promo_code_offer_data();
  void set_has_percentage_reward();
  void set_has_fixed_amount_reward();

  inline bool has_type_specific_offer_data() const;
  inline void clear_has_type_specific_offer_data();

  inline bool has_reward_type() const;
  inline void clear_has_reward_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> merchant_domain_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> merchant_app_package_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offer_details_url_;
  ::sync_pb::AutofillOfferSpecifics_DisplayStrings* display_strings_;
  int64_t id_;
  int64_t offer_expiry_date_;
  union TypeSpecificOfferDataUnion {
    constexpr TypeSpecificOfferDataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData* card_linked_offer_data_;
    ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData* promo_code_offer_data_;
  } type_specific_offer_data_;
  union RewardTypeUnion {
    constexpr RewardTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::sync_pb::AutofillOfferSpecifics_PercentageReward* percentage_reward_;
    ::sync_pb::AutofillOfferSpecifics_FixedAmountReward* fixed_amount_reward_;
  } reward_type_;
  uint32_t _oneof_case_[2];

  friend struct ::TableStruct_components_2fsync_2fprotocol_2fautofill_5foffer_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AutofillOfferSpecifics_CardLinkedOfferData

// repeated int64 instrument_id = 3;
inline int AutofillOfferSpecifics_CardLinkedOfferData::_internal_instrument_id_size() const {
  return instrument_id_.size();
}
inline int AutofillOfferSpecifics_CardLinkedOfferData::instrument_id_size() const {
  return _internal_instrument_id_size();
}
inline void AutofillOfferSpecifics_CardLinkedOfferData::clear_instrument_id() {
  instrument_id_.Clear();
}
inline int64_t AutofillOfferSpecifics_CardLinkedOfferData::_internal_instrument_id(int index) const {
  return instrument_id_.Get(index);
}
inline int64_t AutofillOfferSpecifics_CardLinkedOfferData::instrument_id(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillOfferSpecifics.CardLinkedOfferData.instrument_id)
  return _internal_instrument_id(index);
}
inline void AutofillOfferSpecifics_CardLinkedOfferData::set_instrument_id(int index, int64_t value) {
  instrument_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillOfferSpecifics.CardLinkedOfferData.instrument_id)
}
inline void AutofillOfferSpecifics_CardLinkedOfferData::_internal_add_instrument_id(int64_t value) {
  instrument_id_.Add(value);
}
inline void AutofillOfferSpecifics_CardLinkedOfferData::add_instrument_id(int64_t value) {
  _internal_add_instrument_id(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillOfferSpecifics.CardLinkedOfferData.instrument_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AutofillOfferSpecifics_CardLinkedOfferData::_internal_instrument_id() const {
  return instrument_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AutofillOfferSpecifics_CardLinkedOfferData::instrument_id() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillOfferSpecifics.CardLinkedOfferData.instrument_id)
  return _internal_instrument_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AutofillOfferSpecifics_CardLinkedOfferData::_internal_mutable_instrument_id() {
  return &instrument_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AutofillOfferSpecifics_CardLinkedOfferData::mutable_instrument_id() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillOfferSpecifics.CardLinkedOfferData.instrument_id)
  return _internal_mutable_instrument_id();
}

// -------------------------------------------------------------------

// AutofillOfferSpecifics_PromoCodeOfferData

// optional string promo_code = 1;
inline bool AutofillOfferSpecifics_PromoCodeOfferData::_internal_has_promo_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AutofillOfferSpecifics_PromoCodeOfferData::has_promo_code() const {
  return _internal_has_promo_code();
}
inline void AutofillOfferSpecifics_PromoCodeOfferData::clear_promo_code() {
  promo_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AutofillOfferSpecifics_PromoCodeOfferData::promo_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillOfferSpecifics.PromoCodeOfferData.promo_code)
  return _internal_promo_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillOfferSpecifics_PromoCodeOfferData::set_promo_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 promo_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillOfferSpecifics.PromoCodeOfferData.promo_code)
}
inline std::string* AutofillOfferSpecifics_PromoCodeOfferData::mutable_promo_code() {
  std::string* _s = _internal_mutable_promo_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillOfferSpecifics.PromoCodeOfferData.promo_code)
  return _s;
}
inline const std::string& AutofillOfferSpecifics_PromoCodeOfferData::_internal_promo_code() const {
  return promo_code_.Get();
}
inline void AutofillOfferSpecifics_PromoCodeOfferData::_internal_set_promo_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  promo_code_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillOfferSpecifics_PromoCodeOfferData::_internal_mutable_promo_code() {
  _has_bits_[0] |= 0x00000001u;
  return promo_code_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillOfferSpecifics_PromoCodeOfferData::release_promo_code() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillOfferSpecifics.PromoCodeOfferData.promo_code)
  if (!_internal_has_promo_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = promo_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (promo_code_.IsDefault()) {
    promo_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillOfferSpecifics_PromoCodeOfferData::set_allocated_promo_code(std::string* promo_code) {
  if (promo_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  promo_code_.SetAllocated(promo_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (promo_code_.IsDefault()) {
    promo_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillOfferSpecifics.PromoCodeOfferData.promo_code)
}

// -------------------------------------------------------------------

// AutofillOfferSpecifics_DisplayStrings

// optional string value_prop_text = 1;
inline bool AutofillOfferSpecifics_DisplayStrings::_internal_has_value_prop_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AutofillOfferSpecifics_DisplayStrings::has_value_prop_text() const {
  return _internal_has_value_prop_text();
}
inline void AutofillOfferSpecifics_DisplayStrings::clear_value_prop_text() {
  value_prop_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AutofillOfferSpecifics_DisplayStrings::value_prop_text() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillOfferSpecifics.DisplayStrings.value_prop_text)
  return _internal_value_prop_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillOfferSpecifics_DisplayStrings::set_value_prop_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 value_prop_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillOfferSpecifics.DisplayStrings.value_prop_text)
}
inline std::string* AutofillOfferSpecifics_DisplayStrings::mutable_value_prop_text() {
  std::string* _s = _internal_mutable_value_prop_text();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillOfferSpecifics.DisplayStrings.value_prop_text)
  return _s;
}
inline const std::string& AutofillOfferSpecifics_DisplayStrings::_internal_value_prop_text() const {
  return value_prop_text_.Get();
}
inline void AutofillOfferSpecifics_DisplayStrings::_internal_set_value_prop_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_prop_text_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillOfferSpecifics_DisplayStrings::_internal_mutable_value_prop_text() {
  _has_bits_[0] |= 0x00000001u;
  return value_prop_text_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillOfferSpecifics_DisplayStrings::release_value_prop_text() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillOfferSpecifics.DisplayStrings.value_prop_text)
  if (!_internal_has_value_prop_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = value_prop_text_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_prop_text_.IsDefault()) {
    value_prop_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillOfferSpecifics_DisplayStrings::set_allocated_value_prop_text(std::string* value_prop_text) {
  if (value_prop_text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_prop_text_.SetAllocated(value_prop_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_prop_text_.IsDefault()) {
    value_prop_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillOfferSpecifics.DisplayStrings.value_prop_text)
}

// optional string see_details_text_mobile = 2;
inline bool AutofillOfferSpecifics_DisplayStrings::_internal_has_see_details_text_mobile() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AutofillOfferSpecifics_DisplayStrings::has_see_details_text_mobile() const {
  return _internal_has_see_details_text_mobile();
}
inline void AutofillOfferSpecifics_DisplayStrings::clear_see_details_text_mobile() {
  see_details_text_mobile_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AutofillOfferSpecifics_DisplayStrings::see_details_text_mobile() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillOfferSpecifics.DisplayStrings.see_details_text_mobile)
  return _internal_see_details_text_mobile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillOfferSpecifics_DisplayStrings::set_see_details_text_mobile(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 see_details_text_mobile_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillOfferSpecifics.DisplayStrings.see_details_text_mobile)
}
inline std::string* AutofillOfferSpecifics_DisplayStrings::mutable_see_details_text_mobile() {
  std::string* _s = _internal_mutable_see_details_text_mobile();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillOfferSpecifics.DisplayStrings.see_details_text_mobile)
  return _s;
}
inline const std::string& AutofillOfferSpecifics_DisplayStrings::_internal_see_details_text_mobile() const {
  return see_details_text_mobile_.Get();
}
inline void AutofillOfferSpecifics_DisplayStrings::_internal_set_see_details_text_mobile(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  see_details_text_mobile_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillOfferSpecifics_DisplayStrings::_internal_mutable_see_details_text_mobile() {
  _has_bits_[0] |= 0x00000002u;
  return see_details_text_mobile_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillOfferSpecifics_DisplayStrings::release_see_details_text_mobile() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillOfferSpecifics.DisplayStrings.see_details_text_mobile)
  if (!_internal_has_see_details_text_mobile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = see_details_text_mobile_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (see_details_text_mobile_.IsDefault()) {
    see_details_text_mobile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillOfferSpecifics_DisplayStrings::set_allocated_see_details_text_mobile(std::string* see_details_text_mobile) {
  if (see_details_text_mobile != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  see_details_text_mobile_.SetAllocated(see_details_text_mobile, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (see_details_text_mobile_.IsDefault()) {
    see_details_text_mobile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillOfferSpecifics.DisplayStrings.see_details_text_mobile)
}

// optional string see_details_text_desktop = 3;
inline bool AutofillOfferSpecifics_DisplayStrings::_internal_has_see_details_text_desktop() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AutofillOfferSpecifics_DisplayStrings::has_see_details_text_desktop() const {
  return _internal_has_see_details_text_desktop();
}
inline void AutofillOfferSpecifics_DisplayStrings::clear_see_details_text_desktop() {
  see_details_text_desktop_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AutofillOfferSpecifics_DisplayStrings::see_details_text_desktop() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillOfferSpecifics.DisplayStrings.see_details_text_desktop)
  return _internal_see_details_text_desktop();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillOfferSpecifics_DisplayStrings::set_see_details_text_desktop(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 see_details_text_desktop_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillOfferSpecifics.DisplayStrings.see_details_text_desktop)
}
inline std::string* AutofillOfferSpecifics_DisplayStrings::mutable_see_details_text_desktop() {
  std::string* _s = _internal_mutable_see_details_text_desktop();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillOfferSpecifics.DisplayStrings.see_details_text_desktop)
  return _s;
}
inline const std::string& AutofillOfferSpecifics_DisplayStrings::_internal_see_details_text_desktop() const {
  return see_details_text_desktop_.Get();
}
inline void AutofillOfferSpecifics_DisplayStrings::_internal_set_see_details_text_desktop(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  see_details_text_desktop_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillOfferSpecifics_DisplayStrings::_internal_mutable_see_details_text_desktop() {
  _has_bits_[0] |= 0x00000004u;
  return see_details_text_desktop_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillOfferSpecifics_DisplayStrings::release_see_details_text_desktop() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillOfferSpecifics.DisplayStrings.see_details_text_desktop)
  if (!_internal_has_see_details_text_desktop()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = see_details_text_desktop_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (see_details_text_desktop_.IsDefault()) {
    see_details_text_desktop_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillOfferSpecifics_DisplayStrings::set_allocated_see_details_text_desktop(std::string* see_details_text_desktop) {
  if (see_details_text_desktop != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  see_details_text_desktop_.SetAllocated(see_details_text_desktop, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (see_details_text_desktop_.IsDefault()) {
    see_details_text_desktop_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillOfferSpecifics.DisplayStrings.see_details_text_desktop)
}

// optional string usage_instructions_text_mobile = 4;
inline bool AutofillOfferSpecifics_DisplayStrings::_internal_has_usage_instructions_text_mobile() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AutofillOfferSpecifics_DisplayStrings::has_usage_instructions_text_mobile() const {
  return _internal_has_usage_instructions_text_mobile();
}
inline void AutofillOfferSpecifics_DisplayStrings::clear_usage_instructions_text_mobile() {
  usage_instructions_text_mobile_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AutofillOfferSpecifics_DisplayStrings::usage_instructions_text_mobile() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillOfferSpecifics.DisplayStrings.usage_instructions_text_mobile)
  return _internal_usage_instructions_text_mobile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillOfferSpecifics_DisplayStrings::set_usage_instructions_text_mobile(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 usage_instructions_text_mobile_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillOfferSpecifics.DisplayStrings.usage_instructions_text_mobile)
}
inline std::string* AutofillOfferSpecifics_DisplayStrings::mutable_usage_instructions_text_mobile() {
  std::string* _s = _internal_mutable_usage_instructions_text_mobile();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillOfferSpecifics.DisplayStrings.usage_instructions_text_mobile)
  return _s;
}
inline const std::string& AutofillOfferSpecifics_DisplayStrings::_internal_usage_instructions_text_mobile() const {
  return usage_instructions_text_mobile_.Get();
}
inline void AutofillOfferSpecifics_DisplayStrings::_internal_set_usage_instructions_text_mobile(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  usage_instructions_text_mobile_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillOfferSpecifics_DisplayStrings::_internal_mutable_usage_instructions_text_mobile() {
  _has_bits_[0] |= 0x00000008u;
  return usage_instructions_text_mobile_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillOfferSpecifics_DisplayStrings::release_usage_instructions_text_mobile() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillOfferSpecifics.DisplayStrings.usage_instructions_text_mobile)
  if (!_internal_has_usage_instructions_text_mobile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = usage_instructions_text_mobile_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (usage_instructions_text_mobile_.IsDefault()) {
    usage_instructions_text_mobile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillOfferSpecifics_DisplayStrings::set_allocated_usage_instructions_text_mobile(std::string* usage_instructions_text_mobile) {
  if (usage_instructions_text_mobile != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  usage_instructions_text_mobile_.SetAllocated(usage_instructions_text_mobile, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (usage_instructions_text_mobile_.IsDefault()) {
    usage_instructions_text_mobile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillOfferSpecifics.DisplayStrings.usage_instructions_text_mobile)
}

// optional string usage_instructions_text_desktop = 5;
inline bool AutofillOfferSpecifics_DisplayStrings::_internal_has_usage_instructions_text_desktop() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AutofillOfferSpecifics_DisplayStrings::has_usage_instructions_text_desktop() const {
  return _internal_has_usage_instructions_text_desktop();
}
inline void AutofillOfferSpecifics_DisplayStrings::clear_usage_instructions_text_desktop() {
  usage_instructions_text_desktop_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AutofillOfferSpecifics_DisplayStrings::usage_instructions_text_desktop() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillOfferSpecifics.DisplayStrings.usage_instructions_text_desktop)
  return _internal_usage_instructions_text_desktop();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillOfferSpecifics_DisplayStrings::set_usage_instructions_text_desktop(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 usage_instructions_text_desktop_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillOfferSpecifics.DisplayStrings.usage_instructions_text_desktop)
}
inline std::string* AutofillOfferSpecifics_DisplayStrings::mutable_usage_instructions_text_desktop() {
  std::string* _s = _internal_mutable_usage_instructions_text_desktop();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillOfferSpecifics.DisplayStrings.usage_instructions_text_desktop)
  return _s;
}
inline const std::string& AutofillOfferSpecifics_DisplayStrings::_internal_usage_instructions_text_desktop() const {
  return usage_instructions_text_desktop_.Get();
}
inline void AutofillOfferSpecifics_DisplayStrings::_internal_set_usage_instructions_text_desktop(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  usage_instructions_text_desktop_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillOfferSpecifics_DisplayStrings::_internal_mutable_usage_instructions_text_desktop() {
  _has_bits_[0] |= 0x00000010u;
  return usage_instructions_text_desktop_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillOfferSpecifics_DisplayStrings::release_usage_instructions_text_desktop() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillOfferSpecifics.DisplayStrings.usage_instructions_text_desktop)
  if (!_internal_has_usage_instructions_text_desktop()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = usage_instructions_text_desktop_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (usage_instructions_text_desktop_.IsDefault()) {
    usage_instructions_text_desktop_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillOfferSpecifics_DisplayStrings::set_allocated_usage_instructions_text_desktop(std::string* usage_instructions_text_desktop) {
  if (usage_instructions_text_desktop != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  usage_instructions_text_desktop_.SetAllocated(usage_instructions_text_desktop, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (usage_instructions_text_desktop_.IsDefault()) {
    usage_instructions_text_desktop_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillOfferSpecifics.DisplayStrings.usage_instructions_text_desktop)
}

// -------------------------------------------------------------------

// AutofillOfferSpecifics_PercentageReward

// optional string percentage = 1;
inline bool AutofillOfferSpecifics_PercentageReward::_internal_has_percentage() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AutofillOfferSpecifics_PercentageReward::has_percentage() const {
  return _internal_has_percentage();
}
inline void AutofillOfferSpecifics_PercentageReward::clear_percentage() {
  percentage_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AutofillOfferSpecifics_PercentageReward::percentage() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillOfferSpecifics.PercentageReward.percentage)
  return _internal_percentage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillOfferSpecifics_PercentageReward::set_percentage(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 percentage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillOfferSpecifics.PercentageReward.percentage)
}
inline std::string* AutofillOfferSpecifics_PercentageReward::mutable_percentage() {
  std::string* _s = _internal_mutable_percentage();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillOfferSpecifics.PercentageReward.percentage)
  return _s;
}
inline const std::string& AutofillOfferSpecifics_PercentageReward::_internal_percentage() const {
  return percentage_.Get();
}
inline void AutofillOfferSpecifics_PercentageReward::_internal_set_percentage(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  percentage_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillOfferSpecifics_PercentageReward::_internal_mutable_percentage() {
  _has_bits_[0] |= 0x00000001u;
  return percentage_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillOfferSpecifics_PercentageReward::release_percentage() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillOfferSpecifics.PercentageReward.percentage)
  if (!_internal_has_percentage()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = percentage_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (percentage_.IsDefault()) {
    percentage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillOfferSpecifics_PercentageReward::set_allocated_percentage(std::string* percentage) {
  if (percentage != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  percentage_.SetAllocated(percentage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (percentage_.IsDefault()) {
    percentage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillOfferSpecifics.PercentageReward.percentage)
}

// -------------------------------------------------------------------

// AutofillOfferSpecifics_FixedAmountReward

// optional string amount = 1;
inline bool AutofillOfferSpecifics_FixedAmountReward::_internal_has_amount() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AutofillOfferSpecifics_FixedAmountReward::has_amount() const {
  return _internal_has_amount();
}
inline void AutofillOfferSpecifics_FixedAmountReward::clear_amount() {
  amount_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AutofillOfferSpecifics_FixedAmountReward::amount() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillOfferSpecifics.FixedAmountReward.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillOfferSpecifics_FixedAmountReward::set_amount(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 amount_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillOfferSpecifics.FixedAmountReward.amount)
}
inline std::string* AutofillOfferSpecifics_FixedAmountReward::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillOfferSpecifics.FixedAmountReward.amount)
  return _s;
}
inline const std::string& AutofillOfferSpecifics_FixedAmountReward::_internal_amount() const {
  return amount_.Get();
}
inline void AutofillOfferSpecifics_FixedAmountReward::_internal_set_amount(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  amount_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillOfferSpecifics_FixedAmountReward::_internal_mutable_amount() {
  _has_bits_[0] |= 0x00000001u;
  return amount_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillOfferSpecifics_FixedAmountReward::release_amount() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillOfferSpecifics.FixedAmountReward.amount)
  if (!_internal_has_amount()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = amount_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault()) {
    amount_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillOfferSpecifics_FixedAmountReward::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  amount_.SetAllocated(amount, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault()) {
    amount_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillOfferSpecifics.FixedAmountReward.amount)
}

// -------------------------------------------------------------------

// AutofillOfferSpecifics

// optional int64 id = 1;
inline bool AutofillOfferSpecifics::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AutofillOfferSpecifics::has_id() const {
  return _internal_has_id();
}
inline void AutofillOfferSpecifics::clear_id() {
  id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t AutofillOfferSpecifics::_internal_id() const {
  return id_;
}
inline int64_t AutofillOfferSpecifics::id() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillOfferSpecifics.id)
  return _internal_id();
}
inline void AutofillOfferSpecifics::_internal_set_id(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void AutofillOfferSpecifics::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillOfferSpecifics.id)
}

// optional string offer_details_url = 2;
inline bool AutofillOfferSpecifics::_internal_has_offer_details_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AutofillOfferSpecifics::has_offer_details_url() const {
  return _internal_has_offer_details_url();
}
inline void AutofillOfferSpecifics::clear_offer_details_url() {
  offer_details_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AutofillOfferSpecifics::offer_details_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillOfferSpecifics.offer_details_url)
  return _internal_offer_details_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillOfferSpecifics::set_offer_details_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 offer_details_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sync_pb.AutofillOfferSpecifics.offer_details_url)
}
inline std::string* AutofillOfferSpecifics::mutable_offer_details_url() {
  std::string* _s = _internal_mutable_offer_details_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillOfferSpecifics.offer_details_url)
  return _s;
}
inline const std::string& AutofillOfferSpecifics::_internal_offer_details_url() const {
  return offer_details_url_.Get();
}
inline void AutofillOfferSpecifics::_internal_set_offer_details_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  offer_details_url_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillOfferSpecifics::_internal_mutable_offer_details_url() {
  _has_bits_[0] |= 0x00000001u;
  return offer_details_url_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillOfferSpecifics::release_offer_details_url() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillOfferSpecifics.offer_details_url)
  if (!_internal_has_offer_details_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = offer_details_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (offer_details_url_.IsDefault()) {
    offer_details_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillOfferSpecifics::set_allocated_offer_details_url(std::string* offer_details_url) {
  if (offer_details_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  offer_details_url_.SetAllocated(offer_details_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (offer_details_url_.IsDefault()) {
    offer_details_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillOfferSpecifics.offer_details_url)
}

// repeated string merchant_domain = 3;
inline int AutofillOfferSpecifics::_internal_merchant_domain_size() const {
  return merchant_domain_.size();
}
inline int AutofillOfferSpecifics::merchant_domain_size() const {
  return _internal_merchant_domain_size();
}
inline void AutofillOfferSpecifics::clear_merchant_domain() {
  merchant_domain_.Clear();
}
inline std::string* AutofillOfferSpecifics::add_merchant_domain() {
  std::string* _s = _internal_add_merchant_domain();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.AutofillOfferSpecifics.merchant_domain)
  return _s;
}
inline const std::string& AutofillOfferSpecifics::_internal_merchant_domain(int index) const {
  return merchant_domain_.Get(index);
}
inline const std::string& AutofillOfferSpecifics::merchant_domain(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillOfferSpecifics.merchant_domain)
  return _internal_merchant_domain(index);
}
inline std::string* AutofillOfferSpecifics::mutable_merchant_domain(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillOfferSpecifics.merchant_domain)
  return merchant_domain_.Mutable(index);
}
inline void AutofillOfferSpecifics::set_merchant_domain(int index, const std::string& value) {
  merchant_domain_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillOfferSpecifics.merchant_domain)
}
inline void AutofillOfferSpecifics::set_merchant_domain(int index, std::string&& value) {
  merchant_domain_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.AutofillOfferSpecifics.merchant_domain)
}
inline void AutofillOfferSpecifics::set_merchant_domain(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  merchant_domain_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillOfferSpecifics.merchant_domain)
}
inline void AutofillOfferSpecifics::set_merchant_domain(int index, const char* value, size_t size) {
  merchant_domain_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillOfferSpecifics.merchant_domain)
}
inline std::string* AutofillOfferSpecifics::_internal_add_merchant_domain() {
  return merchant_domain_.Add();
}
inline void AutofillOfferSpecifics::add_merchant_domain(const std::string& value) {
  merchant_domain_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillOfferSpecifics.merchant_domain)
}
inline void AutofillOfferSpecifics::add_merchant_domain(std::string&& value) {
  merchant_domain_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.AutofillOfferSpecifics.merchant_domain)
}
inline void AutofillOfferSpecifics::add_merchant_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  merchant_domain_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.AutofillOfferSpecifics.merchant_domain)
}
inline void AutofillOfferSpecifics::add_merchant_domain(const char* value, size_t size) {
  merchant_domain_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.AutofillOfferSpecifics.merchant_domain)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AutofillOfferSpecifics::merchant_domain() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillOfferSpecifics.merchant_domain)
  return merchant_domain_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AutofillOfferSpecifics::mutable_merchant_domain() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillOfferSpecifics.merchant_domain)
  return &merchant_domain_;
}

// repeated string merchant_app_package = 4;
inline int AutofillOfferSpecifics::_internal_merchant_app_package_size() const {
  return merchant_app_package_.size();
}
inline int AutofillOfferSpecifics::merchant_app_package_size() const {
  return _internal_merchant_app_package_size();
}
inline void AutofillOfferSpecifics::clear_merchant_app_package() {
  merchant_app_package_.Clear();
}
inline std::string* AutofillOfferSpecifics::add_merchant_app_package() {
  std::string* _s = _internal_add_merchant_app_package();
  // @@protoc_insertion_point(field_add_mutable:sync_pb.AutofillOfferSpecifics.merchant_app_package)
  return _s;
}
inline const std::string& AutofillOfferSpecifics::_internal_merchant_app_package(int index) const {
  return merchant_app_package_.Get(index);
}
inline const std::string& AutofillOfferSpecifics::merchant_app_package(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillOfferSpecifics.merchant_app_package)
  return _internal_merchant_app_package(index);
}
inline std::string* AutofillOfferSpecifics::mutable_merchant_app_package(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillOfferSpecifics.merchant_app_package)
  return merchant_app_package_.Mutable(index);
}
inline void AutofillOfferSpecifics::set_merchant_app_package(int index, const std::string& value) {
  merchant_app_package_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillOfferSpecifics.merchant_app_package)
}
inline void AutofillOfferSpecifics::set_merchant_app_package(int index, std::string&& value) {
  merchant_app_package_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sync_pb.AutofillOfferSpecifics.merchant_app_package)
}
inline void AutofillOfferSpecifics::set_merchant_app_package(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  merchant_app_package_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.AutofillOfferSpecifics.merchant_app_package)
}
inline void AutofillOfferSpecifics::set_merchant_app_package(int index, const char* value, size_t size) {
  merchant_app_package_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.AutofillOfferSpecifics.merchant_app_package)
}
inline std::string* AutofillOfferSpecifics::_internal_add_merchant_app_package() {
  return merchant_app_package_.Add();
}
inline void AutofillOfferSpecifics::add_merchant_app_package(const std::string& value) {
  merchant_app_package_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.AutofillOfferSpecifics.merchant_app_package)
}
inline void AutofillOfferSpecifics::add_merchant_app_package(std::string&& value) {
  merchant_app_package_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.AutofillOfferSpecifics.merchant_app_package)
}
inline void AutofillOfferSpecifics::add_merchant_app_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  merchant_app_package_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.AutofillOfferSpecifics.merchant_app_package)
}
inline void AutofillOfferSpecifics::add_merchant_app_package(const char* value, size_t size) {
  merchant_app_package_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.AutofillOfferSpecifics.merchant_app_package)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AutofillOfferSpecifics::merchant_app_package() const {
  // @@protoc_insertion_point(field_list:sync_pb.AutofillOfferSpecifics.merchant_app_package)
  return merchant_app_package_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AutofillOfferSpecifics::mutable_merchant_app_package() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.AutofillOfferSpecifics.merchant_app_package)
  return &merchant_app_package_;
}

// optional int64 offer_expiry_date = 5;
inline bool AutofillOfferSpecifics::_internal_has_offer_expiry_date() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AutofillOfferSpecifics::has_offer_expiry_date() const {
  return _internal_has_offer_expiry_date();
}
inline void AutofillOfferSpecifics::clear_offer_expiry_date() {
  offer_expiry_date_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t AutofillOfferSpecifics::_internal_offer_expiry_date() const {
  return offer_expiry_date_;
}
inline int64_t AutofillOfferSpecifics::offer_expiry_date() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillOfferSpecifics.offer_expiry_date)
  return _internal_offer_expiry_date();
}
inline void AutofillOfferSpecifics::_internal_set_offer_expiry_date(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  offer_expiry_date_ = value;
}
inline void AutofillOfferSpecifics::set_offer_expiry_date(int64_t value) {
  _internal_set_offer_expiry_date(value);
  // @@protoc_insertion_point(field_set:sync_pb.AutofillOfferSpecifics.offer_expiry_date)
}

// .sync_pb.AutofillOfferSpecifics.CardLinkedOfferData card_linked_offer_data = 6;
inline bool AutofillOfferSpecifics::_internal_has_card_linked_offer_data() const {
  return type_specific_offer_data_case() == kCardLinkedOfferData;
}
inline bool AutofillOfferSpecifics::has_card_linked_offer_data() const {
  return _internal_has_card_linked_offer_data();
}
inline void AutofillOfferSpecifics::set_has_card_linked_offer_data() {
  _oneof_case_[0] = kCardLinkedOfferData;
}
inline void AutofillOfferSpecifics::clear_card_linked_offer_data() {
  if (_internal_has_card_linked_offer_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_specific_offer_data_.card_linked_offer_data_;
    }
    clear_has_type_specific_offer_data();
  }
}
inline ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData* AutofillOfferSpecifics::release_card_linked_offer_data() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillOfferSpecifics.card_linked_offer_data)
  if (_internal_has_card_linked_offer_data()) {
    clear_has_type_specific_offer_data();
    ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData* temp = type_specific_offer_data_.card_linked_offer_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_specific_offer_data_.card_linked_offer_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData& AutofillOfferSpecifics::_internal_card_linked_offer_data() const {
  return _internal_has_card_linked_offer_data()
      ? *type_specific_offer_data_.card_linked_offer_data_
      : reinterpret_cast< ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData&>(::sync_pb::_AutofillOfferSpecifics_CardLinkedOfferData_default_instance_);
}
inline const ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData& AutofillOfferSpecifics::card_linked_offer_data() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillOfferSpecifics.card_linked_offer_data)
  return _internal_card_linked_offer_data();
}
inline ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData* AutofillOfferSpecifics::unsafe_arena_release_card_linked_offer_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.AutofillOfferSpecifics.card_linked_offer_data)
  if (_internal_has_card_linked_offer_data()) {
    clear_has_type_specific_offer_data();
    ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData* temp = type_specific_offer_data_.card_linked_offer_data_;
    type_specific_offer_data_.card_linked_offer_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AutofillOfferSpecifics::unsafe_arena_set_allocated_card_linked_offer_data(::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData* card_linked_offer_data) {
  clear_type_specific_offer_data();
  if (card_linked_offer_data) {
    set_has_card_linked_offer_data();
    type_specific_offer_data_.card_linked_offer_data_ = card_linked_offer_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.AutofillOfferSpecifics.card_linked_offer_data)
}
inline ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData* AutofillOfferSpecifics::_internal_mutable_card_linked_offer_data() {
  if (!_internal_has_card_linked_offer_data()) {
    clear_type_specific_offer_data();
    set_has_card_linked_offer_data();
    type_specific_offer_data_.card_linked_offer_data_ = CreateMaybeMessage< ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData >(GetArenaForAllocation());
  }
  return type_specific_offer_data_.card_linked_offer_data_;
}
inline ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData* AutofillOfferSpecifics::mutable_card_linked_offer_data() {
  ::sync_pb::AutofillOfferSpecifics_CardLinkedOfferData* _msg = _internal_mutable_card_linked_offer_data();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillOfferSpecifics.card_linked_offer_data)
  return _msg;
}

// .sync_pb.AutofillOfferSpecifics.PromoCodeOfferData promo_code_offer_data = 9;
inline bool AutofillOfferSpecifics::_internal_has_promo_code_offer_data() const {
  return type_specific_offer_data_case() == kPromoCodeOfferData;
}
inline bool AutofillOfferSpecifics::has_promo_code_offer_data() const {
  return _internal_has_promo_code_offer_data();
}
inline void AutofillOfferSpecifics::set_has_promo_code_offer_data() {
  _oneof_case_[0] = kPromoCodeOfferData;
}
inline void AutofillOfferSpecifics::clear_promo_code_offer_data() {
  if (_internal_has_promo_code_offer_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_specific_offer_data_.promo_code_offer_data_;
    }
    clear_has_type_specific_offer_data();
  }
}
inline ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData* AutofillOfferSpecifics::release_promo_code_offer_data() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillOfferSpecifics.promo_code_offer_data)
  if (_internal_has_promo_code_offer_data()) {
    clear_has_type_specific_offer_data();
    ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData* temp = type_specific_offer_data_.promo_code_offer_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_specific_offer_data_.promo_code_offer_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData& AutofillOfferSpecifics::_internal_promo_code_offer_data() const {
  return _internal_has_promo_code_offer_data()
      ? *type_specific_offer_data_.promo_code_offer_data_
      : reinterpret_cast< ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData&>(::sync_pb::_AutofillOfferSpecifics_PromoCodeOfferData_default_instance_);
}
inline const ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData& AutofillOfferSpecifics::promo_code_offer_data() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillOfferSpecifics.promo_code_offer_data)
  return _internal_promo_code_offer_data();
}
inline ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData* AutofillOfferSpecifics::unsafe_arena_release_promo_code_offer_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.AutofillOfferSpecifics.promo_code_offer_data)
  if (_internal_has_promo_code_offer_data()) {
    clear_has_type_specific_offer_data();
    ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData* temp = type_specific_offer_data_.promo_code_offer_data_;
    type_specific_offer_data_.promo_code_offer_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AutofillOfferSpecifics::unsafe_arena_set_allocated_promo_code_offer_data(::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData* promo_code_offer_data) {
  clear_type_specific_offer_data();
  if (promo_code_offer_data) {
    set_has_promo_code_offer_data();
    type_specific_offer_data_.promo_code_offer_data_ = promo_code_offer_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.AutofillOfferSpecifics.promo_code_offer_data)
}
inline ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData* AutofillOfferSpecifics::_internal_mutable_promo_code_offer_data() {
  if (!_internal_has_promo_code_offer_data()) {
    clear_type_specific_offer_data();
    set_has_promo_code_offer_data();
    type_specific_offer_data_.promo_code_offer_data_ = CreateMaybeMessage< ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData >(GetArenaForAllocation());
  }
  return type_specific_offer_data_.promo_code_offer_data_;
}
inline ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData* AutofillOfferSpecifics::mutable_promo_code_offer_data() {
  ::sync_pb::AutofillOfferSpecifics_PromoCodeOfferData* _msg = _internal_mutable_promo_code_offer_data();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillOfferSpecifics.promo_code_offer_data)
  return _msg;
}

// optional .sync_pb.AutofillOfferSpecifics.DisplayStrings display_strings = 10;
inline bool AutofillOfferSpecifics::_internal_has_display_strings() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || display_strings_ != nullptr);
  return value;
}
inline bool AutofillOfferSpecifics::has_display_strings() const {
  return _internal_has_display_strings();
}
inline void AutofillOfferSpecifics::clear_display_strings() {
  if (display_strings_ != nullptr) display_strings_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sync_pb::AutofillOfferSpecifics_DisplayStrings& AutofillOfferSpecifics::_internal_display_strings() const {
  const ::sync_pb::AutofillOfferSpecifics_DisplayStrings* p = display_strings_;
  return p != nullptr ? *p : reinterpret_cast<const ::sync_pb::AutofillOfferSpecifics_DisplayStrings&>(
      ::sync_pb::_AutofillOfferSpecifics_DisplayStrings_default_instance_);
}
inline const ::sync_pb::AutofillOfferSpecifics_DisplayStrings& AutofillOfferSpecifics::display_strings() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillOfferSpecifics.display_strings)
  return _internal_display_strings();
}
inline void AutofillOfferSpecifics::unsafe_arena_set_allocated_display_strings(
    ::sync_pb::AutofillOfferSpecifics_DisplayStrings* display_strings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_strings_);
  }
  display_strings_ = display_strings;
  if (display_strings) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.AutofillOfferSpecifics.display_strings)
}
inline ::sync_pb::AutofillOfferSpecifics_DisplayStrings* AutofillOfferSpecifics::release_display_strings() {
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::AutofillOfferSpecifics_DisplayStrings* temp = display_strings_;
  display_strings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sync_pb::AutofillOfferSpecifics_DisplayStrings* AutofillOfferSpecifics::unsafe_arena_release_display_strings() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillOfferSpecifics.display_strings)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::AutofillOfferSpecifics_DisplayStrings* temp = display_strings_;
  display_strings_ = nullptr;
  return temp;
}
inline ::sync_pb::AutofillOfferSpecifics_DisplayStrings* AutofillOfferSpecifics::_internal_mutable_display_strings() {
  _has_bits_[0] |= 0x00000002u;
  if (display_strings_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::AutofillOfferSpecifics_DisplayStrings>(GetArenaForAllocation());
    display_strings_ = p;
  }
  return display_strings_;
}
inline ::sync_pb::AutofillOfferSpecifics_DisplayStrings* AutofillOfferSpecifics::mutable_display_strings() {
  ::sync_pb::AutofillOfferSpecifics_DisplayStrings* _msg = _internal_mutable_display_strings();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillOfferSpecifics.display_strings)
  return _msg;
}
inline void AutofillOfferSpecifics::set_allocated_display_strings(::sync_pb::AutofillOfferSpecifics_DisplayStrings* display_strings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete display_strings_;
  }
  if (display_strings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(display_strings);
    if (message_arena != submessage_arena) {
      display_strings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_strings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  display_strings_ = display_strings;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.AutofillOfferSpecifics.display_strings)
}

// .sync_pb.AutofillOfferSpecifics.PercentageReward percentage_reward = 7;
inline bool AutofillOfferSpecifics::_internal_has_percentage_reward() const {
  return reward_type_case() == kPercentageReward;
}
inline bool AutofillOfferSpecifics::has_percentage_reward() const {
  return _internal_has_percentage_reward();
}
inline void AutofillOfferSpecifics::set_has_percentage_reward() {
  _oneof_case_[1] = kPercentageReward;
}
inline void AutofillOfferSpecifics::clear_percentage_reward() {
  if (_internal_has_percentage_reward()) {
    if (GetArenaForAllocation() == nullptr) {
      delete reward_type_.percentage_reward_;
    }
    clear_has_reward_type();
  }
}
inline ::sync_pb::AutofillOfferSpecifics_PercentageReward* AutofillOfferSpecifics::release_percentage_reward() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillOfferSpecifics.percentage_reward)
  if (_internal_has_percentage_reward()) {
    clear_has_reward_type();
    ::sync_pb::AutofillOfferSpecifics_PercentageReward* temp = reward_type_.percentage_reward_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    reward_type_.percentage_reward_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AutofillOfferSpecifics_PercentageReward& AutofillOfferSpecifics::_internal_percentage_reward() const {
  return _internal_has_percentage_reward()
      ? *reward_type_.percentage_reward_
      : reinterpret_cast< ::sync_pb::AutofillOfferSpecifics_PercentageReward&>(::sync_pb::_AutofillOfferSpecifics_PercentageReward_default_instance_);
}
inline const ::sync_pb::AutofillOfferSpecifics_PercentageReward& AutofillOfferSpecifics::percentage_reward() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillOfferSpecifics.percentage_reward)
  return _internal_percentage_reward();
}
inline ::sync_pb::AutofillOfferSpecifics_PercentageReward* AutofillOfferSpecifics::unsafe_arena_release_percentage_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.AutofillOfferSpecifics.percentage_reward)
  if (_internal_has_percentage_reward()) {
    clear_has_reward_type();
    ::sync_pb::AutofillOfferSpecifics_PercentageReward* temp = reward_type_.percentage_reward_;
    reward_type_.percentage_reward_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AutofillOfferSpecifics::unsafe_arena_set_allocated_percentage_reward(::sync_pb::AutofillOfferSpecifics_PercentageReward* percentage_reward) {
  clear_reward_type();
  if (percentage_reward) {
    set_has_percentage_reward();
    reward_type_.percentage_reward_ = percentage_reward;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.AutofillOfferSpecifics.percentage_reward)
}
inline ::sync_pb::AutofillOfferSpecifics_PercentageReward* AutofillOfferSpecifics::_internal_mutable_percentage_reward() {
  if (!_internal_has_percentage_reward()) {
    clear_reward_type();
    set_has_percentage_reward();
    reward_type_.percentage_reward_ = CreateMaybeMessage< ::sync_pb::AutofillOfferSpecifics_PercentageReward >(GetArenaForAllocation());
  }
  return reward_type_.percentage_reward_;
}
inline ::sync_pb::AutofillOfferSpecifics_PercentageReward* AutofillOfferSpecifics::mutable_percentage_reward() {
  ::sync_pb::AutofillOfferSpecifics_PercentageReward* _msg = _internal_mutable_percentage_reward();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillOfferSpecifics.percentage_reward)
  return _msg;
}

// .sync_pb.AutofillOfferSpecifics.FixedAmountReward fixed_amount_reward = 8;
inline bool AutofillOfferSpecifics::_internal_has_fixed_amount_reward() const {
  return reward_type_case() == kFixedAmountReward;
}
inline bool AutofillOfferSpecifics::has_fixed_amount_reward() const {
  return _internal_has_fixed_amount_reward();
}
inline void AutofillOfferSpecifics::set_has_fixed_amount_reward() {
  _oneof_case_[1] = kFixedAmountReward;
}
inline void AutofillOfferSpecifics::clear_fixed_amount_reward() {
  if (_internal_has_fixed_amount_reward()) {
    if (GetArenaForAllocation() == nullptr) {
      delete reward_type_.fixed_amount_reward_;
    }
    clear_has_reward_type();
  }
}
inline ::sync_pb::AutofillOfferSpecifics_FixedAmountReward* AutofillOfferSpecifics::release_fixed_amount_reward() {
  // @@protoc_insertion_point(field_release:sync_pb.AutofillOfferSpecifics.fixed_amount_reward)
  if (_internal_has_fixed_amount_reward()) {
    clear_has_reward_type();
    ::sync_pb::AutofillOfferSpecifics_FixedAmountReward* temp = reward_type_.fixed_amount_reward_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    reward_type_.fixed_amount_reward_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sync_pb::AutofillOfferSpecifics_FixedAmountReward& AutofillOfferSpecifics::_internal_fixed_amount_reward() const {
  return _internal_has_fixed_amount_reward()
      ? *reward_type_.fixed_amount_reward_
      : reinterpret_cast< ::sync_pb::AutofillOfferSpecifics_FixedAmountReward&>(::sync_pb::_AutofillOfferSpecifics_FixedAmountReward_default_instance_);
}
inline const ::sync_pb::AutofillOfferSpecifics_FixedAmountReward& AutofillOfferSpecifics::fixed_amount_reward() const {
  // @@protoc_insertion_point(field_get:sync_pb.AutofillOfferSpecifics.fixed_amount_reward)
  return _internal_fixed_amount_reward();
}
inline ::sync_pb::AutofillOfferSpecifics_FixedAmountReward* AutofillOfferSpecifics::unsafe_arena_release_fixed_amount_reward() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sync_pb.AutofillOfferSpecifics.fixed_amount_reward)
  if (_internal_has_fixed_amount_reward()) {
    clear_has_reward_type();
    ::sync_pb::AutofillOfferSpecifics_FixedAmountReward* temp = reward_type_.fixed_amount_reward_;
    reward_type_.fixed_amount_reward_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AutofillOfferSpecifics::unsafe_arena_set_allocated_fixed_amount_reward(::sync_pb::AutofillOfferSpecifics_FixedAmountReward* fixed_amount_reward) {
  clear_reward_type();
  if (fixed_amount_reward) {
    set_has_fixed_amount_reward();
    reward_type_.fixed_amount_reward_ = fixed_amount_reward;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sync_pb.AutofillOfferSpecifics.fixed_amount_reward)
}
inline ::sync_pb::AutofillOfferSpecifics_FixedAmountReward* AutofillOfferSpecifics::_internal_mutable_fixed_amount_reward() {
  if (!_internal_has_fixed_amount_reward()) {
    clear_reward_type();
    set_has_fixed_amount_reward();
    reward_type_.fixed_amount_reward_ = CreateMaybeMessage< ::sync_pb::AutofillOfferSpecifics_FixedAmountReward >(GetArenaForAllocation());
  }
  return reward_type_.fixed_amount_reward_;
}
inline ::sync_pb::AutofillOfferSpecifics_FixedAmountReward* AutofillOfferSpecifics::mutable_fixed_amount_reward() {
  ::sync_pb::AutofillOfferSpecifics_FixedAmountReward* _msg = _internal_mutable_fixed_amount_reward();
  // @@protoc_insertion_point(field_mutable:sync_pb.AutofillOfferSpecifics.fixed_amount_reward)
  return _msg;
}

inline bool AutofillOfferSpecifics::has_type_specific_offer_data() const {
  return type_specific_offer_data_case() != TYPE_SPECIFIC_OFFER_DATA_NOT_SET;
}
inline void AutofillOfferSpecifics::clear_has_type_specific_offer_data() {
  _oneof_case_[0] = TYPE_SPECIFIC_OFFER_DATA_NOT_SET;
}
inline bool AutofillOfferSpecifics::has_reward_type() const {
  return reward_type_case() != REWARD_TYPE_NOT_SET;
}
inline void AutofillOfferSpecifics::clear_has_reward_type() {
  _oneof_case_[1] = REWARD_TYPE_NOT_SET;
}
inline AutofillOfferSpecifics::TypeSpecificOfferDataCase AutofillOfferSpecifics::type_specific_offer_data_case() const {
  return AutofillOfferSpecifics::TypeSpecificOfferDataCase(_oneof_case_[0]);
}
inline AutofillOfferSpecifics::RewardTypeCase AutofillOfferSpecifics::reward_type_case() const {
  return AutofillOfferSpecifics::RewardTypeCase(_oneof_case_[1]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fautofill_5foffer_5fspecifics_2eproto
