// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/reporting/proto/synced/record.proto

#include "components/reporting/proto/synced/record.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace reporting {
PROTOBUF_CONSTEXPR Record::Record(
    ::_pbi::ConstantInitialized)
  : data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , dm_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , timestamp_us_(int64_t{0})
  , destination_(0)
{}
struct RecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordDefaultTypeInternal() {}
  union {
    Record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordDefaultTypeInternal _Record_default_instance_;
PROTOBUF_CONSTEXPR WrappedRecord::WrappedRecord(
    ::_pbi::ConstantInitialized)
  : record_digest_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , last_record_digest_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , record_(nullptr){}
struct WrappedRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WrappedRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WrappedRecordDefaultTypeInternal() {}
  union {
    WrappedRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WrappedRecordDefaultTypeInternal _WrappedRecord_default_instance_;
PROTOBUF_CONSTEXPR EncryptionInfo::EncryptionInfo(
    ::_pbi::ConstantInitialized)
  : encryption_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , public_key_id_(int64_t{0}){}
struct EncryptionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncryptionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncryptionInfoDefaultTypeInternal() {}
  union {
    EncryptionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncryptionInfoDefaultTypeInternal _EncryptionInfo_default_instance_;
PROTOBUF_CONSTEXPR SequenceInformation::SequenceInformation(
    ::_pbi::ConstantInitialized)
  : sequencing_id_(int64_t{0})
  , generation_id_(int64_t{0})
  , priority_(0)
{}
struct SequenceInformationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SequenceInformationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SequenceInformationDefaultTypeInternal() {}
  union {
    SequenceInformation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SequenceInformationDefaultTypeInternal _SequenceInformation_default_instance_;
PROTOBUF_CONSTEXPR EncryptedRecord::EncryptedRecord(
    ::_pbi::ConstantInitialized)
  : encrypted_wrapped_record_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , encryption_info_(nullptr)
  , sequence_information_(nullptr)
  , compression_information_(nullptr)
  , sequencing_information_(nullptr)
  , erp_health_data_(nullptr){}
struct EncryptedRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncryptedRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncryptedRecordDefaultTypeInternal() {}
  union {
    EncryptedRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncryptedRecordDefaultTypeInternal _EncryptedRecord_default_instance_;
PROTOBUF_CONSTEXPR CompressionInformation::CompressionInformation(
    ::_pbi::ConstantInitialized)
  : compression_algorithm_(0)
{}
struct CompressionInformationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompressionInformationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompressionInformationDefaultTypeInternal() {}
  union {
    CompressionInformation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompressionInformationDefaultTypeInternal _CompressionInformation_default_instance_;
PROTOBUF_CONSTEXPR SignedEncryptionInfo::SignedEncryptionInfo(
    ::_pbi::ConstantInitialized)
  : public_asymmetric_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , signature_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , public_key_id_(0){}
struct SignedEncryptionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignedEncryptionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignedEncryptionInfoDefaultTypeInternal() {}
  union {
    SignedEncryptionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignedEncryptionInfoDefaultTypeInternal _SignedEncryptionInfo_default_instance_;
}  // namespace reporting
namespace reporting {
bool CompressionInformation_CompressionAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CompressionInformation_CompressionAlgorithm_strings[2] = {};

static const char CompressionInformation_CompressionAlgorithm_names[] =
  "COMPRESSION_NONE"
  "COMPRESSION_SNAPPY";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CompressionInformation_CompressionAlgorithm_entries[] = {
  { {CompressionInformation_CompressionAlgorithm_names + 0, 16}, 0 },
  { {CompressionInformation_CompressionAlgorithm_names + 16, 18}, 1 },
};

static const int CompressionInformation_CompressionAlgorithm_entries_by_number[] = {
  0, // 0 -> COMPRESSION_NONE
  1, // 1 -> COMPRESSION_SNAPPY
};

const std::string& CompressionInformation_CompressionAlgorithm_Name(
    CompressionInformation_CompressionAlgorithm value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CompressionInformation_CompressionAlgorithm_entries,
          CompressionInformation_CompressionAlgorithm_entries_by_number,
          2, CompressionInformation_CompressionAlgorithm_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CompressionInformation_CompressionAlgorithm_entries,
      CompressionInformation_CompressionAlgorithm_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CompressionInformation_CompressionAlgorithm_strings[idx].get();
}
bool CompressionInformation_CompressionAlgorithm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CompressionInformation_CompressionAlgorithm* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CompressionInformation_CompressionAlgorithm_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<CompressionInformation_CompressionAlgorithm>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CompressionInformation_CompressionAlgorithm CompressionInformation::COMPRESSION_NONE;
constexpr CompressionInformation_CompressionAlgorithm CompressionInformation::COMPRESSION_SNAPPY;
constexpr CompressionInformation_CompressionAlgorithm CompressionInformation::CompressionAlgorithm_MIN;
constexpr CompressionInformation_CompressionAlgorithm CompressionInformation::CompressionAlgorithm_MAX;
constexpr int CompressionInformation::CompressionAlgorithm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Record::_Internal {
 public:
  using HasBits = decltype(std::declval<Record>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_destination(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dm_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp_us(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Record::Record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reporting.Record)
}
Record::Record(const Record& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  dm_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dm_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dm_token()) {
    dm_token_.Set(from._internal_dm_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&timestamp_us_, &from.timestamp_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&destination_) -
    reinterpret_cast<char*>(&timestamp_us_)) + sizeof(destination_));
  // @@protoc_insertion_point(copy_constructor:reporting.Record)
}

inline void Record::SharedCtor() {
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dm_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dm_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_us_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&destination_) -
    reinterpret_cast<char*>(&timestamp_us_)) + sizeof(destination_));
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:reporting.Record)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Record::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.Destroy();
  dm_token_.Destroy();
}

void Record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:reporting.Record)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      dm_token_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&timestamp_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&destination_) -
        reinterpret_cast<char*>(&timestamp_us_)) + sizeof(destination_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Record::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .reporting.Destination destination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::reporting::Destination_IsValid(val))) {
            _internal_set_destination(static_cast<::reporting::Destination>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string dm_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dm_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_timestamp_us(&has_bits);
          timestamp_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Record::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reporting.Record)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // optional .reporting.Destination destination = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_destination(), target);
  }

  // optional string dm_token = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dm_token(), target);
  }

  // optional int64 timestamp_us = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reporting.Record)
  return target;
}

size_t Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reporting.Record)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional string dm_token = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dm_token());
    }

    // optional int64 timestamp_us = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_us());
    }

    // optional .reporting.Destination destination = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_destination());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Record::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Record*>(
      &from));
}

void Record::MergeFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reporting.Record)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_dm_token(from._internal_dm_token());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_us_ = from.timestamp_us_;
    }
    if (cached_has_bits & 0x00000008u) {
      destination_ = from.destination_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Record::CopyFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reporting.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {
  return true;
}

void Record::InternalSwap(Record* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &dm_token_, lhs_arena,
      &other->dm_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Record, destination_)
      + sizeof(Record::destination_)
      - PROTOBUF_FIELD_OFFSET(Record, timestamp_us_)>(
          reinterpret_cast<char*>(&timestamp_us_),
          reinterpret_cast<char*>(&other->timestamp_us_));
}

std::string Record::GetTypeName() const {
  return "reporting.Record";
}


// ===================================================================

class WrappedRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<WrappedRecord>()._has_bits_);
  static const ::reporting::Record& record(const WrappedRecord* msg);
  static void set_has_record(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_record_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_record_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::reporting::Record&
WrappedRecord::_Internal::record(const WrappedRecord* msg) {
  return *msg->record_;
}
WrappedRecord::WrappedRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reporting.WrappedRecord)
}
WrappedRecord::WrappedRecord(const WrappedRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  record_digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    record_digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_record_digest()) {
    record_digest_.Set(from._internal_record_digest(), 
      GetArenaForAllocation());
  }
  last_record_digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_record_digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_last_record_digest()) {
    last_record_digest_.Set(from._internal_last_record_digest(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_record()) {
    record_ = new ::reporting::Record(*from.record_);
  } else {
    record_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:reporting.WrappedRecord)
}

inline void WrappedRecord::SharedCtor() {
record_digest_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  record_digest_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_record_digest_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_record_digest_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
record_ = nullptr;
}

WrappedRecord::~WrappedRecord() {
  // @@protoc_insertion_point(destructor:reporting.WrappedRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WrappedRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  record_digest_.Destroy();
  last_record_digest_.Destroy();
  if (this != internal_default_instance()) delete record_;
}

void WrappedRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WrappedRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:reporting.WrappedRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      record_digest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      last_record_digest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(record_ != nullptr);
      record_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WrappedRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .reporting.Record record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes record_digest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_record_digest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes last_record_digest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_last_record_digest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WrappedRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reporting.WrappedRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .reporting.Record record = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::record(this),
        _Internal::record(this).GetCachedSize(), target, stream);
  }

  // optional bytes record_digest = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_digest(), target);
  }

  // optional bytes last_record_digest = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_last_record_digest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reporting.WrappedRecord)
  return target;
}

size_t WrappedRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reporting.WrappedRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes record_digest = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_record_digest());
    }

    // optional bytes last_record_digest = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_last_record_digest());
    }

    // optional .reporting.Record record = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *record_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WrappedRecord::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WrappedRecord*>(
      &from));
}

void WrappedRecord::MergeFrom(const WrappedRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reporting.WrappedRecord)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_record_digest(from._internal_record_digest());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_last_record_digest(from._internal_last_record_digest());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_record()->::reporting::Record::MergeFrom(from._internal_record());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WrappedRecord::CopyFrom(const WrappedRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reporting.WrappedRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrappedRecord::IsInitialized() const {
  return true;
}

void WrappedRecord::InternalSwap(WrappedRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &record_digest_, lhs_arena,
      &other->record_digest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &last_record_digest_, lhs_arena,
      &other->last_record_digest_, rhs_arena
  );
  swap(record_, other->record_);
}

std::string WrappedRecord::GetTypeName() const {
  return "reporting.WrappedRecord";
}


// ===================================================================

class EncryptionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<EncryptionInfo>()._has_bits_);
  static void set_has_encryption_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_public_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EncryptionInfo::EncryptionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reporting.EncryptionInfo)
}
EncryptionInfo::EncryptionInfo(const EncryptionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  encryption_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encryption_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_encryption_key()) {
    encryption_key_.Set(from._internal_encryption_key(), 
      GetArenaForAllocation());
  }
  public_key_id_ = from.public_key_id_;
  // @@protoc_insertion_point(copy_constructor:reporting.EncryptionInfo)
}

inline void EncryptionInfo::SharedCtor() {
encryption_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encryption_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
public_key_id_ = int64_t{0};
}

EncryptionInfo::~EncryptionInfo() {
  // @@protoc_insertion_point(destructor:reporting.EncryptionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncryptionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encryption_key_.Destroy();
}

void EncryptionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EncryptionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:reporting.EncryptionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    encryption_key_.ClearNonDefaultToEmpty();
  }
  public_key_id_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EncryptionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes encryption_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_encryption_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 public_key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_public_key_id(&has_bits);
          public_key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncryptionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reporting.EncryptionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes encryption_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encryption_key(), target);
  }

  // optional int64 public_key_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_public_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reporting.EncryptionInfo)
  return target;
}

size_t EncryptionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reporting.EncryptionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes encryption_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_encryption_key());
    }

    // optional int64 public_key_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_public_key_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptionInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EncryptionInfo*>(
      &from));
}

void EncryptionInfo::MergeFrom(const EncryptionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reporting.EncryptionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_encryption_key(from._internal_encryption_key());
    }
    if (cached_has_bits & 0x00000002u) {
      public_key_id_ = from.public_key_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EncryptionInfo::CopyFrom(const EncryptionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reporting.EncryptionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptionInfo::IsInitialized() const {
  return true;
}

void EncryptionInfo::InternalSwap(EncryptionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &encryption_key_, lhs_arena,
      &other->encryption_key_, rhs_arena
  );
  swap(public_key_id_, other->public_key_id_);
}

std::string EncryptionInfo::GetTypeName() const {
  return "reporting.EncryptionInfo";
}


// ===================================================================

class SequenceInformation::_Internal {
 public:
  using HasBits = decltype(std::declval<SequenceInformation>()._has_bits_);
  static void set_has_sequencing_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_generation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SequenceInformation::SequenceInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reporting.SequenceInformation)
}
SequenceInformation::SequenceInformation(const SequenceInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&sequencing_id_, &from.sequencing_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&sequencing_id_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:reporting.SequenceInformation)
}

inline void SequenceInformation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sequencing_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&sequencing_id_)) + sizeof(priority_));
}

SequenceInformation::~SequenceInformation() {
  // @@protoc_insertion_point(destructor:reporting.SequenceInformation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SequenceInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SequenceInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SequenceInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:reporting.SequenceInformation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&sequencing_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&priority_) -
        reinterpret_cast<char*>(&sequencing_id_)) + sizeof(priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SequenceInformation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 sequencing_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sequencing_id(&has_bits);
          sequencing_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 generation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_generation_id(&has_bits);
          generation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .reporting.Priority priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::reporting::Priority_IsValid(val))) {
            _internal_set_priority(static_cast<::reporting::Priority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SequenceInformation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reporting.SequenceInformation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 sequencing_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_sequencing_id(), target);
  }

  // optional int64 generation_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_generation_id(), target);
  }

  // optional .reporting.Priority priority = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reporting.SequenceInformation)
  return target;
}

size_t SequenceInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reporting.SequenceInformation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 sequencing_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sequencing_id());
    }

    // optional int64 generation_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_generation_id());
    }

    // optional .reporting.Priority priority = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_priority());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequenceInformation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SequenceInformation*>(
      &from));
}

void SequenceInformation::MergeFrom(const SequenceInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reporting.SequenceInformation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      sequencing_id_ = from.sequencing_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      generation_id_ = from.generation_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      priority_ = from.priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SequenceInformation::CopyFrom(const SequenceInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reporting.SequenceInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceInformation::IsInitialized() const {
  return true;
}

void SequenceInformation::InternalSwap(SequenceInformation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SequenceInformation, priority_)
      + sizeof(SequenceInformation::priority_)
      - PROTOBUF_FIELD_OFFSET(SequenceInformation, sequencing_id_)>(
          reinterpret_cast<char*>(&sequencing_id_),
          reinterpret_cast<char*>(&other->sequencing_id_));
}

std::string SequenceInformation::GetTypeName() const {
  return "reporting.SequenceInformation";
}


// ===================================================================

class EncryptedRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<EncryptedRecord>()._has_bits_);
  static void set_has_encrypted_wrapped_record(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::reporting::EncryptionInfo& encryption_info(const EncryptedRecord* msg);
  static void set_has_encryption_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::reporting::SequenceInformation& sequence_information(const EncryptedRecord* msg);
  static void set_has_sequence_information(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::reporting::CompressionInformation& compression_information(const EncryptedRecord* msg);
  static void set_has_compression_information(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::reporting::SequenceInformation& sequencing_information(const EncryptedRecord* msg);
  static void set_has_sequencing_information(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::reporting::ERPHealthData& erp_health_data(const EncryptedRecord* msg);
  static void set_has_erp_health_data(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::reporting::EncryptionInfo&
EncryptedRecord::_Internal::encryption_info(const EncryptedRecord* msg) {
  return *msg->encryption_info_;
}
const ::reporting::SequenceInformation&
EncryptedRecord::_Internal::sequence_information(const EncryptedRecord* msg) {
  return *msg->sequence_information_;
}
const ::reporting::CompressionInformation&
EncryptedRecord::_Internal::compression_information(const EncryptedRecord* msg) {
  return *msg->compression_information_;
}
const ::reporting::SequenceInformation&
EncryptedRecord::_Internal::sequencing_information(const EncryptedRecord* msg) {
  return *msg->sequencing_information_;
}
const ::reporting::ERPHealthData&
EncryptedRecord::_Internal::erp_health_data(const EncryptedRecord* msg) {
  return *msg->erp_health_data_;
}
void EncryptedRecord::clear_erp_health_data() {
  if (erp_health_data_ != nullptr) erp_health_data_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
EncryptedRecord::EncryptedRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reporting.EncryptedRecord)
}
EncryptedRecord::EncryptedRecord(const EncryptedRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  encrypted_wrapped_record_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encrypted_wrapped_record_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_encrypted_wrapped_record()) {
    encrypted_wrapped_record_.Set(from._internal_encrypted_wrapped_record(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_encryption_info()) {
    encryption_info_ = new ::reporting::EncryptionInfo(*from.encryption_info_);
  } else {
    encryption_info_ = nullptr;
  }
  if (from._internal_has_sequence_information()) {
    sequence_information_ = new ::reporting::SequenceInformation(*from.sequence_information_);
  } else {
    sequence_information_ = nullptr;
  }
  if (from._internal_has_compression_information()) {
    compression_information_ = new ::reporting::CompressionInformation(*from.compression_information_);
  } else {
    compression_information_ = nullptr;
  }
  if (from._internal_has_sequencing_information()) {
    sequencing_information_ = new ::reporting::SequenceInformation(*from.sequencing_information_);
  } else {
    sequencing_information_ = nullptr;
  }
  if (from._internal_has_erp_health_data()) {
    erp_health_data_ = new ::reporting::ERPHealthData(*from.erp_health_data_);
  } else {
    erp_health_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:reporting.EncryptedRecord)
}

inline void EncryptedRecord::SharedCtor() {
encrypted_wrapped_record_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encrypted_wrapped_record_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&encryption_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&erp_health_data_) -
    reinterpret_cast<char*>(&encryption_info_)) + sizeof(erp_health_data_));
}

EncryptedRecord::~EncryptedRecord() {
  // @@protoc_insertion_point(destructor:reporting.EncryptedRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncryptedRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encrypted_wrapped_record_.Destroy();
  if (this != internal_default_instance()) delete encryption_info_;
  if (this != internal_default_instance()) delete sequence_information_;
  if (this != internal_default_instance()) delete compression_information_;
  if (this != internal_default_instance()) delete sequencing_information_;
  if (this != internal_default_instance()) delete erp_health_data_;
}

void EncryptedRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EncryptedRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:reporting.EncryptedRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      encrypted_wrapped_record_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(encryption_info_ != nullptr);
      encryption_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sequence_information_ != nullptr);
      sequence_information_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(compression_information_ != nullptr);
      compression_information_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(sequencing_information_ != nullptr);
      sequencing_information_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(erp_health_data_ != nullptr);
      erp_health_data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EncryptedRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes encrypted_wrapped_record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_encrypted_wrapped_record();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .reporting.EncryptionInfo encryption_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_encryption_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .reporting.SequenceInformation sequence_information = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sequence_information(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .reporting.CompressionInformation compression_information = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_compression_information(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .reporting.SequenceInformation sequencing_information = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sequencing_information(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .reporting.ERPHealthData erp_health_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_erp_health_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncryptedRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reporting.EncryptedRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes encrypted_wrapped_record = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encrypted_wrapped_record(), target);
  }

  // optional .reporting.EncryptionInfo encryption_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::encryption_info(this),
        _Internal::encryption_info(this).GetCachedSize(), target, stream);
  }

  // optional .reporting.SequenceInformation sequence_information = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sequence_information(this),
        _Internal::sequence_information(this).GetCachedSize(), target, stream);
  }

  // optional .reporting.CompressionInformation compression_information = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::compression_information(this),
        _Internal::compression_information(this).GetCachedSize(), target, stream);
  }

  // optional .reporting.SequenceInformation sequencing_information = 5 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::sequencing_information(this),
        _Internal::sequencing_information(this).GetCachedSize(), target, stream);
  }

  // optional .reporting.ERPHealthData erp_health_data = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::erp_health_data(this),
        _Internal::erp_health_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reporting.EncryptedRecord)
  return target;
}

size_t EncryptedRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reporting.EncryptedRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes encrypted_wrapped_record = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_encrypted_wrapped_record());
    }

    // optional .reporting.EncryptionInfo encryption_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *encryption_info_);
    }

    // optional .reporting.SequenceInformation sequence_information = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sequence_information_);
    }

    // optional .reporting.CompressionInformation compression_information = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *compression_information_);
    }

    // optional .reporting.SequenceInformation sequencing_information = 5 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sequencing_information_);
    }

    // optional .reporting.ERPHealthData erp_health_data = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *erp_health_data_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptedRecord::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EncryptedRecord*>(
      &from));
}

void EncryptedRecord::MergeFrom(const EncryptedRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reporting.EncryptedRecord)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_encrypted_wrapped_record(from._internal_encrypted_wrapped_record());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_encryption_info()->::reporting::EncryptionInfo::MergeFrom(from._internal_encryption_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_sequence_information()->::reporting::SequenceInformation::MergeFrom(from._internal_sequence_information());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_compression_information()->::reporting::CompressionInformation::MergeFrom(from._internal_compression_information());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_sequencing_information()->::reporting::SequenceInformation::MergeFrom(from._internal_sequencing_information());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_erp_health_data()->::reporting::ERPHealthData::MergeFrom(from._internal_erp_health_data());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EncryptedRecord::CopyFrom(const EncryptedRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reporting.EncryptedRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedRecord::IsInitialized() const {
  return true;
}

void EncryptedRecord::InternalSwap(EncryptedRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &encrypted_wrapped_record_, lhs_arena,
      &other->encrypted_wrapped_record_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EncryptedRecord, erp_health_data_)
      + sizeof(EncryptedRecord::erp_health_data_)
      - PROTOBUF_FIELD_OFFSET(EncryptedRecord, encryption_info_)>(
          reinterpret_cast<char*>(&encryption_info_),
          reinterpret_cast<char*>(&other->encryption_info_));
}

std::string EncryptedRecord::GetTypeName() const {
  return "reporting.EncryptedRecord";
}


// ===================================================================

class CompressionInformation::_Internal {
 public:
  using HasBits = decltype(std::declval<CompressionInformation>()._has_bits_);
  static void set_has_compression_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CompressionInformation::CompressionInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reporting.CompressionInformation)
}
CompressionInformation::CompressionInformation(const CompressionInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  compression_algorithm_ = from.compression_algorithm_;
  // @@protoc_insertion_point(copy_constructor:reporting.CompressionInformation)
}

inline void CompressionInformation::SharedCtor() {
compression_algorithm_ = 0;
}

CompressionInformation::~CompressionInformation() {
  // @@protoc_insertion_point(destructor:reporting.CompressionInformation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompressionInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CompressionInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompressionInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:reporting.CompressionInformation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compression_algorithm_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CompressionInformation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .reporting.CompressionInformation.CompressionAlgorithm compression_algorithm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::reporting::CompressionInformation_CompressionAlgorithm_IsValid(val))) {
            _internal_set_compression_algorithm(static_cast<::reporting::CompressionInformation_CompressionAlgorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompressionInformation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reporting.CompressionInformation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .reporting.CompressionInformation.CompressionAlgorithm compression_algorithm = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_compression_algorithm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reporting.CompressionInformation)
  return target;
}

size_t CompressionInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reporting.CompressionInformation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .reporting.CompressionInformation.CompressionAlgorithm compression_algorithm = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_compression_algorithm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompressionInformation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CompressionInformation*>(
      &from));
}

void CompressionInformation::MergeFrom(const CompressionInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reporting.CompressionInformation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_compression_algorithm()) {
    _internal_set_compression_algorithm(from._internal_compression_algorithm());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CompressionInformation::CopyFrom(const CompressionInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reporting.CompressionInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressionInformation::IsInitialized() const {
  return true;
}

void CompressionInformation::InternalSwap(CompressionInformation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(compression_algorithm_, other->compression_algorithm_);
}

std::string CompressionInformation::GetTypeName() const {
  return "reporting.CompressionInformation";
}


// ===================================================================

class SignedEncryptionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SignedEncryptionInfo>()._has_bits_);
  static void set_has_public_asymmetric_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_public_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SignedEncryptionInfo::SignedEncryptionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reporting.SignedEncryptionInfo)
}
SignedEncryptionInfo::SignedEncryptionInfo(const SignedEncryptionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  public_asymmetric_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    public_asymmetric_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_public_asymmetric_key()) {
    public_asymmetric_key_.Set(from._internal_public_asymmetric_key(), 
      GetArenaForAllocation());
  }
  signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    signature_.Set(from._internal_signature(), 
      GetArenaForAllocation());
  }
  public_key_id_ = from.public_key_id_;
  // @@protoc_insertion_point(copy_constructor:reporting.SignedEncryptionInfo)
}

inline void SignedEncryptionInfo::SharedCtor() {
public_asymmetric_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  public_asymmetric_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
signature_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
public_key_id_ = 0;
}

SignedEncryptionInfo::~SignedEncryptionInfo() {
  // @@protoc_insertion_point(destructor:reporting.SignedEncryptionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignedEncryptionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_asymmetric_key_.Destroy();
  signature_.Destroy();
}

void SignedEncryptionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignedEncryptionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:reporting.SignedEncryptionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      public_asymmetric_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmpty();
    }
  }
  public_key_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SignedEncryptionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes public_asymmetric_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_asymmetric_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 public_key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_public_key_id(&has_bits);
          public_key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignedEncryptionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reporting.SignedEncryptionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_asymmetric_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_asymmetric_key(), target);
  }

  // optional int32 public_key_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_public_key_id(), target);
  }

  // optional bytes signature = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reporting.SignedEncryptionInfo)
  return target;
}

size_t SignedEncryptionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reporting.SignedEncryptionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes public_asymmetric_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_public_asymmetric_key());
    }

    // optional bytes signature = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

    // optional int32 public_key_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_public_key_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignedEncryptionInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SignedEncryptionInfo*>(
      &from));
}

void SignedEncryptionInfo::MergeFrom(const SignedEncryptionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reporting.SignedEncryptionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_public_asymmetric_key(from._internal_public_asymmetric_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000004u) {
      public_key_id_ = from.public_key_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SignedEncryptionInfo::CopyFrom(const SignedEncryptionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reporting.SignedEncryptionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedEncryptionInfo::IsInitialized() const {
  return true;
}

void SignedEncryptionInfo::InternalSwap(SignedEncryptionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &public_asymmetric_key_, lhs_arena,
      &other->public_asymmetric_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
  swap(public_key_id_, other->public_key_id_);
}

std::string SignedEncryptionInfo::GetTypeName() const {
  return "reporting.SignedEncryptionInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace reporting
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::reporting::Record*
Arena::CreateMaybeMessage< ::reporting::Record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reporting::Record >(arena);
}
template<> PROTOBUF_NOINLINE ::reporting::WrappedRecord*
Arena::CreateMaybeMessage< ::reporting::WrappedRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reporting::WrappedRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::reporting::EncryptionInfo*
Arena::CreateMaybeMessage< ::reporting::EncryptionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reporting::EncryptionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::reporting::SequenceInformation*
Arena::CreateMaybeMessage< ::reporting::SequenceInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reporting::SequenceInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::reporting::EncryptedRecord*
Arena::CreateMaybeMessage< ::reporting::EncryptedRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reporting::EncryptedRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::reporting::CompressionInformation*
Arena::CreateMaybeMessage< ::reporting::CompressionInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reporting::CompressionInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::reporting::SignedEncryptionInfo*
Arena::CreateMaybeMessage< ::reporting::SignedEncryptionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reporting::SignedEncryptionInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
