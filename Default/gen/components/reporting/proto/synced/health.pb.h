// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/reporting/proto/synced/health.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2freporting_2fproto_2fsynced_2fhealth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2freporting_2fproto_2fsynced_2fhealth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "components/reporting/proto/synced/record_constants.pb.h"
#include "components/reporting/util/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2freporting_2fproto_2fsynced_2fhealth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2freporting_2fproto_2fsynced_2fhealth_2eproto {
  static const uint32_t offsets[];
};
namespace reporting {
class ConfirmRecordUploadCall;
struct ConfirmRecordUploadCallDefaultTypeInternal;
extern ConfirmRecordUploadCallDefaultTypeInternal _ConfirmRecordUploadCall_default_instance_;
class ERPHealthData;
struct ERPHealthDataDefaultTypeInternal;
extern ERPHealthDataDefaultTypeInternal _ERPHealthData_default_instance_;
class EnqueueRecordCall;
struct EnqueueRecordCallDefaultTypeInternal;
extern EnqueueRecordCallDefaultTypeInternal _EnqueueRecordCall_default_instance_;
class FlushPriorityCall;
struct FlushPriorityCallDefaultTypeInternal;
extern FlushPriorityCallDefaultTypeInternal _FlushPriorityCall_default_instance_;
class HealthDataHistory;
struct HealthDataHistoryDefaultTypeInternal;
extern HealthDataHistoryDefaultTypeInternal _HealthDataHistory_default_instance_;
class StorageDequeue;
struct StorageDequeueDefaultTypeInternal;
extern StorageDequeueDefaultTypeInternal _StorageDequeue_default_instance_;
class StorageEnqueue;
struct StorageEnqueueDefaultTypeInternal;
extern StorageEnqueueDefaultTypeInternal _StorageEnqueue_default_instance_;
class StorageQueueAction;
struct StorageQueueActionDefaultTypeInternal;
extern StorageQueueActionDefaultTypeInternal _StorageQueueAction_default_instance_;
class UploadEncryptedRecordCall;
struct UploadEncryptedRecordCallDefaultTypeInternal;
extern UploadEncryptedRecordCallDefaultTypeInternal _UploadEncryptedRecordCall_default_instance_;
}  // namespace reporting
PROTOBUF_NAMESPACE_OPEN
template<> ::reporting::ConfirmRecordUploadCall* Arena::CreateMaybeMessage<::reporting::ConfirmRecordUploadCall>(Arena*);
template<> ::reporting::ERPHealthData* Arena::CreateMaybeMessage<::reporting::ERPHealthData>(Arena*);
template<> ::reporting::EnqueueRecordCall* Arena::CreateMaybeMessage<::reporting::EnqueueRecordCall>(Arena*);
template<> ::reporting::FlushPriorityCall* Arena::CreateMaybeMessage<::reporting::FlushPriorityCall>(Arena*);
template<> ::reporting::HealthDataHistory* Arena::CreateMaybeMessage<::reporting::HealthDataHistory>(Arena*);
template<> ::reporting::StorageDequeue* Arena::CreateMaybeMessage<::reporting::StorageDequeue>(Arena*);
template<> ::reporting::StorageEnqueue* Arena::CreateMaybeMessage<::reporting::StorageEnqueue>(Arena*);
template<> ::reporting::StorageQueueAction* Arena::CreateMaybeMessage<::reporting::StorageQueueAction>(Arena*);
template<> ::reporting::UploadEncryptedRecordCall* Arena::CreateMaybeMessage<::reporting::UploadEncryptedRecordCall>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace reporting {

// ===================================================================

class StorageDequeue final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.StorageDequeue) */ {
 public:
  inline StorageDequeue() : StorageDequeue(nullptr) {}
  ~StorageDequeue() override;
  explicit PROTOBUF_CONSTEXPR StorageDequeue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StorageDequeue(const StorageDequeue& from);
  StorageDequeue(StorageDequeue&& from) noexcept
    : StorageDequeue() {
    *this = ::std::move(from);
  }

  inline StorageDequeue& operator=(const StorageDequeue& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageDequeue& operator=(StorageDequeue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StorageDequeue& default_instance() {
    return *internal_default_instance();
  }
  static inline const StorageDequeue* internal_default_instance() {
    return reinterpret_cast<const StorageDequeue*>(
               &_StorageDequeue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StorageDequeue& a, StorageDequeue& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StorageDequeue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageDequeue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StorageDequeue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StorageDequeue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StorageDequeue& from);
  void MergeFrom(const StorageDequeue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StorageDequeue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.StorageDequeue";
  }
  protected:
  explicit StorageDequeue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequencingIdFieldNumber = 1,
    kRecordsCountFieldNumber = 2,
  };
  // optional int64 sequencing_id = 1;
  bool has_sequencing_id() const;
  private:
  bool _internal_has_sequencing_id() const;
  public:
  void clear_sequencing_id();
  int64_t sequencing_id() const;
  void set_sequencing_id(int64_t value);
  private:
  int64_t _internal_sequencing_id() const;
  void _internal_set_sequencing_id(int64_t value);
  public:

  // optional int64 records_count = 2;
  bool has_records_count() const;
  private:
  bool _internal_has_records_count() const;
  public:
  void clear_records_count();
  int64_t records_count() const;
  void set_records_count(int64_t value);
  private:
  int64_t _internal_records_count() const;
  void _internal_set_records_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:reporting.StorageDequeue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t sequencing_id_;
  int64_t records_count_;
  friend struct ::TableStruct_components_2freporting_2fproto_2fsynced_2fhealth_2eproto;
};
// -------------------------------------------------------------------

class StorageEnqueue final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.StorageEnqueue) */ {
 public:
  inline StorageEnqueue() : StorageEnqueue(nullptr) {}
  ~StorageEnqueue() override;
  explicit PROTOBUF_CONSTEXPR StorageEnqueue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StorageEnqueue(const StorageEnqueue& from);
  StorageEnqueue(StorageEnqueue&& from) noexcept
    : StorageEnqueue() {
    *this = ::std::move(from);
  }

  inline StorageEnqueue& operator=(const StorageEnqueue& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageEnqueue& operator=(StorageEnqueue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StorageEnqueue& default_instance() {
    return *internal_default_instance();
  }
  static inline const StorageEnqueue* internal_default_instance() {
    return reinterpret_cast<const StorageEnqueue*>(
               &_StorageEnqueue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StorageEnqueue& a, StorageEnqueue& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StorageEnqueue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageEnqueue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StorageEnqueue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StorageEnqueue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StorageEnqueue& from);
  void MergeFrom(const StorageEnqueue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StorageEnqueue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.StorageEnqueue";
  }
  protected:
  explicit StorageEnqueue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequencingIdFieldNumber = 1,
  };
  // optional int64 sequencing_id = 1;
  bool has_sequencing_id() const;
  private:
  bool _internal_has_sequencing_id() const;
  public:
  void clear_sequencing_id();
  int64_t sequencing_id() const;
  void set_sequencing_id(int64_t value);
  private:
  int64_t _internal_sequencing_id() const;
  void _internal_set_sequencing_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:reporting.StorageEnqueue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t sequencing_id_;
  friend struct ::TableStruct_components_2freporting_2fproto_2fsynced_2fhealth_2eproto;
};
// -------------------------------------------------------------------

class StorageQueueAction final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.StorageQueueAction) */ {
 public:
  inline StorageQueueAction() : StorageQueueAction(nullptr) {}
  ~StorageQueueAction() override;
  explicit PROTOBUF_CONSTEXPR StorageQueueAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StorageQueueAction(const StorageQueueAction& from);
  StorageQueueAction(StorageQueueAction&& from) noexcept
    : StorageQueueAction() {
    *this = ::std::move(from);
  }

  inline StorageQueueAction& operator=(const StorageQueueAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageQueueAction& operator=(StorageQueueAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StorageQueueAction& default_instance() {
    return *internal_default_instance();
  }
  enum ActionCase {
    kStorageDequeue = 1,
    kStorageEnqueue = 2,
    ACTION_NOT_SET = 0,
  };

  static inline const StorageQueueAction* internal_default_instance() {
    return reinterpret_cast<const StorageQueueAction*>(
               &_StorageQueueAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StorageQueueAction& a, StorageQueueAction& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StorageQueueAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageQueueAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StorageQueueAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StorageQueueAction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StorageQueueAction& from);
  void MergeFrom(const StorageQueueAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StorageQueueAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.StorageQueueAction";
  }
  protected:
  explicit StorageQueueAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 3,
    kStorageDequeueFieldNumber = 1,
    kStorageEnqueueFieldNumber = 2,
  };
  // optional .reporting.StatusProto status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::reporting::StatusProto& status() const;
  PROTOBUF_NODISCARD ::reporting::StatusProto* release_status();
  ::reporting::StatusProto* mutable_status();
  void set_allocated_status(::reporting::StatusProto* status);
  private:
  const ::reporting::StatusProto& _internal_status() const;
  ::reporting::StatusProto* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::reporting::StatusProto* status);
  ::reporting::StatusProto* unsafe_arena_release_status();

  // .reporting.StorageDequeue storage_dequeue = 1;
  bool has_storage_dequeue() const;
  private:
  bool _internal_has_storage_dequeue() const;
  public:
  void clear_storage_dequeue();
  const ::reporting::StorageDequeue& storage_dequeue() const;
  PROTOBUF_NODISCARD ::reporting::StorageDequeue* release_storage_dequeue();
  ::reporting::StorageDequeue* mutable_storage_dequeue();
  void set_allocated_storage_dequeue(::reporting::StorageDequeue* storage_dequeue);
  private:
  const ::reporting::StorageDequeue& _internal_storage_dequeue() const;
  ::reporting::StorageDequeue* _internal_mutable_storage_dequeue();
  public:
  void unsafe_arena_set_allocated_storage_dequeue(
      ::reporting::StorageDequeue* storage_dequeue);
  ::reporting::StorageDequeue* unsafe_arena_release_storage_dequeue();

  // .reporting.StorageEnqueue storage_enqueue = 2;
  bool has_storage_enqueue() const;
  private:
  bool _internal_has_storage_enqueue() const;
  public:
  void clear_storage_enqueue();
  const ::reporting::StorageEnqueue& storage_enqueue() const;
  PROTOBUF_NODISCARD ::reporting::StorageEnqueue* release_storage_enqueue();
  ::reporting::StorageEnqueue* mutable_storage_enqueue();
  void set_allocated_storage_enqueue(::reporting::StorageEnqueue* storage_enqueue);
  private:
  const ::reporting::StorageEnqueue& _internal_storage_enqueue() const;
  ::reporting::StorageEnqueue* _internal_mutable_storage_enqueue();
  public:
  void unsafe_arena_set_allocated_storage_enqueue(
      ::reporting::StorageEnqueue* storage_enqueue);
  ::reporting::StorageEnqueue* unsafe_arena_release_storage_enqueue();

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:reporting.StorageQueueAction)
 private:
  class _Internal;
  void set_has_storage_dequeue();
  void set_has_storage_enqueue();

  inline bool has_action() const;
  inline void clear_has_action();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::reporting::StatusProto* status_;
  union ActionUnion {
    constexpr ActionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::reporting::StorageDequeue* storage_dequeue_;
    ::reporting::StorageEnqueue* storage_enqueue_;
  } action_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2freporting_2fproto_2fsynced_2fhealth_2eproto;
};
// -------------------------------------------------------------------

class EnqueueRecordCall final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.EnqueueRecordCall) */ {
 public:
  inline EnqueueRecordCall() : EnqueueRecordCall(nullptr) {}
  ~EnqueueRecordCall() override;
  explicit PROTOBUF_CONSTEXPR EnqueueRecordCall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnqueueRecordCall(const EnqueueRecordCall& from);
  EnqueueRecordCall(EnqueueRecordCall&& from) noexcept
    : EnqueueRecordCall() {
    *this = ::std::move(from);
  }

  inline EnqueueRecordCall& operator=(const EnqueueRecordCall& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnqueueRecordCall& operator=(EnqueueRecordCall&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnqueueRecordCall& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnqueueRecordCall* internal_default_instance() {
    return reinterpret_cast<const EnqueueRecordCall*>(
               &_EnqueueRecordCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EnqueueRecordCall& a, EnqueueRecordCall& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(EnqueueRecordCall* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnqueueRecordCall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnqueueRecordCall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnqueueRecordCall>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnqueueRecordCall& from);
  void MergeFrom(const EnqueueRecordCall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnqueueRecordCall* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.EnqueueRecordCall";
  }
  protected:
  explicit EnqueueRecordCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kPriorityFieldNumber = 1,
  };
  // optional .reporting.StatusProto status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::reporting::StatusProto& status() const;
  PROTOBUF_NODISCARD ::reporting::StatusProto* release_status();
  ::reporting::StatusProto* mutable_status();
  void set_allocated_status(::reporting::StatusProto* status);
  private:
  const ::reporting::StatusProto& _internal_status() const;
  ::reporting::StatusProto* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::reporting::StatusProto* status);
  ::reporting::StatusProto* unsafe_arena_release_status();

  // optional .reporting.Priority priority = 1;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  ::reporting::Priority priority() const;
  void set_priority(::reporting::Priority value);
  private:
  ::reporting::Priority _internal_priority() const;
  void _internal_set_priority(::reporting::Priority value);
  public:

  // @@protoc_insertion_point(class_scope:reporting.EnqueueRecordCall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::reporting::StatusProto* status_;
  int priority_;
  friend struct ::TableStruct_components_2freporting_2fproto_2fsynced_2fhealth_2eproto;
};
// -------------------------------------------------------------------

class FlushPriorityCall final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.FlushPriorityCall) */ {
 public:
  inline FlushPriorityCall() : FlushPriorityCall(nullptr) {}
  ~FlushPriorityCall() override;
  explicit PROTOBUF_CONSTEXPR FlushPriorityCall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlushPriorityCall(const FlushPriorityCall& from);
  FlushPriorityCall(FlushPriorityCall&& from) noexcept
    : FlushPriorityCall() {
    *this = ::std::move(from);
  }

  inline FlushPriorityCall& operator=(const FlushPriorityCall& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushPriorityCall& operator=(FlushPriorityCall&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FlushPriorityCall& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlushPriorityCall* internal_default_instance() {
    return reinterpret_cast<const FlushPriorityCall*>(
               &_FlushPriorityCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FlushPriorityCall& a, FlushPriorityCall& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FlushPriorityCall* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushPriorityCall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlushPriorityCall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlushPriorityCall>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FlushPriorityCall& from);
  void MergeFrom(const FlushPriorityCall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FlushPriorityCall* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.FlushPriorityCall";
  }
  protected:
  explicit FlushPriorityCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kPriorityFieldNumber = 1,
  };
  // optional .reporting.StatusProto status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::reporting::StatusProto& status() const;
  PROTOBUF_NODISCARD ::reporting::StatusProto* release_status();
  ::reporting::StatusProto* mutable_status();
  void set_allocated_status(::reporting::StatusProto* status);
  private:
  const ::reporting::StatusProto& _internal_status() const;
  ::reporting::StatusProto* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::reporting::StatusProto* status);
  ::reporting::StatusProto* unsafe_arena_release_status();

  // optional .reporting.Priority priority = 1;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  ::reporting::Priority priority() const;
  void set_priority(::reporting::Priority value);
  private:
  ::reporting::Priority _internal_priority() const;
  void _internal_set_priority(::reporting::Priority value);
  public:

  // @@protoc_insertion_point(class_scope:reporting.FlushPriorityCall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::reporting::StatusProto* status_;
  int priority_;
  friend struct ::TableStruct_components_2freporting_2fproto_2fsynced_2fhealth_2eproto;
};
// -------------------------------------------------------------------

class UploadEncryptedRecordCall final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.UploadEncryptedRecordCall) */ {
 public:
  inline UploadEncryptedRecordCall() : UploadEncryptedRecordCall(nullptr) {}
  ~UploadEncryptedRecordCall() override;
  explicit PROTOBUF_CONSTEXPR UploadEncryptedRecordCall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadEncryptedRecordCall(const UploadEncryptedRecordCall& from);
  UploadEncryptedRecordCall(UploadEncryptedRecordCall&& from) noexcept
    : UploadEncryptedRecordCall() {
    *this = ::std::move(from);
  }

  inline UploadEncryptedRecordCall& operator=(const UploadEncryptedRecordCall& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadEncryptedRecordCall& operator=(UploadEncryptedRecordCall&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UploadEncryptedRecordCall& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadEncryptedRecordCall* internal_default_instance() {
    return reinterpret_cast<const UploadEncryptedRecordCall*>(
               &_UploadEncryptedRecordCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UploadEncryptedRecordCall& a, UploadEncryptedRecordCall& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(UploadEncryptedRecordCall* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadEncryptedRecordCall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadEncryptedRecordCall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadEncryptedRecordCall>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UploadEncryptedRecordCall& from);
  void MergeFrom(const UploadEncryptedRecordCall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UploadEncryptedRecordCall* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.UploadEncryptedRecordCall";
  }
  protected:
  explicit UploadEncryptedRecordCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 3,
    kSequencingIdFieldNumber = 1,
    kEncryptionKeyRequestedFieldNumber = 2,
  };
  // optional .reporting.StatusProto status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::reporting::StatusProto& status() const;
  PROTOBUF_NODISCARD ::reporting::StatusProto* release_status();
  ::reporting::StatusProto* mutable_status();
  void set_allocated_status(::reporting::StatusProto* status);
  private:
  const ::reporting::StatusProto& _internal_status() const;
  ::reporting::StatusProto* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::reporting::StatusProto* status);
  ::reporting::StatusProto* unsafe_arena_release_status();

  // optional int64 sequencing_id = 1;
  bool has_sequencing_id() const;
  private:
  bool _internal_has_sequencing_id() const;
  public:
  void clear_sequencing_id();
  int64_t sequencing_id() const;
  void set_sequencing_id(int64_t value);
  private:
  int64_t _internal_sequencing_id() const;
  void _internal_set_sequencing_id(int64_t value);
  public:

  // optional bool encryption_key_requested = 2;
  bool has_encryption_key_requested() const;
  private:
  bool _internal_has_encryption_key_requested() const;
  public:
  void clear_encryption_key_requested();
  bool encryption_key_requested() const;
  void set_encryption_key_requested(bool value);
  private:
  bool _internal_encryption_key_requested() const;
  void _internal_set_encryption_key_requested(bool value);
  public:

  // @@protoc_insertion_point(class_scope:reporting.UploadEncryptedRecordCall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::reporting::StatusProto* status_;
  int64_t sequencing_id_;
  bool encryption_key_requested_;
  friend struct ::TableStruct_components_2freporting_2fproto_2fsynced_2fhealth_2eproto;
};
// -------------------------------------------------------------------

class ConfirmRecordUploadCall final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.ConfirmRecordUploadCall) */ {
 public:
  inline ConfirmRecordUploadCall() : ConfirmRecordUploadCall(nullptr) {}
  ~ConfirmRecordUploadCall() override;
  explicit PROTOBUF_CONSTEXPR ConfirmRecordUploadCall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfirmRecordUploadCall(const ConfirmRecordUploadCall& from);
  ConfirmRecordUploadCall(ConfirmRecordUploadCall&& from) noexcept
    : ConfirmRecordUploadCall() {
    *this = ::std::move(from);
  }

  inline ConfirmRecordUploadCall& operator=(const ConfirmRecordUploadCall& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfirmRecordUploadCall& operator=(ConfirmRecordUploadCall&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ConfirmRecordUploadCall& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfirmRecordUploadCall* internal_default_instance() {
    return reinterpret_cast<const ConfirmRecordUploadCall*>(
               &_ConfirmRecordUploadCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ConfirmRecordUploadCall& a, ConfirmRecordUploadCall& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ConfirmRecordUploadCall* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfirmRecordUploadCall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfirmRecordUploadCall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfirmRecordUploadCall>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ConfirmRecordUploadCall& from);
  void MergeFrom(const ConfirmRecordUploadCall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConfirmRecordUploadCall* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.ConfirmRecordUploadCall";
  }
  protected:
  explicit ConfirmRecordUploadCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequencingIdFieldNumber = 1,
    kForceConfirmFieldNumber = 2,
  };
  // optional int64 sequencing_id = 1;
  bool has_sequencing_id() const;
  private:
  bool _internal_has_sequencing_id() const;
  public:
  void clear_sequencing_id();
  int64_t sequencing_id() const;
  void set_sequencing_id(int64_t value);
  private:
  int64_t _internal_sequencing_id() const;
  void _internal_set_sequencing_id(int64_t value);
  public:

  // optional bool force_confirm = 2;
  bool has_force_confirm() const;
  private:
  bool _internal_has_force_confirm() const;
  public:
  void clear_force_confirm();
  bool force_confirm() const;
  void set_force_confirm(bool value);
  private:
  bool _internal_force_confirm() const;
  void _internal_set_force_confirm(bool value);
  public:

  // @@protoc_insertion_point(class_scope:reporting.ConfirmRecordUploadCall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t sequencing_id_;
  bool force_confirm_;
  friend struct ::TableStruct_components_2freporting_2fproto_2fsynced_2fhealth_2eproto;
};
// -------------------------------------------------------------------

class HealthDataHistory final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.HealthDataHistory) */ {
 public:
  inline HealthDataHistory() : HealthDataHistory(nullptr) {}
  ~HealthDataHistory() override;
  explicit PROTOBUF_CONSTEXPR HealthDataHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HealthDataHistory(const HealthDataHistory& from);
  HealthDataHistory(HealthDataHistory&& from) noexcept
    : HealthDataHistory() {
    *this = ::std::move(from);
  }

  inline HealthDataHistory& operator=(const HealthDataHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthDataHistory& operator=(HealthDataHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HealthDataHistory& default_instance() {
    return *internal_default_instance();
  }
  enum RecordCase {
    kEnqueueRecordCall = 1,
    kFlushPriorityCall = 2,
    kUploadEncryptedRecordCall = 3,
    kConfirmRecordUploadCall = 4,
    kStorageQueueAction = 5,
    RECORD_NOT_SET = 0,
  };

  static inline const HealthDataHistory* internal_default_instance() {
    return reinterpret_cast<const HealthDataHistory*>(
               &_HealthDataHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(HealthDataHistory& a, HealthDataHistory& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(HealthDataHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthDataHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthDataHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HealthDataHistory>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HealthDataHistory& from);
  void MergeFrom(const HealthDataHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HealthDataHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.HealthDataHistory";
  }
  protected:
  explicit HealthDataHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampSecondsFieldNumber = 6,
    kEnqueueRecordCallFieldNumber = 1,
    kFlushPriorityCallFieldNumber = 2,
    kUploadEncryptedRecordCallFieldNumber = 3,
    kConfirmRecordUploadCallFieldNumber = 4,
    kStorageQueueActionFieldNumber = 5,
  };
  // optional int64 timestamp_seconds = 6;
  bool has_timestamp_seconds() const;
  private:
  bool _internal_has_timestamp_seconds() const;
  public:
  void clear_timestamp_seconds();
  int64_t timestamp_seconds() const;
  void set_timestamp_seconds(int64_t value);
  private:
  int64_t _internal_timestamp_seconds() const;
  void _internal_set_timestamp_seconds(int64_t value);
  public:

  // .reporting.EnqueueRecordCall enqueue_record_call = 1;
  bool has_enqueue_record_call() const;
  private:
  bool _internal_has_enqueue_record_call() const;
  public:
  void clear_enqueue_record_call();
  const ::reporting::EnqueueRecordCall& enqueue_record_call() const;
  PROTOBUF_NODISCARD ::reporting::EnqueueRecordCall* release_enqueue_record_call();
  ::reporting::EnqueueRecordCall* mutable_enqueue_record_call();
  void set_allocated_enqueue_record_call(::reporting::EnqueueRecordCall* enqueue_record_call);
  private:
  const ::reporting::EnqueueRecordCall& _internal_enqueue_record_call() const;
  ::reporting::EnqueueRecordCall* _internal_mutable_enqueue_record_call();
  public:
  void unsafe_arena_set_allocated_enqueue_record_call(
      ::reporting::EnqueueRecordCall* enqueue_record_call);
  ::reporting::EnqueueRecordCall* unsafe_arena_release_enqueue_record_call();

  // .reporting.FlushPriorityCall flush_priority_call = 2;
  bool has_flush_priority_call() const;
  private:
  bool _internal_has_flush_priority_call() const;
  public:
  void clear_flush_priority_call();
  const ::reporting::FlushPriorityCall& flush_priority_call() const;
  PROTOBUF_NODISCARD ::reporting::FlushPriorityCall* release_flush_priority_call();
  ::reporting::FlushPriorityCall* mutable_flush_priority_call();
  void set_allocated_flush_priority_call(::reporting::FlushPriorityCall* flush_priority_call);
  private:
  const ::reporting::FlushPriorityCall& _internal_flush_priority_call() const;
  ::reporting::FlushPriorityCall* _internal_mutable_flush_priority_call();
  public:
  void unsafe_arena_set_allocated_flush_priority_call(
      ::reporting::FlushPriorityCall* flush_priority_call);
  ::reporting::FlushPriorityCall* unsafe_arena_release_flush_priority_call();

  // .reporting.UploadEncryptedRecordCall upload_encrypted_record_call = 3;
  bool has_upload_encrypted_record_call() const;
  private:
  bool _internal_has_upload_encrypted_record_call() const;
  public:
  void clear_upload_encrypted_record_call();
  const ::reporting::UploadEncryptedRecordCall& upload_encrypted_record_call() const;
  PROTOBUF_NODISCARD ::reporting::UploadEncryptedRecordCall* release_upload_encrypted_record_call();
  ::reporting::UploadEncryptedRecordCall* mutable_upload_encrypted_record_call();
  void set_allocated_upload_encrypted_record_call(::reporting::UploadEncryptedRecordCall* upload_encrypted_record_call);
  private:
  const ::reporting::UploadEncryptedRecordCall& _internal_upload_encrypted_record_call() const;
  ::reporting::UploadEncryptedRecordCall* _internal_mutable_upload_encrypted_record_call();
  public:
  void unsafe_arena_set_allocated_upload_encrypted_record_call(
      ::reporting::UploadEncryptedRecordCall* upload_encrypted_record_call);
  ::reporting::UploadEncryptedRecordCall* unsafe_arena_release_upload_encrypted_record_call();

  // .reporting.ConfirmRecordUploadCall confirm_record_upload_call = 4;
  bool has_confirm_record_upload_call() const;
  private:
  bool _internal_has_confirm_record_upload_call() const;
  public:
  void clear_confirm_record_upload_call();
  const ::reporting::ConfirmRecordUploadCall& confirm_record_upload_call() const;
  PROTOBUF_NODISCARD ::reporting::ConfirmRecordUploadCall* release_confirm_record_upload_call();
  ::reporting::ConfirmRecordUploadCall* mutable_confirm_record_upload_call();
  void set_allocated_confirm_record_upload_call(::reporting::ConfirmRecordUploadCall* confirm_record_upload_call);
  private:
  const ::reporting::ConfirmRecordUploadCall& _internal_confirm_record_upload_call() const;
  ::reporting::ConfirmRecordUploadCall* _internal_mutable_confirm_record_upload_call();
  public:
  void unsafe_arena_set_allocated_confirm_record_upload_call(
      ::reporting::ConfirmRecordUploadCall* confirm_record_upload_call);
  ::reporting::ConfirmRecordUploadCall* unsafe_arena_release_confirm_record_upload_call();

  // .reporting.StorageQueueAction storage_queue_action = 5;
  bool has_storage_queue_action() const;
  private:
  bool _internal_has_storage_queue_action() const;
  public:
  void clear_storage_queue_action();
  const ::reporting::StorageQueueAction& storage_queue_action() const;
  PROTOBUF_NODISCARD ::reporting::StorageQueueAction* release_storage_queue_action();
  ::reporting::StorageQueueAction* mutable_storage_queue_action();
  void set_allocated_storage_queue_action(::reporting::StorageQueueAction* storage_queue_action);
  private:
  const ::reporting::StorageQueueAction& _internal_storage_queue_action() const;
  ::reporting::StorageQueueAction* _internal_mutable_storage_queue_action();
  public:
  void unsafe_arena_set_allocated_storage_queue_action(
      ::reporting::StorageQueueAction* storage_queue_action);
  ::reporting::StorageQueueAction* unsafe_arena_release_storage_queue_action();

  void clear_record();
  RecordCase record_case() const;
  // @@protoc_insertion_point(class_scope:reporting.HealthDataHistory)
 private:
  class _Internal;
  void set_has_enqueue_record_call();
  void set_has_flush_priority_call();
  void set_has_upload_encrypted_record_call();
  void set_has_confirm_record_upload_call();
  void set_has_storage_queue_action();

  inline bool has_record() const;
  inline void clear_has_record();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t timestamp_seconds_;
  union RecordUnion {
    constexpr RecordUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::reporting::EnqueueRecordCall* enqueue_record_call_;
    ::reporting::FlushPriorityCall* flush_priority_call_;
    ::reporting::UploadEncryptedRecordCall* upload_encrypted_record_call_;
    ::reporting::ConfirmRecordUploadCall* confirm_record_upload_call_;
    ::reporting::StorageQueueAction* storage_queue_action_;
  } record_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2freporting_2fproto_2fsynced_2fhealth_2eproto;
};
// -------------------------------------------------------------------

class ERPHealthData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.ERPHealthData) */ {
 public:
  inline ERPHealthData() : ERPHealthData(nullptr) {}
  ~ERPHealthData() override;
  explicit PROTOBUF_CONSTEXPR ERPHealthData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ERPHealthData(const ERPHealthData& from);
  ERPHealthData(ERPHealthData&& from) noexcept
    : ERPHealthData() {
    *this = ::std::move(from);
  }

  inline ERPHealthData& operator=(const ERPHealthData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ERPHealthData& operator=(ERPHealthData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ERPHealthData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ERPHealthData* internal_default_instance() {
    return reinterpret_cast<const ERPHealthData*>(
               &_ERPHealthData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ERPHealthData& a, ERPHealthData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ERPHealthData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ERPHealthData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ERPHealthData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ERPHealthData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ERPHealthData& from);
  void MergeFrom(const ERPHealthData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ERPHealthData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.ERPHealthData";
  }
  protected:
  explicit ERPHealthData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoryFieldNumber = 1,
  };
  // repeated .reporting.HealthDataHistory history = 1;
  int history_size() const;
  private:
  int _internal_history_size() const;
  public:
  void clear_history();
  ::reporting::HealthDataHistory* mutable_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reporting::HealthDataHistory >*
      mutable_history();
  private:
  const ::reporting::HealthDataHistory& _internal_history(int index) const;
  ::reporting::HealthDataHistory* _internal_add_history();
  public:
  const ::reporting::HealthDataHistory& history(int index) const;
  ::reporting::HealthDataHistory* add_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reporting::HealthDataHistory >&
      history() const;

  // @@protoc_insertion_point(class_scope:reporting.ERPHealthData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reporting::HealthDataHistory > history_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2freporting_2fproto_2fsynced_2fhealth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StorageDequeue

// optional int64 sequencing_id = 1;
inline bool StorageDequeue::_internal_has_sequencing_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StorageDequeue::has_sequencing_id() const {
  return _internal_has_sequencing_id();
}
inline void StorageDequeue::clear_sequencing_id() {
  sequencing_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t StorageDequeue::_internal_sequencing_id() const {
  return sequencing_id_;
}
inline int64_t StorageDequeue::sequencing_id() const {
  // @@protoc_insertion_point(field_get:reporting.StorageDequeue.sequencing_id)
  return _internal_sequencing_id();
}
inline void StorageDequeue::_internal_set_sequencing_id(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  sequencing_id_ = value;
}
inline void StorageDequeue::set_sequencing_id(int64_t value) {
  _internal_set_sequencing_id(value);
  // @@protoc_insertion_point(field_set:reporting.StorageDequeue.sequencing_id)
}

// optional int64 records_count = 2;
inline bool StorageDequeue::_internal_has_records_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StorageDequeue::has_records_count() const {
  return _internal_has_records_count();
}
inline void StorageDequeue::clear_records_count() {
  records_count_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t StorageDequeue::_internal_records_count() const {
  return records_count_;
}
inline int64_t StorageDequeue::records_count() const {
  // @@protoc_insertion_point(field_get:reporting.StorageDequeue.records_count)
  return _internal_records_count();
}
inline void StorageDequeue::_internal_set_records_count(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  records_count_ = value;
}
inline void StorageDequeue::set_records_count(int64_t value) {
  _internal_set_records_count(value);
  // @@protoc_insertion_point(field_set:reporting.StorageDequeue.records_count)
}

// -------------------------------------------------------------------

// StorageEnqueue

// optional int64 sequencing_id = 1;
inline bool StorageEnqueue::_internal_has_sequencing_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StorageEnqueue::has_sequencing_id() const {
  return _internal_has_sequencing_id();
}
inline void StorageEnqueue::clear_sequencing_id() {
  sequencing_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t StorageEnqueue::_internal_sequencing_id() const {
  return sequencing_id_;
}
inline int64_t StorageEnqueue::sequencing_id() const {
  // @@protoc_insertion_point(field_get:reporting.StorageEnqueue.sequencing_id)
  return _internal_sequencing_id();
}
inline void StorageEnqueue::_internal_set_sequencing_id(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  sequencing_id_ = value;
}
inline void StorageEnqueue::set_sequencing_id(int64_t value) {
  _internal_set_sequencing_id(value);
  // @@protoc_insertion_point(field_set:reporting.StorageEnqueue.sequencing_id)
}

// -------------------------------------------------------------------

// StorageQueueAction

// .reporting.StorageDequeue storage_dequeue = 1;
inline bool StorageQueueAction::_internal_has_storage_dequeue() const {
  return action_case() == kStorageDequeue;
}
inline bool StorageQueueAction::has_storage_dequeue() const {
  return _internal_has_storage_dequeue();
}
inline void StorageQueueAction::set_has_storage_dequeue() {
  _oneof_case_[0] = kStorageDequeue;
}
inline void StorageQueueAction::clear_storage_dequeue() {
  if (_internal_has_storage_dequeue()) {
    if (GetArenaForAllocation() == nullptr) {
      delete action_.storage_dequeue_;
    }
    clear_has_action();
  }
}
inline ::reporting::StorageDequeue* StorageQueueAction::release_storage_dequeue() {
  // @@protoc_insertion_point(field_release:reporting.StorageQueueAction.storage_dequeue)
  if (_internal_has_storage_dequeue()) {
    clear_has_action();
    ::reporting::StorageDequeue* temp = action_.storage_dequeue_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.storage_dequeue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::reporting::StorageDequeue& StorageQueueAction::_internal_storage_dequeue() const {
  return _internal_has_storage_dequeue()
      ? *action_.storage_dequeue_
      : reinterpret_cast< ::reporting::StorageDequeue&>(::reporting::_StorageDequeue_default_instance_);
}
inline const ::reporting::StorageDequeue& StorageQueueAction::storage_dequeue() const {
  // @@protoc_insertion_point(field_get:reporting.StorageQueueAction.storage_dequeue)
  return _internal_storage_dequeue();
}
inline ::reporting::StorageDequeue* StorageQueueAction::unsafe_arena_release_storage_dequeue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:reporting.StorageQueueAction.storage_dequeue)
  if (_internal_has_storage_dequeue()) {
    clear_has_action();
    ::reporting::StorageDequeue* temp = action_.storage_dequeue_;
    action_.storage_dequeue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StorageQueueAction::unsafe_arena_set_allocated_storage_dequeue(::reporting::StorageDequeue* storage_dequeue) {
  clear_action();
  if (storage_dequeue) {
    set_has_storage_dequeue();
    action_.storage_dequeue_ = storage_dequeue;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reporting.StorageQueueAction.storage_dequeue)
}
inline ::reporting::StorageDequeue* StorageQueueAction::_internal_mutable_storage_dequeue() {
  if (!_internal_has_storage_dequeue()) {
    clear_action();
    set_has_storage_dequeue();
    action_.storage_dequeue_ = CreateMaybeMessage< ::reporting::StorageDequeue >(GetArenaForAllocation());
  }
  return action_.storage_dequeue_;
}
inline ::reporting::StorageDequeue* StorageQueueAction::mutable_storage_dequeue() {
  ::reporting::StorageDequeue* _msg = _internal_mutable_storage_dequeue();
  // @@protoc_insertion_point(field_mutable:reporting.StorageQueueAction.storage_dequeue)
  return _msg;
}

// .reporting.StorageEnqueue storage_enqueue = 2;
inline bool StorageQueueAction::_internal_has_storage_enqueue() const {
  return action_case() == kStorageEnqueue;
}
inline bool StorageQueueAction::has_storage_enqueue() const {
  return _internal_has_storage_enqueue();
}
inline void StorageQueueAction::set_has_storage_enqueue() {
  _oneof_case_[0] = kStorageEnqueue;
}
inline void StorageQueueAction::clear_storage_enqueue() {
  if (_internal_has_storage_enqueue()) {
    if (GetArenaForAllocation() == nullptr) {
      delete action_.storage_enqueue_;
    }
    clear_has_action();
  }
}
inline ::reporting::StorageEnqueue* StorageQueueAction::release_storage_enqueue() {
  // @@protoc_insertion_point(field_release:reporting.StorageQueueAction.storage_enqueue)
  if (_internal_has_storage_enqueue()) {
    clear_has_action();
    ::reporting::StorageEnqueue* temp = action_.storage_enqueue_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.storage_enqueue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::reporting::StorageEnqueue& StorageQueueAction::_internal_storage_enqueue() const {
  return _internal_has_storage_enqueue()
      ? *action_.storage_enqueue_
      : reinterpret_cast< ::reporting::StorageEnqueue&>(::reporting::_StorageEnqueue_default_instance_);
}
inline const ::reporting::StorageEnqueue& StorageQueueAction::storage_enqueue() const {
  // @@protoc_insertion_point(field_get:reporting.StorageQueueAction.storage_enqueue)
  return _internal_storage_enqueue();
}
inline ::reporting::StorageEnqueue* StorageQueueAction::unsafe_arena_release_storage_enqueue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:reporting.StorageQueueAction.storage_enqueue)
  if (_internal_has_storage_enqueue()) {
    clear_has_action();
    ::reporting::StorageEnqueue* temp = action_.storage_enqueue_;
    action_.storage_enqueue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StorageQueueAction::unsafe_arena_set_allocated_storage_enqueue(::reporting::StorageEnqueue* storage_enqueue) {
  clear_action();
  if (storage_enqueue) {
    set_has_storage_enqueue();
    action_.storage_enqueue_ = storage_enqueue;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reporting.StorageQueueAction.storage_enqueue)
}
inline ::reporting::StorageEnqueue* StorageQueueAction::_internal_mutable_storage_enqueue() {
  if (!_internal_has_storage_enqueue()) {
    clear_action();
    set_has_storage_enqueue();
    action_.storage_enqueue_ = CreateMaybeMessage< ::reporting::StorageEnqueue >(GetArenaForAllocation());
  }
  return action_.storage_enqueue_;
}
inline ::reporting::StorageEnqueue* StorageQueueAction::mutable_storage_enqueue() {
  ::reporting::StorageEnqueue* _msg = _internal_mutable_storage_enqueue();
  // @@protoc_insertion_point(field_mutable:reporting.StorageQueueAction.storage_enqueue)
  return _msg;
}

// optional .reporting.StatusProto status = 3;
inline bool StorageQueueAction::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool StorageQueueAction::has_status() const {
  return _internal_has_status();
}
inline const ::reporting::StatusProto& StorageQueueAction::_internal_status() const {
  const ::reporting::StatusProto* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::reporting::StatusProto&>(
      ::reporting::_StatusProto_default_instance_);
}
inline const ::reporting::StatusProto& StorageQueueAction::status() const {
  // @@protoc_insertion_point(field_get:reporting.StorageQueueAction.status)
  return _internal_status();
}
inline void StorageQueueAction::unsafe_arena_set_allocated_status(
    ::reporting::StatusProto* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reporting.StorageQueueAction.status)
}
inline ::reporting::StatusProto* StorageQueueAction::release_status() {
  _has_bits_[0] &= ~0x00000001u;
  ::reporting::StatusProto* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::reporting::StatusProto* StorageQueueAction::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:reporting.StorageQueueAction.status)
  _has_bits_[0] &= ~0x00000001u;
  ::reporting::StatusProto* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::reporting::StatusProto* StorageQueueAction::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::reporting::StatusProto>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::reporting::StatusProto* StorageQueueAction::mutable_status() {
  ::reporting::StatusProto* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:reporting.StorageQueueAction.status)
  return _msg;
}
inline void StorageQueueAction::set_allocated_status(::reporting::StatusProto* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:reporting.StorageQueueAction.status)
}

inline bool StorageQueueAction::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void StorageQueueAction::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline StorageQueueAction::ActionCase StorageQueueAction::action_case() const {
  return StorageQueueAction::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EnqueueRecordCall

// optional .reporting.Priority priority = 1;
inline bool EnqueueRecordCall::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EnqueueRecordCall::has_priority() const {
  return _internal_has_priority();
}
inline void EnqueueRecordCall::clear_priority() {
  priority_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::reporting::Priority EnqueueRecordCall::_internal_priority() const {
  return static_cast< ::reporting::Priority >(priority_);
}
inline ::reporting::Priority EnqueueRecordCall::priority() const {
  // @@protoc_insertion_point(field_get:reporting.EnqueueRecordCall.priority)
  return _internal_priority();
}
inline void EnqueueRecordCall::_internal_set_priority(::reporting::Priority value) {
  assert(::reporting::Priority_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  priority_ = value;
}
inline void EnqueueRecordCall::set_priority(::reporting::Priority value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:reporting.EnqueueRecordCall.priority)
}

// optional .reporting.StatusProto status = 2;
inline bool EnqueueRecordCall::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool EnqueueRecordCall::has_status() const {
  return _internal_has_status();
}
inline const ::reporting::StatusProto& EnqueueRecordCall::_internal_status() const {
  const ::reporting::StatusProto* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::reporting::StatusProto&>(
      ::reporting::_StatusProto_default_instance_);
}
inline const ::reporting::StatusProto& EnqueueRecordCall::status() const {
  // @@protoc_insertion_point(field_get:reporting.EnqueueRecordCall.status)
  return _internal_status();
}
inline void EnqueueRecordCall::unsafe_arena_set_allocated_status(
    ::reporting::StatusProto* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reporting.EnqueueRecordCall.status)
}
inline ::reporting::StatusProto* EnqueueRecordCall::release_status() {
  _has_bits_[0] &= ~0x00000001u;
  ::reporting::StatusProto* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::reporting::StatusProto* EnqueueRecordCall::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:reporting.EnqueueRecordCall.status)
  _has_bits_[0] &= ~0x00000001u;
  ::reporting::StatusProto* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::reporting::StatusProto* EnqueueRecordCall::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::reporting::StatusProto>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::reporting::StatusProto* EnqueueRecordCall::mutable_status() {
  ::reporting::StatusProto* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:reporting.EnqueueRecordCall.status)
  return _msg;
}
inline void EnqueueRecordCall::set_allocated_status(::reporting::StatusProto* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:reporting.EnqueueRecordCall.status)
}

// -------------------------------------------------------------------

// FlushPriorityCall

// optional .reporting.Priority priority = 1;
inline bool FlushPriorityCall::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FlushPriorityCall::has_priority() const {
  return _internal_has_priority();
}
inline void FlushPriorityCall::clear_priority() {
  priority_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::reporting::Priority FlushPriorityCall::_internal_priority() const {
  return static_cast< ::reporting::Priority >(priority_);
}
inline ::reporting::Priority FlushPriorityCall::priority() const {
  // @@protoc_insertion_point(field_get:reporting.FlushPriorityCall.priority)
  return _internal_priority();
}
inline void FlushPriorityCall::_internal_set_priority(::reporting::Priority value) {
  assert(::reporting::Priority_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  priority_ = value;
}
inline void FlushPriorityCall::set_priority(::reporting::Priority value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:reporting.FlushPriorityCall.priority)
}

// optional .reporting.StatusProto status = 2;
inline bool FlushPriorityCall::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool FlushPriorityCall::has_status() const {
  return _internal_has_status();
}
inline const ::reporting::StatusProto& FlushPriorityCall::_internal_status() const {
  const ::reporting::StatusProto* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::reporting::StatusProto&>(
      ::reporting::_StatusProto_default_instance_);
}
inline const ::reporting::StatusProto& FlushPriorityCall::status() const {
  // @@protoc_insertion_point(field_get:reporting.FlushPriorityCall.status)
  return _internal_status();
}
inline void FlushPriorityCall::unsafe_arena_set_allocated_status(
    ::reporting::StatusProto* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reporting.FlushPriorityCall.status)
}
inline ::reporting::StatusProto* FlushPriorityCall::release_status() {
  _has_bits_[0] &= ~0x00000001u;
  ::reporting::StatusProto* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::reporting::StatusProto* FlushPriorityCall::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:reporting.FlushPriorityCall.status)
  _has_bits_[0] &= ~0x00000001u;
  ::reporting::StatusProto* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::reporting::StatusProto* FlushPriorityCall::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::reporting::StatusProto>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::reporting::StatusProto* FlushPriorityCall::mutable_status() {
  ::reporting::StatusProto* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:reporting.FlushPriorityCall.status)
  return _msg;
}
inline void FlushPriorityCall::set_allocated_status(::reporting::StatusProto* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:reporting.FlushPriorityCall.status)
}

// -------------------------------------------------------------------

// UploadEncryptedRecordCall

// optional int64 sequencing_id = 1;
inline bool UploadEncryptedRecordCall::_internal_has_sequencing_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UploadEncryptedRecordCall::has_sequencing_id() const {
  return _internal_has_sequencing_id();
}
inline void UploadEncryptedRecordCall::clear_sequencing_id() {
  sequencing_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t UploadEncryptedRecordCall::_internal_sequencing_id() const {
  return sequencing_id_;
}
inline int64_t UploadEncryptedRecordCall::sequencing_id() const {
  // @@protoc_insertion_point(field_get:reporting.UploadEncryptedRecordCall.sequencing_id)
  return _internal_sequencing_id();
}
inline void UploadEncryptedRecordCall::_internal_set_sequencing_id(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  sequencing_id_ = value;
}
inline void UploadEncryptedRecordCall::set_sequencing_id(int64_t value) {
  _internal_set_sequencing_id(value);
  // @@protoc_insertion_point(field_set:reporting.UploadEncryptedRecordCall.sequencing_id)
}

// optional bool encryption_key_requested = 2;
inline bool UploadEncryptedRecordCall::_internal_has_encryption_key_requested() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UploadEncryptedRecordCall::has_encryption_key_requested() const {
  return _internal_has_encryption_key_requested();
}
inline void UploadEncryptedRecordCall::clear_encryption_key_requested() {
  encryption_key_requested_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool UploadEncryptedRecordCall::_internal_encryption_key_requested() const {
  return encryption_key_requested_;
}
inline bool UploadEncryptedRecordCall::encryption_key_requested() const {
  // @@protoc_insertion_point(field_get:reporting.UploadEncryptedRecordCall.encryption_key_requested)
  return _internal_encryption_key_requested();
}
inline void UploadEncryptedRecordCall::_internal_set_encryption_key_requested(bool value) {
  _has_bits_[0] |= 0x00000004u;
  encryption_key_requested_ = value;
}
inline void UploadEncryptedRecordCall::set_encryption_key_requested(bool value) {
  _internal_set_encryption_key_requested(value);
  // @@protoc_insertion_point(field_set:reporting.UploadEncryptedRecordCall.encryption_key_requested)
}

// optional .reporting.StatusProto status = 3;
inline bool UploadEncryptedRecordCall::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool UploadEncryptedRecordCall::has_status() const {
  return _internal_has_status();
}
inline const ::reporting::StatusProto& UploadEncryptedRecordCall::_internal_status() const {
  const ::reporting::StatusProto* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::reporting::StatusProto&>(
      ::reporting::_StatusProto_default_instance_);
}
inline const ::reporting::StatusProto& UploadEncryptedRecordCall::status() const {
  // @@protoc_insertion_point(field_get:reporting.UploadEncryptedRecordCall.status)
  return _internal_status();
}
inline void UploadEncryptedRecordCall::unsafe_arena_set_allocated_status(
    ::reporting::StatusProto* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reporting.UploadEncryptedRecordCall.status)
}
inline ::reporting::StatusProto* UploadEncryptedRecordCall::release_status() {
  _has_bits_[0] &= ~0x00000001u;
  ::reporting::StatusProto* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::reporting::StatusProto* UploadEncryptedRecordCall::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:reporting.UploadEncryptedRecordCall.status)
  _has_bits_[0] &= ~0x00000001u;
  ::reporting::StatusProto* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::reporting::StatusProto* UploadEncryptedRecordCall::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::reporting::StatusProto>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::reporting::StatusProto* UploadEncryptedRecordCall::mutable_status() {
  ::reporting::StatusProto* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:reporting.UploadEncryptedRecordCall.status)
  return _msg;
}
inline void UploadEncryptedRecordCall::set_allocated_status(::reporting::StatusProto* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:reporting.UploadEncryptedRecordCall.status)
}

// -------------------------------------------------------------------

// ConfirmRecordUploadCall

// optional int64 sequencing_id = 1;
inline bool ConfirmRecordUploadCall::_internal_has_sequencing_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConfirmRecordUploadCall::has_sequencing_id() const {
  return _internal_has_sequencing_id();
}
inline void ConfirmRecordUploadCall::clear_sequencing_id() {
  sequencing_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t ConfirmRecordUploadCall::_internal_sequencing_id() const {
  return sequencing_id_;
}
inline int64_t ConfirmRecordUploadCall::sequencing_id() const {
  // @@protoc_insertion_point(field_get:reporting.ConfirmRecordUploadCall.sequencing_id)
  return _internal_sequencing_id();
}
inline void ConfirmRecordUploadCall::_internal_set_sequencing_id(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  sequencing_id_ = value;
}
inline void ConfirmRecordUploadCall::set_sequencing_id(int64_t value) {
  _internal_set_sequencing_id(value);
  // @@protoc_insertion_point(field_set:reporting.ConfirmRecordUploadCall.sequencing_id)
}

// optional bool force_confirm = 2;
inline bool ConfirmRecordUploadCall::_internal_has_force_confirm() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConfirmRecordUploadCall::has_force_confirm() const {
  return _internal_has_force_confirm();
}
inline void ConfirmRecordUploadCall::clear_force_confirm() {
  force_confirm_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ConfirmRecordUploadCall::_internal_force_confirm() const {
  return force_confirm_;
}
inline bool ConfirmRecordUploadCall::force_confirm() const {
  // @@protoc_insertion_point(field_get:reporting.ConfirmRecordUploadCall.force_confirm)
  return _internal_force_confirm();
}
inline void ConfirmRecordUploadCall::_internal_set_force_confirm(bool value) {
  _has_bits_[0] |= 0x00000002u;
  force_confirm_ = value;
}
inline void ConfirmRecordUploadCall::set_force_confirm(bool value) {
  _internal_set_force_confirm(value);
  // @@protoc_insertion_point(field_set:reporting.ConfirmRecordUploadCall.force_confirm)
}

// -------------------------------------------------------------------

// HealthDataHistory

// .reporting.EnqueueRecordCall enqueue_record_call = 1;
inline bool HealthDataHistory::_internal_has_enqueue_record_call() const {
  return record_case() == kEnqueueRecordCall;
}
inline bool HealthDataHistory::has_enqueue_record_call() const {
  return _internal_has_enqueue_record_call();
}
inline void HealthDataHistory::set_has_enqueue_record_call() {
  _oneof_case_[0] = kEnqueueRecordCall;
}
inline void HealthDataHistory::clear_enqueue_record_call() {
  if (_internal_has_enqueue_record_call()) {
    if (GetArenaForAllocation() == nullptr) {
      delete record_.enqueue_record_call_;
    }
    clear_has_record();
  }
}
inline ::reporting::EnqueueRecordCall* HealthDataHistory::release_enqueue_record_call() {
  // @@protoc_insertion_point(field_release:reporting.HealthDataHistory.enqueue_record_call)
  if (_internal_has_enqueue_record_call()) {
    clear_has_record();
    ::reporting::EnqueueRecordCall* temp = record_.enqueue_record_call_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    record_.enqueue_record_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::reporting::EnqueueRecordCall& HealthDataHistory::_internal_enqueue_record_call() const {
  return _internal_has_enqueue_record_call()
      ? *record_.enqueue_record_call_
      : reinterpret_cast< ::reporting::EnqueueRecordCall&>(::reporting::_EnqueueRecordCall_default_instance_);
}
inline const ::reporting::EnqueueRecordCall& HealthDataHistory::enqueue_record_call() const {
  // @@protoc_insertion_point(field_get:reporting.HealthDataHistory.enqueue_record_call)
  return _internal_enqueue_record_call();
}
inline ::reporting::EnqueueRecordCall* HealthDataHistory::unsafe_arena_release_enqueue_record_call() {
  // @@protoc_insertion_point(field_unsafe_arena_release:reporting.HealthDataHistory.enqueue_record_call)
  if (_internal_has_enqueue_record_call()) {
    clear_has_record();
    ::reporting::EnqueueRecordCall* temp = record_.enqueue_record_call_;
    record_.enqueue_record_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HealthDataHistory::unsafe_arena_set_allocated_enqueue_record_call(::reporting::EnqueueRecordCall* enqueue_record_call) {
  clear_record();
  if (enqueue_record_call) {
    set_has_enqueue_record_call();
    record_.enqueue_record_call_ = enqueue_record_call;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reporting.HealthDataHistory.enqueue_record_call)
}
inline ::reporting::EnqueueRecordCall* HealthDataHistory::_internal_mutable_enqueue_record_call() {
  if (!_internal_has_enqueue_record_call()) {
    clear_record();
    set_has_enqueue_record_call();
    record_.enqueue_record_call_ = CreateMaybeMessage< ::reporting::EnqueueRecordCall >(GetArenaForAllocation());
  }
  return record_.enqueue_record_call_;
}
inline ::reporting::EnqueueRecordCall* HealthDataHistory::mutable_enqueue_record_call() {
  ::reporting::EnqueueRecordCall* _msg = _internal_mutable_enqueue_record_call();
  // @@protoc_insertion_point(field_mutable:reporting.HealthDataHistory.enqueue_record_call)
  return _msg;
}

// .reporting.FlushPriorityCall flush_priority_call = 2;
inline bool HealthDataHistory::_internal_has_flush_priority_call() const {
  return record_case() == kFlushPriorityCall;
}
inline bool HealthDataHistory::has_flush_priority_call() const {
  return _internal_has_flush_priority_call();
}
inline void HealthDataHistory::set_has_flush_priority_call() {
  _oneof_case_[0] = kFlushPriorityCall;
}
inline void HealthDataHistory::clear_flush_priority_call() {
  if (_internal_has_flush_priority_call()) {
    if (GetArenaForAllocation() == nullptr) {
      delete record_.flush_priority_call_;
    }
    clear_has_record();
  }
}
inline ::reporting::FlushPriorityCall* HealthDataHistory::release_flush_priority_call() {
  // @@protoc_insertion_point(field_release:reporting.HealthDataHistory.flush_priority_call)
  if (_internal_has_flush_priority_call()) {
    clear_has_record();
    ::reporting::FlushPriorityCall* temp = record_.flush_priority_call_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    record_.flush_priority_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::reporting::FlushPriorityCall& HealthDataHistory::_internal_flush_priority_call() const {
  return _internal_has_flush_priority_call()
      ? *record_.flush_priority_call_
      : reinterpret_cast< ::reporting::FlushPriorityCall&>(::reporting::_FlushPriorityCall_default_instance_);
}
inline const ::reporting::FlushPriorityCall& HealthDataHistory::flush_priority_call() const {
  // @@protoc_insertion_point(field_get:reporting.HealthDataHistory.flush_priority_call)
  return _internal_flush_priority_call();
}
inline ::reporting::FlushPriorityCall* HealthDataHistory::unsafe_arena_release_flush_priority_call() {
  // @@protoc_insertion_point(field_unsafe_arena_release:reporting.HealthDataHistory.flush_priority_call)
  if (_internal_has_flush_priority_call()) {
    clear_has_record();
    ::reporting::FlushPriorityCall* temp = record_.flush_priority_call_;
    record_.flush_priority_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HealthDataHistory::unsafe_arena_set_allocated_flush_priority_call(::reporting::FlushPriorityCall* flush_priority_call) {
  clear_record();
  if (flush_priority_call) {
    set_has_flush_priority_call();
    record_.flush_priority_call_ = flush_priority_call;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reporting.HealthDataHistory.flush_priority_call)
}
inline ::reporting::FlushPriorityCall* HealthDataHistory::_internal_mutable_flush_priority_call() {
  if (!_internal_has_flush_priority_call()) {
    clear_record();
    set_has_flush_priority_call();
    record_.flush_priority_call_ = CreateMaybeMessage< ::reporting::FlushPriorityCall >(GetArenaForAllocation());
  }
  return record_.flush_priority_call_;
}
inline ::reporting::FlushPriorityCall* HealthDataHistory::mutable_flush_priority_call() {
  ::reporting::FlushPriorityCall* _msg = _internal_mutable_flush_priority_call();
  // @@protoc_insertion_point(field_mutable:reporting.HealthDataHistory.flush_priority_call)
  return _msg;
}

// .reporting.UploadEncryptedRecordCall upload_encrypted_record_call = 3;
inline bool HealthDataHistory::_internal_has_upload_encrypted_record_call() const {
  return record_case() == kUploadEncryptedRecordCall;
}
inline bool HealthDataHistory::has_upload_encrypted_record_call() const {
  return _internal_has_upload_encrypted_record_call();
}
inline void HealthDataHistory::set_has_upload_encrypted_record_call() {
  _oneof_case_[0] = kUploadEncryptedRecordCall;
}
inline void HealthDataHistory::clear_upload_encrypted_record_call() {
  if (_internal_has_upload_encrypted_record_call()) {
    if (GetArenaForAllocation() == nullptr) {
      delete record_.upload_encrypted_record_call_;
    }
    clear_has_record();
  }
}
inline ::reporting::UploadEncryptedRecordCall* HealthDataHistory::release_upload_encrypted_record_call() {
  // @@protoc_insertion_point(field_release:reporting.HealthDataHistory.upload_encrypted_record_call)
  if (_internal_has_upload_encrypted_record_call()) {
    clear_has_record();
    ::reporting::UploadEncryptedRecordCall* temp = record_.upload_encrypted_record_call_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    record_.upload_encrypted_record_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::reporting::UploadEncryptedRecordCall& HealthDataHistory::_internal_upload_encrypted_record_call() const {
  return _internal_has_upload_encrypted_record_call()
      ? *record_.upload_encrypted_record_call_
      : reinterpret_cast< ::reporting::UploadEncryptedRecordCall&>(::reporting::_UploadEncryptedRecordCall_default_instance_);
}
inline const ::reporting::UploadEncryptedRecordCall& HealthDataHistory::upload_encrypted_record_call() const {
  // @@protoc_insertion_point(field_get:reporting.HealthDataHistory.upload_encrypted_record_call)
  return _internal_upload_encrypted_record_call();
}
inline ::reporting::UploadEncryptedRecordCall* HealthDataHistory::unsafe_arena_release_upload_encrypted_record_call() {
  // @@protoc_insertion_point(field_unsafe_arena_release:reporting.HealthDataHistory.upload_encrypted_record_call)
  if (_internal_has_upload_encrypted_record_call()) {
    clear_has_record();
    ::reporting::UploadEncryptedRecordCall* temp = record_.upload_encrypted_record_call_;
    record_.upload_encrypted_record_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HealthDataHistory::unsafe_arena_set_allocated_upload_encrypted_record_call(::reporting::UploadEncryptedRecordCall* upload_encrypted_record_call) {
  clear_record();
  if (upload_encrypted_record_call) {
    set_has_upload_encrypted_record_call();
    record_.upload_encrypted_record_call_ = upload_encrypted_record_call;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reporting.HealthDataHistory.upload_encrypted_record_call)
}
inline ::reporting::UploadEncryptedRecordCall* HealthDataHistory::_internal_mutable_upload_encrypted_record_call() {
  if (!_internal_has_upload_encrypted_record_call()) {
    clear_record();
    set_has_upload_encrypted_record_call();
    record_.upload_encrypted_record_call_ = CreateMaybeMessage< ::reporting::UploadEncryptedRecordCall >(GetArenaForAllocation());
  }
  return record_.upload_encrypted_record_call_;
}
inline ::reporting::UploadEncryptedRecordCall* HealthDataHistory::mutable_upload_encrypted_record_call() {
  ::reporting::UploadEncryptedRecordCall* _msg = _internal_mutable_upload_encrypted_record_call();
  // @@protoc_insertion_point(field_mutable:reporting.HealthDataHistory.upload_encrypted_record_call)
  return _msg;
}

// .reporting.ConfirmRecordUploadCall confirm_record_upload_call = 4;
inline bool HealthDataHistory::_internal_has_confirm_record_upload_call() const {
  return record_case() == kConfirmRecordUploadCall;
}
inline bool HealthDataHistory::has_confirm_record_upload_call() const {
  return _internal_has_confirm_record_upload_call();
}
inline void HealthDataHistory::set_has_confirm_record_upload_call() {
  _oneof_case_[0] = kConfirmRecordUploadCall;
}
inline void HealthDataHistory::clear_confirm_record_upload_call() {
  if (_internal_has_confirm_record_upload_call()) {
    if (GetArenaForAllocation() == nullptr) {
      delete record_.confirm_record_upload_call_;
    }
    clear_has_record();
  }
}
inline ::reporting::ConfirmRecordUploadCall* HealthDataHistory::release_confirm_record_upload_call() {
  // @@protoc_insertion_point(field_release:reporting.HealthDataHistory.confirm_record_upload_call)
  if (_internal_has_confirm_record_upload_call()) {
    clear_has_record();
    ::reporting::ConfirmRecordUploadCall* temp = record_.confirm_record_upload_call_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    record_.confirm_record_upload_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::reporting::ConfirmRecordUploadCall& HealthDataHistory::_internal_confirm_record_upload_call() const {
  return _internal_has_confirm_record_upload_call()
      ? *record_.confirm_record_upload_call_
      : reinterpret_cast< ::reporting::ConfirmRecordUploadCall&>(::reporting::_ConfirmRecordUploadCall_default_instance_);
}
inline const ::reporting::ConfirmRecordUploadCall& HealthDataHistory::confirm_record_upload_call() const {
  // @@protoc_insertion_point(field_get:reporting.HealthDataHistory.confirm_record_upload_call)
  return _internal_confirm_record_upload_call();
}
inline ::reporting::ConfirmRecordUploadCall* HealthDataHistory::unsafe_arena_release_confirm_record_upload_call() {
  // @@protoc_insertion_point(field_unsafe_arena_release:reporting.HealthDataHistory.confirm_record_upload_call)
  if (_internal_has_confirm_record_upload_call()) {
    clear_has_record();
    ::reporting::ConfirmRecordUploadCall* temp = record_.confirm_record_upload_call_;
    record_.confirm_record_upload_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HealthDataHistory::unsafe_arena_set_allocated_confirm_record_upload_call(::reporting::ConfirmRecordUploadCall* confirm_record_upload_call) {
  clear_record();
  if (confirm_record_upload_call) {
    set_has_confirm_record_upload_call();
    record_.confirm_record_upload_call_ = confirm_record_upload_call;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reporting.HealthDataHistory.confirm_record_upload_call)
}
inline ::reporting::ConfirmRecordUploadCall* HealthDataHistory::_internal_mutable_confirm_record_upload_call() {
  if (!_internal_has_confirm_record_upload_call()) {
    clear_record();
    set_has_confirm_record_upload_call();
    record_.confirm_record_upload_call_ = CreateMaybeMessage< ::reporting::ConfirmRecordUploadCall >(GetArenaForAllocation());
  }
  return record_.confirm_record_upload_call_;
}
inline ::reporting::ConfirmRecordUploadCall* HealthDataHistory::mutable_confirm_record_upload_call() {
  ::reporting::ConfirmRecordUploadCall* _msg = _internal_mutable_confirm_record_upload_call();
  // @@protoc_insertion_point(field_mutable:reporting.HealthDataHistory.confirm_record_upload_call)
  return _msg;
}

// .reporting.StorageQueueAction storage_queue_action = 5;
inline bool HealthDataHistory::_internal_has_storage_queue_action() const {
  return record_case() == kStorageQueueAction;
}
inline bool HealthDataHistory::has_storage_queue_action() const {
  return _internal_has_storage_queue_action();
}
inline void HealthDataHistory::set_has_storage_queue_action() {
  _oneof_case_[0] = kStorageQueueAction;
}
inline void HealthDataHistory::clear_storage_queue_action() {
  if (_internal_has_storage_queue_action()) {
    if (GetArenaForAllocation() == nullptr) {
      delete record_.storage_queue_action_;
    }
    clear_has_record();
  }
}
inline ::reporting::StorageQueueAction* HealthDataHistory::release_storage_queue_action() {
  // @@protoc_insertion_point(field_release:reporting.HealthDataHistory.storage_queue_action)
  if (_internal_has_storage_queue_action()) {
    clear_has_record();
    ::reporting::StorageQueueAction* temp = record_.storage_queue_action_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    record_.storage_queue_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::reporting::StorageQueueAction& HealthDataHistory::_internal_storage_queue_action() const {
  return _internal_has_storage_queue_action()
      ? *record_.storage_queue_action_
      : reinterpret_cast< ::reporting::StorageQueueAction&>(::reporting::_StorageQueueAction_default_instance_);
}
inline const ::reporting::StorageQueueAction& HealthDataHistory::storage_queue_action() const {
  // @@protoc_insertion_point(field_get:reporting.HealthDataHistory.storage_queue_action)
  return _internal_storage_queue_action();
}
inline ::reporting::StorageQueueAction* HealthDataHistory::unsafe_arena_release_storage_queue_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:reporting.HealthDataHistory.storage_queue_action)
  if (_internal_has_storage_queue_action()) {
    clear_has_record();
    ::reporting::StorageQueueAction* temp = record_.storage_queue_action_;
    record_.storage_queue_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HealthDataHistory::unsafe_arena_set_allocated_storage_queue_action(::reporting::StorageQueueAction* storage_queue_action) {
  clear_record();
  if (storage_queue_action) {
    set_has_storage_queue_action();
    record_.storage_queue_action_ = storage_queue_action;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reporting.HealthDataHistory.storage_queue_action)
}
inline ::reporting::StorageQueueAction* HealthDataHistory::_internal_mutable_storage_queue_action() {
  if (!_internal_has_storage_queue_action()) {
    clear_record();
    set_has_storage_queue_action();
    record_.storage_queue_action_ = CreateMaybeMessage< ::reporting::StorageQueueAction >(GetArenaForAllocation());
  }
  return record_.storage_queue_action_;
}
inline ::reporting::StorageQueueAction* HealthDataHistory::mutable_storage_queue_action() {
  ::reporting::StorageQueueAction* _msg = _internal_mutable_storage_queue_action();
  // @@protoc_insertion_point(field_mutable:reporting.HealthDataHistory.storage_queue_action)
  return _msg;
}

// optional int64 timestamp_seconds = 6;
inline bool HealthDataHistory::_internal_has_timestamp_seconds() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HealthDataHistory::has_timestamp_seconds() const {
  return _internal_has_timestamp_seconds();
}
inline void HealthDataHistory::clear_timestamp_seconds() {
  timestamp_seconds_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t HealthDataHistory::_internal_timestamp_seconds() const {
  return timestamp_seconds_;
}
inline int64_t HealthDataHistory::timestamp_seconds() const {
  // @@protoc_insertion_point(field_get:reporting.HealthDataHistory.timestamp_seconds)
  return _internal_timestamp_seconds();
}
inline void HealthDataHistory::_internal_set_timestamp_seconds(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_seconds_ = value;
}
inline void HealthDataHistory::set_timestamp_seconds(int64_t value) {
  _internal_set_timestamp_seconds(value);
  // @@protoc_insertion_point(field_set:reporting.HealthDataHistory.timestamp_seconds)
}

inline bool HealthDataHistory::has_record() const {
  return record_case() != RECORD_NOT_SET;
}
inline void HealthDataHistory::clear_has_record() {
  _oneof_case_[0] = RECORD_NOT_SET;
}
inline HealthDataHistory::RecordCase HealthDataHistory::record_case() const {
  return HealthDataHistory::RecordCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ERPHealthData

// repeated .reporting.HealthDataHistory history = 1;
inline int ERPHealthData::_internal_history_size() const {
  return history_.size();
}
inline int ERPHealthData::history_size() const {
  return _internal_history_size();
}
inline void ERPHealthData::clear_history() {
  history_.Clear();
}
inline ::reporting::HealthDataHistory* ERPHealthData::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:reporting.ERPHealthData.history)
  return history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reporting::HealthDataHistory >*
ERPHealthData::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:reporting.ERPHealthData.history)
  return &history_;
}
inline const ::reporting::HealthDataHistory& ERPHealthData::_internal_history(int index) const {
  return history_.Get(index);
}
inline const ::reporting::HealthDataHistory& ERPHealthData::history(int index) const {
  // @@protoc_insertion_point(field_get:reporting.ERPHealthData.history)
  return _internal_history(index);
}
inline ::reporting::HealthDataHistory* ERPHealthData::_internal_add_history() {
  return history_.Add();
}
inline ::reporting::HealthDataHistory* ERPHealthData::add_history() {
  ::reporting::HealthDataHistory* _add = _internal_add_history();
  // @@protoc_insertion_point(field_add:reporting.ERPHealthData.history)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reporting::HealthDataHistory >&
ERPHealthData::history() const {
  // @@protoc_insertion_point(field_list:reporting.ERPHealthData.history)
  return history_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace reporting

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2freporting_2fproto_2fsynced_2fhealth_2eproto
