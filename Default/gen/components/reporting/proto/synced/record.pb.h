// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/reporting/proto/synced/record.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2freporting_2fproto_2fsynced_2frecord_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2freporting_2fproto_2fsynced_2frecord_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/reporting/proto/synced/health.pb.h"
#include "components/reporting/proto/synced/record_constants.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2freporting_2fproto_2fsynced_2frecord_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2freporting_2fproto_2fsynced_2frecord_2eproto {
  static const uint32_t offsets[];
};
namespace reporting {
class CompressionInformation;
struct CompressionInformationDefaultTypeInternal;
extern CompressionInformationDefaultTypeInternal _CompressionInformation_default_instance_;
class EncryptedRecord;
struct EncryptedRecordDefaultTypeInternal;
extern EncryptedRecordDefaultTypeInternal _EncryptedRecord_default_instance_;
class EncryptionInfo;
struct EncryptionInfoDefaultTypeInternal;
extern EncryptionInfoDefaultTypeInternal _EncryptionInfo_default_instance_;
class Record;
struct RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
class SequenceInformation;
struct SequenceInformationDefaultTypeInternal;
extern SequenceInformationDefaultTypeInternal _SequenceInformation_default_instance_;
class SignedEncryptionInfo;
struct SignedEncryptionInfoDefaultTypeInternal;
extern SignedEncryptionInfoDefaultTypeInternal _SignedEncryptionInfo_default_instance_;
class WrappedRecord;
struct WrappedRecordDefaultTypeInternal;
extern WrappedRecordDefaultTypeInternal _WrappedRecord_default_instance_;
}  // namespace reporting
PROTOBUF_NAMESPACE_OPEN
template<> ::reporting::CompressionInformation* Arena::CreateMaybeMessage<::reporting::CompressionInformation>(Arena*);
template<> ::reporting::EncryptedRecord* Arena::CreateMaybeMessage<::reporting::EncryptedRecord>(Arena*);
template<> ::reporting::EncryptionInfo* Arena::CreateMaybeMessage<::reporting::EncryptionInfo>(Arena*);
template<> ::reporting::Record* Arena::CreateMaybeMessage<::reporting::Record>(Arena*);
template<> ::reporting::SequenceInformation* Arena::CreateMaybeMessage<::reporting::SequenceInformation>(Arena*);
template<> ::reporting::SignedEncryptionInfo* Arena::CreateMaybeMessage<::reporting::SignedEncryptionInfo>(Arena*);
template<> ::reporting::WrappedRecord* Arena::CreateMaybeMessage<::reporting::WrappedRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace reporting {

enum CompressionInformation_CompressionAlgorithm : int {
  CompressionInformation_CompressionAlgorithm_COMPRESSION_NONE = 0,
  CompressionInformation_CompressionAlgorithm_COMPRESSION_SNAPPY = 1
};
bool CompressionInformation_CompressionAlgorithm_IsValid(int value);
constexpr CompressionInformation_CompressionAlgorithm CompressionInformation_CompressionAlgorithm_CompressionAlgorithm_MIN = CompressionInformation_CompressionAlgorithm_COMPRESSION_NONE;
constexpr CompressionInformation_CompressionAlgorithm CompressionInformation_CompressionAlgorithm_CompressionAlgorithm_MAX = CompressionInformation_CompressionAlgorithm_COMPRESSION_SNAPPY;
constexpr int CompressionInformation_CompressionAlgorithm_CompressionAlgorithm_ARRAYSIZE = CompressionInformation_CompressionAlgorithm_CompressionAlgorithm_MAX + 1;

const std::string& CompressionInformation_CompressionAlgorithm_Name(CompressionInformation_CompressionAlgorithm value);
template<typename T>
inline const std::string& CompressionInformation_CompressionAlgorithm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompressionInformation_CompressionAlgorithm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompressionInformation_CompressionAlgorithm_Name.");
  return CompressionInformation_CompressionAlgorithm_Name(static_cast<CompressionInformation_CompressionAlgorithm>(enum_t_value));
}
bool CompressionInformation_CompressionAlgorithm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CompressionInformation_CompressionAlgorithm* value);
// ===================================================================

class Record final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.Record) */ {
 public:
  inline Record() : Record(nullptr) {}
  ~Record() override;
  explicit PROTOBUF_CONSTEXPR Record(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Record(const Record& from);
  Record(Record&& from) noexcept
    : Record() {
    *this = ::std::move(from);
  }

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  inline Record& operator=(Record&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Record& default_instance() {
    return *internal_default_instance();
  }
  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
               &_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Record& a, Record& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Record* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Record>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Record* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.Record";
  }
  protected:
  explicit Record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kDmTokenFieldNumber = 3,
    kTimestampUsFieldNumber = 4,
    kDestinationFieldNumber = 2,
  };
  // optional bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional string dm_token = 3;
  bool has_dm_token() const;
  private:
  bool _internal_has_dm_token() const;
  public:
  void clear_dm_token();
  const std::string& dm_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dm_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dm_token();
  PROTOBUF_NODISCARD std::string* release_dm_token();
  void set_allocated_dm_token(std::string* dm_token);
  private:
  const std::string& _internal_dm_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dm_token(const std::string& value);
  std::string* _internal_mutable_dm_token();
  public:

  // optional int64 timestamp_us = 4;
  bool has_timestamp_us() const;
  private:
  bool _internal_has_timestamp_us() const;
  public:
  void clear_timestamp_us();
  int64_t timestamp_us() const;
  void set_timestamp_us(int64_t value);
  private:
  int64_t _internal_timestamp_us() const;
  void _internal_set_timestamp_us(int64_t value);
  public:

  // optional .reporting.Destination destination = 2;
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  ::reporting::Destination destination() const;
  void set_destination(::reporting::Destination value);
  private:
  ::reporting::Destination _internal_destination() const;
  void _internal_set_destination(::reporting::Destination value);
  public:

  // @@protoc_insertion_point(class_scope:reporting.Record)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dm_token_;
  int64_t timestamp_us_;
  int destination_;
  friend struct ::TableStruct_components_2freporting_2fproto_2fsynced_2frecord_2eproto;
};
// -------------------------------------------------------------------

class WrappedRecord final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.WrappedRecord) */ {
 public:
  inline WrappedRecord() : WrappedRecord(nullptr) {}
  ~WrappedRecord() override;
  explicit PROTOBUF_CONSTEXPR WrappedRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WrappedRecord(const WrappedRecord& from);
  WrappedRecord(WrappedRecord&& from) noexcept
    : WrappedRecord() {
    *this = ::std::move(from);
  }

  inline WrappedRecord& operator=(const WrappedRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrappedRecord& operator=(WrappedRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WrappedRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const WrappedRecord* internal_default_instance() {
    return reinterpret_cast<const WrappedRecord*>(
               &_WrappedRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WrappedRecord& a, WrappedRecord& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WrappedRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrappedRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WrappedRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WrappedRecord>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WrappedRecord& from);
  void MergeFrom(const WrappedRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WrappedRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.WrappedRecord";
  }
  protected:
  explicit WrappedRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordDigestFieldNumber = 2,
    kLastRecordDigestFieldNumber = 3,
    kRecordFieldNumber = 1,
  };
  // optional bytes record_digest = 2;
  bool has_record_digest() const;
  private:
  bool _internal_has_record_digest() const;
  public:
  void clear_record_digest();
  const std::string& record_digest() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_digest(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_digest();
  PROTOBUF_NODISCARD std::string* release_record_digest();
  void set_allocated_record_digest(std::string* record_digest);
  private:
  const std::string& _internal_record_digest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_digest(const std::string& value);
  std::string* _internal_mutable_record_digest();
  public:

  // optional bytes last_record_digest = 3;
  bool has_last_record_digest() const;
  private:
  bool _internal_has_last_record_digest() const;
  public:
  void clear_last_record_digest();
  const std::string& last_record_digest() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_record_digest(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_record_digest();
  PROTOBUF_NODISCARD std::string* release_last_record_digest();
  void set_allocated_last_record_digest(std::string* last_record_digest);
  private:
  const std::string& _internal_last_record_digest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_record_digest(const std::string& value);
  std::string* _internal_mutable_last_record_digest();
  public:

  // optional .reporting.Record record = 1;
  bool has_record() const;
  private:
  bool _internal_has_record() const;
  public:
  void clear_record();
  const ::reporting::Record& record() const;
  PROTOBUF_NODISCARD ::reporting::Record* release_record();
  ::reporting::Record* mutable_record();
  void set_allocated_record(::reporting::Record* record);
  private:
  const ::reporting::Record& _internal_record() const;
  ::reporting::Record* _internal_mutable_record();
  public:
  void unsafe_arena_set_allocated_record(
      ::reporting::Record* record);
  ::reporting::Record* unsafe_arena_release_record();

  // @@protoc_insertion_point(class_scope:reporting.WrappedRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_digest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_record_digest_;
  ::reporting::Record* record_;
  friend struct ::TableStruct_components_2freporting_2fproto_2fsynced_2frecord_2eproto;
};
// -------------------------------------------------------------------

class EncryptionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.EncryptionInfo) */ {
 public:
  inline EncryptionInfo() : EncryptionInfo(nullptr) {}
  ~EncryptionInfo() override;
  explicit PROTOBUF_CONSTEXPR EncryptionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncryptionInfo(const EncryptionInfo& from);
  EncryptionInfo(EncryptionInfo&& from) noexcept
    : EncryptionInfo() {
    *this = ::std::move(from);
  }

  inline EncryptionInfo& operator=(const EncryptionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptionInfo& operator=(EncryptionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EncryptionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptionInfo* internal_default_instance() {
    return reinterpret_cast<const EncryptionInfo*>(
               &_EncryptionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EncryptionInfo& a, EncryptionInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(EncryptionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncryptionInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EncryptionInfo& from);
  void MergeFrom(const EncryptionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EncryptionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.EncryptionInfo";
  }
  protected:
  explicit EncryptionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptionKeyFieldNumber = 1,
    kPublicKeyIdFieldNumber = 2,
  };
  // optional bytes encryption_key = 1;
  bool has_encryption_key() const;
  private:
  bool _internal_has_encryption_key() const;
  public:
  void clear_encryption_key();
  const std::string& encryption_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encryption_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encryption_key();
  PROTOBUF_NODISCARD std::string* release_encryption_key();
  void set_allocated_encryption_key(std::string* encryption_key);
  private:
  const std::string& _internal_encryption_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encryption_key(const std::string& value);
  std::string* _internal_mutable_encryption_key();
  public:

  // optional int64 public_key_id = 2;
  bool has_public_key_id() const;
  private:
  bool _internal_has_public_key_id() const;
  public:
  void clear_public_key_id();
  int64_t public_key_id() const;
  void set_public_key_id(int64_t value);
  private:
  int64_t _internal_public_key_id() const;
  void _internal_set_public_key_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:reporting.EncryptionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryption_key_;
  int64_t public_key_id_;
  friend struct ::TableStruct_components_2freporting_2fproto_2fsynced_2frecord_2eproto;
};
// -------------------------------------------------------------------

class SequenceInformation final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.SequenceInformation) */ {
 public:
  inline SequenceInformation() : SequenceInformation(nullptr) {}
  ~SequenceInformation() override;
  explicit PROTOBUF_CONSTEXPR SequenceInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SequenceInformation(const SequenceInformation& from);
  SequenceInformation(SequenceInformation&& from) noexcept
    : SequenceInformation() {
    *this = ::std::move(from);
  }

  inline SequenceInformation& operator=(const SequenceInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SequenceInformation& operator=(SequenceInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SequenceInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const SequenceInformation* internal_default_instance() {
    return reinterpret_cast<const SequenceInformation*>(
               &_SequenceInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SequenceInformation& a, SequenceInformation& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SequenceInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SequenceInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SequenceInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SequenceInformation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SequenceInformation& from);
  void MergeFrom(const SequenceInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SequenceInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.SequenceInformation";
  }
  protected:
  explicit SequenceInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequencingIdFieldNumber = 1,
    kGenerationIdFieldNumber = 2,
    kPriorityFieldNumber = 3,
  };
  // optional int64 sequencing_id = 1;
  bool has_sequencing_id() const;
  private:
  bool _internal_has_sequencing_id() const;
  public:
  void clear_sequencing_id();
  int64_t sequencing_id() const;
  void set_sequencing_id(int64_t value);
  private:
  int64_t _internal_sequencing_id() const;
  void _internal_set_sequencing_id(int64_t value);
  public:

  // optional int64 generation_id = 2;
  bool has_generation_id() const;
  private:
  bool _internal_has_generation_id() const;
  public:
  void clear_generation_id();
  int64_t generation_id() const;
  void set_generation_id(int64_t value);
  private:
  int64_t _internal_generation_id() const;
  void _internal_set_generation_id(int64_t value);
  public:

  // optional .reporting.Priority priority = 3;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  ::reporting::Priority priority() const;
  void set_priority(::reporting::Priority value);
  private:
  ::reporting::Priority _internal_priority() const;
  void _internal_set_priority(::reporting::Priority value);
  public:

  // @@protoc_insertion_point(class_scope:reporting.SequenceInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t sequencing_id_;
  int64_t generation_id_;
  int priority_;
  friend struct ::TableStruct_components_2freporting_2fproto_2fsynced_2frecord_2eproto;
};
// -------------------------------------------------------------------

class EncryptedRecord final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.EncryptedRecord) */ {
 public:
  inline EncryptedRecord() : EncryptedRecord(nullptr) {}
  ~EncryptedRecord() override;
  explicit PROTOBUF_CONSTEXPR EncryptedRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncryptedRecord(const EncryptedRecord& from);
  EncryptedRecord(EncryptedRecord&& from) noexcept
    : EncryptedRecord() {
    *this = ::std::move(from);
  }

  inline EncryptedRecord& operator=(const EncryptedRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedRecord& operator=(EncryptedRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EncryptedRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptedRecord* internal_default_instance() {
    return reinterpret_cast<const EncryptedRecord*>(
               &_EncryptedRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EncryptedRecord& a, EncryptedRecord& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(EncryptedRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptedRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptedRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncryptedRecord>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EncryptedRecord& from);
  void MergeFrom(const EncryptedRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EncryptedRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.EncryptedRecord";
  }
  protected:
  explicit EncryptedRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedWrappedRecordFieldNumber = 1,
    kEncryptionInfoFieldNumber = 2,
    kSequenceInformationFieldNumber = 3,
    kCompressionInformationFieldNumber = 4,
    kSequencingInformationFieldNumber = 5,
    kErpHealthDataFieldNumber = 6,
  };
  // optional bytes encrypted_wrapped_record = 1;
  bool has_encrypted_wrapped_record() const;
  private:
  bool _internal_has_encrypted_wrapped_record() const;
  public:
  void clear_encrypted_wrapped_record();
  const std::string& encrypted_wrapped_record() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encrypted_wrapped_record(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encrypted_wrapped_record();
  PROTOBUF_NODISCARD std::string* release_encrypted_wrapped_record();
  void set_allocated_encrypted_wrapped_record(std::string* encrypted_wrapped_record);
  private:
  const std::string& _internal_encrypted_wrapped_record() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_wrapped_record(const std::string& value);
  std::string* _internal_mutable_encrypted_wrapped_record();
  public:

  // optional .reporting.EncryptionInfo encryption_info = 2;
  bool has_encryption_info() const;
  private:
  bool _internal_has_encryption_info() const;
  public:
  void clear_encryption_info();
  const ::reporting::EncryptionInfo& encryption_info() const;
  PROTOBUF_NODISCARD ::reporting::EncryptionInfo* release_encryption_info();
  ::reporting::EncryptionInfo* mutable_encryption_info();
  void set_allocated_encryption_info(::reporting::EncryptionInfo* encryption_info);
  private:
  const ::reporting::EncryptionInfo& _internal_encryption_info() const;
  ::reporting::EncryptionInfo* _internal_mutable_encryption_info();
  public:
  void unsafe_arena_set_allocated_encryption_info(
      ::reporting::EncryptionInfo* encryption_info);
  ::reporting::EncryptionInfo* unsafe_arena_release_encryption_info();

  // optional .reporting.SequenceInformation sequence_information = 3;
  bool has_sequence_information() const;
  private:
  bool _internal_has_sequence_information() const;
  public:
  void clear_sequence_information();
  const ::reporting::SequenceInformation& sequence_information() const;
  PROTOBUF_NODISCARD ::reporting::SequenceInformation* release_sequence_information();
  ::reporting::SequenceInformation* mutable_sequence_information();
  void set_allocated_sequence_information(::reporting::SequenceInformation* sequence_information);
  private:
  const ::reporting::SequenceInformation& _internal_sequence_information() const;
  ::reporting::SequenceInformation* _internal_mutable_sequence_information();
  public:
  void unsafe_arena_set_allocated_sequence_information(
      ::reporting::SequenceInformation* sequence_information);
  ::reporting::SequenceInformation* unsafe_arena_release_sequence_information();

  // optional .reporting.CompressionInformation compression_information = 4;
  bool has_compression_information() const;
  private:
  bool _internal_has_compression_information() const;
  public:
  void clear_compression_information();
  const ::reporting::CompressionInformation& compression_information() const;
  PROTOBUF_NODISCARD ::reporting::CompressionInformation* release_compression_information();
  ::reporting::CompressionInformation* mutable_compression_information();
  void set_allocated_compression_information(::reporting::CompressionInformation* compression_information);
  private:
  const ::reporting::CompressionInformation& _internal_compression_information() const;
  ::reporting::CompressionInformation* _internal_mutable_compression_information();
  public:
  void unsafe_arena_set_allocated_compression_information(
      ::reporting::CompressionInformation* compression_information);
  ::reporting::CompressionInformation* unsafe_arena_release_compression_information();

  // optional .reporting.SequenceInformation sequencing_information = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_sequencing_information() const;
  private:
  bool _internal_has_sequencing_information() const;
  public:
  PROTOBUF_DEPRECATED void clear_sequencing_information();
  PROTOBUF_DEPRECATED const ::reporting::SequenceInformation& sequencing_information() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::reporting::SequenceInformation* release_sequencing_information();
  PROTOBUF_DEPRECATED ::reporting::SequenceInformation* mutable_sequencing_information();
  PROTOBUF_DEPRECATED void set_allocated_sequencing_information(::reporting::SequenceInformation* sequencing_information);
  private:
  const ::reporting::SequenceInformation& _internal_sequencing_information() const;
  ::reporting::SequenceInformation* _internal_mutable_sequencing_information();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_sequencing_information(
      ::reporting::SequenceInformation* sequencing_information);
  PROTOBUF_DEPRECATED ::reporting::SequenceInformation* unsafe_arena_release_sequencing_information();

  // optional .reporting.ERPHealthData erp_health_data = 6;
  bool has_erp_health_data() const;
  private:
  bool _internal_has_erp_health_data() const;
  public:
  void clear_erp_health_data();
  const ::reporting::ERPHealthData& erp_health_data() const;
  PROTOBUF_NODISCARD ::reporting::ERPHealthData* release_erp_health_data();
  ::reporting::ERPHealthData* mutable_erp_health_data();
  void set_allocated_erp_health_data(::reporting::ERPHealthData* erp_health_data);
  private:
  const ::reporting::ERPHealthData& _internal_erp_health_data() const;
  ::reporting::ERPHealthData* _internal_mutable_erp_health_data();
  public:
  void unsafe_arena_set_allocated_erp_health_data(
      ::reporting::ERPHealthData* erp_health_data);
  ::reporting::ERPHealthData* unsafe_arena_release_erp_health_data();

  // @@protoc_insertion_point(class_scope:reporting.EncryptedRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_wrapped_record_;
  ::reporting::EncryptionInfo* encryption_info_;
  ::reporting::SequenceInformation* sequence_information_;
  ::reporting::CompressionInformation* compression_information_;
  ::reporting::SequenceInformation* sequencing_information_;
  ::reporting::ERPHealthData* erp_health_data_;
  friend struct ::TableStruct_components_2freporting_2fproto_2fsynced_2frecord_2eproto;
};
// -------------------------------------------------------------------

class CompressionInformation final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.CompressionInformation) */ {
 public:
  inline CompressionInformation() : CompressionInformation(nullptr) {}
  ~CompressionInformation() override;
  explicit PROTOBUF_CONSTEXPR CompressionInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompressionInformation(const CompressionInformation& from);
  CompressionInformation(CompressionInformation&& from) noexcept
    : CompressionInformation() {
    *this = ::std::move(from);
  }

  inline CompressionInformation& operator=(const CompressionInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompressionInformation& operator=(CompressionInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CompressionInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompressionInformation* internal_default_instance() {
    return reinterpret_cast<const CompressionInformation*>(
               &_CompressionInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CompressionInformation& a, CompressionInformation& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CompressionInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompressionInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompressionInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompressionInformation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CompressionInformation& from);
  void MergeFrom(const CompressionInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CompressionInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.CompressionInformation";
  }
  protected:
  explicit CompressionInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CompressionInformation_CompressionAlgorithm CompressionAlgorithm;
  static constexpr CompressionAlgorithm COMPRESSION_NONE =
    CompressionInformation_CompressionAlgorithm_COMPRESSION_NONE;
  static constexpr CompressionAlgorithm COMPRESSION_SNAPPY =
    CompressionInformation_CompressionAlgorithm_COMPRESSION_SNAPPY;
  static inline bool CompressionAlgorithm_IsValid(int value) {
    return CompressionInformation_CompressionAlgorithm_IsValid(value);
  }
  static constexpr CompressionAlgorithm CompressionAlgorithm_MIN =
    CompressionInformation_CompressionAlgorithm_CompressionAlgorithm_MIN;
  static constexpr CompressionAlgorithm CompressionAlgorithm_MAX =
    CompressionInformation_CompressionAlgorithm_CompressionAlgorithm_MAX;
  static constexpr int CompressionAlgorithm_ARRAYSIZE =
    CompressionInformation_CompressionAlgorithm_CompressionAlgorithm_ARRAYSIZE;
  template<typename T>
  static inline const std::string& CompressionAlgorithm_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CompressionAlgorithm>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CompressionAlgorithm_Name.");
    return CompressionInformation_CompressionAlgorithm_Name(enum_t_value);
  }
  static inline bool CompressionAlgorithm_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CompressionAlgorithm* value) {
    return CompressionInformation_CompressionAlgorithm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCompressionAlgorithmFieldNumber = 1,
  };
  // optional .reporting.CompressionInformation.CompressionAlgorithm compression_algorithm = 1;
  bool has_compression_algorithm() const;
  private:
  bool _internal_has_compression_algorithm() const;
  public:
  void clear_compression_algorithm();
  ::reporting::CompressionInformation_CompressionAlgorithm compression_algorithm() const;
  void set_compression_algorithm(::reporting::CompressionInformation_CompressionAlgorithm value);
  private:
  ::reporting::CompressionInformation_CompressionAlgorithm _internal_compression_algorithm() const;
  void _internal_set_compression_algorithm(::reporting::CompressionInformation_CompressionAlgorithm value);
  public:

  // @@protoc_insertion_point(class_scope:reporting.CompressionInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int compression_algorithm_;
  friend struct ::TableStruct_components_2freporting_2fproto_2fsynced_2frecord_2eproto;
};
// -------------------------------------------------------------------

class SignedEncryptionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.SignedEncryptionInfo) */ {
 public:
  inline SignedEncryptionInfo() : SignedEncryptionInfo(nullptr) {}
  ~SignedEncryptionInfo() override;
  explicit PROTOBUF_CONSTEXPR SignedEncryptionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignedEncryptionInfo(const SignedEncryptionInfo& from);
  SignedEncryptionInfo(SignedEncryptionInfo&& from) noexcept
    : SignedEncryptionInfo() {
    *this = ::std::move(from);
  }

  inline SignedEncryptionInfo& operator=(const SignedEncryptionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignedEncryptionInfo& operator=(SignedEncryptionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SignedEncryptionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignedEncryptionInfo* internal_default_instance() {
    return reinterpret_cast<const SignedEncryptionInfo*>(
               &_SignedEncryptionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SignedEncryptionInfo& a, SignedEncryptionInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SignedEncryptionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignedEncryptionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignedEncryptionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignedEncryptionInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SignedEncryptionInfo& from);
  void MergeFrom(const SignedEncryptionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SignedEncryptionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.SignedEncryptionInfo";
  }
  protected:
  explicit SignedEncryptionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicAsymmetricKeyFieldNumber = 1,
    kSignatureFieldNumber = 3,
    kPublicKeyIdFieldNumber = 2,
  };
  // optional bytes public_asymmetric_key = 1;
  bool has_public_asymmetric_key() const;
  private:
  bool _internal_has_public_asymmetric_key() const;
  public:
  void clear_public_asymmetric_key();
  const std::string& public_asymmetric_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_asymmetric_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_asymmetric_key();
  PROTOBUF_NODISCARD std::string* release_public_asymmetric_key();
  void set_allocated_public_asymmetric_key(std::string* public_asymmetric_key);
  private:
  const std::string& _internal_public_asymmetric_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_asymmetric_key(const std::string& value);
  std::string* _internal_mutable_public_asymmetric_key();
  public:

  // optional bytes signature = 3;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // optional int32 public_key_id = 2;
  bool has_public_key_id() const;
  private:
  bool _internal_has_public_key_id() const;
  public:
  void clear_public_key_id();
  int32_t public_key_id() const;
  void set_public_key_id(int32_t value);
  private:
  int32_t _internal_public_key_id() const;
  void _internal_set_public_key_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:reporting.SignedEncryptionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_asymmetric_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  int32_t public_key_id_;
  friend struct ::TableStruct_components_2freporting_2fproto_2fsynced_2frecord_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Record

// optional bytes data = 1;
inline bool Record::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Record::has_data() const {
  return _internal_has_data();
}
inline void Record::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Record::data() const {
  // @@protoc_insertion_point(field_get:reporting.Record.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Record::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:reporting.Record.data)
}
inline std::string* Record::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:reporting.Record.data)
  return _s;
}
inline const std::string& Record::_internal_data() const {
  return data_.Get();
}
inline void Record::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* Record::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* Record::release_data() {
  // @@protoc_insertion_point(field_release:reporting.Record.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Record::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:reporting.Record.data)
}

// optional .reporting.Destination destination = 2;
inline bool Record::_internal_has_destination() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Record::has_destination() const {
  return _internal_has_destination();
}
inline void Record::clear_destination() {
  destination_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::reporting::Destination Record::_internal_destination() const {
  return static_cast< ::reporting::Destination >(destination_);
}
inline ::reporting::Destination Record::destination() const {
  // @@protoc_insertion_point(field_get:reporting.Record.destination)
  return _internal_destination();
}
inline void Record::_internal_set_destination(::reporting::Destination value) {
  assert(::reporting::Destination_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  destination_ = value;
}
inline void Record::set_destination(::reporting::Destination value) {
  _internal_set_destination(value);
  // @@protoc_insertion_point(field_set:reporting.Record.destination)
}

// optional string dm_token = 3;
inline bool Record::_internal_has_dm_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Record::has_dm_token() const {
  return _internal_has_dm_token();
}
inline void Record::clear_dm_token() {
  dm_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Record::dm_token() const {
  // @@protoc_insertion_point(field_get:reporting.Record.dm_token)
  return _internal_dm_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Record::set_dm_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 dm_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:reporting.Record.dm_token)
}
inline std::string* Record::mutable_dm_token() {
  std::string* _s = _internal_mutable_dm_token();
  // @@protoc_insertion_point(field_mutable:reporting.Record.dm_token)
  return _s;
}
inline const std::string& Record::_internal_dm_token() const {
  return dm_token_.Get();
}
inline void Record::_internal_set_dm_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  dm_token_.Set(value, GetArenaForAllocation());
}
inline std::string* Record::_internal_mutable_dm_token() {
  _has_bits_[0] |= 0x00000002u;
  return dm_token_.Mutable(GetArenaForAllocation());
}
inline std::string* Record::release_dm_token() {
  // @@protoc_insertion_point(field_release:reporting.Record.dm_token)
  if (!_internal_has_dm_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = dm_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dm_token_.IsDefault()) {
    dm_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Record::set_allocated_dm_token(std::string* dm_token) {
  if (dm_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dm_token_.SetAllocated(dm_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dm_token_.IsDefault()) {
    dm_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:reporting.Record.dm_token)
}

// optional int64 timestamp_us = 4;
inline bool Record::_internal_has_timestamp_us() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Record::has_timestamp_us() const {
  return _internal_has_timestamp_us();
}
inline void Record::clear_timestamp_us() {
  timestamp_us_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t Record::_internal_timestamp_us() const {
  return timestamp_us_;
}
inline int64_t Record::timestamp_us() const {
  // @@protoc_insertion_point(field_get:reporting.Record.timestamp_us)
  return _internal_timestamp_us();
}
inline void Record::_internal_set_timestamp_us(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_us_ = value;
}
inline void Record::set_timestamp_us(int64_t value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:reporting.Record.timestamp_us)
}

// -------------------------------------------------------------------

// WrappedRecord

// optional .reporting.Record record = 1;
inline bool WrappedRecord::_internal_has_record() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || record_ != nullptr);
  return value;
}
inline bool WrappedRecord::has_record() const {
  return _internal_has_record();
}
inline void WrappedRecord::clear_record() {
  if (record_ != nullptr) record_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::reporting::Record& WrappedRecord::_internal_record() const {
  const ::reporting::Record* p = record_;
  return p != nullptr ? *p : reinterpret_cast<const ::reporting::Record&>(
      ::reporting::_Record_default_instance_);
}
inline const ::reporting::Record& WrappedRecord::record() const {
  // @@protoc_insertion_point(field_get:reporting.WrappedRecord.record)
  return _internal_record();
}
inline void WrappedRecord::unsafe_arena_set_allocated_record(
    ::reporting::Record* record) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_);
  }
  record_ = record;
  if (record) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reporting.WrappedRecord.record)
}
inline ::reporting::Record* WrappedRecord::release_record() {
  _has_bits_[0] &= ~0x00000004u;
  ::reporting::Record* temp = record_;
  record_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::reporting::Record* WrappedRecord::unsafe_arena_release_record() {
  // @@protoc_insertion_point(field_release:reporting.WrappedRecord.record)
  _has_bits_[0] &= ~0x00000004u;
  ::reporting::Record* temp = record_;
  record_ = nullptr;
  return temp;
}
inline ::reporting::Record* WrappedRecord::_internal_mutable_record() {
  _has_bits_[0] |= 0x00000004u;
  if (record_ == nullptr) {
    auto* p = CreateMaybeMessage<::reporting::Record>(GetArenaForAllocation());
    record_ = p;
  }
  return record_;
}
inline ::reporting::Record* WrappedRecord::mutable_record() {
  ::reporting::Record* _msg = _internal_mutable_record();
  // @@protoc_insertion_point(field_mutable:reporting.WrappedRecord.record)
  return _msg;
}
inline void WrappedRecord::set_allocated_record(::reporting::Record* record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete record_;
  }
  if (record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(record);
    if (message_arena != submessage_arena) {
      record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  record_ = record;
  // @@protoc_insertion_point(field_set_allocated:reporting.WrappedRecord.record)
}

// optional bytes record_digest = 2;
inline bool WrappedRecord::_internal_has_record_digest() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WrappedRecord::has_record_digest() const {
  return _internal_has_record_digest();
}
inline void WrappedRecord::clear_record_digest() {
  record_digest_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WrappedRecord::record_digest() const {
  // @@protoc_insertion_point(field_get:reporting.WrappedRecord.record_digest)
  return _internal_record_digest();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WrappedRecord::set_record_digest(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 record_digest_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:reporting.WrappedRecord.record_digest)
}
inline std::string* WrappedRecord::mutable_record_digest() {
  std::string* _s = _internal_mutable_record_digest();
  // @@protoc_insertion_point(field_mutable:reporting.WrappedRecord.record_digest)
  return _s;
}
inline const std::string& WrappedRecord::_internal_record_digest() const {
  return record_digest_.Get();
}
inline void WrappedRecord::_internal_set_record_digest(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  record_digest_.Set(value, GetArenaForAllocation());
}
inline std::string* WrappedRecord::_internal_mutable_record_digest() {
  _has_bits_[0] |= 0x00000001u;
  return record_digest_.Mutable(GetArenaForAllocation());
}
inline std::string* WrappedRecord::release_record_digest() {
  // @@protoc_insertion_point(field_release:reporting.WrappedRecord.record_digest)
  if (!_internal_has_record_digest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = record_digest_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (record_digest_.IsDefault()) {
    record_digest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WrappedRecord::set_allocated_record_digest(std::string* record_digest) {
  if (record_digest != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  record_digest_.SetAllocated(record_digest, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (record_digest_.IsDefault()) {
    record_digest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:reporting.WrappedRecord.record_digest)
}

// optional bytes last_record_digest = 3;
inline bool WrappedRecord::_internal_has_last_record_digest() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WrappedRecord::has_last_record_digest() const {
  return _internal_has_last_record_digest();
}
inline void WrappedRecord::clear_last_record_digest() {
  last_record_digest_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WrappedRecord::last_record_digest() const {
  // @@protoc_insertion_point(field_get:reporting.WrappedRecord.last_record_digest)
  return _internal_last_record_digest();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WrappedRecord::set_last_record_digest(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 last_record_digest_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:reporting.WrappedRecord.last_record_digest)
}
inline std::string* WrappedRecord::mutable_last_record_digest() {
  std::string* _s = _internal_mutable_last_record_digest();
  // @@protoc_insertion_point(field_mutable:reporting.WrappedRecord.last_record_digest)
  return _s;
}
inline const std::string& WrappedRecord::_internal_last_record_digest() const {
  return last_record_digest_.Get();
}
inline void WrappedRecord::_internal_set_last_record_digest(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  last_record_digest_.Set(value, GetArenaForAllocation());
}
inline std::string* WrappedRecord::_internal_mutable_last_record_digest() {
  _has_bits_[0] |= 0x00000002u;
  return last_record_digest_.Mutable(GetArenaForAllocation());
}
inline std::string* WrappedRecord::release_last_record_digest() {
  // @@protoc_insertion_point(field_release:reporting.WrappedRecord.last_record_digest)
  if (!_internal_has_last_record_digest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = last_record_digest_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_record_digest_.IsDefault()) {
    last_record_digest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WrappedRecord::set_allocated_last_record_digest(std::string* last_record_digest) {
  if (last_record_digest != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  last_record_digest_.SetAllocated(last_record_digest, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_record_digest_.IsDefault()) {
    last_record_digest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:reporting.WrappedRecord.last_record_digest)
}

// -------------------------------------------------------------------

// EncryptionInfo

// optional bytes encryption_key = 1;
inline bool EncryptionInfo::_internal_has_encryption_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EncryptionInfo::has_encryption_key() const {
  return _internal_has_encryption_key();
}
inline void EncryptionInfo::clear_encryption_key() {
  encryption_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EncryptionInfo::encryption_key() const {
  // @@protoc_insertion_point(field_get:reporting.EncryptionInfo.encryption_key)
  return _internal_encryption_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptionInfo::set_encryption_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 encryption_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:reporting.EncryptionInfo.encryption_key)
}
inline std::string* EncryptionInfo::mutable_encryption_key() {
  std::string* _s = _internal_mutable_encryption_key();
  // @@protoc_insertion_point(field_mutable:reporting.EncryptionInfo.encryption_key)
  return _s;
}
inline const std::string& EncryptionInfo::_internal_encryption_key() const {
  return encryption_key_.Get();
}
inline void EncryptionInfo::_internal_set_encryption_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encryption_key_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptionInfo::_internal_mutable_encryption_key() {
  _has_bits_[0] |= 0x00000001u;
  return encryption_key_.Mutable(GetArenaForAllocation());
}
inline std::string* EncryptionInfo::release_encryption_key() {
  // @@protoc_insertion_point(field_release:reporting.EncryptionInfo.encryption_key)
  if (!_internal_has_encryption_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = encryption_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encryption_key_.IsDefault()) {
    encryption_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EncryptionInfo::set_allocated_encryption_key(std::string* encryption_key) {
  if (encryption_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encryption_key_.SetAllocated(encryption_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encryption_key_.IsDefault()) {
    encryption_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:reporting.EncryptionInfo.encryption_key)
}

// optional int64 public_key_id = 2;
inline bool EncryptionInfo::_internal_has_public_key_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EncryptionInfo::has_public_key_id() const {
  return _internal_has_public_key_id();
}
inline void EncryptionInfo::clear_public_key_id() {
  public_key_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t EncryptionInfo::_internal_public_key_id() const {
  return public_key_id_;
}
inline int64_t EncryptionInfo::public_key_id() const {
  // @@protoc_insertion_point(field_get:reporting.EncryptionInfo.public_key_id)
  return _internal_public_key_id();
}
inline void EncryptionInfo::_internal_set_public_key_id(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  public_key_id_ = value;
}
inline void EncryptionInfo::set_public_key_id(int64_t value) {
  _internal_set_public_key_id(value);
  // @@protoc_insertion_point(field_set:reporting.EncryptionInfo.public_key_id)
}

// -------------------------------------------------------------------

// SequenceInformation

// optional int64 sequencing_id = 1;
inline bool SequenceInformation::_internal_has_sequencing_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SequenceInformation::has_sequencing_id() const {
  return _internal_has_sequencing_id();
}
inline void SequenceInformation::clear_sequencing_id() {
  sequencing_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t SequenceInformation::_internal_sequencing_id() const {
  return sequencing_id_;
}
inline int64_t SequenceInformation::sequencing_id() const {
  // @@protoc_insertion_point(field_get:reporting.SequenceInformation.sequencing_id)
  return _internal_sequencing_id();
}
inline void SequenceInformation::_internal_set_sequencing_id(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  sequencing_id_ = value;
}
inline void SequenceInformation::set_sequencing_id(int64_t value) {
  _internal_set_sequencing_id(value);
  // @@protoc_insertion_point(field_set:reporting.SequenceInformation.sequencing_id)
}

// optional int64 generation_id = 2;
inline bool SequenceInformation::_internal_has_generation_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SequenceInformation::has_generation_id() const {
  return _internal_has_generation_id();
}
inline void SequenceInformation::clear_generation_id() {
  generation_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t SequenceInformation::_internal_generation_id() const {
  return generation_id_;
}
inline int64_t SequenceInformation::generation_id() const {
  // @@protoc_insertion_point(field_get:reporting.SequenceInformation.generation_id)
  return _internal_generation_id();
}
inline void SequenceInformation::_internal_set_generation_id(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  generation_id_ = value;
}
inline void SequenceInformation::set_generation_id(int64_t value) {
  _internal_set_generation_id(value);
  // @@protoc_insertion_point(field_set:reporting.SequenceInformation.generation_id)
}

// optional .reporting.Priority priority = 3;
inline bool SequenceInformation::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SequenceInformation::has_priority() const {
  return _internal_has_priority();
}
inline void SequenceInformation::clear_priority() {
  priority_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::reporting::Priority SequenceInformation::_internal_priority() const {
  return static_cast< ::reporting::Priority >(priority_);
}
inline ::reporting::Priority SequenceInformation::priority() const {
  // @@protoc_insertion_point(field_get:reporting.SequenceInformation.priority)
  return _internal_priority();
}
inline void SequenceInformation::_internal_set_priority(::reporting::Priority value) {
  assert(::reporting::Priority_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  priority_ = value;
}
inline void SequenceInformation::set_priority(::reporting::Priority value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:reporting.SequenceInformation.priority)
}

// -------------------------------------------------------------------

// EncryptedRecord

// optional bytes encrypted_wrapped_record = 1;
inline bool EncryptedRecord::_internal_has_encrypted_wrapped_record() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EncryptedRecord::has_encrypted_wrapped_record() const {
  return _internal_has_encrypted_wrapped_record();
}
inline void EncryptedRecord::clear_encrypted_wrapped_record() {
  encrypted_wrapped_record_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EncryptedRecord::encrypted_wrapped_record() const {
  // @@protoc_insertion_point(field_get:reporting.EncryptedRecord.encrypted_wrapped_record)
  return _internal_encrypted_wrapped_record();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptedRecord::set_encrypted_wrapped_record(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 encrypted_wrapped_record_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:reporting.EncryptedRecord.encrypted_wrapped_record)
}
inline std::string* EncryptedRecord::mutable_encrypted_wrapped_record() {
  std::string* _s = _internal_mutable_encrypted_wrapped_record();
  // @@protoc_insertion_point(field_mutable:reporting.EncryptedRecord.encrypted_wrapped_record)
  return _s;
}
inline const std::string& EncryptedRecord::_internal_encrypted_wrapped_record() const {
  return encrypted_wrapped_record_.Get();
}
inline void EncryptedRecord::_internal_set_encrypted_wrapped_record(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_wrapped_record_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptedRecord::_internal_mutable_encrypted_wrapped_record() {
  _has_bits_[0] |= 0x00000001u;
  return encrypted_wrapped_record_.Mutable(GetArenaForAllocation());
}
inline std::string* EncryptedRecord::release_encrypted_wrapped_record() {
  // @@protoc_insertion_point(field_release:reporting.EncryptedRecord.encrypted_wrapped_record)
  if (!_internal_has_encrypted_wrapped_record()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = encrypted_wrapped_record_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encrypted_wrapped_record_.IsDefault()) {
    encrypted_wrapped_record_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EncryptedRecord::set_allocated_encrypted_wrapped_record(std::string* encrypted_wrapped_record) {
  if (encrypted_wrapped_record != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encrypted_wrapped_record_.SetAllocated(encrypted_wrapped_record, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encrypted_wrapped_record_.IsDefault()) {
    encrypted_wrapped_record_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:reporting.EncryptedRecord.encrypted_wrapped_record)
}

// optional .reporting.EncryptionInfo encryption_info = 2;
inline bool EncryptedRecord::_internal_has_encryption_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || encryption_info_ != nullptr);
  return value;
}
inline bool EncryptedRecord::has_encryption_info() const {
  return _internal_has_encryption_info();
}
inline void EncryptedRecord::clear_encryption_info() {
  if (encryption_info_ != nullptr) encryption_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::reporting::EncryptionInfo& EncryptedRecord::_internal_encryption_info() const {
  const ::reporting::EncryptionInfo* p = encryption_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::reporting::EncryptionInfo&>(
      ::reporting::_EncryptionInfo_default_instance_);
}
inline const ::reporting::EncryptionInfo& EncryptedRecord::encryption_info() const {
  // @@protoc_insertion_point(field_get:reporting.EncryptedRecord.encryption_info)
  return _internal_encryption_info();
}
inline void EncryptedRecord::unsafe_arena_set_allocated_encryption_info(
    ::reporting::EncryptionInfo* encryption_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encryption_info_);
  }
  encryption_info_ = encryption_info;
  if (encryption_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reporting.EncryptedRecord.encryption_info)
}
inline ::reporting::EncryptionInfo* EncryptedRecord::release_encryption_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::reporting::EncryptionInfo* temp = encryption_info_;
  encryption_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::reporting::EncryptionInfo* EncryptedRecord::unsafe_arena_release_encryption_info() {
  // @@protoc_insertion_point(field_release:reporting.EncryptedRecord.encryption_info)
  _has_bits_[0] &= ~0x00000002u;
  ::reporting::EncryptionInfo* temp = encryption_info_;
  encryption_info_ = nullptr;
  return temp;
}
inline ::reporting::EncryptionInfo* EncryptedRecord::_internal_mutable_encryption_info() {
  _has_bits_[0] |= 0x00000002u;
  if (encryption_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::reporting::EncryptionInfo>(GetArenaForAllocation());
    encryption_info_ = p;
  }
  return encryption_info_;
}
inline ::reporting::EncryptionInfo* EncryptedRecord::mutable_encryption_info() {
  ::reporting::EncryptionInfo* _msg = _internal_mutable_encryption_info();
  // @@protoc_insertion_point(field_mutable:reporting.EncryptedRecord.encryption_info)
  return _msg;
}
inline void EncryptedRecord::set_allocated_encryption_info(::reporting::EncryptionInfo* encryption_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete encryption_info_;
  }
  if (encryption_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(encryption_info);
    if (message_arena != submessage_arena) {
      encryption_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encryption_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  encryption_info_ = encryption_info;
  // @@protoc_insertion_point(field_set_allocated:reporting.EncryptedRecord.encryption_info)
}

// optional .reporting.SequenceInformation sequence_information = 3;
inline bool EncryptedRecord::_internal_has_sequence_information() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || sequence_information_ != nullptr);
  return value;
}
inline bool EncryptedRecord::has_sequence_information() const {
  return _internal_has_sequence_information();
}
inline void EncryptedRecord::clear_sequence_information() {
  if (sequence_information_ != nullptr) sequence_information_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::reporting::SequenceInformation& EncryptedRecord::_internal_sequence_information() const {
  const ::reporting::SequenceInformation* p = sequence_information_;
  return p != nullptr ? *p : reinterpret_cast<const ::reporting::SequenceInformation&>(
      ::reporting::_SequenceInformation_default_instance_);
}
inline const ::reporting::SequenceInformation& EncryptedRecord::sequence_information() const {
  // @@protoc_insertion_point(field_get:reporting.EncryptedRecord.sequence_information)
  return _internal_sequence_information();
}
inline void EncryptedRecord::unsafe_arena_set_allocated_sequence_information(
    ::reporting::SequenceInformation* sequence_information) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sequence_information_);
  }
  sequence_information_ = sequence_information;
  if (sequence_information) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reporting.EncryptedRecord.sequence_information)
}
inline ::reporting::SequenceInformation* EncryptedRecord::release_sequence_information() {
  _has_bits_[0] &= ~0x00000004u;
  ::reporting::SequenceInformation* temp = sequence_information_;
  sequence_information_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::reporting::SequenceInformation* EncryptedRecord::unsafe_arena_release_sequence_information() {
  // @@protoc_insertion_point(field_release:reporting.EncryptedRecord.sequence_information)
  _has_bits_[0] &= ~0x00000004u;
  ::reporting::SequenceInformation* temp = sequence_information_;
  sequence_information_ = nullptr;
  return temp;
}
inline ::reporting::SequenceInformation* EncryptedRecord::_internal_mutable_sequence_information() {
  _has_bits_[0] |= 0x00000004u;
  if (sequence_information_ == nullptr) {
    auto* p = CreateMaybeMessage<::reporting::SequenceInformation>(GetArenaForAllocation());
    sequence_information_ = p;
  }
  return sequence_information_;
}
inline ::reporting::SequenceInformation* EncryptedRecord::mutable_sequence_information() {
  ::reporting::SequenceInformation* _msg = _internal_mutable_sequence_information();
  // @@protoc_insertion_point(field_mutable:reporting.EncryptedRecord.sequence_information)
  return _msg;
}
inline void EncryptedRecord::set_allocated_sequence_information(::reporting::SequenceInformation* sequence_information) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sequence_information_;
  }
  if (sequence_information) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sequence_information);
    if (message_arena != submessage_arena) {
      sequence_information = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sequence_information, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sequence_information_ = sequence_information;
  // @@protoc_insertion_point(field_set_allocated:reporting.EncryptedRecord.sequence_information)
}

// optional .reporting.CompressionInformation compression_information = 4;
inline bool EncryptedRecord::_internal_has_compression_information() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || compression_information_ != nullptr);
  return value;
}
inline bool EncryptedRecord::has_compression_information() const {
  return _internal_has_compression_information();
}
inline void EncryptedRecord::clear_compression_information() {
  if (compression_information_ != nullptr) compression_information_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::reporting::CompressionInformation& EncryptedRecord::_internal_compression_information() const {
  const ::reporting::CompressionInformation* p = compression_information_;
  return p != nullptr ? *p : reinterpret_cast<const ::reporting::CompressionInformation&>(
      ::reporting::_CompressionInformation_default_instance_);
}
inline const ::reporting::CompressionInformation& EncryptedRecord::compression_information() const {
  // @@protoc_insertion_point(field_get:reporting.EncryptedRecord.compression_information)
  return _internal_compression_information();
}
inline void EncryptedRecord::unsafe_arena_set_allocated_compression_information(
    ::reporting::CompressionInformation* compression_information) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compression_information_);
  }
  compression_information_ = compression_information;
  if (compression_information) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reporting.EncryptedRecord.compression_information)
}
inline ::reporting::CompressionInformation* EncryptedRecord::release_compression_information() {
  _has_bits_[0] &= ~0x00000008u;
  ::reporting::CompressionInformation* temp = compression_information_;
  compression_information_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::reporting::CompressionInformation* EncryptedRecord::unsafe_arena_release_compression_information() {
  // @@protoc_insertion_point(field_release:reporting.EncryptedRecord.compression_information)
  _has_bits_[0] &= ~0x00000008u;
  ::reporting::CompressionInformation* temp = compression_information_;
  compression_information_ = nullptr;
  return temp;
}
inline ::reporting::CompressionInformation* EncryptedRecord::_internal_mutable_compression_information() {
  _has_bits_[0] |= 0x00000008u;
  if (compression_information_ == nullptr) {
    auto* p = CreateMaybeMessage<::reporting::CompressionInformation>(GetArenaForAllocation());
    compression_information_ = p;
  }
  return compression_information_;
}
inline ::reporting::CompressionInformation* EncryptedRecord::mutable_compression_information() {
  ::reporting::CompressionInformation* _msg = _internal_mutable_compression_information();
  // @@protoc_insertion_point(field_mutable:reporting.EncryptedRecord.compression_information)
  return _msg;
}
inline void EncryptedRecord::set_allocated_compression_information(::reporting::CompressionInformation* compression_information) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete compression_information_;
  }
  if (compression_information) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(compression_information);
    if (message_arena != submessage_arena) {
      compression_information = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compression_information, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  compression_information_ = compression_information;
  // @@protoc_insertion_point(field_set_allocated:reporting.EncryptedRecord.compression_information)
}

// optional .reporting.SequenceInformation sequencing_information = 5 [deprecated = true];
inline bool EncryptedRecord::_internal_has_sequencing_information() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || sequencing_information_ != nullptr);
  return value;
}
inline bool EncryptedRecord::has_sequencing_information() const {
  return _internal_has_sequencing_information();
}
inline void EncryptedRecord::clear_sequencing_information() {
  if (sequencing_information_ != nullptr) sequencing_information_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::reporting::SequenceInformation& EncryptedRecord::_internal_sequencing_information() const {
  const ::reporting::SequenceInformation* p = sequencing_information_;
  return p != nullptr ? *p : reinterpret_cast<const ::reporting::SequenceInformation&>(
      ::reporting::_SequenceInformation_default_instance_);
}
inline const ::reporting::SequenceInformation& EncryptedRecord::sequencing_information() const {
  // @@protoc_insertion_point(field_get:reporting.EncryptedRecord.sequencing_information)
  return _internal_sequencing_information();
}
inline void EncryptedRecord::unsafe_arena_set_allocated_sequencing_information(
    ::reporting::SequenceInformation* sequencing_information) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sequencing_information_);
  }
  sequencing_information_ = sequencing_information;
  if (sequencing_information) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reporting.EncryptedRecord.sequencing_information)
}
inline ::reporting::SequenceInformation* EncryptedRecord::release_sequencing_information() {
  _has_bits_[0] &= ~0x00000010u;
  ::reporting::SequenceInformation* temp = sequencing_information_;
  sequencing_information_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::reporting::SequenceInformation* EncryptedRecord::unsafe_arena_release_sequencing_information() {
  // @@protoc_insertion_point(field_release:reporting.EncryptedRecord.sequencing_information)
  _has_bits_[0] &= ~0x00000010u;
  ::reporting::SequenceInformation* temp = sequencing_information_;
  sequencing_information_ = nullptr;
  return temp;
}
inline ::reporting::SequenceInformation* EncryptedRecord::_internal_mutable_sequencing_information() {
  _has_bits_[0] |= 0x00000010u;
  if (sequencing_information_ == nullptr) {
    auto* p = CreateMaybeMessage<::reporting::SequenceInformation>(GetArenaForAllocation());
    sequencing_information_ = p;
  }
  return sequencing_information_;
}
inline ::reporting::SequenceInformation* EncryptedRecord::mutable_sequencing_information() {
  ::reporting::SequenceInformation* _msg = _internal_mutable_sequencing_information();
  // @@protoc_insertion_point(field_mutable:reporting.EncryptedRecord.sequencing_information)
  return _msg;
}
inline void EncryptedRecord::set_allocated_sequencing_information(::reporting::SequenceInformation* sequencing_information) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sequencing_information_;
  }
  if (sequencing_information) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sequencing_information);
    if (message_arena != submessage_arena) {
      sequencing_information = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sequencing_information, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  sequencing_information_ = sequencing_information;
  // @@protoc_insertion_point(field_set_allocated:reporting.EncryptedRecord.sequencing_information)
}

// optional .reporting.ERPHealthData erp_health_data = 6;
inline bool EncryptedRecord::_internal_has_erp_health_data() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || erp_health_data_ != nullptr);
  return value;
}
inline bool EncryptedRecord::has_erp_health_data() const {
  return _internal_has_erp_health_data();
}
inline const ::reporting::ERPHealthData& EncryptedRecord::_internal_erp_health_data() const {
  const ::reporting::ERPHealthData* p = erp_health_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::reporting::ERPHealthData&>(
      ::reporting::_ERPHealthData_default_instance_);
}
inline const ::reporting::ERPHealthData& EncryptedRecord::erp_health_data() const {
  // @@protoc_insertion_point(field_get:reporting.EncryptedRecord.erp_health_data)
  return _internal_erp_health_data();
}
inline void EncryptedRecord::unsafe_arena_set_allocated_erp_health_data(
    ::reporting::ERPHealthData* erp_health_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(erp_health_data_);
  }
  erp_health_data_ = erp_health_data;
  if (erp_health_data) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:reporting.EncryptedRecord.erp_health_data)
}
inline ::reporting::ERPHealthData* EncryptedRecord::release_erp_health_data() {
  _has_bits_[0] &= ~0x00000020u;
  ::reporting::ERPHealthData* temp = erp_health_data_;
  erp_health_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::reporting::ERPHealthData* EncryptedRecord::unsafe_arena_release_erp_health_data() {
  // @@protoc_insertion_point(field_release:reporting.EncryptedRecord.erp_health_data)
  _has_bits_[0] &= ~0x00000020u;
  ::reporting::ERPHealthData* temp = erp_health_data_;
  erp_health_data_ = nullptr;
  return temp;
}
inline ::reporting::ERPHealthData* EncryptedRecord::_internal_mutable_erp_health_data() {
  _has_bits_[0] |= 0x00000020u;
  if (erp_health_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::reporting::ERPHealthData>(GetArenaForAllocation());
    erp_health_data_ = p;
  }
  return erp_health_data_;
}
inline ::reporting::ERPHealthData* EncryptedRecord::mutable_erp_health_data() {
  ::reporting::ERPHealthData* _msg = _internal_mutable_erp_health_data();
  // @@protoc_insertion_point(field_mutable:reporting.EncryptedRecord.erp_health_data)
  return _msg;
}
inline void EncryptedRecord::set_allocated_erp_health_data(::reporting::ERPHealthData* erp_health_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(erp_health_data_);
  }
  if (erp_health_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(erp_health_data));
    if (message_arena != submessage_arena) {
      erp_health_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, erp_health_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  erp_health_data_ = erp_health_data;
  // @@protoc_insertion_point(field_set_allocated:reporting.EncryptedRecord.erp_health_data)
}

// -------------------------------------------------------------------

// CompressionInformation

// optional .reporting.CompressionInformation.CompressionAlgorithm compression_algorithm = 1;
inline bool CompressionInformation::_internal_has_compression_algorithm() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CompressionInformation::has_compression_algorithm() const {
  return _internal_has_compression_algorithm();
}
inline void CompressionInformation::clear_compression_algorithm() {
  compression_algorithm_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::reporting::CompressionInformation_CompressionAlgorithm CompressionInformation::_internal_compression_algorithm() const {
  return static_cast< ::reporting::CompressionInformation_CompressionAlgorithm >(compression_algorithm_);
}
inline ::reporting::CompressionInformation_CompressionAlgorithm CompressionInformation::compression_algorithm() const {
  // @@protoc_insertion_point(field_get:reporting.CompressionInformation.compression_algorithm)
  return _internal_compression_algorithm();
}
inline void CompressionInformation::_internal_set_compression_algorithm(::reporting::CompressionInformation_CompressionAlgorithm value) {
  assert(::reporting::CompressionInformation_CompressionAlgorithm_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  compression_algorithm_ = value;
}
inline void CompressionInformation::set_compression_algorithm(::reporting::CompressionInformation_CompressionAlgorithm value) {
  _internal_set_compression_algorithm(value);
  // @@protoc_insertion_point(field_set:reporting.CompressionInformation.compression_algorithm)
}

// -------------------------------------------------------------------

// SignedEncryptionInfo

// optional bytes public_asymmetric_key = 1;
inline bool SignedEncryptionInfo::_internal_has_public_asymmetric_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SignedEncryptionInfo::has_public_asymmetric_key() const {
  return _internal_has_public_asymmetric_key();
}
inline void SignedEncryptionInfo::clear_public_asymmetric_key() {
  public_asymmetric_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SignedEncryptionInfo::public_asymmetric_key() const {
  // @@protoc_insertion_point(field_get:reporting.SignedEncryptionInfo.public_asymmetric_key)
  return _internal_public_asymmetric_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignedEncryptionInfo::set_public_asymmetric_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 public_asymmetric_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:reporting.SignedEncryptionInfo.public_asymmetric_key)
}
inline std::string* SignedEncryptionInfo::mutable_public_asymmetric_key() {
  std::string* _s = _internal_mutable_public_asymmetric_key();
  // @@protoc_insertion_point(field_mutable:reporting.SignedEncryptionInfo.public_asymmetric_key)
  return _s;
}
inline const std::string& SignedEncryptionInfo::_internal_public_asymmetric_key() const {
  return public_asymmetric_key_.Get();
}
inline void SignedEncryptionInfo::_internal_set_public_asymmetric_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  public_asymmetric_key_.Set(value, GetArenaForAllocation());
}
inline std::string* SignedEncryptionInfo::_internal_mutable_public_asymmetric_key() {
  _has_bits_[0] |= 0x00000001u;
  return public_asymmetric_key_.Mutable(GetArenaForAllocation());
}
inline std::string* SignedEncryptionInfo::release_public_asymmetric_key() {
  // @@protoc_insertion_point(field_release:reporting.SignedEncryptionInfo.public_asymmetric_key)
  if (!_internal_has_public_asymmetric_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = public_asymmetric_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_asymmetric_key_.IsDefault()) {
    public_asymmetric_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SignedEncryptionInfo::set_allocated_public_asymmetric_key(std::string* public_asymmetric_key) {
  if (public_asymmetric_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  public_asymmetric_key_.SetAllocated(public_asymmetric_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_asymmetric_key_.IsDefault()) {
    public_asymmetric_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:reporting.SignedEncryptionInfo.public_asymmetric_key)
}

// optional int32 public_key_id = 2;
inline bool SignedEncryptionInfo::_internal_has_public_key_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SignedEncryptionInfo::has_public_key_id() const {
  return _internal_has_public_key_id();
}
inline void SignedEncryptionInfo::clear_public_key_id() {
  public_key_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t SignedEncryptionInfo::_internal_public_key_id() const {
  return public_key_id_;
}
inline int32_t SignedEncryptionInfo::public_key_id() const {
  // @@protoc_insertion_point(field_get:reporting.SignedEncryptionInfo.public_key_id)
  return _internal_public_key_id();
}
inline void SignedEncryptionInfo::_internal_set_public_key_id(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  public_key_id_ = value;
}
inline void SignedEncryptionInfo::set_public_key_id(int32_t value) {
  _internal_set_public_key_id(value);
  // @@protoc_insertion_point(field_set:reporting.SignedEncryptionInfo.public_key_id)
}

// optional bytes signature = 3;
inline bool SignedEncryptionInfo::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SignedEncryptionInfo::has_signature() const {
  return _internal_has_signature();
}
inline void SignedEncryptionInfo::clear_signature() {
  signature_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SignedEncryptionInfo::signature() const {
  // @@protoc_insertion_point(field_get:reporting.SignedEncryptionInfo.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignedEncryptionInfo::set_signature(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:reporting.SignedEncryptionInfo.signature)
}
inline std::string* SignedEncryptionInfo::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:reporting.SignedEncryptionInfo.signature)
  return _s;
}
inline const std::string& SignedEncryptionInfo::_internal_signature() const {
  return signature_.Get();
}
inline void SignedEncryptionInfo::_internal_set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  signature_.Set(value, GetArenaForAllocation());
}
inline std::string* SignedEncryptionInfo::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  return signature_.Mutable(GetArenaForAllocation());
}
inline std::string* SignedEncryptionInfo::release_signature() {
  // @@protoc_insertion_point(field_release:reporting.SignedEncryptionInfo.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = signature_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault()) {
    signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SignedEncryptionInfo::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault()) {
    signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:reporting.SignedEncryptionInfo.signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace reporting

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::reporting::CompressionInformation_CompressionAlgorithm> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2freporting_2fproto_2fsynced_2frecord_2eproto
