// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/reporting/proto/synced/record_constants.proto

#include "components/reporting/proto/synced/record_constants.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace reporting {
}  // namespace reporting
namespace reporting {
bool Destination_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Destination_strings[21] = {};

static const char Destination_names[] =
  "ADDED_REMOVED_EVENTS"
  "ARC_INSTALL"
  "CRD_EVENTS"
  "DLP_EVENTS"
  "EVENT_METRIC"
  "EXTENSIONS_WORKFLOW"
  "EXTENSION_INSTALL"
  "HEARTBEAT_EVENTS"
  "INFO_METRIC"
  "LOCK_UNLOCK_EVENTS"
  "LOGIN_LOGOUT_EVENTS"
  "MEET_DEVICE_TELEMETRY"
  "PERIPHERAL_EVENTS"
  "POLICY_VALIDATION"
  "PRINT_JOBS"
  "REPORTING_RECORD"
  "SUSPICIOUS_EVENTS"
  "TELEMETRY_METRIC"
  "UNDEFINED_DESTINATION"
  "UPLOAD_EVENTS"
  "WEB_PROTECT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Destination_entries[] = {
  { {Destination_names + 0, 20}, 17 },
  { {Destination_names + 20, 11}, 4 },
  { {Destination_names + 31, 10}, 18 },
  { {Destination_names + 41, 10}, 11 },
  { {Destination_names + 51, 12}, 16 },
  { {Destination_names + 63, 19}, 10 },
  { {Destination_names + 82, 17}, 6 },
  { {Destination_names + 99, 16}, 13 },
  { {Destination_names + 115, 11}, 14 },
  { {Destination_names + 126, 18}, 21 },
  { {Destination_names + 144, 19}, 12 },
  { {Destination_names + 163, 21}, 2 },
  { {Destination_names + 184, 17}, 19 },
  { {Destination_names + 201, 17}, 5 },
  { {Destination_names + 218, 10}, 9 },
  { {Destination_names + 228, 16}, 7 },
  { {Destination_names + 244, 17}, 20 },
  { {Destination_names + 261, 16}, 15 },
  { {Destination_names + 277, 21}, 0 },
  { {Destination_names + 298, 13}, 1 },
  { {Destination_names + 311, 11}, 3 },
};

static const int Destination_entries_by_number[] = {
  18, // 0 -> UNDEFINED_DESTINATION
  19, // 1 -> UPLOAD_EVENTS
  11, // 2 -> MEET_DEVICE_TELEMETRY
  20, // 3 -> WEB_PROTECT
  1, // 4 -> ARC_INSTALL
  13, // 5 -> POLICY_VALIDATION
  6, // 6 -> EXTENSION_INSTALL
  15, // 7 -> REPORTING_RECORD
  14, // 9 -> PRINT_JOBS
  5, // 10 -> EXTENSIONS_WORKFLOW
  3, // 11 -> DLP_EVENTS
  10, // 12 -> LOGIN_LOGOUT_EVENTS
  7, // 13 -> HEARTBEAT_EVENTS
  8, // 14 -> INFO_METRIC
  17, // 15 -> TELEMETRY_METRIC
  4, // 16 -> EVENT_METRIC
  0, // 17 -> ADDED_REMOVED_EVENTS
  2, // 18 -> CRD_EVENTS
  12, // 19 -> PERIPHERAL_EVENTS
  16, // 20 -> SUSPICIOUS_EVENTS
  9, // 21 -> LOCK_UNLOCK_EVENTS
};

const std::string& Destination_Name(
    Destination value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Destination_entries,
          Destination_entries_by_number,
          21, Destination_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Destination_entries,
      Destination_entries_by_number,
      21, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Destination_strings[idx].get();
}
bool Destination_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Destination* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Destination_entries, 21, name, &int_value);
  if (success) {
    *value = static_cast<Destination>(int_value);
  }
  return success;
}
bool Priority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Priority_strings[7] = {};

static const char Priority_names[] =
  "BACKGROUND_BATCH"
  "FAST_BATCH"
  "IMMEDIATE"
  "MANUAL_BATCH"
  "SECURITY"
  "SLOW_BATCH"
  "UNDEFINED_PRIORITY";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Priority_entries[] = {
  { {Priority_names + 0, 16}, 4 },
  { {Priority_names + 16, 10}, 2 },
  { {Priority_names + 26, 9}, 1 },
  { {Priority_names + 35, 12}, 5 },
  { {Priority_names + 47, 8}, 6 },
  { {Priority_names + 55, 10}, 3 },
  { {Priority_names + 65, 18}, 0 },
};

static const int Priority_entries_by_number[] = {
  6, // 0 -> UNDEFINED_PRIORITY
  2, // 1 -> IMMEDIATE
  1, // 2 -> FAST_BATCH
  5, // 3 -> SLOW_BATCH
  0, // 4 -> BACKGROUND_BATCH
  3, // 5 -> MANUAL_BATCH
  4, // 6 -> SECURITY
};

const std::string& Priority_Name(
    Priority value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Priority_entries,
          Priority_entries_by_number,
          7, Priority_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Priority_entries,
      Priority_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Priority_strings[idx].get();
}
bool Priority_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Priority* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Priority_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<Priority>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace reporting
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
