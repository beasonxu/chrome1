// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webapk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_webapk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_webapk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_webapk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_webapk_2eproto {
  static const uint32_t offsets[];
};
namespace webapk {
class Image;
struct ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class ShareTarget;
struct ShareTargetDefaultTypeInternal;
extern ShareTargetDefaultTypeInternal _ShareTarget_default_instance_;
class ShareTargetParams;
struct ShareTargetParamsDefaultTypeInternal;
extern ShareTargetParamsDefaultTypeInternal _ShareTargetParams_default_instance_;
class ShareTargetParamsFile;
struct ShareTargetParamsFileDefaultTypeInternal;
extern ShareTargetParamsFileDefaultTypeInternal _ShareTargetParamsFile_default_instance_;
class ShortcutItem;
struct ShortcutItemDefaultTypeInternal;
extern ShortcutItemDefaultTypeInternal _ShortcutItem_default_instance_;
class WebApk;
struct WebApkDefaultTypeInternal;
extern WebApkDefaultTypeInternal _WebApk_default_instance_;
class WebApkResponse;
struct WebApkResponseDefaultTypeInternal;
extern WebApkResponseDefaultTypeInternal _WebApkResponse_default_instance_;
class WebAppManifest;
struct WebAppManifestDefaultTypeInternal;
extern WebAppManifestDefaultTypeInternal _WebAppManifest_default_instance_;
}  // namespace webapk
PROTOBUF_NAMESPACE_OPEN
template<> ::webapk::Image* Arena::CreateMaybeMessage<::webapk::Image>(Arena*);
template<> ::webapk::ShareTarget* Arena::CreateMaybeMessage<::webapk::ShareTarget>(Arena*);
template<> ::webapk::ShareTargetParams* Arena::CreateMaybeMessage<::webapk::ShareTargetParams>(Arena*);
template<> ::webapk::ShareTargetParamsFile* Arena::CreateMaybeMessage<::webapk::ShareTargetParamsFile>(Arena*);
template<> ::webapk::ShortcutItem* Arena::CreateMaybeMessage<::webapk::ShortcutItem>(Arena*);
template<> ::webapk::WebApk* Arena::CreateMaybeMessage<::webapk::WebApk>(Arena*);
template<> ::webapk::WebApkResponse* Arena::CreateMaybeMessage<::webapk::WebApkResponse>(Arena*);
template<> ::webapk::WebAppManifest* Arena::CreateMaybeMessage<::webapk::WebAppManifest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace webapk {

enum WebApk_UpdateReason : int {
  WebApk_UpdateReason_NONE = 1,
  WebApk_UpdateReason_OLD_SHELL_APK = 2,
  WebApk_UpdateReason_PRIMARY_ICON_HASH_DIFFERS = 3,
  WebApk_UpdateReason_SCOPE_DIFFERS = 5,
  WebApk_UpdateReason_START_URL_DIFFERS = 6,
  WebApk_UpdateReason_SHORT_NAME_DIFFERS = 7,
  WebApk_UpdateReason_NAME_DIFFERS = 8,
  WebApk_UpdateReason_BACKGROUND_COLOR_DIFFERS = 9,
  WebApk_UpdateReason_THEME_COLOR_DIFFERS = 10,
  WebApk_UpdateReason_ORIENTATION_DIFFERS = 11,
  WebApk_UpdateReason_DISPLAY_MODE_DIFFERS = 12,
  WebApk_UpdateReason_WEB_SHARE_TARGET_DIFFERS = 13,
  WebApk_UpdateReason_MANUALLY_TRIGGERED = 14,
  WebApk_UpdateReason_PRIMARY_ICON_MASKABLE_DIFFERS = 15,
  WebApk_UpdateReason_SHORTCUTS_DIFFER = 16,
  WebApk_UpdateReason_SPLASH_ICON_HASH_DIFFERS = 17
};
bool WebApk_UpdateReason_IsValid(int value);
constexpr WebApk_UpdateReason WebApk_UpdateReason_UpdateReason_MIN = WebApk_UpdateReason_NONE;
constexpr WebApk_UpdateReason WebApk_UpdateReason_UpdateReason_MAX = WebApk_UpdateReason_SPLASH_ICON_HASH_DIFFERS;
constexpr int WebApk_UpdateReason_UpdateReason_ARRAYSIZE = WebApk_UpdateReason_UpdateReason_MAX + 1;

const std::string& WebApk_UpdateReason_Name(WebApk_UpdateReason value);
template<typename T>
inline const std::string& WebApk_UpdateReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WebApk_UpdateReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WebApk_UpdateReason_Name.");
  return WebApk_UpdateReason_Name(static_cast<WebApk_UpdateReason>(enum_t_value));
}
bool WebApk_UpdateReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WebApk_UpdateReason* value);
enum Image_Usage : int {
  Image_Usage_PRIMARY_ICON = 1,
  Image_Usage_BADGE_ICON = 2,
  Image_Usage_SPLASH_ICON = 3
};
bool Image_Usage_IsValid(int value);
constexpr Image_Usage Image_Usage_Usage_MIN = Image_Usage_PRIMARY_ICON;
constexpr Image_Usage Image_Usage_Usage_MAX = Image_Usage_SPLASH_ICON;
constexpr int Image_Usage_Usage_ARRAYSIZE = Image_Usage_Usage_MAX + 1;

const std::string& Image_Usage_Name(Image_Usage value);
template<typename T>
inline const std::string& Image_Usage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Image_Usage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Image_Usage_Name.");
  return Image_Usage_Name(static_cast<Image_Usage>(enum_t_value));
}
bool Image_Usage_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Image_Usage* value);
enum Image_Purpose : int {
  Image_Purpose_PURPOSE_UNDEFINED = 0,
  Image_Purpose_ANY = 1,
  Image_Purpose_MASKABLE = 3
};
bool Image_Purpose_IsValid(int value);
constexpr Image_Purpose Image_Purpose_Purpose_MIN = Image_Purpose_PURPOSE_UNDEFINED;
constexpr Image_Purpose Image_Purpose_Purpose_MAX = Image_Purpose_MASKABLE;
constexpr int Image_Purpose_Purpose_ARRAYSIZE = Image_Purpose_Purpose_MAX + 1;

const std::string& Image_Purpose_Name(Image_Purpose value);
template<typename T>
inline const std::string& Image_Purpose_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Image_Purpose>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Image_Purpose_Name.");
  return Image_Purpose_Name(static_cast<Image_Purpose>(enum_t_value));
}
bool Image_Purpose_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Image_Purpose* value);
// ===================================================================

class WebApkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webapk.WebApkResponse) */ {
 public:
  inline WebApkResponse() : WebApkResponse(nullptr) {}
  ~WebApkResponse() override;
  explicit PROTOBUF_CONSTEXPR WebApkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WebApkResponse(const WebApkResponse& from);
  WebApkResponse(WebApkResponse&& from) noexcept
    : WebApkResponse() {
    *this = ::std::move(from);
  }

  inline WebApkResponse& operator=(const WebApkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebApkResponse& operator=(WebApkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WebApkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WebApkResponse* internal_default_instance() {
    return reinterpret_cast<const WebApkResponse*>(
               &_WebApkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WebApkResponse& a, WebApkResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WebApkResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebApkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WebApkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WebApkResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WebApkResponse& from);
  void MergeFrom(const WebApkResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebApkResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webapk.WebApkResponse";
  }
  protected:
  explicit WebApkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kTokenFieldNumber = 6,
    kRelaxUpdatesFieldNumber = 8,
  };
  // optional string package_name = 1;
  bool has_package_name() const;
  private:
  bool _internal_has_package_name() const;
  public:
  void clear_package_name();
  const std::string& package_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_package_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_package_name();
  PROTOBUF_NODISCARD std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);
  private:
  const std::string& _internal_package_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_package_name(const std::string& value);
  std::string* _internal_mutable_package_name();
  public:

  // optional string version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string token = 6;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // optional bool relax_updates = 8;
  bool has_relax_updates() const;
  private:
  bool _internal_has_relax_updates() const;
  public:
  void clear_relax_updates();
  bool relax_updates() const;
  void set_relax_updates(bool value);
  private:
  bool _internal_relax_updates() const;
  void _internal_set_relax_updates(bool value);
  public:

  // @@protoc_insertion_point(class_scope:webapk.WebApkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  bool relax_updates_;
  friend struct ::TableStruct_webapk_2eproto;
};
// -------------------------------------------------------------------

class WebApk final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webapk.WebApk) */ {
 public:
  inline WebApk() : WebApk(nullptr) {}
  ~WebApk() override;
  explicit PROTOBUF_CONSTEXPR WebApk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WebApk(const WebApk& from);
  WebApk(WebApk&& from) noexcept
    : WebApk() {
    *this = ::std::move(from);
  }

  inline WebApk& operator=(const WebApk& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebApk& operator=(WebApk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WebApk& default_instance() {
    return *internal_default_instance();
  }
  static inline const WebApk* internal_default_instance() {
    return reinterpret_cast<const WebApk*>(
               &_WebApk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WebApk& a, WebApk& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WebApk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebApk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WebApk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WebApk>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WebApk& from);
  void MergeFrom(const WebApk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebApk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webapk.WebApk";
  }
  protected:
  explicit WebApk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WebApk_UpdateReason UpdateReason;
  static constexpr UpdateReason NONE =
    WebApk_UpdateReason_NONE;
  static constexpr UpdateReason OLD_SHELL_APK =
    WebApk_UpdateReason_OLD_SHELL_APK;
  static constexpr UpdateReason PRIMARY_ICON_HASH_DIFFERS =
    WebApk_UpdateReason_PRIMARY_ICON_HASH_DIFFERS;
  static constexpr UpdateReason SCOPE_DIFFERS =
    WebApk_UpdateReason_SCOPE_DIFFERS;
  static constexpr UpdateReason START_URL_DIFFERS =
    WebApk_UpdateReason_START_URL_DIFFERS;
  static constexpr UpdateReason SHORT_NAME_DIFFERS =
    WebApk_UpdateReason_SHORT_NAME_DIFFERS;
  static constexpr UpdateReason NAME_DIFFERS =
    WebApk_UpdateReason_NAME_DIFFERS;
  static constexpr UpdateReason BACKGROUND_COLOR_DIFFERS =
    WebApk_UpdateReason_BACKGROUND_COLOR_DIFFERS;
  static constexpr UpdateReason THEME_COLOR_DIFFERS =
    WebApk_UpdateReason_THEME_COLOR_DIFFERS;
  static constexpr UpdateReason ORIENTATION_DIFFERS =
    WebApk_UpdateReason_ORIENTATION_DIFFERS;
  static constexpr UpdateReason DISPLAY_MODE_DIFFERS =
    WebApk_UpdateReason_DISPLAY_MODE_DIFFERS;
  static constexpr UpdateReason WEB_SHARE_TARGET_DIFFERS =
    WebApk_UpdateReason_WEB_SHARE_TARGET_DIFFERS;
  static constexpr UpdateReason MANUALLY_TRIGGERED =
    WebApk_UpdateReason_MANUALLY_TRIGGERED;
  static constexpr UpdateReason PRIMARY_ICON_MASKABLE_DIFFERS =
    WebApk_UpdateReason_PRIMARY_ICON_MASKABLE_DIFFERS;
  static constexpr UpdateReason SHORTCUTS_DIFFER =
    WebApk_UpdateReason_SHORTCUTS_DIFFER;
  static constexpr UpdateReason SPLASH_ICON_HASH_DIFFERS =
    WebApk_UpdateReason_SPLASH_ICON_HASH_DIFFERS;
  static inline bool UpdateReason_IsValid(int value) {
    return WebApk_UpdateReason_IsValid(value);
  }
  static constexpr UpdateReason UpdateReason_MIN =
    WebApk_UpdateReason_UpdateReason_MIN;
  static constexpr UpdateReason UpdateReason_MAX =
    WebApk_UpdateReason_UpdateReason_MAX;
  static constexpr int UpdateReason_ARRAYSIZE =
    WebApk_UpdateReason_UpdateReason_ARRAYSIZE;
  template<typename T>
  static inline const std::string& UpdateReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UpdateReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UpdateReason_Name.");
    return WebApk_UpdateReason_Name(enum_t_value);
  }
  static inline bool UpdateReason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UpdateReason* value) {
    return WebApk_UpdateReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateReasonsFieldNumber = 11,
    kPackageNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kManifestUrlFieldNumber = 3,
    kRequesterApplicationPackageFieldNumber = 5,
    kRequesterApplicationVersionFieldNumber = 6,
    kAndroidAbiFieldNumber = 8,
    kAndroidVersionFieldNumber = 12,
    kAppKeyFieldNumber = 14,
    kManifestFieldNumber = 7,
    kStaleManifestFieldNumber = 9,
    kAppIdentityUpdateSupportedFieldNumber = 13,
  };
  // repeated .webapk.WebApk.UpdateReason update_reasons = 11;
  int update_reasons_size() const;
  private:
  int _internal_update_reasons_size() const;
  public:
  void clear_update_reasons();
  private:
  ::webapk::WebApk_UpdateReason _internal_update_reasons(int index) const;
  void _internal_add_update_reasons(::webapk::WebApk_UpdateReason value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_update_reasons();
  public:
  ::webapk::WebApk_UpdateReason update_reasons(int index) const;
  void set_update_reasons(int index, ::webapk::WebApk_UpdateReason value);
  void add_update_reasons(::webapk::WebApk_UpdateReason value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& update_reasons() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_update_reasons();

  // optional string package_name = 1;
  bool has_package_name() const;
  private:
  bool _internal_has_package_name() const;
  public:
  void clear_package_name();
  const std::string& package_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_package_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_package_name();
  PROTOBUF_NODISCARD std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);
  private:
  const std::string& _internal_package_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_package_name(const std::string& value);
  std::string* _internal_mutable_package_name();
  public:

  // optional string version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string manifest_url = 3;
  bool has_manifest_url() const;
  private:
  bool _internal_has_manifest_url() const;
  public:
  void clear_manifest_url();
  const std::string& manifest_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_manifest_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_manifest_url();
  PROTOBUF_NODISCARD std::string* release_manifest_url();
  void set_allocated_manifest_url(std::string* manifest_url);
  private:
  const std::string& _internal_manifest_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_manifest_url(const std::string& value);
  std::string* _internal_mutable_manifest_url();
  public:

  // optional string requester_application_package = 5;
  bool has_requester_application_package() const;
  private:
  bool _internal_has_requester_application_package() const;
  public:
  void clear_requester_application_package();
  const std::string& requester_application_package() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requester_application_package(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requester_application_package();
  PROTOBUF_NODISCARD std::string* release_requester_application_package();
  void set_allocated_requester_application_package(std::string* requester_application_package);
  private:
  const std::string& _internal_requester_application_package() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requester_application_package(const std::string& value);
  std::string* _internal_mutable_requester_application_package();
  public:

  // optional string requester_application_version = 6;
  bool has_requester_application_version() const;
  private:
  bool _internal_has_requester_application_version() const;
  public:
  void clear_requester_application_version();
  const std::string& requester_application_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requester_application_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requester_application_version();
  PROTOBUF_NODISCARD std::string* release_requester_application_version();
  void set_allocated_requester_application_version(std::string* requester_application_version);
  private:
  const std::string& _internal_requester_application_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requester_application_version(const std::string& value);
  std::string* _internal_mutable_requester_application_version();
  public:

  // optional string android_abi = 8;
  bool has_android_abi() const;
  private:
  bool _internal_has_android_abi() const;
  public:
  void clear_android_abi();
  const std::string& android_abi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_android_abi(ArgT0&& arg0, ArgT... args);
  std::string* mutable_android_abi();
  PROTOBUF_NODISCARD std::string* release_android_abi();
  void set_allocated_android_abi(std::string* android_abi);
  private:
  const std::string& _internal_android_abi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_android_abi(const std::string& value);
  std::string* _internal_mutable_android_abi();
  public:

  // optional string android_version = 12;
  bool has_android_version() const;
  private:
  bool _internal_has_android_version() const;
  public:
  void clear_android_version();
  const std::string& android_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_android_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_android_version();
  PROTOBUF_NODISCARD std::string* release_android_version();
  void set_allocated_android_version(std::string* android_version);
  private:
  const std::string& _internal_android_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_android_version(const std::string& value);
  std::string* _internal_mutable_android_version();
  public:

  // optional string app_key = 14;
  bool has_app_key() const;
  private:
  bool _internal_has_app_key() const;
  public:
  void clear_app_key();
  const std::string& app_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_key();
  PROTOBUF_NODISCARD std::string* release_app_key();
  void set_allocated_app_key(std::string* app_key);
  private:
  const std::string& _internal_app_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_key(const std::string& value);
  std::string* _internal_mutable_app_key();
  public:

  // optional .webapk.WebAppManifest manifest = 7;
  bool has_manifest() const;
  private:
  bool _internal_has_manifest() const;
  public:
  void clear_manifest();
  const ::webapk::WebAppManifest& manifest() const;
  PROTOBUF_NODISCARD ::webapk::WebAppManifest* release_manifest();
  ::webapk::WebAppManifest* mutable_manifest();
  void set_allocated_manifest(::webapk::WebAppManifest* manifest);
  private:
  const ::webapk::WebAppManifest& _internal_manifest() const;
  ::webapk::WebAppManifest* _internal_mutable_manifest();
  public:
  void unsafe_arena_set_allocated_manifest(
      ::webapk::WebAppManifest* manifest);
  ::webapk::WebAppManifest* unsafe_arena_release_manifest();

  // optional bool stale_manifest = 9;
  bool has_stale_manifest() const;
  private:
  bool _internal_has_stale_manifest() const;
  public:
  void clear_stale_manifest();
  bool stale_manifest() const;
  void set_stale_manifest(bool value);
  private:
  bool _internal_stale_manifest() const;
  void _internal_set_stale_manifest(bool value);
  public:

  // optional bool app_identity_update_supported = 13;
  bool has_app_identity_update_supported() const;
  private:
  bool _internal_has_app_identity_update_supported() const;
  public:
  void clear_app_identity_update_supported();
  bool app_identity_update_supported() const;
  void set_app_identity_update_supported(bool value);
  private:
  bool _internal_app_identity_update_supported() const;
  void _internal_set_app_identity_update_supported(bool value);
  public:

  // @@protoc_insertion_point(class_scope:webapk.WebApk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> update_reasons_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manifest_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requester_application_package_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requester_application_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr android_abi_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr android_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_key_;
  ::webapk::WebAppManifest* manifest_;
  bool stale_manifest_;
  bool app_identity_update_supported_;
  friend struct ::TableStruct_webapk_2eproto;
};
// -------------------------------------------------------------------

class WebAppManifest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webapk.WebAppManifest) */ {
 public:
  inline WebAppManifest() : WebAppManifest(nullptr) {}
  ~WebAppManifest() override;
  explicit PROTOBUF_CONSTEXPR WebAppManifest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WebAppManifest(const WebAppManifest& from);
  WebAppManifest(WebAppManifest&& from) noexcept
    : WebAppManifest() {
    *this = ::std::move(from);
  }

  inline WebAppManifest& operator=(const WebAppManifest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebAppManifest& operator=(WebAppManifest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WebAppManifest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WebAppManifest* internal_default_instance() {
    return reinterpret_cast<const WebAppManifest*>(
               &_WebAppManifest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WebAppManifest& a, WebAppManifest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WebAppManifest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebAppManifest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WebAppManifest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WebAppManifest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WebAppManifest& from);
  void MergeFrom(const WebAppManifest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebAppManifest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webapk.WebAppManifest";
  }
  protected:
  explicit WebAppManifest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopesFieldNumber = 5,
    kIconsFieldNumber = 6,
    kShareTargetsFieldNumber = 17,
    kShortcutsFieldNumber = 18,
    kNameFieldNumber = 1,
    kShortNameFieldNumber = 2,
    kStartUrlFieldNumber = 4,
    kOrientationFieldNumber = 9,
    kDisplayModeFieldNumber = 10,
    kThemeColorFieldNumber = 11,
    kBackgroundColorFieldNumber = 12,
    kIdFieldNumber = 19,
  };
  // repeated string scopes = 5;
  int scopes_size() const;
  private:
  int _internal_scopes_size() const;
  public:
  void clear_scopes();
  const std::string& scopes(int index) const;
  std::string* mutable_scopes(int index);
  void set_scopes(int index, const std::string& value);
  void set_scopes(int index, std::string&& value);
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, size_t size);
  std::string* add_scopes();
  void add_scopes(const std::string& value);
  void add_scopes(std::string&& value);
  void add_scopes(const char* value);
  void add_scopes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scopes();
  private:
  const std::string& _internal_scopes(int index) const;
  std::string* _internal_add_scopes();
  public:

  // repeated .webapk.Image icons = 6;
  int icons_size() const;
  private:
  int _internal_icons_size() const;
  public:
  void clear_icons();
  ::webapk::Image* mutable_icons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::Image >*
      mutable_icons();
  private:
  const ::webapk::Image& _internal_icons(int index) const;
  ::webapk::Image* _internal_add_icons();
  public:
  const ::webapk::Image& icons(int index) const;
  ::webapk::Image* add_icons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::Image >&
      icons() const;

  // repeated .webapk.ShareTarget share_targets = 17;
  int share_targets_size() const;
  private:
  int _internal_share_targets_size() const;
  public:
  void clear_share_targets();
  ::webapk::ShareTarget* mutable_share_targets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::ShareTarget >*
      mutable_share_targets();
  private:
  const ::webapk::ShareTarget& _internal_share_targets(int index) const;
  ::webapk::ShareTarget* _internal_add_share_targets();
  public:
  const ::webapk::ShareTarget& share_targets(int index) const;
  ::webapk::ShareTarget* add_share_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::ShareTarget >&
      share_targets() const;

  // repeated .webapk.ShortcutItem shortcuts = 18;
  int shortcuts_size() const;
  private:
  int _internal_shortcuts_size() const;
  public:
  void clear_shortcuts();
  ::webapk::ShortcutItem* mutable_shortcuts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::ShortcutItem >*
      mutable_shortcuts();
  private:
  const ::webapk::ShortcutItem& _internal_shortcuts(int index) const;
  ::webapk::ShortcutItem* _internal_add_shortcuts();
  public:
  const ::webapk::ShortcutItem& shortcuts(int index) const;
  ::webapk::ShortcutItem* add_shortcuts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::ShortcutItem >&
      shortcuts() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string short_name = 2;
  bool has_short_name() const;
  private:
  bool _internal_has_short_name() const;
  public:
  void clear_short_name();
  const std::string& short_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_short_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_short_name();
  PROTOBUF_NODISCARD std::string* release_short_name();
  void set_allocated_short_name(std::string* short_name);
  private:
  const std::string& _internal_short_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_short_name(const std::string& value);
  std::string* _internal_mutable_short_name();
  public:

  // optional string start_url = 4;
  bool has_start_url() const;
  private:
  bool _internal_has_start_url() const;
  public:
  void clear_start_url();
  const std::string& start_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_url();
  PROTOBUF_NODISCARD std::string* release_start_url();
  void set_allocated_start_url(std::string* start_url);
  private:
  const std::string& _internal_start_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_url(const std::string& value);
  std::string* _internal_mutable_start_url();
  public:

  // optional string orientation = 9;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const std::string& orientation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_orientation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_orientation();
  PROTOBUF_NODISCARD std::string* release_orientation();
  void set_allocated_orientation(std::string* orientation);
  private:
  const std::string& _internal_orientation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_orientation(const std::string& value);
  std::string* _internal_mutable_orientation();
  public:

  // optional string display_mode = 10;
  bool has_display_mode() const;
  private:
  bool _internal_has_display_mode() const;
  public:
  void clear_display_mode();
  const std::string& display_mode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_mode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_mode();
  PROTOBUF_NODISCARD std::string* release_display_mode();
  void set_allocated_display_mode(std::string* display_mode);
  private:
  const std::string& _internal_display_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_mode(const std::string& value);
  std::string* _internal_mutable_display_mode();
  public:

  // optional string theme_color = 11;
  bool has_theme_color() const;
  private:
  bool _internal_has_theme_color() const;
  public:
  void clear_theme_color();
  const std::string& theme_color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_theme_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_theme_color();
  PROTOBUF_NODISCARD std::string* release_theme_color();
  void set_allocated_theme_color(std::string* theme_color);
  private:
  const std::string& _internal_theme_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_theme_color(const std::string& value);
  std::string* _internal_mutable_theme_color();
  public:

  // optional string background_color = 12;
  bool has_background_color() const;
  private:
  bool _internal_has_background_color() const;
  public:
  void clear_background_color();
  const std::string& background_color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_background_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_background_color();
  PROTOBUF_NODISCARD std::string* release_background_color();
  void set_allocated_background_color(std::string* background_color);
  private:
  const std::string& _internal_background_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_background_color(const std::string& value);
  std::string* _internal_mutable_background_color();
  public:

  // optional string id = 19;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:webapk.WebAppManifest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scopes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::Image > icons_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::ShareTarget > share_targets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::ShortcutItem > shortcuts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orientation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr theme_color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr background_color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  friend struct ::TableStruct_webapk_2eproto;
};
// -------------------------------------------------------------------

class Image final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webapk.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  ~Image() override;
  explicit PROTOBUF_CONSTEXPR Image(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Image* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Image* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webapk.Image";
  }
  protected:
  explicit Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Image_Usage Usage;
  static constexpr Usage PRIMARY_ICON =
    Image_Usage_PRIMARY_ICON;
  static constexpr Usage BADGE_ICON =
    Image_Usage_BADGE_ICON;
  static constexpr Usage SPLASH_ICON =
    Image_Usage_SPLASH_ICON;
  static inline bool Usage_IsValid(int value) {
    return Image_Usage_IsValid(value);
  }
  static constexpr Usage Usage_MIN =
    Image_Usage_Usage_MIN;
  static constexpr Usage Usage_MAX =
    Image_Usage_Usage_MAX;
  static constexpr int Usage_ARRAYSIZE =
    Image_Usage_Usage_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Usage_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Usage>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Usage_Name.");
    return Image_Usage_Name(enum_t_value);
  }
  static inline bool Usage_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Usage* value) {
    return Image_Usage_Parse(name, value);
  }

  typedef Image_Purpose Purpose;
  static constexpr Purpose PURPOSE_UNDEFINED =
    Image_Purpose_PURPOSE_UNDEFINED;
  static constexpr Purpose ANY =
    Image_Purpose_ANY;
  static constexpr Purpose MASKABLE =
    Image_Purpose_MASKABLE;
  static inline bool Purpose_IsValid(int value) {
    return Image_Purpose_IsValid(value);
  }
  static constexpr Purpose Purpose_MIN =
    Image_Purpose_Purpose_MIN;
  static constexpr Purpose Purpose_MAX =
    Image_Purpose_Purpose_MAX;
  static constexpr int Purpose_ARRAYSIZE =
    Image_Purpose_Purpose_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Purpose_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Purpose>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Purpose_Name.");
    return Image_Purpose_Name(enum_t_value);
  }
  static inline bool Purpose_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Purpose* value) {
    return Image_Purpose_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPurposesFieldNumber = 7,
    kUsagesFieldNumber = 8,
    kSrcFieldNumber = 1,
    kHashFieldNumber = 5,
    kImageDataFieldNumber = 6,
  };
  // repeated .webapk.Image.Purpose purposes = 7;
  int purposes_size() const;
  private:
  int _internal_purposes_size() const;
  public:
  void clear_purposes();
  private:
  ::webapk::Image_Purpose _internal_purposes(int index) const;
  void _internal_add_purposes(::webapk::Image_Purpose value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_purposes();
  public:
  ::webapk::Image_Purpose purposes(int index) const;
  void set_purposes(int index, ::webapk::Image_Purpose value);
  void add_purposes(::webapk::Image_Purpose value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& purposes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_purposes();

  // repeated .webapk.Image.Usage usages = 8;
  int usages_size() const;
  private:
  int _internal_usages_size() const;
  public:
  void clear_usages();
  private:
  ::webapk::Image_Usage _internal_usages(int index) const;
  void _internal_add_usages(::webapk::Image_Usage value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_usages();
  public:
  ::webapk::Image_Usage usages(int index) const;
  void set_usages(int index, ::webapk::Image_Usage value);
  void add_usages(::webapk::Image_Usage value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& usages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_usages();

  // optional string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src();
  PROTOBUF_NODISCARD std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // optional string hash = 5;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // optional bytes image_data = 6;
  bool has_image_data() const;
  private:
  bool _internal_has_image_data() const;
  public:
  void clear_image_data();
  const std::string& image_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_data();
  PROTOBUF_NODISCARD std::string* release_image_data();
  void set_allocated_image_data(std::string* image_data);
  private:
  const std::string& _internal_image_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_data(const std::string& value);
  std::string* _internal_mutable_image_data();
  public:

  // @@protoc_insertion_point(class_scope:webapk.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> purposes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> usages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_data_;
  friend struct ::TableStruct_webapk_2eproto;
};
// -------------------------------------------------------------------

class ShareTargetParamsFile final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webapk.ShareTargetParamsFile) */ {
 public:
  inline ShareTargetParamsFile() : ShareTargetParamsFile(nullptr) {}
  ~ShareTargetParamsFile() override;
  explicit PROTOBUF_CONSTEXPR ShareTargetParamsFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShareTargetParamsFile(const ShareTargetParamsFile& from);
  ShareTargetParamsFile(ShareTargetParamsFile&& from) noexcept
    : ShareTargetParamsFile() {
    *this = ::std::move(from);
  }

  inline ShareTargetParamsFile& operator=(const ShareTargetParamsFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShareTargetParamsFile& operator=(ShareTargetParamsFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ShareTargetParamsFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShareTargetParamsFile* internal_default_instance() {
    return reinterpret_cast<const ShareTargetParamsFile*>(
               &_ShareTargetParamsFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ShareTargetParamsFile& a, ShareTargetParamsFile& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ShareTargetParamsFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShareTargetParamsFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShareTargetParamsFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShareTargetParamsFile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShareTargetParamsFile& from);
  void MergeFrom(const ShareTargetParamsFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShareTargetParamsFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webapk.ShareTargetParamsFile";
  }
  protected:
  explicit ShareTargetParamsFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string accept = 2;
  int accept_size() const;
  private:
  int _internal_accept_size() const;
  public:
  void clear_accept();
  const std::string& accept(int index) const;
  std::string* mutable_accept(int index);
  void set_accept(int index, const std::string& value);
  void set_accept(int index, std::string&& value);
  void set_accept(int index, const char* value);
  void set_accept(int index, const char* value, size_t size);
  std::string* add_accept();
  void add_accept(const std::string& value);
  void add_accept(std::string&& value);
  void add_accept(const char* value);
  void add_accept(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& accept() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_accept();
  private:
  const std::string& _internal_accept(int index) const;
  std::string* _internal_add_accept();
  public:

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:webapk.ShareTargetParamsFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> accept_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_webapk_2eproto;
};
// -------------------------------------------------------------------

class ShareTargetParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webapk.ShareTargetParams) */ {
 public:
  inline ShareTargetParams() : ShareTargetParams(nullptr) {}
  ~ShareTargetParams() override;
  explicit PROTOBUF_CONSTEXPR ShareTargetParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShareTargetParams(const ShareTargetParams& from);
  ShareTargetParams(ShareTargetParams&& from) noexcept
    : ShareTargetParams() {
    *this = ::std::move(from);
  }

  inline ShareTargetParams& operator=(const ShareTargetParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShareTargetParams& operator=(ShareTargetParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ShareTargetParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShareTargetParams* internal_default_instance() {
    return reinterpret_cast<const ShareTargetParams*>(
               &_ShareTargetParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ShareTargetParams& a, ShareTargetParams& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ShareTargetParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShareTargetParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShareTargetParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShareTargetParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShareTargetParams& from);
  void MergeFrom(const ShareTargetParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShareTargetParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webapk.ShareTargetParams";
  }
  protected:
  explicit ShareTargetParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 4,
    kTitleFieldNumber = 1,
    kTextFieldNumber = 2,
    kUrlFieldNumber = 3,
  };
  // repeated .webapk.ShareTargetParamsFile files = 4;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::webapk::ShareTargetParamsFile* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::ShareTargetParamsFile >*
      mutable_files();
  private:
  const ::webapk::ShareTargetParamsFile& _internal_files(int index) const;
  ::webapk::ShareTargetParamsFile* _internal_add_files();
  public:
  const ::webapk::ShareTargetParamsFile& files(int index) const;
  ::webapk::ShareTargetParamsFile* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::ShareTargetParamsFile >&
      files() const;

  // optional string title = 1;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string text = 2;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional string url = 3;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:webapk.ShareTargetParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::ShareTargetParamsFile > files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_webapk_2eproto;
};
// -------------------------------------------------------------------

class ShareTarget final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webapk.ShareTarget) */ {
 public:
  inline ShareTarget() : ShareTarget(nullptr) {}
  ~ShareTarget() override;
  explicit PROTOBUF_CONSTEXPR ShareTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShareTarget(const ShareTarget& from);
  ShareTarget(ShareTarget&& from) noexcept
    : ShareTarget() {
    *this = ::std::move(from);
  }

  inline ShareTarget& operator=(const ShareTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShareTarget& operator=(ShareTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ShareTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShareTarget* internal_default_instance() {
    return reinterpret_cast<const ShareTarget*>(
               &_ShareTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ShareTarget& a, ShareTarget& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ShareTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShareTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShareTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShareTarget>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShareTarget& from);
  void MergeFrom(const ShareTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShareTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webapk.ShareTarget";
  }
  protected:
  explicit ShareTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 2,
    kMethodFieldNumber = 4,
    kEnctypeFieldNumber = 5,
    kParamsFieldNumber = 3,
  };
  // optional string action = 2;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // optional string method = 4;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // optional string enctype = 5;
  bool has_enctype() const;
  private:
  bool _internal_has_enctype() const;
  public:
  void clear_enctype();
  const std::string& enctype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enctype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enctype();
  PROTOBUF_NODISCARD std::string* release_enctype();
  void set_allocated_enctype(std::string* enctype);
  private:
  const std::string& _internal_enctype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enctype(const std::string& value);
  std::string* _internal_mutable_enctype();
  public:

  // optional .webapk.ShareTargetParams params = 3;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::webapk::ShareTargetParams& params() const;
  PROTOBUF_NODISCARD ::webapk::ShareTargetParams* release_params();
  ::webapk::ShareTargetParams* mutable_params();
  void set_allocated_params(::webapk::ShareTargetParams* params);
  private:
  const ::webapk::ShareTargetParams& _internal_params() const;
  ::webapk::ShareTargetParams* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::webapk::ShareTargetParams* params);
  ::webapk::ShareTargetParams* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:webapk.ShareTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enctype_;
  ::webapk::ShareTargetParams* params_;
  friend struct ::TableStruct_webapk_2eproto;
};
// -------------------------------------------------------------------

class ShortcutItem final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:webapk.ShortcutItem) */ {
 public:
  inline ShortcutItem() : ShortcutItem(nullptr) {}
  ~ShortcutItem() override;
  explicit PROTOBUF_CONSTEXPR ShortcutItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShortcutItem(const ShortcutItem& from);
  ShortcutItem(ShortcutItem&& from) noexcept
    : ShortcutItem() {
    *this = ::std::move(from);
  }

  inline ShortcutItem& operator=(const ShortcutItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShortcutItem& operator=(ShortcutItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ShortcutItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShortcutItem* internal_default_instance() {
    return reinterpret_cast<const ShortcutItem*>(
               &_ShortcutItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ShortcutItem& a, ShortcutItem& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ShortcutItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShortcutItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShortcutItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShortcutItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShortcutItem& from);
  void MergeFrom(const ShortcutItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShortcutItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "webapk.ShortcutItem";
  }
  protected:
  explicit ShortcutItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIconsFieldNumber = 4,
    kNameFieldNumber = 1,
    kShortNameFieldNumber = 2,
    kUrlFieldNumber = 3,
  };
  // repeated .webapk.Image icons = 4;
  int icons_size() const;
  private:
  int _internal_icons_size() const;
  public:
  void clear_icons();
  ::webapk::Image* mutable_icons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::Image >*
      mutable_icons();
  private:
  const ::webapk::Image& _internal_icons(int index) const;
  ::webapk::Image* _internal_add_icons();
  public:
  const ::webapk::Image& icons(int index) const;
  ::webapk::Image* add_icons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::Image >&
      icons() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string short_name = 2;
  bool has_short_name() const;
  private:
  bool _internal_has_short_name() const;
  public:
  void clear_short_name();
  const std::string& short_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_short_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_short_name();
  PROTOBUF_NODISCARD std::string* release_short_name();
  void set_allocated_short_name(std::string* short_name);
  private:
  const std::string& _internal_short_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_short_name(const std::string& value);
  std::string* _internal_mutable_short_name();
  public:

  // optional string url = 3;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:webapk.ShortcutItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::Image > icons_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_webapk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WebApkResponse

// optional string package_name = 1;
inline bool WebApkResponse::_internal_has_package_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WebApkResponse::has_package_name() const {
  return _internal_has_package_name();
}
inline void WebApkResponse::clear_package_name() {
  package_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WebApkResponse::package_name() const {
  // @@protoc_insertion_point(field_get:webapk.WebApkResponse.package_name)
  return _internal_package_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebApkResponse::set_package_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 package_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.WebApkResponse.package_name)
}
inline std::string* WebApkResponse::mutable_package_name() {
  std::string* _s = _internal_mutable_package_name();
  // @@protoc_insertion_point(field_mutable:webapk.WebApkResponse.package_name)
  return _s;
}
inline const std::string& WebApkResponse::_internal_package_name() const {
  return package_name_.Get();
}
inline void WebApkResponse::_internal_set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.Set(value, GetArenaForAllocation());
}
inline std::string* WebApkResponse::_internal_mutable_package_name() {
  _has_bits_[0] |= 0x00000001u;
  return package_name_.Mutable(GetArenaForAllocation());
}
inline std::string* WebApkResponse::release_package_name() {
  // @@protoc_insertion_point(field_release:webapk.WebApkResponse.package_name)
  if (!_internal_has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = package_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (package_name_.IsDefault()) {
    package_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebApkResponse::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_name_.SetAllocated(package_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (package_name_.IsDefault()) {
    package_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.WebApkResponse.package_name)
}

// optional string version = 2;
inline bool WebApkResponse::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WebApkResponse::has_version() const {
  return _internal_has_version();
}
inline void WebApkResponse::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WebApkResponse::version() const {
  // @@protoc_insertion_point(field_get:webapk.WebApkResponse.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebApkResponse::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.WebApkResponse.version)
}
inline std::string* WebApkResponse::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:webapk.WebApkResponse.version)
  return _s;
}
inline const std::string& WebApkResponse::_internal_version() const {
  return version_.Get();
}
inline void WebApkResponse::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(value, GetArenaForAllocation());
}
inline std::string* WebApkResponse::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(GetArenaForAllocation());
}
inline std::string* WebApkResponse::release_version() {
  // @@protoc_insertion_point(field_release:webapk.WebApkResponse.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebApkResponse::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.WebApkResponse.version)
}

// optional string token = 6;
inline bool WebApkResponse::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WebApkResponse::has_token() const {
  return _internal_has_token();
}
inline void WebApkResponse::clear_token() {
  token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WebApkResponse::token() const {
  // @@protoc_insertion_point(field_get:webapk.WebApkResponse.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebApkResponse::set_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.WebApkResponse.token)
}
inline std::string* WebApkResponse::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:webapk.WebApkResponse.token)
  return _s;
}
inline const std::string& WebApkResponse::_internal_token() const {
  return token_.Get();
}
inline void WebApkResponse::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  token_.Set(value, GetArenaForAllocation());
}
inline std::string* WebApkResponse::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000004u;
  return token_.Mutable(GetArenaForAllocation());
}
inline std::string* WebApkResponse::release_token() {
  // @@protoc_insertion_point(field_release:webapk.WebApkResponse.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebApkResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.WebApkResponse.token)
}

// optional bool relax_updates = 8;
inline bool WebApkResponse::_internal_has_relax_updates() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WebApkResponse::has_relax_updates() const {
  return _internal_has_relax_updates();
}
inline void WebApkResponse::clear_relax_updates() {
  relax_updates_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool WebApkResponse::_internal_relax_updates() const {
  return relax_updates_;
}
inline bool WebApkResponse::relax_updates() const {
  // @@protoc_insertion_point(field_get:webapk.WebApkResponse.relax_updates)
  return _internal_relax_updates();
}
inline void WebApkResponse::_internal_set_relax_updates(bool value) {
  _has_bits_[0] |= 0x00000008u;
  relax_updates_ = value;
}
inline void WebApkResponse::set_relax_updates(bool value) {
  _internal_set_relax_updates(value);
  // @@protoc_insertion_point(field_set:webapk.WebApkResponse.relax_updates)
}

// -------------------------------------------------------------------

// WebApk

// optional string package_name = 1;
inline bool WebApk::_internal_has_package_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WebApk::has_package_name() const {
  return _internal_has_package_name();
}
inline void WebApk::clear_package_name() {
  package_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WebApk::package_name() const {
  // @@protoc_insertion_point(field_get:webapk.WebApk.package_name)
  return _internal_package_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebApk::set_package_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 package_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.WebApk.package_name)
}
inline std::string* WebApk::mutable_package_name() {
  std::string* _s = _internal_mutable_package_name();
  // @@protoc_insertion_point(field_mutable:webapk.WebApk.package_name)
  return _s;
}
inline const std::string& WebApk::_internal_package_name() const {
  return package_name_.Get();
}
inline void WebApk::_internal_set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.Set(value, GetArenaForAllocation());
}
inline std::string* WebApk::_internal_mutable_package_name() {
  _has_bits_[0] |= 0x00000001u;
  return package_name_.Mutable(GetArenaForAllocation());
}
inline std::string* WebApk::release_package_name() {
  // @@protoc_insertion_point(field_release:webapk.WebApk.package_name)
  if (!_internal_has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = package_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (package_name_.IsDefault()) {
    package_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebApk::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_name_.SetAllocated(package_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (package_name_.IsDefault()) {
    package_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.WebApk.package_name)
}

// optional string version = 2;
inline bool WebApk::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WebApk::has_version() const {
  return _internal_has_version();
}
inline void WebApk::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WebApk::version() const {
  // @@protoc_insertion_point(field_get:webapk.WebApk.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebApk::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.WebApk.version)
}
inline std::string* WebApk::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:webapk.WebApk.version)
  return _s;
}
inline const std::string& WebApk::_internal_version() const {
  return version_.Get();
}
inline void WebApk::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(value, GetArenaForAllocation());
}
inline std::string* WebApk::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(GetArenaForAllocation());
}
inline std::string* WebApk::release_version() {
  // @@protoc_insertion_point(field_release:webapk.WebApk.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebApk::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.WebApk.version)
}

// optional string manifest_url = 3;
inline bool WebApk::_internal_has_manifest_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WebApk::has_manifest_url() const {
  return _internal_has_manifest_url();
}
inline void WebApk::clear_manifest_url() {
  manifest_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WebApk::manifest_url() const {
  // @@protoc_insertion_point(field_get:webapk.WebApk.manifest_url)
  return _internal_manifest_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebApk::set_manifest_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 manifest_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.WebApk.manifest_url)
}
inline std::string* WebApk::mutable_manifest_url() {
  std::string* _s = _internal_mutable_manifest_url();
  // @@protoc_insertion_point(field_mutable:webapk.WebApk.manifest_url)
  return _s;
}
inline const std::string& WebApk::_internal_manifest_url() const {
  return manifest_url_.Get();
}
inline void WebApk::_internal_set_manifest_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  manifest_url_.Set(value, GetArenaForAllocation());
}
inline std::string* WebApk::_internal_mutable_manifest_url() {
  _has_bits_[0] |= 0x00000004u;
  return manifest_url_.Mutable(GetArenaForAllocation());
}
inline std::string* WebApk::release_manifest_url() {
  // @@protoc_insertion_point(field_release:webapk.WebApk.manifest_url)
  if (!_internal_has_manifest_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = manifest_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (manifest_url_.IsDefault()) {
    manifest_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebApk::set_allocated_manifest_url(std::string* manifest_url) {
  if (manifest_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  manifest_url_.SetAllocated(manifest_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (manifest_url_.IsDefault()) {
    manifest_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.WebApk.manifest_url)
}

// optional string requester_application_package = 5;
inline bool WebApk::_internal_has_requester_application_package() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WebApk::has_requester_application_package() const {
  return _internal_has_requester_application_package();
}
inline void WebApk::clear_requester_application_package() {
  requester_application_package_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& WebApk::requester_application_package() const {
  // @@protoc_insertion_point(field_get:webapk.WebApk.requester_application_package)
  return _internal_requester_application_package();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebApk::set_requester_application_package(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 requester_application_package_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.WebApk.requester_application_package)
}
inline std::string* WebApk::mutable_requester_application_package() {
  std::string* _s = _internal_mutable_requester_application_package();
  // @@protoc_insertion_point(field_mutable:webapk.WebApk.requester_application_package)
  return _s;
}
inline const std::string& WebApk::_internal_requester_application_package() const {
  return requester_application_package_.Get();
}
inline void WebApk::_internal_set_requester_application_package(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  requester_application_package_.Set(value, GetArenaForAllocation());
}
inline std::string* WebApk::_internal_mutable_requester_application_package() {
  _has_bits_[0] |= 0x00000008u;
  return requester_application_package_.Mutable(GetArenaForAllocation());
}
inline std::string* WebApk::release_requester_application_package() {
  // @@protoc_insertion_point(field_release:webapk.WebApk.requester_application_package)
  if (!_internal_has_requester_application_package()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = requester_application_package_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (requester_application_package_.IsDefault()) {
    requester_application_package_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebApk::set_allocated_requester_application_package(std::string* requester_application_package) {
  if (requester_application_package != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  requester_application_package_.SetAllocated(requester_application_package, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (requester_application_package_.IsDefault()) {
    requester_application_package_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.WebApk.requester_application_package)
}

// optional string requester_application_version = 6;
inline bool WebApk::_internal_has_requester_application_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WebApk::has_requester_application_version() const {
  return _internal_has_requester_application_version();
}
inline void WebApk::clear_requester_application_version() {
  requester_application_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& WebApk::requester_application_version() const {
  // @@protoc_insertion_point(field_get:webapk.WebApk.requester_application_version)
  return _internal_requester_application_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebApk::set_requester_application_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 requester_application_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.WebApk.requester_application_version)
}
inline std::string* WebApk::mutable_requester_application_version() {
  std::string* _s = _internal_mutable_requester_application_version();
  // @@protoc_insertion_point(field_mutable:webapk.WebApk.requester_application_version)
  return _s;
}
inline const std::string& WebApk::_internal_requester_application_version() const {
  return requester_application_version_.Get();
}
inline void WebApk::_internal_set_requester_application_version(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  requester_application_version_.Set(value, GetArenaForAllocation());
}
inline std::string* WebApk::_internal_mutable_requester_application_version() {
  _has_bits_[0] |= 0x00000010u;
  return requester_application_version_.Mutable(GetArenaForAllocation());
}
inline std::string* WebApk::release_requester_application_version() {
  // @@protoc_insertion_point(field_release:webapk.WebApk.requester_application_version)
  if (!_internal_has_requester_application_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = requester_application_version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (requester_application_version_.IsDefault()) {
    requester_application_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebApk::set_allocated_requester_application_version(std::string* requester_application_version) {
  if (requester_application_version != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  requester_application_version_.SetAllocated(requester_application_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (requester_application_version_.IsDefault()) {
    requester_application_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.WebApk.requester_application_version)
}

// optional .webapk.WebAppManifest manifest = 7;
inline bool WebApk::_internal_has_manifest() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || manifest_ != nullptr);
  return value;
}
inline bool WebApk::has_manifest() const {
  return _internal_has_manifest();
}
inline void WebApk::clear_manifest() {
  if (manifest_ != nullptr) manifest_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::webapk::WebAppManifest& WebApk::_internal_manifest() const {
  const ::webapk::WebAppManifest* p = manifest_;
  return p != nullptr ? *p : reinterpret_cast<const ::webapk::WebAppManifest&>(
      ::webapk::_WebAppManifest_default_instance_);
}
inline const ::webapk::WebAppManifest& WebApk::manifest() const {
  // @@protoc_insertion_point(field_get:webapk.WebApk.manifest)
  return _internal_manifest();
}
inline void WebApk::unsafe_arena_set_allocated_manifest(
    ::webapk::WebAppManifest* manifest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(manifest_);
  }
  manifest_ = manifest;
  if (manifest) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webapk.WebApk.manifest)
}
inline ::webapk::WebAppManifest* WebApk::release_manifest() {
  _has_bits_[0] &= ~0x00000100u;
  ::webapk::WebAppManifest* temp = manifest_;
  manifest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::webapk::WebAppManifest* WebApk::unsafe_arena_release_manifest() {
  // @@protoc_insertion_point(field_release:webapk.WebApk.manifest)
  _has_bits_[0] &= ~0x00000100u;
  ::webapk::WebAppManifest* temp = manifest_;
  manifest_ = nullptr;
  return temp;
}
inline ::webapk::WebAppManifest* WebApk::_internal_mutable_manifest() {
  _has_bits_[0] |= 0x00000100u;
  if (manifest_ == nullptr) {
    auto* p = CreateMaybeMessage<::webapk::WebAppManifest>(GetArenaForAllocation());
    manifest_ = p;
  }
  return manifest_;
}
inline ::webapk::WebAppManifest* WebApk::mutable_manifest() {
  ::webapk::WebAppManifest* _msg = _internal_mutable_manifest();
  // @@protoc_insertion_point(field_mutable:webapk.WebApk.manifest)
  return _msg;
}
inline void WebApk::set_allocated_manifest(::webapk::WebAppManifest* manifest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete manifest_;
  }
  if (manifest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(manifest);
    if (message_arena != submessage_arena) {
      manifest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, manifest, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  manifest_ = manifest;
  // @@protoc_insertion_point(field_set_allocated:webapk.WebApk.manifest)
}

// optional string android_abi = 8;
inline bool WebApk::_internal_has_android_abi() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WebApk::has_android_abi() const {
  return _internal_has_android_abi();
}
inline void WebApk::clear_android_abi() {
  android_abi_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& WebApk::android_abi() const {
  // @@protoc_insertion_point(field_get:webapk.WebApk.android_abi)
  return _internal_android_abi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebApk::set_android_abi(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 android_abi_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.WebApk.android_abi)
}
inline std::string* WebApk::mutable_android_abi() {
  std::string* _s = _internal_mutable_android_abi();
  // @@protoc_insertion_point(field_mutable:webapk.WebApk.android_abi)
  return _s;
}
inline const std::string& WebApk::_internal_android_abi() const {
  return android_abi_.Get();
}
inline void WebApk::_internal_set_android_abi(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  android_abi_.Set(value, GetArenaForAllocation());
}
inline std::string* WebApk::_internal_mutable_android_abi() {
  _has_bits_[0] |= 0x00000020u;
  return android_abi_.Mutable(GetArenaForAllocation());
}
inline std::string* WebApk::release_android_abi() {
  // @@protoc_insertion_point(field_release:webapk.WebApk.android_abi)
  if (!_internal_has_android_abi()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = android_abi_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (android_abi_.IsDefault()) {
    android_abi_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebApk::set_allocated_android_abi(std::string* android_abi) {
  if (android_abi != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  android_abi_.SetAllocated(android_abi, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (android_abi_.IsDefault()) {
    android_abi_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.WebApk.android_abi)
}

// optional bool stale_manifest = 9;
inline bool WebApk::_internal_has_stale_manifest() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool WebApk::has_stale_manifest() const {
  return _internal_has_stale_manifest();
}
inline void WebApk::clear_stale_manifest() {
  stale_manifest_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool WebApk::_internal_stale_manifest() const {
  return stale_manifest_;
}
inline bool WebApk::stale_manifest() const {
  // @@protoc_insertion_point(field_get:webapk.WebApk.stale_manifest)
  return _internal_stale_manifest();
}
inline void WebApk::_internal_set_stale_manifest(bool value) {
  _has_bits_[0] |= 0x00000200u;
  stale_manifest_ = value;
}
inline void WebApk::set_stale_manifest(bool value) {
  _internal_set_stale_manifest(value);
  // @@protoc_insertion_point(field_set:webapk.WebApk.stale_manifest)
}

// repeated .webapk.WebApk.UpdateReason update_reasons = 11;
inline int WebApk::_internal_update_reasons_size() const {
  return update_reasons_.size();
}
inline int WebApk::update_reasons_size() const {
  return _internal_update_reasons_size();
}
inline void WebApk::clear_update_reasons() {
  update_reasons_.Clear();
}
inline ::webapk::WebApk_UpdateReason WebApk::_internal_update_reasons(int index) const {
  return static_cast< ::webapk::WebApk_UpdateReason >(update_reasons_.Get(index));
}
inline ::webapk::WebApk_UpdateReason WebApk::update_reasons(int index) const {
  // @@protoc_insertion_point(field_get:webapk.WebApk.update_reasons)
  return _internal_update_reasons(index);
}
inline void WebApk::set_update_reasons(int index, ::webapk::WebApk_UpdateReason value) {
  assert(::webapk::WebApk_UpdateReason_IsValid(value));
  update_reasons_.Set(index, value);
  // @@protoc_insertion_point(field_set:webapk.WebApk.update_reasons)
}
inline void WebApk::_internal_add_update_reasons(::webapk::WebApk_UpdateReason value) {
  assert(::webapk::WebApk_UpdateReason_IsValid(value));
  update_reasons_.Add(value);
}
inline void WebApk::add_update_reasons(::webapk::WebApk_UpdateReason value) {
  _internal_add_update_reasons(value);
  // @@protoc_insertion_point(field_add:webapk.WebApk.update_reasons)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
WebApk::update_reasons() const {
  // @@protoc_insertion_point(field_list:webapk.WebApk.update_reasons)
  return update_reasons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
WebApk::_internal_mutable_update_reasons() {
  return &update_reasons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
WebApk::mutable_update_reasons() {
  // @@protoc_insertion_point(field_mutable_list:webapk.WebApk.update_reasons)
  return _internal_mutable_update_reasons();
}

// optional string android_version = 12;
inline bool WebApk::_internal_has_android_version() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool WebApk::has_android_version() const {
  return _internal_has_android_version();
}
inline void WebApk::clear_android_version() {
  android_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& WebApk::android_version() const {
  // @@protoc_insertion_point(field_get:webapk.WebApk.android_version)
  return _internal_android_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebApk::set_android_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 android_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.WebApk.android_version)
}
inline std::string* WebApk::mutable_android_version() {
  std::string* _s = _internal_mutable_android_version();
  // @@protoc_insertion_point(field_mutable:webapk.WebApk.android_version)
  return _s;
}
inline const std::string& WebApk::_internal_android_version() const {
  return android_version_.Get();
}
inline void WebApk::_internal_set_android_version(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  android_version_.Set(value, GetArenaForAllocation());
}
inline std::string* WebApk::_internal_mutable_android_version() {
  _has_bits_[0] |= 0x00000040u;
  return android_version_.Mutable(GetArenaForAllocation());
}
inline std::string* WebApk::release_android_version() {
  // @@protoc_insertion_point(field_release:webapk.WebApk.android_version)
  if (!_internal_has_android_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = android_version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (android_version_.IsDefault()) {
    android_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebApk::set_allocated_android_version(std::string* android_version) {
  if (android_version != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  android_version_.SetAllocated(android_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (android_version_.IsDefault()) {
    android_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.WebApk.android_version)
}

// optional bool app_identity_update_supported = 13;
inline bool WebApk::_internal_has_app_identity_update_supported() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool WebApk::has_app_identity_update_supported() const {
  return _internal_has_app_identity_update_supported();
}
inline void WebApk::clear_app_identity_update_supported() {
  app_identity_update_supported_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool WebApk::_internal_app_identity_update_supported() const {
  return app_identity_update_supported_;
}
inline bool WebApk::app_identity_update_supported() const {
  // @@protoc_insertion_point(field_get:webapk.WebApk.app_identity_update_supported)
  return _internal_app_identity_update_supported();
}
inline void WebApk::_internal_set_app_identity_update_supported(bool value) {
  _has_bits_[0] |= 0x00000400u;
  app_identity_update_supported_ = value;
}
inline void WebApk::set_app_identity_update_supported(bool value) {
  _internal_set_app_identity_update_supported(value);
  // @@protoc_insertion_point(field_set:webapk.WebApk.app_identity_update_supported)
}

// optional string app_key = 14;
inline bool WebApk::_internal_has_app_key() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool WebApk::has_app_key() const {
  return _internal_has_app_key();
}
inline void WebApk::clear_app_key() {
  app_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& WebApk::app_key() const {
  // @@protoc_insertion_point(field_get:webapk.WebApk.app_key)
  return _internal_app_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebApk::set_app_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 app_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.WebApk.app_key)
}
inline std::string* WebApk::mutable_app_key() {
  std::string* _s = _internal_mutable_app_key();
  // @@protoc_insertion_point(field_mutable:webapk.WebApk.app_key)
  return _s;
}
inline const std::string& WebApk::_internal_app_key() const {
  return app_key_.Get();
}
inline void WebApk::_internal_set_app_key(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  app_key_.Set(value, GetArenaForAllocation());
}
inline std::string* WebApk::_internal_mutable_app_key() {
  _has_bits_[0] |= 0x00000080u;
  return app_key_.Mutable(GetArenaForAllocation());
}
inline std::string* WebApk::release_app_key() {
  // @@protoc_insertion_point(field_release:webapk.WebApk.app_key)
  if (!_internal_has_app_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = app_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_key_.IsDefault()) {
    app_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebApk::set_allocated_app_key(std::string* app_key) {
  if (app_key != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  app_key_.SetAllocated(app_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_key_.IsDefault()) {
    app_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.WebApk.app_key)
}

// -------------------------------------------------------------------

// WebAppManifest

// optional string name = 1;
inline bool WebAppManifest::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WebAppManifest::has_name() const {
  return _internal_has_name();
}
inline void WebAppManifest::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WebAppManifest::name() const {
  // @@protoc_insertion_point(field_get:webapk.WebAppManifest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebAppManifest::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.WebAppManifest.name)
}
inline std::string* WebAppManifest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:webapk.WebAppManifest.name)
  return _s;
}
inline const std::string& WebAppManifest::_internal_name() const {
  return name_.Get();
}
inline void WebAppManifest::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* WebAppManifest::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* WebAppManifest::release_name() {
  // @@protoc_insertion_point(field_release:webapk.WebAppManifest.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebAppManifest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.WebAppManifest.name)
}

// optional string short_name = 2;
inline bool WebAppManifest::_internal_has_short_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WebAppManifest::has_short_name() const {
  return _internal_has_short_name();
}
inline void WebAppManifest::clear_short_name() {
  short_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WebAppManifest::short_name() const {
  // @@protoc_insertion_point(field_get:webapk.WebAppManifest.short_name)
  return _internal_short_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebAppManifest::set_short_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 short_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.WebAppManifest.short_name)
}
inline std::string* WebAppManifest::mutable_short_name() {
  std::string* _s = _internal_mutable_short_name();
  // @@protoc_insertion_point(field_mutable:webapk.WebAppManifest.short_name)
  return _s;
}
inline const std::string& WebAppManifest::_internal_short_name() const {
  return short_name_.Get();
}
inline void WebAppManifest::_internal_set_short_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  short_name_.Set(value, GetArenaForAllocation());
}
inline std::string* WebAppManifest::_internal_mutable_short_name() {
  _has_bits_[0] |= 0x00000002u;
  return short_name_.Mutable(GetArenaForAllocation());
}
inline std::string* WebAppManifest::release_short_name() {
  // @@protoc_insertion_point(field_release:webapk.WebAppManifest.short_name)
  if (!_internal_has_short_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = short_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (short_name_.IsDefault()) {
    short_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebAppManifest::set_allocated_short_name(std::string* short_name) {
  if (short_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  short_name_.SetAllocated(short_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (short_name_.IsDefault()) {
    short_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.WebAppManifest.short_name)
}

// optional string start_url = 4;
inline bool WebAppManifest::_internal_has_start_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WebAppManifest::has_start_url() const {
  return _internal_has_start_url();
}
inline void WebAppManifest::clear_start_url() {
  start_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WebAppManifest::start_url() const {
  // @@protoc_insertion_point(field_get:webapk.WebAppManifest.start_url)
  return _internal_start_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebAppManifest::set_start_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 start_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.WebAppManifest.start_url)
}
inline std::string* WebAppManifest::mutable_start_url() {
  std::string* _s = _internal_mutable_start_url();
  // @@protoc_insertion_point(field_mutable:webapk.WebAppManifest.start_url)
  return _s;
}
inline const std::string& WebAppManifest::_internal_start_url() const {
  return start_url_.Get();
}
inline void WebAppManifest::_internal_set_start_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  start_url_.Set(value, GetArenaForAllocation());
}
inline std::string* WebAppManifest::_internal_mutable_start_url() {
  _has_bits_[0] |= 0x00000004u;
  return start_url_.Mutable(GetArenaForAllocation());
}
inline std::string* WebAppManifest::release_start_url() {
  // @@protoc_insertion_point(field_release:webapk.WebAppManifest.start_url)
  if (!_internal_has_start_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = start_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (start_url_.IsDefault()) {
    start_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebAppManifest::set_allocated_start_url(std::string* start_url) {
  if (start_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  start_url_.SetAllocated(start_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (start_url_.IsDefault()) {
    start_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.WebAppManifest.start_url)
}

// repeated string scopes = 5;
inline int WebAppManifest::_internal_scopes_size() const {
  return scopes_.size();
}
inline int WebAppManifest::scopes_size() const {
  return _internal_scopes_size();
}
inline void WebAppManifest::clear_scopes() {
  scopes_.Clear();
}
inline std::string* WebAppManifest::add_scopes() {
  std::string* _s = _internal_add_scopes();
  // @@protoc_insertion_point(field_add_mutable:webapk.WebAppManifest.scopes)
  return _s;
}
inline const std::string& WebAppManifest::_internal_scopes(int index) const {
  return scopes_.Get(index);
}
inline const std::string& WebAppManifest::scopes(int index) const {
  // @@protoc_insertion_point(field_get:webapk.WebAppManifest.scopes)
  return _internal_scopes(index);
}
inline std::string* WebAppManifest::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:webapk.WebAppManifest.scopes)
  return scopes_.Mutable(index);
}
inline void WebAppManifest::set_scopes(int index, const std::string& value) {
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:webapk.WebAppManifest.scopes)
}
inline void WebAppManifest::set_scopes(int index, std::string&& value) {
  scopes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:webapk.WebAppManifest.scopes)
}
inline void WebAppManifest::set_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:webapk.WebAppManifest.scopes)
}
inline void WebAppManifest::set_scopes(int index, const char* value, size_t size) {
  scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:webapk.WebAppManifest.scopes)
}
inline std::string* WebAppManifest::_internal_add_scopes() {
  return scopes_.Add();
}
inline void WebAppManifest::add_scopes(const std::string& value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:webapk.WebAppManifest.scopes)
}
inline void WebAppManifest::add_scopes(std::string&& value) {
  scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:webapk.WebAppManifest.scopes)
}
inline void WebAppManifest::add_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:webapk.WebAppManifest.scopes)
}
inline void WebAppManifest::add_scopes(const char* value, size_t size) {
  scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:webapk.WebAppManifest.scopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WebAppManifest::scopes() const {
  // @@protoc_insertion_point(field_list:webapk.WebAppManifest.scopes)
  return scopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WebAppManifest::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:webapk.WebAppManifest.scopes)
  return &scopes_;
}

// repeated .webapk.Image icons = 6;
inline int WebAppManifest::_internal_icons_size() const {
  return icons_.size();
}
inline int WebAppManifest::icons_size() const {
  return _internal_icons_size();
}
inline void WebAppManifest::clear_icons() {
  icons_.Clear();
}
inline ::webapk::Image* WebAppManifest::mutable_icons(int index) {
  // @@protoc_insertion_point(field_mutable:webapk.WebAppManifest.icons)
  return icons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::Image >*
WebAppManifest::mutable_icons() {
  // @@protoc_insertion_point(field_mutable_list:webapk.WebAppManifest.icons)
  return &icons_;
}
inline const ::webapk::Image& WebAppManifest::_internal_icons(int index) const {
  return icons_.Get(index);
}
inline const ::webapk::Image& WebAppManifest::icons(int index) const {
  // @@protoc_insertion_point(field_get:webapk.WebAppManifest.icons)
  return _internal_icons(index);
}
inline ::webapk::Image* WebAppManifest::_internal_add_icons() {
  return icons_.Add();
}
inline ::webapk::Image* WebAppManifest::add_icons() {
  ::webapk::Image* _add = _internal_add_icons();
  // @@protoc_insertion_point(field_add:webapk.WebAppManifest.icons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::Image >&
WebAppManifest::icons() const {
  // @@protoc_insertion_point(field_list:webapk.WebAppManifest.icons)
  return icons_;
}

// optional string orientation = 9;
inline bool WebAppManifest::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WebAppManifest::has_orientation() const {
  return _internal_has_orientation();
}
inline void WebAppManifest::clear_orientation() {
  orientation_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& WebAppManifest::orientation() const {
  // @@protoc_insertion_point(field_get:webapk.WebAppManifest.orientation)
  return _internal_orientation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebAppManifest::set_orientation(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 orientation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.WebAppManifest.orientation)
}
inline std::string* WebAppManifest::mutable_orientation() {
  std::string* _s = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:webapk.WebAppManifest.orientation)
  return _s;
}
inline const std::string& WebAppManifest::_internal_orientation() const {
  return orientation_.Get();
}
inline void WebAppManifest::_internal_set_orientation(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  orientation_.Set(value, GetArenaForAllocation());
}
inline std::string* WebAppManifest::_internal_mutable_orientation() {
  _has_bits_[0] |= 0x00000008u;
  return orientation_.Mutable(GetArenaForAllocation());
}
inline std::string* WebAppManifest::release_orientation() {
  // @@protoc_insertion_point(field_release:webapk.WebAppManifest.orientation)
  if (!_internal_has_orientation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = orientation_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (orientation_.IsDefault()) {
    orientation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebAppManifest::set_allocated_orientation(std::string* orientation) {
  if (orientation != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  orientation_.SetAllocated(orientation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (orientation_.IsDefault()) {
    orientation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.WebAppManifest.orientation)
}

// optional string display_mode = 10;
inline bool WebAppManifest::_internal_has_display_mode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WebAppManifest::has_display_mode() const {
  return _internal_has_display_mode();
}
inline void WebAppManifest::clear_display_mode() {
  display_mode_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& WebAppManifest::display_mode() const {
  // @@protoc_insertion_point(field_get:webapk.WebAppManifest.display_mode)
  return _internal_display_mode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebAppManifest::set_display_mode(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 display_mode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.WebAppManifest.display_mode)
}
inline std::string* WebAppManifest::mutable_display_mode() {
  std::string* _s = _internal_mutable_display_mode();
  // @@protoc_insertion_point(field_mutable:webapk.WebAppManifest.display_mode)
  return _s;
}
inline const std::string& WebAppManifest::_internal_display_mode() const {
  return display_mode_.Get();
}
inline void WebAppManifest::_internal_set_display_mode(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  display_mode_.Set(value, GetArenaForAllocation());
}
inline std::string* WebAppManifest::_internal_mutable_display_mode() {
  _has_bits_[0] |= 0x00000010u;
  return display_mode_.Mutable(GetArenaForAllocation());
}
inline std::string* WebAppManifest::release_display_mode() {
  // @@protoc_insertion_point(field_release:webapk.WebAppManifest.display_mode)
  if (!_internal_has_display_mode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = display_mode_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_mode_.IsDefault()) {
    display_mode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebAppManifest::set_allocated_display_mode(std::string* display_mode) {
  if (display_mode != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  display_mode_.SetAllocated(display_mode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_mode_.IsDefault()) {
    display_mode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.WebAppManifest.display_mode)
}

// optional string theme_color = 11;
inline bool WebAppManifest::_internal_has_theme_color() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WebAppManifest::has_theme_color() const {
  return _internal_has_theme_color();
}
inline void WebAppManifest::clear_theme_color() {
  theme_color_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& WebAppManifest::theme_color() const {
  // @@protoc_insertion_point(field_get:webapk.WebAppManifest.theme_color)
  return _internal_theme_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebAppManifest::set_theme_color(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 theme_color_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.WebAppManifest.theme_color)
}
inline std::string* WebAppManifest::mutable_theme_color() {
  std::string* _s = _internal_mutable_theme_color();
  // @@protoc_insertion_point(field_mutable:webapk.WebAppManifest.theme_color)
  return _s;
}
inline const std::string& WebAppManifest::_internal_theme_color() const {
  return theme_color_.Get();
}
inline void WebAppManifest::_internal_set_theme_color(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  theme_color_.Set(value, GetArenaForAllocation());
}
inline std::string* WebAppManifest::_internal_mutable_theme_color() {
  _has_bits_[0] |= 0x00000020u;
  return theme_color_.Mutable(GetArenaForAllocation());
}
inline std::string* WebAppManifest::release_theme_color() {
  // @@protoc_insertion_point(field_release:webapk.WebAppManifest.theme_color)
  if (!_internal_has_theme_color()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = theme_color_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (theme_color_.IsDefault()) {
    theme_color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebAppManifest::set_allocated_theme_color(std::string* theme_color) {
  if (theme_color != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  theme_color_.SetAllocated(theme_color, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (theme_color_.IsDefault()) {
    theme_color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.WebAppManifest.theme_color)
}

// optional string background_color = 12;
inline bool WebAppManifest::_internal_has_background_color() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool WebAppManifest::has_background_color() const {
  return _internal_has_background_color();
}
inline void WebAppManifest::clear_background_color() {
  background_color_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& WebAppManifest::background_color() const {
  // @@protoc_insertion_point(field_get:webapk.WebAppManifest.background_color)
  return _internal_background_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebAppManifest::set_background_color(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 background_color_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.WebAppManifest.background_color)
}
inline std::string* WebAppManifest::mutable_background_color() {
  std::string* _s = _internal_mutable_background_color();
  // @@protoc_insertion_point(field_mutable:webapk.WebAppManifest.background_color)
  return _s;
}
inline const std::string& WebAppManifest::_internal_background_color() const {
  return background_color_.Get();
}
inline void WebAppManifest::_internal_set_background_color(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  background_color_.Set(value, GetArenaForAllocation());
}
inline std::string* WebAppManifest::_internal_mutable_background_color() {
  _has_bits_[0] |= 0x00000040u;
  return background_color_.Mutable(GetArenaForAllocation());
}
inline std::string* WebAppManifest::release_background_color() {
  // @@protoc_insertion_point(field_release:webapk.WebAppManifest.background_color)
  if (!_internal_has_background_color()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = background_color_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (background_color_.IsDefault()) {
    background_color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebAppManifest::set_allocated_background_color(std::string* background_color) {
  if (background_color != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  background_color_.SetAllocated(background_color, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (background_color_.IsDefault()) {
    background_color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.WebAppManifest.background_color)
}

// repeated .webapk.ShareTarget share_targets = 17;
inline int WebAppManifest::_internal_share_targets_size() const {
  return share_targets_.size();
}
inline int WebAppManifest::share_targets_size() const {
  return _internal_share_targets_size();
}
inline void WebAppManifest::clear_share_targets() {
  share_targets_.Clear();
}
inline ::webapk::ShareTarget* WebAppManifest::mutable_share_targets(int index) {
  // @@protoc_insertion_point(field_mutable:webapk.WebAppManifest.share_targets)
  return share_targets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::ShareTarget >*
WebAppManifest::mutable_share_targets() {
  // @@protoc_insertion_point(field_mutable_list:webapk.WebAppManifest.share_targets)
  return &share_targets_;
}
inline const ::webapk::ShareTarget& WebAppManifest::_internal_share_targets(int index) const {
  return share_targets_.Get(index);
}
inline const ::webapk::ShareTarget& WebAppManifest::share_targets(int index) const {
  // @@protoc_insertion_point(field_get:webapk.WebAppManifest.share_targets)
  return _internal_share_targets(index);
}
inline ::webapk::ShareTarget* WebAppManifest::_internal_add_share_targets() {
  return share_targets_.Add();
}
inline ::webapk::ShareTarget* WebAppManifest::add_share_targets() {
  ::webapk::ShareTarget* _add = _internal_add_share_targets();
  // @@protoc_insertion_point(field_add:webapk.WebAppManifest.share_targets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::ShareTarget >&
WebAppManifest::share_targets() const {
  // @@protoc_insertion_point(field_list:webapk.WebAppManifest.share_targets)
  return share_targets_;
}

// repeated .webapk.ShortcutItem shortcuts = 18;
inline int WebAppManifest::_internal_shortcuts_size() const {
  return shortcuts_.size();
}
inline int WebAppManifest::shortcuts_size() const {
  return _internal_shortcuts_size();
}
inline void WebAppManifest::clear_shortcuts() {
  shortcuts_.Clear();
}
inline ::webapk::ShortcutItem* WebAppManifest::mutable_shortcuts(int index) {
  // @@protoc_insertion_point(field_mutable:webapk.WebAppManifest.shortcuts)
  return shortcuts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::ShortcutItem >*
WebAppManifest::mutable_shortcuts() {
  // @@protoc_insertion_point(field_mutable_list:webapk.WebAppManifest.shortcuts)
  return &shortcuts_;
}
inline const ::webapk::ShortcutItem& WebAppManifest::_internal_shortcuts(int index) const {
  return shortcuts_.Get(index);
}
inline const ::webapk::ShortcutItem& WebAppManifest::shortcuts(int index) const {
  // @@protoc_insertion_point(field_get:webapk.WebAppManifest.shortcuts)
  return _internal_shortcuts(index);
}
inline ::webapk::ShortcutItem* WebAppManifest::_internal_add_shortcuts() {
  return shortcuts_.Add();
}
inline ::webapk::ShortcutItem* WebAppManifest::add_shortcuts() {
  ::webapk::ShortcutItem* _add = _internal_add_shortcuts();
  // @@protoc_insertion_point(field_add:webapk.WebAppManifest.shortcuts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::ShortcutItem >&
WebAppManifest::shortcuts() const {
  // @@protoc_insertion_point(field_list:webapk.WebAppManifest.shortcuts)
  return shortcuts_;
}

// optional string id = 19;
inline bool WebAppManifest::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool WebAppManifest::has_id() const {
  return _internal_has_id();
}
inline void WebAppManifest::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& WebAppManifest::id() const {
  // @@protoc_insertion_point(field_get:webapk.WebAppManifest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebAppManifest::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.WebAppManifest.id)
}
inline std::string* WebAppManifest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:webapk.WebAppManifest.id)
  return _s;
}
inline const std::string& WebAppManifest::_internal_id() const {
  return id_.Get();
}
inline void WebAppManifest::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* WebAppManifest::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000080u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* WebAppManifest::release_id() {
  // @@protoc_insertion_point(field_release:webapk.WebAppManifest.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebAppManifest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.WebAppManifest.id)
}

// -------------------------------------------------------------------

// Image

// optional string src = 1;
inline bool Image::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Image::has_src() const {
  return _internal_has_src();
}
inline void Image::clear_src() {
  src_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Image::src() const {
  // @@protoc_insertion_point(field_get:webapk.Image.src)
  return _internal_src();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Image::set_src(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 src_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.Image.src)
}
inline std::string* Image::mutable_src() {
  std::string* _s = _internal_mutable_src();
  // @@protoc_insertion_point(field_mutable:webapk.Image.src)
  return _s;
}
inline const std::string& Image::_internal_src() const {
  return src_.Get();
}
inline void Image::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.Set(value, GetArenaForAllocation());
}
inline std::string* Image::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.Mutable(GetArenaForAllocation());
}
inline std::string* Image::release_src() {
  // @@protoc_insertion_point(field_release:webapk.Image.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = src_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (src_.IsDefault()) {
    src_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Image::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocated(src, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (src_.IsDefault()) {
    src_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.Image.src)
}

// optional string hash = 5;
inline bool Image::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Image::has_hash() const {
  return _internal_has_hash();
}
inline void Image::clear_hash() {
  hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Image::hash() const {
  // @@protoc_insertion_point(field_get:webapk.Image.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Image::set_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.Image.hash)
}
inline std::string* Image::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:webapk.Image.hash)
  return _s;
}
inline const std::string& Image::_internal_hash() const {
  return hash_.Get();
}
inline void Image::_internal_set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  hash_.Set(value, GetArenaForAllocation());
}
inline std::string* Image::_internal_mutable_hash() {
  _has_bits_[0] |= 0x00000002u;
  return hash_.Mutable(GetArenaForAllocation());
}
inline std::string* Image::release_hash() {
  // @@protoc_insertion_point(field_release:webapk.Image.hash)
  if (!_internal_has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault()) {
    hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Image::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault()) {
    hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.Image.hash)
}

// optional bytes image_data = 6;
inline bool Image::_internal_has_image_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Image::has_image_data() const {
  return _internal_has_image_data();
}
inline void Image::clear_image_data() {
  image_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Image::image_data() const {
  // @@protoc_insertion_point(field_get:webapk.Image.image_data)
  return _internal_image_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Image::set_image_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 image_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.Image.image_data)
}
inline std::string* Image::mutable_image_data() {
  std::string* _s = _internal_mutable_image_data();
  // @@protoc_insertion_point(field_mutable:webapk.Image.image_data)
  return _s;
}
inline const std::string& Image::_internal_image_data() const {
  return image_data_.Get();
}
inline void Image::_internal_set_image_data(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  image_data_.Set(value, GetArenaForAllocation());
}
inline std::string* Image::_internal_mutable_image_data() {
  _has_bits_[0] |= 0x00000004u;
  return image_data_.Mutable(GetArenaForAllocation());
}
inline std::string* Image::release_image_data() {
  // @@protoc_insertion_point(field_release:webapk.Image.image_data)
  if (!_internal_has_image_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = image_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_data_.IsDefault()) {
    image_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Image::set_allocated_image_data(std::string* image_data) {
  if (image_data != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  image_data_.SetAllocated(image_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_data_.IsDefault()) {
    image_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.Image.image_data)
}

// repeated .webapk.Image.Purpose purposes = 7;
inline int Image::_internal_purposes_size() const {
  return purposes_.size();
}
inline int Image::purposes_size() const {
  return _internal_purposes_size();
}
inline void Image::clear_purposes() {
  purposes_.Clear();
}
inline ::webapk::Image_Purpose Image::_internal_purposes(int index) const {
  return static_cast< ::webapk::Image_Purpose >(purposes_.Get(index));
}
inline ::webapk::Image_Purpose Image::purposes(int index) const {
  // @@protoc_insertion_point(field_get:webapk.Image.purposes)
  return _internal_purposes(index);
}
inline void Image::set_purposes(int index, ::webapk::Image_Purpose value) {
  assert(::webapk::Image_Purpose_IsValid(value));
  purposes_.Set(index, value);
  // @@protoc_insertion_point(field_set:webapk.Image.purposes)
}
inline void Image::_internal_add_purposes(::webapk::Image_Purpose value) {
  assert(::webapk::Image_Purpose_IsValid(value));
  purposes_.Add(value);
}
inline void Image::add_purposes(::webapk::Image_Purpose value) {
  _internal_add_purposes(value);
  // @@protoc_insertion_point(field_add:webapk.Image.purposes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Image::purposes() const {
  // @@protoc_insertion_point(field_list:webapk.Image.purposes)
  return purposes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Image::_internal_mutable_purposes() {
  return &purposes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Image::mutable_purposes() {
  // @@protoc_insertion_point(field_mutable_list:webapk.Image.purposes)
  return _internal_mutable_purposes();
}

// repeated .webapk.Image.Usage usages = 8;
inline int Image::_internal_usages_size() const {
  return usages_.size();
}
inline int Image::usages_size() const {
  return _internal_usages_size();
}
inline void Image::clear_usages() {
  usages_.Clear();
}
inline ::webapk::Image_Usage Image::_internal_usages(int index) const {
  return static_cast< ::webapk::Image_Usage >(usages_.Get(index));
}
inline ::webapk::Image_Usage Image::usages(int index) const {
  // @@protoc_insertion_point(field_get:webapk.Image.usages)
  return _internal_usages(index);
}
inline void Image::set_usages(int index, ::webapk::Image_Usage value) {
  assert(::webapk::Image_Usage_IsValid(value));
  usages_.Set(index, value);
  // @@protoc_insertion_point(field_set:webapk.Image.usages)
}
inline void Image::_internal_add_usages(::webapk::Image_Usage value) {
  assert(::webapk::Image_Usage_IsValid(value));
  usages_.Add(value);
}
inline void Image::add_usages(::webapk::Image_Usage value) {
  _internal_add_usages(value);
  // @@protoc_insertion_point(field_add:webapk.Image.usages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Image::usages() const {
  // @@protoc_insertion_point(field_list:webapk.Image.usages)
  return usages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Image::_internal_mutable_usages() {
  return &usages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Image::mutable_usages() {
  // @@protoc_insertion_point(field_mutable_list:webapk.Image.usages)
  return _internal_mutable_usages();
}

// -------------------------------------------------------------------

// ShareTargetParamsFile

// optional string name = 1;
inline bool ShareTargetParamsFile::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShareTargetParamsFile::has_name() const {
  return _internal_has_name();
}
inline void ShareTargetParamsFile::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ShareTargetParamsFile::name() const {
  // @@protoc_insertion_point(field_get:webapk.ShareTargetParamsFile.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShareTargetParamsFile::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.ShareTargetParamsFile.name)
}
inline std::string* ShareTargetParamsFile::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:webapk.ShareTargetParamsFile.name)
  return _s;
}
inline const std::string& ShareTargetParamsFile::_internal_name() const {
  return name_.Get();
}
inline void ShareTargetParamsFile::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ShareTargetParamsFile::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ShareTargetParamsFile::release_name() {
  // @@protoc_insertion_point(field_release:webapk.ShareTargetParamsFile.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShareTargetParamsFile::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.ShareTargetParamsFile.name)
}

// repeated string accept = 2;
inline int ShareTargetParamsFile::_internal_accept_size() const {
  return accept_.size();
}
inline int ShareTargetParamsFile::accept_size() const {
  return _internal_accept_size();
}
inline void ShareTargetParamsFile::clear_accept() {
  accept_.Clear();
}
inline std::string* ShareTargetParamsFile::add_accept() {
  std::string* _s = _internal_add_accept();
  // @@protoc_insertion_point(field_add_mutable:webapk.ShareTargetParamsFile.accept)
  return _s;
}
inline const std::string& ShareTargetParamsFile::_internal_accept(int index) const {
  return accept_.Get(index);
}
inline const std::string& ShareTargetParamsFile::accept(int index) const {
  // @@protoc_insertion_point(field_get:webapk.ShareTargetParamsFile.accept)
  return _internal_accept(index);
}
inline std::string* ShareTargetParamsFile::mutable_accept(int index) {
  // @@protoc_insertion_point(field_mutable:webapk.ShareTargetParamsFile.accept)
  return accept_.Mutable(index);
}
inline void ShareTargetParamsFile::set_accept(int index, const std::string& value) {
  accept_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:webapk.ShareTargetParamsFile.accept)
}
inline void ShareTargetParamsFile::set_accept(int index, std::string&& value) {
  accept_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:webapk.ShareTargetParamsFile.accept)
}
inline void ShareTargetParamsFile::set_accept(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  accept_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:webapk.ShareTargetParamsFile.accept)
}
inline void ShareTargetParamsFile::set_accept(int index, const char* value, size_t size) {
  accept_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:webapk.ShareTargetParamsFile.accept)
}
inline std::string* ShareTargetParamsFile::_internal_add_accept() {
  return accept_.Add();
}
inline void ShareTargetParamsFile::add_accept(const std::string& value) {
  accept_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:webapk.ShareTargetParamsFile.accept)
}
inline void ShareTargetParamsFile::add_accept(std::string&& value) {
  accept_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:webapk.ShareTargetParamsFile.accept)
}
inline void ShareTargetParamsFile::add_accept(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  accept_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:webapk.ShareTargetParamsFile.accept)
}
inline void ShareTargetParamsFile::add_accept(const char* value, size_t size) {
  accept_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:webapk.ShareTargetParamsFile.accept)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ShareTargetParamsFile::accept() const {
  // @@protoc_insertion_point(field_list:webapk.ShareTargetParamsFile.accept)
  return accept_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ShareTargetParamsFile::mutable_accept() {
  // @@protoc_insertion_point(field_mutable_list:webapk.ShareTargetParamsFile.accept)
  return &accept_;
}

// -------------------------------------------------------------------

// ShareTargetParams

// optional string title = 1;
inline bool ShareTargetParams::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShareTargetParams::has_title() const {
  return _internal_has_title();
}
inline void ShareTargetParams::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ShareTargetParams::title() const {
  // @@protoc_insertion_point(field_get:webapk.ShareTargetParams.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShareTargetParams::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.ShareTargetParams.title)
}
inline std::string* ShareTargetParams::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:webapk.ShareTargetParams.title)
  return _s;
}
inline const std::string& ShareTargetParams::_internal_title() const {
  return title_.Get();
}
inline void ShareTargetParams::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* ShareTargetParams::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* ShareTargetParams::release_title() {
  // @@protoc_insertion_point(field_release:webapk.ShareTargetParams.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShareTargetParams::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.ShareTargetParams.title)
}

// optional string text = 2;
inline bool ShareTargetParams::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShareTargetParams::has_text() const {
  return _internal_has_text();
}
inline void ShareTargetParams::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ShareTargetParams::text() const {
  // @@protoc_insertion_point(field_get:webapk.ShareTargetParams.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShareTargetParams::set_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.ShareTargetParams.text)
}
inline std::string* ShareTargetParams::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:webapk.ShareTargetParams.text)
  return _s;
}
inline const std::string& ShareTargetParams::_internal_text() const {
  return text_.Get();
}
inline void ShareTargetParams::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  text_.Set(value, GetArenaForAllocation());
}
inline std::string* ShareTargetParams::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000002u;
  return text_.Mutable(GetArenaForAllocation());
}
inline std::string* ShareTargetParams::release_text() {
  // @@protoc_insertion_point(field_release:webapk.ShareTargetParams.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = text_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault()) {
    text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShareTargetParams::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault()) {
    text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.ShareTargetParams.text)
}

// optional string url = 3;
inline bool ShareTargetParams::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ShareTargetParams::has_url() const {
  return _internal_has_url();
}
inline void ShareTargetParams::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ShareTargetParams::url() const {
  // @@protoc_insertion_point(field_get:webapk.ShareTargetParams.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShareTargetParams::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.ShareTargetParams.url)
}
inline std::string* ShareTargetParams::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:webapk.ShareTargetParams.url)
  return _s;
}
inline const std::string& ShareTargetParams::_internal_url() const {
  return url_.Get();
}
inline void ShareTargetParams::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* ShareTargetParams::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000004u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* ShareTargetParams::release_url() {
  // @@protoc_insertion_point(field_release:webapk.ShareTargetParams.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShareTargetParams::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.ShareTargetParams.url)
}

// repeated .webapk.ShareTargetParamsFile files = 4;
inline int ShareTargetParams::_internal_files_size() const {
  return files_.size();
}
inline int ShareTargetParams::files_size() const {
  return _internal_files_size();
}
inline void ShareTargetParams::clear_files() {
  files_.Clear();
}
inline ::webapk::ShareTargetParamsFile* ShareTargetParams::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:webapk.ShareTargetParams.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::ShareTargetParamsFile >*
ShareTargetParams::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:webapk.ShareTargetParams.files)
  return &files_;
}
inline const ::webapk::ShareTargetParamsFile& ShareTargetParams::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::webapk::ShareTargetParamsFile& ShareTargetParams::files(int index) const {
  // @@protoc_insertion_point(field_get:webapk.ShareTargetParams.files)
  return _internal_files(index);
}
inline ::webapk::ShareTargetParamsFile* ShareTargetParams::_internal_add_files() {
  return files_.Add();
}
inline ::webapk::ShareTargetParamsFile* ShareTargetParams::add_files() {
  ::webapk::ShareTargetParamsFile* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:webapk.ShareTargetParams.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::ShareTargetParamsFile >&
ShareTargetParams::files() const {
  // @@protoc_insertion_point(field_list:webapk.ShareTargetParams.files)
  return files_;
}

// -------------------------------------------------------------------

// ShareTarget

// optional string action = 2;
inline bool ShareTarget::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShareTarget::has_action() const {
  return _internal_has_action();
}
inline void ShareTarget::clear_action() {
  action_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ShareTarget::action() const {
  // @@protoc_insertion_point(field_get:webapk.ShareTarget.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShareTarget::set_action(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.ShareTarget.action)
}
inline std::string* ShareTarget::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:webapk.ShareTarget.action)
  return _s;
}
inline const std::string& ShareTarget::_internal_action() const {
  return action_.Get();
}
inline void ShareTarget::_internal_set_action(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  action_.Set(value, GetArenaForAllocation());
}
inline std::string* ShareTarget::_internal_mutable_action() {
  _has_bits_[0] |= 0x00000001u;
  return action_.Mutable(GetArenaForAllocation());
}
inline std::string* ShareTarget::release_action() {
  // @@protoc_insertion_point(field_release:webapk.ShareTarget.action)
  if (!_internal_has_action()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = action_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault()) {
    action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShareTarget::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_.IsDefault()) {
    action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.ShareTarget.action)
}

// optional .webapk.ShareTargetParams params = 3;
inline bool ShareTarget::_internal_has_params() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || params_ != nullptr);
  return value;
}
inline bool ShareTarget::has_params() const {
  return _internal_has_params();
}
inline void ShareTarget::clear_params() {
  if (params_ != nullptr) params_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::webapk::ShareTargetParams& ShareTarget::_internal_params() const {
  const ::webapk::ShareTargetParams* p = params_;
  return p != nullptr ? *p : reinterpret_cast<const ::webapk::ShareTargetParams&>(
      ::webapk::_ShareTargetParams_default_instance_);
}
inline const ::webapk::ShareTargetParams& ShareTarget::params() const {
  // @@protoc_insertion_point(field_get:webapk.ShareTarget.params)
  return _internal_params();
}
inline void ShareTarget::unsafe_arena_set_allocated_params(
    ::webapk::ShareTargetParams* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  params_ = params;
  if (params) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:webapk.ShareTarget.params)
}
inline ::webapk::ShareTargetParams* ShareTarget::release_params() {
  _has_bits_[0] &= ~0x00000008u;
  ::webapk::ShareTargetParams* temp = params_;
  params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::webapk::ShareTargetParams* ShareTarget::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:webapk.ShareTarget.params)
  _has_bits_[0] &= ~0x00000008u;
  ::webapk::ShareTargetParams* temp = params_;
  params_ = nullptr;
  return temp;
}
inline ::webapk::ShareTargetParams* ShareTarget::_internal_mutable_params() {
  _has_bits_[0] |= 0x00000008u;
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<::webapk::ShareTargetParams>(GetArenaForAllocation());
    params_ = p;
  }
  return params_;
}
inline ::webapk::ShareTargetParams* ShareTarget::mutable_params() {
  ::webapk::ShareTargetParams* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:webapk.ShareTarget.params)
  return _msg;
}
inline void ShareTarget::set_allocated_params(::webapk::ShareTargetParams* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:webapk.ShareTarget.params)
}

// optional string method = 4;
inline bool ShareTarget::_internal_has_method() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShareTarget::has_method() const {
  return _internal_has_method();
}
inline void ShareTarget::clear_method() {
  method_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ShareTarget::method() const {
  // @@protoc_insertion_point(field_get:webapk.ShareTarget.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShareTarget::set_method(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.ShareTarget.method)
}
inline std::string* ShareTarget::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:webapk.ShareTarget.method)
  return _s;
}
inline const std::string& ShareTarget::_internal_method() const {
  return method_.Get();
}
inline void ShareTarget::_internal_set_method(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  method_.Set(value, GetArenaForAllocation());
}
inline std::string* ShareTarget::_internal_mutable_method() {
  _has_bits_[0] |= 0x00000002u;
  return method_.Mutable(GetArenaForAllocation());
}
inline std::string* ShareTarget::release_method() {
  // @@protoc_insertion_point(field_release:webapk.ShareTarget.method)
  if (!_internal_has_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = method_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_.IsDefault()) {
    method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShareTarget::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  method_.SetAllocated(method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_.IsDefault()) {
    method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.ShareTarget.method)
}

// optional string enctype = 5;
inline bool ShareTarget::_internal_has_enctype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ShareTarget::has_enctype() const {
  return _internal_has_enctype();
}
inline void ShareTarget::clear_enctype() {
  enctype_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ShareTarget::enctype() const {
  // @@protoc_insertion_point(field_get:webapk.ShareTarget.enctype)
  return _internal_enctype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShareTarget::set_enctype(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 enctype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.ShareTarget.enctype)
}
inline std::string* ShareTarget::mutable_enctype() {
  std::string* _s = _internal_mutable_enctype();
  // @@protoc_insertion_point(field_mutable:webapk.ShareTarget.enctype)
  return _s;
}
inline const std::string& ShareTarget::_internal_enctype() const {
  return enctype_.Get();
}
inline void ShareTarget::_internal_set_enctype(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  enctype_.Set(value, GetArenaForAllocation());
}
inline std::string* ShareTarget::_internal_mutable_enctype() {
  _has_bits_[0] |= 0x00000004u;
  return enctype_.Mutable(GetArenaForAllocation());
}
inline std::string* ShareTarget::release_enctype() {
  // @@protoc_insertion_point(field_release:webapk.ShareTarget.enctype)
  if (!_internal_has_enctype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = enctype_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (enctype_.IsDefault()) {
    enctype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShareTarget::set_allocated_enctype(std::string* enctype) {
  if (enctype != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  enctype_.SetAllocated(enctype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (enctype_.IsDefault()) {
    enctype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.ShareTarget.enctype)
}

// -------------------------------------------------------------------

// ShortcutItem

// optional string name = 1;
inline bool ShortcutItem::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShortcutItem::has_name() const {
  return _internal_has_name();
}
inline void ShortcutItem::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ShortcutItem::name() const {
  // @@protoc_insertion_point(field_get:webapk.ShortcutItem.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShortcutItem::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.ShortcutItem.name)
}
inline std::string* ShortcutItem::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:webapk.ShortcutItem.name)
  return _s;
}
inline const std::string& ShortcutItem::_internal_name() const {
  return name_.Get();
}
inline void ShortcutItem::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ShortcutItem::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ShortcutItem::release_name() {
  // @@protoc_insertion_point(field_release:webapk.ShortcutItem.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShortcutItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.ShortcutItem.name)
}

// optional string short_name = 2;
inline bool ShortcutItem::_internal_has_short_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShortcutItem::has_short_name() const {
  return _internal_has_short_name();
}
inline void ShortcutItem::clear_short_name() {
  short_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ShortcutItem::short_name() const {
  // @@protoc_insertion_point(field_get:webapk.ShortcutItem.short_name)
  return _internal_short_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShortcutItem::set_short_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 short_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.ShortcutItem.short_name)
}
inline std::string* ShortcutItem::mutable_short_name() {
  std::string* _s = _internal_mutable_short_name();
  // @@protoc_insertion_point(field_mutable:webapk.ShortcutItem.short_name)
  return _s;
}
inline const std::string& ShortcutItem::_internal_short_name() const {
  return short_name_.Get();
}
inline void ShortcutItem::_internal_set_short_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  short_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ShortcutItem::_internal_mutable_short_name() {
  _has_bits_[0] |= 0x00000002u;
  return short_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ShortcutItem::release_short_name() {
  // @@protoc_insertion_point(field_release:webapk.ShortcutItem.short_name)
  if (!_internal_has_short_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = short_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (short_name_.IsDefault()) {
    short_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShortcutItem::set_allocated_short_name(std::string* short_name) {
  if (short_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  short_name_.SetAllocated(short_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (short_name_.IsDefault()) {
    short_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.ShortcutItem.short_name)
}

// optional string url = 3;
inline bool ShortcutItem::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ShortcutItem::has_url() const {
  return _internal_has_url();
}
inline void ShortcutItem::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ShortcutItem::url() const {
  // @@protoc_insertion_point(field_get:webapk.ShortcutItem.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShortcutItem::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:webapk.ShortcutItem.url)
}
inline std::string* ShortcutItem::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:webapk.ShortcutItem.url)
  return _s;
}
inline const std::string& ShortcutItem::_internal_url() const {
  return url_.Get();
}
inline void ShortcutItem::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* ShortcutItem::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000004u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* ShortcutItem::release_url() {
  // @@protoc_insertion_point(field_release:webapk.ShortcutItem.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShortcutItem::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:webapk.ShortcutItem.url)
}

// repeated .webapk.Image icons = 4;
inline int ShortcutItem::_internal_icons_size() const {
  return icons_.size();
}
inline int ShortcutItem::icons_size() const {
  return _internal_icons_size();
}
inline void ShortcutItem::clear_icons() {
  icons_.Clear();
}
inline ::webapk::Image* ShortcutItem::mutable_icons(int index) {
  // @@protoc_insertion_point(field_mutable:webapk.ShortcutItem.icons)
  return icons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::Image >*
ShortcutItem::mutable_icons() {
  // @@protoc_insertion_point(field_mutable_list:webapk.ShortcutItem.icons)
  return &icons_;
}
inline const ::webapk::Image& ShortcutItem::_internal_icons(int index) const {
  return icons_.Get(index);
}
inline const ::webapk::Image& ShortcutItem::icons(int index) const {
  // @@protoc_insertion_point(field_get:webapk.ShortcutItem.icons)
  return _internal_icons(index);
}
inline ::webapk::Image* ShortcutItem::_internal_add_icons() {
  return icons_.Add();
}
inline ::webapk::Image* ShortcutItem::add_icons() {
  ::webapk::Image* _add = _internal_add_icons();
  // @@protoc_insertion_point(field_add:webapk.ShortcutItem.icons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::webapk::Image >&
ShortcutItem::icons() const {
  // @@protoc_insertion_point(field_list:webapk.ShortcutItem.icons)
  return icons_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace webapk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::webapk::WebApk_UpdateReason> : ::std::true_type {};
template <> struct is_proto_enum< ::webapk::Image_Usage> : ::std::true_type {};
template <> struct is_proto_enum< ::webapk::Image_Purpose> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_webapk_2eproto
