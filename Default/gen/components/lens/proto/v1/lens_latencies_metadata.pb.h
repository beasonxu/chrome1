// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lens_latencies_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lens_5flatencies_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lens_5flatencies_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lens_5flatencies_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lens_5flatencies_5fmetadata_2eproto {
  static const uint32_t offsets[];
};
namespace lens {
namespace proto {
namespace lens_latencies_metadata {
class ChromeSpecificPhaseLatenciesMetadata;
struct ChromeSpecificPhaseLatenciesMetadataDefaultTypeInternal;
extern ChromeSpecificPhaseLatenciesMetadataDefaultTypeInternal _ChromeSpecificPhaseLatenciesMetadata_default_instance_;
class ChromeSpecificPhaseLatenciesMetadata_Phase;
struct ChromeSpecificPhaseLatenciesMetadata_PhaseDefaultTypeInternal;
extern ChromeSpecificPhaseLatenciesMetadata_PhaseDefaultTypeInternal _ChromeSpecificPhaseLatenciesMetadata_Phase_default_instance_;
class ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData;
struct ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleDataDefaultTypeInternal;
extern ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleDataDefaultTypeInternal _ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData_default_instance_;
class ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData;
struct ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeDataDefaultTypeInternal;
extern ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeDataDefaultTypeInternal _ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData_default_instance_;
class ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp;
struct ChromeSpecificPhaseLatenciesMetadata_Phase_TimestampDefaultTypeInternal;
extern ChromeSpecificPhaseLatenciesMetadata_Phase_TimestampDefaultTypeInternal _ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp_default_instance_;
}  // namespace lens_latencies_metadata
}  // namespace proto
}  // namespace lens
PROTOBUF_NAMESPACE_OPEN
template<> ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata* Arena::CreateMaybeMessage<::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata>(Arena*);
template<> ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase* Arena::CreateMaybeMessage<::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase>(Arena*);
template<> ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* Arena::CreateMaybeMessage<::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData>(Arena*);
template<> ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* Arena::CreateMaybeMessage<::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData>(Arena*);
template<> ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* Arena::CreateMaybeMessage<::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lens {
namespace proto {
namespace lens_latencies_metadata {

enum ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType : int {
  ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_UNKNOWN_PHASE = 0,
  ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_OVERALL_START = 1,
  ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_IMAGE_DOWNSCALE_START = 2,
  ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_IMAGE_DOWNSCALE_END = 3,
  ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_IMAGE_ENCODE_START = 4,
  ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_IMAGE_ENCODE_END = 5
};
bool ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_IsValid(int value);
constexpr ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_PhaseType_MIN = ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_UNKNOWN_PHASE;
constexpr ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_PhaseType_MAX = ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_IMAGE_ENCODE_END;
constexpr int ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_PhaseType_ARRAYSIZE = ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_PhaseType_MAX + 1;

const std::string& ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_Name(ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType value);
template<typename T>
inline const std::string& ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_Name.");
  return ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_Name(static_cast<ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType>(enum_t_value));
}
bool ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType* value);
enum ChromeSpecificPhaseLatenciesMetadata_ImageType : int {
  ChromeSpecificPhaseLatenciesMetadata_ImageType_UNKNOWN = 0,
  ChromeSpecificPhaseLatenciesMetadata_ImageType_JPEG = 1,
  ChromeSpecificPhaseLatenciesMetadata_ImageType_PNG = 2
};
bool ChromeSpecificPhaseLatenciesMetadata_ImageType_IsValid(int value);
constexpr ChromeSpecificPhaseLatenciesMetadata_ImageType ChromeSpecificPhaseLatenciesMetadata_ImageType_ImageType_MIN = ChromeSpecificPhaseLatenciesMetadata_ImageType_UNKNOWN;
constexpr ChromeSpecificPhaseLatenciesMetadata_ImageType ChromeSpecificPhaseLatenciesMetadata_ImageType_ImageType_MAX = ChromeSpecificPhaseLatenciesMetadata_ImageType_PNG;
constexpr int ChromeSpecificPhaseLatenciesMetadata_ImageType_ImageType_ARRAYSIZE = ChromeSpecificPhaseLatenciesMetadata_ImageType_ImageType_MAX + 1;

const std::string& ChromeSpecificPhaseLatenciesMetadata_ImageType_Name(ChromeSpecificPhaseLatenciesMetadata_ImageType value);
template<typename T>
inline const std::string& ChromeSpecificPhaseLatenciesMetadata_ImageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeSpecificPhaseLatenciesMetadata_ImageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeSpecificPhaseLatenciesMetadata_ImageType_Name.");
  return ChromeSpecificPhaseLatenciesMetadata_ImageType_Name(static_cast<ChromeSpecificPhaseLatenciesMetadata_ImageType>(enum_t_value));
}
bool ChromeSpecificPhaseLatenciesMetadata_ImageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeSpecificPhaseLatenciesMetadata_ImageType* value);
// ===================================================================

class ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp) */ {
 public:
  inline ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp() : ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp(nullptr) {}
  ~ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp() override;
  explicit PROTOBUF_CONSTEXPR ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp(const ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp& from);
  ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp(ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp&& from) noexcept
    : ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp() {
    *this = ::std::move(from);
  }

  inline ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp& operator=(const ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp& operator=(ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* internal_default_instance() {
    return reinterpret_cast<const ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp*>(
               &_ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp& a, ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp& from);
  void MergeFrom(const ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp";
  }
  protected:
  explicit ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
    kNanosFieldNumber = 2,
  };
  // optional int64 seconds = 1;
  bool has_seconds() const;
  private:
  bool _internal_has_seconds() const;
  public:
  void clear_seconds();
  int64_t seconds() const;
  void set_seconds(int64_t value);
  private:
  int64_t _internal_seconds() const;
  void _internal_set_seconds(int64_t value);
  public:

  // optional int32 nanos = 2;
  bool has_nanos() const;
  private:
  bool _internal_has_nanos() const;
  public:
  void clear_nanos();
  int32_t nanos() const;
  void set_nanos(int32_t value);
  private:
  int32_t _internal_nanos() const;
  void _internal_set_nanos(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t seconds_;
  int32_t nanos_;
  friend struct ::TableStruct_lens_5flatencies_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData) */ {
 public:
  inline ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData() : ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData(nullptr) {}
  ~ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData() override;
  explicit PROTOBUF_CONSTEXPR ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData(const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData& from);
  ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData(ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData&& from) noexcept
    : ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData() {
    *this = ::std::move(from);
  }

  inline ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData& operator=(const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData& operator=(ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* internal_default_instance() {
    return reinterpret_cast<const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData*>(
               &_ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData& a, ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData& from);
  void MergeFrom(const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData";
  }
  protected:
  explicit ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalImageSizeFieldNumber = 1,
    kDownscaledImageByteSizeFieldNumber = 2,
  };
  // optional int64 original_image_size = 1;
  bool has_original_image_size() const;
  private:
  bool _internal_has_original_image_size() const;
  public:
  void clear_original_image_size();
  int64_t original_image_size() const;
  void set_original_image_size(int64_t value);
  private:
  int64_t _internal_original_image_size() const;
  void _internal_set_original_image_size(int64_t value);
  public:

  // optional int64 downscaled_image_byte_size = 2;
  bool has_downscaled_image_byte_size() const;
  private:
  bool _internal_has_downscaled_image_byte_size() const;
  public:
  void clear_downscaled_image_byte_size();
  int64_t downscaled_image_byte_size() const;
  void set_downscaled_image_byte_size(int64_t value);
  private:
  int64_t _internal_downscaled_image_byte_size() const;
  void _internal_set_downscaled_image_byte_size(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t original_image_size_;
  int64_t downscaled_image_byte_size_;
  friend struct ::TableStruct_lens_5flatencies_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageEncodeData) */ {
 public:
  inline ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData() : ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData(nullptr) {}
  ~ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData() override;
  explicit PROTOBUF_CONSTEXPR ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData(const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData& from);
  ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData(ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData&& from) noexcept
    : ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData() {
    *this = ::std::move(from);
  }

  inline ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData& operator=(const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData& operator=(ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* internal_default_instance() {
    return reinterpret_cast<const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData*>(
               &_ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData& a, ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData& from);
  void MergeFrom(const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageEncodeData";
  }
  protected:
  explicit ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalImageTypeFieldNumber = 1,
  };
  // optional .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.ImageType original_image_type = 1;
  bool has_original_image_type() const;
  private:
  bool _internal_has_original_image_type() const;
  public:
  void clear_original_image_type();
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_ImageType original_image_type() const;
  void set_original_image_type(::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_ImageType value);
  private:
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_ImageType _internal_original_image_type() const;
  void _internal_set_original_image_type(::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_ImageType value);
  public:

  // @@protoc_insertion_point(class_scope:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageEncodeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int original_image_type_;
  friend struct ::TableStruct_lens_5flatencies_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class ChromeSpecificPhaseLatenciesMetadata_Phase final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase) */ {
 public:
  inline ChromeSpecificPhaseLatenciesMetadata_Phase() : ChromeSpecificPhaseLatenciesMetadata_Phase(nullptr) {}
  ~ChromeSpecificPhaseLatenciesMetadata_Phase() override;
  explicit PROTOBUF_CONSTEXPR ChromeSpecificPhaseLatenciesMetadata_Phase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeSpecificPhaseLatenciesMetadata_Phase(const ChromeSpecificPhaseLatenciesMetadata_Phase& from);
  ChromeSpecificPhaseLatenciesMetadata_Phase(ChromeSpecificPhaseLatenciesMetadata_Phase&& from) noexcept
    : ChromeSpecificPhaseLatenciesMetadata_Phase() {
    *this = ::std::move(from);
  }

  inline ChromeSpecificPhaseLatenciesMetadata_Phase& operator=(const ChromeSpecificPhaseLatenciesMetadata_Phase& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeSpecificPhaseLatenciesMetadata_Phase& operator=(ChromeSpecificPhaseLatenciesMetadata_Phase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeSpecificPhaseLatenciesMetadata_Phase& default_instance() {
    return *internal_default_instance();
  }
  enum PhaseDataCase {
    kImageDownscaleData = 3,
    kImageEncodeData = 4,
    PHASE_DATA_NOT_SET = 0,
  };

  static inline const ChromeSpecificPhaseLatenciesMetadata_Phase* internal_default_instance() {
    return reinterpret_cast<const ChromeSpecificPhaseLatenciesMetadata_Phase*>(
               &_ChromeSpecificPhaseLatenciesMetadata_Phase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChromeSpecificPhaseLatenciesMetadata_Phase& a, ChromeSpecificPhaseLatenciesMetadata_Phase& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeSpecificPhaseLatenciesMetadata_Phase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeSpecificPhaseLatenciesMetadata_Phase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeSpecificPhaseLatenciesMetadata_Phase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeSpecificPhaseLatenciesMetadata_Phase>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeSpecificPhaseLatenciesMetadata_Phase& from);
  void MergeFrom(const ChromeSpecificPhaseLatenciesMetadata_Phase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeSpecificPhaseLatenciesMetadata_Phase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase";
  }
  protected:
  explicit ChromeSpecificPhaseLatenciesMetadata_Phase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp Timestamp;
  typedef ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData ImageDownscaleData;
  typedef ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData ImageEncodeData;

  typedef ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType PhaseType;
  static constexpr PhaseType UNKNOWN_PHASE =
    ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_UNKNOWN_PHASE;
  static constexpr PhaseType OVERALL_START =
    ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_OVERALL_START;
  static constexpr PhaseType IMAGE_DOWNSCALE_START =
    ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_IMAGE_DOWNSCALE_START;
  static constexpr PhaseType IMAGE_DOWNSCALE_END =
    ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_IMAGE_DOWNSCALE_END;
  static constexpr PhaseType IMAGE_ENCODE_START =
    ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_IMAGE_ENCODE_START;
  static constexpr PhaseType IMAGE_ENCODE_END =
    ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_IMAGE_ENCODE_END;
  static inline bool PhaseType_IsValid(int value) {
    return ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_IsValid(value);
  }
  static constexpr PhaseType PhaseType_MIN =
    ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_PhaseType_MIN;
  static constexpr PhaseType PhaseType_MAX =
    ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_PhaseType_MAX;
  static constexpr int PhaseType_ARRAYSIZE =
    ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_PhaseType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PhaseType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PhaseType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PhaseType_Name.");
    return ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_Name(enum_t_value);
  }
  static inline bool PhaseType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PhaseType* value) {
    return ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 2,
    kPhaseTypeFieldNumber = 1,
    kImageDownscaleDataFieldNumber = 3,
    kImageEncodeDataFieldNumber = 4,
  };
  // optional .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* release_timestamp();
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* timestamp);
  private:
  const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp& _internal_timestamp() const;
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* timestamp);
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* unsafe_arena_release_timestamp();

  // optional .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.PhaseType phase_type = 1;
  bool has_phase_type() const;
  private:
  bool _internal_has_phase_type() const;
  public:
  void clear_phase_type();
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType phase_type() const;
  void set_phase_type(::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType value);
  private:
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType _internal_phase_type() const;
  void _internal_set_phase_type(::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType value);
  public:

  // .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData image_downscale_data = 3;
  bool has_image_downscale_data() const;
  private:
  bool _internal_has_image_downscale_data() const;
  public:
  void clear_image_downscale_data();
  const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData& image_downscale_data() const;
  PROTOBUF_NODISCARD ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* release_image_downscale_data();
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* mutable_image_downscale_data();
  void set_allocated_image_downscale_data(::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* image_downscale_data);
  private:
  const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData& _internal_image_downscale_data() const;
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* _internal_mutable_image_downscale_data();
  public:
  void unsafe_arena_set_allocated_image_downscale_data(
      ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* image_downscale_data);
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* unsafe_arena_release_image_downscale_data();

  // .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageEncodeData image_encode_data = 4;
  bool has_image_encode_data() const;
  private:
  bool _internal_has_image_encode_data() const;
  public:
  void clear_image_encode_data();
  const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData& image_encode_data() const;
  PROTOBUF_NODISCARD ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* release_image_encode_data();
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* mutable_image_encode_data();
  void set_allocated_image_encode_data(::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* image_encode_data);
  private:
  const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData& _internal_image_encode_data() const;
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* _internal_mutable_image_encode_data();
  public:
  void unsafe_arena_set_allocated_image_encode_data(
      ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* image_encode_data);
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* unsafe_arena_release_image_encode_data();

  void clear_phase_data();
  PhaseDataCase phase_data_case() const;
  // @@protoc_insertion_point(class_scope:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase)
 private:
  class _Internal;
  void set_has_image_downscale_data();
  void set_has_image_encode_data();

  inline bool has_phase_data() const;
  inline void clear_has_phase_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* timestamp_;
  int phase_type_;
  union PhaseDataUnion {
    constexpr PhaseDataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* image_downscale_data_;
    ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* image_encode_data_;
  } phase_data_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_lens_5flatencies_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class ChromeSpecificPhaseLatenciesMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata) */ {
 public:
  inline ChromeSpecificPhaseLatenciesMetadata() : ChromeSpecificPhaseLatenciesMetadata(nullptr) {}
  ~ChromeSpecificPhaseLatenciesMetadata() override;
  explicit PROTOBUF_CONSTEXPR ChromeSpecificPhaseLatenciesMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeSpecificPhaseLatenciesMetadata(const ChromeSpecificPhaseLatenciesMetadata& from);
  ChromeSpecificPhaseLatenciesMetadata(ChromeSpecificPhaseLatenciesMetadata&& from) noexcept
    : ChromeSpecificPhaseLatenciesMetadata() {
    *this = ::std::move(from);
  }

  inline ChromeSpecificPhaseLatenciesMetadata& operator=(const ChromeSpecificPhaseLatenciesMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeSpecificPhaseLatenciesMetadata& operator=(ChromeSpecificPhaseLatenciesMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeSpecificPhaseLatenciesMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeSpecificPhaseLatenciesMetadata* internal_default_instance() {
    return reinterpret_cast<const ChromeSpecificPhaseLatenciesMetadata*>(
               &_ChromeSpecificPhaseLatenciesMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChromeSpecificPhaseLatenciesMetadata& a, ChromeSpecificPhaseLatenciesMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeSpecificPhaseLatenciesMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeSpecificPhaseLatenciesMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeSpecificPhaseLatenciesMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeSpecificPhaseLatenciesMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeSpecificPhaseLatenciesMetadata& from);
  void MergeFrom(const ChromeSpecificPhaseLatenciesMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeSpecificPhaseLatenciesMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata";
  }
  protected:
  explicit ChromeSpecificPhaseLatenciesMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeSpecificPhaseLatenciesMetadata_Phase Phase;

  typedef ChromeSpecificPhaseLatenciesMetadata_ImageType ImageType;
  static constexpr ImageType UNKNOWN =
    ChromeSpecificPhaseLatenciesMetadata_ImageType_UNKNOWN;
  static constexpr ImageType JPEG =
    ChromeSpecificPhaseLatenciesMetadata_ImageType_JPEG;
  static constexpr ImageType PNG =
    ChromeSpecificPhaseLatenciesMetadata_ImageType_PNG;
  static inline bool ImageType_IsValid(int value) {
    return ChromeSpecificPhaseLatenciesMetadata_ImageType_IsValid(value);
  }
  static constexpr ImageType ImageType_MIN =
    ChromeSpecificPhaseLatenciesMetadata_ImageType_ImageType_MIN;
  static constexpr ImageType ImageType_MAX =
    ChromeSpecificPhaseLatenciesMetadata_ImageType_ImageType_MAX;
  static constexpr int ImageType_ARRAYSIZE =
    ChromeSpecificPhaseLatenciesMetadata_ImageType_ImageType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ImageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ImageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ImageType_Name.");
    return ChromeSpecificPhaseLatenciesMetadata_ImageType_Name(enum_t_value);
  }
  static inline bool ImageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ImageType* value) {
    return ChromeSpecificPhaseLatenciesMetadata_ImageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPhaseFieldNumber = 1,
  };
  // repeated .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase phase = 1;
  int phase_size() const;
  private:
  int _internal_phase_size() const;
  public:
  void clear_phase();
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase* mutable_phase(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase >*
      mutable_phase();
  private:
  const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase& _internal_phase(int index) const;
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase* _internal_add_phase();
  public:
  const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase& phase(int index) const;
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase* add_phase();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase >&
      phase() const;

  // @@protoc_insertion_point(class_scope:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase > phase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lens_5flatencies_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp

// optional int64 seconds = 1;
inline bool ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::_internal_has_seconds() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::has_seconds() const {
  return _internal_has_seconds();
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::clear_seconds() {
  seconds_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::_internal_seconds() const {
  return seconds_;
}
inline int64_t ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::seconds() const {
  // @@protoc_insertion_point(field_get:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp.seconds)
  return _internal_seconds();
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::_internal_set_seconds(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  seconds_ = value;
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::set_seconds(int64_t value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp.seconds)
}

// optional int32 nanos = 2;
inline bool ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::_internal_has_nanos() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::has_nanos() const {
  return _internal_has_nanos();
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::clear_nanos() {
  nanos_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::_internal_nanos() const {
  return nanos_;
}
inline int32_t ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::nanos() const {
  // @@protoc_insertion_point(field_get:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp.nanos)
  return _internal_nanos();
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::_internal_set_nanos(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  nanos_ = value;
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::set_nanos(int32_t value) {
  _internal_set_nanos(value);
  // @@protoc_insertion_point(field_set:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp.nanos)
}

// -------------------------------------------------------------------

// ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData

// optional int64 original_image_size = 1;
inline bool ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::_internal_has_original_image_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::has_original_image_size() const {
  return _internal_has_original_image_size();
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::clear_original_image_size() {
  original_image_size_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::_internal_original_image_size() const {
  return original_image_size_;
}
inline int64_t ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::original_image_size() const {
  // @@protoc_insertion_point(field_get:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData.original_image_size)
  return _internal_original_image_size();
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::_internal_set_original_image_size(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  original_image_size_ = value;
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::set_original_image_size(int64_t value) {
  _internal_set_original_image_size(value);
  // @@protoc_insertion_point(field_set:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData.original_image_size)
}

// optional int64 downscaled_image_byte_size = 2;
inline bool ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::_internal_has_downscaled_image_byte_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::has_downscaled_image_byte_size() const {
  return _internal_has_downscaled_image_byte_size();
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::clear_downscaled_image_byte_size() {
  downscaled_image_byte_size_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::_internal_downscaled_image_byte_size() const {
  return downscaled_image_byte_size_;
}
inline int64_t ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::downscaled_image_byte_size() const {
  // @@protoc_insertion_point(field_get:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData.downscaled_image_byte_size)
  return _internal_downscaled_image_byte_size();
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::_internal_set_downscaled_image_byte_size(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  downscaled_image_byte_size_ = value;
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::set_downscaled_image_byte_size(int64_t value) {
  _internal_set_downscaled_image_byte_size(value);
  // @@protoc_insertion_point(field_set:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData.downscaled_image_byte_size)
}

// -------------------------------------------------------------------

// ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData

// optional .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.ImageType original_image_type = 1;
inline bool ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::_internal_has_original_image_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::has_original_image_type() const {
  return _internal_has_original_image_type();
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::clear_original_image_type() {
  original_image_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_ImageType ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::_internal_original_image_type() const {
  return static_cast< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_ImageType >(original_image_type_);
}
inline ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_ImageType ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::original_image_type() const {
  // @@protoc_insertion_point(field_get:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageEncodeData.original_image_type)
  return _internal_original_image_type();
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::_internal_set_original_image_type(::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_ImageType value) {
  assert(::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_ImageType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  original_image_type_ = value;
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::set_original_image_type(::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_ImageType value) {
  _internal_set_original_image_type(value);
  // @@protoc_insertion_point(field_set:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageEncodeData.original_image_type)
}

// -------------------------------------------------------------------

// ChromeSpecificPhaseLatenciesMetadata_Phase

// optional .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.PhaseType phase_type = 1;
inline bool ChromeSpecificPhaseLatenciesMetadata_Phase::_internal_has_phase_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChromeSpecificPhaseLatenciesMetadata_Phase::has_phase_type() const {
  return _internal_has_phase_type();
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase::clear_phase_type() {
  phase_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType ChromeSpecificPhaseLatenciesMetadata_Phase::_internal_phase_type() const {
  return static_cast< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType >(phase_type_);
}
inline ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType ChromeSpecificPhaseLatenciesMetadata_Phase::phase_type() const {
  // @@protoc_insertion_point(field_get:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.phase_type)
  return _internal_phase_type();
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase::_internal_set_phase_type(::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType value) {
  assert(::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  phase_type_ = value;
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase::set_phase_type(::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType value) {
  _internal_set_phase_type(value);
  // @@protoc_insertion_point(field_set:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.phase_type)
}

// optional .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp timestamp = 2;
inline bool ChromeSpecificPhaseLatenciesMetadata_Phase::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || timestamp_ != nullptr);
  return value;
}
inline bool ChromeSpecificPhaseLatenciesMetadata_Phase::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase::clear_timestamp() {
  if (timestamp_ != nullptr) timestamp_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp& ChromeSpecificPhaseLatenciesMetadata_Phase::_internal_timestamp() const {
  const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp&>(
      ::lens::proto::lens_latencies_metadata::_ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp_default_instance_);
}
inline const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp& ChromeSpecificPhaseLatenciesMetadata_Phase::timestamp() const {
  // @@protoc_insertion_point(field_get:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.timestamp)
  return _internal_timestamp();
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase::unsafe_arena_set_allocated_timestamp(
    ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.timestamp)
}
inline ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* ChromeSpecificPhaseLatenciesMetadata_Phase::release_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* ChromeSpecificPhaseLatenciesMetadata_Phase::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.timestamp)
  _has_bits_[0] &= ~0x00000001u;
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* ChromeSpecificPhaseLatenciesMetadata_Phase::_internal_mutable_timestamp() {
  _has_bits_[0] |= 0x00000001u;
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp>(GetArenaForAllocation());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* ChromeSpecificPhaseLatenciesMetadata_Phase::mutable_timestamp() {
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.timestamp)
  return _msg;
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase::set_allocated_timestamp(::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete timestamp_;
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(timestamp);
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.timestamp)
}

// .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData image_downscale_data = 3;
inline bool ChromeSpecificPhaseLatenciesMetadata_Phase::_internal_has_image_downscale_data() const {
  return phase_data_case() == kImageDownscaleData;
}
inline bool ChromeSpecificPhaseLatenciesMetadata_Phase::has_image_downscale_data() const {
  return _internal_has_image_downscale_data();
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase::set_has_image_downscale_data() {
  _oneof_case_[0] = kImageDownscaleData;
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase::clear_image_downscale_data() {
  if (_internal_has_image_downscale_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete phase_data_.image_downscale_data_;
    }
    clear_has_phase_data();
  }
}
inline ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* ChromeSpecificPhaseLatenciesMetadata_Phase::release_image_downscale_data() {
  // @@protoc_insertion_point(field_release:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.image_downscale_data)
  if (_internal_has_image_downscale_data()) {
    clear_has_phase_data();
    ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* temp = phase_data_.image_downscale_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    phase_data_.image_downscale_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData& ChromeSpecificPhaseLatenciesMetadata_Phase::_internal_image_downscale_data() const {
  return _internal_has_image_downscale_data()
      ? *phase_data_.image_downscale_data_
      : reinterpret_cast< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData&>(::lens::proto::lens_latencies_metadata::_ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData_default_instance_);
}
inline const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData& ChromeSpecificPhaseLatenciesMetadata_Phase::image_downscale_data() const {
  // @@protoc_insertion_point(field_get:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.image_downscale_data)
  return _internal_image_downscale_data();
}
inline ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* ChromeSpecificPhaseLatenciesMetadata_Phase::unsafe_arena_release_image_downscale_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.image_downscale_data)
  if (_internal_has_image_downscale_data()) {
    clear_has_phase_data();
    ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* temp = phase_data_.image_downscale_data_;
    phase_data_.image_downscale_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase::unsafe_arena_set_allocated_image_downscale_data(::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* image_downscale_data) {
  clear_phase_data();
  if (image_downscale_data) {
    set_has_image_downscale_data();
    phase_data_.image_downscale_data_ = image_downscale_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.image_downscale_data)
}
inline ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* ChromeSpecificPhaseLatenciesMetadata_Phase::_internal_mutable_image_downscale_data() {
  if (!_internal_has_image_downscale_data()) {
    clear_phase_data();
    set_has_image_downscale_data();
    phase_data_.image_downscale_data_ = CreateMaybeMessage< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData >(GetArenaForAllocation());
  }
  return phase_data_.image_downscale_data_;
}
inline ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* ChromeSpecificPhaseLatenciesMetadata_Phase::mutable_image_downscale_data() {
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* _msg = _internal_mutable_image_downscale_data();
  // @@protoc_insertion_point(field_mutable:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.image_downscale_data)
  return _msg;
}

// .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageEncodeData image_encode_data = 4;
inline bool ChromeSpecificPhaseLatenciesMetadata_Phase::_internal_has_image_encode_data() const {
  return phase_data_case() == kImageEncodeData;
}
inline bool ChromeSpecificPhaseLatenciesMetadata_Phase::has_image_encode_data() const {
  return _internal_has_image_encode_data();
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase::set_has_image_encode_data() {
  _oneof_case_[0] = kImageEncodeData;
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase::clear_image_encode_data() {
  if (_internal_has_image_encode_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete phase_data_.image_encode_data_;
    }
    clear_has_phase_data();
  }
}
inline ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* ChromeSpecificPhaseLatenciesMetadata_Phase::release_image_encode_data() {
  // @@protoc_insertion_point(field_release:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.image_encode_data)
  if (_internal_has_image_encode_data()) {
    clear_has_phase_data();
    ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* temp = phase_data_.image_encode_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    phase_data_.image_encode_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData& ChromeSpecificPhaseLatenciesMetadata_Phase::_internal_image_encode_data() const {
  return _internal_has_image_encode_data()
      ? *phase_data_.image_encode_data_
      : reinterpret_cast< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData&>(::lens::proto::lens_latencies_metadata::_ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData_default_instance_);
}
inline const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData& ChromeSpecificPhaseLatenciesMetadata_Phase::image_encode_data() const {
  // @@protoc_insertion_point(field_get:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.image_encode_data)
  return _internal_image_encode_data();
}
inline ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* ChromeSpecificPhaseLatenciesMetadata_Phase::unsafe_arena_release_image_encode_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.image_encode_data)
  if (_internal_has_image_encode_data()) {
    clear_has_phase_data();
    ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* temp = phase_data_.image_encode_data_;
    phase_data_.image_encode_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase::unsafe_arena_set_allocated_image_encode_data(::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* image_encode_data) {
  clear_phase_data();
  if (image_encode_data) {
    set_has_image_encode_data();
    phase_data_.image_encode_data_ = image_encode_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.image_encode_data)
}
inline ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* ChromeSpecificPhaseLatenciesMetadata_Phase::_internal_mutable_image_encode_data() {
  if (!_internal_has_image_encode_data()) {
    clear_phase_data();
    set_has_image_encode_data();
    phase_data_.image_encode_data_ = CreateMaybeMessage< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData >(GetArenaForAllocation());
  }
  return phase_data_.image_encode_data_;
}
inline ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* ChromeSpecificPhaseLatenciesMetadata_Phase::mutable_image_encode_data() {
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* _msg = _internal_mutable_image_encode_data();
  // @@protoc_insertion_point(field_mutable:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.image_encode_data)
  return _msg;
}

inline bool ChromeSpecificPhaseLatenciesMetadata_Phase::has_phase_data() const {
  return phase_data_case() != PHASE_DATA_NOT_SET;
}
inline void ChromeSpecificPhaseLatenciesMetadata_Phase::clear_has_phase_data() {
  _oneof_case_[0] = PHASE_DATA_NOT_SET;
}
inline ChromeSpecificPhaseLatenciesMetadata_Phase::PhaseDataCase ChromeSpecificPhaseLatenciesMetadata_Phase::phase_data_case() const {
  return ChromeSpecificPhaseLatenciesMetadata_Phase::PhaseDataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChromeSpecificPhaseLatenciesMetadata

// repeated .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase phase = 1;
inline int ChromeSpecificPhaseLatenciesMetadata::_internal_phase_size() const {
  return phase_.size();
}
inline int ChromeSpecificPhaseLatenciesMetadata::phase_size() const {
  return _internal_phase_size();
}
inline void ChromeSpecificPhaseLatenciesMetadata::clear_phase() {
  phase_.Clear();
}
inline ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase* ChromeSpecificPhaseLatenciesMetadata::mutable_phase(int index) {
  // @@protoc_insertion_point(field_mutable:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.phase)
  return phase_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase >*
ChromeSpecificPhaseLatenciesMetadata::mutable_phase() {
  // @@protoc_insertion_point(field_mutable_list:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.phase)
  return &phase_;
}
inline const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase& ChromeSpecificPhaseLatenciesMetadata::_internal_phase(int index) const {
  return phase_.Get(index);
}
inline const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase& ChromeSpecificPhaseLatenciesMetadata::phase(int index) const {
  // @@protoc_insertion_point(field_get:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.phase)
  return _internal_phase(index);
}
inline ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase* ChromeSpecificPhaseLatenciesMetadata::_internal_add_phase() {
  return phase_.Add();
}
inline ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase* ChromeSpecificPhaseLatenciesMetadata::add_phase() {
  ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase* _add = _internal_add_phase();
  // @@protoc_insertion_point(field_add:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.phase)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase >&
ChromeSpecificPhaseLatenciesMetadata::phase() const {
  // @@protoc_insertion_point(field_list:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.phase)
  return phase_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lens_latencies_metadata
}  // namespace proto
}  // namespace lens

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType> : ::std::true_type {};
template <> struct is_proto_enum< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_ImageType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lens_5flatencies_5fmetadata_2eproto
