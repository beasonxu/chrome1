// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lens_latencies_metadata.proto

#include "lens_latencies_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace lens {
namespace proto {
namespace lens_latencies_metadata {
PROTOBUF_CONSTEXPR ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp(
    ::_pbi::ConstantInitialized)
  : seconds_(int64_t{0})
  , nanos_(0){}
struct ChromeSpecificPhaseLatenciesMetadata_Phase_TimestampDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeSpecificPhaseLatenciesMetadata_Phase_TimestampDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeSpecificPhaseLatenciesMetadata_Phase_TimestampDefaultTypeInternal() {}
  union {
    ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeSpecificPhaseLatenciesMetadata_Phase_TimestampDefaultTypeInternal _ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp_default_instance_;
PROTOBUF_CONSTEXPR ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData(
    ::_pbi::ConstantInitialized)
  : original_image_size_(int64_t{0})
  , downscaled_image_byte_size_(int64_t{0}){}
struct ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleDataDefaultTypeInternal() {}
  union {
    ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleDataDefaultTypeInternal _ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData_default_instance_;
PROTOBUF_CONSTEXPR ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData(
    ::_pbi::ConstantInitialized)
  : original_image_type_(0)
{}
struct ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeDataDefaultTypeInternal() {}
  union {
    ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeDataDefaultTypeInternal _ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData_default_instance_;
PROTOBUF_CONSTEXPR ChromeSpecificPhaseLatenciesMetadata_Phase::ChromeSpecificPhaseLatenciesMetadata_Phase(
    ::_pbi::ConstantInitialized)
  : timestamp_(nullptr)
  , phase_type_(0)

  , _oneof_case_{}{}
struct ChromeSpecificPhaseLatenciesMetadata_PhaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeSpecificPhaseLatenciesMetadata_PhaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeSpecificPhaseLatenciesMetadata_PhaseDefaultTypeInternal() {}
  union {
    ChromeSpecificPhaseLatenciesMetadata_Phase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeSpecificPhaseLatenciesMetadata_PhaseDefaultTypeInternal _ChromeSpecificPhaseLatenciesMetadata_Phase_default_instance_;
PROTOBUF_CONSTEXPR ChromeSpecificPhaseLatenciesMetadata::ChromeSpecificPhaseLatenciesMetadata(
    ::_pbi::ConstantInitialized)
  : phase_(){}
struct ChromeSpecificPhaseLatenciesMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeSpecificPhaseLatenciesMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeSpecificPhaseLatenciesMetadataDefaultTypeInternal() {}
  union {
    ChromeSpecificPhaseLatenciesMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeSpecificPhaseLatenciesMetadataDefaultTypeInternal _ChromeSpecificPhaseLatenciesMetadata_default_instance_;
}  // namespace lens_latencies_metadata
}  // namespace proto
}  // namespace lens
namespace lens {
namespace proto {
namespace lens_latencies_metadata {
bool ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_strings[6] = {};

static const char ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_names[] =
  "IMAGE_DOWNSCALE_END"
  "IMAGE_DOWNSCALE_START"
  "IMAGE_ENCODE_END"
  "IMAGE_ENCODE_START"
  "OVERALL_START"
  "UNKNOWN_PHASE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_entries[] = {
  { {ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_names + 0, 19}, 3 },
  { {ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_names + 19, 21}, 2 },
  { {ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_names + 40, 16}, 5 },
  { {ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_names + 56, 18}, 4 },
  { {ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_names + 74, 13}, 1 },
  { {ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_names + 87, 13}, 0 },
};

static const int ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_entries_by_number[] = {
  5, // 0 -> UNKNOWN_PHASE
  4, // 1 -> OVERALL_START
  1, // 2 -> IMAGE_DOWNSCALE_START
  0, // 3 -> IMAGE_DOWNSCALE_END
  3, // 4 -> IMAGE_ENCODE_START
  2, // 5 -> IMAGE_ENCODE_END
};

const std::string& ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_Name(
    ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_entries,
          ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_entries_by_number,
          6, ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_entries,
      ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_strings[idx].get();
}
bool ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType ChromeSpecificPhaseLatenciesMetadata_Phase::UNKNOWN_PHASE;
constexpr ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType ChromeSpecificPhaseLatenciesMetadata_Phase::OVERALL_START;
constexpr ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType ChromeSpecificPhaseLatenciesMetadata_Phase::IMAGE_DOWNSCALE_START;
constexpr ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType ChromeSpecificPhaseLatenciesMetadata_Phase::IMAGE_DOWNSCALE_END;
constexpr ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType ChromeSpecificPhaseLatenciesMetadata_Phase::IMAGE_ENCODE_START;
constexpr ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType ChromeSpecificPhaseLatenciesMetadata_Phase::IMAGE_ENCODE_END;
constexpr ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType ChromeSpecificPhaseLatenciesMetadata_Phase::PhaseType_MIN;
constexpr ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType ChromeSpecificPhaseLatenciesMetadata_Phase::PhaseType_MAX;
constexpr int ChromeSpecificPhaseLatenciesMetadata_Phase::PhaseType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ChromeSpecificPhaseLatenciesMetadata_ImageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeSpecificPhaseLatenciesMetadata_ImageType_strings[3] = {};

static const char ChromeSpecificPhaseLatenciesMetadata_ImageType_names[] =
  "JPEG"
  "PNG"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeSpecificPhaseLatenciesMetadata_ImageType_entries[] = {
  { {ChromeSpecificPhaseLatenciesMetadata_ImageType_names + 0, 4}, 1 },
  { {ChromeSpecificPhaseLatenciesMetadata_ImageType_names + 4, 3}, 2 },
  { {ChromeSpecificPhaseLatenciesMetadata_ImageType_names + 7, 7}, 0 },
};

static const int ChromeSpecificPhaseLatenciesMetadata_ImageType_entries_by_number[] = {
  2, // 0 -> UNKNOWN
  0, // 1 -> JPEG
  1, // 2 -> PNG
};

const std::string& ChromeSpecificPhaseLatenciesMetadata_ImageType_Name(
    ChromeSpecificPhaseLatenciesMetadata_ImageType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeSpecificPhaseLatenciesMetadata_ImageType_entries,
          ChromeSpecificPhaseLatenciesMetadata_ImageType_entries_by_number,
          3, ChromeSpecificPhaseLatenciesMetadata_ImageType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeSpecificPhaseLatenciesMetadata_ImageType_entries,
      ChromeSpecificPhaseLatenciesMetadata_ImageType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeSpecificPhaseLatenciesMetadata_ImageType_strings[idx].get();
}
bool ChromeSpecificPhaseLatenciesMetadata_ImageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeSpecificPhaseLatenciesMetadata_ImageType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeSpecificPhaseLatenciesMetadata_ImageType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ChromeSpecificPhaseLatenciesMetadata_ImageType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeSpecificPhaseLatenciesMetadata_ImageType ChromeSpecificPhaseLatenciesMetadata::UNKNOWN;
constexpr ChromeSpecificPhaseLatenciesMetadata_ImageType ChromeSpecificPhaseLatenciesMetadata::JPEG;
constexpr ChromeSpecificPhaseLatenciesMetadata_ImageType ChromeSpecificPhaseLatenciesMetadata::PNG;
constexpr ChromeSpecificPhaseLatenciesMetadata_ImageType ChromeSpecificPhaseLatenciesMetadata::ImageType_MIN;
constexpr ChromeSpecificPhaseLatenciesMetadata_ImageType ChromeSpecificPhaseLatenciesMetadata::ImageType_MAX;
constexpr int ChromeSpecificPhaseLatenciesMetadata::ImageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp>()._has_bits_);
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp)
}
ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp(const ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&seconds_, &from.seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&nanos_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
  // @@protoc_insertion_point(copy_constructor:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp)
}

inline void ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seconds_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nanos_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
}

ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::~ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp() {
  // @@protoc_insertion_point(destructor:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nanos_) -
        reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_seconds(&has_bits);
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 nanos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_nanos(&has_bits);
          nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 seconds = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_seconds(), target);
  }

  // optional int32 nanos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_nanos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp)
  return target;
}

size_t ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 seconds = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seconds());
    }

    // optional int32 nanos = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nanos());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp*>(
      &from));
}

void ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::MergeFrom(const ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x00000002u) {
      nanos_ = from.nanos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::CopyFrom(const ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::IsInitialized() const {
  return true;
}

void ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::InternalSwap(ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp, nanos_)
      + sizeof(ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::nanos_)
      - PROTOBUF_FIELD_OFFSET(ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp, seconds_)>(
          reinterpret_cast<char*>(&seconds_),
          reinterpret_cast<char*>(&other->seconds_));
}

std::string ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::GetTypeName() const {
  return "lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp";
}


// ===================================================================

class ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData>()._has_bits_);
  static void set_has_original_image_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_downscaled_image_byte_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData)
}
ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData(const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&original_image_size_, &from.original_image_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&downscaled_image_byte_size_) -
    reinterpret_cast<char*>(&original_image_size_)) + sizeof(downscaled_image_byte_size_));
  // @@protoc_insertion_point(copy_constructor:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData)
}

inline void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&original_image_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&downscaled_image_byte_size_) -
    reinterpret_cast<char*>(&original_image_size_)) + sizeof(downscaled_image_byte_size_));
}

ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::~ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData() {
  // @@protoc_insertion_point(destructor:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::Clear() {
// @@protoc_insertion_point(message_clear_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&original_image_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&downscaled_image_byte_size_) -
        reinterpret_cast<char*>(&original_image_size_)) + sizeof(downscaled_image_byte_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 original_image_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_original_image_size(&has_bits);
          original_image_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 downscaled_image_byte_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_downscaled_image_byte_size(&has_bits);
          downscaled_image_byte_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 original_image_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_original_image_size(), target);
  }

  // optional int64 downscaled_image_byte_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_downscaled_image_byte_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData)
  return target;
}

size_t ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 original_image_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_original_image_size());
    }

    // optional int64 downscaled_image_byte_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_downscaled_image_byte_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData*>(
      &from));
}

void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::MergeFrom(const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      original_image_size_ = from.original_image_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      downscaled_image_byte_size_ = from.downscaled_image_byte_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::CopyFrom(const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::IsInitialized() const {
  return true;
}

void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::InternalSwap(ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData, downscaled_image_byte_size_)
      + sizeof(ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::downscaled_image_byte_size_)
      - PROTOBUF_FIELD_OFFSET(ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData, original_image_size_)>(
          reinterpret_cast<char*>(&original_image_size_),
          reinterpret_cast<char*>(&other->original_image_size_));
}

std::string ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::GetTypeName() const {
  return "lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData";
}


// ===================================================================

class ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData>()._has_bits_);
  static void set_has_original_image_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageEncodeData)
}
ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData(const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  original_image_type_ = from.original_image_type_;
  // @@protoc_insertion_point(copy_constructor:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageEncodeData)
}

inline void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::SharedCtor() {
original_image_type_ = 0;
}

ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::~ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData() {
  // @@protoc_insertion_point(destructor:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageEncodeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageEncodeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  original_image_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.ImageType original_image_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_ImageType_IsValid(val))) {
            _internal_set_original_image_type(static_cast<::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_ImageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageEncodeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.ImageType original_image_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_original_image_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageEncodeData)
  return target;
}

size_t ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageEncodeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.ImageType original_image_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_original_image_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData*>(
      &from));
}

void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::MergeFrom(const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageEncodeData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_original_image_type()) {
    _internal_set_original_image_type(from._internal_original_image_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::CopyFrom(const ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageEncodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::IsInitialized() const {
  return true;
}

void ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::InternalSwap(ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(original_image_type_, other->original_image_type_);
}

std::string ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::GetTypeName() const {
  return "lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageEncodeData";
}


// ===================================================================

class ChromeSpecificPhaseLatenciesMetadata_Phase::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeSpecificPhaseLatenciesMetadata_Phase>()._has_bits_);
  static void set_has_phase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp& timestamp(const ChromeSpecificPhaseLatenciesMetadata_Phase* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData& image_downscale_data(const ChromeSpecificPhaseLatenciesMetadata_Phase* msg);
  static const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData& image_encode_data(const ChromeSpecificPhaseLatenciesMetadata_Phase* msg);
};

const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp&
ChromeSpecificPhaseLatenciesMetadata_Phase::_Internal::timestamp(const ChromeSpecificPhaseLatenciesMetadata_Phase* msg) {
  return *msg->timestamp_;
}
const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData&
ChromeSpecificPhaseLatenciesMetadata_Phase::_Internal::image_downscale_data(const ChromeSpecificPhaseLatenciesMetadata_Phase* msg) {
  return *msg->phase_data_.image_downscale_data_;
}
const ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData&
ChromeSpecificPhaseLatenciesMetadata_Phase::_Internal::image_encode_data(const ChromeSpecificPhaseLatenciesMetadata_Phase* msg) {
  return *msg->phase_data_.image_encode_data_;
}
void ChromeSpecificPhaseLatenciesMetadata_Phase::set_allocated_image_downscale_data(::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData* image_downscale_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_phase_data();
  if (image_downscale_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image_downscale_data);
    if (message_arena != submessage_arena) {
      image_downscale_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_downscale_data, submessage_arena);
    }
    set_has_image_downscale_data();
    phase_data_.image_downscale_data_ = image_downscale_data;
  }
  // @@protoc_insertion_point(field_set_allocated:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.image_downscale_data)
}
void ChromeSpecificPhaseLatenciesMetadata_Phase::set_allocated_image_encode_data(::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData* image_encode_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_phase_data();
  if (image_encode_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image_encode_data);
    if (message_arena != submessage_arena) {
      image_encode_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_encode_data, submessage_arena);
    }
    set_has_image_encode_data();
    phase_data_.image_encode_data_ = image_encode_data;
  }
  // @@protoc_insertion_point(field_set_allocated:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.image_encode_data)
}
ChromeSpecificPhaseLatenciesMetadata_Phase::ChromeSpecificPhaseLatenciesMetadata_Phase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase)
}
ChromeSpecificPhaseLatenciesMetadata_Phase::ChromeSpecificPhaseLatenciesMetadata_Phase(const ChromeSpecificPhaseLatenciesMetadata_Phase& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  phase_type_ = from.phase_type_;
  clear_has_phase_data();
  switch (from.phase_data_case()) {
    case kImageDownscaleData: {
      _internal_mutable_image_downscale_data()->::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::MergeFrom(from._internal_image_downscale_data());
      break;
    }
    case kImageEncodeData: {
      _internal_mutable_image_encode_data()->::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::MergeFrom(from._internal_image_encode_data());
      break;
    }
    case PHASE_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase)
}

inline void ChromeSpecificPhaseLatenciesMetadata_Phase::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phase_type_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(phase_type_));
clear_has_phase_data();
}

ChromeSpecificPhaseLatenciesMetadata_Phase::~ChromeSpecificPhaseLatenciesMetadata_Phase() {
  // @@protoc_insertion_point(destructor:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeSpecificPhaseLatenciesMetadata_Phase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
  if (has_phase_data()) {
    clear_phase_data();
  }
}

void ChromeSpecificPhaseLatenciesMetadata_Phase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChromeSpecificPhaseLatenciesMetadata_Phase::clear_phase_data() {
// @@protoc_insertion_point(one_of_clear_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase)
  switch (phase_data_case()) {
    case kImageDownscaleData: {
      if (GetArenaForAllocation() == nullptr) {
        delete phase_data_.image_downscale_data_;
      }
      break;
    }
    case kImageEncodeData: {
      if (GetArenaForAllocation() == nullptr) {
        delete phase_data_.image_encode_data_;
      }
      break;
    }
    case PHASE_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PHASE_DATA_NOT_SET;
}


void ChromeSpecificPhaseLatenciesMetadata_Phase::Clear() {
// @@protoc_insertion_point(message_clear_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != nullptr);
    timestamp_->Clear();
  }
  phase_type_ = 0;
  clear_phase_data();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeSpecificPhaseLatenciesMetadata_Phase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.PhaseType phase_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType_IsValid(val))) {
            _internal_set_phase_type(static_cast<::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_PhaseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData image_downscale_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_downscale_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageEncodeData image_encode_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_encode_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeSpecificPhaseLatenciesMetadata_Phase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.PhaseType phase_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_phase_type(), target);
  }

  // optional .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  switch (phase_data_case()) {
    case kImageDownscaleData: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::image_downscale_data(this),
          _Internal::image_downscale_data(this).GetCachedSize(), target, stream);
      break;
    }
    case kImageEncodeData: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::image_encode_data(this),
          _Internal::image_encode_data(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase)
  return target;
}

size_t ChromeSpecificPhaseLatenciesMetadata_Phase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.Timestamp timestamp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timestamp_);
    }

    // optional .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.PhaseType phase_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_phase_type());
    }

  }
  switch (phase_data_case()) {
    // .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageDownscaleData image_downscale_data = 3;
    case kImageDownscaleData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *phase_data_.image_downscale_data_);
      break;
    }
    // .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase.ImageEncodeData image_encode_data = 4;
    case kImageEncodeData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *phase_data_.image_encode_data_);
      break;
    }
    case PHASE_DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeSpecificPhaseLatenciesMetadata_Phase::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeSpecificPhaseLatenciesMetadata_Phase*>(
      &from));
}

void ChromeSpecificPhaseLatenciesMetadata_Phase::MergeFrom(const ChromeSpecificPhaseLatenciesMetadata_Phase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_timestamp()->::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp::MergeFrom(from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      phase_type_ = from.phase_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.phase_data_case()) {
    case kImageDownscaleData: {
      _internal_mutable_image_downscale_data()->::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData::MergeFrom(from._internal_image_downscale_data());
      break;
    }
    case kImageEncodeData: {
      _internal_mutable_image_encode_data()->::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData::MergeFrom(from._internal_image_encode_data());
      break;
    }
    case PHASE_DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeSpecificPhaseLatenciesMetadata_Phase::CopyFrom(const ChromeSpecificPhaseLatenciesMetadata_Phase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeSpecificPhaseLatenciesMetadata_Phase::IsInitialized() const {
  return true;
}

void ChromeSpecificPhaseLatenciesMetadata_Phase::InternalSwap(ChromeSpecificPhaseLatenciesMetadata_Phase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeSpecificPhaseLatenciesMetadata_Phase, phase_type_)
      + sizeof(ChromeSpecificPhaseLatenciesMetadata_Phase::phase_type_)
      - PROTOBUF_FIELD_OFFSET(ChromeSpecificPhaseLatenciesMetadata_Phase, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
  swap(phase_data_, other->phase_data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string ChromeSpecificPhaseLatenciesMetadata_Phase::GetTypeName() const {
  return "lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase";
}


// ===================================================================

class ChromeSpecificPhaseLatenciesMetadata::_Internal {
 public:
};

ChromeSpecificPhaseLatenciesMetadata::ChromeSpecificPhaseLatenciesMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  phase_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata)
}
ChromeSpecificPhaseLatenciesMetadata::ChromeSpecificPhaseLatenciesMetadata(const ChromeSpecificPhaseLatenciesMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      phase_(from.phase_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata)
}

inline void ChromeSpecificPhaseLatenciesMetadata::SharedCtor() {
}

ChromeSpecificPhaseLatenciesMetadata::~ChromeSpecificPhaseLatenciesMetadata() {
  // @@protoc_insertion_point(destructor:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeSpecificPhaseLatenciesMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChromeSpecificPhaseLatenciesMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChromeSpecificPhaseLatenciesMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phase_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeSpecificPhaseLatenciesMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase phase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phase(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeSpecificPhaseLatenciesMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase phase = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_phase_size()); i < n; i++) {
    const auto& repfield = this->_internal_phase(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata)
  return target;
}

size_t ChromeSpecificPhaseLatenciesMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata.Phase phase = 1;
  total_size += 1UL * this->_internal_phase_size();
  for (const auto& msg : this->phase_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeSpecificPhaseLatenciesMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeSpecificPhaseLatenciesMetadata*>(
      &from));
}

void ChromeSpecificPhaseLatenciesMetadata::MergeFrom(const ChromeSpecificPhaseLatenciesMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  phase_.MergeFrom(from.phase_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeSpecificPhaseLatenciesMetadata::CopyFrom(const ChromeSpecificPhaseLatenciesMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeSpecificPhaseLatenciesMetadata::IsInitialized() const {
  return true;
}

void ChromeSpecificPhaseLatenciesMetadata::InternalSwap(ChromeSpecificPhaseLatenciesMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  phase_.InternalSwap(&other->phase_);
}

std::string ChromeSpecificPhaseLatenciesMetadata::GetTypeName() const {
  return "lens.proto.lens_latencies_metadata.ChromeSpecificPhaseLatenciesMetadata";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lens_latencies_metadata
}  // namespace proto
}  // namespace lens
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp*
Arena::CreateMaybeMessage< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_Timestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData*
Arena::CreateMaybeMessage< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageDownscaleData >(arena);
}
template<> PROTOBUF_NOINLINE ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData*
Arena::CreateMaybeMessage< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase_ImageEncodeData >(arena);
}
template<> PROTOBUF_NOINLINE ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase*
Arena::CreateMaybeMessage< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata_Phase >(arena);
}
template<> PROTOBUF_NOINLINE ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata*
Arena::CreateMaybeMessage< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lens::proto::lens_latencies_metadata::ChromeSpecificPhaseLatenciesMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
