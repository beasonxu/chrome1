// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cached_image_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cached_5fimage_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cached_5fimage_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cached_5fimage_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cached_5fimage_5fmetadata_2eproto {
  static const uint32_t offsets[];
};
namespace image_fetcher {
class CachedImageMetadataProto;
struct CachedImageMetadataProtoDefaultTypeInternal;
extern CachedImageMetadataProtoDefaultTypeInternal _CachedImageMetadataProto_default_instance_;
}  // namespace image_fetcher
PROTOBUF_NAMESPACE_OPEN
template<> ::image_fetcher::CachedImageMetadataProto* Arena::CreateMaybeMessage<::image_fetcher::CachedImageMetadataProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace image_fetcher {

enum CacheStrategy : int {
  BEST_EFFORT = 0,
  HOLD_UNTIL_EXPIRED = 1
};
bool CacheStrategy_IsValid(int value);
constexpr CacheStrategy CacheStrategy_MIN = BEST_EFFORT;
constexpr CacheStrategy CacheStrategy_MAX = HOLD_UNTIL_EXPIRED;
constexpr int CacheStrategy_ARRAYSIZE = CacheStrategy_MAX + 1;

const std::string& CacheStrategy_Name(CacheStrategy value);
template<typename T>
inline const std::string& CacheStrategy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CacheStrategy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CacheStrategy_Name.");
  return CacheStrategy_Name(static_cast<CacheStrategy>(enum_t_value));
}
bool CacheStrategy_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CacheStrategy* value);
// ===================================================================

class CachedImageMetadataProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:image_fetcher.CachedImageMetadataProto) */ {
 public:
  inline CachedImageMetadataProto() : CachedImageMetadataProto(nullptr) {}
  ~CachedImageMetadataProto() override;
  explicit PROTOBUF_CONSTEXPR CachedImageMetadataProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CachedImageMetadataProto(const CachedImageMetadataProto& from);
  CachedImageMetadataProto(CachedImageMetadataProto&& from) noexcept
    : CachedImageMetadataProto() {
    *this = ::std::move(from);
  }

  inline CachedImageMetadataProto& operator=(const CachedImageMetadataProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CachedImageMetadataProto& operator=(CachedImageMetadataProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CachedImageMetadataProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CachedImageMetadataProto* internal_default_instance() {
    return reinterpret_cast<const CachedImageMetadataProto*>(
               &_CachedImageMetadataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CachedImageMetadataProto& a, CachedImageMetadataProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CachedImageMetadataProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CachedImageMetadataProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CachedImageMetadataProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CachedImageMetadataProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CachedImageMetadataProto& from);
  void MergeFrom(const CachedImageMetadataProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CachedImageMetadataProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "image_fetcher.CachedImageMetadataProto";
  }
  protected:
  explicit CachedImageMetadataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kCreationTimeFieldNumber = 2,
    kLastUsedTimeFieldNumber = 3,
    kDataSizeFieldNumber = 4,
    kNeedsTranscodingFieldNumber = 5,
    kCacheStrategyFieldNumber = 6,
    kExpirationIntervalFieldNumber = 7,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional int64 creation_time = 2;
  bool has_creation_time() const;
  private:
  bool _internal_has_creation_time() const;
  public:
  void clear_creation_time();
  int64_t creation_time() const;
  void set_creation_time(int64_t value);
  private:
  int64_t _internal_creation_time() const;
  void _internal_set_creation_time(int64_t value);
  public:

  // optional int64 last_used_time = 3;
  bool has_last_used_time() const;
  private:
  bool _internal_has_last_used_time() const;
  public:
  void clear_last_used_time();
  int64_t last_used_time() const;
  void set_last_used_time(int64_t value);
  private:
  int64_t _internal_last_used_time() const;
  void _internal_set_last_used_time(int64_t value);
  public:

  // optional int64 data_size = 4;
  bool has_data_size() const;
  private:
  bool _internal_has_data_size() const;
  public:
  void clear_data_size();
  int64_t data_size() const;
  void set_data_size(int64_t value);
  private:
  int64_t _internal_data_size() const;
  void _internal_set_data_size(int64_t value);
  public:

  // optional bool needs_transcoding = 5;
  bool has_needs_transcoding() const;
  private:
  bool _internal_has_needs_transcoding() const;
  public:
  void clear_needs_transcoding();
  bool needs_transcoding() const;
  void set_needs_transcoding(bool value);
  private:
  bool _internal_needs_transcoding() const;
  void _internal_set_needs_transcoding(bool value);
  public:

  // optional .image_fetcher.CacheStrategy cache_strategy = 6 [default = BEST_EFFORT];
  bool has_cache_strategy() const;
  private:
  bool _internal_has_cache_strategy() const;
  public:
  void clear_cache_strategy();
  ::image_fetcher::CacheStrategy cache_strategy() const;
  void set_cache_strategy(::image_fetcher::CacheStrategy value);
  private:
  ::image_fetcher::CacheStrategy _internal_cache_strategy() const;
  void _internal_set_cache_strategy(::image_fetcher::CacheStrategy value);
  public:

  // optional int64 expiration_interval = 7;
  bool has_expiration_interval() const;
  private:
  bool _internal_has_expiration_interval() const;
  public:
  void clear_expiration_interval();
  int64_t expiration_interval() const;
  void set_expiration_interval(int64_t value);
  private:
  int64_t _internal_expiration_interval() const;
  void _internal_set_expiration_interval(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:image_fetcher.CachedImageMetadataProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  int64_t creation_time_;
  int64_t last_used_time_;
  int64_t data_size_;
  bool needs_transcoding_;
  int cache_strategy_;
  int64_t expiration_interval_;
  friend struct ::TableStruct_cached_5fimage_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CachedImageMetadataProto

// optional string key = 1;
inline bool CachedImageMetadataProto::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CachedImageMetadataProto::has_key() const {
  return _internal_has_key();
}
inline void CachedImageMetadataProto::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CachedImageMetadataProto::key() const {
  // @@protoc_insertion_point(field_get:image_fetcher.CachedImageMetadataProto.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CachedImageMetadataProto::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:image_fetcher.CachedImageMetadataProto.key)
}
inline std::string* CachedImageMetadataProto::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:image_fetcher.CachedImageMetadataProto.key)
  return _s;
}
inline const std::string& CachedImageMetadataProto::_internal_key() const {
  return key_.Get();
}
inline void CachedImageMetadataProto::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(value, GetArenaForAllocation());
}
inline std::string* CachedImageMetadataProto::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(GetArenaForAllocation());
}
inline std::string* CachedImageMetadataProto::release_key() {
  // @@protoc_insertion_point(field_release:image_fetcher.CachedImageMetadataProto.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CachedImageMetadataProto::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:image_fetcher.CachedImageMetadataProto.key)
}

// optional int64 creation_time = 2;
inline bool CachedImageMetadataProto::_internal_has_creation_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CachedImageMetadataProto::has_creation_time() const {
  return _internal_has_creation_time();
}
inline void CachedImageMetadataProto::clear_creation_time() {
  creation_time_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t CachedImageMetadataProto::_internal_creation_time() const {
  return creation_time_;
}
inline int64_t CachedImageMetadataProto::creation_time() const {
  // @@protoc_insertion_point(field_get:image_fetcher.CachedImageMetadataProto.creation_time)
  return _internal_creation_time();
}
inline void CachedImageMetadataProto::_internal_set_creation_time(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  creation_time_ = value;
}
inline void CachedImageMetadataProto::set_creation_time(int64_t value) {
  _internal_set_creation_time(value);
  // @@protoc_insertion_point(field_set:image_fetcher.CachedImageMetadataProto.creation_time)
}

// optional int64 last_used_time = 3;
inline bool CachedImageMetadataProto::_internal_has_last_used_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CachedImageMetadataProto::has_last_used_time() const {
  return _internal_has_last_used_time();
}
inline void CachedImageMetadataProto::clear_last_used_time() {
  last_used_time_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t CachedImageMetadataProto::_internal_last_used_time() const {
  return last_used_time_;
}
inline int64_t CachedImageMetadataProto::last_used_time() const {
  // @@protoc_insertion_point(field_get:image_fetcher.CachedImageMetadataProto.last_used_time)
  return _internal_last_used_time();
}
inline void CachedImageMetadataProto::_internal_set_last_used_time(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  last_used_time_ = value;
}
inline void CachedImageMetadataProto::set_last_used_time(int64_t value) {
  _internal_set_last_used_time(value);
  // @@protoc_insertion_point(field_set:image_fetcher.CachedImageMetadataProto.last_used_time)
}

// optional int64 data_size = 4;
inline bool CachedImageMetadataProto::_internal_has_data_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CachedImageMetadataProto::has_data_size() const {
  return _internal_has_data_size();
}
inline void CachedImageMetadataProto::clear_data_size() {
  data_size_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t CachedImageMetadataProto::_internal_data_size() const {
  return data_size_;
}
inline int64_t CachedImageMetadataProto::data_size() const {
  // @@protoc_insertion_point(field_get:image_fetcher.CachedImageMetadataProto.data_size)
  return _internal_data_size();
}
inline void CachedImageMetadataProto::_internal_set_data_size(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  data_size_ = value;
}
inline void CachedImageMetadataProto::set_data_size(int64_t value) {
  _internal_set_data_size(value);
  // @@protoc_insertion_point(field_set:image_fetcher.CachedImageMetadataProto.data_size)
}

// optional bool needs_transcoding = 5;
inline bool CachedImageMetadataProto::_internal_has_needs_transcoding() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CachedImageMetadataProto::has_needs_transcoding() const {
  return _internal_has_needs_transcoding();
}
inline void CachedImageMetadataProto::clear_needs_transcoding() {
  needs_transcoding_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CachedImageMetadataProto::_internal_needs_transcoding() const {
  return needs_transcoding_;
}
inline bool CachedImageMetadataProto::needs_transcoding() const {
  // @@protoc_insertion_point(field_get:image_fetcher.CachedImageMetadataProto.needs_transcoding)
  return _internal_needs_transcoding();
}
inline void CachedImageMetadataProto::_internal_set_needs_transcoding(bool value) {
  _has_bits_[0] |= 0x00000010u;
  needs_transcoding_ = value;
}
inline void CachedImageMetadataProto::set_needs_transcoding(bool value) {
  _internal_set_needs_transcoding(value);
  // @@protoc_insertion_point(field_set:image_fetcher.CachedImageMetadataProto.needs_transcoding)
}

// optional .image_fetcher.CacheStrategy cache_strategy = 6 [default = BEST_EFFORT];
inline bool CachedImageMetadataProto::_internal_has_cache_strategy() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CachedImageMetadataProto::has_cache_strategy() const {
  return _internal_has_cache_strategy();
}
inline void CachedImageMetadataProto::clear_cache_strategy() {
  cache_strategy_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::image_fetcher::CacheStrategy CachedImageMetadataProto::_internal_cache_strategy() const {
  return static_cast< ::image_fetcher::CacheStrategy >(cache_strategy_);
}
inline ::image_fetcher::CacheStrategy CachedImageMetadataProto::cache_strategy() const {
  // @@protoc_insertion_point(field_get:image_fetcher.CachedImageMetadataProto.cache_strategy)
  return _internal_cache_strategy();
}
inline void CachedImageMetadataProto::_internal_set_cache_strategy(::image_fetcher::CacheStrategy value) {
  assert(::image_fetcher::CacheStrategy_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  cache_strategy_ = value;
}
inline void CachedImageMetadataProto::set_cache_strategy(::image_fetcher::CacheStrategy value) {
  _internal_set_cache_strategy(value);
  // @@protoc_insertion_point(field_set:image_fetcher.CachedImageMetadataProto.cache_strategy)
}

// optional int64 expiration_interval = 7;
inline bool CachedImageMetadataProto::_internal_has_expiration_interval() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CachedImageMetadataProto::has_expiration_interval() const {
  return _internal_has_expiration_interval();
}
inline void CachedImageMetadataProto::clear_expiration_interval() {
  expiration_interval_ = int64_t{0};
  _has_bits_[0] &= ~0x00000040u;
}
inline int64_t CachedImageMetadataProto::_internal_expiration_interval() const {
  return expiration_interval_;
}
inline int64_t CachedImageMetadataProto::expiration_interval() const {
  // @@protoc_insertion_point(field_get:image_fetcher.CachedImageMetadataProto.expiration_interval)
  return _internal_expiration_interval();
}
inline void CachedImageMetadataProto::_internal_set_expiration_interval(int64_t value) {
  _has_bits_[0] |= 0x00000040u;
  expiration_interval_ = value;
}
inline void CachedImageMetadataProto::set_expiration_interval(int64_t value) {
  _internal_set_expiration_interval(value);
  // @@protoc_insertion_point(field_set:image_fetcher.CachedImageMetadataProto.expiration_interval)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace image_fetcher

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::image_fetcher::CacheStrategy> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cached_5fimage_5fmetadata_2eproto
