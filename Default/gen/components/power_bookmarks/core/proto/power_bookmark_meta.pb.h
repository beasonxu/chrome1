// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/power_bookmarks/core/proto/power_bookmark_meta.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fpower_5fbookmarks_2fcore_2fproto_2fpower_5fbookmark_5fmeta_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fpower_5fbookmarks_2fcore_2fproto_2fpower_5fbookmark_5fmeta_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/power_bookmarks/core/proto/shopping_specifics.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fpower_5fbookmarks_2fcore_2fproto_2fpower_5fbookmark_5fmeta_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fpower_5fbookmarks_2fcore_2fproto_2fpower_5fbookmark_5fmeta_2eproto {
  static const uint32_t offsets[];
};
namespace power_bookmarks {
class PowerBookmarkMeta;
struct PowerBookmarkMetaDefaultTypeInternal;
extern PowerBookmarkMetaDefaultTypeInternal _PowerBookmarkMeta_default_instance_;
class PowerBookmarkMeta_Image;
struct PowerBookmarkMeta_ImageDefaultTypeInternal;
extern PowerBookmarkMeta_ImageDefaultTypeInternal _PowerBookmarkMeta_Image_default_instance_;
class PowerBookmarkMeta_Tag;
struct PowerBookmarkMeta_TagDefaultTypeInternal;
extern PowerBookmarkMeta_TagDefaultTypeInternal _PowerBookmarkMeta_Tag_default_instance_;
}  // namespace power_bookmarks
PROTOBUF_NAMESPACE_OPEN
template<> ::power_bookmarks::PowerBookmarkMeta* Arena::CreateMaybeMessage<::power_bookmarks::PowerBookmarkMeta>(Arena*);
template<> ::power_bookmarks::PowerBookmarkMeta_Image* Arena::CreateMaybeMessage<::power_bookmarks::PowerBookmarkMeta_Image>(Arena*);
template<> ::power_bookmarks::PowerBookmarkMeta_Tag* Arena::CreateMaybeMessage<::power_bookmarks::PowerBookmarkMeta_Tag>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace power_bookmarks {

enum PowerBookmarkType : int {
  UNSPECIFIED = 0,
  SHOPPING = 1
};
bool PowerBookmarkType_IsValid(int value);
constexpr PowerBookmarkType PowerBookmarkType_MIN = UNSPECIFIED;
constexpr PowerBookmarkType PowerBookmarkType_MAX = SHOPPING;
constexpr int PowerBookmarkType_ARRAYSIZE = PowerBookmarkType_MAX + 1;

const std::string& PowerBookmarkType_Name(PowerBookmarkType value);
template<typename T>
inline const std::string& PowerBookmarkType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PowerBookmarkType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PowerBookmarkType_Name.");
  return PowerBookmarkType_Name(static_cast<PowerBookmarkType>(enum_t_value));
}
bool PowerBookmarkType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PowerBookmarkType* value);
// ===================================================================

class PowerBookmarkMeta_Tag final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:power_bookmarks.PowerBookmarkMeta.Tag) */ {
 public:
  inline PowerBookmarkMeta_Tag() : PowerBookmarkMeta_Tag(nullptr) {}
  ~PowerBookmarkMeta_Tag() override;
  explicit PROTOBUF_CONSTEXPR PowerBookmarkMeta_Tag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PowerBookmarkMeta_Tag(const PowerBookmarkMeta_Tag& from);
  PowerBookmarkMeta_Tag(PowerBookmarkMeta_Tag&& from) noexcept
    : PowerBookmarkMeta_Tag() {
    *this = ::std::move(from);
  }

  inline PowerBookmarkMeta_Tag& operator=(const PowerBookmarkMeta_Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerBookmarkMeta_Tag& operator=(PowerBookmarkMeta_Tag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PowerBookmarkMeta_Tag& default_instance() {
    return *internal_default_instance();
  }
  static inline const PowerBookmarkMeta_Tag* internal_default_instance() {
    return reinterpret_cast<const PowerBookmarkMeta_Tag*>(
               &_PowerBookmarkMeta_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PowerBookmarkMeta_Tag& a, PowerBookmarkMeta_Tag& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PowerBookmarkMeta_Tag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PowerBookmarkMeta_Tag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PowerBookmarkMeta_Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PowerBookmarkMeta_Tag>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PowerBookmarkMeta_Tag& from);
  void MergeFrom(const PowerBookmarkMeta_Tag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerBookmarkMeta_Tag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "power_bookmarks.PowerBookmarkMeta.Tag";
  }
  protected:
  explicit PowerBookmarkMeta_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayNameFieldNumber = 1,
  };
  // optional string display_name = 1;
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // @@protoc_insertion_point(class_scope:power_bookmarks.PowerBookmarkMeta.Tag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  friend struct ::TableStruct_components_2fpower_5fbookmarks_2fcore_2fproto_2fpower_5fbookmark_5fmeta_2eproto;
};
// -------------------------------------------------------------------

class PowerBookmarkMeta_Image final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:power_bookmarks.PowerBookmarkMeta.Image) */ {
 public:
  inline PowerBookmarkMeta_Image() : PowerBookmarkMeta_Image(nullptr) {}
  ~PowerBookmarkMeta_Image() override;
  explicit PROTOBUF_CONSTEXPR PowerBookmarkMeta_Image(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PowerBookmarkMeta_Image(const PowerBookmarkMeta_Image& from);
  PowerBookmarkMeta_Image(PowerBookmarkMeta_Image&& from) noexcept
    : PowerBookmarkMeta_Image() {
    *this = ::std::move(from);
  }

  inline PowerBookmarkMeta_Image& operator=(const PowerBookmarkMeta_Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerBookmarkMeta_Image& operator=(PowerBookmarkMeta_Image&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PowerBookmarkMeta_Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const PowerBookmarkMeta_Image* internal_default_instance() {
    return reinterpret_cast<const PowerBookmarkMeta_Image*>(
               &_PowerBookmarkMeta_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PowerBookmarkMeta_Image& a, PowerBookmarkMeta_Image& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PowerBookmarkMeta_Image* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PowerBookmarkMeta_Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PowerBookmarkMeta_Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PowerBookmarkMeta_Image>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PowerBookmarkMeta_Image& from);
  void MergeFrom(const PowerBookmarkMeta_Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerBookmarkMeta_Image* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "power_bookmarks.PowerBookmarkMeta.Image";
  }
  protected:
  explicit PowerBookmarkMeta_Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:power_bookmarks.PowerBookmarkMeta.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_components_2fpower_5fbookmarks_2fcore_2fproto_2fpower_5fbookmark_5fmeta_2eproto;
};
// -------------------------------------------------------------------

class PowerBookmarkMeta final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:power_bookmarks.PowerBookmarkMeta) */ {
 public:
  inline PowerBookmarkMeta() : PowerBookmarkMeta(nullptr) {}
  ~PowerBookmarkMeta() override;
  explicit PROTOBUF_CONSTEXPR PowerBookmarkMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PowerBookmarkMeta(const PowerBookmarkMeta& from);
  PowerBookmarkMeta(PowerBookmarkMeta&& from) noexcept
    : PowerBookmarkMeta() {
    *this = ::std::move(from);
  }

  inline PowerBookmarkMeta& operator=(const PowerBookmarkMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerBookmarkMeta& operator=(PowerBookmarkMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PowerBookmarkMeta& default_instance() {
    return *internal_default_instance();
  }
  enum TypeSpecificsCase {
    kShoppingSpecifics = 5,
    TYPE_SPECIFICS_NOT_SET = 0,
  };

  static inline const PowerBookmarkMeta* internal_default_instance() {
    return reinterpret_cast<const PowerBookmarkMeta*>(
               &_PowerBookmarkMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PowerBookmarkMeta& a, PowerBookmarkMeta& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PowerBookmarkMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PowerBookmarkMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PowerBookmarkMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PowerBookmarkMeta>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PowerBookmarkMeta& from);
  void MergeFrom(const PowerBookmarkMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerBookmarkMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "power_bookmarks.PowerBookmarkMeta";
  }
  protected:
  explicit PowerBookmarkMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PowerBookmarkMeta_Tag Tag;
  typedef PowerBookmarkMeta_Image Image;

  // accessors -------------------------------------------------------

  enum : int {
    kFallbackImagesFieldNumber = 2,
    kTagsFieldNumber = 3,
    kLeadImageFieldNumber = 1,
    kTypeFieldNumber = 4,
    kShoppingSpecificsFieldNumber = 5,
  };
  // repeated .power_bookmarks.PowerBookmarkMeta.Image fallback_images = 2;
  int fallback_images_size() const;
  private:
  int _internal_fallback_images_size() const;
  public:
  void clear_fallback_images();
  ::power_bookmarks::PowerBookmarkMeta_Image* mutable_fallback_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::power_bookmarks::PowerBookmarkMeta_Image >*
      mutable_fallback_images();
  private:
  const ::power_bookmarks::PowerBookmarkMeta_Image& _internal_fallback_images(int index) const;
  ::power_bookmarks::PowerBookmarkMeta_Image* _internal_add_fallback_images();
  public:
  const ::power_bookmarks::PowerBookmarkMeta_Image& fallback_images(int index) const;
  ::power_bookmarks::PowerBookmarkMeta_Image* add_fallback_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::power_bookmarks::PowerBookmarkMeta_Image >&
      fallback_images() const;

  // repeated .power_bookmarks.PowerBookmarkMeta.Tag tags = 3;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::power_bookmarks::PowerBookmarkMeta_Tag* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::power_bookmarks::PowerBookmarkMeta_Tag >*
      mutable_tags();
  private:
  const ::power_bookmarks::PowerBookmarkMeta_Tag& _internal_tags(int index) const;
  ::power_bookmarks::PowerBookmarkMeta_Tag* _internal_add_tags();
  public:
  const ::power_bookmarks::PowerBookmarkMeta_Tag& tags(int index) const;
  ::power_bookmarks::PowerBookmarkMeta_Tag* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::power_bookmarks::PowerBookmarkMeta_Tag >&
      tags() const;

  // optional .power_bookmarks.PowerBookmarkMeta.Image lead_image = 1;
  bool has_lead_image() const;
  private:
  bool _internal_has_lead_image() const;
  public:
  void clear_lead_image();
  const ::power_bookmarks::PowerBookmarkMeta_Image& lead_image() const;
  PROTOBUF_NODISCARD ::power_bookmarks::PowerBookmarkMeta_Image* release_lead_image();
  ::power_bookmarks::PowerBookmarkMeta_Image* mutable_lead_image();
  void set_allocated_lead_image(::power_bookmarks::PowerBookmarkMeta_Image* lead_image);
  private:
  const ::power_bookmarks::PowerBookmarkMeta_Image& _internal_lead_image() const;
  ::power_bookmarks::PowerBookmarkMeta_Image* _internal_mutable_lead_image();
  public:
  void unsafe_arena_set_allocated_lead_image(
      ::power_bookmarks::PowerBookmarkMeta_Image* lead_image);
  ::power_bookmarks::PowerBookmarkMeta_Image* unsafe_arena_release_lead_image();

  // optional .power_bookmarks.PowerBookmarkType type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::power_bookmarks::PowerBookmarkType type() const;
  void set_type(::power_bookmarks::PowerBookmarkType value);
  private:
  ::power_bookmarks::PowerBookmarkType _internal_type() const;
  void _internal_set_type(::power_bookmarks::PowerBookmarkType value);
  public:

  // .power_bookmarks.ShoppingSpecifics shopping_specifics = 5;
  bool has_shopping_specifics() const;
  private:
  bool _internal_has_shopping_specifics() const;
  public:
  void clear_shopping_specifics();
  const ::power_bookmarks::ShoppingSpecifics& shopping_specifics() const;
  PROTOBUF_NODISCARD ::power_bookmarks::ShoppingSpecifics* release_shopping_specifics();
  ::power_bookmarks::ShoppingSpecifics* mutable_shopping_specifics();
  void set_allocated_shopping_specifics(::power_bookmarks::ShoppingSpecifics* shopping_specifics);
  private:
  const ::power_bookmarks::ShoppingSpecifics& _internal_shopping_specifics() const;
  ::power_bookmarks::ShoppingSpecifics* _internal_mutable_shopping_specifics();
  public:
  void unsafe_arena_set_allocated_shopping_specifics(
      ::power_bookmarks::ShoppingSpecifics* shopping_specifics);
  ::power_bookmarks::ShoppingSpecifics* unsafe_arena_release_shopping_specifics();

  void clear_type_specifics();
  TypeSpecificsCase type_specifics_case() const;
  // @@protoc_insertion_point(class_scope:power_bookmarks.PowerBookmarkMeta)
 private:
  class _Internal;
  void set_has_shopping_specifics();

  inline bool has_type_specifics() const;
  inline void clear_has_type_specifics();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::power_bookmarks::PowerBookmarkMeta_Image > fallback_images_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::power_bookmarks::PowerBookmarkMeta_Tag > tags_;
  ::power_bookmarks::PowerBookmarkMeta_Image* lead_image_;
  int type_;
  union TypeSpecificsUnion {
    constexpr TypeSpecificsUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::power_bookmarks::ShoppingSpecifics* shopping_specifics_;
  } type_specifics_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2fpower_5fbookmarks_2fcore_2fproto_2fpower_5fbookmark_5fmeta_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PowerBookmarkMeta_Tag

// optional string display_name = 1;
inline bool PowerBookmarkMeta_Tag::_internal_has_display_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PowerBookmarkMeta_Tag::has_display_name() const {
  return _internal_has_display_name();
}
inline void PowerBookmarkMeta_Tag::clear_display_name() {
  display_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PowerBookmarkMeta_Tag::display_name() const {
  // @@protoc_insertion_point(field_get:power_bookmarks.PowerBookmarkMeta.Tag.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PowerBookmarkMeta_Tag::set_display_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:power_bookmarks.PowerBookmarkMeta.Tag.display_name)
}
inline std::string* PowerBookmarkMeta_Tag::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:power_bookmarks.PowerBookmarkMeta.Tag.display_name)
  return _s;
}
inline const std::string& PowerBookmarkMeta_Tag::_internal_display_name() const {
  return display_name_.Get();
}
inline void PowerBookmarkMeta_Tag::_internal_set_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PowerBookmarkMeta_Tag::_internal_mutable_display_name() {
  _has_bits_[0] |= 0x00000001u;
  return display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PowerBookmarkMeta_Tag::release_display_name() {
  // @@protoc_insertion_point(field_release:power_bookmarks.PowerBookmarkMeta.Tag.display_name)
  if (!_internal_has_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = display_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault()) {
    display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PowerBookmarkMeta_Tag::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault()) {
    display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:power_bookmarks.PowerBookmarkMeta.Tag.display_name)
}

// -------------------------------------------------------------------

// PowerBookmarkMeta_Image

// optional string url = 1;
inline bool PowerBookmarkMeta_Image::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PowerBookmarkMeta_Image::has_url() const {
  return _internal_has_url();
}
inline void PowerBookmarkMeta_Image::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PowerBookmarkMeta_Image::url() const {
  // @@protoc_insertion_point(field_get:power_bookmarks.PowerBookmarkMeta.Image.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PowerBookmarkMeta_Image::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:power_bookmarks.PowerBookmarkMeta.Image.url)
}
inline std::string* PowerBookmarkMeta_Image::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:power_bookmarks.PowerBookmarkMeta.Image.url)
  return _s;
}
inline const std::string& PowerBookmarkMeta_Image::_internal_url() const {
  return url_.Get();
}
inline void PowerBookmarkMeta_Image::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* PowerBookmarkMeta_Image::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* PowerBookmarkMeta_Image::release_url() {
  // @@protoc_insertion_point(field_release:power_bookmarks.PowerBookmarkMeta.Image.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PowerBookmarkMeta_Image::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:power_bookmarks.PowerBookmarkMeta.Image.url)
}

// -------------------------------------------------------------------

// PowerBookmarkMeta

// optional .power_bookmarks.PowerBookmarkMeta.Image lead_image = 1;
inline bool PowerBookmarkMeta::_internal_has_lead_image() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || lead_image_ != nullptr);
  return value;
}
inline bool PowerBookmarkMeta::has_lead_image() const {
  return _internal_has_lead_image();
}
inline void PowerBookmarkMeta::clear_lead_image() {
  if (lead_image_ != nullptr) lead_image_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::power_bookmarks::PowerBookmarkMeta_Image& PowerBookmarkMeta::_internal_lead_image() const {
  const ::power_bookmarks::PowerBookmarkMeta_Image* p = lead_image_;
  return p != nullptr ? *p : reinterpret_cast<const ::power_bookmarks::PowerBookmarkMeta_Image&>(
      ::power_bookmarks::_PowerBookmarkMeta_Image_default_instance_);
}
inline const ::power_bookmarks::PowerBookmarkMeta_Image& PowerBookmarkMeta::lead_image() const {
  // @@protoc_insertion_point(field_get:power_bookmarks.PowerBookmarkMeta.lead_image)
  return _internal_lead_image();
}
inline void PowerBookmarkMeta::unsafe_arena_set_allocated_lead_image(
    ::power_bookmarks::PowerBookmarkMeta_Image* lead_image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead_image_);
  }
  lead_image_ = lead_image;
  if (lead_image) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:power_bookmarks.PowerBookmarkMeta.lead_image)
}
inline ::power_bookmarks::PowerBookmarkMeta_Image* PowerBookmarkMeta::release_lead_image() {
  _has_bits_[0] &= ~0x00000001u;
  ::power_bookmarks::PowerBookmarkMeta_Image* temp = lead_image_;
  lead_image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::power_bookmarks::PowerBookmarkMeta_Image* PowerBookmarkMeta::unsafe_arena_release_lead_image() {
  // @@protoc_insertion_point(field_release:power_bookmarks.PowerBookmarkMeta.lead_image)
  _has_bits_[0] &= ~0x00000001u;
  ::power_bookmarks::PowerBookmarkMeta_Image* temp = lead_image_;
  lead_image_ = nullptr;
  return temp;
}
inline ::power_bookmarks::PowerBookmarkMeta_Image* PowerBookmarkMeta::_internal_mutable_lead_image() {
  _has_bits_[0] |= 0x00000001u;
  if (lead_image_ == nullptr) {
    auto* p = CreateMaybeMessage<::power_bookmarks::PowerBookmarkMeta_Image>(GetArenaForAllocation());
    lead_image_ = p;
  }
  return lead_image_;
}
inline ::power_bookmarks::PowerBookmarkMeta_Image* PowerBookmarkMeta::mutable_lead_image() {
  ::power_bookmarks::PowerBookmarkMeta_Image* _msg = _internal_mutable_lead_image();
  // @@protoc_insertion_point(field_mutable:power_bookmarks.PowerBookmarkMeta.lead_image)
  return _msg;
}
inline void PowerBookmarkMeta::set_allocated_lead_image(::power_bookmarks::PowerBookmarkMeta_Image* lead_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lead_image_;
  }
  if (lead_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lead_image);
    if (message_arena != submessage_arena) {
      lead_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lead_image, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lead_image_ = lead_image;
  // @@protoc_insertion_point(field_set_allocated:power_bookmarks.PowerBookmarkMeta.lead_image)
}

// repeated .power_bookmarks.PowerBookmarkMeta.Image fallback_images = 2;
inline int PowerBookmarkMeta::_internal_fallback_images_size() const {
  return fallback_images_.size();
}
inline int PowerBookmarkMeta::fallback_images_size() const {
  return _internal_fallback_images_size();
}
inline void PowerBookmarkMeta::clear_fallback_images() {
  fallback_images_.Clear();
}
inline ::power_bookmarks::PowerBookmarkMeta_Image* PowerBookmarkMeta::mutable_fallback_images(int index) {
  // @@protoc_insertion_point(field_mutable:power_bookmarks.PowerBookmarkMeta.fallback_images)
  return fallback_images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::power_bookmarks::PowerBookmarkMeta_Image >*
PowerBookmarkMeta::mutable_fallback_images() {
  // @@protoc_insertion_point(field_mutable_list:power_bookmarks.PowerBookmarkMeta.fallback_images)
  return &fallback_images_;
}
inline const ::power_bookmarks::PowerBookmarkMeta_Image& PowerBookmarkMeta::_internal_fallback_images(int index) const {
  return fallback_images_.Get(index);
}
inline const ::power_bookmarks::PowerBookmarkMeta_Image& PowerBookmarkMeta::fallback_images(int index) const {
  // @@protoc_insertion_point(field_get:power_bookmarks.PowerBookmarkMeta.fallback_images)
  return _internal_fallback_images(index);
}
inline ::power_bookmarks::PowerBookmarkMeta_Image* PowerBookmarkMeta::_internal_add_fallback_images() {
  return fallback_images_.Add();
}
inline ::power_bookmarks::PowerBookmarkMeta_Image* PowerBookmarkMeta::add_fallback_images() {
  ::power_bookmarks::PowerBookmarkMeta_Image* _add = _internal_add_fallback_images();
  // @@protoc_insertion_point(field_add:power_bookmarks.PowerBookmarkMeta.fallback_images)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::power_bookmarks::PowerBookmarkMeta_Image >&
PowerBookmarkMeta::fallback_images() const {
  // @@protoc_insertion_point(field_list:power_bookmarks.PowerBookmarkMeta.fallback_images)
  return fallback_images_;
}

// repeated .power_bookmarks.PowerBookmarkMeta.Tag tags = 3;
inline int PowerBookmarkMeta::_internal_tags_size() const {
  return tags_.size();
}
inline int PowerBookmarkMeta::tags_size() const {
  return _internal_tags_size();
}
inline void PowerBookmarkMeta::clear_tags() {
  tags_.Clear();
}
inline ::power_bookmarks::PowerBookmarkMeta_Tag* PowerBookmarkMeta::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:power_bookmarks.PowerBookmarkMeta.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::power_bookmarks::PowerBookmarkMeta_Tag >*
PowerBookmarkMeta::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:power_bookmarks.PowerBookmarkMeta.tags)
  return &tags_;
}
inline const ::power_bookmarks::PowerBookmarkMeta_Tag& PowerBookmarkMeta::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::power_bookmarks::PowerBookmarkMeta_Tag& PowerBookmarkMeta::tags(int index) const {
  // @@protoc_insertion_point(field_get:power_bookmarks.PowerBookmarkMeta.tags)
  return _internal_tags(index);
}
inline ::power_bookmarks::PowerBookmarkMeta_Tag* PowerBookmarkMeta::_internal_add_tags() {
  return tags_.Add();
}
inline ::power_bookmarks::PowerBookmarkMeta_Tag* PowerBookmarkMeta::add_tags() {
  ::power_bookmarks::PowerBookmarkMeta_Tag* _add = _internal_add_tags();
  // @@protoc_insertion_point(field_add:power_bookmarks.PowerBookmarkMeta.tags)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::power_bookmarks::PowerBookmarkMeta_Tag >&
PowerBookmarkMeta::tags() const {
  // @@protoc_insertion_point(field_list:power_bookmarks.PowerBookmarkMeta.tags)
  return tags_;
}

// optional .power_bookmarks.PowerBookmarkType type = 4;
inline bool PowerBookmarkMeta::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PowerBookmarkMeta::has_type() const {
  return _internal_has_type();
}
inline void PowerBookmarkMeta::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::power_bookmarks::PowerBookmarkType PowerBookmarkMeta::_internal_type() const {
  return static_cast< ::power_bookmarks::PowerBookmarkType >(type_);
}
inline ::power_bookmarks::PowerBookmarkType PowerBookmarkMeta::type() const {
  // @@protoc_insertion_point(field_get:power_bookmarks.PowerBookmarkMeta.type)
  return _internal_type();
}
inline void PowerBookmarkMeta::_internal_set_type(::power_bookmarks::PowerBookmarkType value) {
  assert(::power_bookmarks::PowerBookmarkType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void PowerBookmarkMeta::set_type(::power_bookmarks::PowerBookmarkType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:power_bookmarks.PowerBookmarkMeta.type)
}

// .power_bookmarks.ShoppingSpecifics shopping_specifics = 5;
inline bool PowerBookmarkMeta::_internal_has_shopping_specifics() const {
  return type_specifics_case() == kShoppingSpecifics;
}
inline bool PowerBookmarkMeta::has_shopping_specifics() const {
  return _internal_has_shopping_specifics();
}
inline void PowerBookmarkMeta::set_has_shopping_specifics() {
  _oneof_case_[0] = kShoppingSpecifics;
}
inline ::power_bookmarks::ShoppingSpecifics* PowerBookmarkMeta::release_shopping_specifics() {
  // @@protoc_insertion_point(field_release:power_bookmarks.PowerBookmarkMeta.shopping_specifics)
  if (_internal_has_shopping_specifics()) {
    clear_has_type_specifics();
    ::power_bookmarks::ShoppingSpecifics* temp = type_specifics_.shopping_specifics_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_specifics_.shopping_specifics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::power_bookmarks::ShoppingSpecifics& PowerBookmarkMeta::_internal_shopping_specifics() const {
  return _internal_has_shopping_specifics()
      ? *type_specifics_.shopping_specifics_
      : reinterpret_cast< ::power_bookmarks::ShoppingSpecifics&>(::power_bookmarks::_ShoppingSpecifics_default_instance_);
}
inline const ::power_bookmarks::ShoppingSpecifics& PowerBookmarkMeta::shopping_specifics() const {
  // @@protoc_insertion_point(field_get:power_bookmarks.PowerBookmarkMeta.shopping_specifics)
  return _internal_shopping_specifics();
}
inline ::power_bookmarks::ShoppingSpecifics* PowerBookmarkMeta::unsafe_arena_release_shopping_specifics() {
  // @@protoc_insertion_point(field_unsafe_arena_release:power_bookmarks.PowerBookmarkMeta.shopping_specifics)
  if (_internal_has_shopping_specifics()) {
    clear_has_type_specifics();
    ::power_bookmarks::ShoppingSpecifics* temp = type_specifics_.shopping_specifics_;
    type_specifics_.shopping_specifics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PowerBookmarkMeta::unsafe_arena_set_allocated_shopping_specifics(::power_bookmarks::ShoppingSpecifics* shopping_specifics) {
  clear_type_specifics();
  if (shopping_specifics) {
    set_has_shopping_specifics();
    type_specifics_.shopping_specifics_ = shopping_specifics;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:power_bookmarks.PowerBookmarkMeta.shopping_specifics)
}
inline ::power_bookmarks::ShoppingSpecifics* PowerBookmarkMeta::_internal_mutable_shopping_specifics() {
  if (!_internal_has_shopping_specifics()) {
    clear_type_specifics();
    set_has_shopping_specifics();
    type_specifics_.shopping_specifics_ = CreateMaybeMessage< ::power_bookmarks::ShoppingSpecifics >(GetArenaForAllocation());
  }
  return type_specifics_.shopping_specifics_;
}
inline ::power_bookmarks::ShoppingSpecifics* PowerBookmarkMeta::mutable_shopping_specifics() {
  ::power_bookmarks::ShoppingSpecifics* _msg = _internal_mutable_shopping_specifics();
  // @@protoc_insertion_point(field_mutable:power_bookmarks.PowerBookmarkMeta.shopping_specifics)
  return _msg;
}

inline bool PowerBookmarkMeta::has_type_specifics() const {
  return type_specifics_case() != TYPE_SPECIFICS_NOT_SET;
}
inline void PowerBookmarkMeta::clear_has_type_specifics() {
  _oneof_case_[0] = TYPE_SPECIFICS_NOT_SET;
}
inline PowerBookmarkMeta::TypeSpecificsCase PowerBookmarkMeta::type_specifics_case() const {
  return PowerBookmarkMeta::TypeSpecificsCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace power_bookmarks

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::power_bookmarks::PowerBookmarkType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fpower_5fbookmarks_2fcore_2fproto_2fpower_5fbookmark_5fmeta_2eproto
