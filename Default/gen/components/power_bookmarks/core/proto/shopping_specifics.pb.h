// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/power_bookmarks/core/proto/shopping_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fpower_5fbookmarks_2fcore_2fproto_2fshopping_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fpower_5fbookmarks_2fcore_2fproto_2fshopping_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fpower_5fbookmarks_2fcore_2fproto_2fshopping_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fpower_5fbookmarks_2fcore_2fproto_2fshopping_5fspecifics_2eproto {
  static const uint32_t offsets[];
};
namespace power_bookmarks {
class ProductPrice;
struct ProductPriceDefaultTypeInternal;
extern ProductPriceDefaultTypeInternal _ProductPrice_default_instance_;
class ShoppingSpecifics;
struct ShoppingSpecificsDefaultTypeInternal;
extern ShoppingSpecificsDefaultTypeInternal _ShoppingSpecifics_default_instance_;
}  // namespace power_bookmarks
PROTOBUF_NAMESPACE_OPEN
template<> ::power_bookmarks::ProductPrice* Arena::CreateMaybeMessage<::power_bookmarks::ProductPrice>(Arena*);
template<> ::power_bookmarks::ShoppingSpecifics* Arena::CreateMaybeMessage<::power_bookmarks::ShoppingSpecifics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace power_bookmarks {

// ===================================================================

class ShoppingSpecifics final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:power_bookmarks.ShoppingSpecifics) */ {
 public:
  inline ShoppingSpecifics() : ShoppingSpecifics(nullptr) {}
  ~ShoppingSpecifics() override;
  explicit PROTOBUF_CONSTEXPR ShoppingSpecifics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShoppingSpecifics(const ShoppingSpecifics& from);
  ShoppingSpecifics(ShoppingSpecifics&& from) noexcept
    : ShoppingSpecifics() {
    *this = ::std::move(from);
  }

  inline ShoppingSpecifics& operator=(const ShoppingSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShoppingSpecifics& operator=(ShoppingSpecifics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ShoppingSpecifics& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShoppingSpecifics* internal_default_instance() {
    return reinterpret_cast<const ShoppingSpecifics*>(
               &_ShoppingSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ShoppingSpecifics& a, ShoppingSpecifics& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ShoppingSpecifics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShoppingSpecifics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShoppingSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShoppingSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShoppingSpecifics& from);
  void MergeFrom(const ShoppingSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShoppingSpecifics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "power_bookmarks.ShoppingSpecifics";
  }
  protected:
  explicit ShoppingSpecifics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kImageUrlFieldNumber = 2,
    kCountryCodeFieldNumber = 7,
    kCurrentPriceFieldNumber = 3,
    kProductClusterIdFieldNumber = 4,
    kOfferIdFieldNumber = 6,
    kIsPriceTrackedFieldNumber = 5,
  };
  // optional string title = 1;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string image_url = 2;
  bool has_image_url() const;
  private:
  bool _internal_has_image_url() const;
  public:
  void clear_image_url();
  const std::string& image_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_url();
  PROTOBUF_NODISCARD std::string* release_image_url();
  void set_allocated_image_url(std::string* image_url);
  private:
  const std::string& _internal_image_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_url(const std::string& value);
  std::string* _internal_mutable_image_url();
  public:

  // optional string country_code = 7;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // optional .power_bookmarks.ProductPrice current_price = 3;
  bool has_current_price() const;
  private:
  bool _internal_has_current_price() const;
  public:
  void clear_current_price();
  const ::power_bookmarks::ProductPrice& current_price() const;
  PROTOBUF_NODISCARD ::power_bookmarks::ProductPrice* release_current_price();
  ::power_bookmarks::ProductPrice* mutable_current_price();
  void set_allocated_current_price(::power_bookmarks::ProductPrice* current_price);
  private:
  const ::power_bookmarks::ProductPrice& _internal_current_price() const;
  ::power_bookmarks::ProductPrice* _internal_mutable_current_price();
  public:
  void unsafe_arena_set_allocated_current_price(
      ::power_bookmarks::ProductPrice* current_price);
  ::power_bookmarks::ProductPrice* unsafe_arena_release_current_price();

  // optional uint64 product_cluster_id = 4;
  bool has_product_cluster_id() const;
  private:
  bool _internal_has_product_cluster_id() const;
  public:
  void clear_product_cluster_id();
  uint64_t product_cluster_id() const;
  void set_product_cluster_id(uint64_t value);
  private:
  uint64_t _internal_product_cluster_id() const;
  void _internal_set_product_cluster_id(uint64_t value);
  public:

  // optional fixed64 offer_id = 6;
  bool has_offer_id() const;
  private:
  bool _internal_has_offer_id() const;
  public:
  void clear_offer_id();
  uint64_t offer_id() const;
  void set_offer_id(uint64_t value);
  private:
  uint64_t _internal_offer_id() const;
  void _internal_set_offer_id(uint64_t value);
  public:

  // optional bool is_price_tracked = 5;
  bool has_is_price_tracked() const;
  private:
  bool _internal_has_is_price_tracked() const;
  public:
  void clear_is_price_tracked();
  bool is_price_tracked() const;
  void set_is_price_tracked(bool value);
  private:
  bool _internal_is_price_tracked() const;
  void _internal_set_is_price_tracked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:power_bookmarks.ShoppingSpecifics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  ::power_bookmarks::ProductPrice* current_price_;
  uint64_t product_cluster_id_;
  uint64_t offer_id_;
  bool is_price_tracked_;
  friend struct ::TableStruct_components_2fpower_5fbookmarks_2fcore_2fproto_2fshopping_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class ProductPrice final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:power_bookmarks.ProductPrice) */ {
 public:
  inline ProductPrice() : ProductPrice(nullptr) {}
  ~ProductPrice() override;
  explicit PROTOBUF_CONSTEXPR ProductPrice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProductPrice(const ProductPrice& from);
  ProductPrice(ProductPrice&& from) noexcept
    : ProductPrice() {
    *this = ::std::move(from);
  }

  inline ProductPrice& operator=(const ProductPrice& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductPrice& operator=(ProductPrice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ProductPrice& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProductPrice* internal_default_instance() {
    return reinterpret_cast<const ProductPrice*>(
               &_ProductPrice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProductPrice& a, ProductPrice& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ProductPrice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProductPrice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProductPrice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProductPrice>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ProductPrice& from);
  void MergeFrom(const ProductPrice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProductPrice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "power_bookmarks.ProductPrice";
  }
  protected:
  explicit ProductPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyCodeFieldNumber = 1,
    kAmountMicrosFieldNumber = 2,
  };
  // optional string currency_code = 1;
  bool has_currency_code() const;
  private:
  bool _internal_has_currency_code() const;
  public:
  void clear_currency_code();
  const std::string& currency_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency_code();
  PROTOBUF_NODISCARD std::string* release_currency_code();
  void set_allocated_currency_code(std::string* currency_code);
  private:
  const std::string& _internal_currency_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency_code(const std::string& value);
  std::string* _internal_mutable_currency_code();
  public:

  // optional int64 amount_micros = 2;
  bool has_amount_micros() const;
  private:
  bool _internal_has_amount_micros() const;
  public:
  void clear_amount_micros();
  int64_t amount_micros() const;
  void set_amount_micros(int64_t value);
  private:
  int64_t _internal_amount_micros() const;
  void _internal_set_amount_micros(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:power_bookmarks.ProductPrice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_code_;
  int64_t amount_micros_;
  friend struct ::TableStruct_components_2fpower_5fbookmarks_2fcore_2fproto_2fshopping_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ShoppingSpecifics

// optional string title = 1;
inline bool ShoppingSpecifics::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShoppingSpecifics::has_title() const {
  return _internal_has_title();
}
inline void ShoppingSpecifics::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ShoppingSpecifics::title() const {
  // @@protoc_insertion_point(field_get:power_bookmarks.ShoppingSpecifics.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShoppingSpecifics::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:power_bookmarks.ShoppingSpecifics.title)
}
inline std::string* ShoppingSpecifics::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:power_bookmarks.ShoppingSpecifics.title)
  return _s;
}
inline const std::string& ShoppingSpecifics::_internal_title() const {
  return title_.Get();
}
inline void ShoppingSpecifics::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* ShoppingSpecifics::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* ShoppingSpecifics::release_title() {
  // @@protoc_insertion_point(field_release:power_bookmarks.ShoppingSpecifics.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShoppingSpecifics::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:power_bookmarks.ShoppingSpecifics.title)
}

// optional string image_url = 2;
inline bool ShoppingSpecifics::_internal_has_image_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShoppingSpecifics::has_image_url() const {
  return _internal_has_image_url();
}
inline void ShoppingSpecifics::clear_image_url() {
  image_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ShoppingSpecifics::image_url() const {
  // @@protoc_insertion_point(field_get:power_bookmarks.ShoppingSpecifics.image_url)
  return _internal_image_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShoppingSpecifics::set_image_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 image_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:power_bookmarks.ShoppingSpecifics.image_url)
}
inline std::string* ShoppingSpecifics::mutable_image_url() {
  std::string* _s = _internal_mutable_image_url();
  // @@protoc_insertion_point(field_mutable:power_bookmarks.ShoppingSpecifics.image_url)
  return _s;
}
inline const std::string& ShoppingSpecifics::_internal_image_url() const {
  return image_url_.Get();
}
inline void ShoppingSpecifics::_internal_set_image_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  image_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ShoppingSpecifics::_internal_mutable_image_url() {
  _has_bits_[0] |= 0x00000002u;
  return image_url_.Mutable(GetArenaForAllocation());
}
inline std::string* ShoppingSpecifics::release_image_url() {
  // @@protoc_insertion_point(field_release:power_bookmarks.ShoppingSpecifics.image_url)
  if (!_internal_has_image_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = image_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_url_.IsDefault()) {
    image_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShoppingSpecifics::set_allocated_image_url(std::string* image_url) {
  if (image_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  image_url_.SetAllocated(image_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_url_.IsDefault()) {
    image_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:power_bookmarks.ShoppingSpecifics.image_url)
}

// optional .power_bookmarks.ProductPrice current_price = 3;
inline bool ShoppingSpecifics::_internal_has_current_price() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || current_price_ != nullptr);
  return value;
}
inline bool ShoppingSpecifics::has_current_price() const {
  return _internal_has_current_price();
}
inline void ShoppingSpecifics::clear_current_price() {
  if (current_price_ != nullptr) current_price_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::power_bookmarks::ProductPrice& ShoppingSpecifics::_internal_current_price() const {
  const ::power_bookmarks::ProductPrice* p = current_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::power_bookmarks::ProductPrice&>(
      ::power_bookmarks::_ProductPrice_default_instance_);
}
inline const ::power_bookmarks::ProductPrice& ShoppingSpecifics::current_price() const {
  // @@protoc_insertion_point(field_get:power_bookmarks.ShoppingSpecifics.current_price)
  return _internal_current_price();
}
inline void ShoppingSpecifics::unsafe_arena_set_allocated_current_price(
    ::power_bookmarks::ProductPrice* current_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_price_);
  }
  current_price_ = current_price;
  if (current_price) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:power_bookmarks.ShoppingSpecifics.current_price)
}
inline ::power_bookmarks::ProductPrice* ShoppingSpecifics::release_current_price() {
  _has_bits_[0] &= ~0x00000008u;
  ::power_bookmarks::ProductPrice* temp = current_price_;
  current_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::power_bookmarks::ProductPrice* ShoppingSpecifics::unsafe_arena_release_current_price() {
  // @@protoc_insertion_point(field_release:power_bookmarks.ShoppingSpecifics.current_price)
  _has_bits_[0] &= ~0x00000008u;
  ::power_bookmarks::ProductPrice* temp = current_price_;
  current_price_ = nullptr;
  return temp;
}
inline ::power_bookmarks::ProductPrice* ShoppingSpecifics::_internal_mutable_current_price() {
  _has_bits_[0] |= 0x00000008u;
  if (current_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::power_bookmarks::ProductPrice>(GetArenaForAllocation());
    current_price_ = p;
  }
  return current_price_;
}
inline ::power_bookmarks::ProductPrice* ShoppingSpecifics::mutable_current_price() {
  ::power_bookmarks::ProductPrice* _msg = _internal_mutable_current_price();
  // @@protoc_insertion_point(field_mutable:power_bookmarks.ShoppingSpecifics.current_price)
  return _msg;
}
inline void ShoppingSpecifics::set_allocated_current_price(::power_bookmarks::ProductPrice* current_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete current_price_;
  }
  if (current_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(current_price);
    if (message_arena != submessage_arena) {
      current_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_price, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  current_price_ = current_price;
  // @@protoc_insertion_point(field_set_allocated:power_bookmarks.ShoppingSpecifics.current_price)
}

// optional uint64 product_cluster_id = 4;
inline bool ShoppingSpecifics::_internal_has_product_cluster_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ShoppingSpecifics::has_product_cluster_id() const {
  return _internal_has_product_cluster_id();
}
inline void ShoppingSpecifics::clear_product_cluster_id() {
  product_cluster_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t ShoppingSpecifics::_internal_product_cluster_id() const {
  return product_cluster_id_;
}
inline uint64_t ShoppingSpecifics::product_cluster_id() const {
  // @@protoc_insertion_point(field_get:power_bookmarks.ShoppingSpecifics.product_cluster_id)
  return _internal_product_cluster_id();
}
inline void ShoppingSpecifics::_internal_set_product_cluster_id(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  product_cluster_id_ = value;
}
inline void ShoppingSpecifics::set_product_cluster_id(uint64_t value) {
  _internal_set_product_cluster_id(value);
  // @@protoc_insertion_point(field_set:power_bookmarks.ShoppingSpecifics.product_cluster_id)
}

// optional bool is_price_tracked = 5;
inline bool ShoppingSpecifics::_internal_has_is_price_tracked() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ShoppingSpecifics::has_is_price_tracked() const {
  return _internal_has_is_price_tracked();
}
inline void ShoppingSpecifics::clear_is_price_tracked() {
  is_price_tracked_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ShoppingSpecifics::_internal_is_price_tracked() const {
  return is_price_tracked_;
}
inline bool ShoppingSpecifics::is_price_tracked() const {
  // @@protoc_insertion_point(field_get:power_bookmarks.ShoppingSpecifics.is_price_tracked)
  return _internal_is_price_tracked();
}
inline void ShoppingSpecifics::_internal_set_is_price_tracked(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_price_tracked_ = value;
}
inline void ShoppingSpecifics::set_is_price_tracked(bool value) {
  _internal_set_is_price_tracked(value);
  // @@protoc_insertion_point(field_set:power_bookmarks.ShoppingSpecifics.is_price_tracked)
}

// optional fixed64 offer_id = 6;
inline bool ShoppingSpecifics::_internal_has_offer_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ShoppingSpecifics::has_offer_id() const {
  return _internal_has_offer_id();
}
inline void ShoppingSpecifics::clear_offer_id() {
  offer_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t ShoppingSpecifics::_internal_offer_id() const {
  return offer_id_;
}
inline uint64_t ShoppingSpecifics::offer_id() const {
  // @@protoc_insertion_point(field_get:power_bookmarks.ShoppingSpecifics.offer_id)
  return _internal_offer_id();
}
inline void ShoppingSpecifics::_internal_set_offer_id(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  offer_id_ = value;
}
inline void ShoppingSpecifics::set_offer_id(uint64_t value) {
  _internal_set_offer_id(value);
  // @@protoc_insertion_point(field_set:power_bookmarks.ShoppingSpecifics.offer_id)
}

// optional string country_code = 7;
inline bool ShoppingSpecifics::_internal_has_country_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ShoppingSpecifics::has_country_code() const {
  return _internal_has_country_code();
}
inline void ShoppingSpecifics::clear_country_code() {
  country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ShoppingSpecifics::country_code() const {
  // @@protoc_insertion_point(field_get:power_bookmarks.ShoppingSpecifics.country_code)
  return _internal_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShoppingSpecifics::set_country_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 country_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:power_bookmarks.ShoppingSpecifics.country_code)
}
inline std::string* ShoppingSpecifics::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:power_bookmarks.ShoppingSpecifics.country_code)
  return _s;
}
inline const std::string& ShoppingSpecifics::_internal_country_code() const {
  return country_code_.Get();
}
inline void ShoppingSpecifics::_internal_set_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  country_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ShoppingSpecifics::_internal_mutable_country_code() {
  _has_bits_[0] |= 0x00000004u;
  return country_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ShoppingSpecifics::release_country_code() {
  // @@protoc_insertion_point(field_release:power_bookmarks.ShoppingSpecifics.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = country_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault()) {
    country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShoppingSpecifics::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  country_code_.SetAllocated(country_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault()) {
    country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:power_bookmarks.ShoppingSpecifics.country_code)
}

// -------------------------------------------------------------------

// ProductPrice

// optional string currency_code = 1;
inline bool ProductPrice::_internal_has_currency_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProductPrice::has_currency_code() const {
  return _internal_has_currency_code();
}
inline void ProductPrice::clear_currency_code() {
  currency_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProductPrice::currency_code() const {
  // @@protoc_insertion_point(field_get:power_bookmarks.ProductPrice.currency_code)
  return _internal_currency_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProductPrice::set_currency_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 currency_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:power_bookmarks.ProductPrice.currency_code)
}
inline std::string* ProductPrice::mutable_currency_code() {
  std::string* _s = _internal_mutable_currency_code();
  // @@protoc_insertion_point(field_mutable:power_bookmarks.ProductPrice.currency_code)
  return _s;
}
inline const std::string& ProductPrice::_internal_currency_code() const {
  return currency_code_.Get();
}
inline void ProductPrice::_internal_set_currency_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  currency_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ProductPrice::_internal_mutable_currency_code() {
  _has_bits_[0] |= 0x00000001u;
  return currency_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ProductPrice::release_currency_code() {
  // @@protoc_insertion_point(field_release:power_bookmarks.ProductPrice.currency_code)
  if (!_internal_has_currency_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = currency_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (currency_code_.IsDefault()) {
    currency_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProductPrice::set_allocated_currency_code(std::string* currency_code) {
  if (currency_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  currency_code_.SetAllocated(currency_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (currency_code_.IsDefault()) {
    currency_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:power_bookmarks.ProductPrice.currency_code)
}

// optional int64 amount_micros = 2;
inline bool ProductPrice::_internal_has_amount_micros() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProductPrice::has_amount_micros() const {
  return _internal_has_amount_micros();
}
inline void ProductPrice::clear_amount_micros() {
  amount_micros_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t ProductPrice::_internal_amount_micros() const {
  return amount_micros_;
}
inline int64_t ProductPrice::amount_micros() const {
  // @@protoc_insertion_point(field_get:power_bookmarks.ProductPrice.amount_micros)
  return _internal_amount_micros();
}
inline void ProductPrice::_internal_set_amount_micros(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  amount_micros_ = value;
}
inline void ProductPrice::set_amount_micros(int64_t value) {
  _internal_set_amount_micros(value);
  // @@protoc_insertion_point(field_set:power_bookmarks.ProductPrice.amount_micros)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace power_bookmarks

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fpower_5fbookmarks_2fcore_2fproto_2fshopping_5fspecifics_2eproto
