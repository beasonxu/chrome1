// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/messages/MessageDispatcherBridge

#ifndef org_chromium_components_messages_MessageDispatcherBridge_JNI
#define org_chromium_components_messages_MessageDispatcherBridge_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_messages_MessageDispatcherBridge[];
const char kClassPath_org_chromium_components_messages_MessageDispatcherBridge[] =
    "org/chromium/components/messages/MessageDispatcherBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_messages_MessageDispatcherBridge_clazz(nullptr);
#ifndef org_chromium_components_messages_MessageDispatcherBridge_clazz_defined
#define org_chromium_components_messages_MessageDispatcherBridge_clazz_defined
inline jclass org_chromium_components_messages_MessageDispatcherBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_messages_MessageDispatcherBridge,
      &g_org_chromium_components_messages_MessageDispatcherBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace messages {


static std::atomic<jmethodID>
    g_org_chromium_components_messages_MessageDispatcherBridge_enqueueMessage(nullptr);
static jboolean Java_MessageDispatcherBridge_enqueueMessage(JNIEnv* env, const
    base::android::JavaRef<jobject>& message,
    const base::android::JavaRef<jobject>& webContents,
    JniIntWrapper scopeType,
    jboolean highPriority) {
  jclass clazz = org_chromium_components_messages_MessageDispatcherBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_messages_MessageDispatcherBridge_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "enqueueMessage",
"(Lorg/chromium/components/messages/MessageWrapper;Lorg/chromium/content_public/browser/WebContents;IZ)Z",
          &g_org_chromium_components_messages_MessageDispatcherBridge_enqueueMessage);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, message.obj(), webContents.obj(), as_jint(scopeType),
              highPriority);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_components_messages_MessageDispatcherBridge_enqueueWindowScopedMessage(nullptr);
static jboolean Java_MessageDispatcherBridge_enqueueWindowScopedMessage(JNIEnv* env, const
    base::android::JavaRef<jobject>& message,
    const base::android::JavaRef<jobject>& windowAndroid,
    jboolean highPriority) {
  jclass clazz = org_chromium_components_messages_MessageDispatcherBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_messages_MessageDispatcherBridge_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "enqueueWindowScopedMessage",
"(Lorg/chromium/components/messages/MessageWrapper;Lorg/chromium/ui/base/WindowAndroid;Z)Z",
          &g_org_chromium_components_messages_MessageDispatcherBridge_enqueueWindowScopedMessage);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, message.obj(), windowAndroid.obj(), highPriority);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_components_messages_MessageDispatcherBridge_dismissMessage(nullptr);
static void Java_MessageDispatcherBridge_dismissMessage(JNIEnv* env, const
    base::android::JavaRef<jobject>& message,
    const base::android::JavaRef<jobject>& windowAndroid,
    JniIntWrapper dismissReason) {
  jclass clazz = org_chromium_components_messages_MessageDispatcherBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_messages_MessageDispatcherBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "dismissMessage",
"(Lorg/chromium/components/messages/MessageWrapper;Lorg/chromium/ui/base/WindowAndroid;I)V",
          &g_org_chromium_components_messages_MessageDispatcherBridge_dismissMessage);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, message.obj(), windowAndroid.obj(), as_jint(dismissReason));
}

}  // namespace messages

#endif  // org_chromium_components_messages_MessageDispatcherBridge_JNI
