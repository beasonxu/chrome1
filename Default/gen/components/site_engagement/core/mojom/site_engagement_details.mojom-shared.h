// components/site_engagement/core/mojom/site_engagement_details.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SITE_ENGAGEMENT_CORE_MOJOM_SITE_ENGAGEMENT_DETAILS_MOJOM_SHARED_H_
#define COMPONENTS_SITE_ENGAGEMENT_CORE_MOJOM_SITE_ENGAGEMENT_DETAILS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/site_engagement/core/mojom/site_engagement_details.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace site_engagement {
namespace mojom {
class SiteEngagementDetailsDataView;



}  // namespace mojom
}  // namespace site_engagement

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::site_engagement::mojom::SiteEngagementDetailsDataView> {
  using Data = ::site_engagement::mojom::internal::SiteEngagementDetails_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace site_engagement {
namespace mojom {
// Interface base classes. They are used for type safety check.
class SiteEngagementDetailsProviderInterfaceBase {};

using SiteEngagementDetailsProviderPtrDataView =
    mojo::InterfacePtrDataView<SiteEngagementDetailsProviderInterfaceBase>;
using SiteEngagementDetailsProviderRequestDataView =
    mojo::InterfaceRequestDataView<SiteEngagementDetailsProviderInterfaceBase>;
using SiteEngagementDetailsProviderAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<SiteEngagementDetailsProviderInterfaceBase>;
using SiteEngagementDetailsProviderAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<SiteEngagementDetailsProviderInterfaceBase>;


class SiteEngagementDetailsDataView {
 public:
  SiteEngagementDetailsDataView() = default;

  SiteEngagementDetailsDataView(
      internal::SiteEngagementDetails_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOriginDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOrigin(UserType* output) {
    
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  double total_score() const {
    return data_->total_score;
  }
  double base_score() const {
    return data_->base_score;
  }
  double installed_bonus() const {
    return data_->installed_bonus;
  }
 private:
  internal::SiteEngagementDetails_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace site_engagement

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::site_engagement::mojom::SiteEngagementDetailsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::site_engagement::mojom::SiteEngagementDetailsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::site_engagement::mojom::internal::SiteEngagementDetails_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::origin(input)) in_origin = Traits::origin(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->origin)::BaseType> origin_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_origin, origin_fragment);
    fragment->origin.Set(
        origin_fragment.is_null() ? nullptr : origin_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->origin.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null origin in SiteEngagementDetails struct");
    fragment->total_score = Traits::total_score(input);
    fragment->base_score = Traits::base_score(input);
    fragment->installed_bonus = Traits::installed_bonus(input);
  }

  static bool Deserialize(::site_engagement::mojom::internal::SiteEngagementDetails_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::site_engagement::mojom::SiteEngagementDetailsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace site_engagement {
namespace mojom {

inline void SiteEngagementDetailsDataView::GetOriginDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace site_engagement

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // COMPONENTS_SITE_ENGAGEMENT_CORE_MOJOM_SITE_ENGAGEMENT_DETAILS_MOJOM_SHARED_H_