// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/browser/public/fast_checkout/proto/actions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fautofill_5fassistant_2fbrowser_2fpublic_2ffast_5fcheckout_2fproto_2factions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fautofill_5fassistant_2fbrowser_2fpublic_2ffast_5fcheckout_2fproto_2factions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fautofill_5fassistant_2fbrowser_2fpublic_2ffast_5fcheckout_2fproto_2factions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fautofill_5fassistant_2fbrowser_2fpublic_2ffast_5fcheckout_2fproto_2factions_2eproto {
  static const uint32_t offsets[];
};
namespace autofill_assistant {
namespace fast_checkout {
class FastCheckoutAction;
struct FastCheckoutActionDefaultTypeInternal;
extern FastCheckoutActionDefaultTypeInternal _FastCheckoutAction_default_instance_;
class WaitForFastCheckoutUserSelection;
struct WaitForFastCheckoutUserSelectionDefaultTypeInternal;
extern WaitForFastCheckoutUserSelectionDefaultTypeInternal _WaitForFastCheckoutUserSelection_default_instance_;
}  // namespace fast_checkout
}  // namespace autofill_assistant
PROTOBUF_NAMESPACE_OPEN
template<> ::autofill_assistant::fast_checkout::FastCheckoutAction* Arena::CreateMaybeMessage<::autofill_assistant::fast_checkout::FastCheckoutAction>(Arena*);
template<> ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection* Arena::CreateMaybeMessage<::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autofill_assistant {
namespace fast_checkout {

// ===================================================================

class WaitForFastCheckoutUserSelection final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill_assistant.fast_checkout.WaitForFastCheckoutUserSelection) */ {
 public:
  inline WaitForFastCheckoutUserSelection() : WaitForFastCheckoutUserSelection(nullptr) {}
  ~WaitForFastCheckoutUserSelection() override;
  explicit PROTOBUF_CONSTEXPR WaitForFastCheckoutUserSelection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitForFastCheckoutUserSelection(const WaitForFastCheckoutUserSelection& from);
  WaitForFastCheckoutUserSelection(WaitForFastCheckoutUserSelection&& from) noexcept
    : WaitForFastCheckoutUserSelection() {
    *this = ::std::move(from);
  }

  inline WaitForFastCheckoutUserSelection& operator=(const WaitForFastCheckoutUserSelection& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitForFastCheckoutUserSelection& operator=(WaitForFastCheckoutUserSelection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WaitForFastCheckoutUserSelection& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitForFastCheckoutUserSelection* internal_default_instance() {
    return reinterpret_cast<const WaitForFastCheckoutUserSelection*>(
               &_WaitForFastCheckoutUserSelection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WaitForFastCheckoutUserSelection& a, WaitForFastCheckoutUserSelection& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WaitForFastCheckoutUserSelection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitForFastCheckoutUserSelection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WaitForFastCheckoutUserSelection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WaitForFastCheckoutUserSelection>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WaitForFastCheckoutUserSelection& from);
  void MergeFrom(const WaitForFastCheckoutUserSelection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WaitForFastCheckoutUserSelection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill_assistant.fast_checkout.WaitForFastCheckoutUserSelection";
  }
  protected:
  explicit WaitForFastCheckoutUserSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:autofill_assistant.fast_checkout.WaitForFastCheckoutUserSelection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fautofill_5fassistant_2fbrowser_2fpublic_2ffast_5fcheckout_2fproto_2factions_2eproto;
};
// -------------------------------------------------------------------

class FastCheckoutAction final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill_assistant.fast_checkout.FastCheckoutAction) */ {
 public:
  inline FastCheckoutAction() : FastCheckoutAction(nullptr) {}
  ~FastCheckoutAction() override;
  explicit PROTOBUF_CONSTEXPR FastCheckoutAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FastCheckoutAction(const FastCheckoutAction& from);
  FastCheckoutAction(FastCheckoutAction&& from) noexcept
    : FastCheckoutAction() {
    *this = ::std::move(from);
  }

  inline FastCheckoutAction& operator=(const FastCheckoutAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastCheckoutAction& operator=(FastCheckoutAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FastCheckoutAction& default_instance() {
    return *internal_default_instance();
  }
  enum ActionCase {
    kWaitForUserSelection = 1,
    ACTION_NOT_SET = 0,
  };

  static inline const FastCheckoutAction* internal_default_instance() {
    return reinterpret_cast<const FastCheckoutAction*>(
               &_FastCheckoutAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FastCheckoutAction& a, FastCheckoutAction& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FastCheckoutAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastCheckoutAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FastCheckoutAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FastCheckoutAction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FastCheckoutAction& from);
  void MergeFrom(const FastCheckoutAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FastCheckoutAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill_assistant.fast_checkout.FastCheckoutAction";
  }
  protected:
  explicit FastCheckoutAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaitForUserSelectionFieldNumber = 1,
  };
  // .autofill_assistant.fast_checkout.WaitForFastCheckoutUserSelection wait_for_user_selection = 1;
  bool has_wait_for_user_selection() const;
  private:
  bool _internal_has_wait_for_user_selection() const;
  public:
  void clear_wait_for_user_selection();
  const ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection& wait_for_user_selection() const;
  PROTOBUF_NODISCARD ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection* release_wait_for_user_selection();
  ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection* mutable_wait_for_user_selection();
  void set_allocated_wait_for_user_selection(::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection* wait_for_user_selection);
  private:
  const ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection& _internal_wait_for_user_selection() const;
  ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection* _internal_mutable_wait_for_user_selection();
  public:
  void unsafe_arena_set_allocated_wait_for_user_selection(
      ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection* wait_for_user_selection);
  ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection* unsafe_arena_release_wait_for_user_selection();

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:autofill_assistant.fast_checkout.FastCheckoutAction)
 private:
  class _Internal;
  void set_has_wait_for_user_selection();

  inline bool has_action() const;
  inline void clear_has_action();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ActionUnion {
    constexpr ActionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection* wait_for_user_selection_;
  } action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2fautofill_5fassistant_2fbrowser_2fpublic_2ffast_5fcheckout_2fproto_2factions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WaitForFastCheckoutUserSelection

// -------------------------------------------------------------------

// FastCheckoutAction

// .autofill_assistant.fast_checkout.WaitForFastCheckoutUserSelection wait_for_user_selection = 1;
inline bool FastCheckoutAction::_internal_has_wait_for_user_selection() const {
  return action_case() == kWaitForUserSelection;
}
inline bool FastCheckoutAction::has_wait_for_user_selection() const {
  return _internal_has_wait_for_user_selection();
}
inline void FastCheckoutAction::set_has_wait_for_user_selection() {
  _oneof_case_[0] = kWaitForUserSelection;
}
inline void FastCheckoutAction::clear_wait_for_user_selection() {
  if (_internal_has_wait_for_user_selection()) {
    if (GetArenaForAllocation() == nullptr) {
      delete action_.wait_for_user_selection_;
    }
    clear_has_action();
  }
}
inline ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection* FastCheckoutAction::release_wait_for_user_selection() {
  // @@protoc_insertion_point(field_release:autofill_assistant.fast_checkout.FastCheckoutAction.wait_for_user_selection)
  if (_internal_has_wait_for_user_selection()) {
    clear_has_action();
    ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection* temp = action_.wait_for_user_selection_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.wait_for_user_selection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection& FastCheckoutAction::_internal_wait_for_user_selection() const {
  return _internal_has_wait_for_user_selection()
      ? *action_.wait_for_user_selection_
      : reinterpret_cast< ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection&>(::autofill_assistant::fast_checkout::_WaitForFastCheckoutUserSelection_default_instance_);
}
inline const ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection& FastCheckoutAction::wait_for_user_selection() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.fast_checkout.FastCheckoutAction.wait_for_user_selection)
  return _internal_wait_for_user_selection();
}
inline ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection* FastCheckoutAction::unsafe_arena_release_wait_for_user_selection() {
  // @@protoc_insertion_point(field_unsafe_arena_release:autofill_assistant.fast_checkout.FastCheckoutAction.wait_for_user_selection)
  if (_internal_has_wait_for_user_selection()) {
    clear_has_action();
    ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection* temp = action_.wait_for_user_selection_;
    action_.wait_for_user_selection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FastCheckoutAction::unsafe_arena_set_allocated_wait_for_user_selection(::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection* wait_for_user_selection) {
  clear_action();
  if (wait_for_user_selection) {
    set_has_wait_for_user_selection();
    action_.wait_for_user_selection_ = wait_for_user_selection;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill_assistant.fast_checkout.FastCheckoutAction.wait_for_user_selection)
}
inline ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection* FastCheckoutAction::_internal_mutable_wait_for_user_selection() {
  if (!_internal_has_wait_for_user_selection()) {
    clear_action();
    set_has_wait_for_user_selection();
    action_.wait_for_user_selection_ = CreateMaybeMessage< ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection >(GetArenaForAllocation());
  }
  return action_.wait_for_user_selection_;
}
inline ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection* FastCheckoutAction::mutable_wait_for_user_selection() {
  ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection* _msg = _internal_mutable_wait_for_user_selection();
  // @@protoc_insertion_point(field_mutable:autofill_assistant.fast_checkout.FastCheckoutAction.wait_for_user_selection)
  return _msg;
}

inline bool FastCheckoutAction::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void FastCheckoutAction::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline FastCheckoutAction::ActionCase FastCheckoutAction::action_case() const {
  return FastCheckoutAction::ActionCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fast_checkout
}  // namespace autofill_assistant

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fautofill_5fassistant_2fbrowser_2fpublic_2ffast_5fcheckout_2fproto_2factions_2eproto
