// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/browser/public/fast_checkout/proto/actions.proto

#include "components/autofill_assistant/browser/public/fast_checkout/proto/actions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace autofill_assistant {
namespace fast_checkout {
PROTOBUF_CONSTEXPR WaitForFastCheckoutUserSelection::WaitForFastCheckoutUserSelection(
    ::_pbi::ConstantInitialized){}
struct WaitForFastCheckoutUserSelectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitForFastCheckoutUserSelectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitForFastCheckoutUserSelectionDefaultTypeInternal() {}
  union {
    WaitForFastCheckoutUserSelection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitForFastCheckoutUserSelectionDefaultTypeInternal _WaitForFastCheckoutUserSelection_default_instance_;
PROTOBUF_CONSTEXPR FastCheckoutAction::FastCheckoutAction(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct FastCheckoutActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FastCheckoutActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FastCheckoutActionDefaultTypeInternal() {}
  union {
    FastCheckoutAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FastCheckoutActionDefaultTypeInternal _FastCheckoutAction_default_instance_;
}  // namespace fast_checkout
}  // namespace autofill_assistant
namespace autofill_assistant {
namespace fast_checkout {

// ===================================================================

class WaitForFastCheckoutUserSelection::_Internal {
 public:
};

WaitForFastCheckoutUserSelection::WaitForFastCheckoutUserSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.fast_checkout.WaitForFastCheckoutUserSelection)
}
WaitForFastCheckoutUserSelection::WaitForFastCheckoutUserSelection(const WaitForFastCheckoutUserSelection& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.fast_checkout.WaitForFastCheckoutUserSelection)
}

inline void WaitForFastCheckoutUserSelection::SharedCtor() {
}

WaitForFastCheckoutUserSelection::~WaitForFastCheckoutUserSelection() {
  // @@protoc_insertion_point(destructor:autofill_assistant.fast_checkout.WaitForFastCheckoutUserSelection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WaitForFastCheckoutUserSelection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WaitForFastCheckoutUserSelection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WaitForFastCheckoutUserSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.fast_checkout.WaitForFastCheckoutUserSelection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* WaitForFastCheckoutUserSelection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WaitForFastCheckoutUserSelection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.fast_checkout.WaitForFastCheckoutUserSelection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.fast_checkout.WaitForFastCheckoutUserSelection)
  return target;
}

size_t WaitForFastCheckoutUserSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.fast_checkout.WaitForFastCheckoutUserSelection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaitForFastCheckoutUserSelection::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WaitForFastCheckoutUserSelection*>(
      &from));
}

void WaitForFastCheckoutUserSelection::MergeFrom(const WaitForFastCheckoutUserSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.fast_checkout.WaitForFastCheckoutUserSelection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WaitForFastCheckoutUserSelection::CopyFrom(const WaitForFastCheckoutUserSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.fast_checkout.WaitForFastCheckoutUserSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitForFastCheckoutUserSelection::IsInitialized() const {
  return true;
}

void WaitForFastCheckoutUserSelection::InternalSwap(WaitForFastCheckoutUserSelection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string WaitForFastCheckoutUserSelection::GetTypeName() const {
  return "autofill_assistant.fast_checkout.WaitForFastCheckoutUserSelection";
}


// ===================================================================

class FastCheckoutAction::_Internal {
 public:
  static const ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection& wait_for_user_selection(const FastCheckoutAction* msg);
};

const ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection&
FastCheckoutAction::_Internal::wait_for_user_selection(const FastCheckoutAction* msg) {
  return *msg->action_.wait_for_user_selection_;
}
void FastCheckoutAction::set_allocated_wait_for_user_selection(::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection* wait_for_user_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (wait_for_user_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wait_for_user_selection);
    if (message_arena != submessage_arena) {
      wait_for_user_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wait_for_user_selection, submessage_arena);
    }
    set_has_wait_for_user_selection();
    action_.wait_for_user_selection_ = wait_for_user_selection;
  }
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.fast_checkout.FastCheckoutAction.wait_for_user_selection)
}
FastCheckoutAction::FastCheckoutAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.fast_checkout.FastCheckoutAction)
}
FastCheckoutAction::FastCheckoutAction(const FastCheckoutAction& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_action();
  switch (from.action_case()) {
    case kWaitForUserSelection: {
      _internal_mutable_wait_for_user_selection()->::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection::MergeFrom(from._internal_wait_for_user_selection());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.fast_checkout.FastCheckoutAction)
}

inline void FastCheckoutAction::SharedCtor() {
clear_has_action();
}

FastCheckoutAction::~FastCheckoutAction() {
  // @@protoc_insertion_point(destructor:autofill_assistant.fast_checkout.FastCheckoutAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FastCheckoutAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_action()) {
    clear_action();
  }
}

void FastCheckoutAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FastCheckoutAction::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:autofill_assistant.fast_checkout.FastCheckoutAction)
  switch (action_case()) {
    case kWaitForUserSelection: {
      if (GetArenaForAllocation() == nullptr) {
        delete action_.wait_for_user_selection_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void FastCheckoutAction::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.fast_checkout.FastCheckoutAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action();
  _internal_metadata_.Clear<std::string>();
}

const char* FastCheckoutAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autofill_assistant.fast_checkout.WaitForFastCheckoutUserSelection wait_for_user_selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_wait_for_user_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FastCheckoutAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.fast_checkout.FastCheckoutAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autofill_assistant.fast_checkout.WaitForFastCheckoutUserSelection wait_for_user_selection = 1;
  if (_internal_has_wait_for_user_selection()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::wait_for_user_selection(this),
        _Internal::wait_for_user_selection(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.fast_checkout.FastCheckoutAction)
  return target;
}

size_t FastCheckoutAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.fast_checkout.FastCheckoutAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (action_case()) {
    // .autofill_assistant.fast_checkout.WaitForFastCheckoutUserSelection wait_for_user_selection = 1;
    case kWaitForUserSelection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.wait_for_user_selection_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastCheckoutAction::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FastCheckoutAction*>(
      &from));
}

void FastCheckoutAction::MergeFrom(const FastCheckoutAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.fast_checkout.FastCheckoutAction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.action_case()) {
    case kWaitForUserSelection: {
      _internal_mutable_wait_for_user_selection()->::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection::MergeFrom(from._internal_wait_for_user_selection());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FastCheckoutAction::CopyFrom(const FastCheckoutAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.fast_checkout.FastCheckoutAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastCheckoutAction::IsInitialized() const {
  return true;
}

void FastCheckoutAction::InternalSwap(FastCheckoutAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string FastCheckoutAction::GetTypeName() const {
  return "autofill_assistant.fast_checkout.FastCheckoutAction";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fast_checkout
}  // namespace autofill_assistant
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection*
Arena::CreateMaybeMessage< ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::fast_checkout::WaitForFastCheckoutUserSelection >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::fast_checkout::FastCheckoutAction*
Arena::CreateMaybeMessage< ::autofill_assistant::fast_checkout::FastCheckoutAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::fast_checkout::FastCheckoutAction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
