// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/browser/public/external_action.proto

#include "components/autofill_assistant/browser/public/external_action.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace autofill_assistant {
namespace external {
PROTOBUF_CONSTEXPR Action::Action(
    ::_pbi::ConstantInitialized)
  : info_(nullptr){}
struct ActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionDefaultTypeInternal() {}
  union {
    Action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionDefaultTypeInternal _Action_default_instance_;
PROTOBUF_CONSTEXPR ActionInfo::ActionInfo(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct ActionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionInfoDefaultTypeInternal() {}
  union {
    ActionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionInfoDefaultTypeInternal _ActionInfo_default_instance_;
PROTOBUF_CONSTEXPR ProfileProto_ValuesEntry_DoNotUse::ProfileProto_ValuesEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct ProfileProto_ValuesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfileProto_ValuesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfileProto_ValuesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ProfileProto_ValuesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfileProto_ValuesEntry_DoNotUseDefaultTypeInternal _ProfileProto_ValuesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ProfileProto::ProfileProto(
    ::_pbi::ConstantInitialized)
  : values_(){}
struct ProfileProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfileProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfileProtoDefaultTypeInternal() {}
  union {
    ProfileProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfileProtoDefaultTypeInternal _ProfileProto_default_instance_;
PROTOBUF_CONSTEXPR CreditCardProto_ValuesEntry_DoNotUse::CreditCardProto_ValuesEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct CreditCardProto_ValuesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreditCardProto_ValuesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreditCardProto_ValuesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CreditCardProto_ValuesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreditCardProto_ValuesEntry_DoNotUseDefaultTypeInternal _CreditCardProto_ValuesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CreditCardProto::CreditCardProto(
    ::_pbi::ConstantInitialized)
  : values_()
  , network_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , server_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , record_type_(int64_t{0})
  , instrument_id_(int64_t{0}){}
struct CreditCardProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreditCardProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreditCardProtoDefaultTypeInternal() {}
  union {
    CreditCardProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreditCardProtoDefaultTypeInternal _CreditCardProto_default_instance_;
PROTOBUF_CONSTEXPR Result_SelectedProfilesEntry_DoNotUse::Result_SelectedProfilesEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct Result_SelectedProfilesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Result_SelectedProfilesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Result_SelectedProfilesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Result_SelectedProfilesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Result_SelectedProfilesEntry_DoNotUseDefaultTypeInternal _Result_SelectedProfilesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Result::Result(
    ::_pbi::ConstantInitialized)
  : selected_profiles_()
  , result_info_(nullptr)
  , selected_credit_card_(nullptr)
  , success_(false){}
struct ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultDefaultTypeInternal _Result_default_instance_;
PROTOBUF_CONSTEXPR ResultInfo::ResultInfo(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct ResultInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultInfoDefaultTypeInternal() {}
  union {
    ResultInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultInfoDefaultTypeInternal _ResultInfo_default_instance_;
PROTOBUF_CONSTEXPR ElementConditionsUpdate_ConditionResult::ElementConditionsUpdate_ConditionResult(
    ::_pbi::ConstantInitialized)
  : id_(0)
  , satisfied_(false){}
struct ElementConditionsUpdate_ConditionResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ElementConditionsUpdate_ConditionResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ElementConditionsUpdate_ConditionResultDefaultTypeInternal() {}
  union {
    ElementConditionsUpdate_ConditionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ElementConditionsUpdate_ConditionResultDefaultTypeInternal _ElementConditionsUpdate_ConditionResult_default_instance_;
PROTOBUF_CONSTEXPR ElementConditionsUpdate::ElementConditionsUpdate(
    ::_pbi::ConstantInitialized)
  : results_(){}
struct ElementConditionsUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ElementConditionsUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ElementConditionsUpdateDefaultTypeInternal() {}
  union {
    ElementConditionsUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ElementConditionsUpdateDefaultTypeInternal _ElementConditionsUpdate_default_instance_;
}  // namespace external
}  // namespace autofill_assistant
namespace autofill_assistant {
namespace external {

// ===================================================================

class Action::_Internal {
 public:
  using HasBits = decltype(std::declval<Action>()._has_bits_);
  static const ::autofill_assistant::external::ActionInfo& info(const Action* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill_assistant::external::ActionInfo&
Action::_Internal::info(const Action* msg) {
  return *msg->info_;
}
Action::Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.external.Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::autofill_assistant::external::ActionInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.external.Action)
}

inline void Action::SharedCtor() {
info_ = nullptr;
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:autofill_assistant.external.Action)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Action::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.external.Action)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Action::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.external.ActionInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Action::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.external.Action)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.external.ActionInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.external.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.external.Action)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .autofill_assistant.external.ActionInfo info = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Action*>(
      &from));
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.external.Action)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _internal_mutable_info()->::autofill_assistant::external::ActionInfo::MergeFrom(from._internal_info());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.external.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  if (_internal_has_info()) {
    if (!info_->IsInitialized()) return false;
  }
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
}

std::string Action::GetTypeName() const {
  return "autofill_assistant.external.Action";
}


// ===================================================================

class ActionInfo::_Internal {
 public:
  static const ::autofill_assistant::password_change::GenericPasswordChangeSpecification& generic_password_change_specification(const ActionInfo* msg);
  static const ::autofill_assistant::fast_checkout::FastCheckoutAction& fast_checkout_action(const ActionInfo* msg);
};

const ::autofill_assistant::password_change::GenericPasswordChangeSpecification&
ActionInfo::_Internal::generic_password_change_specification(const ActionInfo* msg) {
  return *msg->action_.generic_password_change_specification_;
}
const ::autofill_assistant::fast_checkout::FastCheckoutAction&
ActionInfo::_Internal::fast_checkout_action(const ActionInfo* msg) {
  return *msg->action_.fast_checkout_action_;
}
void ActionInfo::set_allocated_generic_password_change_specification(::autofill_assistant::password_change::GenericPasswordChangeSpecification* generic_password_change_specification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (generic_password_change_specification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(generic_password_change_specification));
    if (message_arena != submessage_arena) {
      generic_password_change_specification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generic_password_change_specification, submessage_arena);
    }
    set_has_generic_password_change_specification();
    action_.generic_password_change_specification_ = generic_password_change_specification;
  }
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.external.ActionInfo.generic_password_change_specification)
}
void ActionInfo::clear_generic_password_change_specification() {
  if (_internal_has_generic_password_change_specification()) {
    if (GetArenaForAllocation() == nullptr) {
      delete action_.generic_password_change_specification_;
    }
    clear_has_action();
  }
}
void ActionInfo::set_allocated_fast_checkout_action(::autofill_assistant::fast_checkout::FastCheckoutAction* fast_checkout_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (fast_checkout_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_checkout_action));
    if (message_arena != submessage_arena) {
      fast_checkout_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fast_checkout_action, submessage_arena);
    }
    set_has_fast_checkout_action();
    action_.fast_checkout_action_ = fast_checkout_action;
  }
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.external.ActionInfo.fast_checkout_action)
}
void ActionInfo::clear_fast_checkout_action() {
  if (_internal_has_fast_checkout_action()) {
    if (GetArenaForAllocation() == nullptr) {
      delete action_.fast_checkout_action_;
    }
    clear_has_action();
  }
}
ActionInfo::ActionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.external.ActionInfo)
}
ActionInfo::ActionInfo(const ActionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  clear_has_action();
  switch (from.action_case()) {
    case kGenericPasswordChangeSpecification: {
      _internal_mutable_generic_password_change_specification()->::autofill_assistant::password_change::GenericPasswordChangeSpecification::MergeFrom(from._internal_generic_password_change_specification());
      break;
    }
    case kFastCheckoutAction: {
      _internal_mutable_fast_checkout_action()->::autofill_assistant::fast_checkout::FastCheckoutAction::MergeFrom(from._internal_fast_checkout_action());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.external.ActionInfo)
}

inline void ActionInfo::SharedCtor() {
clear_has_action();
}

ActionInfo::~ActionInfo() {
  // @@protoc_insertion_point(destructor:autofill_assistant.external.ActionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_action()) {
    clear_action();
  }
}

void ActionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionInfo::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:autofill_assistant.external.ActionInfo)
  switch (action_case()) {
    case kGenericPasswordChangeSpecification: {
      if (GetArenaForAllocation() == nullptr) {
        delete action_.generic_password_change_specification_;
      }
      break;
    }
    case kFastCheckoutAction: {
      if (GetArenaForAllocation() == nullptr) {
        delete action_.fast_checkout_action_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void ActionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.external.ActionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  clear_action();
  _internal_metadata_.Clear<std::string>();
}

const char* ActionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autofill_assistant.password_change.GenericPasswordChangeSpecification generic_password_change_specification = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_generic_password_change_specification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autofill_assistant.fast_checkout.FastCheckoutAction fast_checkout_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_checkout_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((800u <= tag)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.external.ActionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (action_case()) {
    case kGenericPasswordChangeSpecification: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::generic_password_change_specification(this),
          _Internal::generic_password_change_specification(this).GetCachedSize(), target, stream);
      break;
    }
    case kFastCheckoutAction: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::fast_checkout_action(this),
          _Internal::fast_checkout_action(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // Extension range [100, 536870912)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 100, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.external.ActionInfo)
  return target;
}

size_t ActionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.external.ActionInfo)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (action_case()) {
    // .autofill_assistant.password_change.GenericPasswordChangeSpecification generic_password_change_specification = 1;
    case kGenericPasswordChangeSpecification: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.generic_password_change_specification_);
      break;
    }
    // .autofill_assistant.fast_checkout.FastCheckoutAction fast_checkout_action = 2;
    case kFastCheckoutAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.fast_checkout_action_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ActionInfo*>(
      &from));
}

void ActionInfo::MergeFrom(const ActionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.external.ActionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.action_case()) {
    case kGenericPasswordChangeSpecification: {
      _internal_mutable_generic_password_change_specification()->::autofill_assistant::password_change::GenericPasswordChangeSpecification::MergeFrom(from._internal_generic_password_change_specification());
      break;
    }
    case kFastCheckoutAction: {
      _internal_mutable_fast_checkout_action()->::autofill_assistant::fast_checkout::FastCheckoutAction::MergeFrom(from._internal_fast_checkout_action());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ActionInfo::CopyFrom(const ActionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.external.ActionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionInfo::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void ActionInfo::InternalSwap(ActionInfo* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string ActionInfo::GetTypeName() const {
  return "autofill_assistant.external.ActionInfo";
}


// ===================================================================

ProfileProto_ValuesEntry_DoNotUse::ProfileProto_ValuesEntry_DoNotUse() {}
ProfileProto_ValuesEntry_DoNotUse::ProfileProto_ValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProfileProto_ValuesEntry_DoNotUse::MergeFrom(const ProfileProto_ValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class ProfileProto::_Internal {
 public:
};

ProfileProto::ProfileProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.external.ProfileProto)
}
ProfileProto::ProfileProto(const ProfileProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  values_.MergeFrom(from.values_);
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.external.ProfileProto)
}

inline void ProfileProto::SharedCtor() {
}

ProfileProto::~ProfileProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.external.ProfileProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProfileProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  values_.Destruct();
}

void ProfileProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProfileProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.external.ProfileProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProfileProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, string> values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&values_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProfileProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.external.ProfileProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, string> values = 1;
  if (!this->_internal_values().empty()) {
    using MapType = ::_pb::Map<int32_t, std::string>;
    using WireHelper = ProfileProto_ValuesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_values();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.external.ProfileProto)
  return target;
}

size_t ProfileProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.external.ProfileProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, string> values = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_values_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_iterator
      it = this->_internal_values().begin();
      it != this->_internal_values().end(); ++it) {
    total_size += ProfileProto_ValuesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProfileProto*>(
      &from));
}

void ProfileProto::MergeFrom(const ProfileProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.external.ProfileProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProfileProto::CopyFrom(const ProfileProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.external.ProfileProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileProto::IsInitialized() const {
  return true;
}

void ProfileProto::InternalSwap(ProfileProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

std::string ProfileProto::GetTypeName() const {
  return "autofill_assistant.external.ProfileProto";
}


// ===================================================================

CreditCardProto_ValuesEntry_DoNotUse::CreditCardProto_ValuesEntry_DoNotUse() {}
CreditCardProto_ValuesEntry_DoNotUse::CreditCardProto_ValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CreditCardProto_ValuesEntry_DoNotUse::MergeFrom(const CreditCardProto_ValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class CreditCardProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CreditCardProto>()._has_bits_);
  static void set_has_record_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_instrument_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_network(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CreditCardProto::CreditCardProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.external.CreditCardProto)
}
CreditCardProto::CreditCardProto(const CreditCardProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  values_.MergeFrom(from.values_);
  network_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    network_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_network()) {
    network_.Set(from._internal_network(), 
      GetArenaForAllocation());
  }
  server_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    server_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_server_id()) {
    server_id_.Set(from._internal_server_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&record_type_, &from.record_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&instrument_id_) -
    reinterpret_cast<char*>(&record_type_)) + sizeof(instrument_id_));
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.external.CreditCardProto)
}

inline void CreditCardProto::SharedCtor() {
network_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  network_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
server_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  server_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&record_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&instrument_id_) -
    reinterpret_cast<char*>(&record_type_)) + sizeof(instrument_id_));
}

CreditCardProto::~CreditCardProto() {
  // @@protoc_insertion_point(destructor:autofill_assistant.external.CreditCardProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreditCardProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  values_.Destruct();
  network_.Destroy();
  server_id_.Destroy();
}

void CreditCardProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreditCardProto::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.external.CreditCardProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      network_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      server_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&record_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&instrument_id_) -
        reinterpret_cast<char*>(&record_type_)) + sizeof(instrument_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CreditCardProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, string> values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&values_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 record_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_record_type(&has_bits);
          record_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 instrument_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_instrument_id(&has_bits);
          instrument_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string network = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_network();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string server_id = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_server_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreditCardProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.external.CreditCardProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, string> values = 1;
  if (!this->_internal_values().empty()) {
    using MapType = ::_pb::Map<int32_t, std::string>;
    using WireHelper = CreditCardProto_ValuesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_values();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 record_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_record_type(), target);
  }

  // optional int64 instrument_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_instrument_id(), target);
  }

  // optional string network = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_network(), target);
  }

  // optional string server_id = 5 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.external.CreditCardProto)
  return target;
}

size_t CreditCardProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.external.CreditCardProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, string> values = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_values_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_iterator
      it = this->_internal_values().begin();
      it != this->_internal_values().end(); ++it) {
    total_size += CreditCardProto_ValuesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string network = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_network());
    }

    // optional string server_id = 5 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_id());
    }

    // optional int64 record_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_record_type());
    }

    // optional int64 instrument_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_instrument_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreditCardProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CreditCardProto*>(
      &from));
}

void CreditCardProto::MergeFrom(const CreditCardProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.external.CreditCardProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_network(from._internal_network());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_server_id(from._internal_server_id());
    }
    if (cached_has_bits & 0x00000004u) {
      record_type_ = from.record_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      instrument_id_ = from.instrument_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CreditCardProto::CopyFrom(const CreditCardProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.external.CreditCardProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreditCardProto::IsInitialized() const {
  return true;
}

void CreditCardProto::InternalSwap(CreditCardProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_.InternalSwap(&other->values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &network_, lhs_arena,
      &other->network_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &server_id_, lhs_arena,
      &other->server_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreditCardProto, instrument_id_)
      + sizeof(CreditCardProto::instrument_id_)
      - PROTOBUF_FIELD_OFFSET(CreditCardProto, record_type_)>(
          reinterpret_cast<char*>(&record_type_),
          reinterpret_cast<char*>(&other->record_type_));
}

std::string CreditCardProto::GetTypeName() const {
  return "autofill_assistant.external.CreditCardProto";
}


// ===================================================================

Result_SelectedProfilesEntry_DoNotUse::Result_SelectedProfilesEntry_DoNotUse() {}
Result_SelectedProfilesEntry_DoNotUse::Result_SelectedProfilesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Result_SelectedProfilesEntry_DoNotUse::MergeFrom(const Result_SelectedProfilesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class Result::_Internal {
 public:
  using HasBits = decltype(std::declval<Result>()._has_bits_);
  static const ::autofill_assistant::external::ResultInfo& result_info(const Result* msg);
  static void set_has_result_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::autofill_assistant::external::CreditCardProto& selected_credit_card(const Result* msg);
  static void set_has_selected_credit_card(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::autofill_assistant::external::ResultInfo&
Result::_Internal::result_info(const Result* msg) {
  return *msg->result_info_;
}
const ::autofill_assistant::external::CreditCardProto&
Result::_Internal::selected_credit_card(const Result* msg) {
  return *msg->selected_credit_card_;
}
Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  selected_profiles_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.external.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  selected_profiles_.MergeFrom(from.selected_profiles_);
  if (from._internal_has_result_info()) {
    result_info_ = new ::autofill_assistant::external::ResultInfo(*from.result_info_);
  } else {
    result_info_ = nullptr;
  }
  if (from._internal_has_selected_credit_card()) {
    selected_credit_card_ = new ::autofill_assistant::external::CreditCardProto(*from.selected_credit_card_);
  } else {
    selected_credit_card_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.external.Result)
}

inline void Result::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&result_info_)) + sizeof(success_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:autofill_assistant.external.Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  selected_profiles_.Destruct();
  if (this != internal_default_instance()) delete result_info_;
  if (this != internal_default_instance()) delete selected_credit_card_;
}

void Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.external.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selected_profiles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(result_info_ != nullptr);
      result_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(selected_credit_card_ != nullptr);
      selected_credit_card_->Clear();
    }
  }
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.external.ResultInfo result_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .autofill_assistant.external.ProfileProto> selected_profiles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&selected_profiles_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .autofill_assistant.external.CreditCardProto selected_credit_card = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_selected_credit_card(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.external.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.external.ResultInfo result_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_info(this),
        _Internal::result_info(this).GetCachedSize(), target, stream);
  }

  // optional bool success = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // map<string, .autofill_assistant.external.ProfileProto> selected_profiles = 3;
  if (!this->_internal_selected_profiles().empty()) {
    using MapType = ::_pb::Map<std::string, ::autofill_assistant::external::ProfileProto>;
    using WireHelper = Result_SelectedProfilesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_selected_profiles();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional .autofill_assistant.external.CreditCardProto selected_credit_card = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::selected_credit_card(this),
        _Internal::selected_credit_card(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.external.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.external.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .autofill_assistant.external.ProfileProto> selected_profiles = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_selected_profiles_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::autofill_assistant::external::ProfileProto >::const_iterator
      it = this->_internal_selected_profiles().begin();
      it != this->_internal_selected_profiles().end(); ++it) {
    total_size += Result_SelectedProfilesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .autofill_assistant.external.ResultInfo result_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_info_);
    }

    // optional .autofill_assistant.external.CreditCardProto selected_credit_card = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selected_credit_card_);
    }

    // optional bool success = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Result::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Result*>(
      &from));
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.external.Result)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  selected_profiles_.MergeFrom(from.selected_profiles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_result_info()->::autofill_assistant::external::ResultInfo::MergeFrom(from._internal_result_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_selected_credit_card()->::autofill_assistant::external::CreditCardProto::MergeFrom(from._internal_selected_credit_card());
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.external.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  if (_internal_has_result_info()) {
    if (!result_info_->IsInitialized()) return false;
  }
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  selected_profiles_.InternalSwap(&other->selected_profiles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Result, success_)
      + sizeof(Result::success_)
      - PROTOBUF_FIELD_OFFSET(Result, result_info_)>(
          reinterpret_cast<char*>(&result_info_),
          reinterpret_cast<char*>(&other->result_info_));
}

std::string Result::GetTypeName() const {
  return "autofill_assistant.external.Result";
}


// ===================================================================

class ResultInfo::_Internal {
 public:
  static const ::autofill_assistant::password_change::GenericPasswordChangeSpecificationResult& generic_password_change_specification_result(const ResultInfo* msg);
};

const ::autofill_assistant::password_change::GenericPasswordChangeSpecificationResult&
ResultInfo::_Internal::generic_password_change_specification_result(const ResultInfo* msg) {
  return *msg->result_.generic_password_change_specification_result_;
}
void ResultInfo::set_allocated_generic_password_change_specification_result(::autofill_assistant::password_change::GenericPasswordChangeSpecificationResult* generic_password_change_specification_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_result();
  if (generic_password_change_specification_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(generic_password_change_specification_result));
    if (message_arena != submessage_arena) {
      generic_password_change_specification_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generic_password_change_specification_result, submessage_arena);
    }
    set_has_generic_password_change_specification_result();
    result_.generic_password_change_specification_result_ = generic_password_change_specification_result;
  }
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.external.ResultInfo.generic_password_change_specification_result)
}
void ResultInfo::clear_generic_password_change_specification_result() {
  if (_internal_has_generic_password_change_specification_result()) {
    if (GetArenaForAllocation() == nullptr) {
      delete result_.generic_password_change_specification_result_;
    }
    clear_has_result();
  }
}
ResultInfo::ResultInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.external.ResultInfo)
}
ResultInfo::ResultInfo(const ResultInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  clear_has_result();
  switch (from.result_case()) {
    case kGenericPasswordChangeSpecificationResult: {
      _internal_mutable_generic_password_change_specification_result()->::autofill_assistant::password_change::GenericPasswordChangeSpecificationResult::MergeFrom(from._internal_generic_password_change_specification_result());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.external.ResultInfo)
}

inline void ResultInfo::SharedCtor() {
clear_has_result();
}

ResultInfo::~ResultInfo() {
  // @@protoc_insertion_point(destructor:autofill_assistant.external.ResultInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResultInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_result()) {
    clear_result();
  }
}

void ResultInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResultInfo::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:autofill_assistant.external.ResultInfo)
  switch (result_case()) {
    case kGenericPasswordChangeSpecificationResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete result_.generic_password_change_specification_result_;
      }
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESULT_NOT_SET;
}


void ResultInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.external.ResultInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  clear_result();
  _internal_metadata_.Clear<std::string>();
}

const char* ResultInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autofill_assistant.password_change.GenericPasswordChangeSpecificationResult generic_password_change_specification_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_generic_password_change_specification_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((800u <= tag)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResultInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.external.ResultInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autofill_assistant.password_change.GenericPasswordChangeSpecificationResult generic_password_change_specification_result = 1;
  if (_internal_has_generic_password_change_specification_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::generic_password_change_specification_result(this),
        _Internal::generic_password_change_specification_result(this).GetCachedSize(), target, stream);
  }

  // Extension range [100, 536870912)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 100, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.external.ResultInfo)
  return target;
}

size_t ResultInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.external.ResultInfo)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (result_case()) {
    // .autofill_assistant.password_change.GenericPasswordChangeSpecificationResult generic_password_change_specification_result = 1;
    case kGenericPasswordChangeSpecificationResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.generic_password_change_specification_result_);
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResultInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ResultInfo*>(
      &from));
}

void ResultInfo::MergeFrom(const ResultInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.external.ResultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.result_case()) {
    case kGenericPasswordChangeSpecificationResult: {
      _internal_mutable_generic_password_change_specification_result()->::autofill_assistant::password_change::GenericPasswordChangeSpecificationResult::MergeFrom(from._internal_generic_password_change_specification_result());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ResultInfo::CopyFrom(const ResultInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.external.ResultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultInfo::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void ResultInfo::InternalSwap(ResultInfo* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string ResultInfo::GetTypeName() const {
  return "autofill_assistant.external.ResultInfo";
}


// ===================================================================

class ElementConditionsUpdate_ConditionResult::_Internal {
 public:
  using HasBits = decltype(std::declval<ElementConditionsUpdate_ConditionResult>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_satisfied(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ElementConditionsUpdate_ConditionResult::ElementConditionsUpdate_ConditionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.external.ElementConditionsUpdate.ConditionResult)
}
ElementConditionsUpdate_ConditionResult::ElementConditionsUpdate_ConditionResult(const ElementConditionsUpdate_ConditionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&satisfied_) -
    reinterpret_cast<char*>(&id_)) + sizeof(satisfied_));
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.external.ElementConditionsUpdate.ConditionResult)
}

inline void ElementConditionsUpdate_ConditionResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&satisfied_) -
    reinterpret_cast<char*>(&id_)) + sizeof(satisfied_));
}

ElementConditionsUpdate_ConditionResult::~ElementConditionsUpdate_ConditionResult() {
  // @@protoc_insertion_point(destructor:autofill_assistant.external.ElementConditionsUpdate.ConditionResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ElementConditionsUpdate_ConditionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ElementConditionsUpdate_ConditionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ElementConditionsUpdate_ConditionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.external.ElementConditionsUpdate.ConditionResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&satisfied_) -
        reinterpret_cast<char*>(&id_)) + sizeof(satisfied_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ElementConditionsUpdate_ConditionResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool satisfied = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_satisfied(&has_bits);
          satisfied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ElementConditionsUpdate_ConditionResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.external.ElementConditionsUpdate.ConditionResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional bool satisfied = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_satisfied(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.external.ElementConditionsUpdate.ConditionResult)
  return target;
}

size_t ElementConditionsUpdate_ConditionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.external.ElementConditionsUpdate.ConditionResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional bool satisfied = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElementConditionsUpdate_ConditionResult::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ElementConditionsUpdate_ConditionResult*>(
      &from));
}

void ElementConditionsUpdate_ConditionResult::MergeFrom(const ElementConditionsUpdate_ConditionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.external.ElementConditionsUpdate.ConditionResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      satisfied_ = from.satisfied_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ElementConditionsUpdate_ConditionResult::CopyFrom(const ElementConditionsUpdate_ConditionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.external.ElementConditionsUpdate.ConditionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementConditionsUpdate_ConditionResult::IsInitialized() const {
  return true;
}

void ElementConditionsUpdate_ConditionResult::InternalSwap(ElementConditionsUpdate_ConditionResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ElementConditionsUpdate_ConditionResult, satisfied_)
      + sizeof(ElementConditionsUpdate_ConditionResult::satisfied_)
      - PROTOBUF_FIELD_OFFSET(ElementConditionsUpdate_ConditionResult, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

std::string ElementConditionsUpdate_ConditionResult::GetTypeName() const {
  return "autofill_assistant.external.ElementConditionsUpdate.ConditionResult";
}


// ===================================================================

class ElementConditionsUpdate::_Internal {
 public:
};

ElementConditionsUpdate::ElementConditionsUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  results_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.external.ElementConditionsUpdate)
}
ElementConditionsUpdate::ElementConditionsUpdate(const ElementConditionsUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.external.ElementConditionsUpdate)
}

inline void ElementConditionsUpdate::SharedCtor() {
}

ElementConditionsUpdate::~ElementConditionsUpdate() {
  // @@protoc_insertion_point(destructor:autofill_assistant.external.ElementConditionsUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ElementConditionsUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ElementConditionsUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ElementConditionsUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.external.ElementConditionsUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ElementConditionsUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .autofill_assistant.external.ElementConditionsUpdate.ConditionResult results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ElementConditionsUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.external.ElementConditionsUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autofill_assistant.external.ElementConditionsUpdate.ConditionResult results = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.external.ElementConditionsUpdate)
  return target;
}

size_t ElementConditionsUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.external.ElementConditionsUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autofill_assistant.external.ElementConditionsUpdate.ConditionResult results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElementConditionsUpdate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ElementConditionsUpdate*>(
      &from));
}

void ElementConditionsUpdate::MergeFrom(const ElementConditionsUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.external.ElementConditionsUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ElementConditionsUpdate::CopyFrom(const ElementConditionsUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.external.ElementConditionsUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementConditionsUpdate::IsInitialized() const {
  return true;
}

void ElementConditionsUpdate::InternalSwap(ElementConditionsUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

std::string ElementConditionsUpdate::GetTypeName() const {
  return "autofill_assistant.external.ElementConditionsUpdate";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace external
}  // namespace autofill_assistant
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autofill_assistant::external::Action*
Arena::CreateMaybeMessage< ::autofill_assistant::external::Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::external::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::external::ActionInfo*
Arena::CreateMaybeMessage< ::autofill_assistant::external::ActionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::external::ActionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::external::ProfileProto_ValuesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::autofill_assistant::external::ProfileProto_ValuesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::external::ProfileProto_ValuesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::external::ProfileProto*
Arena::CreateMaybeMessage< ::autofill_assistant::external::ProfileProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::external::ProfileProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::external::CreditCardProto_ValuesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::autofill_assistant::external::CreditCardProto_ValuesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::external::CreditCardProto_ValuesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::external::CreditCardProto*
Arena::CreateMaybeMessage< ::autofill_assistant::external::CreditCardProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::external::CreditCardProto >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::external::Result_SelectedProfilesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::autofill_assistant::external::Result_SelectedProfilesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::external::Result_SelectedProfilesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::external::Result*
Arena::CreateMaybeMessage< ::autofill_assistant::external::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::external::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::external::ResultInfo*
Arena::CreateMaybeMessage< ::autofill_assistant::external::ResultInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::external::ResultInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::external::ElementConditionsUpdate_ConditionResult*
Arena::CreateMaybeMessage< ::autofill_assistant::external::ElementConditionsUpdate_ConditionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::external::ElementConditionsUpdate_ConditionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::external::ElementConditionsUpdate*
Arena::CreateMaybeMessage< ::autofill_assistant::external::ElementConditionsUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::external::ElementConditionsUpdate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
