// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/browser/public/password_change/proto/actions.proto

#include "components/autofill_assistant/browser/public/password_change/proto/actions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace autofill_assistant {
namespace password_change {
PROTOBUF_CONSTEXPR Choice::Choice(
    ::_pbi::ConstantInitialized)
  : text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , tag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , highlighted_(false){}
struct ChoiceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChoiceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChoiceDefaultTypeInternal() {}
  union {
    Choice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChoiceDefaultTypeInternal _Choice_default_instance_;
PROTOBUF_CONSTEXPR BasePromptSpecification_Result::BasePromptSpecification_Result(
    ::_pbi::ConstantInitialized)
  : selected_tag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct BasePromptSpecification_ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BasePromptSpecification_ResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BasePromptSpecification_ResultDefaultTypeInternal() {}
  union {
    BasePromptSpecification_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BasePromptSpecification_ResultDefaultTypeInternal _BasePromptSpecification_Result_default_instance_;
PROTOBUF_CONSTEXPR BasePromptSpecification::BasePromptSpecification(
    ::_pbi::ConstantInitialized)
  : choices_()
  , output_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , description_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct BasePromptSpecificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BasePromptSpecificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BasePromptSpecificationDefaultTypeInternal() {}
  union {
    BasePromptSpecification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BasePromptSpecificationDefaultTypeInternal _BasePromptSpecification_default_instance_;
PROTOBUF_CONSTEXPR UseGeneratedPasswordPromptSpecification_Result::UseGeneratedPasswordPromptSpecification_Result(
    ::_pbi::ConstantInitialized)
  : generated_password_accepted_(false){}
struct UseGeneratedPasswordPromptSpecification_ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UseGeneratedPasswordPromptSpecification_ResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UseGeneratedPasswordPromptSpecification_ResultDefaultTypeInternal() {}
  union {
    UseGeneratedPasswordPromptSpecification_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UseGeneratedPasswordPromptSpecification_ResultDefaultTypeInternal _UseGeneratedPasswordPromptSpecification_Result_default_instance_;
PROTOBUF_CONSTEXPR UseGeneratedPasswordPromptSpecification::UseGeneratedPasswordPromptSpecification(
    ::_pbi::ConstantInitialized)
  : title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , description_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , manual_password_choice_(nullptr)
  , generated_password_choice_(nullptr){}
struct UseGeneratedPasswordPromptSpecificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UseGeneratedPasswordPromptSpecificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UseGeneratedPasswordPromptSpecificationDefaultTypeInternal() {}
  union {
    UseGeneratedPasswordPromptSpecification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UseGeneratedPasswordPromptSpecificationDefaultTypeInternal _UseGeneratedPasswordPromptSpecification_default_instance_;
PROTOBUF_CONSTEXPR UpdateSidePanelSpecification::UpdateSidePanelSpecification(
    ::_pbi::ConstantInitialized)
  : title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , description_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , top_icon_(0)

  , progress_step_(0)
{}
struct UpdateSidePanelSpecificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateSidePanelSpecificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateSidePanelSpecificationDefaultTypeInternal() {}
  union {
    UpdateSidePanelSpecification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateSidePanelSpecificationDefaultTypeInternal _UpdateSidePanelSpecification_default_instance_;
PROTOBUF_CONSTEXPR GenericPasswordChangeSpecification::GenericPasswordChangeSpecification(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct GenericPasswordChangeSpecificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenericPasswordChangeSpecificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenericPasswordChangeSpecificationDefaultTypeInternal() {}
  union {
    GenericPasswordChangeSpecification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenericPasswordChangeSpecificationDefaultTypeInternal _GenericPasswordChangeSpecification_default_instance_;
PROTOBUF_CONSTEXPR GenericPasswordChangeSpecificationResult::GenericPasswordChangeSpecificationResult(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct GenericPasswordChangeSpecificationResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenericPasswordChangeSpecificationResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenericPasswordChangeSpecificationResultDefaultTypeInternal() {}
  union {
    GenericPasswordChangeSpecificationResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenericPasswordChangeSpecificationResultDefaultTypeInternal _GenericPasswordChangeSpecificationResult_default_instance_;
}  // namespace password_change
}  // namespace autofill_assistant
namespace autofill_assistant {
namespace password_change {
bool TopIcon_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TopIcon_strings[9] = {};

static const char TopIcon_names[] =
  "TOP_ICON_BAD_NEW_PASSWORD"
  "TOP_ICON_CHANGED_PASSWORD"
  "TOP_ICON_CHOOSE_NEW_PASSWORD"
  "TOP_ICON_ENTER_OLD_PASSWORD"
  "TOP_ICON_ERROR_OCCURRED"
  "TOP_ICON_OPEN_SITE_SETTINGS"
  "TOP_ICON_SAVE_NEW_PASSWORD"
  "TOP_ICON_UNSPECIFIED"
  "TOP_ICON_USER_ACTION_REQUIRED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TopIcon_entries[] = {
  { {TopIcon_names + 0, 25}, 6 },
  { {TopIcon_names + 25, 25}, 5 },
  { {TopIcon_names + 50, 28}, 3 },
  { {TopIcon_names + 78, 27}, 2 },
  { {TopIcon_names + 105, 23}, 7 },
  { {TopIcon_names + 128, 27}, 1 },
  { {TopIcon_names + 155, 26}, 4 },
  { {TopIcon_names + 181, 20}, 0 },
  { {TopIcon_names + 201, 29}, 8 },
};

static const int TopIcon_entries_by_number[] = {
  7, // 0 -> TOP_ICON_UNSPECIFIED
  5, // 1 -> TOP_ICON_OPEN_SITE_SETTINGS
  3, // 2 -> TOP_ICON_ENTER_OLD_PASSWORD
  2, // 3 -> TOP_ICON_CHOOSE_NEW_PASSWORD
  6, // 4 -> TOP_ICON_SAVE_NEW_PASSWORD
  1, // 5 -> TOP_ICON_CHANGED_PASSWORD
  0, // 6 -> TOP_ICON_BAD_NEW_PASSWORD
  4, // 7 -> TOP_ICON_ERROR_OCCURRED
  8, // 8 -> TOP_ICON_USER_ACTION_REQUIRED
};

const std::string& TopIcon_Name(
    TopIcon value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TopIcon_entries,
          TopIcon_entries_by_number,
          9, TopIcon_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TopIcon_entries,
      TopIcon_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TopIcon_strings[idx].get();
}
bool TopIcon_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TopIcon* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TopIcon_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<TopIcon>(int_value);
  }
  return success;
}
bool ProgressStep_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ProgressStep_strings[5] = {};

static const char ProgressStep_names[] =
  "PROGRESS_STEP_CHANGE_PASSWORD"
  "PROGRESS_STEP_END"
  "PROGRESS_STEP_SAVE_PASSWORD"
  "PROGRESS_STEP_START"
  "PROGRESS_STEP_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ProgressStep_entries[] = {
  { {ProgressStep_names + 0, 29}, 2 },
  { {ProgressStep_names + 29, 17}, 4 },
  { {ProgressStep_names + 46, 27}, 3 },
  { {ProgressStep_names + 73, 19}, 1 },
  { {ProgressStep_names + 92, 25}, 0 },
};

static const int ProgressStep_entries_by_number[] = {
  4, // 0 -> PROGRESS_STEP_UNSPECIFIED
  3, // 1 -> PROGRESS_STEP_START
  0, // 2 -> PROGRESS_STEP_CHANGE_PASSWORD
  2, // 3 -> PROGRESS_STEP_SAVE_PASSWORD
  1, // 4 -> PROGRESS_STEP_END
};

const std::string& ProgressStep_Name(
    ProgressStep value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ProgressStep_entries,
          ProgressStep_entries_by_number,
          5, ProgressStep_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ProgressStep_entries,
      ProgressStep_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ProgressStep_strings[idx].get();
}
bool ProgressStep_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProgressStep* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ProgressStep_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ProgressStep>(int_value);
  }
  return success;
}

// ===================================================================

class Choice::_Internal {
 public:
  using HasBits = decltype(std::declval<Choice>()._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_highlighted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Choice::Choice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.password_change.Choice)
}
Choice::Choice(const Choice& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    text_.Set(from._internal_text(), 
      GetArenaForAllocation());
  }
  tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    tag_.Set(from._internal_tag(), 
      GetArenaForAllocation());
  }
  highlighted_ = from.highlighted_;
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.password_change.Choice)
}

inline void Choice::SharedCtor() {
text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
highlighted_ = false;
}

Choice::~Choice() {
  // @@protoc_insertion_point(destructor:autofill_assistant.password_change.Choice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Choice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.Destroy();
  tag_.Destroy();
}

void Choice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Choice::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.password_change.Choice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tag_.ClearNonDefaultToEmpty();
    }
  }
  highlighted_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Choice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool highlighted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_highlighted(&has_bits);
          highlighted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Choice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.password_change.Choice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tag(), target);
  }

  // optional bool highlighted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_highlighted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.password_change.Choice)
  return target;
}

size_t Choice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.password_change.Choice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string text = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional string tag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional bool highlighted = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Choice::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Choice*>(
      &from));
}

void Choice::MergeFrom(const Choice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.password_change.Choice)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      highlighted_ = from.highlighted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Choice::CopyFrom(const Choice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.password_change.Choice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Choice::IsInitialized() const {
  return true;
}

void Choice::InternalSwap(Choice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tag_, lhs_arena,
      &other->tag_, rhs_arena
  );
  swap(highlighted_, other->highlighted_);
}

std::string Choice::GetTypeName() const {
  return "autofill_assistant.password_change.Choice";
}


// ===================================================================

class BasePromptSpecification_Result::_Internal {
 public:
  using HasBits = decltype(std::declval<BasePromptSpecification_Result>()._has_bits_);
  static void set_has_selected_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BasePromptSpecification_Result::BasePromptSpecification_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.password_change.BasePromptSpecification.Result)
}
BasePromptSpecification_Result::BasePromptSpecification_Result(const BasePromptSpecification_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  selected_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    selected_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_selected_tag()) {
    selected_tag_.Set(from._internal_selected_tag(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.password_change.BasePromptSpecification.Result)
}

inline void BasePromptSpecification_Result::SharedCtor() {
selected_tag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  selected_tag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BasePromptSpecification_Result::~BasePromptSpecification_Result() {
  // @@protoc_insertion_point(destructor:autofill_assistant.password_change.BasePromptSpecification.Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BasePromptSpecification_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  selected_tag_.Destroy();
}

void BasePromptSpecification_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BasePromptSpecification_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.password_change.BasePromptSpecification.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    selected_tag_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BasePromptSpecification_Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string selected_tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_selected_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BasePromptSpecification_Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.password_change.BasePromptSpecification.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string selected_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_selected_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.password_change.BasePromptSpecification.Result)
  return target;
}

size_t BasePromptSpecification_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.password_change.BasePromptSpecification.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string selected_tag = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selected_tag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasePromptSpecification_Result::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BasePromptSpecification_Result*>(
      &from));
}

void BasePromptSpecification_Result::MergeFrom(const BasePromptSpecification_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.password_change.BasePromptSpecification.Result)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_selected_tag()) {
    _internal_set_selected_tag(from._internal_selected_tag());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BasePromptSpecification_Result::CopyFrom(const BasePromptSpecification_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.password_change.BasePromptSpecification.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasePromptSpecification_Result::IsInitialized() const {
  return true;
}

void BasePromptSpecification_Result::InternalSwap(BasePromptSpecification_Result* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &selected_tag_, lhs_arena,
      &other->selected_tag_, rhs_arena
  );
}

std::string BasePromptSpecification_Result::GetTypeName() const {
  return "autofill_assistant.password_change.BasePromptSpecification.Result";
}


// ===================================================================

class BasePromptSpecification::_Internal {
 public:
  using HasBits = decltype(std::declval<BasePromptSpecification>()._has_bits_);
  static void set_has_output_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BasePromptSpecification::BasePromptSpecification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  choices_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.password_change.BasePromptSpecification)
}
BasePromptSpecification::BasePromptSpecification(const BasePromptSpecification& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      choices_(from.choices_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  output_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    output_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_output_key()) {
    output_key_.Set(from._internal_output_key(), 
      GetArenaForAllocation());
  }
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    description_.Set(from._internal_description(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.password_change.BasePromptSpecification)
}

inline void BasePromptSpecification::SharedCtor() {
output_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  output_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BasePromptSpecification::~BasePromptSpecification() {
  // @@protoc_insertion_point(destructor:autofill_assistant.password_change.BasePromptSpecification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BasePromptSpecification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  output_key_.Destroy();
  title_.Destroy();
  description_.Destroy();
}

void BasePromptSpecification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BasePromptSpecification::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.password_change.BasePromptSpecification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  choices_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      output_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      description_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BasePromptSpecification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string output_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_output_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .autofill_assistant.password_change.Choice choices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_choices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BasePromptSpecification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.password_change.BasePromptSpecification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string output_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_output_key(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // repeated .autofill_assistant.password_change.Choice choices = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_choices_size()); i < n; i++) {
    const auto& repfield = this->_internal_choices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.password_change.BasePromptSpecification)
  return target;
}

size_t BasePromptSpecification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.password_change.BasePromptSpecification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autofill_assistant.password_change.Choice choices = 3;
  total_size += 1UL * this->_internal_choices_size();
  for (const auto& msg : this->choices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string output_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_key());
    }

    // optional string title = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string description = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasePromptSpecification::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BasePromptSpecification*>(
      &from));
}

void BasePromptSpecification::MergeFrom(const BasePromptSpecification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.password_change.BasePromptSpecification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  choices_.MergeFrom(from.choices_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_output_key(from._internal_output_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_description(from._internal_description());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BasePromptSpecification::CopyFrom(const BasePromptSpecification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.password_change.BasePromptSpecification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasePromptSpecification::IsInitialized() const {
  return true;
}

void BasePromptSpecification::InternalSwap(BasePromptSpecification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  choices_.InternalSwap(&other->choices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &output_key_, lhs_arena,
      &other->output_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
}

std::string BasePromptSpecification::GetTypeName() const {
  return "autofill_assistant.password_change.BasePromptSpecification";
}


// ===================================================================

class UseGeneratedPasswordPromptSpecification_Result::_Internal {
 public:
  using HasBits = decltype(std::declval<UseGeneratedPasswordPromptSpecification_Result>()._has_bits_);
  static void set_has_generated_password_accepted(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UseGeneratedPasswordPromptSpecification_Result::UseGeneratedPasswordPromptSpecification_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification.Result)
}
UseGeneratedPasswordPromptSpecification_Result::UseGeneratedPasswordPromptSpecification_Result(const UseGeneratedPasswordPromptSpecification_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  generated_password_accepted_ = from.generated_password_accepted_;
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification.Result)
}

inline void UseGeneratedPasswordPromptSpecification_Result::SharedCtor() {
generated_password_accepted_ = false;
}

UseGeneratedPasswordPromptSpecification_Result::~UseGeneratedPasswordPromptSpecification_Result() {
  // @@protoc_insertion_point(destructor:autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification.Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UseGeneratedPasswordPromptSpecification_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UseGeneratedPasswordPromptSpecification_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UseGeneratedPasswordPromptSpecification_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  generated_password_accepted_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UseGeneratedPasswordPromptSpecification_Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool generated_password_accepted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_generated_password_accepted(&has_bits);
          generated_password_accepted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UseGeneratedPasswordPromptSpecification_Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool generated_password_accepted = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_generated_password_accepted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification.Result)
  return target;
}

size_t UseGeneratedPasswordPromptSpecification_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool generated_password_accepted = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseGeneratedPasswordPromptSpecification_Result::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UseGeneratedPasswordPromptSpecification_Result*>(
      &from));
}

void UseGeneratedPasswordPromptSpecification_Result::MergeFrom(const UseGeneratedPasswordPromptSpecification_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification.Result)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_generated_password_accepted()) {
    _internal_set_generated_password_accepted(from._internal_generated_password_accepted());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UseGeneratedPasswordPromptSpecification_Result::CopyFrom(const UseGeneratedPasswordPromptSpecification_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseGeneratedPasswordPromptSpecification_Result::IsInitialized() const {
  return true;
}

void UseGeneratedPasswordPromptSpecification_Result::InternalSwap(UseGeneratedPasswordPromptSpecification_Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(generated_password_accepted_, other->generated_password_accepted_);
}

std::string UseGeneratedPasswordPromptSpecification_Result::GetTypeName() const {
  return "autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification.Result";
}


// ===================================================================

class UseGeneratedPasswordPromptSpecification::_Internal {
 public:
  using HasBits = decltype(std::declval<UseGeneratedPasswordPromptSpecification>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::autofill_assistant::password_change::Choice& manual_password_choice(const UseGeneratedPasswordPromptSpecification* msg);
  static void set_has_manual_password_choice(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::autofill_assistant::password_change::Choice& generated_password_choice(const UseGeneratedPasswordPromptSpecification* msg);
  static void set_has_generated_password_choice(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::autofill_assistant::password_change::Choice&
UseGeneratedPasswordPromptSpecification::_Internal::manual_password_choice(const UseGeneratedPasswordPromptSpecification* msg) {
  return *msg->manual_password_choice_;
}
const ::autofill_assistant::password_change::Choice&
UseGeneratedPasswordPromptSpecification::_Internal::generated_password_choice(const UseGeneratedPasswordPromptSpecification* msg) {
  return *msg->generated_password_choice_;
}
UseGeneratedPasswordPromptSpecification::UseGeneratedPasswordPromptSpecification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification)
}
UseGeneratedPasswordPromptSpecification::UseGeneratedPasswordPromptSpecification(const UseGeneratedPasswordPromptSpecification& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    description_.Set(from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_manual_password_choice()) {
    manual_password_choice_ = new ::autofill_assistant::password_change::Choice(*from.manual_password_choice_);
  } else {
    manual_password_choice_ = nullptr;
  }
  if (from._internal_has_generated_password_choice()) {
    generated_password_choice_ = new ::autofill_assistant::password_change::Choice(*from.generated_password_choice_);
  } else {
    generated_password_choice_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification)
}

inline void UseGeneratedPasswordPromptSpecification::SharedCtor() {
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&manual_password_choice_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&generated_password_choice_) -
    reinterpret_cast<char*>(&manual_password_choice_)) + sizeof(generated_password_choice_));
}

UseGeneratedPasswordPromptSpecification::~UseGeneratedPasswordPromptSpecification() {
  // @@protoc_insertion_point(destructor:autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UseGeneratedPasswordPromptSpecification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.Destroy();
  description_.Destroy();
  if (this != internal_default_instance()) delete manual_password_choice_;
  if (this != internal_default_instance()) delete generated_password_choice_;
}

void UseGeneratedPasswordPromptSpecification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UseGeneratedPasswordPromptSpecification::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(manual_password_choice_ != nullptr);
      manual_password_choice_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(generated_password_choice_ != nullptr);
      generated_password_choice_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UseGeneratedPasswordPromptSpecification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill_assistant.password_change.Choice manual_password_choice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_manual_password_choice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill_assistant.password_change.Choice generated_password_choice = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_generated_password_choice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UseGeneratedPasswordPromptSpecification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // optional .autofill_assistant.password_change.Choice manual_password_choice = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::manual_password_choice(this),
        _Internal::manual_password_choice(this).GetCachedSize(), target, stream);
  }

  // optional .autofill_assistant.password_change.Choice generated_password_choice = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::generated_password_choice(this),
        _Internal::generated_password_choice(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification)
  return target;
}

size_t UseGeneratedPasswordPromptSpecification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string description = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional .autofill_assistant.password_change.Choice manual_password_choice = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *manual_password_choice_);
    }

    // optional .autofill_assistant.password_change.Choice generated_password_choice = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *generated_password_choice_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseGeneratedPasswordPromptSpecification::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UseGeneratedPasswordPromptSpecification*>(
      &from));
}

void UseGeneratedPasswordPromptSpecification::MergeFrom(const UseGeneratedPasswordPromptSpecification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_manual_password_choice()->::autofill_assistant::password_change::Choice::MergeFrom(from._internal_manual_password_choice());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_generated_password_choice()->::autofill_assistant::password_change::Choice::MergeFrom(from._internal_generated_password_choice());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UseGeneratedPasswordPromptSpecification::CopyFrom(const UseGeneratedPasswordPromptSpecification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseGeneratedPasswordPromptSpecification::IsInitialized() const {
  return true;
}

void UseGeneratedPasswordPromptSpecification::InternalSwap(UseGeneratedPasswordPromptSpecification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UseGeneratedPasswordPromptSpecification, generated_password_choice_)
      + sizeof(UseGeneratedPasswordPromptSpecification::generated_password_choice_)
      - PROTOBUF_FIELD_OFFSET(UseGeneratedPasswordPromptSpecification, manual_password_choice_)>(
          reinterpret_cast<char*>(&manual_password_choice_),
          reinterpret_cast<char*>(&other->manual_password_choice_));
}

std::string UseGeneratedPasswordPromptSpecification::GetTypeName() const {
  return "autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification";
}


// ===================================================================

class UpdateSidePanelSpecification::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateSidePanelSpecification>()._has_bits_);
  static void set_has_top_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_progress_step(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

UpdateSidePanelSpecification::UpdateSidePanelSpecification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.password_change.UpdateSidePanelSpecification)
}
UpdateSidePanelSpecification::UpdateSidePanelSpecification(const UpdateSidePanelSpecification& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    description_.Set(from._internal_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&top_icon_, &from.top_icon_,
    static_cast<size_t>(reinterpret_cast<char*>(&progress_step_) -
    reinterpret_cast<char*>(&top_icon_)) + sizeof(progress_step_));
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.password_change.UpdateSidePanelSpecification)
}

inline void UpdateSidePanelSpecification::SharedCtor() {
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&top_icon_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&progress_step_) -
    reinterpret_cast<char*>(&top_icon_)) + sizeof(progress_step_));
}

UpdateSidePanelSpecification::~UpdateSidePanelSpecification() {
  // @@protoc_insertion_point(destructor:autofill_assistant.password_change.UpdateSidePanelSpecification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateSidePanelSpecification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.Destroy();
  description_.Destroy();
}

void UpdateSidePanelSpecification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateSidePanelSpecification::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.password_change.UpdateSidePanelSpecification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&top_icon_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&progress_step_) -
        reinterpret_cast<char*>(&top_icon_)) + sizeof(progress_step_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UpdateSidePanelSpecification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.password_change.TopIcon top_icon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::autofill_assistant::password_change::TopIcon_IsValid(val))) {
            _internal_set_top_icon(static_cast<::autofill_assistant::password_change::TopIcon>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill_assistant.password_change.ProgressStep progress_step = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::autofill_assistant::password_change::ProgressStep_IsValid(val))) {
            _internal_set_progress_step(static_cast<::autofill_assistant::password_change::ProgressStep>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateSidePanelSpecification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.password_change.UpdateSidePanelSpecification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.password_change.TopIcon top_icon = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_top_icon(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // optional .autofill_assistant.password_change.ProgressStep progress_step = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_progress_step(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.password_change.UpdateSidePanelSpecification)
  return target;
}

size_t UpdateSidePanelSpecification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.password_change.UpdateSidePanelSpecification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string description = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional .autofill_assistant.password_change.TopIcon top_icon = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_top_icon());
    }

    // optional .autofill_assistant.password_change.ProgressStep progress_step = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_progress_step());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateSidePanelSpecification::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UpdateSidePanelSpecification*>(
      &from));
}

void UpdateSidePanelSpecification::MergeFrom(const UpdateSidePanelSpecification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.password_change.UpdateSidePanelSpecification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      top_icon_ = from.top_icon_;
    }
    if (cached_has_bits & 0x00000008u) {
      progress_step_ = from.progress_step_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UpdateSidePanelSpecification::CopyFrom(const UpdateSidePanelSpecification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.password_change.UpdateSidePanelSpecification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSidePanelSpecification::IsInitialized() const {
  return true;
}

void UpdateSidePanelSpecification::InternalSwap(UpdateSidePanelSpecification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateSidePanelSpecification, progress_step_)
      + sizeof(UpdateSidePanelSpecification::progress_step_)
      - PROTOBUF_FIELD_OFFSET(UpdateSidePanelSpecification, top_icon_)>(
          reinterpret_cast<char*>(&top_icon_),
          reinterpret_cast<char*>(&other->top_icon_));
}

std::string UpdateSidePanelSpecification::GetTypeName() const {
  return "autofill_assistant.password_change.UpdateSidePanelSpecification";
}


// ===================================================================

class GenericPasswordChangeSpecification::_Internal {
 public:
  static const ::autofill_assistant::password_change::BasePromptSpecification& base_prompt(const GenericPasswordChangeSpecification* msg);
  static const ::autofill_assistant::password_change::UseGeneratedPasswordPromptSpecification& use_generated_password_prompt(const GenericPasswordChangeSpecification* msg);
  static const ::autofill_assistant::password_change::UpdateSidePanelSpecification& update_side_panel(const GenericPasswordChangeSpecification* msg);
};

const ::autofill_assistant::password_change::BasePromptSpecification&
GenericPasswordChangeSpecification::_Internal::base_prompt(const GenericPasswordChangeSpecification* msg) {
  return *msg->specification_.base_prompt_;
}
const ::autofill_assistant::password_change::UseGeneratedPasswordPromptSpecification&
GenericPasswordChangeSpecification::_Internal::use_generated_password_prompt(const GenericPasswordChangeSpecification* msg) {
  return *msg->specification_.use_generated_password_prompt_;
}
const ::autofill_assistant::password_change::UpdateSidePanelSpecification&
GenericPasswordChangeSpecification::_Internal::update_side_panel(const GenericPasswordChangeSpecification* msg) {
  return *msg->specification_.update_side_panel_;
}
void GenericPasswordChangeSpecification::set_allocated_base_prompt(::autofill_assistant::password_change::BasePromptSpecification* base_prompt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specification();
  if (base_prompt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base_prompt);
    if (message_arena != submessage_arena) {
      base_prompt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_prompt, submessage_arena);
    }
    set_has_base_prompt();
    specification_.base_prompt_ = base_prompt;
  }
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.password_change.GenericPasswordChangeSpecification.base_prompt)
}
void GenericPasswordChangeSpecification::set_allocated_use_generated_password_prompt(::autofill_assistant::password_change::UseGeneratedPasswordPromptSpecification* use_generated_password_prompt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specification();
  if (use_generated_password_prompt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(use_generated_password_prompt);
    if (message_arena != submessage_arena) {
      use_generated_password_prompt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, use_generated_password_prompt, submessage_arena);
    }
    set_has_use_generated_password_prompt();
    specification_.use_generated_password_prompt_ = use_generated_password_prompt;
  }
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.password_change.GenericPasswordChangeSpecification.use_generated_password_prompt)
}
void GenericPasswordChangeSpecification::set_allocated_update_side_panel(::autofill_assistant::password_change::UpdateSidePanelSpecification* update_side_panel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specification();
  if (update_side_panel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update_side_panel);
    if (message_arena != submessage_arena) {
      update_side_panel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_side_panel, submessage_arena);
    }
    set_has_update_side_panel();
    specification_.update_side_panel_ = update_side_panel;
  }
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.password_change.GenericPasswordChangeSpecification.update_side_panel)
}
GenericPasswordChangeSpecification::GenericPasswordChangeSpecification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.password_change.GenericPasswordChangeSpecification)
}
GenericPasswordChangeSpecification::GenericPasswordChangeSpecification(const GenericPasswordChangeSpecification& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_specification();
  switch (from.specification_case()) {
    case kBasePrompt: {
      _internal_mutable_base_prompt()->::autofill_assistant::password_change::BasePromptSpecification::MergeFrom(from._internal_base_prompt());
      break;
    }
    case kUseGeneratedPasswordPrompt: {
      _internal_mutable_use_generated_password_prompt()->::autofill_assistant::password_change::UseGeneratedPasswordPromptSpecification::MergeFrom(from._internal_use_generated_password_prompt());
      break;
    }
    case kUpdateSidePanel: {
      _internal_mutable_update_side_panel()->::autofill_assistant::password_change::UpdateSidePanelSpecification::MergeFrom(from._internal_update_side_panel());
      break;
    }
    case SPECIFICATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.password_change.GenericPasswordChangeSpecification)
}

inline void GenericPasswordChangeSpecification::SharedCtor() {
clear_has_specification();
}

GenericPasswordChangeSpecification::~GenericPasswordChangeSpecification() {
  // @@protoc_insertion_point(destructor:autofill_assistant.password_change.GenericPasswordChangeSpecification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenericPasswordChangeSpecification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_specification()) {
    clear_specification();
  }
}

void GenericPasswordChangeSpecification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenericPasswordChangeSpecification::clear_specification() {
// @@protoc_insertion_point(one_of_clear_start:autofill_assistant.password_change.GenericPasswordChangeSpecification)
  switch (specification_case()) {
    case kBasePrompt: {
      if (GetArenaForAllocation() == nullptr) {
        delete specification_.base_prompt_;
      }
      break;
    }
    case kUseGeneratedPasswordPrompt: {
      if (GetArenaForAllocation() == nullptr) {
        delete specification_.use_generated_password_prompt_;
      }
      break;
    }
    case kUpdateSidePanel: {
      if (GetArenaForAllocation() == nullptr) {
        delete specification_.update_side_panel_;
      }
      break;
    }
    case SPECIFICATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SPECIFICATION_NOT_SET;
}


void GenericPasswordChangeSpecification::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.password_change.GenericPasswordChangeSpecification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_specification();
  _internal_metadata_.Clear<std::string>();
}

const char* GenericPasswordChangeSpecification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autofill_assistant.password_change.BasePromptSpecification base_prompt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_prompt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification use_generated_password_prompt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_use_generated_password_prompt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autofill_assistant.password_change.UpdateSidePanelSpecification update_side_panel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_side_panel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenericPasswordChangeSpecification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.password_change.GenericPasswordChangeSpecification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (specification_case()) {
    case kBasePrompt: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::base_prompt(this),
          _Internal::base_prompt(this).GetCachedSize(), target, stream);
      break;
    }
    case kUseGeneratedPasswordPrompt: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::use_generated_password_prompt(this),
          _Internal::use_generated_password_prompt(this).GetCachedSize(), target, stream);
      break;
    }
    case kUpdateSidePanel: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::update_side_panel(this),
          _Internal::update_side_panel(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.password_change.GenericPasswordChangeSpecification)
  return target;
}

size_t GenericPasswordChangeSpecification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.password_change.GenericPasswordChangeSpecification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (specification_case()) {
    // .autofill_assistant.password_change.BasePromptSpecification base_prompt = 1;
    case kBasePrompt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specification_.base_prompt_);
      break;
    }
    // .autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification use_generated_password_prompt = 2;
    case kUseGeneratedPasswordPrompt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specification_.use_generated_password_prompt_);
      break;
    }
    // .autofill_assistant.password_change.UpdateSidePanelSpecification update_side_panel = 3;
    case kUpdateSidePanel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *specification_.update_side_panel_);
      break;
    }
    case SPECIFICATION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericPasswordChangeSpecification::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GenericPasswordChangeSpecification*>(
      &from));
}

void GenericPasswordChangeSpecification::MergeFrom(const GenericPasswordChangeSpecification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.password_change.GenericPasswordChangeSpecification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.specification_case()) {
    case kBasePrompt: {
      _internal_mutable_base_prompt()->::autofill_assistant::password_change::BasePromptSpecification::MergeFrom(from._internal_base_prompt());
      break;
    }
    case kUseGeneratedPasswordPrompt: {
      _internal_mutable_use_generated_password_prompt()->::autofill_assistant::password_change::UseGeneratedPasswordPromptSpecification::MergeFrom(from._internal_use_generated_password_prompt());
      break;
    }
    case kUpdateSidePanel: {
      _internal_mutable_update_side_panel()->::autofill_assistant::password_change::UpdateSidePanelSpecification::MergeFrom(from._internal_update_side_panel());
      break;
    }
    case SPECIFICATION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GenericPasswordChangeSpecification::CopyFrom(const GenericPasswordChangeSpecification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.password_change.GenericPasswordChangeSpecification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericPasswordChangeSpecification::IsInitialized() const {
  return true;
}

void GenericPasswordChangeSpecification::InternalSwap(GenericPasswordChangeSpecification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(specification_, other->specification_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string GenericPasswordChangeSpecification::GetTypeName() const {
  return "autofill_assistant.password_change.GenericPasswordChangeSpecification";
}


// ===================================================================

class GenericPasswordChangeSpecificationResult::_Internal {
 public:
  static const ::autofill_assistant::password_change::BasePromptSpecification_Result& base_prompt_result(const GenericPasswordChangeSpecificationResult* msg);
  static const ::autofill_assistant::password_change::UseGeneratedPasswordPromptSpecification_Result& use_generated_password_prompt_result(const GenericPasswordChangeSpecificationResult* msg);
};

const ::autofill_assistant::password_change::BasePromptSpecification_Result&
GenericPasswordChangeSpecificationResult::_Internal::base_prompt_result(const GenericPasswordChangeSpecificationResult* msg) {
  return *msg->result_.base_prompt_result_;
}
const ::autofill_assistant::password_change::UseGeneratedPasswordPromptSpecification_Result&
GenericPasswordChangeSpecificationResult::_Internal::use_generated_password_prompt_result(const GenericPasswordChangeSpecificationResult* msg) {
  return *msg->result_.use_generated_password_prompt_result_;
}
void GenericPasswordChangeSpecificationResult::set_allocated_base_prompt_result(::autofill_assistant::password_change::BasePromptSpecification_Result* base_prompt_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_result();
  if (base_prompt_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base_prompt_result);
    if (message_arena != submessage_arena) {
      base_prompt_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_prompt_result, submessage_arena);
    }
    set_has_base_prompt_result();
    result_.base_prompt_result_ = base_prompt_result;
  }
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.password_change.GenericPasswordChangeSpecificationResult.base_prompt_result)
}
void GenericPasswordChangeSpecificationResult::set_allocated_use_generated_password_prompt_result(::autofill_assistant::password_change::UseGeneratedPasswordPromptSpecification_Result* use_generated_password_prompt_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_result();
  if (use_generated_password_prompt_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(use_generated_password_prompt_result);
    if (message_arena != submessage_arena) {
      use_generated_password_prompt_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, use_generated_password_prompt_result, submessage_arena);
    }
    set_has_use_generated_password_prompt_result();
    result_.use_generated_password_prompt_result_ = use_generated_password_prompt_result;
  }
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.password_change.GenericPasswordChangeSpecificationResult.use_generated_password_prompt_result)
}
GenericPasswordChangeSpecificationResult::GenericPasswordChangeSpecificationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.password_change.GenericPasswordChangeSpecificationResult)
}
GenericPasswordChangeSpecificationResult::GenericPasswordChangeSpecificationResult(const GenericPasswordChangeSpecificationResult& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_result();
  switch (from.result_case()) {
    case kBasePromptResult: {
      _internal_mutable_base_prompt_result()->::autofill_assistant::password_change::BasePromptSpecification_Result::MergeFrom(from._internal_base_prompt_result());
      break;
    }
    case kUseGeneratedPasswordPromptResult: {
      _internal_mutable_use_generated_password_prompt_result()->::autofill_assistant::password_change::UseGeneratedPasswordPromptSpecification_Result::MergeFrom(from._internal_use_generated_password_prompt_result());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.password_change.GenericPasswordChangeSpecificationResult)
}

inline void GenericPasswordChangeSpecificationResult::SharedCtor() {
clear_has_result();
}

GenericPasswordChangeSpecificationResult::~GenericPasswordChangeSpecificationResult() {
  // @@protoc_insertion_point(destructor:autofill_assistant.password_change.GenericPasswordChangeSpecificationResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenericPasswordChangeSpecificationResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_result()) {
    clear_result();
  }
}

void GenericPasswordChangeSpecificationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenericPasswordChangeSpecificationResult::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:autofill_assistant.password_change.GenericPasswordChangeSpecificationResult)
  switch (result_case()) {
    case kBasePromptResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete result_.base_prompt_result_;
      }
      break;
    }
    case kUseGeneratedPasswordPromptResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete result_.use_generated_password_prompt_result_;
      }
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESULT_NOT_SET;
}


void GenericPasswordChangeSpecificationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.password_change.GenericPasswordChangeSpecificationResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_result();
  _internal_metadata_.Clear<std::string>();
}

const char* GenericPasswordChangeSpecificationResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autofill_assistant.password_change.BasePromptSpecification.Result base_prompt_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_prompt_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification.Result use_generated_password_prompt_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_use_generated_password_prompt_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenericPasswordChangeSpecificationResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.password_change.GenericPasswordChangeSpecificationResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (result_case()) {
    case kBasePromptResult: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::base_prompt_result(this),
          _Internal::base_prompt_result(this).GetCachedSize(), target, stream);
      break;
    }
    case kUseGeneratedPasswordPromptResult: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::use_generated_password_prompt_result(this),
          _Internal::use_generated_password_prompt_result(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.password_change.GenericPasswordChangeSpecificationResult)
  return target;
}

size_t GenericPasswordChangeSpecificationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.password_change.GenericPasswordChangeSpecificationResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (result_case()) {
    // .autofill_assistant.password_change.BasePromptSpecification.Result base_prompt_result = 1;
    case kBasePromptResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.base_prompt_result_);
      break;
    }
    // .autofill_assistant.password_change.UseGeneratedPasswordPromptSpecification.Result use_generated_password_prompt_result = 2;
    case kUseGeneratedPasswordPromptResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.use_generated_password_prompt_result_);
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericPasswordChangeSpecificationResult::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GenericPasswordChangeSpecificationResult*>(
      &from));
}

void GenericPasswordChangeSpecificationResult::MergeFrom(const GenericPasswordChangeSpecificationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.password_change.GenericPasswordChangeSpecificationResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.result_case()) {
    case kBasePromptResult: {
      _internal_mutable_base_prompt_result()->::autofill_assistant::password_change::BasePromptSpecification_Result::MergeFrom(from._internal_base_prompt_result());
      break;
    }
    case kUseGeneratedPasswordPromptResult: {
      _internal_mutable_use_generated_password_prompt_result()->::autofill_assistant::password_change::UseGeneratedPasswordPromptSpecification_Result::MergeFrom(from._internal_use_generated_password_prompt_result());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GenericPasswordChangeSpecificationResult::CopyFrom(const GenericPasswordChangeSpecificationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.password_change.GenericPasswordChangeSpecificationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericPasswordChangeSpecificationResult::IsInitialized() const {
  return true;
}

void GenericPasswordChangeSpecificationResult::InternalSwap(GenericPasswordChangeSpecificationResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string GenericPasswordChangeSpecificationResult::GetTypeName() const {
  return "autofill_assistant.password_change.GenericPasswordChangeSpecificationResult";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace password_change
}  // namespace autofill_assistant
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autofill_assistant::password_change::Choice*
Arena::CreateMaybeMessage< ::autofill_assistant::password_change::Choice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::password_change::Choice >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::password_change::BasePromptSpecification_Result*
Arena::CreateMaybeMessage< ::autofill_assistant::password_change::BasePromptSpecification_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::password_change::BasePromptSpecification_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::password_change::BasePromptSpecification*
Arena::CreateMaybeMessage< ::autofill_assistant::password_change::BasePromptSpecification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::password_change::BasePromptSpecification >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::password_change::UseGeneratedPasswordPromptSpecification_Result*
Arena::CreateMaybeMessage< ::autofill_assistant::password_change::UseGeneratedPasswordPromptSpecification_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::password_change::UseGeneratedPasswordPromptSpecification_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::password_change::UseGeneratedPasswordPromptSpecification*
Arena::CreateMaybeMessage< ::autofill_assistant::password_change::UseGeneratedPasswordPromptSpecification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::password_change::UseGeneratedPasswordPromptSpecification >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::password_change::UpdateSidePanelSpecification*
Arena::CreateMaybeMessage< ::autofill_assistant::password_change::UpdateSidePanelSpecification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::password_change::UpdateSidePanelSpecification >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::password_change::GenericPasswordChangeSpecification*
Arena::CreateMaybeMessage< ::autofill_assistant::password_change::GenericPasswordChangeSpecification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::password_change::GenericPasswordChangeSpecification >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::password_change::GenericPasswordChangeSpecificationResult*
Arena::CreateMaybeMessage< ::autofill_assistant::password_change::GenericPasswordChangeSpecificationResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::password_change::GenericPasswordChangeSpecificationResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
