// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/browser/service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * Message used to indicate what form fields should be filled with what
 * information coming from either the address or the credit card.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.RequiredFieldProto}
 */
public  final class RequiredFieldProto extends
    com.google.protobuf.GeneratedMessageLite<
        RequiredFieldProto, RequiredFieldProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.RequiredFieldProto)
    RequiredFieldProtoOrBuilder {
  private RequiredFieldProto() {
    delayInMillisecond_ = 20;
  }
  private int bitField0_;
  public static final int VALUE_EXPRESSION_FIELD_NUMBER = 12;
  private org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression valueExpression_;
  /**
   * <pre>
   * A value expression containing any number of |key| placeholders, where the
   * |key| is an integer corresponding to entries from field_types.h or
   * |AutofillFormatProto::AutofillAssistantCustomField|.
   * Example:
   * * 3 -&gt; First name.
   * * 51 -&gt; Full card name.
   * Note that the set of actually available fields are outside of our
   * control and are retrieved automatically.
   * An empty value expression will clear the field.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueExpression value_expression = 12;</code>
   */
  @java.lang.Override
  public boolean hasValueExpression() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * A value expression containing any number of |key| placeholders, where the
   * |key| is an integer corresponding to entries from field_types.h or
   * |AutofillFormatProto::AutofillAssistantCustomField|.
   * Example:
   * * 3 -&gt; First name.
   * * 51 -&gt; Full card name.
   * Note that the set of actually available fields are outside of our
   * control and are retrieved automatically.
   * An empty value expression will clear the field.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueExpression value_expression = 12;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression getValueExpression() {
    return valueExpression_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.getDefaultInstance() : valueExpression_;
  }
  /**
   * <pre>
   * A value expression containing any number of |key| placeholders, where the
   * |key| is an integer corresponding to entries from field_types.h or
   * |AutofillFormatProto::AutofillAssistantCustomField|.
   * Example:
   * * 3 -&gt; First name.
   * * 51 -&gt; Full card name.
   * Note that the set of actually available fields are outside of our
   * control and are retrieved automatically.
   * An empty value expression will clear the field.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueExpression value_expression = 12;</code>
   */
  private void setValueExpression(org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression value) {
    value.getClass();
  valueExpression_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <pre>
   * A value expression containing any number of |key| placeholders, where the
   * |key| is an integer corresponding to entries from field_types.h or
   * |AutofillFormatProto::AutofillAssistantCustomField|.
   * Example:
   * * 3 -&gt; First name.
   * * 51 -&gt; Full card name.
   * Note that the set of actually available fields are outside of our
   * control and are retrieved automatically.
   * An empty value expression will clear the field.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueExpression value_expression = 12;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeValueExpression(org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression value) {
    value.getClass();
  if (valueExpression_ != null &&
        valueExpression_ != org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.getDefaultInstance()) {
      valueExpression_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.newBuilder(valueExpression_).mergeFrom(value).buildPartial();
    } else {
      valueExpression_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * A value expression containing any number of |key| placeholders, where the
   * |key| is an integer corresponding to entries from field_types.h or
   * |AutofillFormatProto::AutofillAssistantCustomField|.
   * Example:
   * * 3 -&gt; First name.
   * * 51 -&gt; Full card name.
   * Note that the set of actually available fields are outside of our
   * control and are retrieved automatically.
   * An empty value expression will clear the field.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueExpression value_expression = 12;</code>
   */
  private void clearValueExpression() {  valueExpression_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int ELEMENT_FIELD_NUMBER = 2;
  private org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto element_;
  /**
   * <pre>
   * The element to fill.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectorProto element = 2;</code>
   */
  @java.lang.Override
  public boolean hasElement() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The element to fill.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectorProto element = 2;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto getElement() {
    return element_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.getDefaultInstance() : element_;
  }
  /**
   * <pre>
   * The element to fill.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectorProto element = 2;</code>
   */
  private void setElement(org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
    value.getClass();
  element_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <pre>
   * The element to fill.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectorProto element = 2;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeElement(org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
    value.getClass();
  if (element_ != null &&
        element_ != org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.getDefaultInstance()) {
      element_ =
        org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.newBuilder(element_).mergeFrom(value).buildPartial();
    } else {
      element_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * The element to fill.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectorProto element = 2;</code>
   */
  private void clearElement() {  element_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static final int FILL_STRATEGY_FIELD_NUMBER = 7;
  private int fillStrategy_;
  /**
   * <pre>
   * The strategy used to execute filling the value.
   * This is only considered for text fields and ignored for dropdowns.
   * </pre>
   *
   * <code>optional .autofill_assistant.KeyboardValueFillStrategy fill_strategy = 7;</code>
   * @return Whether the fillStrategy field is set.
   */
  @java.lang.Override
  public boolean hasFillStrategy() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * The strategy used to execute filling the value.
   * This is only considered for text fields and ignored for dropdowns.
   * </pre>
   *
   * <code>optional .autofill_assistant.KeyboardValueFillStrategy fill_strategy = 7;</code>
   * @return The fillStrategy.
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.KeyboardValueFillStrategy getFillStrategy() {
    org.chromium.chrome.browser.autofill_assistant.proto.KeyboardValueFillStrategy result = org.chromium.chrome.browser.autofill_assistant.proto.KeyboardValueFillStrategy.forNumber(fillStrategy_);
    return result == null ? org.chromium.chrome.browser.autofill_assistant.proto.KeyboardValueFillStrategy.UNSPECIFIED_KEYBAORD_STRATEGY : result;
  }
  /**
   * <pre>
   * The strategy used to execute filling the value.
   * This is only considered for text fields and ignored for dropdowns.
   * </pre>
   *
   * <code>optional .autofill_assistant.KeyboardValueFillStrategy fill_strategy = 7;</code>
   * @param value The fillStrategy to set.
   */
  private void setFillStrategy(org.chromium.chrome.browser.autofill_assistant.proto.KeyboardValueFillStrategy value) {
    fillStrategy_ = value.getNumber();
    bitField0_ |= 0x00000004;
  }
  /**
   * <pre>
   * The strategy used to execute filling the value.
   * This is only considered for text fields and ignored for dropdowns.
   * </pre>
   *
   * <code>optional .autofill_assistant.KeyboardValueFillStrategy fill_strategy = 7;</code>
   */
  private void clearFillStrategy() {
    bitField0_ = (bitField0_ & ~0x00000004);
    fillStrategy_ = 0;
  }

  public static final int DELAY_IN_MILLISECOND_FIELD_NUMBER = 4;
  private int delayInMillisecond_;
  /**
   * <pre>
   * Delay between two key presses when simlulating.
   * This is only considered for text fields and ignored for dropdowns.
   * </pre>
   *
   * <code>optional int32 delay_in_millisecond = 4 [default = 20];</code>
   * @return Whether the delayInMillisecond field is set.
   */
  @java.lang.Override
  public boolean hasDelayInMillisecond() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Delay between two key presses when simlulating.
   * This is only considered for text fields and ignored for dropdowns.
   * </pre>
   *
   * <code>optional int32 delay_in_millisecond = 4 [default = 20];</code>
   * @return The delayInMillisecond.
   */
  @java.lang.Override
  public int getDelayInMillisecond() {
    return delayInMillisecond_;
  }
  /**
   * <pre>
   * Delay between two key presses when simlulating.
   * This is only considered for text fields and ignored for dropdowns.
   * </pre>
   *
   * <code>optional int32 delay_in_millisecond = 4 [default = 20];</code>
   * @param value The delayInMillisecond to set.
   */
  private void setDelayInMillisecond(int value) {
    bitField0_ |= 0x00000008;
    delayInMillisecond_ = value;
  }
  /**
   * <pre>
   * Delay between two key presses when simlulating.
   * This is only considered for text fields and ignored for dropdowns.
   * </pre>
   *
   * <code>optional int32 delay_in_millisecond = 4 [default = 20];</code>
   */
  private void clearDelayInMillisecond() {
    bitField0_ = (bitField0_ & ~0x00000008);
    delayInMillisecond_ = 20;
  }

  public static final int SELECT_STRATEGY_FIELD_NUMBER = 8;
  private int selectStrategy_;
  /**
   * <pre>
   * The strategy used to select a value option. If no
   * |option_comparison_value_expression_re2| is set, this is used to
   * differentiate between "starts with" and "match".
   * </pre>
   *
   * <code>optional .autofill_assistant.DropdownSelectStrategy select_strategy = 8;</code>
   * @return Whether the selectStrategy field is set.
   */
  @java.lang.Override
  public boolean hasSelectStrategy() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * The strategy used to select a value option. If no
   * |option_comparison_value_expression_re2| is set, this is used to
   * differentiate between "starts with" and "match".
   * </pre>
   *
   * <code>optional .autofill_assistant.DropdownSelectStrategy select_strategy = 8;</code>
   * @return The selectStrategy.
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.DropdownSelectStrategy getSelectStrategy() {
    org.chromium.chrome.browser.autofill_assistant.proto.DropdownSelectStrategy result = org.chromium.chrome.browser.autofill_assistant.proto.DropdownSelectStrategy.forNumber(selectStrategy_);
    return result == null ? org.chromium.chrome.browser.autofill_assistant.proto.DropdownSelectStrategy.UNSPECIFIED_SELECT_STRATEGY : result;
  }
  /**
   * <pre>
   * The strategy used to select a value option. If no
   * |option_comparison_value_expression_re2| is set, this is used to
   * differentiate between "starts with" and "match".
   * </pre>
   *
   * <code>optional .autofill_assistant.DropdownSelectStrategy select_strategy = 8;</code>
   * @param value The selectStrategy to set.
   */
  private void setSelectStrategy(org.chromium.chrome.browser.autofill_assistant.proto.DropdownSelectStrategy value) {
    selectStrategy_ = value.getNumber();
    bitField0_ |= 0x00000010;
  }
  /**
   * <pre>
   * The strategy used to select a value option. If no
   * |option_comparison_value_expression_re2| is set, this is used to
   * differentiate between "starts with" and "match".
   * </pre>
   *
   * <code>optional .autofill_assistant.DropdownSelectStrategy select_strategy = 8;</code>
   */
  private void clearSelectStrategy() {
    bitField0_ = (bitField0_ & ~0x00000010);
    selectStrategy_ = 0;
  }

  public static final int OPTION_COMPARISON_ATTRIBUTE_FIELD_NUMBER = 13;
  private int optionComparisonAttribute_;
  /**
   * <pre>
   * The attribute to compare for selecting an option.
   * This is only considered for dropdowns and ignored for text fields. If set,
   * takes precedence over |select_strategy|.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectOptionProto.OptionComparisonAttribute option_comparison_attribute = 13;</code>
   * @return Whether the optionComparisonAttribute field is set.
   */
  @java.lang.Override
  public boolean hasOptionComparisonAttribute() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * The attribute to compare for selecting an option.
   * This is only considered for dropdowns and ignored for text fields. If set,
   * takes precedence over |select_strategy|.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectOptionProto.OptionComparisonAttribute option_comparison_attribute = 13;</code>
   * @return The optionComparisonAttribute.
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.SelectOptionProto.OptionComparisonAttribute getOptionComparisonAttribute() {
    org.chromium.chrome.browser.autofill_assistant.proto.SelectOptionProto.OptionComparisonAttribute result = org.chromium.chrome.browser.autofill_assistant.proto.SelectOptionProto.OptionComparisonAttribute.forNumber(optionComparisonAttribute_);
    return result == null ? org.chromium.chrome.browser.autofill_assistant.proto.SelectOptionProto.OptionComparisonAttribute.NOT_SET : result;
  }
  /**
   * <pre>
   * The attribute to compare for selecting an option.
   * This is only considered for dropdowns and ignored for text fields. If set,
   * takes precedence over |select_strategy|.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectOptionProto.OptionComparisonAttribute option_comparison_attribute = 13;</code>
   * @param value The optionComparisonAttribute to set.
   */
  private void setOptionComparisonAttribute(org.chromium.chrome.browser.autofill_assistant.proto.SelectOptionProto.OptionComparisonAttribute value) {
    optionComparisonAttribute_ = value.getNumber();
    bitField0_ |= 0x00000020;
  }
  /**
   * <pre>
   * The attribute to compare for selecting an option.
   * This is only considered for dropdowns and ignored for text fields. If set,
   * takes precedence over |select_strategy|.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectOptionProto.OptionComparisonAttribute option_comparison_attribute = 13;</code>
   */
  private void clearOptionComparisonAttribute() {
    bitField0_ = (bitField0_ & ~0x00000020);
    optionComparisonAttribute_ = 0;
  }

  public static final int OPTION_COMPARISON_VALUE_EXPRESSION_RE2_FIELD_NUMBER = 14;
  private org.chromium.chrome.browser.autofill_assistant.proto.ValueExpressionRegexp optionComparisonValueExpressionRe2_;
  /**
   * <pre>
   * In case of a dropdown, this should be used instead of the
   * |value_expression_proto|. If it's empty, |value_expression_proto| will be
   * used. This is only considered for dropdowns and ignored for text fields.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueExpressionRegexp option_comparison_value_expression_re2 = 14;</code>
   */
  @java.lang.Override
  public boolean hasOptionComparisonValueExpressionRe2() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * In case of a dropdown, this should be used instead of the
   * |value_expression_proto|. If it's empty, |value_expression_proto| will be
   * used. This is only considered for dropdowns and ignored for text fields.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueExpressionRegexp option_comparison_value_expression_re2 = 14;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ValueExpressionRegexp getOptionComparisonValueExpressionRe2() {
    return optionComparisonValueExpressionRe2_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ValueExpressionRegexp.getDefaultInstance() : optionComparisonValueExpressionRe2_;
  }
  /**
   * <pre>
   * In case of a dropdown, this should be used instead of the
   * |value_expression_proto|. If it's empty, |value_expression_proto| will be
   * used. This is only considered for dropdowns and ignored for text fields.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueExpressionRegexp option_comparison_value_expression_re2 = 14;</code>
   */
  private void setOptionComparisonValueExpressionRe2(org.chromium.chrome.browser.autofill_assistant.proto.ValueExpressionRegexp value) {
    value.getClass();
  optionComparisonValueExpressionRe2_ = value;
    bitField0_ |= 0x00000040;
    }
  /**
   * <pre>
   * In case of a dropdown, this should be used instead of the
   * |value_expression_proto|. If it's empty, |value_expression_proto| will be
   * used. This is only considered for dropdowns and ignored for text fields.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueExpressionRegexp option_comparison_value_expression_re2 = 14;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeOptionComparisonValueExpressionRe2(org.chromium.chrome.browser.autofill_assistant.proto.ValueExpressionRegexp value) {
    value.getClass();
  if (optionComparisonValueExpressionRe2_ != null &&
        optionComparisonValueExpressionRe2_ != org.chromium.chrome.browser.autofill_assistant.proto.ValueExpressionRegexp.getDefaultInstance()) {
      optionComparisonValueExpressionRe2_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ValueExpressionRegexp.newBuilder(optionComparisonValueExpressionRe2_).mergeFrom(value).buildPartial();
    } else {
      optionComparisonValueExpressionRe2_ = value;
    }
    bitField0_ |= 0x00000040;
  }
  /**
   * <pre>
   * In case of a dropdown, this should be used instead of the
   * |value_expression_proto|. If it's empty, |value_expression_proto| will be
   * used. This is only considered for dropdowns and ignored for text fields.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueExpressionRegexp option_comparison_value_expression_re2 = 14;</code>
   */
  private void clearOptionComparisonValueExpressionRe2() {  optionComparisonValueExpressionRe2_ = null;
    bitField0_ = (bitField0_ & ~0x00000040);
  }

  public static final int FORCED_FIELD_NUMBER = 5;
  private boolean forced_;
  /**
   * <pre>
   * Fill in the value even if it's non-empty. This is useful to work around
   * cases where the way Autofill sets the field doesn't work on the website.
   * </pre>
   *
   * <code>optional bool forced = 5;</code>
   * @return Whether the forced field is set.
   */
  @java.lang.Override
  public boolean hasForced() {
    return ((bitField0_ & 0x00000080) != 0);
  }
  /**
   * <pre>
   * Fill in the value even if it's non-empty. This is useful to work around
   * cases where the way Autofill sets the field doesn't work on the website.
   * </pre>
   *
   * <code>optional bool forced = 5;</code>
   * @return The forced.
   */
  @java.lang.Override
  public boolean getForced() {
    return forced_;
  }
  /**
   * <pre>
   * Fill in the value even if it's non-empty. This is useful to work around
   * cases where the way Autofill sets the field doesn't work on the website.
   * </pre>
   *
   * <code>optional bool forced = 5;</code>
   * @param value The forced to set.
   */
  private void setForced(boolean value) {
    bitField0_ |= 0x00000080;
    forced_ = value;
  }
  /**
   * <pre>
   * Fill in the value even if it's non-empty. This is useful to work around
   * cases where the way Autofill sets the field doesn't work on the website.
   * </pre>
   *
   * <code>optional bool forced = 5;</code>
   */
  private void clearForced() {
    bitField0_ = (bitField0_ & ~0x00000080);
    forced_ = false;
  }

  public static final int IS_OPTIONAL_FIELD_NUMBER = 11;
  private boolean isOptional_;
  /**
   * <pre>
   * The field is optional. If there is no value from Autofill available or
   * the element is not found, the field will be skipped.
   * </pre>
   *
   * <code>optional bool is_optional = 11;</code>
   * @return Whether the isOptional field is set.
   */
  @java.lang.Override
  public boolean hasIsOptional() {
    return ((bitField0_ & 0x00000100) != 0);
  }
  /**
   * <pre>
   * The field is optional. If there is no value from Autofill available or
   * the element is not found, the field will be skipped.
   * </pre>
   *
   * <code>optional bool is_optional = 11;</code>
   * @return The isOptional.
   */
  @java.lang.Override
  public boolean getIsOptional() {
    return isOptional_;
  }
  /**
   * <pre>
   * The field is optional. If there is no value from Autofill available or
   * the element is not found, the field will be skipped.
   * </pre>
   *
   * <code>optional bool is_optional = 11;</code>
   * @param value The isOptional to set.
   */
  private void setIsOptional(boolean value) {
    bitField0_ |= 0x00000100;
    isOptional_ = value;
  }
  /**
   * <pre>
   * The field is optional. If there is no value from Autofill available or
   * the element is not found, the field will be skipped.
   * </pre>
   *
   * <code>optional bool is_optional = 11;</code>
   */
  private void clearIsOptional() {
    bitField0_ = (bitField0_ & ~0x00000100);
    isOptional_ = false;
  }

  public static final int OPTION_ELEMENT_TO_CLICK_FIELD_NUMBER = 9;
  private org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto optionElementToClick_;
  /**
   * <pre>
   * For JavaScript implemented dropdowns. This first clicks on the |element|,
   * then waits for |option_element_to_click| to appear and clicks it. The
   * selector must match a generic option, an |inner_text_pattern| will be
   * added to this element reference to match a single option.
   * Both clicks use the same |click_type|.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectorProto option_element_to_click = 9;</code>
   */
  @java.lang.Override
  public boolean hasOptionElementToClick() {
    return ((bitField0_ & 0x00000200) != 0);
  }
  /**
   * <pre>
   * For JavaScript implemented dropdowns. This first clicks on the |element|,
   * then waits for |option_element_to_click| to appear and clicks it. The
   * selector must match a generic option, an |inner_text_pattern| will be
   * added to this element reference to match a single option.
   * Both clicks use the same |click_type|.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectorProto option_element_to_click = 9;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto getOptionElementToClick() {
    return optionElementToClick_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.getDefaultInstance() : optionElementToClick_;
  }
  /**
   * <pre>
   * For JavaScript implemented dropdowns. This first clicks on the |element|,
   * then waits for |option_element_to_click| to appear and clicks it. The
   * selector must match a generic option, an |inner_text_pattern| will be
   * added to this element reference to match a single option.
   * Both clicks use the same |click_type|.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectorProto option_element_to_click = 9;</code>
   */
  private void setOptionElementToClick(org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
    value.getClass();
  optionElementToClick_ = value;
    bitField0_ |= 0x00000200;
    }
  /**
   * <pre>
   * For JavaScript implemented dropdowns. This first clicks on the |element|,
   * then waits for |option_element_to_click| to appear and clicks it. The
   * selector must match a generic option, an |inner_text_pattern| will be
   * added to this element reference to match a single option.
   * Both clicks use the same |click_type|.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectorProto option_element_to_click = 9;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeOptionElementToClick(org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
    value.getClass();
  if (optionElementToClick_ != null &&
        optionElementToClick_ != org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.getDefaultInstance()) {
      optionElementToClick_ =
        org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.newBuilder(optionElementToClick_).mergeFrom(value).buildPartial();
    } else {
      optionElementToClick_ = value;
    }
    bitField0_ |= 0x00000200;
  }
  /**
   * <pre>
   * For JavaScript implemented dropdowns. This first clicks on the |element|,
   * then waits for |option_element_to_click| to appear and clicks it. The
   * selector must match a generic option, an |inner_text_pattern| will be
   * added to this element reference to match a single option.
   * Both clicks use the same |click_type|.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectorProto option_element_to_click = 9;</code>
   */
  private void clearOptionElementToClick() {  optionElementToClick_ = null;
    bitField0_ = (bitField0_ & ~0x00000200);
  }

  public static final int CLICK_TYPE_FIELD_NUMBER = 10;
  private int clickType_;
  /**
   * <code>optional .autofill_assistant.ClickType click_type = 10;</code>
   * @return Whether the clickType field is set.
   */
  @java.lang.Override
  public boolean hasClickType() {
    return ((bitField0_ & 0x00000400) != 0);
  }
  /**
   * <code>optional .autofill_assistant.ClickType click_type = 10;</code>
   * @return The clickType.
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ClickType getClickType() {
    org.chromium.chrome.browser.autofill_assistant.proto.ClickType result = org.chromium.chrome.browser.autofill_assistant.proto.ClickType.forNumber(clickType_);
    return result == null ? org.chromium.chrome.browser.autofill_assistant.proto.ClickType.NOT_SET : result;
  }
  /**
   * <code>optional .autofill_assistant.ClickType click_type = 10;</code>
   * @param value The clickType to set.
   */
  private void setClickType(org.chromium.chrome.browser.autofill_assistant.proto.ClickType value) {
    clickType_ = value.getNumber();
    bitField0_ |= 0x00000400;
  }
  /**
   * <code>optional .autofill_assistant.ClickType click_type = 10;</code>
   */
  private void clearClickType() {
    bitField0_ = (bitField0_ & ~0x00000400);
    clickType_ = 0;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Message used to indicate what form fields should be filled with what
   * information coming from either the address or the credit card.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.RequiredFieldProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.RequiredFieldProto)
      org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * A value expression containing any number of |key| placeholders, where the
     * |key| is an integer corresponding to entries from field_types.h or
     * |AutofillFormatProto::AutofillAssistantCustomField|.
     * Example:
     * * 3 -&gt; First name.
     * * 51 -&gt; Full card name.
     * Note that the set of actually available fields are outside of our
     * control and are retrieved automatically.
     * An empty value expression will clear the field.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueExpression value_expression = 12;</code>
     */
    @java.lang.Override
    public boolean hasValueExpression() {
      return instance.hasValueExpression();
    }
    /**
     * <pre>
     * A value expression containing any number of |key| placeholders, where the
     * |key| is an integer corresponding to entries from field_types.h or
     * |AutofillFormatProto::AutofillAssistantCustomField|.
     * Example:
     * * 3 -&gt; First name.
     * * 51 -&gt; Full card name.
     * Note that the set of actually available fields are outside of our
     * control and are retrieved automatically.
     * An empty value expression will clear the field.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueExpression value_expression = 12;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression getValueExpression() {
      return instance.getValueExpression();
    }
    /**
     * <pre>
     * A value expression containing any number of |key| placeholders, where the
     * |key| is an integer corresponding to entries from field_types.h or
     * |AutofillFormatProto::AutofillAssistantCustomField|.
     * Example:
     * * 3 -&gt; First name.
     * * 51 -&gt; Full card name.
     * Note that the set of actually available fields are outside of our
     * control and are retrieved automatically.
     * An empty value expression will clear the field.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueExpression value_expression = 12;</code>
     */
    public Builder setValueExpression(org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression value) {
      copyOnWrite();
      instance.setValueExpression(value);
      return this;
      }
    /**
     * <pre>
     * A value expression containing any number of |key| placeholders, where the
     * |key| is an integer corresponding to entries from field_types.h or
     * |AutofillFormatProto::AutofillAssistantCustomField|.
     * Example:
     * * 3 -&gt; First name.
     * * 51 -&gt; Full card name.
     * Note that the set of actually available fields are outside of our
     * control and are retrieved automatically.
     * An empty value expression will clear the field.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueExpression value_expression = 12;</code>
     */
    public Builder setValueExpression(
        org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression.Builder builderForValue) {
      copyOnWrite();
      instance.setValueExpression(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A value expression containing any number of |key| placeholders, where the
     * |key| is an integer corresponding to entries from field_types.h or
     * |AutofillFormatProto::AutofillAssistantCustomField|.
     * Example:
     * * 3 -&gt; First name.
     * * 51 -&gt; Full card name.
     * Note that the set of actually available fields are outside of our
     * control and are retrieved automatically.
     * An empty value expression will clear the field.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueExpression value_expression = 12;</code>
     */
    public Builder mergeValueExpression(org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression value) {
      copyOnWrite();
      instance.mergeValueExpression(value);
      return this;
    }
    /**
     * <pre>
     * A value expression containing any number of |key| placeholders, where the
     * |key| is an integer corresponding to entries from field_types.h or
     * |AutofillFormatProto::AutofillAssistantCustomField|.
     * Example:
     * * 3 -&gt; First name.
     * * 51 -&gt; Full card name.
     * Note that the set of actually available fields are outside of our
     * control and are retrieved automatically.
     * An empty value expression will clear the field.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueExpression value_expression = 12;</code>
     */
    public Builder clearValueExpression() {  copyOnWrite();
      instance.clearValueExpression();
      return this;
    }

    /**
     * <pre>
     * The element to fill.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectorProto element = 2;</code>
     */
    @java.lang.Override
    public boolean hasElement() {
      return instance.hasElement();
    }
    /**
     * <pre>
     * The element to fill.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectorProto element = 2;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto getElement() {
      return instance.getElement();
    }
    /**
     * <pre>
     * The element to fill.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectorProto element = 2;</code>
     */
    public Builder setElement(org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
      copyOnWrite();
      instance.setElement(value);
      return this;
      }
    /**
     * <pre>
     * The element to fill.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectorProto element = 2;</code>
     */
    public Builder setElement(
        org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.Builder builderForValue) {
      copyOnWrite();
      instance.setElement(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The element to fill.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectorProto element = 2;</code>
     */
    public Builder mergeElement(org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
      copyOnWrite();
      instance.mergeElement(value);
      return this;
    }
    /**
     * <pre>
     * The element to fill.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectorProto element = 2;</code>
     */
    public Builder clearElement() {  copyOnWrite();
      instance.clearElement();
      return this;
    }

    /**
     * <pre>
     * The strategy used to execute filling the value.
     * This is only considered for text fields and ignored for dropdowns.
     * </pre>
     *
     * <code>optional .autofill_assistant.KeyboardValueFillStrategy fill_strategy = 7;</code>
     * @return Whether the fillStrategy field is set.
     */
    @java.lang.Override
    public boolean hasFillStrategy() {
      return instance.hasFillStrategy();
    }
    /**
     * <pre>
     * The strategy used to execute filling the value.
     * This is only considered for text fields and ignored for dropdowns.
     * </pre>
     *
     * <code>optional .autofill_assistant.KeyboardValueFillStrategy fill_strategy = 7;</code>
     * @return The fillStrategy.
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.KeyboardValueFillStrategy getFillStrategy() {
      return instance.getFillStrategy();
    }
    /**
     * <pre>
     * The strategy used to execute filling the value.
     * This is only considered for text fields and ignored for dropdowns.
     * </pre>
     *
     * <code>optional .autofill_assistant.KeyboardValueFillStrategy fill_strategy = 7;</code>
     * @param value The enum numeric value on the wire for fillStrategy to set.
     * @return This builder for chaining.
     */
    public Builder setFillStrategy(org.chromium.chrome.browser.autofill_assistant.proto.KeyboardValueFillStrategy value) {
      copyOnWrite();
      instance.setFillStrategy(value);
      return this;
    }
    /**
     * <pre>
     * The strategy used to execute filling the value.
     * This is only considered for text fields and ignored for dropdowns.
     * </pre>
     *
     * <code>optional .autofill_assistant.KeyboardValueFillStrategy fill_strategy = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearFillStrategy() {
      copyOnWrite();
      instance.clearFillStrategy();
      return this;
    }

    /**
     * <pre>
     * Delay between two key presses when simlulating.
     * This is only considered for text fields and ignored for dropdowns.
     * </pre>
     *
     * <code>optional int32 delay_in_millisecond = 4 [default = 20];</code>
     * @return Whether the delayInMillisecond field is set.
     */
    @java.lang.Override
    public boolean hasDelayInMillisecond() {
      return instance.hasDelayInMillisecond();
    }
    /**
     * <pre>
     * Delay between two key presses when simlulating.
     * This is only considered for text fields and ignored for dropdowns.
     * </pre>
     *
     * <code>optional int32 delay_in_millisecond = 4 [default = 20];</code>
     * @return The delayInMillisecond.
     */
    @java.lang.Override
    public int getDelayInMillisecond() {
      return instance.getDelayInMillisecond();
    }
    /**
     * <pre>
     * Delay between two key presses when simlulating.
     * This is only considered for text fields and ignored for dropdowns.
     * </pre>
     *
     * <code>optional int32 delay_in_millisecond = 4 [default = 20];</code>
     * @param value The delayInMillisecond to set.
     * @return This builder for chaining.
     */
    public Builder setDelayInMillisecond(int value) {
      copyOnWrite();
      instance.setDelayInMillisecond(value);
      return this;
    }
    /**
     * <pre>
     * Delay between two key presses when simlulating.
     * This is only considered for text fields and ignored for dropdowns.
     * </pre>
     *
     * <code>optional int32 delay_in_millisecond = 4 [default = 20];</code>
     * @return This builder for chaining.
     */
    public Builder clearDelayInMillisecond() {
      copyOnWrite();
      instance.clearDelayInMillisecond();
      return this;
    }

    /**
     * <pre>
     * The strategy used to select a value option. If no
     * |option_comparison_value_expression_re2| is set, this is used to
     * differentiate between "starts with" and "match".
     * </pre>
     *
     * <code>optional .autofill_assistant.DropdownSelectStrategy select_strategy = 8;</code>
     * @return Whether the selectStrategy field is set.
     */
    @java.lang.Override
    public boolean hasSelectStrategy() {
      return instance.hasSelectStrategy();
    }
    /**
     * <pre>
     * The strategy used to select a value option. If no
     * |option_comparison_value_expression_re2| is set, this is used to
     * differentiate between "starts with" and "match".
     * </pre>
     *
     * <code>optional .autofill_assistant.DropdownSelectStrategy select_strategy = 8;</code>
     * @return The selectStrategy.
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.DropdownSelectStrategy getSelectStrategy() {
      return instance.getSelectStrategy();
    }
    /**
     * <pre>
     * The strategy used to select a value option. If no
     * |option_comparison_value_expression_re2| is set, this is used to
     * differentiate between "starts with" and "match".
     * </pre>
     *
     * <code>optional .autofill_assistant.DropdownSelectStrategy select_strategy = 8;</code>
     * @param value The enum numeric value on the wire for selectStrategy to set.
     * @return This builder for chaining.
     */
    public Builder setSelectStrategy(org.chromium.chrome.browser.autofill_assistant.proto.DropdownSelectStrategy value) {
      copyOnWrite();
      instance.setSelectStrategy(value);
      return this;
    }
    /**
     * <pre>
     * The strategy used to select a value option. If no
     * |option_comparison_value_expression_re2| is set, this is used to
     * differentiate between "starts with" and "match".
     * </pre>
     *
     * <code>optional .autofill_assistant.DropdownSelectStrategy select_strategy = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearSelectStrategy() {
      copyOnWrite();
      instance.clearSelectStrategy();
      return this;
    }

    /**
     * <pre>
     * The attribute to compare for selecting an option.
     * This is only considered for dropdowns and ignored for text fields. If set,
     * takes precedence over |select_strategy|.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectOptionProto.OptionComparisonAttribute option_comparison_attribute = 13;</code>
     * @return Whether the optionComparisonAttribute field is set.
     */
    @java.lang.Override
    public boolean hasOptionComparisonAttribute() {
      return instance.hasOptionComparisonAttribute();
    }
    /**
     * <pre>
     * The attribute to compare for selecting an option.
     * This is only considered for dropdowns and ignored for text fields. If set,
     * takes precedence over |select_strategy|.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectOptionProto.OptionComparisonAttribute option_comparison_attribute = 13;</code>
     * @return The optionComparisonAttribute.
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.SelectOptionProto.OptionComparisonAttribute getOptionComparisonAttribute() {
      return instance.getOptionComparisonAttribute();
    }
    /**
     * <pre>
     * The attribute to compare for selecting an option.
     * This is only considered for dropdowns and ignored for text fields. If set,
     * takes precedence over |select_strategy|.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectOptionProto.OptionComparisonAttribute option_comparison_attribute = 13;</code>
     * @param value The enum numeric value on the wire for optionComparisonAttribute to set.
     * @return This builder for chaining.
     */
    public Builder setOptionComparisonAttribute(org.chromium.chrome.browser.autofill_assistant.proto.SelectOptionProto.OptionComparisonAttribute value) {
      copyOnWrite();
      instance.setOptionComparisonAttribute(value);
      return this;
    }
    /**
     * <pre>
     * The attribute to compare for selecting an option.
     * This is only considered for dropdowns and ignored for text fields. If set,
     * takes precedence over |select_strategy|.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectOptionProto.OptionComparisonAttribute option_comparison_attribute = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearOptionComparisonAttribute() {
      copyOnWrite();
      instance.clearOptionComparisonAttribute();
      return this;
    }

    /**
     * <pre>
     * In case of a dropdown, this should be used instead of the
     * |value_expression_proto|. If it's empty, |value_expression_proto| will be
     * used. This is only considered for dropdowns and ignored for text fields.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueExpressionRegexp option_comparison_value_expression_re2 = 14;</code>
     */
    @java.lang.Override
    public boolean hasOptionComparisonValueExpressionRe2() {
      return instance.hasOptionComparisonValueExpressionRe2();
    }
    /**
     * <pre>
     * In case of a dropdown, this should be used instead of the
     * |value_expression_proto|. If it's empty, |value_expression_proto| will be
     * used. This is only considered for dropdowns and ignored for text fields.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueExpressionRegexp option_comparison_value_expression_re2 = 14;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ValueExpressionRegexp getOptionComparisonValueExpressionRe2() {
      return instance.getOptionComparisonValueExpressionRe2();
    }
    /**
     * <pre>
     * In case of a dropdown, this should be used instead of the
     * |value_expression_proto|. If it's empty, |value_expression_proto| will be
     * used. This is only considered for dropdowns and ignored for text fields.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueExpressionRegexp option_comparison_value_expression_re2 = 14;</code>
     */
    public Builder setOptionComparisonValueExpressionRe2(org.chromium.chrome.browser.autofill_assistant.proto.ValueExpressionRegexp value) {
      copyOnWrite();
      instance.setOptionComparisonValueExpressionRe2(value);
      return this;
      }
    /**
     * <pre>
     * In case of a dropdown, this should be used instead of the
     * |value_expression_proto|. If it's empty, |value_expression_proto| will be
     * used. This is only considered for dropdowns and ignored for text fields.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueExpressionRegexp option_comparison_value_expression_re2 = 14;</code>
     */
    public Builder setOptionComparisonValueExpressionRe2(
        org.chromium.chrome.browser.autofill_assistant.proto.ValueExpressionRegexp.Builder builderForValue) {
      copyOnWrite();
      instance.setOptionComparisonValueExpressionRe2(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * In case of a dropdown, this should be used instead of the
     * |value_expression_proto|. If it's empty, |value_expression_proto| will be
     * used. This is only considered for dropdowns and ignored for text fields.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueExpressionRegexp option_comparison_value_expression_re2 = 14;</code>
     */
    public Builder mergeOptionComparisonValueExpressionRe2(org.chromium.chrome.browser.autofill_assistant.proto.ValueExpressionRegexp value) {
      copyOnWrite();
      instance.mergeOptionComparisonValueExpressionRe2(value);
      return this;
    }
    /**
     * <pre>
     * In case of a dropdown, this should be used instead of the
     * |value_expression_proto|. If it's empty, |value_expression_proto| will be
     * used. This is only considered for dropdowns and ignored for text fields.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueExpressionRegexp option_comparison_value_expression_re2 = 14;</code>
     */
    public Builder clearOptionComparisonValueExpressionRe2() {  copyOnWrite();
      instance.clearOptionComparisonValueExpressionRe2();
      return this;
    }

    /**
     * <pre>
     * Fill in the value even if it's non-empty. This is useful to work around
     * cases where the way Autofill sets the field doesn't work on the website.
     * </pre>
     *
     * <code>optional bool forced = 5;</code>
     * @return Whether the forced field is set.
     */
    @java.lang.Override
    public boolean hasForced() {
      return instance.hasForced();
    }
    /**
     * <pre>
     * Fill in the value even if it's non-empty. This is useful to work around
     * cases where the way Autofill sets the field doesn't work on the website.
     * </pre>
     *
     * <code>optional bool forced = 5;</code>
     * @return The forced.
     */
    @java.lang.Override
    public boolean getForced() {
      return instance.getForced();
    }
    /**
     * <pre>
     * Fill in the value even if it's non-empty. This is useful to work around
     * cases where the way Autofill sets the field doesn't work on the website.
     * </pre>
     *
     * <code>optional bool forced = 5;</code>
     * @param value The forced to set.
     * @return This builder for chaining.
     */
    public Builder setForced(boolean value) {
      copyOnWrite();
      instance.setForced(value);
      return this;
    }
    /**
     * <pre>
     * Fill in the value even if it's non-empty. This is useful to work around
     * cases where the way Autofill sets the field doesn't work on the website.
     * </pre>
     *
     * <code>optional bool forced = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearForced() {
      copyOnWrite();
      instance.clearForced();
      return this;
    }

    /**
     * <pre>
     * The field is optional. If there is no value from Autofill available or
     * the element is not found, the field will be skipped.
     * </pre>
     *
     * <code>optional bool is_optional = 11;</code>
     * @return Whether the isOptional field is set.
     */
    @java.lang.Override
    public boolean hasIsOptional() {
      return instance.hasIsOptional();
    }
    /**
     * <pre>
     * The field is optional. If there is no value from Autofill available or
     * the element is not found, the field will be skipped.
     * </pre>
     *
     * <code>optional bool is_optional = 11;</code>
     * @return The isOptional.
     */
    @java.lang.Override
    public boolean getIsOptional() {
      return instance.getIsOptional();
    }
    /**
     * <pre>
     * The field is optional. If there is no value from Autofill available or
     * the element is not found, the field will be skipped.
     * </pre>
     *
     * <code>optional bool is_optional = 11;</code>
     * @param value The isOptional to set.
     * @return This builder for chaining.
     */
    public Builder setIsOptional(boolean value) {
      copyOnWrite();
      instance.setIsOptional(value);
      return this;
    }
    /**
     * <pre>
     * The field is optional. If there is no value from Autofill available or
     * the element is not found, the field will be skipped.
     * </pre>
     *
     * <code>optional bool is_optional = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearIsOptional() {
      copyOnWrite();
      instance.clearIsOptional();
      return this;
    }

    /**
     * <pre>
     * For JavaScript implemented dropdowns. This first clicks on the |element|,
     * then waits for |option_element_to_click| to appear and clicks it. The
     * selector must match a generic option, an |inner_text_pattern| will be
     * added to this element reference to match a single option.
     * Both clicks use the same |click_type|.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectorProto option_element_to_click = 9;</code>
     */
    @java.lang.Override
    public boolean hasOptionElementToClick() {
      return instance.hasOptionElementToClick();
    }
    /**
     * <pre>
     * For JavaScript implemented dropdowns. This first clicks on the |element|,
     * then waits for |option_element_to_click| to appear and clicks it. The
     * selector must match a generic option, an |inner_text_pattern| will be
     * added to this element reference to match a single option.
     * Both clicks use the same |click_type|.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectorProto option_element_to_click = 9;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto getOptionElementToClick() {
      return instance.getOptionElementToClick();
    }
    /**
     * <pre>
     * For JavaScript implemented dropdowns. This first clicks on the |element|,
     * then waits for |option_element_to_click| to appear and clicks it. The
     * selector must match a generic option, an |inner_text_pattern| will be
     * added to this element reference to match a single option.
     * Both clicks use the same |click_type|.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectorProto option_element_to_click = 9;</code>
     */
    public Builder setOptionElementToClick(org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
      copyOnWrite();
      instance.setOptionElementToClick(value);
      return this;
      }
    /**
     * <pre>
     * For JavaScript implemented dropdowns. This first clicks on the |element|,
     * then waits for |option_element_to_click| to appear and clicks it. The
     * selector must match a generic option, an |inner_text_pattern| will be
     * added to this element reference to match a single option.
     * Both clicks use the same |click_type|.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectorProto option_element_to_click = 9;</code>
     */
    public Builder setOptionElementToClick(
        org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.Builder builderForValue) {
      copyOnWrite();
      instance.setOptionElementToClick(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * For JavaScript implemented dropdowns. This first clicks on the |element|,
     * then waits for |option_element_to_click| to appear and clicks it. The
     * selector must match a generic option, an |inner_text_pattern| will be
     * added to this element reference to match a single option.
     * Both clicks use the same |click_type|.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectorProto option_element_to_click = 9;</code>
     */
    public Builder mergeOptionElementToClick(org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
      copyOnWrite();
      instance.mergeOptionElementToClick(value);
      return this;
    }
    /**
     * <pre>
     * For JavaScript implemented dropdowns. This first clicks on the |element|,
     * then waits for |option_element_to_click| to appear and clicks it. The
     * selector must match a generic option, an |inner_text_pattern| will be
     * added to this element reference to match a single option.
     * Both clicks use the same |click_type|.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectorProto option_element_to_click = 9;</code>
     */
    public Builder clearOptionElementToClick() {  copyOnWrite();
      instance.clearOptionElementToClick();
      return this;
    }

    /**
     * <code>optional .autofill_assistant.ClickType click_type = 10;</code>
     * @return Whether the clickType field is set.
     */
    @java.lang.Override
    public boolean hasClickType() {
      return instance.hasClickType();
    }
    /**
     * <code>optional .autofill_assistant.ClickType click_type = 10;</code>
     * @return The clickType.
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ClickType getClickType() {
      return instance.getClickType();
    }
    /**
     * <code>optional .autofill_assistant.ClickType click_type = 10;</code>
     * @param value The enum numeric value on the wire for clickType to set.
     * @return This builder for chaining.
     */
    public Builder setClickType(org.chromium.chrome.browser.autofill_assistant.proto.ClickType value) {
      copyOnWrite();
      instance.setClickType(value);
      return this;
    }
    /**
     * <code>optional .autofill_assistant.ClickType click_type = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearClickType() {
      copyOnWrite();
      instance.clearClickType();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.RequiredFieldProto)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "element_",
            "delayInMillisecond_",
            "forced_",
            "fillStrategy_",
            org.chromium.chrome.browser.autofill_assistant.proto.KeyboardValueFillStrategy.internalGetVerifier(),
            "selectStrategy_",
            org.chromium.chrome.browser.autofill_assistant.proto.DropdownSelectStrategy.internalGetVerifier(),
            "optionElementToClick_",
            "clickType_",
            org.chromium.chrome.browser.autofill_assistant.proto.ClickType.internalGetVerifier(),
            "isOptional_",
            "valueExpression_",
            "optionComparisonAttribute_",
            org.chromium.chrome.browser.autofill_assistant.proto.SelectOptionProto.OptionComparisonAttribute.internalGetVerifier(),
            "optionComparisonValueExpressionRe2_",
          };
          java.lang.String info =
              "\u0001\u000b\u0000\u0001\u0002\u000e\u000b\u0000\u0000\u0000\u0002\u1009\u0001\u0004" +
              "\u1004\u0003\u0005\u1007\u0007\u0007\u100c\u0002\b\u100c\u0004\t\u1009\t\n\u100c" +
              "\n\u000b\u1007\b\f\u1009\u0000\r\u100c\u0005\u000e\u1009\u0006";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.RequiredFieldProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto DEFAULT_INSTANCE;
  static {
    RequiredFieldProto defaultInstance = new RequiredFieldProto();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      RequiredFieldProto.class, defaultInstance);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.RequiredFieldProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<RequiredFieldProto> PARSER;

  public static com.google.protobuf.Parser<RequiredFieldProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

