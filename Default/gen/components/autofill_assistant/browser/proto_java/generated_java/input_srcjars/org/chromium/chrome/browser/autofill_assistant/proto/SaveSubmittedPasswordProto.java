// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/browser/service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * Saves the current submitted password to the password store. The action
 * fails if the password manager has no record of a submitted password.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.SaveSubmittedPasswordProto}
 */
public  final class SaveSubmittedPasswordProto extends
    com.google.protobuf.GeneratedMessageLite<
        SaveSubmittedPasswordProto, SaveSubmittedPasswordProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.SaveSubmittedPasswordProto)
    SaveSubmittedPasswordProtoOrBuilder {
  private SaveSubmittedPasswordProto() {
  }
  public interface ResultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.SaveSubmittedPasswordProto.Result)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * If the same password was used and therefore the credential is still
     * insecure, the action succeeds to avoid script termination.
     * Instead it returns a result flagging the re-use of the
     * password so that the Autobot flow can try again.
     * </pre>
     *
     * <code>optional bool used_same_password = 1;</code>
     * @return Whether the usedSamePassword field is set.
     */
    boolean hasUsedSamePassword();
    /**
     * <pre>
     * If the same password was used and therefore the credential is still
     * insecure, the action succeeds to avoid script termination.
     * Instead it returns a result flagging the re-use of the
     * password so that the Autobot flow can try again.
     * </pre>
     *
     * <code>optional bool used_same_password = 1;</code>
     * @return The usedSamePassword.
     */
    boolean getUsedSamePassword();

    /**
     * <pre>
     * If the new credential is still leaked, return a result flag that states
     * this. The flow can choose to react to this, e.g. prompting the user
     * to user another password.
     * </pre>
     *
     * <code>optional bool used_leaked_credential = 2;</code>
     * @return Whether the usedLeakedCredential field is set.
     */
    boolean hasUsedLeakedCredential();
    /**
     * <pre>
     * If the new credential is still leaked, return a result flag that states
     * this. The flow can choose to react to this, e.g. prompting the user
     * to user another password.
     * </pre>
     *
     * <code>optional bool used_leaked_credential = 2;</code>
     * @return The usedLeakedCredential.
     */
    boolean getUsedLeakedCredential();
  }
  /**
   * Protobuf type {@code autofill_assistant.SaveSubmittedPasswordProto.Result}
   */
  public  static final class Result extends
      com.google.protobuf.GeneratedMessageLite<
          Result, Result.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.SaveSubmittedPasswordProto.Result)
      ResultOrBuilder {
    private Result() {
    }
    private int bitField0_;
    public static final int USED_SAME_PASSWORD_FIELD_NUMBER = 1;
    private boolean usedSamePassword_;
    /**
     * <pre>
     * If the same password was used and therefore the credential is still
     * insecure, the action succeeds to avoid script termination.
     * Instead it returns a result flagging the re-use of the
     * password so that the Autobot flow can try again.
     * </pre>
     *
     * <code>optional bool used_same_password = 1;</code>
     * @return Whether the usedSamePassword field is set.
     */
    @java.lang.Override
    public boolean hasUsedSamePassword() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * If the same password was used and therefore the credential is still
     * insecure, the action succeeds to avoid script termination.
     * Instead it returns a result flagging the re-use of the
     * password so that the Autobot flow can try again.
     * </pre>
     *
     * <code>optional bool used_same_password = 1;</code>
     * @return The usedSamePassword.
     */
    @java.lang.Override
    public boolean getUsedSamePassword() {
      return usedSamePassword_;
    }
    /**
     * <pre>
     * If the same password was used and therefore the credential is still
     * insecure, the action succeeds to avoid script termination.
     * Instead it returns a result flagging the re-use of the
     * password so that the Autobot flow can try again.
     * </pre>
     *
     * <code>optional bool used_same_password = 1;</code>
     * @param value The usedSamePassword to set.
     */
    private void setUsedSamePassword(boolean value) {
      bitField0_ |= 0x00000001;
      usedSamePassword_ = value;
    }
    /**
     * <pre>
     * If the same password was used and therefore the credential is still
     * insecure, the action succeeds to avoid script termination.
     * Instead it returns a result flagging the re-use of the
     * password so that the Autobot flow can try again.
     * </pre>
     *
     * <code>optional bool used_same_password = 1;</code>
     */
    private void clearUsedSamePassword() {
      bitField0_ = (bitField0_ & ~0x00000001);
      usedSamePassword_ = false;
    }

    public static final int USED_LEAKED_CREDENTIAL_FIELD_NUMBER = 2;
    private boolean usedLeakedCredential_;
    /**
     * <pre>
     * If the new credential is still leaked, return a result flag that states
     * this. The flow can choose to react to this, e.g. prompting the user
     * to user another password.
     * </pre>
     *
     * <code>optional bool used_leaked_credential = 2;</code>
     * @return Whether the usedLeakedCredential field is set.
     */
    @java.lang.Override
    public boolean hasUsedLeakedCredential() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * If the new credential is still leaked, return a result flag that states
     * this. The flow can choose to react to this, e.g. prompting the user
     * to user another password.
     * </pre>
     *
     * <code>optional bool used_leaked_credential = 2;</code>
     * @return The usedLeakedCredential.
     */
    @java.lang.Override
    public boolean getUsedLeakedCredential() {
      return usedLeakedCredential_;
    }
    /**
     * <pre>
     * If the new credential is still leaked, return a result flag that states
     * this. The flow can choose to react to this, e.g. prompting the user
     * to user another password.
     * </pre>
     *
     * <code>optional bool used_leaked_credential = 2;</code>
     * @param value The usedLeakedCredential to set.
     */
    private void setUsedLeakedCredential(boolean value) {
      bitField0_ |= 0x00000002;
      usedLeakedCredential_ = value;
    }
    /**
     * <pre>
     * If the new credential is still leaked, return a result flag that states
     * this. The flow can choose to react to this, e.g. prompting the user
     * to user another password.
     * </pre>
     *
     * <code>optional bool used_leaked_credential = 2;</code>
     */
    private void clearUsedLeakedCredential() {
      bitField0_ = (bitField0_ & ~0x00000002);
      usedLeakedCredential_ = false;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code autofill_assistant.SaveSubmittedPasswordProto.Result}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.SaveSubmittedPasswordProto.Result)
        org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.ResultOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * If the same password was used and therefore the credential is still
       * insecure, the action succeeds to avoid script termination.
       * Instead it returns a result flagging the re-use of the
       * password so that the Autobot flow can try again.
       * </pre>
       *
       * <code>optional bool used_same_password = 1;</code>
       * @return Whether the usedSamePassword field is set.
       */
      @java.lang.Override
      public boolean hasUsedSamePassword() {
        return instance.hasUsedSamePassword();
      }
      /**
       * <pre>
       * If the same password was used and therefore the credential is still
       * insecure, the action succeeds to avoid script termination.
       * Instead it returns a result flagging the re-use of the
       * password so that the Autobot flow can try again.
       * </pre>
       *
       * <code>optional bool used_same_password = 1;</code>
       * @return The usedSamePassword.
       */
      @java.lang.Override
      public boolean getUsedSamePassword() {
        return instance.getUsedSamePassword();
      }
      /**
       * <pre>
       * If the same password was used and therefore the credential is still
       * insecure, the action succeeds to avoid script termination.
       * Instead it returns a result flagging the re-use of the
       * password so that the Autobot flow can try again.
       * </pre>
       *
       * <code>optional bool used_same_password = 1;</code>
       * @param value The usedSamePassword to set.
       * @return This builder for chaining.
       */
      public Builder setUsedSamePassword(boolean value) {
        copyOnWrite();
        instance.setUsedSamePassword(value);
        return this;
      }
      /**
       * <pre>
       * If the same password was used and therefore the credential is still
       * insecure, the action succeeds to avoid script termination.
       * Instead it returns a result flagging the re-use of the
       * password so that the Autobot flow can try again.
       * </pre>
       *
       * <code>optional bool used_same_password = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearUsedSamePassword() {
        copyOnWrite();
        instance.clearUsedSamePassword();
        return this;
      }

      /**
       * <pre>
       * If the new credential is still leaked, return a result flag that states
       * this. The flow can choose to react to this, e.g. prompting the user
       * to user another password.
       * </pre>
       *
       * <code>optional bool used_leaked_credential = 2;</code>
       * @return Whether the usedLeakedCredential field is set.
       */
      @java.lang.Override
      public boolean hasUsedLeakedCredential() {
        return instance.hasUsedLeakedCredential();
      }
      /**
       * <pre>
       * If the new credential is still leaked, return a result flag that states
       * this. The flow can choose to react to this, e.g. prompting the user
       * to user another password.
       * </pre>
       *
       * <code>optional bool used_leaked_credential = 2;</code>
       * @return The usedLeakedCredential.
       */
      @java.lang.Override
      public boolean getUsedLeakedCredential() {
        return instance.getUsedLeakedCredential();
      }
      /**
       * <pre>
       * If the new credential is still leaked, return a result flag that states
       * this. The flow can choose to react to this, e.g. prompting the user
       * to user another password.
       * </pre>
       *
       * <code>optional bool used_leaked_credential = 2;</code>
       * @param value The usedLeakedCredential to set.
       * @return This builder for chaining.
       */
      public Builder setUsedLeakedCredential(boolean value) {
        copyOnWrite();
        instance.setUsedLeakedCredential(value);
        return this;
      }
      /**
       * <pre>
       * If the new credential is still leaked, return a result flag that states
       * this. The flow can choose to react to this, e.g. prompting the user
       * to user another password.
       * </pre>
       *
       * <code>optional bool used_leaked_credential = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearUsedLeakedCredential() {
        copyOnWrite();
        instance.clearUsedLeakedCredential();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.SaveSubmittedPasswordProto.Result)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "usedSamePassword_",
              "usedLeakedCredential_",
            };
            java.lang.String info =
                "\u0001\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u1007\u0000\u0002" +
                "\u1007\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.SaveSubmittedPasswordProto.Result)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result DEFAULT_INSTANCE;
    static {
      Result defaultInstance = new Result();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Result.class, defaultInstance);
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.Result getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Result> PARSER;

    public static com.google.protobuf.Parser<Result> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int bitField0_;
  public static final int LEAK_DETECTION_TIMEOUT_MS_FIELD_NUMBER = 1;
  private int leakDetectionTimeoutMs_;
  /**
   * <pre>
   * If leak_detection_timeout_ms is specified, the action performs a
   * leak check for the submitted credential. If leak_detection_timeout_ms is
   * specified, but zero, the default value in SaveSubmittedPasswordAction
   * is used.
   * </pre>
   *
   * <code>optional int32 leak_detection_timeout_ms = 1;</code>
   * @return Whether the leakDetectionTimeoutMs field is set.
   */
  @java.lang.Override
  public boolean hasLeakDetectionTimeoutMs() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * If leak_detection_timeout_ms is specified, the action performs a
   * leak check for the submitted credential. If leak_detection_timeout_ms is
   * specified, but zero, the default value in SaveSubmittedPasswordAction
   * is used.
   * </pre>
   *
   * <code>optional int32 leak_detection_timeout_ms = 1;</code>
   * @return The leakDetectionTimeoutMs.
   */
  @java.lang.Override
  public int getLeakDetectionTimeoutMs() {
    return leakDetectionTimeoutMs_;
  }
  /**
   * <pre>
   * If leak_detection_timeout_ms is specified, the action performs a
   * leak check for the submitted credential. If leak_detection_timeout_ms is
   * specified, but zero, the default value in SaveSubmittedPasswordAction
   * is used.
   * </pre>
   *
   * <code>optional int32 leak_detection_timeout_ms = 1;</code>
   * @param value The leakDetectionTimeoutMs to set.
   */
  private void setLeakDetectionTimeoutMs(int value) {
    bitField0_ |= 0x00000001;
    leakDetectionTimeoutMs_ = value;
  }
  /**
   * <pre>
   * If leak_detection_timeout_ms is specified, the action performs a
   * leak check for the submitted credential. If leak_detection_timeout_ms is
   * specified, but zero, the default value in SaveSubmittedPasswordAction
   * is used.
   * </pre>
   *
   * <code>optional int32 leak_detection_timeout_ms = 1;</code>
   */
  private void clearLeakDetectionTimeoutMs() {
    bitField0_ = (bitField0_ & ~0x00000001);
    leakDetectionTimeoutMs_ = 0;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Saves the current submitted password to the password store. The action
   * fails if the password manager has no record of a submitted password.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.SaveSubmittedPasswordProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.SaveSubmittedPasswordProto)
      org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * If leak_detection_timeout_ms is specified, the action performs a
     * leak check for the submitted credential. If leak_detection_timeout_ms is
     * specified, but zero, the default value in SaveSubmittedPasswordAction
     * is used.
     * </pre>
     *
     * <code>optional int32 leak_detection_timeout_ms = 1;</code>
     * @return Whether the leakDetectionTimeoutMs field is set.
     */
    @java.lang.Override
    public boolean hasLeakDetectionTimeoutMs() {
      return instance.hasLeakDetectionTimeoutMs();
    }
    /**
     * <pre>
     * If leak_detection_timeout_ms is specified, the action performs a
     * leak check for the submitted credential. If leak_detection_timeout_ms is
     * specified, but zero, the default value in SaveSubmittedPasswordAction
     * is used.
     * </pre>
     *
     * <code>optional int32 leak_detection_timeout_ms = 1;</code>
     * @return The leakDetectionTimeoutMs.
     */
    @java.lang.Override
    public int getLeakDetectionTimeoutMs() {
      return instance.getLeakDetectionTimeoutMs();
    }
    /**
     * <pre>
     * If leak_detection_timeout_ms is specified, the action performs a
     * leak check for the submitted credential. If leak_detection_timeout_ms is
     * specified, but zero, the default value in SaveSubmittedPasswordAction
     * is used.
     * </pre>
     *
     * <code>optional int32 leak_detection_timeout_ms = 1;</code>
     * @param value The leakDetectionTimeoutMs to set.
     * @return This builder for chaining.
     */
    public Builder setLeakDetectionTimeoutMs(int value) {
      copyOnWrite();
      instance.setLeakDetectionTimeoutMs(value);
      return this;
    }
    /**
     * <pre>
     * If leak_detection_timeout_ms is specified, the action performs a
     * leak check for the submitted credential. If leak_detection_timeout_ms is
     * specified, but zero, the default value in SaveSubmittedPasswordAction
     * is used.
     * </pre>
     *
     * <code>optional int32 leak_detection_timeout_ms = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearLeakDetectionTimeoutMs() {
      copyOnWrite();
      instance.clearLeakDetectionTimeoutMs();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.SaveSubmittedPasswordProto)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "leakDetectionTimeoutMs_",
          };
          java.lang.String info =
              "\u0001\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0001\u1004\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.SaveSubmittedPasswordProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto DEFAULT_INSTANCE;
  static {
    SaveSubmittedPasswordProto defaultInstance = new SaveSubmittedPasswordProto();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      SaveSubmittedPasswordProto.class, defaultInstance);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.SaveSubmittedPasswordProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<SaveSubmittedPasswordProto> PARSER;

  public static com.google.protobuf.Parser<SaveSubmittedPasswordProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

