// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/browser/service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

public interface GetTriggerScriptsResponseProtoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:autofill_assistant.GetTriggerScriptsResponseProto)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * The available trigger scripts, if any.
   * </pre>
   *
   * <code>repeated .autofill_assistant.TriggerScriptProto trigger_scripts = 1;</code>
   */
  java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.TriggerScriptProto> 
      getTriggerScriptsList();
  /**
   * <pre>
   * The available trigger scripts, if any.
   * </pre>
   *
   * <code>repeated .autofill_assistant.TriggerScriptProto trigger_scripts = 1;</code>
   */
  org.chromium.chrome.browser.autofill_assistant.proto.TriggerScriptProto getTriggerScripts(int index);
  /**
   * <pre>
   * The available trigger scripts, if any.
   * </pre>
   *
   * <code>repeated .autofill_assistant.TriggerScriptProto trigger_scripts = 1;</code>
   */
  int getTriggerScriptsCount();

  /**
   * <pre>
   * A list of additional domains and subdomains. Trigger scripts will
   * automatically cancel the ongoing session if the user navigates away from
   * the original domain or any of the additional domains.
   * </pre>
   *
   * <code>repeated string additional_allowed_domains = 2;</code>
   * @return A list containing the additionalAllowedDomains.
   */
  java.util.List<java.lang.String>
      getAdditionalAllowedDomainsList();
  /**
   * <pre>
   * A list of additional domains and subdomains. Trigger scripts will
   * automatically cancel the ongoing session if the user navigates away from
   * the original domain or any of the additional domains.
   * </pre>
   *
   * <code>repeated string additional_allowed_domains = 2;</code>
   * @return The count of additionalAllowedDomains.
   */
  int getAdditionalAllowedDomainsCount();
  /**
   * <pre>
   * A list of additional domains and subdomains. Trigger scripts will
   * automatically cancel the ongoing session if the user navigates away from
   * the original domain or any of the additional domains.
   * </pre>
   *
   * <code>repeated string additional_allowed_domains = 2;</code>
   * @param index The index of the element to return.
   * @return The additionalAllowedDomains at the given index.
   */
  java.lang.String getAdditionalAllowedDomains(int index);
  /**
   * <pre>
   * A list of additional domains and subdomains. Trigger scripts will
   * automatically cancel the ongoing session if the user navigates away from
   * the original domain or any of the additional domains.
   * </pre>
   *
   * <code>repeated string additional_allowed_domains = 2;</code>
   * @param index The index of the element to return.
   * @return The additionalAllowedDomains at the given index.
   */
  com.google.protobuf.ByteString
      getAdditionalAllowedDomainsBytes(int index);

  /**
   * <pre>
   * The amount of time a trigger script may evaluate trigger conditions while
   * invisible. If a trigger script is invisible for this amount of time, it
   * will automatically finish with TRIGGER_CONDITION_TIMEOUT.
   * If not specified, there is no automatic timeout.
   * This is only counted while no trigger script is shown, and the time is
   * reset on tab switch and whenever a trigger script is hidden. Note that this
   * only counts the time in-between checks, so the actual timeout will be
   * slightly longer.
   * </pre>
   *
   * <code>optional int32 trigger_condition_timeout_ms = 3;</code>
   * @return Whether the triggerConditionTimeoutMs field is set.
   */
  boolean hasTriggerConditionTimeoutMs();
  /**
   * <pre>
   * The amount of time a trigger script may evaluate trigger conditions while
   * invisible. If a trigger script is invisible for this amount of time, it
   * will automatically finish with TRIGGER_CONDITION_TIMEOUT.
   * If not specified, there is no automatic timeout.
   * This is only counted while no trigger script is shown, and the time is
   * reset on tab switch and whenever a trigger script is hidden. Note that this
   * only counts the time in-between checks, so the actual timeout will be
   * slightly longer.
   * </pre>
   *
   * <code>optional int32 trigger_condition_timeout_ms = 3;</code>
   * @return The triggerConditionTimeoutMs.
   */
  int getTriggerConditionTimeoutMs();

  /**
   * <pre>
   * The amount of time between consecutive checks of trigger conditions. Should
   * not be too small to limit performance impact.
   * </pre>
   *
   * <code>optional int32 trigger_condition_check_interval_ms = 4 [default = 1000];</code>
   * @return Whether the triggerConditionCheckIntervalMs field is set.
   */
  boolean hasTriggerConditionCheckIntervalMs();
  /**
   * <pre>
   * The amount of time between consecutive checks of trigger conditions. Should
   * not be too small to limit performance impact.
   * </pre>
   *
   * <code>optional int32 trigger_condition_check_interval_ms = 4 [default = 1000];</code>
   * @return The triggerConditionCheckIntervalMs.
   */
  int getTriggerConditionCheckIntervalMs();

  /**
   * <pre>
   * The list of script parameters for the client to use. This can be different
   * from the list the client sent in the GetTriggerScriptsRequest.
   * For some flows, the GetTriggerScripts RPC is the first and only
   * communication with the backend prior to the start of the regular flow. As
   * such, the backend needs to send any additional script parameters (such as
   * appropriate overlay colors) back to the client such that the regular flows
   * are guaranteed to have a full set of script parameters when/if they start.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 5;</code>
   */
  java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProto> 
      getScriptParametersList();
  /**
   * <pre>
   * The list of script parameters for the client to use. This can be different
   * from the list the client sent in the GetTriggerScriptsRequest.
   * For some flows, the GetTriggerScripts RPC is the first and only
   * communication with the backend prior to the start of the regular flow. As
   * such, the backend needs to send any additional script parameters (such as
   * appropriate overlay colors) back to the client such that the regular flows
   * are guaranteed to have a full set of script parameters when/if they start.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 5;</code>
   */
  org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProto getScriptParameters(int index);
  /**
   * <pre>
   * The list of script parameters for the client to use. This can be different
   * from the list the client sent in the GetTriggerScriptsRequest.
   * For some flows, the GetTriggerScripts RPC is the first and only
   * communication with the backend prior to the start of the regular flow. As
   * such, the backend needs to send any additional script parameters (such as
   * appropriate overlay colors) back to the client such that the regular flows
   * are guaranteed to have a full set of script parameters when/if they start.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 5;</code>
   */
  int getScriptParametersCount();
}
