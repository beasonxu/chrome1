// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/browser/service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

public interface RequiredFieldProtoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:autofill_assistant.RequiredFieldProto)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * A value expression containing any number of |key| placeholders, where the
   * |key| is an integer corresponding to entries from field_types.h or
   * |AutofillFormatProto::AutofillAssistantCustomField|.
   * Example:
   * * 3 -&gt; First name.
   * * 51 -&gt; Full card name.
   * Note that the set of actually available fields are outside of our
   * control and are retrieved automatically.
   * An empty value expression will clear the field.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueExpression value_expression = 12;</code>
   * @return Whether the valueExpression field is set.
   */
  boolean hasValueExpression();
  /**
   * <pre>
   * A value expression containing any number of |key| placeholders, where the
   * |key| is an integer corresponding to entries from field_types.h or
   * |AutofillFormatProto::AutofillAssistantCustomField|.
   * Example:
   * * 3 -&gt; First name.
   * * 51 -&gt; Full card name.
   * Note that the set of actually available fields are outside of our
   * control and are retrieved automatically.
   * An empty value expression will clear the field.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueExpression value_expression = 12;</code>
   * @return The valueExpression.
   */
  org.chromium.chrome.browser.autofill_assistant.proto.ValueExpression getValueExpression();

  /**
   * <pre>
   * The element to fill.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectorProto element = 2;</code>
   * @return Whether the element field is set.
   */
  boolean hasElement();
  /**
   * <pre>
   * The element to fill.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectorProto element = 2;</code>
   * @return The element.
   */
  org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto getElement();

  /**
   * <pre>
   * The strategy used to execute filling the value.
   * This is only considered for text fields and ignored for dropdowns.
   * </pre>
   *
   * <code>optional .autofill_assistant.KeyboardValueFillStrategy fill_strategy = 7;</code>
   * @return Whether the fillStrategy field is set.
   */
  boolean hasFillStrategy();
  /**
   * <pre>
   * The strategy used to execute filling the value.
   * This is only considered for text fields and ignored for dropdowns.
   * </pre>
   *
   * <code>optional .autofill_assistant.KeyboardValueFillStrategy fill_strategy = 7;</code>
   * @return The fillStrategy.
   */
  org.chromium.chrome.browser.autofill_assistant.proto.KeyboardValueFillStrategy getFillStrategy();

  /**
   * <pre>
   * Delay between two key presses when simlulating.
   * This is only considered for text fields and ignored for dropdowns.
   * </pre>
   *
   * <code>optional int32 delay_in_millisecond = 4 [default = 20];</code>
   * @return Whether the delayInMillisecond field is set.
   */
  boolean hasDelayInMillisecond();
  /**
   * <pre>
   * Delay between two key presses when simlulating.
   * This is only considered for text fields and ignored for dropdowns.
   * </pre>
   *
   * <code>optional int32 delay_in_millisecond = 4 [default = 20];</code>
   * @return The delayInMillisecond.
   */
  int getDelayInMillisecond();

  /**
   * <pre>
   * The strategy used to select a value option. If no
   * |option_comparison_value_expression_re2| is set, this is used to
   * differentiate between "starts with" and "match".
   * </pre>
   *
   * <code>optional .autofill_assistant.DropdownSelectStrategy select_strategy = 8;</code>
   * @return Whether the selectStrategy field is set.
   */
  boolean hasSelectStrategy();
  /**
   * <pre>
   * The strategy used to select a value option. If no
   * |option_comparison_value_expression_re2| is set, this is used to
   * differentiate between "starts with" and "match".
   * </pre>
   *
   * <code>optional .autofill_assistant.DropdownSelectStrategy select_strategy = 8;</code>
   * @return The selectStrategy.
   */
  org.chromium.chrome.browser.autofill_assistant.proto.DropdownSelectStrategy getSelectStrategy();

  /**
   * <pre>
   * The attribute to compare for selecting an option.
   * This is only considered for dropdowns and ignored for text fields. If set,
   * takes precedence over |select_strategy|.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectOptionProto.OptionComparisonAttribute option_comparison_attribute = 13;</code>
   * @return Whether the optionComparisonAttribute field is set.
   */
  boolean hasOptionComparisonAttribute();
  /**
   * <pre>
   * The attribute to compare for selecting an option.
   * This is only considered for dropdowns and ignored for text fields. If set,
   * takes precedence over |select_strategy|.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectOptionProto.OptionComparisonAttribute option_comparison_attribute = 13;</code>
   * @return The optionComparisonAttribute.
   */
  org.chromium.chrome.browser.autofill_assistant.proto.SelectOptionProto.OptionComparisonAttribute getOptionComparisonAttribute();

  /**
   * <pre>
   * In case of a dropdown, this should be used instead of the
   * |value_expression_proto|. If it's empty, |value_expression_proto| will be
   * used. This is only considered for dropdowns and ignored for text fields.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueExpressionRegexp option_comparison_value_expression_re2 = 14;</code>
   * @return Whether the optionComparisonValueExpressionRe2 field is set.
   */
  boolean hasOptionComparisonValueExpressionRe2();
  /**
   * <pre>
   * In case of a dropdown, this should be used instead of the
   * |value_expression_proto|. If it's empty, |value_expression_proto| will be
   * used. This is only considered for dropdowns and ignored for text fields.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueExpressionRegexp option_comparison_value_expression_re2 = 14;</code>
   * @return The optionComparisonValueExpressionRe2.
   */
  org.chromium.chrome.browser.autofill_assistant.proto.ValueExpressionRegexp getOptionComparisonValueExpressionRe2();

  /**
   * <pre>
   * Fill in the value even if it's non-empty. This is useful to work around
   * cases where the way Autofill sets the field doesn't work on the website.
   * </pre>
   *
   * <code>optional bool forced = 5;</code>
   * @return Whether the forced field is set.
   */
  boolean hasForced();
  /**
   * <pre>
   * Fill in the value even if it's non-empty. This is useful to work around
   * cases where the way Autofill sets the field doesn't work on the website.
   * </pre>
   *
   * <code>optional bool forced = 5;</code>
   * @return The forced.
   */
  boolean getForced();

  /**
   * <pre>
   * The field is optional. If there is no value from Autofill available or
   * the element is not found, the field will be skipped.
   * </pre>
   *
   * <code>optional bool is_optional = 11;</code>
   * @return Whether the isOptional field is set.
   */
  boolean hasIsOptional();
  /**
   * <pre>
   * The field is optional. If there is no value from Autofill available or
   * the element is not found, the field will be skipped.
   * </pre>
   *
   * <code>optional bool is_optional = 11;</code>
   * @return The isOptional.
   */
  boolean getIsOptional();

  /**
   * <pre>
   * For JavaScript implemented dropdowns. This first clicks on the |element|,
   * then waits for |option_element_to_click| to appear and clicks it. The
   * selector must match a generic option, an |inner_text_pattern| will be
   * added to this element reference to match a single option.
   * Both clicks use the same |click_type|.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectorProto option_element_to_click = 9;</code>
   * @return Whether the optionElementToClick field is set.
   */
  boolean hasOptionElementToClick();
  /**
   * <pre>
   * For JavaScript implemented dropdowns. This first clicks on the |element|,
   * then waits for |option_element_to_click| to appear and clicks it. The
   * selector must match a generic option, an |inner_text_pattern| will be
   * added to this element reference to match a single option.
   * Both clicks use the same |click_type|.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectorProto option_element_to_click = 9;</code>
   * @return The optionElementToClick.
   */
  org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto getOptionElementToClick();

  /**
   * <code>optional .autofill_assistant.ClickType click_type = 10;</code>
   * @return Whether the clickType field is set.
   */
  boolean hasClickType();
  /**
   * <code>optional .autofill_assistant.ClickType click_type = 10;</code>
   * @return The clickType.
   */
  org.chromium.chrome.browser.autofill_assistant.proto.ClickType getClickType();
}
