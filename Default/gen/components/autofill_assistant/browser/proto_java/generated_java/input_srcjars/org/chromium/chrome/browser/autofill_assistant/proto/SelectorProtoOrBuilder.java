// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/browser/service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

public interface SelectorProtoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:autofill_assistant.SelectorProto)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * Filters for the element on the page. Filter are applied sequentially, using
   * the output of the previous filter as input. The root of these filters is
   * the main frame's document.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SelectorProto.Filter filters = 9;</code>
   */
  java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.Filter> 
      getFiltersList();
  /**
   * <pre>
   * Filters for the element on the page. Filter are applied sequentially, using
   * the output of the previous filter as input. The root of these filters is
   * the main frame's document.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SelectorProto.Filter filters = 9;</code>
   */
  org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.Filter getFilters(int index);
  /**
   * <pre>
   * Filters for the element on the page. Filter are applied sequentially, using
   * the output of the previous filter as input. The root of these filters is
   * the main frame's document.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SelectorProto.Filter filters = 9;</code>
   */
  int getFiltersCount();

  /**
   * <pre>
   * An ID that's used to identify selector in logs, as they pass through
   * different layers. It is passed to the client only as FYI. Client might
   * choose to echo back these ids when reporting specific selectors as
   * matching or not matching.
   * </pre>
   *
   * <code>optional int64 tracking_id = 10;</code>
   * @return Whether the trackingId field is set.
   */
  boolean hasTrackingId();
  /**
   * <pre>
   * An ID that's used to identify selector in logs, as they pass through
   * different layers. It is passed to the client only as FYI. Client might
   * choose to echo back these ids when reporting specific selectors as
   * matching or not matching.
   * </pre>
   *
   * <code>optional int64 tracking_id = 10;</code>
   * @return The trackingId.
   */
  long getTrackingId();
}
