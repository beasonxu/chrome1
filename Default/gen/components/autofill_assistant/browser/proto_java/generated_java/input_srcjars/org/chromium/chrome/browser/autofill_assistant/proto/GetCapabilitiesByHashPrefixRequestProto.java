// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/browser/service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * A privacy sensitive way to look up Capabilities. Allows querying for
 * capabilities by hashing the requested domain urls and sending only some of
 * the leading bits, such that the recipient will be unable to reconstruct the
 * original URL.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.GetCapabilitiesByHashPrefixRequestProto}
 */
public  final class GetCapabilitiesByHashPrefixRequestProto extends
    com.google.protobuf.GeneratedMessageLite<
        GetCapabilitiesByHashPrefixRequestProto, GetCapabilitiesByHashPrefixRequestProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.GetCapabilitiesByHashPrefixRequestProto)
    GetCapabilitiesByHashPrefixRequestProtoOrBuilder {
  private GetCapabilitiesByHashPrefixRequestProto() {
    hashPrefix_ = emptyLongList();
    scriptParameters_ = emptyProtobufList();
  }
  private int bitField0_;
  public static final int HASH_PREFIX_LENGTH_FIELD_NUMBER = 1;
  private int hashPrefixLength_;
  /**
   * <pre>
   * Required. Number of bits in each hash prefix. Value must be in the range
   * [15, 64].
   * </pre>
   *
   * <code>optional uint32 hash_prefix_length = 1;</code>
   * @return Whether the hashPrefixLength field is set.
   */
  @java.lang.Override
  public boolean hasHashPrefixLength() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Required. Number of bits in each hash prefix. Value must be in the range
   * [15, 64].
   * </pre>
   *
   * <code>optional uint32 hash_prefix_length = 1;</code>
   * @return The hashPrefixLength.
   */
  @java.lang.Override
  public int getHashPrefixLength() {
    return hashPrefixLength_;
  }
  /**
   * <pre>
   * Required. Number of bits in each hash prefix. Value must be in the range
   * [15, 64].
   * </pre>
   *
   * <code>optional uint32 hash_prefix_length = 1;</code>
   * @param value The hashPrefixLength to set.
   */
  private void setHashPrefixLength(int value) {
    bitField0_ |= 0x00000001;
    hashPrefixLength_ = value;
  }
  /**
   * <pre>
   * Required. Number of bits in each hash prefix. Value must be in the range
   * [15, 64].
   * </pre>
   *
   * <code>optional uint32 hash_prefix_length = 1;</code>
   */
  private void clearHashPrefixLength() {
    bitField0_ = (bitField0_ & ~0x00000001);
    hashPrefixLength_ = 0;
  }

  public static final int HASH_PREFIX_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.LongList hashPrefix_;
  /**
   * <pre>
   * Required. Hash prefixes for requested urls. The prefix will be taken as the
   * first `hash_prefix_length` number of bits of this uint64. Other bits will
   * be ignored. CityHash64 should be used to calculate the hashes. Encoding of
   * the domain url prior to hashing should be UTF-8, it should include the
   * http(s) header and exclude the last '/' character.
   * Examples:
   * - https://www.exampledomain.com
   * - https://example.domain.com
   * - https://domain.com
   * </pre>
   *
   * <code>repeated uint64 hash_prefix = 2 [packed = true];</code>
   * @return A list containing the hashPrefix.
   */
  @java.lang.Override
  public java.util.List<java.lang.Long>
      getHashPrefixList() {
    return hashPrefix_;
  }
  /**
   * <pre>
   * Required. Hash prefixes for requested urls. The prefix will be taken as the
   * first `hash_prefix_length` number of bits of this uint64. Other bits will
   * be ignored. CityHash64 should be used to calculate the hashes. Encoding of
   * the domain url prior to hashing should be UTF-8, it should include the
   * http(s) header and exclude the last '/' character.
   * Examples:
   * - https://www.exampledomain.com
   * - https://example.domain.com
   * - https://domain.com
   * </pre>
   *
   * <code>repeated uint64 hash_prefix = 2 [packed = true];</code>
   * @return The count of hashPrefix.
   */
  @java.lang.Override
  public int getHashPrefixCount() {
    return hashPrefix_.size();
  }
  /**
   * <pre>
   * Required. Hash prefixes for requested urls. The prefix will be taken as the
   * first `hash_prefix_length` number of bits of this uint64. Other bits will
   * be ignored. CityHash64 should be used to calculate the hashes. Encoding of
   * the domain url prior to hashing should be UTF-8, it should include the
   * http(s) header and exclude the last '/' character.
   * Examples:
   * - https://www.exampledomain.com
   * - https://example.domain.com
   * - https://domain.com
   * </pre>
   *
   * <code>repeated uint64 hash_prefix = 2 [packed = true];</code>
   * @param index The index of the element to return.
   * @return The hashPrefix at the given index.
   */
  @java.lang.Override
  public long getHashPrefix(int index) {
    return hashPrefix_.getLong(index);
  }
  private int hashPrefixMemoizedSerializedSize = -1;
  private void ensureHashPrefixIsMutable() {
    com.google.protobuf.Internal.LongList tmp = hashPrefix_;
    if (!tmp.isModifiable()) {
      hashPrefix_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <pre>
   * Required. Hash prefixes for requested urls. The prefix will be taken as the
   * first `hash_prefix_length` number of bits of this uint64. Other bits will
   * be ignored. CityHash64 should be used to calculate the hashes. Encoding of
   * the domain url prior to hashing should be UTF-8, it should include the
   * http(s) header and exclude the last '/' character.
   * Examples:
   * - https://www.exampledomain.com
   * - https://example.domain.com
   * - https://domain.com
   * </pre>
   *
   * <code>repeated uint64 hash_prefix = 2 [packed = true];</code>
   * @param index The index to set the value at.
   * @param value The hashPrefix to set.
   */
  private void setHashPrefix(
      int index, long value) {
    ensureHashPrefixIsMutable();
    hashPrefix_.setLong(index, value);
  }
  /**
   * <pre>
   * Required. Hash prefixes for requested urls. The prefix will be taken as the
   * first `hash_prefix_length` number of bits of this uint64. Other bits will
   * be ignored. CityHash64 should be used to calculate the hashes. Encoding of
   * the domain url prior to hashing should be UTF-8, it should include the
   * http(s) header and exclude the last '/' character.
   * Examples:
   * - https://www.exampledomain.com
   * - https://example.domain.com
   * - https://domain.com
   * </pre>
   *
   * <code>repeated uint64 hash_prefix = 2 [packed = true];</code>
   * @param value The hashPrefix to add.
   */
  private void addHashPrefix(long value) {
    ensureHashPrefixIsMutable();
    hashPrefix_.addLong(value);
  }
  /**
   * <pre>
   * Required. Hash prefixes for requested urls. The prefix will be taken as the
   * first `hash_prefix_length` number of bits of this uint64. Other bits will
   * be ignored. CityHash64 should be used to calculate the hashes. Encoding of
   * the domain url prior to hashing should be UTF-8, it should include the
   * http(s) header and exclude the last '/' character.
   * Examples:
   * - https://www.exampledomain.com
   * - https://example.domain.com
   * - https://domain.com
   * </pre>
   *
   * <code>repeated uint64 hash_prefix = 2 [packed = true];</code>
   * @param values The hashPrefix to add.
   */
  private void addAllHashPrefix(
      java.lang.Iterable<? extends java.lang.Long> values) {
    ensureHashPrefixIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, hashPrefix_);
  }
  /**
   * <pre>
   * Required. Hash prefixes for requested urls. The prefix will be taken as the
   * first `hash_prefix_length` number of bits of this uint64. Other bits will
   * be ignored. CityHash64 should be used to calculate the hashes. Encoding of
   * the domain url prior to hashing should be UTF-8, it should include the
   * http(s) header and exclude the last '/' character.
   * Examples:
   * - https://www.exampledomain.com
   * - https://example.domain.com
   * - https://domain.com
   * </pre>
   *
   * <code>repeated uint64 hash_prefix = 2 [packed = true];</code>
   */
  private void clearHashPrefix() {
    hashPrefix_ = emptyLongList();
  }

  public static final int CLIENT_CONTEXT_FIELD_NUMBER = 3;
  private org.chromium.chrome.browser.autofill_assistant.proto.ClientContextProto clientContext_;
  /**
   * <pre>
   * The client context of the device for which you want to know script
   * capabilities.
   * NOTE: Currently, this will only contain the Chrome version number, locale
   * and country for privacy reasons.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientContextProto client_context = 3;</code>
   */
  @java.lang.Override
  public boolean hasClientContext() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The client context of the device for which you want to know script
   * capabilities.
   * NOTE: Currently, this will only contain the Chrome version number, locale
   * and country for privacy reasons.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientContextProto client_context = 3;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ClientContextProto getClientContext() {
    return clientContext_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ClientContextProto.getDefaultInstance() : clientContext_;
  }
  /**
   * <pre>
   * The client context of the device for which you want to know script
   * capabilities.
   * NOTE: Currently, this will only contain the Chrome version number, locale
   * and country for privacy reasons.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientContextProto client_context = 3;</code>
   */
  private void setClientContext(org.chromium.chrome.browser.autofill_assistant.proto.ClientContextProto value) {
    value.getClass();
  clientContext_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <pre>
   * The client context of the device for which you want to know script
   * capabilities.
   * NOTE: Currently, this will only contain the Chrome version number, locale
   * and country for privacy reasons.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientContextProto client_context = 3;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeClientContext(org.chromium.chrome.browser.autofill_assistant.proto.ClientContextProto value) {
    value.getClass();
  if (clientContext_ != null &&
        clientContext_ != org.chromium.chrome.browser.autofill_assistant.proto.ClientContextProto.getDefaultInstance()) {
      clientContext_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ClientContextProto.newBuilder(clientContext_).mergeFrom(value).buildPartial();
    } else {
      clientContext_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * The client context of the device for which you want to know script
   * capabilities.
   * NOTE: Currently, this will only contain the Chrome version number, locale
   * and country for privacy reasons.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientContextProto client_context = 3;</code>
   */
  private void clearClientContext() {  clientContext_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static final int SCRIPT_PARAMETERS_FIELD_NUMBER = 4;
  private com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProto> scriptParameters_;
  /**
   * <pre>
   * There is only a subset of parameters allowed to be sent from the client.
   * INTENT parameter is required.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
   */
  @java.lang.Override
  public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProto> getScriptParametersList() {
    return scriptParameters_;
  }
  /**
   * <pre>
   * There is only a subset of parameters allowed to be sent from the client.
   * INTENT parameter is required.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
   */
  public java.util.List<? extends org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProtoOrBuilder> 
      getScriptParametersOrBuilderList() {
    return scriptParameters_;
  }
  /**
   * <pre>
   * There is only a subset of parameters allowed to be sent from the client.
   * INTENT parameter is required.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
   */
  @java.lang.Override
  public int getScriptParametersCount() {
    return scriptParameters_.size();
  }
  /**
   * <pre>
   * There is only a subset of parameters allowed to be sent from the client.
   * INTENT parameter is required.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProto getScriptParameters(int index) {
    return scriptParameters_.get(index);
  }
  /**
   * <pre>
   * There is only a subset of parameters allowed to be sent from the client.
   * INTENT parameter is required.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProtoOrBuilder getScriptParametersOrBuilder(
      int index) {
    return scriptParameters_.get(index);
  }
  private void ensureScriptParametersIsMutable() {
    com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProto> tmp = scriptParameters_;
    if (!tmp.isModifiable()) {
      scriptParameters_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <pre>
   * There is only a subset of parameters allowed to be sent from the client.
   * INTENT parameter is required.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
   */
  private void setScriptParameters(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProto value) {
    value.getClass();
  ensureScriptParametersIsMutable();
    scriptParameters_.set(index, value);
  }
  /**
   * <pre>
   * There is only a subset of parameters allowed to be sent from the client.
   * INTENT parameter is required.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
   */
  private void addScriptParameters(org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProto value) {
    value.getClass();
  ensureScriptParametersIsMutable();
    scriptParameters_.add(value);
  }
  /**
   * <pre>
   * There is only a subset of parameters allowed to be sent from the client.
   * INTENT parameter is required.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
   */
  private void addScriptParameters(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProto value) {
    value.getClass();
  ensureScriptParametersIsMutable();
    scriptParameters_.add(index, value);
  }
  /**
   * <pre>
   * There is only a subset of parameters allowed to be sent from the client.
   * INTENT parameter is required.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
   */
  private void addAllScriptParameters(
      java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProto> values) {
    ensureScriptParametersIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, scriptParameters_);
  }
  /**
   * <pre>
   * There is only a subset of parameters allowed to be sent from the client.
   * INTENT parameter is required.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
   */
  private void clearScriptParameters() {
    scriptParameters_ = emptyProtobufList();
  }
  /**
   * <pre>
   * There is only a subset of parameters allowed to be sent from the client.
   * INTENT parameter is required.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
   */
  private void removeScriptParameters(int index) {
    ensureScriptParametersIsMutable();
    scriptParameters_.remove(index);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * A privacy sensitive way to look up Capabilities. Allows querying for
   * capabilities by hashing the requested domain urls and sending only some of
   * the leading bits, such that the recipient will be unable to reconstruct the
   * original URL.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.GetCapabilitiesByHashPrefixRequestProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.GetCapabilitiesByHashPrefixRequestProto)
      org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Required. Number of bits in each hash prefix. Value must be in the range
     * [15, 64].
     * </pre>
     *
     * <code>optional uint32 hash_prefix_length = 1;</code>
     * @return Whether the hashPrefixLength field is set.
     */
    @java.lang.Override
    public boolean hasHashPrefixLength() {
      return instance.hasHashPrefixLength();
    }
    /**
     * <pre>
     * Required. Number of bits in each hash prefix. Value must be in the range
     * [15, 64].
     * </pre>
     *
     * <code>optional uint32 hash_prefix_length = 1;</code>
     * @return The hashPrefixLength.
     */
    @java.lang.Override
    public int getHashPrefixLength() {
      return instance.getHashPrefixLength();
    }
    /**
     * <pre>
     * Required. Number of bits in each hash prefix. Value must be in the range
     * [15, 64].
     * </pre>
     *
     * <code>optional uint32 hash_prefix_length = 1;</code>
     * @param value The hashPrefixLength to set.
     * @return This builder for chaining.
     */
    public Builder setHashPrefixLength(int value) {
      copyOnWrite();
      instance.setHashPrefixLength(value);
      return this;
    }
    /**
     * <pre>
     * Required. Number of bits in each hash prefix. Value must be in the range
     * [15, 64].
     * </pre>
     *
     * <code>optional uint32 hash_prefix_length = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearHashPrefixLength() {
      copyOnWrite();
      instance.clearHashPrefixLength();
      return this;
    }

    /**
     * <pre>
     * Required. Hash prefixes for requested urls. The prefix will be taken as the
     * first `hash_prefix_length` number of bits of this uint64. Other bits will
     * be ignored. CityHash64 should be used to calculate the hashes. Encoding of
     * the domain url prior to hashing should be UTF-8, it should include the
     * http(s) header and exclude the last '/' character.
     * Examples:
     * - https://www.exampledomain.com
     * - https://example.domain.com
     * - https://domain.com
     * </pre>
     *
     * <code>repeated uint64 hash_prefix = 2 [packed = true];</code>
     * @return A list containing the hashPrefix.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getHashPrefixList() {
      return java.util.Collections.unmodifiableList(
          instance.getHashPrefixList());
    }
    /**
     * <pre>
     * Required. Hash prefixes for requested urls. The prefix will be taken as the
     * first `hash_prefix_length` number of bits of this uint64. Other bits will
     * be ignored. CityHash64 should be used to calculate the hashes. Encoding of
     * the domain url prior to hashing should be UTF-8, it should include the
     * http(s) header and exclude the last '/' character.
     * Examples:
     * - https://www.exampledomain.com
     * - https://example.domain.com
     * - https://domain.com
     * </pre>
     *
     * <code>repeated uint64 hash_prefix = 2 [packed = true];</code>
     * @return The count of hashPrefix.
     */
    @java.lang.Override
    public int getHashPrefixCount() {
      return instance.getHashPrefixCount();
    }
    /**
     * <pre>
     * Required. Hash prefixes for requested urls. The prefix will be taken as the
     * first `hash_prefix_length` number of bits of this uint64. Other bits will
     * be ignored. CityHash64 should be used to calculate the hashes. Encoding of
     * the domain url prior to hashing should be UTF-8, it should include the
     * http(s) header and exclude the last '/' character.
     * Examples:
     * - https://www.exampledomain.com
     * - https://example.domain.com
     * - https://domain.com
     * </pre>
     *
     * <code>repeated uint64 hash_prefix = 2 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The hashPrefix at the given index.
     */
    @java.lang.Override
    public long getHashPrefix(int index) {
      return instance.getHashPrefix(index);
    }
    /**
     * <pre>
     * Required. Hash prefixes for requested urls. The prefix will be taken as the
     * first `hash_prefix_length` number of bits of this uint64. Other bits will
     * be ignored. CityHash64 should be used to calculate the hashes. Encoding of
     * the domain url prior to hashing should be UTF-8, it should include the
     * http(s) header and exclude the last '/' character.
     * Examples:
     * - https://www.exampledomain.com
     * - https://example.domain.com
     * - https://domain.com
     * </pre>
     *
     * <code>repeated uint64 hash_prefix = 2 [packed = true];</code>
     * @param value The hashPrefix to set.
     * @return This builder for chaining.
     */
    public Builder setHashPrefix(
        int index, long value) {
      copyOnWrite();
      instance.setHashPrefix(index, value);
      return this;
    }
    /**
     * <pre>
     * Required. Hash prefixes for requested urls. The prefix will be taken as the
     * first `hash_prefix_length` number of bits of this uint64. Other bits will
     * be ignored. CityHash64 should be used to calculate the hashes. Encoding of
     * the domain url prior to hashing should be UTF-8, it should include the
     * http(s) header and exclude the last '/' character.
     * Examples:
     * - https://www.exampledomain.com
     * - https://example.domain.com
     * - https://domain.com
     * </pre>
     *
     * <code>repeated uint64 hash_prefix = 2 [packed = true];</code>
     * @param value The hashPrefix to add.
     * @return This builder for chaining.
     */
    public Builder addHashPrefix(long value) {
      copyOnWrite();
      instance.addHashPrefix(value);
      return this;
    }
    /**
     * <pre>
     * Required. Hash prefixes for requested urls. The prefix will be taken as the
     * first `hash_prefix_length` number of bits of this uint64. Other bits will
     * be ignored. CityHash64 should be used to calculate the hashes. Encoding of
     * the domain url prior to hashing should be UTF-8, it should include the
     * http(s) header and exclude the last '/' character.
     * Examples:
     * - https://www.exampledomain.com
     * - https://example.domain.com
     * - https://domain.com
     * </pre>
     *
     * <code>repeated uint64 hash_prefix = 2 [packed = true];</code>
     * @param values The hashPrefix to add.
     * @return This builder for chaining.
     */
    public Builder addAllHashPrefix(
        java.lang.Iterable<? extends java.lang.Long> values) {
      copyOnWrite();
      instance.addAllHashPrefix(values);
      return this;
    }
    /**
     * <pre>
     * Required. Hash prefixes for requested urls. The prefix will be taken as the
     * first `hash_prefix_length` number of bits of this uint64. Other bits will
     * be ignored. CityHash64 should be used to calculate the hashes. Encoding of
     * the domain url prior to hashing should be UTF-8, it should include the
     * http(s) header and exclude the last '/' character.
     * Examples:
     * - https://www.exampledomain.com
     * - https://example.domain.com
     * - https://domain.com
     * </pre>
     *
     * <code>repeated uint64 hash_prefix = 2 [packed = true];</code>
     * @return This builder for chaining.
     */
    public Builder clearHashPrefix() {
      copyOnWrite();
      instance.clearHashPrefix();
      return this;
    }

    /**
     * <pre>
     * The client context of the device for which you want to know script
     * capabilities.
     * NOTE: Currently, this will only contain the Chrome version number, locale
     * and country for privacy reasons.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientContextProto client_context = 3;</code>
     */
    @java.lang.Override
    public boolean hasClientContext() {
      return instance.hasClientContext();
    }
    /**
     * <pre>
     * The client context of the device for which you want to know script
     * capabilities.
     * NOTE: Currently, this will only contain the Chrome version number, locale
     * and country for privacy reasons.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientContextProto client_context = 3;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ClientContextProto getClientContext() {
      return instance.getClientContext();
    }
    /**
     * <pre>
     * The client context of the device for which you want to know script
     * capabilities.
     * NOTE: Currently, this will only contain the Chrome version number, locale
     * and country for privacy reasons.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientContextProto client_context = 3;</code>
     */
    public Builder setClientContext(org.chromium.chrome.browser.autofill_assistant.proto.ClientContextProto value) {
      copyOnWrite();
      instance.setClientContext(value);
      return this;
      }
    /**
     * <pre>
     * The client context of the device for which you want to know script
     * capabilities.
     * NOTE: Currently, this will only contain the Chrome version number, locale
     * and country for privacy reasons.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientContextProto client_context = 3;</code>
     */
    public Builder setClientContext(
        org.chromium.chrome.browser.autofill_assistant.proto.ClientContextProto.Builder builderForValue) {
      copyOnWrite();
      instance.setClientContext(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The client context of the device for which you want to know script
     * capabilities.
     * NOTE: Currently, this will only contain the Chrome version number, locale
     * and country for privacy reasons.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientContextProto client_context = 3;</code>
     */
    public Builder mergeClientContext(org.chromium.chrome.browser.autofill_assistant.proto.ClientContextProto value) {
      copyOnWrite();
      instance.mergeClientContext(value);
      return this;
    }
    /**
     * <pre>
     * The client context of the device for which you want to know script
     * capabilities.
     * NOTE: Currently, this will only contain the Chrome version number, locale
     * and country for privacy reasons.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientContextProto client_context = 3;</code>
     */
    public Builder clearClientContext() {  copyOnWrite();
      instance.clearClientContext();
      return this;
    }

    /**
     * <pre>
     * There is only a subset of parameters allowed to be sent from the client.
     * INTENT parameter is required.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
     */
    @java.lang.Override
    public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProto> getScriptParametersList() {
      return java.util.Collections.unmodifiableList(
          instance.getScriptParametersList());
    }
    /**
     * <pre>
     * There is only a subset of parameters allowed to be sent from the client.
     * INTENT parameter is required.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
     */
    @java.lang.Override
    public int getScriptParametersCount() {
      return instance.getScriptParametersCount();
    }/**
     * <pre>
     * There is only a subset of parameters allowed to be sent from the client.
     * INTENT parameter is required.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProto getScriptParameters(int index) {
      return instance.getScriptParameters(index);
    }
    /**
     * <pre>
     * There is only a subset of parameters allowed to be sent from the client.
     * INTENT parameter is required.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
     */
    public Builder setScriptParameters(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProto value) {
      copyOnWrite();
      instance.setScriptParameters(index, value);
      return this;
    }
    /**
     * <pre>
     * There is only a subset of parameters allowed to be sent from the client.
     * INTENT parameter is required.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
     */
    public Builder setScriptParameters(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProto.Builder builderForValue) {
      copyOnWrite();
      instance.setScriptParameters(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * There is only a subset of parameters allowed to be sent from the client.
     * INTENT parameter is required.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
     */
    public Builder addScriptParameters(org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProto value) {
      copyOnWrite();
      instance.addScriptParameters(value);
      return this;
    }
    /**
     * <pre>
     * There is only a subset of parameters allowed to be sent from the client.
     * INTENT parameter is required.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
     */
    public Builder addScriptParameters(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProto value) {
      copyOnWrite();
      instance.addScriptParameters(index, value);
      return this;
    }
    /**
     * <pre>
     * There is only a subset of parameters allowed to be sent from the client.
     * INTENT parameter is required.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
     */
    public Builder addScriptParameters(
        org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProto.Builder builderForValue) {
      copyOnWrite();
      instance.addScriptParameters(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * There is only a subset of parameters allowed to be sent from the client.
     * INTENT parameter is required.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
     */
    public Builder addScriptParameters(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProto.Builder builderForValue) {
      copyOnWrite();
      instance.addScriptParameters(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * There is only a subset of parameters allowed to be sent from the client.
     * INTENT parameter is required.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
     */
    public Builder addAllScriptParameters(
        java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProto> values) {
      copyOnWrite();
      instance.addAllScriptParameters(values);
      return this;
    }
    /**
     * <pre>
     * There is only a subset of parameters allowed to be sent from the client.
     * INTENT parameter is required.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
     */
    public Builder clearScriptParameters() {
      copyOnWrite();
      instance.clearScriptParameters();
      return this;
    }
    /**
     * <pre>
     * There is only a subset of parameters allowed to be sent from the client.
     * INTENT parameter is required.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ScriptParameterProto script_parameters = 4;</code>
     */
    public Builder removeScriptParameters(int index) {
      copyOnWrite();
      instance.removeScriptParameters(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.GetCapabilitiesByHashPrefixRequestProto)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "hashPrefixLength_",
            "hashPrefix_",
            "clientContext_",
            "scriptParameters_",
            org.chromium.chrome.browser.autofill_assistant.proto.ScriptParameterProto.class,
          };
          java.lang.String info =
              "\u0001\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0002\u0000\u0001\u100b\u0000\u0002" +
              "&\u0003\u1009\u0001\u0004\u001b";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.GetCapabilitiesByHashPrefixRequestProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto DEFAULT_INSTANCE;
  static {
    GetCapabilitiesByHashPrefixRequestProto defaultInstance = new GetCapabilitiesByHashPrefixRequestProto();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      GetCapabilitiesByHashPrefixRequestProto.class, defaultInstance);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.GetCapabilitiesByHashPrefixRequestProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<GetCapabilitiesByHashPrefixRequestProto> PARSER;

  public static com.google.protobuf.Parser<GetCapabilitiesByHashPrefixRequestProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

