// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/browser/service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

public interface UnexpectedErrorInfoProtoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:autofill_assistant.UnexpectedErrorInfoProto)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * Source file, within the client code, where an unexpected error was detected
   * and reported.
   * Only filled for unexpected errors OTHER_ACTION_STATUS and
   * UNEXPECTED_JS_ERROR.
   * This and source_line are only meaningful for the exact version reported in
   * the client context.
   * </pre>
   *
   * <code>optional string source_file = 1;</code>
   * @return Whether the sourceFile field is set.
   */
  boolean hasSourceFile();
  /**
   * <pre>
   * Source file, within the client code, where an unexpected error was detected
   * and reported.
   * Only filled for unexpected errors OTHER_ACTION_STATUS and
   * UNEXPECTED_JS_ERROR.
   * This and source_line are only meaningful for the exact version reported in
   * the client context.
   * </pre>
   *
   * <code>optional string source_file = 1;</code>
   * @return The sourceFile.
   */
  java.lang.String getSourceFile();
  /**
   * <pre>
   * Source file, within the client code, where an unexpected error was detected
   * and reported.
   * Only filled for unexpected errors OTHER_ACTION_STATUS and
   * UNEXPECTED_JS_ERROR.
   * This and source_line are only meaningful for the exact version reported in
   * the client context.
   * </pre>
   *
   * <code>optional string source_file = 1;</code>
   * @return The bytes for sourceFile.
   */
  com.google.protobuf.ByteString
      getSourceFileBytes();

  /**
   * <pre>
   * Line number, within the client's source file, where the error was detected.
   * </pre>
   *
   * <code>optional int32 source_line_number = 2;</code>
   * @return Whether the sourceLineNumber field is set.
   */
  boolean hasSourceLineNumber();
  /**
   * <pre>
   * Line number, within the client's source file, where the error was detected.
   * </pre>
   *
   * <code>optional int32 source_line_number = 2;</code>
   * @return The sourceLineNumber.
   */
  int getSourceLineNumber();

  /**
   * <pre>
   * JavaScript exception class name, if reporting a JavaScript error.
   * </pre>
   *
   * <code>optional string js_exception_classname = 3;</code>
   * @return Whether the jsExceptionClassname field is set.
   */
  boolean hasJsExceptionClassname();
  /**
   * <pre>
   * JavaScript exception class name, if reporting a JavaScript error.
   * </pre>
   *
   * <code>optional string js_exception_classname = 3;</code>
   * @return The jsExceptionClassname.
   */
  java.lang.String getJsExceptionClassname();
  /**
   * <pre>
   * JavaScript exception class name, if reporting a JavaScript error.
   * </pre>
   *
   * <code>optional string js_exception_classname = 3;</code>
   * @return The bytes for jsExceptionClassname.
   */
  com.google.protobuf.ByteString
      getJsExceptionClassnameBytes();

  /**
   * <pre>
   * The location that caused the JavaScript exception. Guaranteed to have the
   * same number of entries as js_exception_line_numbers and
   * js_exception_column_numbers.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UnexpectedErrorInfoProto.JsExceptionLocation js_exception_locations = 8 [packed = true];</code>
   * @return A list containing the jsExceptionLocations.
   */
  java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.UnexpectedErrorInfoProto.JsExceptionLocation> getJsExceptionLocationsList();
  /**
   * <pre>
   * The location that caused the JavaScript exception. Guaranteed to have the
   * same number of entries as js_exception_line_numbers and
   * js_exception_column_numbers.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UnexpectedErrorInfoProto.JsExceptionLocation js_exception_locations = 8 [packed = true];</code>
   * @return The count of jsExceptionLocations.
   */
  int getJsExceptionLocationsCount();
  /**
   * <pre>
   * The location that caused the JavaScript exception. Guaranteed to have the
   * same number of entries as js_exception_line_numbers and
   * js_exception_column_numbers.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UnexpectedErrorInfoProto.JsExceptionLocation js_exception_locations = 8 [packed = true];</code>
   * @param index The index of the element to return.
   * @return The jsExceptionLocations at the given index.
   */
  org.chromium.chrome.browser.autofill_assistant.proto.UnexpectedErrorInfoProto.JsExceptionLocation getJsExceptionLocations(int index);

  /**
   * <pre>
   * JavaScript exception line numbers, within the js snippet that was sent to
   * devtools runtime by the client, if reporting a JavaScript error. Together
   * with |js_exception_column_numbers| this forms a stack trace.
   * </pre>
   *
   * <code>repeated int32 js_exception_line_numbers = 4;</code>
   * @return A list containing the jsExceptionLineNumbers.
   */
  java.util.List<java.lang.Integer> getJsExceptionLineNumbersList();
  /**
   * <pre>
   * JavaScript exception line numbers, within the js snippet that was sent to
   * devtools runtime by the client, if reporting a JavaScript error. Together
   * with |js_exception_column_numbers| this forms a stack trace.
   * </pre>
   *
   * <code>repeated int32 js_exception_line_numbers = 4;</code>
   * @return The count of jsExceptionLineNumbers.
   */
  int getJsExceptionLineNumbersCount();
  /**
   * <pre>
   * JavaScript exception line numbers, within the js snippet that was sent to
   * devtools runtime by the client, if reporting a JavaScript error. Together
   * with |js_exception_column_numbers| this forms a stack trace.
   * </pre>
   *
   * <code>repeated int32 js_exception_line_numbers = 4;</code>
   * @param index The index of the element to return.
   * @return The jsExceptionLineNumbers at the given index.
   */
  int getJsExceptionLineNumbers(int index);

  /**
   * <pre>
   * JavaScript exception column number, within the js snippet that was sent to
   * devtools runtime by the client, if reporting a JavaScript error. Together
   * with |js_exception_line_numbers| this forms a stack trace.
   * </pre>
   *
   * <code>repeated int32 js_exception_column_numbers = 5;</code>
   * @return A list containing the jsExceptionColumnNumbers.
   */
  java.util.List<java.lang.Integer> getJsExceptionColumnNumbersList();
  /**
   * <pre>
   * JavaScript exception column number, within the js snippet that was sent to
   * devtools runtime by the client, if reporting a JavaScript error. Together
   * with |js_exception_line_numbers| this forms a stack trace.
   * </pre>
   *
   * <code>repeated int32 js_exception_column_numbers = 5;</code>
   * @return The count of jsExceptionColumnNumbers.
   */
  int getJsExceptionColumnNumbersCount();
  /**
   * <pre>
   * JavaScript exception column number, within the js snippet that was sent to
   * devtools runtime by the client, if reporting a JavaScript error. Together
   * with |js_exception_line_numbers| this forms a stack trace.
   * </pre>
   *
   * <code>repeated int32 js_exception_column_numbers = 5;</code>
   * @param index The index of the element to return.
   * @return The jsExceptionColumnNumbers at the given index.
   */
  int getJsExceptionColumnNumbers(int index);

  /**
   * <pre>
   * Error code returned by devtools, if any. 0 is considered a success.
   * </pre>
   *
   * <code>optional int32 devtools_error_code = 6;</code>
   * @return Whether the devtoolsErrorCode field is set.
   */
  boolean hasDevtoolsErrorCode();
  /**
   * <pre>
   * Error code returned by devtools, if any. 0 is considered a success.
   * </pre>
   *
   * <code>optional int32 devtools_error_code = 6;</code>
   * @return The devtoolsErrorCode.
   */
  int getDevtoolsErrorCode();

  /**
   * <pre>
   * Error message returned by devtools, if any.
   * </pre>
   *
   * <code>optional string devtools_error_message = 7;</code>
   * @return Whether the devtoolsErrorMessage field is set.
   */
  boolean hasDevtoolsErrorMessage();
  /**
   * <pre>
   * Error message returned by devtools, if any.
   * </pre>
   *
   * <code>optional string devtools_error_message = 7;</code>
   * @return The devtoolsErrorMessage.
   */
  java.lang.String getDevtoolsErrorMessage();
  /**
   * <pre>
   * Error message returned by devtools, if any.
   * </pre>
   *
   * <code>optional string devtools_error_message = 7;</code>
   * @return The bytes for devtoolsErrorMessage.
   */
  com.google.protobuf.ByteString
      getDevtoolsErrorMessageBytes();
}
