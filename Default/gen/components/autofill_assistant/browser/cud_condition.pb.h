// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/browser/cud_condition.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fautofill_5fassistant_2fbrowser_2fcud_5fcondition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fautofill_5fassistant_2fbrowser_2fcud_5fcondition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "components/autofill_assistant/browser/action_value.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fautofill_5fassistant_2fbrowser_2fcud_5fcondition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fautofill_5fassistant_2fbrowser_2fcud_5fcondition_2eproto {
  static const uint32_t offsets[];
};
namespace autofill_assistant {
class RequiredDataPiece;
struct RequiredDataPieceDefaultTypeInternal;
extern RequiredDataPieceDefaultTypeInternal _RequiredDataPiece_default_instance_;
class RequiredDataPiece_Condition;
struct RequiredDataPiece_ConditionDefaultTypeInternal;
extern RequiredDataPiece_ConditionDefaultTypeInternal _RequiredDataPiece_Condition_default_instance_;
class RequiredDataPiece_NotEmptyCondition;
struct RequiredDataPiece_NotEmptyConditionDefaultTypeInternal;
extern RequiredDataPiece_NotEmptyConditionDefaultTypeInternal _RequiredDataPiece_NotEmptyCondition_default_instance_;
class RequiredDataPiece_RegexpCondition;
struct RequiredDataPiece_RegexpConditionDefaultTypeInternal;
extern RequiredDataPiece_RegexpConditionDefaultTypeInternal _RequiredDataPiece_RegexpCondition_default_instance_;
}  // namespace autofill_assistant
PROTOBUF_NAMESPACE_OPEN
template<> ::autofill_assistant::RequiredDataPiece* Arena::CreateMaybeMessage<::autofill_assistant::RequiredDataPiece>(Arena*);
template<> ::autofill_assistant::RequiredDataPiece_Condition* Arena::CreateMaybeMessage<::autofill_assistant::RequiredDataPiece_Condition>(Arena*);
template<> ::autofill_assistant::RequiredDataPiece_NotEmptyCondition* Arena::CreateMaybeMessage<::autofill_assistant::RequiredDataPiece_NotEmptyCondition>(Arena*);
template<> ::autofill_assistant::RequiredDataPiece_RegexpCondition* Arena::CreateMaybeMessage<::autofill_assistant::RequiredDataPiece_RegexpCondition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autofill_assistant {

// ===================================================================

class RequiredDataPiece_Condition final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill_assistant.RequiredDataPiece.Condition) */ {
 public:
  inline RequiredDataPiece_Condition() : RequiredDataPiece_Condition(nullptr) {}
  ~RequiredDataPiece_Condition() override;
  explicit PROTOBUF_CONSTEXPR RequiredDataPiece_Condition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequiredDataPiece_Condition(const RequiredDataPiece_Condition& from);
  RequiredDataPiece_Condition(RequiredDataPiece_Condition&& from) noexcept
    : RequiredDataPiece_Condition() {
    *this = ::std::move(from);
  }

  inline RequiredDataPiece_Condition& operator=(const RequiredDataPiece_Condition& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequiredDataPiece_Condition& operator=(RequiredDataPiece_Condition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RequiredDataPiece_Condition& default_instance() {
    return *internal_default_instance();
  }
  enum ConditionCase {
    kNotEmpty = 2,
    kRegexp = 3,
    CONDITION_NOT_SET = 0,
  };

  static inline const RequiredDataPiece_Condition* internal_default_instance() {
    return reinterpret_cast<const RequiredDataPiece_Condition*>(
               &_RequiredDataPiece_Condition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequiredDataPiece_Condition& a, RequiredDataPiece_Condition& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RequiredDataPiece_Condition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequiredDataPiece_Condition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequiredDataPiece_Condition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequiredDataPiece_Condition>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RequiredDataPiece_Condition& from);
  void MergeFrom(const RequiredDataPiece_Condition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequiredDataPiece_Condition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill_assistant.RequiredDataPiece.Condition";
  }
  protected:
  explicit RequiredDataPiece_Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kNotEmptyFieldNumber = 2,
    kRegexpFieldNumber = 3,
  };
  // optional int32 key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  int32_t key() const;
  void set_key(int32_t value);
  private:
  int32_t _internal_key() const;
  void _internal_set_key(int32_t value);
  public:

  // .autofill_assistant.RequiredDataPiece.NotEmptyCondition not_empty = 2;
  bool has_not_empty() const;
  private:
  bool _internal_has_not_empty() const;
  public:
  void clear_not_empty();
  const ::autofill_assistant::RequiredDataPiece_NotEmptyCondition& not_empty() const;
  PROTOBUF_NODISCARD ::autofill_assistant::RequiredDataPiece_NotEmptyCondition* release_not_empty();
  ::autofill_assistant::RequiredDataPiece_NotEmptyCondition* mutable_not_empty();
  void set_allocated_not_empty(::autofill_assistant::RequiredDataPiece_NotEmptyCondition* not_empty);
  private:
  const ::autofill_assistant::RequiredDataPiece_NotEmptyCondition& _internal_not_empty() const;
  ::autofill_assistant::RequiredDataPiece_NotEmptyCondition* _internal_mutable_not_empty();
  public:
  void unsafe_arena_set_allocated_not_empty(
      ::autofill_assistant::RequiredDataPiece_NotEmptyCondition* not_empty);
  ::autofill_assistant::RequiredDataPiece_NotEmptyCondition* unsafe_arena_release_not_empty();

  // .autofill_assistant.RequiredDataPiece.RegexpCondition regexp = 3;
  bool has_regexp() const;
  private:
  bool _internal_has_regexp() const;
  public:
  void clear_regexp();
  const ::autofill_assistant::RequiredDataPiece_RegexpCondition& regexp() const;
  PROTOBUF_NODISCARD ::autofill_assistant::RequiredDataPiece_RegexpCondition* release_regexp();
  ::autofill_assistant::RequiredDataPiece_RegexpCondition* mutable_regexp();
  void set_allocated_regexp(::autofill_assistant::RequiredDataPiece_RegexpCondition* regexp);
  private:
  const ::autofill_assistant::RequiredDataPiece_RegexpCondition& _internal_regexp() const;
  ::autofill_assistant::RequiredDataPiece_RegexpCondition* _internal_mutable_regexp();
  public:
  void unsafe_arena_set_allocated_regexp(
      ::autofill_assistant::RequiredDataPiece_RegexpCondition* regexp);
  ::autofill_assistant::RequiredDataPiece_RegexpCondition* unsafe_arena_release_regexp();

  void clear_condition();
  ConditionCase condition_case() const;
  // @@protoc_insertion_point(class_scope:autofill_assistant.RequiredDataPiece.Condition)
 private:
  class _Internal;
  void set_has_not_empty();
  void set_has_regexp();

  inline bool has_condition() const;
  inline void clear_has_condition();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t key_;
  union ConditionUnion {
    constexpr ConditionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::autofill_assistant::RequiredDataPiece_NotEmptyCondition* not_empty_;
    ::autofill_assistant::RequiredDataPiece_RegexpCondition* regexp_;
  } condition_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2fautofill_5fassistant_2fbrowser_2fcud_5fcondition_2eproto;
};
// -------------------------------------------------------------------

class RequiredDataPiece_NotEmptyCondition final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill_assistant.RequiredDataPiece.NotEmptyCondition) */ {
 public:
  inline RequiredDataPiece_NotEmptyCondition() : RequiredDataPiece_NotEmptyCondition(nullptr) {}
  ~RequiredDataPiece_NotEmptyCondition() override;
  explicit PROTOBUF_CONSTEXPR RequiredDataPiece_NotEmptyCondition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequiredDataPiece_NotEmptyCondition(const RequiredDataPiece_NotEmptyCondition& from);
  RequiredDataPiece_NotEmptyCondition(RequiredDataPiece_NotEmptyCondition&& from) noexcept
    : RequiredDataPiece_NotEmptyCondition() {
    *this = ::std::move(from);
  }

  inline RequiredDataPiece_NotEmptyCondition& operator=(const RequiredDataPiece_NotEmptyCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequiredDataPiece_NotEmptyCondition& operator=(RequiredDataPiece_NotEmptyCondition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RequiredDataPiece_NotEmptyCondition& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequiredDataPiece_NotEmptyCondition* internal_default_instance() {
    return reinterpret_cast<const RequiredDataPiece_NotEmptyCondition*>(
               &_RequiredDataPiece_NotEmptyCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequiredDataPiece_NotEmptyCondition& a, RequiredDataPiece_NotEmptyCondition& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RequiredDataPiece_NotEmptyCondition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequiredDataPiece_NotEmptyCondition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequiredDataPiece_NotEmptyCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequiredDataPiece_NotEmptyCondition>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RequiredDataPiece_NotEmptyCondition& from);
  void MergeFrom(const RequiredDataPiece_NotEmptyCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequiredDataPiece_NotEmptyCondition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill_assistant.RequiredDataPiece.NotEmptyCondition";
  }
  protected:
  explicit RequiredDataPiece_NotEmptyCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:autofill_assistant.RequiredDataPiece.NotEmptyCondition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2fautofill_5fassistant_2fbrowser_2fcud_5fcondition_2eproto;
};
// -------------------------------------------------------------------

class RequiredDataPiece_RegexpCondition final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill_assistant.RequiredDataPiece.RegexpCondition) */ {
 public:
  inline RequiredDataPiece_RegexpCondition() : RequiredDataPiece_RegexpCondition(nullptr) {}
  ~RequiredDataPiece_RegexpCondition() override;
  explicit PROTOBUF_CONSTEXPR RequiredDataPiece_RegexpCondition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequiredDataPiece_RegexpCondition(const RequiredDataPiece_RegexpCondition& from);
  RequiredDataPiece_RegexpCondition(RequiredDataPiece_RegexpCondition&& from) noexcept
    : RequiredDataPiece_RegexpCondition() {
    *this = ::std::move(from);
  }

  inline RequiredDataPiece_RegexpCondition& operator=(const RequiredDataPiece_RegexpCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequiredDataPiece_RegexpCondition& operator=(RequiredDataPiece_RegexpCondition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RequiredDataPiece_RegexpCondition& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequiredDataPiece_RegexpCondition* internal_default_instance() {
    return reinterpret_cast<const RequiredDataPiece_RegexpCondition*>(
               &_RequiredDataPiece_RegexpCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequiredDataPiece_RegexpCondition& a, RequiredDataPiece_RegexpCondition& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RequiredDataPiece_RegexpCondition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequiredDataPiece_RegexpCondition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequiredDataPiece_RegexpCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequiredDataPiece_RegexpCondition>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RequiredDataPiece_RegexpCondition& from);
  void MergeFrom(const RequiredDataPiece_RegexpCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequiredDataPiece_RegexpCondition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill_assistant.RequiredDataPiece.RegexpCondition";
  }
  protected:
  explicit RequiredDataPiece_RegexpCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFilterFieldNumber = 1,
  };
  // optional .autofill_assistant.TextFilter text_filter = 1;
  bool has_text_filter() const;
  private:
  bool _internal_has_text_filter() const;
  public:
  void clear_text_filter();
  const ::autofill_assistant::TextFilter& text_filter() const;
  PROTOBUF_NODISCARD ::autofill_assistant::TextFilter* release_text_filter();
  ::autofill_assistant::TextFilter* mutable_text_filter();
  void set_allocated_text_filter(::autofill_assistant::TextFilter* text_filter);
  private:
  const ::autofill_assistant::TextFilter& _internal_text_filter() const;
  ::autofill_assistant::TextFilter* _internal_mutable_text_filter();
  public:
  void unsafe_arena_set_allocated_text_filter(
      ::autofill_assistant::TextFilter* text_filter);
  ::autofill_assistant::TextFilter* unsafe_arena_release_text_filter();

  // @@protoc_insertion_point(class_scope:autofill_assistant.RequiredDataPiece.RegexpCondition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::autofill_assistant::TextFilter* text_filter_;
  friend struct ::TableStruct_components_2fautofill_5fassistant_2fbrowser_2fcud_5fcondition_2eproto;
};
// -------------------------------------------------------------------

class RequiredDataPiece final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill_assistant.RequiredDataPiece) */ {
 public:
  inline RequiredDataPiece() : RequiredDataPiece(nullptr) {}
  ~RequiredDataPiece() override;
  explicit PROTOBUF_CONSTEXPR RequiredDataPiece(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequiredDataPiece(const RequiredDataPiece& from);
  RequiredDataPiece(RequiredDataPiece&& from) noexcept
    : RequiredDataPiece() {
    *this = ::std::move(from);
  }

  inline RequiredDataPiece& operator=(const RequiredDataPiece& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequiredDataPiece& operator=(RequiredDataPiece&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RequiredDataPiece& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequiredDataPiece* internal_default_instance() {
    return reinterpret_cast<const RequiredDataPiece*>(
               &_RequiredDataPiece_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequiredDataPiece& a, RequiredDataPiece& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RequiredDataPiece* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequiredDataPiece* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequiredDataPiece* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequiredDataPiece>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RequiredDataPiece& from);
  void MergeFrom(const RequiredDataPiece& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequiredDataPiece* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill_assistant.RequiredDataPiece";
  }
  protected:
  explicit RequiredDataPiece(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef RequiredDataPiece_Condition Condition;
  typedef RequiredDataPiece_NotEmptyCondition NotEmptyCondition;
  typedef RequiredDataPiece_RegexpCondition RegexpCondition;

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 1,
    kConditionFieldNumber = 2,
  };
  // optional string error_message = 1;
  bool has_error_message() const;
  private:
  bool _internal_has_error_message() const;
  public:
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // optional .autofill_assistant.RequiredDataPiece.Condition condition = 2;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::autofill_assistant::RequiredDataPiece_Condition& condition() const;
  PROTOBUF_NODISCARD ::autofill_assistant::RequiredDataPiece_Condition* release_condition();
  ::autofill_assistant::RequiredDataPiece_Condition* mutable_condition();
  void set_allocated_condition(::autofill_assistant::RequiredDataPiece_Condition* condition);
  private:
  const ::autofill_assistant::RequiredDataPiece_Condition& _internal_condition() const;
  ::autofill_assistant::RequiredDataPiece_Condition* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::autofill_assistant::RequiredDataPiece_Condition* condition);
  ::autofill_assistant::RequiredDataPiece_Condition* unsafe_arena_release_condition();

  // @@protoc_insertion_point(class_scope:autofill_assistant.RequiredDataPiece)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::autofill_assistant::RequiredDataPiece_Condition* condition_;
  friend struct ::TableStruct_components_2fautofill_5fassistant_2fbrowser_2fcud_5fcondition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequiredDataPiece_Condition

// optional int32 key = 1;
inline bool RequiredDataPiece_Condition::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequiredDataPiece_Condition::has_key() const {
  return _internal_has_key();
}
inline void RequiredDataPiece_Condition::clear_key() {
  key_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t RequiredDataPiece_Condition::_internal_key() const {
  return key_;
}
inline int32_t RequiredDataPiece_Condition::key() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.RequiredDataPiece.Condition.key)
  return _internal_key();
}
inline void RequiredDataPiece_Condition::_internal_set_key(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  key_ = value;
}
inline void RequiredDataPiece_Condition::set_key(int32_t value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:autofill_assistant.RequiredDataPiece.Condition.key)
}

// .autofill_assistant.RequiredDataPiece.NotEmptyCondition not_empty = 2;
inline bool RequiredDataPiece_Condition::_internal_has_not_empty() const {
  return condition_case() == kNotEmpty;
}
inline bool RequiredDataPiece_Condition::has_not_empty() const {
  return _internal_has_not_empty();
}
inline void RequiredDataPiece_Condition::set_has_not_empty() {
  _oneof_case_[0] = kNotEmpty;
}
inline void RequiredDataPiece_Condition::clear_not_empty() {
  if (_internal_has_not_empty()) {
    if (GetArenaForAllocation() == nullptr) {
      delete condition_.not_empty_;
    }
    clear_has_condition();
  }
}
inline ::autofill_assistant::RequiredDataPiece_NotEmptyCondition* RequiredDataPiece_Condition::release_not_empty() {
  // @@protoc_insertion_point(field_release:autofill_assistant.RequiredDataPiece.Condition.not_empty)
  if (_internal_has_not_empty()) {
    clear_has_condition();
    ::autofill_assistant::RequiredDataPiece_NotEmptyCondition* temp = condition_.not_empty_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    condition_.not_empty_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::autofill_assistant::RequiredDataPiece_NotEmptyCondition& RequiredDataPiece_Condition::_internal_not_empty() const {
  return _internal_has_not_empty()
      ? *condition_.not_empty_
      : reinterpret_cast< ::autofill_assistant::RequiredDataPiece_NotEmptyCondition&>(::autofill_assistant::_RequiredDataPiece_NotEmptyCondition_default_instance_);
}
inline const ::autofill_assistant::RequiredDataPiece_NotEmptyCondition& RequiredDataPiece_Condition::not_empty() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.RequiredDataPiece.Condition.not_empty)
  return _internal_not_empty();
}
inline ::autofill_assistant::RequiredDataPiece_NotEmptyCondition* RequiredDataPiece_Condition::unsafe_arena_release_not_empty() {
  // @@protoc_insertion_point(field_unsafe_arena_release:autofill_assistant.RequiredDataPiece.Condition.not_empty)
  if (_internal_has_not_empty()) {
    clear_has_condition();
    ::autofill_assistant::RequiredDataPiece_NotEmptyCondition* temp = condition_.not_empty_;
    condition_.not_empty_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequiredDataPiece_Condition::unsafe_arena_set_allocated_not_empty(::autofill_assistant::RequiredDataPiece_NotEmptyCondition* not_empty) {
  clear_condition();
  if (not_empty) {
    set_has_not_empty();
    condition_.not_empty_ = not_empty;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill_assistant.RequiredDataPiece.Condition.not_empty)
}
inline ::autofill_assistant::RequiredDataPiece_NotEmptyCondition* RequiredDataPiece_Condition::_internal_mutable_not_empty() {
  if (!_internal_has_not_empty()) {
    clear_condition();
    set_has_not_empty();
    condition_.not_empty_ = CreateMaybeMessage< ::autofill_assistant::RequiredDataPiece_NotEmptyCondition >(GetArenaForAllocation());
  }
  return condition_.not_empty_;
}
inline ::autofill_assistant::RequiredDataPiece_NotEmptyCondition* RequiredDataPiece_Condition::mutable_not_empty() {
  ::autofill_assistant::RequiredDataPiece_NotEmptyCondition* _msg = _internal_mutable_not_empty();
  // @@protoc_insertion_point(field_mutable:autofill_assistant.RequiredDataPiece.Condition.not_empty)
  return _msg;
}

// .autofill_assistant.RequiredDataPiece.RegexpCondition regexp = 3;
inline bool RequiredDataPiece_Condition::_internal_has_regexp() const {
  return condition_case() == kRegexp;
}
inline bool RequiredDataPiece_Condition::has_regexp() const {
  return _internal_has_regexp();
}
inline void RequiredDataPiece_Condition::set_has_regexp() {
  _oneof_case_[0] = kRegexp;
}
inline void RequiredDataPiece_Condition::clear_regexp() {
  if (_internal_has_regexp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete condition_.regexp_;
    }
    clear_has_condition();
  }
}
inline ::autofill_assistant::RequiredDataPiece_RegexpCondition* RequiredDataPiece_Condition::release_regexp() {
  // @@protoc_insertion_point(field_release:autofill_assistant.RequiredDataPiece.Condition.regexp)
  if (_internal_has_regexp()) {
    clear_has_condition();
    ::autofill_assistant::RequiredDataPiece_RegexpCondition* temp = condition_.regexp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    condition_.regexp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::autofill_assistant::RequiredDataPiece_RegexpCondition& RequiredDataPiece_Condition::_internal_regexp() const {
  return _internal_has_regexp()
      ? *condition_.regexp_
      : reinterpret_cast< ::autofill_assistant::RequiredDataPiece_RegexpCondition&>(::autofill_assistant::_RequiredDataPiece_RegexpCondition_default_instance_);
}
inline const ::autofill_assistant::RequiredDataPiece_RegexpCondition& RequiredDataPiece_Condition::regexp() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.RequiredDataPiece.Condition.regexp)
  return _internal_regexp();
}
inline ::autofill_assistant::RequiredDataPiece_RegexpCondition* RequiredDataPiece_Condition::unsafe_arena_release_regexp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:autofill_assistant.RequiredDataPiece.Condition.regexp)
  if (_internal_has_regexp()) {
    clear_has_condition();
    ::autofill_assistant::RequiredDataPiece_RegexpCondition* temp = condition_.regexp_;
    condition_.regexp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequiredDataPiece_Condition::unsafe_arena_set_allocated_regexp(::autofill_assistant::RequiredDataPiece_RegexpCondition* regexp) {
  clear_condition();
  if (regexp) {
    set_has_regexp();
    condition_.regexp_ = regexp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill_assistant.RequiredDataPiece.Condition.regexp)
}
inline ::autofill_assistant::RequiredDataPiece_RegexpCondition* RequiredDataPiece_Condition::_internal_mutable_regexp() {
  if (!_internal_has_regexp()) {
    clear_condition();
    set_has_regexp();
    condition_.regexp_ = CreateMaybeMessage< ::autofill_assistant::RequiredDataPiece_RegexpCondition >(GetArenaForAllocation());
  }
  return condition_.regexp_;
}
inline ::autofill_assistant::RequiredDataPiece_RegexpCondition* RequiredDataPiece_Condition::mutable_regexp() {
  ::autofill_assistant::RequiredDataPiece_RegexpCondition* _msg = _internal_mutable_regexp();
  // @@protoc_insertion_point(field_mutable:autofill_assistant.RequiredDataPiece.Condition.regexp)
  return _msg;
}

inline bool RequiredDataPiece_Condition::has_condition() const {
  return condition_case() != CONDITION_NOT_SET;
}
inline void RequiredDataPiece_Condition::clear_has_condition() {
  _oneof_case_[0] = CONDITION_NOT_SET;
}
inline RequiredDataPiece_Condition::ConditionCase RequiredDataPiece_Condition::condition_case() const {
  return RequiredDataPiece_Condition::ConditionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RequiredDataPiece_NotEmptyCondition

// -------------------------------------------------------------------

// RequiredDataPiece_RegexpCondition

// optional .autofill_assistant.TextFilter text_filter = 1;
inline bool RequiredDataPiece_RegexpCondition::_internal_has_text_filter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || text_filter_ != nullptr);
  return value;
}
inline bool RequiredDataPiece_RegexpCondition::has_text_filter() const {
  return _internal_has_text_filter();
}
inline const ::autofill_assistant::TextFilter& RequiredDataPiece_RegexpCondition::_internal_text_filter() const {
  const ::autofill_assistant::TextFilter* p = text_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::autofill_assistant::TextFilter&>(
      ::autofill_assistant::_TextFilter_default_instance_);
}
inline const ::autofill_assistant::TextFilter& RequiredDataPiece_RegexpCondition::text_filter() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.RequiredDataPiece.RegexpCondition.text_filter)
  return _internal_text_filter();
}
inline void RequiredDataPiece_RegexpCondition::unsafe_arena_set_allocated_text_filter(
    ::autofill_assistant::TextFilter* text_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_filter_);
  }
  text_filter_ = text_filter;
  if (text_filter) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill_assistant.RequiredDataPiece.RegexpCondition.text_filter)
}
inline ::autofill_assistant::TextFilter* RequiredDataPiece_RegexpCondition::release_text_filter() {
  _has_bits_[0] &= ~0x00000001u;
  ::autofill_assistant::TextFilter* temp = text_filter_;
  text_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autofill_assistant::TextFilter* RequiredDataPiece_RegexpCondition::unsafe_arena_release_text_filter() {
  // @@protoc_insertion_point(field_release:autofill_assistant.RequiredDataPiece.RegexpCondition.text_filter)
  _has_bits_[0] &= ~0x00000001u;
  ::autofill_assistant::TextFilter* temp = text_filter_;
  text_filter_ = nullptr;
  return temp;
}
inline ::autofill_assistant::TextFilter* RequiredDataPiece_RegexpCondition::_internal_mutable_text_filter() {
  _has_bits_[0] |= 0x00000001u;
  if (text_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill_assistant::TextFilter>(GetArenaForAllocation());
    text_filter_ = p;
  }
  return text_filter_;
}
inline ::autofill_assistant::TextFilter* RequiredDataPiece_RegexpCondition::mutable_text_filter() {
  ::autofill_assistant::TextFilter* _msg = _internal_mutable_text_filter();
  // @@protoc_insertion_point(field_mutable:autofill_assistant.RequiredDataPiece.RegexpCondition.text_filter)
  return _msg;
}
inline void RequiredDataPiece_RegexpCondition::set_allocated_text_filter(::autofill_assistant::TextFilter* text_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_filter_);
  }
  if (text_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_filter));
    if (message_arena != submessage_arena) {
      text_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_filter_ = text_filter;
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.RequiredDataPiece.RegexpCondition.text_filter)
}

// -------------------------------------------------------------------

// RequiredDataPiece

// optional string error_message = 1;
inline bool RequiredDataPiece::_internal_has_error_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequiredDataPiece::has_error_message() const {
  return _internal_has_error_message();
}
inline void RequiredDataPiece::clear_error_message() {
  error_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RequiredDataPiece::error_message() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.RequiredDataPiece.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequiredDataPiece::set_error_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:autofill_assistant.RequiredDataPiece.error_message)
}
inline std::string* RequiredDataPiece::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:autofill_assistant.RequiredDataPiece.error_message)
  return _s;
}
inline const std::string& RequiredDataPiece::_internal_error_message() const {
  return error_message_.Get();
}
inline void RequiredDataPiece::_internal_set_error_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* RequiredDataPiece::_internal_mutable_error_message() {
  _has_bits_[0] |= 0x00000001u;
  return error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* RequiredDataPiece::release_error_message() {
  // @@protoc_insertion_point(field_release:autofill_assistant.RequiredDataPiece.error_message)
  if (!_internal_has_error_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = error_message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault()) {
    error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RequiredDataPiece::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_message_.IsDefault()) {
    error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.RequiredDataPiece.error_message)
}

// optional .autofill_assistant.RequiredDataPiece.Condition condition = 2;
inline bool RequiredDataPiece::_internal_has_condition() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || condition_ != nullptr);
  return value;
}
inline bool RequiredDataPiece::has_condition() const {
  return _internal_has_condition();
}
inline void RequiredDataPiece::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::autofill_assistant::RequiredDataPiece_Condition& RequiredDataPiece::_internal_condition() const {
  const ::autofill_assistant::RequiredDataPiece_Condition* p = condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::autofill_assistant::RequiredDataPiece_Condition&>(
      ::autofill_assistant::_RequiredDataPiece_Condition_default_instance_);
}
inline const ::autofill_assistant::RequiredDataPiece_Condition& RequiredDataPiece::condition() const {
  // @@protoc_insertion_point(field_get:autofill_assistant.RequiredDataPiece.condition)
  return _internal_condition();
}
inline void RequiredDataPiece::unsafe_arena_set_allocated_condition(
    ::autofill_assistant::RequiredDataPiece_Condition* condition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  condition_ = condition;
  if (condition) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill_assistant.RequiredDataPiece.condition)
}
inline ::autofill_assistant::RequiredDataPiece_Condition* RequiredDataPiece::release_condition() {
  _has_bits_[0] &= ~0x00000002u;
  ::autofill_assistant::RequiredDataPiece_Condition* temp = condition_;
  condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autofill_assistant::RequiredDataPiece_Condition* RequiredDataPiece::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:autofill_assistant.RequiredDataPiece.condition)
  _has_bits_[0] &= ~0x00000002u;
  ::autofill_assistant::RequiredDataPiece_Condition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::autofill_assistant::RequiredDataPiece_Condition* RequiredDataPiece::_internal_mutable_condition() {
  _has_bits_[0] |= 0x00000002u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill_assistant::RequiredDataPiece_Condition>(GetArenaForAllocation());
    condition_ = p;
  }
  return condition_;
}
inline ::autofill_assistant::RequiredDataPiece_Condition* RequiredDataPiece::mutable_condition() {
  ::autofill_assistant::RequiredDataPiece_Condition* _msg = _internal_mutable_condition();
  // @@protoc_insertion_point(field_mutable:autofill_assistant.RequiredDataPiece.condition)
  return _msg;
}
inline void RequiredDataPiece::set_allocated_condition(::autofill_assistant::RequiredDataPiece_Condition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(condition);
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.RequiredDataPiece.condition)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace autofill_assistant

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fautofill_5fassistant_2fbrowser_2fcud_5fcondition_2eproto
