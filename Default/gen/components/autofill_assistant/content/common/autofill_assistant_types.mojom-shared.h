// components/autofill_assistant/content/common/autofill_assistant_types.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_AUTOFILL_ASSISTANT_CONTENT_COMMON_AUTOFILL_ASSISTANT_TYPES_MOJOM_SHARED_H_
#define COMPONENTS_AUTOFILL_ASSISTANT_CONTENT_COMMON_AUTOFILL_ASSISTANT_TYPES_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/autofill_assistant/content/common/autofill_assistant_types.mojom-shared-internal.h"







namespace autofill_assistant {
namespace mojom {
class NodeDataDataView;



}  // namespace mojom
}  // namespace autofill_assistant

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::autofill_assistant::mojom::NodeDataDataView> {
  using Data = ::autofill_assistant::mojom::internal::NodeData_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace autofill_assistant {
namespace mojom {


enum class ModelStatus : int32_t {
  
  kSuccess = 0,
  
  kUnexpectedError = 1,
  
  kTimeout = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, ModelStatus value);
inline bool IsKnownEnumValue(ModelStatus value) {
  return internal::ModelStatus_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class NodeDataStatus : int32_t {
  
  kSuccess = 0,
  
  kUnexpectedError = 1,
  
  kInitializationError = 2,
  
  kModelLoadError = 3,
  
  kModelLoadTimeout = 4,
  kMinValue = 0,
  kMaxValue = 4,
};

 std::ostream& operator<<(std::ostream& os, NodeDataStatus value);
inline bool IsKnownEnumValue(NodeDataStatus value) {
  return internal::NodeDataStatus_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


class NodeDataDataView {
 public:
  NodeDataDataView() = default;

  NodeDataDataView(
      internal::NodeData_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t backend_node_id() const {
    return data_->backend_node_id;
  }
 private:
  internal::NodeData_Data* data_ = nullptr;
};



}  // namespace mojom
}  // namespace autofill_assistant

namespace std {

template <>
struct hash<::autofill_assistant::mojom::ModelStatus>
    : public mojo::internal::EnumHashImpl<::autofill_assistant::mojom::ModelStatus> {};

template <>
struct hash<::autofill_assistant::mojom::NodeDataStatus>
    : public mojo::internal::EnumHashImpl<::autofill_assistant::mojom::NodeDataStatus> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill_assistant::mojom::ModelStatus, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::autofill_assistant::mojom::ModelStatus, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::autofill_assistant::mojom::ModelStatus>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill_assistant::mojom::NodeDataStatus, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::autofill_assistant::mojom::NodeDataStatus, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::autofill_assistant::mojom::NodeDataStatus>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill_assistant::mojom::NodeDataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::autofill_assistant::mojom::NodeDataDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::autofill_assistant::mojom::internal::NodeData_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->backend_node_id = Traits::backend_node_id(input);
  }

  static bool Deserialize(::autofill_assistant::mojom::internal::NodeData_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::autofill_assistant::mojom::NodeDataDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace autofill_assistant {
namespace mojom {




}  // namespace mojom
}  // namespace autofill_assistant

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::autofill_assistant::mojom::ModelStatus> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::autofill_assistant::mojom::ModelStatus value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::autofill_assistant::mojom::NodeDataStatus> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::autofill_assistant::mojom::NodeDataStatus value);
};

} // namespace perfetto

#endif  // COMPONENTS_AUTOFILL_ASSISTANT_CONTENT_COMMON_AUTOFILL_ASSISTANT_TYPES_MOJOM_SHARED_H_