// components/autofill_assistant/content/common/autofill_assistant_agent.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_AUTOFILL_ASSISTANT_CONTENT_COMMON_AUTOFILL_ASSISTANT_AGENT_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_AUTOFILL_ASSISTANT_CONTENT_COMMON_AUTOFILL_ASSISTANT_AGENT_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace autofill_assistant {
namespace mojom {
namespace internal {

class ValidationContext;
class  AutofillAssistantAgent_GetSemanticNodes_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t role;
  int32_t objective;
  uint8_t ignore_objective : 1;
  uint8_t pad2_[7];
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> timeout;

 private:
  friend class mojo::internal::MessageFragment<AutofillAssistantAgent_GetSemanticNodes_Params_Data>;

  AutofillAssistantAgent_GetSemanticNodes_Params_Data();
  ~AutofillAssistantAgent_GetSemanticNodes_Params_Data() = delete;
};
static_assert(sizeof(AutofillAssistantAgent_GetSemanticNodes_Params_Data) == 32,
              "Bad sizeof(AutofillAssistantAgent_GetSemanticNodes_Params_Data)");
class  AutofillAssistantAgent_GetSemanticNodes_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::autofill_assistant::mojom::internal::NodeData_Data>>> nodes;

 private:
  friend class mojo::internal::MessageFragment<AutofillAssistantAgent_GetSemanticNodes_ResponseParams_Data>;

  AutofillAssistantAgent_GetSemanticNodes_ResponseParams_Data();
  ~AutofillAssistantAgent_GetSemanticNodes_ResponseParams_Data() = delete;
};
static_assert(sizeof(AutofillAssistantAgent_GetSemanticNodes_ResponseParams_Data) == 24,
              "Bad sizeof(AutofillAssistantAgent_GetSemanticNodes_ResponseParams_Data)");
class  AutofillAssistantAgent_SetElementValue_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t backend_node_id;
  uint8_t send_events : 1;
  uint8_t pad1_[3];
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> value;

 private:
  friend class mojo::internal::MessageFragment<AutofillAssistantAgent_SetElementValue_Params_Data>;

  AutofillAssistantAgent_SetElementValue_Params_Data();
  ~AutofillAssistantAgent_SetElementValue_Params_Data() = delete;
};
static_assert(sizeof(AutofillAssistantAgent_SetElementValue_Params_Data) == 24,
              "Bad sizeof(AutofillAssistantAgent_SetElementValue_Params_Data)");
class  AutofillAssistantAgent_SetElementValue_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<AutofillAssistantAgent_SetElementValue_ResponseParams_Data>;

  AutofillAssistantAgent_SetElementValue_ResponseParams_Data();
  ~AutofillAssistantAgent_SetElementValue_ResponseParams_Data() = delete;
};
static_assert(sizeof(AutofillAssistantAgent_SetElementValue_ResponseParams_Data) == 16,
              "Bad sizeof(AutofillAssistantAgent_SetElementValue_ResponseParams_Data)");
class  AutofillAssistantAgent_SetElementChecked_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t backend_node_id;
  uint8_t checked : 1;
  uint8_t send_events : 1;
  uint8_t padfinal_[3];

 private:
  friend class mojo::internal::MessageFragment<AutofillAssistantAgent_SetElementChecked_Params_Data>;

  AutofillAssistantAgent_SetElementChecked_Params_Data();
  ~AutofillAssistantAgent_SetElementChecked_Params_Data() = delete;
};
static_assert(sizeof(AutofillAssistantAgent_SetElementChecked_Params_Data) == 16,
              "Bad sizeof(AutofillAssistantAgent_SetElementChecked_Params_Data)");
class  AutofillAssistantAgent_SetElementChecked_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<AutofillAssistantAgent_SetElementChecked_ResponseParams_Data>;

  AutofillAssistantAgent_SetElementChecked_ResponseParams_Data();
  ~AutofillAssistantAgent_SetElementChecked_ResponseParams_Data() = delete;
};
static_assert(sizeof(AutofillAssistantAgent_SetElementChecked_ResponseParams_Data) == 16,
              "Bad sizeof(AutofillAssistantAgent_SetElementChecked_ResponseParams_Data)");

}  // namespace internal


class AutofillAssistantAgent_GetSemanticNodes_ParamsDataView {
 public:
  AutofillAssistantAgent_GetSemanticNodes_ParamsDataView() = default;

  AutofillAssistantAgent_GetSemanticNodes_ParamsDataView(
      internal::AutofillAssistantAgent_GetSemanticNodes_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t role() const {
    return data_->role;
  }
  int32_t objective() const {
    return data_->objective;
  }
  bool ignore_objective() const {
    return data_->ignore_objective;
  }
  inline void GetTimeoutDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTimeout(UserType* output) {
    
    auto* pointer = data_->timeout.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, message_);
  }
 private:
  internal::AutofillAssistantAgent_GetSemanticNodes_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AutofillAssistantAgent_GetSemanticNodes_ResponseParamsDataView {
 public:
  AutofillAssistantAgent_GetSemanticNodes_ResponseParamsDataView() = default;

  AutofillAssistantAgent_GetSemanticNodes_ResponseParamsDataView(
      internal::AutofillAssistantAgent_GetSemanticNodes_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::autofill_assistant::mojom::NodeDataStatus>(
        data_value, output);
  }
  ::autofill_assistant::mojom::NodeDataStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::autofill_assistant::mojom::NodeDataStatus>(data_->status));
  }
  inline void GetNodesDataView(
      mojo::ArrayDataView<::autofill_assistant::mojom::NodeDataDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNodes(UserType* output) {
    
    auto* pointer = data_->nodes.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::autofill_assistant::mojom::NodeDataDataView>>(
        pointer, output, message_);
  }
 private:
  internal::AutofillAssistantAgent_GetSemanticNodes_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AutofillAssistantAgent_SetElementValue_ParamsDataView {
 public:
  AutofillAssistantAgent_SetElementValue_ParamsDataView() = default;

  AutofillAssistantAgent_SetElementValue_ParamsDataView(
      internal::AutofillAssistantAgent_SetElementValue_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t backend_node_id() const {
    return data_->backend_node_id;
  }
  inline void GetValueDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadValue(UserType* output) {
    
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  bool send_events() const {
    return data_->send_events;
  }
 private:
  internal::AutofillAssistantAgent_SetElementValue_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AutofillAssistantAgent_SetElementValue_ResponseParamsDataView {
 public:
  AutofillAssistantAgent_SetElementValue_ResponseParamsDataView() = default;

  AutofillAssistantAgent_SetElementValue_ResponseParamsDataView(
      internal::AutofillAssistantAgent_SetElementValue_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::AutofillAssistantAgent_SetElementValue_ResponseParams_Data* data_ = nullptr;
};



class AutofillAssistantAgent_SetElementChecked_ParamsDataView {
 public:
  AutofillAssistantAgent_SetElementChecked_ParamsDataView() = default;

  AutofillAssistantAgent_SetElementChecked_ParamsDataView(
      internal::AutofillAssistantAgent_SetElementChecked_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t backend_node_id() const {
    return data_->backend_node_id;
  }
  bool checked() const {
    return data_->checked;
  }
  bool send_events() const {
    return data_->send_events;
  }
 private:
  internal::AutofillAssistantAgent_SetElementChecked_Params_Data* data_ = nullptr;
};



class AutofillAssistantAgent_SetElementChecked_ResponseParamsDataView {
 public:
  AutofillAssistantAgent_SetElementChecked_ResponseParamsDataView() = default;

  AutofillAssistantAgent_SetElementChecked_ResponseParamsDataView(
      internal::AutofillAssistantAgent_SetElementChecked_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::AutofillAssistantAgent_SetElementChecked_ResponseParams_Data* data_ = nullptr;
};


inline void AutofillAssistantAgent_GetSemanticNodes_ParamsDataView::GetTimeoutDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->timeout.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, message_);
}


inline void AutofillAssistantAgent_GetSemanticNodes_ResponseParamsDataView::GetNodesDataView(
    mojo::ArrayDataView<::autofill_assistant::mojom::NodeDataDataView>* output) {
  auto pointer = data_->nodes.Get();
  *output = mojo::ArrayDataView<::autofill_assistant::mojom::NodeDataDataView>(pointer, message_);
}


inline void AutofillAssistantAgent_SetElementValue_ParamsDataView::GetValueDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->value.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}







}  // namespace mojom
}  // namespace autofill_assistant

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_AUTOFILL_ASSISTANT_CONTENT_COMMON_AUTOFILL_ASSISTANT_AGENT_MOJOM_PARAMS_DATA_H_