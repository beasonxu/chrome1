// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/autofill_assistant/content/common/proto/semantic_feature_overrides.proto

#include "components/autofill_assistant/content/common/proto/semantic_feature_overrides.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace autofill_assistant {
PROTOBUF_CONSTEXPR SparseEncoding::SparseEncoding(
    ::_pbi::ConstantInitialized)
  : feature_concatenation_index_(0)
  , vocabulary_index_(0)
  , number_of_occurrences_(0){}
struct SparseEncodingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SparseEncodingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SparseEncodingDefaultTypeInternal() {}
  union {
    SparseEncoding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SparseEncodingDefaultTypeInternal _SparseEncoding_default_instance_;
PROTOBUF_CONSTEXPR PredictionLabel::PredictionLabel(
    ::_pbi::ConstantInitialized)
  : objective_(0)
  , semantic_role_(0){}
struct PredictionLabelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PredictionLabelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PredictionLabelDefaultTypeInternal() {}
  union {
    PredictionLabel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PredictionLabelDefaultTypeInternal _PredictionLabel_default_instance_;
PROTOBUF_CONSTEXPR VersionedFeatureOverrides_DataPoint::VersionedFeatureOverrides_DataPoint(
    ::_pbi::ConstantInitialized)
  : key_coordinate_()
  , value_(nullptr){}
struct VersionedFeatureOverrides_DataPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionedFeatureOverrides_DataPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionedFeatureOverrides_DataPointDefaultTypeInternal() {}
  union {
    VersionedFeatureOverrides_DataPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionedFeatureOverrides_DataPointDefaultTypeInternal _VersionedFeatureOverrides_DataPoint_default_instance_;
PROTOBUF_CONSTEXPR VersionedFeatureOverrides::VersionedFeatureOverrides(
    ::_pbi::ConstantInitialized)
  : data_point_map_(){}
struct VersionedFeatureOverridesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionedFeatureOverridesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionedFeatureOverridesDefaultTypeInternal() {}
  union {
    VersionedFeatureOverrides _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionedFeatureOverridesDefaultTypeInternal _VersionedFeatureOverrides_default_instance_;
PROTOBUF_CONSTEXPR SemanticSelectorPolicy::SemanticSelectorPolicy(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct SemanticSelectorPolicyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SemanticSelectorPolicyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SemanticSelectorPolicyDefaultTypeInternal() {}
  union {
    SemanticSelectorPolicy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SemanticSelectorPolicyDefaultTypeInternal _SemanticSelectorPolicy_default_instance_;
}  // namespace autofill_assistant
namespace autofill_assistant {

// ===================================================================

class SparseEncoding::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseEncoding>()._has_bits_);
  static void set_has_feature_concatenation_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vocabulary_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_number_of_occurrences(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SparseEncoding::SparseEncoding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.SparseEncoding)
}
SparseEncoding::SparseEncoding(const SparseEncoding& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&feature_concatenation_index_, &from.feature_concatenation_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_occurrences_) -
    reinterpret_cast<char*>(&feature_concatenation_index_)) + sizeof(number_of_occurrences_));
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.SparseEncoding)
}

inline void SparseEncoding::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&feature_concatenation_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&number_of_occurrences_) -
    reinterpret_cast<char*>(&feature_concatenation_index_)) + sizeof(number_of_occurrences_));
}

SparseEncoding::~SparseEncoding() {
  // @@protoc_insertion_point(destructor:autofill_assistant.SparseEncoding)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SparseEncoding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SparseEncoding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SparseEncoding::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.SparseEncoding)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&feature_concatenation_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_occurrences_) -
        reinterpret_cast<char*>(&feature_concatenation_index_)) + sizeof(number_of_occurrences_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SparseEncoding::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 feature_concatenation_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_feature_concatenation_index(&has_bits);
          feature_concatenation_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vocabulary_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_vocabulary_index(&has_bits);
          vocabulary_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 number_of_occurrences = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_number_of_occurrences(&has_bits);
          number_of_occurrences_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SparseEncoding::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.SparseEncoding)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 feature_concatenation_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_feature_concatenation_index(), target);
  }

  // optional int32 vocabulary_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_vocabulary_index(), target);
  }

  // optional int32 number_of_occurrences = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_number_of_occurrences(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.SparseEncoding)
  return target;
}

size_t SparseEncoding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.SparseEncoding)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 feature_concatenation_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_feature_concatenation_index());
    }

    // optional int32 vocabulary_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vocabulary_index());
    }

    // optional int32 number_of_occurrences = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number_of_occurrences());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SparseEncoding::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SparseEncoding*>(
      &from));
}

void SparseEncoding::MergeFrom(const SparseEncoding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.SparseEncoding)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      feature_concatenation_index_ = from.feature_concatenation_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      vocabulary_index_ = from.vocabulary_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      number_of_occurrences_ = from.number_of_occurrences_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SparseEncoding::CopyFrom(const SparseEncoding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.SparseEncoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseEncoding::IsInitialized() const {
  return true;
}

void SparseEncoding::InternalSwap(SparseEncoding* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SparseEncoding, number_of_occurrences_)
      + sizeof(SparseEncoding::number_of_occurrences_)
      - PROTOBUF_FIELD_OFFSET(SparseEncoding, feature_concatenation_index_)>(
          reinterpret_cast<char*>(&feature_concatenation_index_),
          reinterpret_cast<char*>(&other->feature_concatenation_index_));
}

std::string SparseEncoding::GetTypeName() const {
  return "autofill_assistant.SparseEncoding";
}


// ===================================================================

class PredictionLabel::_Internal {
 public:
  using HasBits = decltype(std::declval<PredictionLabel>()._has_bits_);
  static void set_has_objective(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_semantic_role(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PredictionLabel::PredictionLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.PredictionLabel)
}
PredictionLabel::PredictionLabel(const PredictionLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&objective_, &from.objective_,
    static_cast<size_t>(reinterpret_cast<char*>(&semantic_role_) -
    reinterpret_cast<char*>(&objective_)) + sizeof(semantic_role_));
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.PredictionLabel)
}

inline void PredictionLabel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&objective_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&semantic_role_) -
    reinterpret_cast<char*>(&objective_)) + sizeof(semantic_role_));
}

PredictionLabel::~PredictionLabel() {
  // @@protoc_insertion_point(destructor:autofill_assistant.PredictionLabel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PredictionLabel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PredictionLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PredictionLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.PredictionLabel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&objective_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&semantic_role_) -
        reinterpret_cast<char*>(&objective_)) + sizeof(semantic_role_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PredictionLabel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 objective = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_objective(&has_bits);
          objective_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 semantic_role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_semantic_role(&has_bits);
          semantic_role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PredictionLabel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.PredictionLabel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 objective = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_objective(), target);
  }

  // optional int32 semantic_role = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_semantic_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.PredictionLabel)
  return target;
}

size_t PredictionLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.PredictionLabel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 objective = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objective());
    }

    // optional int32 semantic_role = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_semantic_role());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictionLabel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PredictionLabel*>(
      &from));
}

void PredictionLabel::MergeFrom(const PredictionLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.PredictionLabel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      objective_ = from.objective_;
    }
    if (cached_has_bits & 0x00000002u) {
      semantic_role_ = from.semantic_role_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PredictionLabel::CopyFrom(const PredictionLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.PredictionLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionLabel::IsInitialized() const {
  return true;
}

void PredictionLabel::InternalSwap(PredictionLabel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PredictionLabel, semantic_role_)
      + sizeof(PredictionLabel::semantic_role_)
      - PROTOBUF_FIELD_OFFSET(PredictionLabel, objective_)>(
          reinterpret_cast<char*>(&objective_),
          reinterpret_cast<char*>(&other->objective_));
}

std::string PredictionLabel::GetTypeName() const {
  return "autofill_assistant.PredictionLabel";
}


// ===================================================================

class VersionedFeatureOverrides_DataPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<VersionedFeatureOverrides_DataPoint>()._has_bits_);
  static const ::autofill_assistant::PredictionLabel& value(const VersionedFeatureOverrides_DataPoint* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill_assistant::PredictionLabel&
VersionedFeatureOverrides_DataPoint::_Internal::value(const VersionedFeatureOverrides_DataPoint* msg) {
  return *msg->value_;
}
VersionedFeatureOverrides_DataPoint::VersionedFeatureOverrides_DataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  key_coordinate_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.VersionedFeatureOverrides.DataPoint)
}
VersionedFeatureOverrides_DataPoint::VersionedFeatureOverrides_DataPoint(const VersionedFeatureOverrides_DataPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      key_coordinate_(from.key_coordinate_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::autofill_assistant::PredictionLabel(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.VersionedFeatureOverrides.DataPoint)
}

inline void VersionedFeatureOverrides_DataPoint::SharedCtor() {
value_ = nullptr;
}

VersionedFeatureOverrides_DataPoint::~VersionedFeatureOverrides_DataPoint() {
  // @@protoc_insertion_point(destructor:autofill_assistant.VersionedFeatureOverrides.DataPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VersionedFeatureOverrides_DataPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void VersionedFeatureOverrides_DataPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VersionedFeatureOverrides_DataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.VersionedFeatureOverrides.DataPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_coordinate_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(value_ != nullptr);
    value_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VersionedFeatureOverrides_DataPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .autofill_assistant.SparseEncoding key_coordinate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_key_coordinate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .autofill_assistant.PredictionLabel value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VersionedFeatureOverrides_DataPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.VersionedFeatureOverrides.DataPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autofill_assistant.SparseEncoding key_coordinate = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_key_coordinate_size()); i < n; i++) {
    const auto& repfield = this->_internal_key_coordinate(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.PredictionLabel value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.VersionedFeatureOverrides.DataPoint)
  return target;
}

size_t VersionedFeatureOverrides_DataPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.VersionedFeatureOverrides.DataPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autofill_assistant.SparseEncoding key_coordinate = 1;
  total_size += 1UL * this->_internal_key_coordinate_size();
  for (const auto& msg : this->key_coordinate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .autofill_assistant.PredictionLabel value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionedFeatureOverrides_DataPoint::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VersionedFeatureOverrides_DataPoint*>(
      &from));
}

void VersionedFeatureOverrides_DataPoint::MergeFrom(const VersionedFeatureOverrides_DataPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.VersionedFeatureOverrides.DataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  key_coordinate_.MergeFrom(from.key_coordinate_);
  if (from._internal_has_value()) {
    _internal_mutable_value()->::autofill_assistant::PredictionLabel::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VersionedFeatureOverrides_DataPoint::CopyFrom(const VersionedFeatureOverrides_DataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.VersionedFeatureOverrides.DataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionedFeatureOverrides_DataPoint::IsInitialized() const {
  return true;
}

void VersionedFeatureOverrides_DataPoint::InternalSwap(VersionedFeatureOverrides_DataPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_coordinate_.InternalSwap(&other->key_coordinate_);
  swap(value_, other->value_);
}

std::string VersionedFeatureOverrides_DataPoint::GetTypeName() const {
  return "autofill_assistant.VersionedFeatureOverrides.DataPoint";
}


// ===================================================================

class VersionedFeatureOverrides::_Internal {
 public:
};

VersionedFeatureOverrides::VersionedFeatureOverrides(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  data_point_map_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.VersionedFeatureOverrides)
}
VersionedFeatureOverrides::VersionedFeatureOverrides(const VersionedFeatureOverrides& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      data_point_map_(from.data_point_map_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.VersionedFeatureOverrides)
}

inline void VersionedFeatureOverrides::SharedCtor() {
}

VersionedFeatureOverrides::~VersionedFeatureOverrides() {
  // @@protoc_insertion_point(destructor:autofill_assistant.VersionedFeatureOverrides)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VersionedFeatureOverrides::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VersionedFeatureOverrides::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VersionedFeatureOverrides::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.VersionedFeatureOverrides)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_point_map_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VersionedFeatureOverrides::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .autofill_assistant.VersionedFeatureOverrides.DataPoint data_point_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_point_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VersionedFeatureOverrides::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.VersionedFeatureOverrides)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autofill_assistant.VersionedFeatureOverrides.DataPoint data_point_map = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_point_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_point_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.VersionedFeatureOverrides)
  return target;
}

size_t VersionedFeatureOverrides::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.VersionedFeatureOverrides)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autofill_assistant.VersionedFeatureOverrides.DataPoint data_point_map = 1;
  total_size += 1UL * this->_internal_data_point_map_size();
  for (const auto& msg : this->data_point_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionedFeatureOverrides::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VersionedFeatureOverrides*>(
      &from));
}

void VersionedFeatureOverrides::MergeFrom(const VersionedFeatureOverrides& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.VersionedFeatureOverrides)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_point_map_.MergeFrom(from.data_point_map_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VersionedFeatureOverrides::CopyFrom(const VersionedFeatureOverrides& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.VersionedFeatureOverrides)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionedFeatureOverrides::IsInitialized() const {
  return true;
}

void VersionedFeatureOverrides::InternalSwap(VersionedFeatureOverrides* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_point_map_.InternalSwap(&other->data_point_map_);
}

std::string VersionedFeatureOverrides::GetTypeName() const {
  return "autofill_assistant.VersionedFeatureOverrides";
}


// ===================================================================

class SemanticSelectorPolicy::_Internal {
 public:
  static const ::autofill_assistant::VersionedFeatureOverrides& bag_of_words(const SemanticSelectorPolicy* msg);
};

const ::autofill_assistant::VersionedFeatureOverrides&
SemanticSelectorPolicy::_Internal::bag_of_words(const SemanticSelectorPolicy* msg) {
  return *msg->feature_overrides_.bag_of_words_;
}
void SemanticSelectorPolicy::set_allocated_bag_of_words(::autofill_assistant::VersionedFeatureOverrides* bag_of_words) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_feature_overrides();
  if (bag_of_words) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bag_of_words);
    if (message_arena != submessage_arena) {
      bag_of_words = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bag_of_words, submessage_arena);
    }
    set_has_bag_of_words();
    feature_overrides_.bag_of_words_ = bag_of_words;
  }
  // @@protoc_insertion_point(field_set_allocated:autofill_assistant.SemanticSelectorPolicy.bag_of_words)
}
SemanticSelectorPolicy::SemanticSelectorPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.SemanticSelectorPolicy)
}
SemanticSelectorPolicy::SemanticSelectorPolicy(const SemanticSelectorPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_feature_overrides();
  switch (from.feature_overrides_case()) {
    case kBagOfWords: {
      _internal_mutable_bag_of_words()->::autofill_assistant::VersionedFeatureOverrides::MergeFrom(from._internal_bag_of_words());
      break;
    }
    case FEATURE_OVERRIDES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.SemanticSelectorPolicy)
}

inline void SemanticSelectorPolicy::SharedCtor() {
clear_has_feature_overrides();
}

SemanticSelectorPolicy::~SemanticSelectorPolicy() {
  // @@protoc_insertion_point(destructor:autofill_assistant.SemanticSelectorPolicy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SemanticSelectorPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_feature_overrides()) {
    clear_feature_overrides();
  }
}

void SemanticSelectorPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SemanticSelectorPolicy::clear_feature_overrides() {
// @@protoc_insertion_point(one_of_clear_start:autofill_assistant.SemanticSelectorPolicy)
  switch (feature_overrides_case()) {
    case kBagOfWords: {
      if (GetArenaForAllocation() == nullptr) {
        delete feature_overrides_.bag_of_words_;
      }
      break;
    }
    case FEATURE_OVERRIDES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FEATURE_OVERRIDES_NOT_SET;
}


void SemanticSelectorPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.SemanticSelectorPolicy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_feature_overrides();
  _internal_metadata_.Clear<std::string>();
}

const char* SemanticSelectorPolicy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autofill_assistant.VersionedFeatureOverrides bag_of_words = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bag_of_words(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SemanticSelectorPolicy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.SemanticSelectorPolicy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autofill_assistant.VersionedFeatureOverrides bag_of_words = 1;
  if (_internal_has_bag_of_words()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bag_of_words(this),
        _Internal::bag_of_words(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.SemanticSelectorPolicy)
  return target;
}

size_t SemanticSelectorPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.SemanticSelectorPolicy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (feature_overrides_case()) {
    // .autofill_assistant.VersionedFeatureOverrides bag_of_words = 1;
    case kBagOfWords: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_overrides_.bag_of_words_);
      break;
    }
    case FEATURE_OVERRIDES_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SemanticSelectorPolicy::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SemanticSelectorPolicy*>(
      &from));
}

void SemanticSelectorPolicy::MergeFrom(const SemanticSelectorPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.SemanticSelectorPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.feature_overrides_case()) {
    case kBagOfWords: {
      _internal_mutable_bag_of_words()->::autofill_assistant::VersionedFeatureOverrides::MergeFrom(from._internal_bag_of_words());
      break;
    }
    case FEATURE_OVERRIDES_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SemanticSelectorPolicy::CopyFrom(const SemanticSelectorPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.SemanticSelectorPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SemanticSelectorPolicy::IsInitialized() const {
  return true;
}

void SemanticSelectorPolicy::InternalSwap(SemanticSelectorPolicy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(feature_overrides_, other->feature_overrides_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string SemanticSelectorPolicy::GetTypeName() const {
  return "autofill_assistant.SemanticSelectorPolicy";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace autofill_assistant
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autofill_assistant::SparseEncoding*
Arena::CreateMaybeMessage< ::autofill_assistant::SparseEncoding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::SparseEncoding >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::PredictionLabel*
Arena::CreateMaybeMessage< ::autofill_assistant::PredictionLabel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::PredictionLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::VersionedFeatureOverrides_DataPoint*
Arena::CreateMaybeMessage< ::autofill_assistant::VersionedFeatureOverrides_DataPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::VersionedFeatureOverrides_DataPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::VersionedFeatureOverrides*
Arena::CreateMaybeMessage< ::autofill_assistant::VersionedFeatureOverrides >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::VersionedFeatureOverrides >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::SemanticSelectorPolicy*
Arena::CreateMaybeMessage< ::autofill_assistant::SemanticSelectorPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::SemanticSelectorPolicy >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
