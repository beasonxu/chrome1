// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_metadata.proto

#include "model_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace autofill_assistant {
PROTOBUF_CONSTEXPR ModelMetadata_TagMetadata::ModelMetadata_TagMetadata(
    ::_pbi::ConstantInitialized)
  : vocabulary_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ModelMetadata_TagMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelMetadata_TagMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelMetadata_TagMetadataDefaultTypeInternal() {}
  union {
    ModelMetadata_TagMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelMetadata_TagMetadataDefaultTypeInternal _ModelMetadata_TagMetadata_default_instance_;
PROTOBUF_CONSTEXPR ModelMetadata_TypeMetadata::ModelMetadata_TypeMetadata(
    ::_pbi::ConstantInitialized)
  : vocabulary_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ModelMetadata_TypeMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelMetadata_TypeMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelMetadata_TypeMetadataDefaultTypeInternal() {}
  union {
    ModelMetadata_TypeMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelMetadata_TypeMetadataDefaultTypeInternal _ModelMetadata_TypeMetadata_default_instance_;
PROTOBUF_CONSTEXPR ModelMetadata_TextMetadata::ModelMetadata_TextMetadata(
    ::_pbi::ConstantInitialized)
  : vocabulary_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , regex_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ModelMetadata_TextMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelMetadata_TextMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelMetadata_TextMetadataDefaultTypeInternal() {}
  union {
    ModelMetadata_TextMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelMetadata_TextMetadataDefaultTypeInternal _ModelMetadata_TextMetadata_default_instance_;
PROTOBUF_CONSTEXPR ModelMetadata_InputMetadata::ModelMetadata_InputMetadata(
    ::_pbi::ConstantInitialized)
  : tag_(nullptr)
  , type_(nullptr)
  , text_(nullptr){}
struct ModelMetadata_InputMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelMetadata_InputMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelMetadata_InputMetadataDefaultTypeInternal() {}
  union {
    ModelMetadata_InputMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelMetadata_InputMetadataDefaultTypeInternal _ModelMetadata_InputMetadata_default_instance_;
PROTOBUF_CONSTEXPR ModelMetadata_SemanticRoleMetadata::ModelMetadata_SemanticRoleMetadata(
    ::_pbi::ConstantInitialized)
  : classes_()
  , _classes_cached_byte_size_(0)
  , objective_block_index_()
  , _objective_block_index_cached_byte_size_(0){}
struct ModelMetadata_SemanticRoleMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelMetadata_SemanticRoleMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelMetadata_SemanticRoleMetadataDefaultTypeInternal() {}
  union {
    ModelMetadata_SemanticRoleMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelMetadata_SemanticRoleMetadataDefaultTypeInternal _ModelMetadata_SemanticRoleMetadata_default_instance_;
PROTOBUF_CONSTEXPR ModelMetadata_ObjectiveMetadata::ModelMetadata_ObjectiveMetadata(
    ::_pbi::ConstantInitialized)
  : classes_()
  , _classes_cached_byte_size_(0)
  , blocks_()
  , _blocks_cached_byte_size_(0){}
struct ModelMetadata_ObjectiveMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelMetadata_ObjectiveMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelMetadata_ObjectiveMetadataDefaultTypeInternal() {}
  union {
    ModelMetadata_ObjectiveMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelMetadata_ObjectiveMetadataDefaultTypeInternal _ModelMetadata_ObjectiveMetadata_default_instance_;
PROTOBUF_CONSTEXPR ModelMetadata_OutputMetadata::ModelMetadata_OutputMetadata(
    ::_pbi::ConstantInitialized)
  : semantic_role_(nullptr)
  , objective_(nullptr){}
struct ModelMetadata_OutputMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelMetadata_OutputMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelMetadata_OutputMetadataDefaultTypeInternal() {}
  union {
    ModelMetadata_OutputMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelMetadata_OutputMetadataDefaultTypeInternal _ModelMetadata_OutputMetadata_default_instance_;
PROTOBUF_CONSTEXPR ModelMetadata::ModelMetadata(
    ::_pbi::ConstantInitialized)
  : input_(nullptr)
  , output_(nullptr){}
struct ModelMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelMetadataDefaultTypeInternal() {}
  union {
    ModelMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelMetadataDefaultTypeInternal _ModelMetadata_default_instance_;
}  // namespace autofill_assistant
namespace autofill_assistant {

// ===================================================================

class ModelMetadata_TagMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelMetadata_TagMetadata>()._has_bits_);
  static void set_has_vocabulary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ModelMetadata_TagMetadata::ModelMetadata_TagMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.ModelMetadata.TagMetadata)
}
ModelMetadata_TagMetadata::ModelMetadata_TagMetadata(const ModelMetadata_TagMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  vocabulary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vocabulary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_vocabulary()) {
    vocabulary_.Set(from._internal_vocabulary(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.ModelMetadata.TagMetadata)
}

inline void ModelMetadata_TagMetadata::SharedCtor() {
vocabulary_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vocabulary_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelMetadata_TagMetadata::~ModelMetadata_TagMetadata() {
  // @@protoc_insertion_point(destructor:autofill_assistant.ModelMetadata.TagMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelMetadata_TagMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vocabulary_.Destroy();
}

void ModelMetadata_TagMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelMetadata_TagMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.ModelMetadata.TagMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    vocabulary_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ModelMetadata_TagMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string vocabulary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vocabulary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelMetadata_TagMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.ModelMetadata.TagMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vocabulary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vocabulary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.ModelMetadata.TagMetadata)
  return target;
}

size_t ModelMetadata_TagMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.ModelMetadata.TagMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string vocabulary = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vocabulary());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelMetadata_TagMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ModelMetadata_TagMetadata*>(
      &from));
}

void ModelMetadata_TagMetadata::MergeFrom(const ModelMetadata_TagMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.ModelMetadata.TagMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vocabulary()) {
    _internal_set_vocabulary(from._internal_vocabulary());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ModelMetadata_TagMetadata::CopyFrom(const ModelMetadata_TagMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.ModelMetadata.TagMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelMetadata_TagMetadata::IsInitialized() const {
  return true;
}

void ModelMetadata_TagMetadata::InternalSwap(ModelMetadata_TagMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &vocabulary_, lhs_arena,
      &other->vocabulary_, rhs_arena
  );
}

std::string ModelMetadata_TagMetadata::GetTypeName() const {
  return "autofill_assistant.ModelMetadata.TagMetadata";
}


// ===================================================================

class ModelMetadata_TypeMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelMetadata_TypeMetadata>()._has_bits_);
  static void set_has_vocabulary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ModelMetadata_TypeMetadata::ModelMetadata_TypeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.ModelMetadata.TypeMetadata)
}
ModelMetadata_TypeMetadata::ModelMetadata_TypeMetadata(const ModelMetadata_TypeMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  vocabulary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vocabulary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_vocabulary()) {
    vocabulary_.Set(from._internal_vocabulary(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.ModelMetadata.TypeMetadata)
}

inline void ModelMetadata_TypeMetadata::SharedCtor() {
vocabulary_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vocabulary_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelMetadata_TypeMetadata::~ModelMetadata_TypeMetadata() {
  // @@protoc_insertion_point(destructor:autofill_assistant.ModelMetadata.TypeMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelMetadata_TypeMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vocabulary_.Destroy();
}

void ModelMetadata_TypeMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelMetadata_TypeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.ModelMetadata.TypeMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    vocabulary_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ModelMetadata_TypeMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string vocabulary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vocabulary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelMetadata_TypeMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.ModelMetadata.TypeMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vocabulary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vocabulary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.ModelMetadata.TypeMetadata)
  return target;
}

size_t ModelMetadata_TypeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.ModelMetadata.TypeMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string vocabulary = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vocabulary());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelMetadata_TypeMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ModelMetadata_TypeMetadata*>(
      &from));
}

void ModelMetadata_TypeMetadata::MergeFrom(const ModelMetadata_TypeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.ModelMetadata.TypeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vocabulary()) {
    _internal_set_vocabulary(from._internal_vocabulary());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ModelMetadata_TypeMetadata::CopyFrom(const ModelMetadata_TypeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.ModelMetadata.TypeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelMetadata_TypeMetadata::IsInitialized() const {
  return true;
}

void ModelMetadata_TypeMetadata::InternalSwap(ModelMetadata_TypeMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &vocabulary_, lhs_arena,
      &other->vocabulary_, rhs_arena
  );
}

std::string ModelMetadata_TypeMetadata::GetTypeName() const {
  return "autofill_assistant.ModelMetadata.TypeMetadata";
}


// ===================================================================

class ModelMetadata_TextMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelMetadata_TextMetadata>()._has_bits_);
  static void set_has_vocabulary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_regex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ModelMetadata_TextMetadata::ModelMetadata_TextMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.ModelMetadata.TextMetadata)
}
ModelMetadata_TextMetadata::ModelMetadata_TextMetadata(const ModelMetadata_TextMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  vocabulary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vocabulary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_vocabulary()) {
    vocabulary_.Set(from._internal_vocabulary(), 
      GetArenaForAllocation());
  }
  regex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    regex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_regex()) {
    regex_.Set(from._internal_regex(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.ModelMetadata.TextMetadata)
}

inline void ModelMetadata_TextMetadata::SharedCtor() {
vocabulary_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vocabulary_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
regex_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  regex_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelMetadata_TextMetadata::~ModelMetadata_TextMetadata() {
  // @@protoc_insertion_point(destructor:autofill_assistant.ModelMetadata.TextMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelMetadata_TextMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vocabulary_.Destroy();
  regex_.Destroy();
}

void ModelMetadata_TextMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelMetadata_TextMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.ModelMetadata.TextMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      vocabulary_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      regex_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ModelMetadata_TextMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string vocabulary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vocabulary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string regex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_regex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelMetadata_TextMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.ModelMetadata.TextMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vocabulary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vocabulary(), target);
  }

  // optional string regex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_regex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.ModelMetadata.TextMetadata)
  return target;
}

size_t ModelMetadata_TextMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.ModelMetadata.TextMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string vocabulary = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vocabulary());
    }

    // optional string regex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_regex());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelMetadata_TextMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ModelMetadata_TextMetadata*>(
      &from));
}

void ModelMetadata_TextMetadata::MergeFrom(const ModelMetadata_TextMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.ModelMetadata.TextMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_vocabulary(from._internal_vocabulary());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_regex(from._internal_regex());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ModelMetadata_TextMetadata::CopyFrom(const ModelMetadata_TextMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.ModelMetadata.TextMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelMetadata_TextMetadata::IsInitialized() const {
  return true;
}

void ModelMetadata_TextMetadata::InternalSwap(ModelMetadata_TextMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &vocabulary_, lhs_arena,
      &other->vocabulary_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &regex_, lhs_arena,
      &other->regex_, rhs_arena
  );
}

std::string ModelMetadata_TextMetadata::GetTypeName() const {
  return "autofill_assistant.ModelMetadata.TextMetadata";
}


// ===================================================================

class ModelMetadata_InputMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelMetadata_InputMetadata>()._has_bits_);
  static const ::autofill_assistant::ModelMetadata_TagMetadata& tag(const ModelMetadata_InputMetadata* msg);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::autofill_assistant::ModelMetadata_TypeMetadata& type(const ModelMetadata_InputMetadata* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::autofill_assistant::ModelMetadata_TextMetadata& text(const ModelMetadata_InputMetadata* msg);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::autofill_assistant::ModelMetadata_TagMetadata&
ModelMetadata_InputMetadata::_Internal::tag(const ModelMetadata_InputMetadata* msg) {
  return *msg->tag_;
}
const ::autofill_assistant::ModelMetadata_TypeMetadata&
ModelMetadata_InputMetadata::_Internal::type(const ModelMetadata_InputMetadata* msg) {
  return *msg->type_;
}
const ::autofill_assistant::ModelMetadata_TextMetadata&
ModelMetadata_InputMetadata::_Internal::text(const ModelMetadata_InputMetadata* msg) {
  return *msg->text_;
}
ModelMetadata_InputMetadata::ModelMetadata_InputMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.ModelMetadata.InputMetadata)
}
ModelMetadata_InputMetadata::ModelMetadata_InputMetadata(const ModelMetadata_InputMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_tag()) {
    tag_ = new ::autofill_assistant::ModelMetadata_TagMetadata(*from.tag_);
  } else {
    tag_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::autofill_assistant::ModelMetadata_TypeMetadata(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_text()) {
    text_ = new ::autofill_assistant::ModelMetadata_TextMetadata(*from.text_);
  } else {
    text_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.ModelMetadata.InputMetadata)
}

inline void ModelMetadata_InputMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tag_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&text_) -
    reinterpret_cast<char*>(&tag_)) + sizeof(text_));
}

ModelMetadata_InputMetadata::~ModelMetadata_InputMetadata() {
  // @@protoc_insertion_point(destructor:autofill_assistant.ModelMetadata.InputMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelMetadata_InputMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tag_;
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete text_;
}

void ModelMetadata_InputMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelMetadata_InputMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.ModelMetadata.InputMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tag_ != nullptr);
      tag_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(text_ != nullptr);
      text_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ModelMetadata_InputMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ModelMetadata.TagMetadata tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill_assistant.ModelMetadata.TypeMetadata type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill_assistant.ModelMetadata.TextMetadata text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelMetadata_InputMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.ModelMetadata.InputMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ModelMetadata.TagMetadata tag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tag(this),
        _Internal::tag(this).GetCachedSize(), target, stream);
  }

  // optional .autofill_assistant.ModelMetadata.TypeMetadata type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  // optional .autofill_assistant.ModelMetadata.TextMetadata text = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::text(this),
        _Internal::text(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.ModelMetadata.InputMetadata)
  return target;
}

size_t ModelMetadata_InputMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.ModelMetadata.InputMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .autofill_assistant.ModelMetadata.TagMetadata tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tag_);
    }

    // optional .autofill_assistant.ModelMetadata.TypeMetadata type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

    // optional .autofill_assistant.ModelMetadata.TextMetadata text = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelMetadata_InputMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ModelMetadata_InputMetadata*>(
      &from));
}

void ModelMetadata_InputMetadata::MergeFrom(const ModelMetadata_InputMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.ModelMetadata.InputMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tag()->::autofill_assistant::ModelMetadata_TagMetadata::MergeFrom(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_type()->::autofill_assistant::ModelMetadata_TypeMetadata::MergeFrom(from._internal_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_text()->::autofill_assistant::ModelMetadata_TextMetadata::MergeFrom(from._internal_text());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ModelMetadata_InputMetadata::CopyFrom(const ModelMetadata_InputMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.ModelMetadata.InputMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelMetadata_InputMetadata::IsInitialized() const {
  return true;
}

void ModelMetadata_InputMetadata::InternalSwap(ModelMetadata_InputMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelMetadata_InputMetadata, text_)
      + sizeof(ModelMetadata_InputMetadata::text_)
      - PROTOBUF_FIELD_OFFSET(ModelMetadata_InputMetadata, tag_)>(
          reinterpret_cast<char*>(&tag_),
          reinterpret_cast<char*>(&other->tag_));
}

std::string ModelMetadata_InputMetadata::GetTypeName() const {
  return "autofill_assistant.ModelMetadata.InputMetadata";
}


// ===================================================================

class ModelMetadata_SemanticRoleMetadata::_Internal {
 public:
};

ModelMetadata_SemanticRoleMetadata::ModelMetadata_SemanticRoleMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  classes_(arena),
  objective_block_index_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.ModelMetadata.SemanticRoleMetadata)
}
ModelMetadata_SemanticRoleMetadata::ModelMetadata_SemanticRoleMetadata(const ModelMetadata_SemanticRoleMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      classes_(from.classes_),
      objective_block_index_(from.objective_block_index_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.ModelMetadata.SemanticRoleMetadata)
}

inline void ModelMetadata_SemanticRoleMetadata::SharedCtor() {
}

ModelMetadata_SemanticRoleMetadata::~ModelMetadata_SemanticRoleMetadata() {
  // @@protoc_insertion_point(destructor:autofill_assistant.ModelMetadata.SemanticRoleMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelMetadata_SemanticRoleMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModelMetadata_SemanticRoleMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelMetadata_SemanticRoleMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.ModelMetadata.SemanticRoleMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classes_.Clear();
  objective_block_index_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ModelMetadata_SemanticRoleMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 classes = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_classes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_classes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 objective_block_index = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_objective_block_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_objective_block_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelMetadata_SemanticRoleMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.ModelMetadata.SemanticRoleMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 classes = 1 [packed = true];
  {
    int byte_size = _classes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_classes(), byte_size, target);
    }
  }

  // repeated int32 objective_block_index = 2 [packed = true];
  {
    int byte_size = _objective_block_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_objective_block_index(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.ModelMetadata.SemanticRoleMetadata)
  return target;
}

size_t ModelMetadata_SemanticRoleMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.ModelMetadata.SemanticRoleMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 classes = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->classes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _classes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 objective_block_index = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->objective_block_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _objective_block_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelMetadata_SemanticRoleMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ModelMetadata_SemanticRoleMetadata*>(
      &from));
}

void ModelMetadata_SemanticRoleMetadata::MergeFrom(const ModelMetadata_SemanticRoleMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.ModelMetadata.SemanticRoleMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  classes_.MergeFrom(from.classes_);
  objective_block_index_.MergeFrom(from.objective_block_index_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ModelMetadata_SemanticRoleMetadata::CopyFrom(const ModelMetadata_SemanticRoleMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.ModelMetadata.SemanticRoleMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelMetadata_SemanticRoleMetadata::IsInitialized() const {
  return true;
}

void ModelMetadata_SemanticRoleMetadata::InternalSwap(ModelMetadata_SemanticRoleMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  classes_.InternalSwap(&other->classes_);
  objective_block_index_.InternalSwap(&other->objective_block_index_);
}

std::string ModelMetadata_SemanticRoleMetadata::GetTypeName() const {
  return "autofill_assistant.ModelMetadata.SemanticRoleMetadata";
}


// ===================================================================

class ModelMetadata_ObjectiveMetadata::_Internal {
 public:
};

ModelMetadata_ObjectiveMetadata::ModelMetadata_ObjectiveMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  classes_(arena),
  blocks_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.ModelMetadata.ObjectiveMetadata)
}
ModelMetadata_ObjectiveMetadata::ModelMetadata_ObjectiveMetadata(const ModelMetadata_ObjectiveMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      classes_(from.classes_),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.ModelMetadata.ObjectiveMetadata)
}

inline void ModelMetadata_ObjectiveMetadata::SharedCtor() {
}

ModelMetadata_ObjectiveMetadata::~ModelMetadata_ObjectiveMetadata() {
  // @@protoc_insertion_point(destructor:autofill_assistant.ModelMetadata.ObjectiveMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelMetadata_ObjectiveMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModelMetadata_ObjectiveMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelMetadata_ObjectiveMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.ModelMetadata.ObjectiveMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classes_.Clear();
  blocks_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ModelMetadata_ObjectiveMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 classes = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_classes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_classes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 blocks = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_blocks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_blocks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelMetadata_ObjectiveMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.ModelMetadata.ObjectiveMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 classes = 1 [packed = true];
  {
    int byte_size = _classes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_classes(), byte_size, target);
    }
  }

  // repeated int32 blocks = 2 [packed = true];
  {
    int byte_size = _blocks_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_blocks(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.ModelMetadata.ObjectiveMetadata)
  return target;
}

size_t ModelMetadata_ObjectiveMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.ModelMetadata.ObjectiveMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 classes = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->classes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _classes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 blocks = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->blocks_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _blocks_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelMetadata_ObjectiveMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ModelMetadata_ObjectiveMetadata*>(
      &from));
}

void ModelMetadata_ObjectiveMetadata::MergeFrom(const ModelMetadata_ObjectiveMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.ModelMetadata.ObjectiveMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  classes_.MergeFrom(from.classes_);
  blocks_.MergeFrom(from.blocks_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ModelMetadata_ObjectiveMetadata::CopyFrom(const ModelMetadata_ObjectiveMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.ModelMetadata.ObjectiveMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelMetadata_ObjectiveMetadata::IsInitialized() const {
  return true;
}

void ModelMetadata_ObjectiveMetadata::InternalSwap(ModelMetadata_ObjectiveMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  classes_.InternalSwap(&other->classes_);
  blocks_.InternalSwap(&other->blocks_);
}

std::string ModelMetadata_ObjectiveMetadata::GetTypeName() const {
  return "autofill_assistant.ModelMetadata.ObjectiveMetadata";
}


// ===================================================================

class ModelMetadata_OutputMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelMetadata_OutputMetadata>()._has_bits_);
  static const ::autofill_assistant::ModelMetadata_SemanticRoleMetadata& semantic_role(const ModelMetadata_OutputMetadata* msg);
  static void set_has_semantic_role(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::autofill_assistant::ModelMetadata_ObjectiveMetadata& objective(const ModelMetadata_OutputMetadata* msg);
  static void set_has_objective(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::autofill_assistant::ModelMetadata_SemanticRoleMetadata&
ModelMetadata_OutputMetadata::_Internal::semantic_role(const ModelMetadata_OutputMetadata* msg) {
  return *msg->semantic_role_;
}
const ::autofill_assistant::ModelMetadata_ObjectiveMetadata&
ModelMetadata_OutputMetadata::_Internal::objective(const ModelMetadata_OutputMetadata* msg) {
  return *msg->objective_;
}
ModelMetadata_OutputMetadata::ModelMetadata_OutputMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.ModelMetadata.OutputMetadata)
}
ModelMetadata_OutputMetadata::ModelMetadata_OutputMetadata(const ModelMetadata_OutputMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_semantic_role()) {
    semantic_role_ = new ::autofill_assistant::ModelMetadata_SemanticRoleMetadata(*from.semantic_role_);
  } else {
    semantic_role_ = nullptr;
  }
  if (from._internal_has_objective()) {
    objective_ = new ::autofill_assistant::ModelMetadata_ObjectiveMetadata(*from.objective_);
  } else {
    objective_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.ModelMetadata.OutputMetadata)
}

inline void ModelMetadata_OutputMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&semantic_role_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&objective_) -
    reinterpret_cast<char*>(&semantic_role_)) + sizeof(objective_));
}

ModelMetadata_OutputMetadata::~ModelMetadata_OutputMetadata() {
  // @@protoc_insertion_point(destructor:autofill_assistant.ModelMetadata.OutputMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelMetadata_OutputMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete semantic_role_;
  if (this != internal_default_instance()) delete objective_;
}

void ModelMetadata_OutputMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelMetadata_OutputMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.ModelMetadata.OutputMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(semantic_role_ != nullptr);
      semantic_role_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(objective_ != nullptr);
      objective_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ModelMetadata_OutputMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ModelMetadata.SemanticRoleMetadata semantic_role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_semantic_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill_assistant.ModelMetadata.ObjectiveMetadata objective = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_objective(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelMetadata_OutputMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.ModelMetadata.OutputMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ModelMetadata.SemanticRoleMetadata semantic_role = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::semantic_role(this),
        _Internal::semantic_role(this).GetCachedSize(), target, stream);
  }

  // optional .autofill_assistant.ModelMetadata.ObjectiveMetadata objective = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::objective(this),
        _Internal::objective(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.ModelMetadata.OutputMetadata)
  return target;
}

size_t ModelMetadata_OutputMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.ModelMetadata.OutputMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .autofill_assistant.ModelMetadata.SemanticRoleMetadata semantic_role = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *semantic_role_);
    }

    // optional .autofill_assistant.ModelMetadata.ObjectiveMetadata objective = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *objective_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelMetadata_OutputMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ModelMetadata_OutputMetadata*>(
      &from));
}

void ModelMetadata_OutputMetadata::MergeFrom(const ModelMetadata_OutputMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.ModelMetadata.OutputMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_semantic_role()->::autofill_assistant::ModelMetadata_SemanticRoleMetadata::MergeFrom(from._internal_semantic_role());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_objective()->::autofill_assistant::ModelMetadata_ObjectiveMetadata::MergeFrom(from._internal_objective());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ModelMetadata_OutputMetadata::CopyFrom(const ModelMetadata_OutputMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.ModelMetadata.OutputMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelMetadata_OutputMetadata::IsInitialized() const {
  return true;
}

void ModelMetadata_OutputMetadata::InternalSwap(ModelMetadata_OutputMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelMetadata_OutputMetadata, objective_)
      + sizeof(ModelMetadata_OutputMetadata::objective_)
      - PROTOBUF_FIELD_OFFSET(ModelMetadata_OutputMetadata, semantic_role_)>(
          reinterpret_cast<char*>(&semantic_role_),
          reinterpret_cast<char*>(&other->semantic_role_));
}

std::string ModelMetadata_OutputMetadata::GetTypeName() const {
  return "autofill_assistant.ModelMetadata.OutputMetadata";
}


// ===================================================================

class ModelMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelMetadata>()._has_bits_);
  static const ::autofill_assistant::ModelMetadata_InputMetadata& input(const ModelMetadata* msg);
  static void set_has_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::autofill_assistant::ModelMetadata_OutputMetadata& output(const ModelMetadata* msg);
  static void set_has_output(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::autofill_assistant::ModelMetadata_InputMetadata&
ModelMetadata::_Internal::input(const ModelMetadata* msg) {
  return *msg->input_;
}
const ::autofill_assistant::ModelMetadata_OutputMetadata&
ModelMetadata::_Internal::output(const ModelMetadata* msg) {
  return *msg->output_;
}
ModelMetadata::ModelMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill_assistant.ModelMetadata)
}
ModelMetadata::ModelMetadata(const ModelMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_input()) {
    input_ = new ::autofill_assistant::ModelMetadata_InputMetadata(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_output()) {
    output_ = new ::autofill_assistant::ModelMetadata_OutputMetadata(*from.output_);
  } else {
    output_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill_assistant.ModelMetadata)
}

inline void ModelMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&input_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&output_) -
    reinterpret_cast<char*>(&input_)) + sizeof(output_));
}

ModelMetadata::~ModelMetadata() {
  // @@protoc_insertion_point(destructor:autofill_assistant.ModelMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete output_;
}

void ModelMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill_assistant.ModelMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(input_ != nullptr);
      input_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(output_ != nullptr);
      output_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ModelMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill_assistant.ModelMetadata.InputMetadata input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill_assistant.ModelMetadata.OutputMetadata output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_output(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill_assistant.ModelMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill_assistant.ModelMetadata.InputMetadata input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  // optional .autofill_assistant.ModelMetadata.OutputMetadata output = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::output(this),
        _Internal::output(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill_assistant.ModelMetadata)
  return target;
}

size_t ModelMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill_assistant.ModelMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .autofill_assistant.ModelMetadata.InputMetadata input = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_);
    }

    // optional .autofill_assistant.ModelMetadata.OutputMetadata output = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *output_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ModelMetadata*>(
      &from));
}

void ModelMetadata::MergeFrom(const ModelMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill_assistant.ModelMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_input()->::autofill_assistant::ModelMetadata_InputMetadata::MergeFrom(from._internal_input());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_output()->::autofill_assistant::ModelMetadata_OutputMetadata::MergeFrom(from._internal_output());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ModelMetadata::CopyFrom(const ModelMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill_assistant.ModelMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelMetadata::IsInitialized() const {
  return true;
}

void ModelMetadata::InternalSwap(ModelMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelMetadata, output_)
      + sizeof(ModelMetadata::output_)
      - PROTOBUF_FIELD_OFFSET(ModelMetadata, input_)>(
          reinterpret_cast<char*>(&input_),
          reinterpret_cast<char*>(&other->input_));
}

std::string ModelMetadata::GetTypeName() const {
  return "autofill_assistant.ModelMetadata";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace autofill_assistant
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autofill_assistant::ModelMetadata_TagMetadata*
Arena::CreateMaybeMessage< ::autofill_assistant::ModelMetadata_TagMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::ModelMetadata_TagMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::ModelMetadata_TypeMetadata*
Arena::CreateMaybeMessage< ::autofill_assistant::ModelMetadata_TypeMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::ModelMetadata_TypeMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::ModelMetadata_TextMetadata*
Arena::CreateMaybeMessage< ::autofill_assistant::ModelMetadata_TextMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::ModelMetadata_TextMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::ModelMetadata_InputMetadata*
Arena::CreateMaybeMessage< ::autofill_assistant::ModelMetadata_InputMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::ModelMetadata_InputMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::ModelMetadata_SemanticRoleMetadata*
Arena::CreateMaybeMessage< ::autofill_assistant::ModelMetadata_SemanticRoleMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::ModelMetadata_SemanticRoleMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::ModelMetadata_ObjectiveMetadata*
Arena::CreateMaybeMessage< ::autofill_assistant::ModelMetadata_ObjectiveMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::ModelMetadata_ObjectiveMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::ModelMetadata_OutputMetadata*
Arena::CreateMaybeMessage< ::autofill_assistant::ModelMetadata_OutputMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::ModelMetadata_OutputMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill_assistant::ModelMetadata*
Arena::CreateMaybeMessage< ::autofill_assistant::ModelMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill_assistant::ModelMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
