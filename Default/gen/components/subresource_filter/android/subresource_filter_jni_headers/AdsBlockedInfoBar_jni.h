// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/subresource_filter/AdsBlockedInfoBar

#ifndef org_chromium_components_subresource_filter_AdsBlockedInfoBar_JNI
#define org_chromium_components_subresource_filter_AdsBlockedInfoBar_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_subresource_1filter_AdsBlockedInfoBar[];
const char kClassPath_org_chromium_components_subresource_1filter_AdsBlockedInfoBar[] =
    "org/chromium/components/subresource_filter/AdsBlockedInfoBar";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_subresource_1filter_AdsBlockedInfoBar_clazz(nullptr);
#ifndef org_chromium_components_subresource_1filter_AdsBlockedInfoBar_clazz_defined
#define org_chromium_components_subresource_1filter_AdsBlockedInfoBar_clazz_defined
inline jclass org_chromium_components_subresource_1filter_AdsBlockedInfoBar_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_components_subresource_1filter_AdsBlockedInfoBar,
      &g_org_chromium_components_subresource_1filter_AdsBlockedInfoBar_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace subresource_filter {


static std::atomic<jmethodID>
    g_org_chromium_components_subresource_1filter_AdsBlockedInfoBar_show(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_AdsBlockedInfoBar_show(JNIEnv* env,
    JniIntWrapper iconId,
    const base::android::JavaRef<jstring>& message,
    const base::android::JavaRef<jstring>& oKButtonText,
    const base::android::JavaRef<jstring>& reloadButtonText,
    const base::android::JavaRef<jstring>& toggleText,
    const base::android::JavaRef<jstring>& followUpMessage) {
  jclass clazz = org_chromium_components_subresource_1filter_AdsBlockedInfoBar_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_subresource_1filter_AdsBlockedInfoBar_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "show",
"(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/chromium/components/infobars/InfoBar;",
          &g_org_chromium_components_subresource_1filter_AdsBlockedInfoBar_show);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, as_jint(iconId), message.obj(), oKButtonText.obj(),
              reloadButtonText.obj(), toggleText.obj(), followUpMessage.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace subresource_filter

#endif  // org_chromium_components_subresource_filter_AdsBlockedInfoBar_JNI
