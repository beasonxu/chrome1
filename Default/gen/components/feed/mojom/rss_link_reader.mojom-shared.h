// components/feed/mojom/rss_link_reader.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_FEED_MOJOM_RSS_LINK_READER_MOJOM_SHARED_H_
#define COMPONENTS_FEED_MOJOM_RSS_LINK_READER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/feed/mojom/rss_link_reader.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace feed {
namespace mojom {
class RssLinksDataView;



}  // namespace mojom
}  // namespace feed

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::feed::mojom::RssLinksDataView> {
  using Data = ::feed::mojom::internal::RssLinks_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace feed {
namespace mojom {
// Interface base classes. They are used for type safety check.
class RssLinkReaderInterfaceBase {};

using RssLinkReaderPtrDataView =
    mojo::InterfacePtrDataView<RssLinkReaderInterfaceBase>;
using RssLinkReaderRequestDataView =
    mojo::InterfaceRequestDataView<RssLinkReaderInterfaceBase>;
using RssLinkReaderAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<RssLinkReaderInterfaceBase>;
using RssLinkReaderAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<RssLinkReaderInterfaceBase>;


class RssLinksDataView {
 public:
  RssLinksDataView() = default;

  RssLinksDataView(
      internal::RssLinks_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPageUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPageUrl(UserType* output) {
    
    auto* pointer = data_->page_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetLinksDataView(
      mojo::ArrayDataView<::url::mojom::UrlDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLinks(UserType* output) {
    
    auto* pointer = data_->links.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::url::mojom::UrlDataView>>(
        pointer, output, message_);
  }
 private:
  internal::RssLinks_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace feed

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::feed::mojom::RssLinksDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::feed::mojom::RssLinksDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::feed::mojom::internal::RssLinks_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::page_url(input)) in_page_url = Traits::page_url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->page_url)::BaseType> page_url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_page_url, page_url_fragment);
    fragment->page_url.Set(
        page_url_fragment.is_null() ? nullptr : page_url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->page_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null page_url in RssLinks struct");
    decltype(Traits::links(input)) in_links = Traits::links(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->links)::BaseType>
        links_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams links_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::url::mojom::UrlDataView>>(
        in_links, links_fragment, &links_validate_params);
    fragment->links.Set(
        links_fragment.is_null() ? nullptr : links_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->links.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null links in RssLinks struct");
  }

  static bool Deserialize(::feed::mojom::internal::RssLinks_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::feed::mojom::RssLinksDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace feed {
namespace mojom {

inline void RssLinksDataView::GetPageUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->page_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void RssLinksDataView::GetLinksDataView(
    mojo::ArrayDataView<::url::mojom::UrlDataView>* output) {
  auto pointer = data_->links.Get();
  *output = mojo::ArrayDataView<::url::mojom::UrlDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace feed

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // COMPONENTS_FEED_MOJOM_RSS_LINK_READER_MOJOM_SHARED_H_