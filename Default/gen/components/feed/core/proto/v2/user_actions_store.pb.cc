// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/user_actions_store.proto

#include "components/feed/core/proto/v2/user_actions_store.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedunsignedpersonalizationstore {
PROTOBUF_CONSTEXPR VisitMetadata::VisitMetadata(
    ::_pbi::ConstantInitialized)
  : entity_mids_()
  , _entity_mids_cached_byte_size_(0)
  , origin_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , timestamp_seconds_since_epoch_(int64_t{0}){}
struct VisitMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VisitMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VisitMetadataDefaultTypeInternal() {}
  union {
    VisitMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VisitMetadataDefaultTypeInternal _VisitMetadata_default_instance_;
}  // namespace feedunsignedpersonalizationstore
namespace feedunsignedpersonalizationstore {

// ===================================================================

class VisitMetadata::_Internal {
 public:
};

VisitMetadata::VisitMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  entity_mids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedunsignedpersonalizationstore.VisitMetadata)
}
VisitMetadata::VisitMetadata(const VisitMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      entity_mids_(from.entity_mids_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  origin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    origin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_origin().empty()) {
    origin_.Set(from._internal_origin(), 
      GetArenaForAllocation());
  }
  timestamp_seconds_since_epoch_ = from.timestamp_seconds_since_epoch_;
  // @@protoc_insertion_point(copy_constructor:feedunsignedpersonalizationstore.VisitMetadata)
}

inline void VisitMetadata::SharedCtor() {
origin_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  origin_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
timestamp_seconds_since_epoch_ = int64_t{0};
}

VisitMetadata::~VisitMetadata() {
  // @@protoc_insertion_point(destructor:feedunsignedpersonalizationstore.VisitMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VisitMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  origin_.Destroy();
}

void VisitMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VisitMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:feedunsignedpersonalizationstore.VisitMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_mids_.Clear();
  origin_.ClearToEmpty();
  timestamp_seconds_since_epoch_ = int64_t{0};
  _internal_metadata_.Clear<std::string>();
}

const char* VisitMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp_seconds_since_epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          timestamp_seconds_since_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string origin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_origin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 entity_mids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_entity_mids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_entity_mids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VisitMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedunsignedpersonalizationstore.VisitMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp_seconds_since_epoch = 1;
  if (this->_internal_timestamp_seconds_since_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp_seconds_since_epoch(), target);
  }

  // string origin = 2;
  if (!this->_internal_origin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_origin().data(), static_cast<int>(this->_internal_origin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "feedunsignedpersonalizationstore.VisitMetadata.origin");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_origin(), target);
  }

  // repeated uint64 entity_mids = 3;
  {
    int byte_size = _entity_mids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_entity_mids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedunsignedpersonalizationstore.VisitMetadata)
  return target;
}

size_t VisitMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedunsignedpersonalizationstore.VisitMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 entity_mids = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->entity_mids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _entity_mids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string origin = 2;
  if (!this->_internal_origin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_origin());
  }

  // int64 timestamp_seconds_since_epoch = 1;
  if (this->_internal_timestamp_seconds_since_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_seconds_since_epoch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisitMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VisitMetadata*>(
      &from));
}

void VisitMetadata::MergeFrom(const VisitMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedunsignedpersonalizationstore.VisitMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entity_mids_.MergeFrom(from.entity_mids_);
  if (!from._internal_origin().empty()) {
    _internal_set_origin(from._internal_origin());
  }
  if (from._internal_timestamp_seconds_since_epoch() != 0) {
    _internal_set_timestamp_seconds_since_epoch(from._internal_timestamp_seconds_since_epoch());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VisitMetadata::CopyFrom(const VisitMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedunsignedpersonalizationstore.VisitMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisitMetadata::IsInitialized() const {
  return true;
}

void VisitMetadata::InternalSwap(VisitMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entity_mids_.InternalSwap(&other->entity_mids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &origin_, lhs_arena,
      &other->origin_, rhs_arena
  );
  swap(timestamp_seconds_since_epoch_, other->timestamp_seconds_since_epoch_);
}

std::string VisitMetadata::GetTypeName() const {
  return "feedunsignedpersonalizationstore.VisitMetadata";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace feedunsignedpersonalizationstore
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::feedunsignedpersonalizationstore::VisitMetadata*
Arena::CreateMaybeMessage< ::feedunsignedpersonalizationstore::VisitMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedunsignedpersonalizationstore::VisitMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
