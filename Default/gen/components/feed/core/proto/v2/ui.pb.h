// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/ui.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fui_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fui_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fui_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fui_2eproto {
  static const uint32_t offsets[];
};
namespace feedui {
class LoadingSpinnerSlice;
struct LoadingSpinnerSliceDefaultTypeInternal;
extern LoadingSpinnerSliceDefaultTypeInternal _LoadingSpinnerSlice_default_instance_;
class LoggingParameters;
struct LoggingParametersDefaultTypeInternal;
extern LoggingParametersDefaultTypeInternal _LoggingParameters_default_instance_;
class SharedState;
struct SharedStateDefaultTypeInternal;
extern SharedStateDefaultTypeInternal _SharedState_default_instance_;
class Slice;
struct SliceDefaultTypeInternal;
extern SliceDefaultTypeInternal _Slice_default_instance_;
class StreamUpdate;
struct StreamUpdateDefaultTypeInternal;
extern StreamUpdateDefaultTypeInternal _StreamUpdate_default_instance_;
class StreamUpdate_SliceUpdate;
struct StreamUpdate_SliceUpdateDefaultTypeInternal;
extern StreamUpdate_SliceUpdateDefaultTypeInternal _StreamUpdate_SliceUpdate_default_instance_;
class XSurfaceSlice;
struct XSurfaceSliceDefaultTypeInternal;
extern XSurfaceSliceDefaultTypeInternal _XSurfaceSlice_default_instance_;
class ZeroStateSlice;
struct ZeroStateSliceDefaultTypeInternal;
extern ZeroStateSliceDefaultTypeInternal _ZeroStateSlice_default_instance_;
}  // namespace feedui
PROTOBUF_NAMESPACE_OPEN
template<> ::feedui::LoadingSpinnerSlice* Arena::CreateMaybeMessage<::feedui::LoadingSpinnerSlice>(Arena*);
template<> ::feedui::LoggingParameters* Arena::CreateMaybeMessage<::feedui::LoggingParameters>(Arena*);
template<> ::feedui::SharedState* Arena::CreateMaybeMessage<::feedui::SharedState>(Arena*);
template<> ::feedui::Slice* Arena::CreateMaybeMessage<::feedui::Slice>(Arena*);
template<> ::feedui::StreamUpdate* Arena::CreateMaybeMessage<::feedui::StreamUpdate>(Arena*);
template<> ::feedui::StreamUpdate_SliceUpdate* Arena::CreateMaybeMessage<::feedui::StreamUpdate_SliceUpdate>(Arena*);
template<> ::feedui::XSurfaceSlice* Arena::CreateMaybeMessage<::feedui::XSurfaceSlice>(Arena*);
template<> ::feedui::ZeroStateSlice* Arena::CreateMaybeMessage<::feedui::ZeroStateSlice>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedui {

enum ZeroStateSlice_Type : int {
  ZeroStateSlice_Type_UNKNOWN = 0,
  ZeroStateSlice_Type_NO_CARDS_AVAILABLE = 1,
  ZeroStateSlice_Type_CANT_REFRESH = 2,
  ZeroStateSlice_Type_NO_WEB_FEED_SUBSCRIPTIONS = 3,
  ZeroStateSlice_Type_ZeroStateSlice_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ZeroStateSlice_Type_ZeroStateSlice_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ZeroStateSlice_Type_IsValid(int value);
constexpr ZeroStateSlice_Type ZeroStateSlice_Type_Type_MIN = ZeroStateSlice_Type_UNKNOWN;
constexpr ZeroStateSlice_Type ZeroStateSlice_Type_Type_MAX = ZeroStateSlice_Type_NO_WEB_FEED_SUBSCRIPTIONS;
constexpr int ZeroStateSlice_Type_Type_ARRAYSIZE = ZeroStateSlice_Type_Type_MAX + 1;

const std::string& ZeroStateSlice_Type_Name(ZeroStateSlice_Type value);
template<typename T>
inline const std::string& ZeroStateSlice_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ZeroStateSlice_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ZeroStateSlice_Type_Name.");
  return ZeroStateSlice_Type_Name(static_cast<ZeroStateSlice_Type>(enum_t_value));
}
bool ZeroStateSlice_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ZeroStateSlice_Type* value);
// ===================================================================

class StreamUpdate_SliceUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedui.StreamUpdate.SliceUpdate) */ {
 public:
  inline StreamUpdate_SliceUpdate() : StreamUpdate_SliceUpdate(nullptr) {}
  ~StreamUpdate_SliceUpdate() override;
  explicit PROTOBUF_CONSTEXPR StreamUpdate_SliceUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamUpdate_SliceUpdate(const StreamUpdate_SliceUpdate& from);
  StreamUpdate_SliceUpdate(StreamUpdate_SliceUpdate&& from) noexcept
    : StreamUpdate_SliceUpdate() {
    *this = ::std::move(from);
  }

  inline StreamUpdate_SliceUpdate& operator=(const StreamUpdate_SliceUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamUpdate_SliceUpdate& operator=(StreamUpdate_SliceUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const StreamUpdate_SliceUpdate& default_instance() {
    return *internal_default_instance();
  }
  enum UpdateCase {
    kSlice = 1,
    kSliceId = 2,
    UPDATE_NOT_SET = 0,
  };

  static inline const StreamUpdate_SliceUpdate* internal_default_instance() {
    return reinterpret_cast<const StreamUpdate_SliceUpdate*>(
               &_StreamUpdate_SliceUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamUpdate_SliceUpdate& a, StreamUpdate_SliceUpdate& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StreamUpdate_SliceUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamUpdate_SliceUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamUpdate_SliceUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamUpdate_SliceUpdate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StreamUpdate_SliceUpdate& from);
  void MergeFrom(const StreamUpdate_SliceUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreamUpdate_SliceUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedui.StreamUpdate.SliceUpdate";
  }
  protected:
  explicit StreamUpdate_SliceUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSliceFieldNumber = 1,
    kSliceIdFieldNumber = 2,
  };
  // .feedui.Slice slice = 1;
  bool has_slice() const;
  private:
  bool _internal_has_slice() const;
  public:
  void clear_slice();
  const ::feedui::Slice& slice() const;
  PROTOBUF_NODISCARD ::feedui::Slice* release_slice();
  ::feedui::Slice* mutable_slice();
  void set_allocated_slice(::feedui::Slice* slice);
  private:
  const ::feedui::Slice& _internal_slice() const;
  ::feedui::Slice* _internal_mutable_slice();
  public:
  void unsafe_arena_set_allocated_slice(
      ::feedui::Slice* slice);
  ::feedui::Slice* unsafe_arena_release_slice();

  // string slice_id = 2;
  bool has_slice_id() const;
  private:
  bool _internal_has_slice_id() const;
  public:
  void clear_slice_id();
  const std::string& slice_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_slice_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_slice_id();
  PROTOBUF_NODISCARD std::string* release_slice_id();
  void set_allocated_slice_id(std::string* slice_id);
  private:
  const std::string& _internal_slice_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slice_id(const std::string& value);
  std::string* _internal_mutable_slice_id();
  public:

  void clear_update();
  UpdateCase update_case() const;
  // @@protoc_insertion_point(class_scope:feedui.StreamUpdate.SliceUpdate)
 private:
  class _Internal;
  void set_has_slice();
  void set_has_slice_id();

  inline bool has_update() const;
  inline void clear_has_update();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union UpdateUnion {
    constexpr UpdateUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::feedui::Slice* slice_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slice_id_;
  } update_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fui_2eproto;
};
// -------------------------------------------------------------------

class StreamUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedui.StreamUpdate) */ {
 public:
  inline StreamUpdate() : StreamUpdate(nullptr) {}
  ~StreamUpdate() override;
  explicit PROTOBUF_CONSTEXPR StreamUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamUpdate(const StreamUpdate& from);
  StreamUpdate(StreamUpdate&& from) noexcept
    : StreamUpdate() {
    *this = ::std::move(from);
  }

  inline StreamUpdate& operator=(const StreamUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamUpdate& operator=(StreamUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const StreamUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamUpdate* internal_default_instance() {
    return reinterpret_cast<const StreamUpdate*>(
               &_StreamUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamUpdate& a, StreamUpdate& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StreamUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamUpdate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StreamUpdate& from);
  void MergeFrom(const StreamUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreamUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedui.StreamUpdate";
  }
  protected:
  explicit StreamUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef StreamUpdate_SliceUpdate SliceUpdate;

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedSlicesFieldNumber = 1,
    kNewSharedStatesFieldNumber = 2,
    kLoggingParametersFieldNumber = 4,
    kFetchTimeMsFieldNumber = 3,
  };
  // repeated .feedui.StreamUpdate.SliceUpdate updated_slices = 1;
  int updated_slices_size() const;
  private:
  int _internal_updated_slices_size() const;
  public:
  void clear_updated_slices();
  ::feedui::StreamUpdate_SliceUpdate* mutable_updated_slices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedui::StreamUpdate_SliceUpdate >*
      mutable_updated_slices();
  private:
  const ::feedui::StreamUpdate_SliceUpdate& _internal_updated_slices(int index) const;
  ::feedui::StreamUpdate_SliceUpdate* _internal_add_updated_slices();
  public:
  const ::feedui::StreamUpdate_SliceUpdate& updated_slices(int index) const;
  ::feedui::StreamUpdate_SliceUpdate* add_updated_slices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedui::StreamUpdate_SliceUpdate >&
      updated_slices() const;

  // repeated .feedui.SharedState new_shared_states = 2;
  int new_shared_states_size() const;
  private:
  int _internal_new_shared_states_size() const;
  public:
  void clear_new_shared_states();
  ::feedui::SharedState* mutable_new_shared_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedui::SharedState >*
      mutable_new_shared_states();
  private:
  const ::feedui::SharedState& _internal_new_shared_states(int index) const;
  ::feedui::SharedState* _internal_add_new_shared_states();
  public:
  const ::feedui::SharedState& new_shared_states(int index) const;
  ::feedui::SharedState* add_new_shared_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedui::SharedState >&
      new_shared_states() const;

  // .feedui.LoggingParameters logging_parameters = 4;
  bool has_logging_parameters() const;
  private:
  bool _internal_has_logging_parameters() const;
  public:
  void clear_logging_parameters();
  const ::feedui::LoggingParameters& logging_parameters() const;
  PROTOBUF_NODISCARD ::feedui::LoggingParameters* release_logging_parameters();
  ::feedui::LoggingParameters* mutable_logging_parameters();
  void set_allocated_logging_parameters(::feedui::LoggingParameters* logging_parameters);
  private:
  const ::feedui::LoggingParameters& _internal_logging_parameters() const;
  ::feedui::LoggingParameters* _internal_mutable_logging_parameters();
  public:
  void unsafe_arena_set_allocated_logging_parameters(
      ::feedui::LoggingParameters* logging_parameters);
  ::feedui::LoggingParameters* unsafe_arena_release_logging_parameters();

  // int64 fetch_time_ms = 3;
  void clear_fetch_time_ms();
  int64_t fetch_time_ms() const;
  void set_fetch_time_ms(int64_t value);
  private:
  int64_t _internal_fetch_time_ms() const;
  void _internal_set_fetch_time_ms(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:feedui.StreamUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedui::StreamUpdate_SliceUpdate > updated_slices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedui::SharedState > new_shared_states_;
  ::feedui::LoggingParameters* logging_parameters_;
  int64_t fetch_time_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fui_2eproto;
};
// -------------------------------------------------------------------

class LoggingParameters final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedui.LoggingParameters) */ {
 public:
  inline LoggingParameters() : LoggingParameters(nullptr) {}
  ~LoggingParameters() override;
  explicit PROTOBUF_CONSTEXPR LoggingParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoggingParameters(const LoggingParameters& from);
  LoggingParameters(LoggingParameters&& from) noexcept
    : LoggingParameters() {
    *this = ::std::move(from);
  }

  inline LoggingParameters& operator=(const LoggingParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoggingParameters& operator=(LoggingParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LoggingParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoggingParameters* internal_default_instance() {
    return reinterpret_cast<const LoggingParameters*>(
               &_LoggingParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoggingParameters& a, LoggingParameters& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LoggingParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoggingParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoggingParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoggingParameters>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LoggingParameters& from);
  void MergeFrom(const LoggingParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoggingParameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedui.LoggingParameters";
  }
  protected:
  explicit LoggingParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kEmailFieldNumber = 2,
    kClientInstanceIdFieldNumber = 3,
    kRootEventIdFieldNumber = 6,
    kLoggingEnabledFieldNumber = 4,
    kViewActionsEnabledFieldNumber = 5,
  };
  // string session_id = 1;
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string client_instance_id = 3;
  void clear_client_instance_id();
  const std::string& client_instance_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_instance_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_instance_id();
  PROTOBUF_NODISCARD std::string* release_client_instance_id();
  void set_allocated_client_instance_id(std::string* client_instance_id);
  private:
  const std::string& _internal_client_instance_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_instance_id(const std::string& value);
  std::string* _internal_mutable_client_instance_id();
  public:

  // bytes root_event_id = 6;
  void clear_root_event_id();
  const std::string& root_event_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_root_event_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_root_event_id();
  PROTOBUF_NODISCARD std::string* release_root_event_id();
  void set_allocated_root_event_id(std::string* root_event_id);
  private:
  const std::string& _internal_root_event_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_event_id(const std::string& value);
  std::string* _internal_mutable_root_event_id();
  public:

  // bool logging_enabled = 4;
  void clear_logging_enabled();
  bool logging_enabled() const;
  void set_logging_enabled(bool value);
  private:
  bool _internal_logging_enabled() const;
  void _internal_set_logging_enabled(bool value);
  public:

  // bool view_actions_enabled = 5;
  void clear_view_actions_enabled();
  bool view_actions_enabled() const;
  void set_view_actions_enabled(bool value);
  private:
  bool _internal_view_actions_enabled() const;
  void _internal_set_view_actions_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:feedui.LoggingParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_instance_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_event_id_;
  bool logging_enabled_;
  bool view_actions_enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fui_2eproto;
};
// -------------------------------------------------------------------

class Slice final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedui.Slice) */ {
 public:
  inline Slice() : Slice(nullptr) {}
  ~Slice() override;
  explicit PROTOBUF_CONSTEXPR Slice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Slice(const Slice& from);
  Slice(Slice&& from) noexcept
    : Slice() {
    *this = ::std::move(from);
  }

  inline Slice& operator=(const Slice& from) {
    CopyFrom(from);
    return *this;
  }
  inline Slice& operator=(Slice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Slice& default_instance() {
    return *internal_default_instance();
  }
  enum SliceDataCase {
    kXsurfaceSlice = 1,
    kZeroStateSlice = 3,
    kLoadingSpinnerSlice = 4,
    SLICEDATA_NOT_SET = 0,
  };

  static inline const Slice* internal_default_instance() {
    return reinterpret_cast<const Slice*>(
               &_Slice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Slice& a, Slice& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Slice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Slice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Slice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Slice>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Slice& from);
  void MergeFrom(const Slice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Slice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedui.Slice";
  }
  protected:
  explicit Slice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSliceIdFieldNumber = 2,
    kXsurfaceSliceFieldNumber = 1,
    kZeroStateSliceFieldNumber = 3,
    kLoadingSpinnerSliceFieldNumber = 4,
  };
  // string slice_id = 2;
  void clear_slice_id();
  const std::string& slice_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_slice_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_slice_id();
  PROTOBUF_NODISCARD std::string* release_slice_id();
  void set_allocated_slice_id(std::string* slice_id);
  private:
  const std::string& _internal_slice_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slice_id(const std::string& value);
  std::string* _internal_mutable_slice_id();
  public:

  // .feedui.XSurfaceSlice xsurface_slice = 1;
  bool has_xsurface_slice() const;
  private:
  bool _internal_has_xsurface_slice() const;
  public:
  void clear_xsurface_slice();
  const ::feedui::XSurfaceSlice& xsurface_slice() const;
  PROTOBUF_NODISCARD ::feedui::XSurfaceSlice* release_xsurface_slice();
  ::feedui::XSurfaceSlice* mutable_xsurface_slice();
  void set_allocated_xsurface_slice(::feedui::XSurfaceSlice* xsurface_slice);
  private:
  const ::feedui::XSurfaceSlice& _internal_xsurface_slice() const;
  ::feedui::XSurfaceSlice* _internal_mutable_xsurface_slice();
  public:
  void unsafe_arena_set_allocated_xsurface_slice(
      ::feedui::XSurfaceSlice* xsurface_slice);
  ::feedui::XSurfaceSlice* unsafe_arena_release_xsurface_slice();

  // .feedui.ZeroStateSlice zero_state_slice = 3;
  bool has_zero_state_slice() const;
  private:
  bool _internal_has_zero_state_slice() const;
  public:
  void clear_zero_state_slice();
  const ::feedui::ZeroStateSlice& zero_state_slice() const;
  PROTOBUF_NODISCARD ::feedui::ZeroStateSlice* release_zero_state_slice();
  ::feedui::ZeroStateSlice* mutable_zero_state_slice();
  void set_allocated_zero_state_slice(::feedui::ZeroStateSlice* zero_state_slice);
  private:
  const ::feedui::ZeroStateSlice& _internal_zero_state_slice() const;
  ::feedui::ZeroStateSlice* _internal_mutable_zero_state_slice();
  public:
  void unsafe_arena_set_allocated_zero_state_slice(
      ::feedui::ZeroStateSlice* zero_state_slice);
  ::feedui::ZeroStateSlice* unsafe_arena_release_zero_state_slice();

  // .feedui.LoadingSpinnerSlice loading_spinner_slice = 4;
  bool has_loading_spinner_slice() const;
  private:
  bool _internal_has_loading_spinner_slice() const;
  public:
  void clear_loading_spinner_slice();
  const ::feedui::LoadingSpinnerSlice& loading_spinner_slice() const;
  PROTOBUF_NODISCARD ::feedui::LoadingSpinnerSlice* release_loading_spinner_slice();
  ::feedui::LoadingSpinnerSlice* mutable_loading_spinner_slice();
  void set_allocated_loading_spinner_slice(::feedui::LoadingSpinnerSlice* loading_spinner_slice);
  private:
  const ::feedui::LoadingSpinnerSlice& _internal_loading_spinner_slice() const;
  ::feedui::LoadingSpinnerSlice* _internal_mutable_loading_spinner_slice();
  public:
  void unsafe_arena_set_allocated_loading_spinner_slice(
      ::feedui::LoadingSpinnerSlice* loading_spinner_slice);
  ::feedui::LoadingSpinnerSlice* unsafe_arena_release_loading_spinner_slice();

  void clear_SliceData();
  SliceDataCase SliceData_case() const;
  // @@protoc_insertion_point(class_scope:feedui.Slice)
 private:
  class _Internal;
  void set_has_xsurface_slice();
  void set_has_zero_state_slice();
  void set_has_loading_spinner_slice();

  inline bool has_SliceData() const;
  inline void clear_has_SliceData();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slice_id_;
  union SliceDataUnion {
    constexpr SliceDataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::feedui::XSurfaceSlice* xsurface_slice_;
    ::feedui::ZeroStateSlice* zero_state_slice_;
    ::feedui::LoadingSpinnerSlice* loading_spinner_slice_;
  } SliceData_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fui_2eproto;
};
// -------------------------------------------------------------------

class ZeroStateSlice final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedui.ZeroStateSlice) */ {
 public:
  inline ZeroStateSlice() : ZeroStateSlice(nullptr) {}
  ~ZeroStateSlice() override;
  explicit PROTOBUF_CONSTEXPR ZeroStateSlice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZeroStateSlice(const ZeroStateSlice& from);
  ZeroStateSlice(ZeroStateSlice&& from) noexcept
    : ZeroStateSlice() {
    *this = ::std::move(from);
  }

  inline ZeroStateSlice& operator=(const ZeroStateSlice& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZeroStateSlice& operator=(ZeroStateSlice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ZeroStateSlice& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZeroStateSlice* internal_default_instance() {
    return reinterpret_cast<const ZeroStateSlice*>(
               &_ZeroStateSlice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ZeroStateSlice& a, ZeroStateSlice& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ZeroStateSlice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZeroStateSlice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZeroStateSlice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZeroStateSlice>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ZeroStateSlice& from);
  void MergeFrom(const ZeroStateSlice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ZeroStateSlice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedui.ZeroStateSlice";
  }
  protected:
  explicit ZeroStateSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ZeroStateSlice_Type Type;
  static constexpr Type UNKNOWN =
    ZeroStateSlice_Type_UNKNOWN;
  static constexpr Type NO_CARDS_AVAILABLE =
    ZeroStateSlice_Type_NO_CARDS_AVAILABLE;
  static constexpr Type CANT_REFRESH =
    ZeroStateSlice_Type_CANT_REFRESH;
  static constexpr Type NO_WEB_FEED_SUBSCRIPTIONS =
    ZeroStateSlice_Type_NO_WEB_FEED_SUBSCRIPTIONS;
  static inline bool Type_IsValid(int value) {
    return ZeroStateSlice_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ZeroStateSlice_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ZeroStateSlice_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ZeroStateSlice_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ZeroStateSlice_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ZeroStateSlice_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .feedui.ZeroStateSlice.Type type = 1;
  void clear_type();
  ::feedui::ZeroStateSlice_Type type() const;
  void set_type(::feedui::ZeroStateSlice_Type value);
  private:
  ::feedui::ZeroStateSlice_Type _internal_type() const;
  void _internal_set_type(::feedui::ZeroStateSlice_Type value);
  public:

  // @@protoc_insertion_point(class_scope:feedui.ZeroStateSlice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fui_2eproto;
};
// -------------------------------------------------------------------

class LoadingSpinnerSlice final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedui.LoadingSpinnerSlice) */ {
 public:
  inline LoadingSpinnerSlice() : LoadingSpinnerSlice(nullptr) {}
  ~LoadingSpinnerSlice() override;
  explicit PROTOBUF_CONSTEXPR LoadingSpinnerSlice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadingSpinnerSlice(const LoadingSpinnerSlice& from);
  LoadingSpinnerSlice(LoadingSpinnerSlice&& from) noexcept
    : LoadingSpinnerSlice() {
    *this = ::std::move(from);
  }

  inline LoadingSpinnerSlice& operator=(const LoadingSpinnerSlice& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadingSpinnerSlice& operator=(LoadingSpinnerSlice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LoadingSpinnerSlice& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadingSpinnerSlice* internal_default_instance() {
    return reinterpret_cast<const LoadingSpinnerSlice*>(
               &_LoadingSpinnerSlice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoadingSpinnerSlice& a, LoadingSpinnerSlice& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LoadingSpinnerSlice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadingSpinnerSlice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadingSpinnerSlice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadingSpinnerSlice>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LoadingSpinnerSlice& from);
  void MergeFrom(const LoadingSpinnerSlice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoadingSpinnerSlice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedui.LoadingSpinnerSlice";
  }
  protected:
  explicit LoadingSpinnerSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsAtTopFieldNumber = 1,
  };
  // bool is_at_top = 1;
  void clear_is_at_top();
  bool is_at_top() const;
  void set_is_at_top(bool value);
  private:
  bool _internal_is_at_top() const;
  void _internal_set_is_at_top(bool value);
  public:

  // @@protoc_insertion_point(class_scope:feedui.LoadingSpinnerSlice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_at_top_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fui_2eproto;
};
// -------------------------------------------------------------------

class XSurfaceSlice final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedui.XSurfaceSlice) */ {
 public:
  inline XSurfaceSlice() : XSurfaceSlice(nullptr) {}
  ~XSurfaceSlice() override;
  explicit PROTOBUF_CONSTEXPR XSurfaceSlice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XSurfaceSlice(const XSurfaceSlice& from);
  XSurfaceSlice(XSurfaceSlice&& from) noexcept
    : XSurfaceSlice() {
    *this = ::std::move(from);
  }

  inline XSurfaceSlice& operator=(const XSurfaceSlice& from) {
    CopyFrom(from);
    return *this;
  }
  inline XSurfaceSlice& operator=(XSurfaceSlice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const XSurfaceSlice& default_instance() {
    return *internal_default_instance();
  }
  static inline const XSurfaceSlice* internal_default_instance() {
    return reinterpret_cast<const XSurfaceSlice*>(
               &_XSurfaceSlice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(XSurfaceSlice& a, XSurfaceSlice& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(XSurfaceSlice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XSurfaceSlice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XSurfaceSlice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XSurfaceSlice>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const XSurfaceSlice& from);
  void MergeFrom(const XSurfaceSlice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(XSurfaceSlice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedui.XSurfaceSlice";
  }
  protected:
  explicit XSurfaceSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXsurfaceFrameFieldNumber = 1,
  };
  // bytes xsurface_frame = 1;
  void clear_xsurface_frame();
  const std::string& xsurface_frame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xsurface_frame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xsurface_frame();
  PROTOBUF_NODISCARD std::string* release_xsurface_frame();
  void set_allocated_xsurface_frame(std::string* xsurface_frame);
  private:
  const std::string& _internal_xsurface_frame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xsurface_frame(const std::string& value);
  std::string* _internal_mutable_xsurface_frame();
  public:

  // @@protoc_insertion_point(class_scope:feedui.XSurfaceSlice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xsurface_frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fui_2eproto;
};
// -------------------------------------------------------------------

class SharedState final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedui.SharedState) */ {
 public:
  inline SharedState() : SharedState(nullptr) {}
  ~SharedState() override;
  explicit PROTOBUF_CONSTEXPR SharedState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharedState(const SharedState& from);
  SharedState(SharedState&& from) noexcept
    : SharedState() {
    *this = ::std::move(from);
  }

  inline SharedState& operator=(const SharedState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharedState& operator=(SharedState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SharedState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharedState* internal_default_instance() {
    return reinterpret_cast<const SharedState*>(
               &_SharedState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SharedState& a, SharedState& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SharedState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharedState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SharedState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SharedState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SharedState& from);
  void MergeFrom(const SharedState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharedState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedui.SharedState";
  }
  protected:
  explicit SharedState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXsurfaceSharedStateFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes xsurface_shared_state = 2;
  void clear_xsurface_shared_state();
  const std::string& xsurface_shared_state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xsurface_shared_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xsurface_shared_state();
  PROTOBUF_NODISCARD std::string* release_xsurface_shared_state();
  void set_allocated_xsurface_shared_state(std::string* xsurface_shared_state);
  private:
  const std::string& _internal_xsurface_shared_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xsurface_shared_state(const std::string& value);
  std::string* _internal_mutable_xsurface_shared_state();
  public:

  // @@protoc_insertion_point(class_scope:feedui.SharedState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xsurface_shared_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fui_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamUpdate_SliceUpdate

// .feedui.Slice slice = 1;
inline bool StreamUpdate_SliceUpdate::_internal_has_slice() const {
  return update_case() == kSlice;
}
inline bool StreamUpdate_SliceUpdate::has_slice() const {
  return _internal_has_slice();
}
inline void StreamUpdate_SliceUpdate::set_has_slice() {
  _oneof_case_[0] = kSlice;
}
inline void StreamUpdate_SliceUpdate::clear_slice() {
  if (_internal_has_slice()) {
    if (GetArenaForAllocation() == nullptr) {
      delete update_.slice_;
    }
    clear_has_update();
  }
}
inline ::feedui::Slice* StreamUpdate_SliceUpdate::release_slice() {
  // @@protoc_insertion_point(field_release:feedui.StreamUpdate.SliceUpdate.slice)
  if (_internal_has_slice()) {
    clear_has_update();
    ::feedui::Slice* temp = update_.slice_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    update_.slice_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::feedui::Slice& StreamUpdate_SliceUpdate::_internal_slice() const {
  return _internal_has_slice()
      ? *update_.slice_
      : reinterpret_cast< ::feedui::Slice&>(::feedui::_Slice_default_instance_);
}
inline const ::feedui::Slice& StreamUpdate_SliceUpdate::slice() const {
  // @@protoc_insertion_point(field_get:feedui.StreamUpdate.SliceUpdate.slice)
  return _internal_slice();
}
inline ::feedui::Slice* StreamUpdate_SliceUpdate::unsafe_arena_release_slice() {
  // @@protoc_insertion_point(field_unsafe_arena_release:feedui.StreamUpdate.SliceUpdate.slice)
  if (_internal_has_slice()) {
    clear_has_update();
    ::feedui::Slice* temp = update_.slice_;
    update_.slice_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamUpdate_SliceUpdate::unsafe_arena_set_allocated_slice(::feedui::Slice* slice) {
  clear_update();
  if (slice) {
    set_has_slice();
    update_.slice_ = slice;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedui.StreamUpdate.SliceUpdate.slice)
}
inline ::feedui::Slice* StreamUpdate_SliceUpdate::_internal_mutable_slice() {
  if (!_internal_has_slice()) {
    clear_update();
    set_has_slice();
    update_.slice_ = CreateMaybeMessage< ::feedui::Slice >(GetArenaForAllocation());
  }
  return update_.slice_;
}
inline ::feedui::Slice* StreamUpdate_SliceUpdate::mutable_slice() {
  ::feedui::Slice* _msg = _internal_mutable_slice();
  // @@protoc_insertion_point(field_mutable:feedui.StreamUpdate.SliceUpdate.slice)
  return _msg;
}

// string slice_id = 2;
inline bool StreamUpdate_SliceUpdate::_internal_has_slice_id() const {
  return update_case() == kSliceId;
}
inline bool StreamUpdate_SliceUpdate::has_slice_id() const {
  return _internal_has_slice_id();
}
inline void StreamUpdate_SliceUpdate::set_has_slice_id() {
  _oneof_case_[0] = kSliceId;
}
inline void StreamUpdate_SliceUpdate::clear_slice_id() {
  if (_internal_has_slice_id()) {
    update_.slice_id_.Destroy();
    clear_has_update();
  }
}
inline const std::string& StreamUpdate_SliceUpdate::slice_id() const {
  // @@protoc_insertion_point(field_get:feedui.StreamUpdate.SliceUpdate.slice_id)
  return _internal_slice_id();
}
template <typename ArgT0, typename... ArgT>
inline void StreamUpdate_SliceUpdate::set_slice_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_slice_id()) {
    clear_update();
    set_has_slice_id();
    update_.slice_id_.InitDefault();
  }
  update_.slice_id_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedui.StreamUpdate.SliceUpdate.slice_id)
}
inline std::string* StreamUpdate_SliceUpdate::mutable_slice_id() {
  std::string* _s = _internal_mutable_slice_id();
  // @@protoc_insertion_point(field_mutable:feedui.StreamUpdate.SliceUpdate.slice_id)
  return _s;
}
inline const std::string& StreamUpdate_SliceUpdate::_internal_slice_id() const {
  if (_internal_has_slice_id()) {
    return update_.slice_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void StreamUpdate_SliceUpdate::_internal_set_slice_id(const std::string& value) {
  if (!_internal_has_slice_id()) {
    clear_update();
    set_has_slice_id();
    update_.slice_id_.InitDefault();
  }
  update_.slice_id_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamUpdate_SliceUpdate::_internal_mutable_slice_id() {
  if (!_internal_has_slice_id()) {
    clear_update();
    set_has_slice_id();
    update_.slice_id_.InitDefault();
  }
  return update_.slice_id_.Mutable(      GetArenaForAllocation());
}
inline std::string* StreamUpdate_SliceUpdate::release_slice_id() {
  // @@protoc_insertion_point(field_release:feedui.StreamUpdate.SliceUpdate.slice_id)
  if (_internal_has_slice_id()) {
    clear_has_update();
    return update_.slice_id_.Release();
  } else {
    return nullptr;
  }
}
inline void StreamUpdate_SliceUpdate::set_allocated_slice_id(std::string* slice_id) {
  if (has_update()) {
    clear_update();
  }
  if (slice_id != nullptr) {
    set_has_slice_id();
    update_.slice_id_.InitAllocated(slice_id, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:feedui.StreamUpdate.SliceUpdate.slice_id)
}

inline bool StreamUpdate_SliceUpdate::has_update() const {
  return update_case() != UPDATE_NOT_SET;
}
inline void StreamUpdate_SliceUpdate::clear_has_update() {
  _oneof_case_[0] = UPDATE_NOT_SET;
}
inline StreamUpdate_SliceUpdate::UpdateCase StreamUpdate_SliceUpdate::update_case() const {
  return StreamUpdate_SliceUpdate::UpdateCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamUpdate

// repeated .feedui.StreamUpdate.SliceUpdate updated_slices = 1;
inline int StreamUpdate::_internal_updated_slices_size() const {
  return updated_slices_.size();
}
inline int StreamUpdate::updated_slices_size() const {
  return _internal_updated_slices_size();
}
inline void StreamUpdate::clear_updated_slices() {
  updated_slices_.Clear();
}
inline ::feedui::StreamUpdate_SliceUpdate* StreamUpdate::mutable_updated_slices(int index) {
  // @@protoc_insertion_point(field_mutable:feedui.StreamUpdate.updated_slices)
  return updated_slices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedui::StreamUpdate_SliceUpdate >*
StreamUpdate::mutable_updated_slices() {
  // @@protoc_insertion_point(field_mutable_list:feedui.StreamUpdate.updated_slices)
  return &updated_slices_;
}
inline const ::feedui::StreamUpdate_SliceUpdate& StreamUpdate::_internal_updated_slices(int index) const {
  return updated_slices_.Get(index);
}
inline const ::feedui::StreamUpdate_SliceUpdate& StreamUpdate::updated_slices(int index) const {
  // @@protoc_insertion_point(field_get:feedui.StreamUpdate.updated_slices)
  return _internal_updated_slices(index);
}
inline ::feedui::StreamUpdate_SliceUpdate* StreamUpdate::_internal_add_updated_slices() {
  return updated_slices_.Add();
}
inline ::feedui::StreamUpdate_SliceUpdate* StreamUpdate::add_updated_slices() {
  ::feedui::StreamUpdate_SliceUpdate* _add = _internal_add_updated_slices();
  // @@protoc_insertion_point(field_add:feedui.StreamUpdate.updated_slices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedui::StreamUpdate_SliceUpdate >&
StreamUpdate::updated_slices() const {
  // @@protoc_insertion_point(field_list:feedui.StreamUpdate.updated_slices)
  return updated_slices_;
}

// repeated .feedui.SharedState new_shared_states = 2;
inline int StreamUpdate::_internal_new_shared_states_size() const {
  return new_shared_states_.size();
}
inline int StreamUpdate::new_shared_states_size() const {
  return _internal_new_shared_states_size();
}
inline void StreamUpdate::clear_new_shared_states() {
  new_shared_states_.Clear();
}
inline ::feedui::SharedState* StreamUpdate::mutable_new_shared_states(int index) {
  // @@protoc_insertion_point(field_mutable:feedui.StreamUpdate.new_shared_states)
  return new_shared_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedui::SharedState >*
StreamUpdate::mutable_new_shared_states() {
  // @@protoc_insertion_point(field_mutable_list:feedui.StreamUpdate.new_shared_states)
  return &new_shared_states_;
}
inline const ::feedui::SharedState& StreamUpdate::_internal_new_shared_states(int index) const {
  return new_shared_states_.Get(index);
}
inline const ::feedui::SharedState& StreamUpdate::new_shared_states(int index) const {
  // @@protoc_insertion_point(field_get:feedui.StreamUpdate.new_shared_states)
  return _internal_new_shared_states(index);
}
inline ::feedui::SharedState* StreamUpdate::_internal_add_new_shared_states() {
  return new_shared_states_.Add();
}
inline ::feedui::SharedState* StreamUpdate::add_new_shared_states() {
  ::feedui::SharedState* _add = _internal_add_new_shared_states();
  // @@protoc_insertion_point(field_add:feedui.StreamUpdate.new_shared_states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedui::SharedState >&
StreamUpdate::new_shared_states() const {
  // @@protoc_insertion_point(field_list:feedui.StreamUpdate.new_shared_states)
  return new_shared_states_;
}

// int64 fetch_time_ms = 3;
inline void StreamUpdate::clear_fetch_time_ms() {
  fetch_time_ms_ = int64_t{0};
}
inline int64_t StreamUpdate::_internal_fetch_time_ms() const {
  return fetch_time_ms_;
}
inline int64_t StreamUpdate::fetch_time_ms() const {
  // @@protoc_insertion_point(field_get:feedui.StreamUpdate.fetch_time_ms)
  return _internal_fetch_time_ms();
}
inline void StreamUpdate::_internal_set_fetch_time_ms(int64_t value) {
  
  fetch_time_ms_ = value;
}
inline void StreamUpdate::set_fetch_time_ms(int64_t value) {
  _internal_set_fetch_time_ms(value);
  // @@protoc_insertion_point(field_set:feedui.StreamUpdate.fetch_time_ms)
}

// .feedui.LoggingParameters logging_parameters = 4;
inline bool StreamUpdate::_internal_has_logging_parameters() const {
  return this != internal_default_instance() && logging_parameters_ != nullptr;
}
inline bool StreamUpdate::has_logging_parameters() const {
  return _internal_has_logging_parameters();
}
inline void StreamUpdate::clear_logging_parameters() {
  if (GetArenaForAllocation() == nullptr && logging_parameters_ != nullptr) {
    delete logging_parameters_;
  }
  logging_parameters_ = nullptr;
}
inline const ::feedui::LoggingParameters& StreamUpdate::_internal_logging_parameters() const {
  const ::feedui::LoggingParameters* p = logging_parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedui::LoggingParameters&>(
      ::feedui::_LoggingParameters_default_instance_);
}
inline const ::feedui::LoggingParameters& StreamUpdate::logging_parameters() const {
  // @@protoc_insertion_point(field_get:feedui.StreamUpdate.logging_parameters)
  return _internal_logging_parameters();
}
inline void StreamUpdate::unsafe_arena_set_allocated_logging_parameters(
    ::feedui::LoggingParameters* logging_parameters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logging_parameters_);
  }
  logging_parameters_ = logging_parameters;
  if (logging_parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedui.StreamUpdate.logging_parameters)
}
inline ::feedui::LoggingParameters* StreamUpdate::release_logging_parameters() {
  
  ::feedui::LoggingParameters* temp = logging_parameters_;
  logging_parameters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedui::LoggingParameters* StreamUpdate::unsafe_arena_release_logging_parameters() {
  // @@protoc_insertion_point(field_release:feedui.StreamUpdate.logging_parameters)
  
  ::feedui::LoggingParameters* temp = logging_parameters_;
  logging_parameters_ = nullptr;
  return temp;
}
inline ::feedui::LoggingParameters* StreamUpdate::_internal_mutable_logging_parameters() {
  
  if (logging_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedui::LoggingParameters>(GetArenaForAllocation());
    logging_parameters_ = p;
  }
  return logging_parameters_;
}
inline ::feedui::LoggingParameters* StreamUpdate::mutable_logging_parameters() {
  ::feedui::LoggingParameters* _msg = _internal_mutable_logging_parameters();
  // @@protoc_insertion_point(field_mutable:feedui.StreamUpdate.logging_parameters)
  return _msg;
}
inline void StreamUpdate::set_allocated_logging_parameters(::feedui::LoggingParameters* logging_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete logging_parameters_;
  }
  if (logging_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(logging_parameters);
    if (message_arena != submessage_arena) {
      logging_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logging_parameters, submessage_arena);
    }
    
  } else {
    
  }
  logging_parameters_ = logging_parameters;
  // @@protoc_insertion_point(field_set_allocated:feedui.StreamUpdate.logging_parameters)
}

// -------------------------------------------------------------------

// LoggingParameters

// string session_id = 1;
inline void LoggingParameters::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& LoggingParameters::session_id() const {
  // @@protoc_insertion_point(field_get:feedui.LoggingParameters.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoggingParameters::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedui.LoggingParameters.session_id)
}
inline std::string* LoggingParameters::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:feedui.LoggingParameters.session_id)
  return _s;
}
inline const std::string& LoggingParameters::_internal_session_id() const {
  return session_id_.Get();
}
inline void LoggingParameters::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LoggingParameters::_internal_mutable_session_id() {
  
  return session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LoggingParameters::release_session_id() {
  // @@protoc_insertion_point(field_release:feedui.LoggingParameters.session_id)
  return session_id_.Release();
}
inline void LoggingParameters::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedui.LoggingParameters.session_id)
}

// string email = 2;
inline void LoggingParameters::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& LoggingParameters::email() const {
  // @@protoc_insertion_point(field_get:feedui.LoggingParameters.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoggingParameters::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedui.LoggingParameters.email)
}
inline std::string* LoggingParameters::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:feedui.LoggingParameters.email)
  return _s;
}
inline const std::string& LoggingParameters::_internal_email() const {
  return email_.Get();
}
inline void LoggingParameters::_internal_set_email(const std::string& value) {
  
  email_.Set(value, GetArenaForAllocation());
}
inline std::string* LoggingParameters::_internal_mutable_email() {
  
  return email_.Mutable(GetArenaForAllocation());
}
inline std::string* LoggingParameters::release_email() {
  // @@protoc_insertion_point(field_release:feedui.LoggingParameters.email)
  return email_.Release();
}
inline void LoggingParameters::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (email_.IsDefault()) {
    email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedui.LoggingParameters.email)
}

// string client_instance_id = 3;
inline void LoggingParameters::clear_client_instance_id() {
  client_instance_id_.ClearToEmpty();
}
inline const std::string& LoggingParameters::client_instance_id() const {
  // @@protoc_insertion_point(field_get:feedui.LoggingParameters.client_instance_id)
  return _internal_client_instance_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoggingParameters::set_client_instance_id(ArgT0&& arg0, ArgT... args) {
 
 client_instance_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedui.LoggingParameters.client_instance_id)
}
inline std::string* LoggingParameters::mutable_client_instance_id() {
  std::string* _s = _internal_mutable_client_instance_id();
  // @@protoc_insertion_point(field_mutable:feedui.LoggingParameters.client_instance_id)
  return _s;
}
inline const std::string& LoggingParameters::_internal_client_instance_id() const {
  return client_instance_id_.Get();
}
inline void LoggingParameters::_internal_set_client_instance_id(const std::string& value) {
  
  client_instance_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LoggingParameters::_internal_mutable_client_instance_id() {
  
  return client_instance_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LoggingParameters::release_client_instance_id() {
  // @@protoc_insertion_point(field_release:feedui.LoggingParameters.client_instance_id)
  return client_instance_id_.Release();
}
inline void LoggingParameters::set_allocated_client_instance_id(std::string* client_instance_id) {
  if (client_instance_id != nullptr) {
    
  } else {
    
  }
  client_instance_id_.SetAllocated(client_instance_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_instance_id_.IsDefault()) {
    client_instance_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedui.LoggingParameters.client_instance_id)
}

// bool logging_enabled = 4;
inline void LoggingParameters::clear_logging_enabled() {
  logging_enabled_ = false;
}
inline bool LoggingParameters::_internal_logging_enabled() const {
  return logging_enabled_;
}
inline bool LoggingParameters::logging_enabled() const {
  // @@protoc_insertion_point(field_get:feedui.LoggingParameters.logging_enabled)
  return _internal_logging_enabled();
}
inline void LoggingParameters::_internal_set_logging_enabled(bool value) {
  
  logging_enabled_ = value;
}
inline void LoggingParameters::set_logging_enabled(bool value) {
  _internal_set_logging_enabled(value);
  // @@protoc_insertion_point(field_set:feedui.LoggingParameters.logging_enabled)
}

// bool view_actions_enabled = 5;
inline void LoggingParameters::clear_view_actions_enabled() {
  view_actions_enabled_ = false;
}
inline bool LoggingParameters::_internal_view_actions_enabled() const {
  return view_actions_enabled_;
}
inline bool LoggingParameters::view_actions_enabled() const {
  // @@protoc_insertion_point(field_get:feedui.LoggingParameters.view_actions_enabled)
  return _internal_view_actions_enabled();
}
inline void LoggingParameters::_internal_set_view_actions_enabled(bool value) {
  
  view_actions_enabled_ = value;
}
inline void LoggingParameters::set_view_actions_enabled(bool value) {
  _internal_set_view_actions_enabled(value);
  // @@protoc_insertion_point(field_set:feedui.LoggingParameters.view_actions_enabled)
}

// bytes root_event_id = 6;
inline void LoggingParameters::clear_root_event_id() {
  root_event_id_.ClearToEmpty();
}
inline const std::string& LoggingParameters::root_event_id() const {
  // @@protoc_insertion_point(field_get:feedui.LoggingParameters.root_event_id)
  return _internal_root_event_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoggingParameters::set_root_event_id(ArgT0&& arg0, ArgT... args) {
 
 root_event_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedui.LoggingParameters.root_event_id)
}
inline std::string* LoggingParameters::mutable_root_event_id() {
  std::string* _s = _internal_mutable_root_event_id();
  // @@protoc_insertion_point(field_mutable:feedui.LoggingParameters.root_event_id)
  return _s;
}
inline const std::string& LoggingParameters::_internal_root_event_id() const {
  return root_event_id_.Get();
}
inline void LoggingParameters::_internal_set_root_event_id(const std::string& value) {
  
  root_event_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LoggingParameters::_internal_mutable_root_event_id() {
  
  return root_event_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LoggingParameters::release_root_event_id() {
  // @@protoc_insertion_point(field_release:feedui.LoggingParameters.root_event_id)
  return root_event_id_.Release();
}
inline void LoggingParameters::set_allocated_root_event_id(std::string* root_event_id) {
  if (root_event_id != nullptr) {
    
  } else {
    
  }
  root_event_id_.SetAllocated(root_event_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (root_event_id_.IsDefault()) {
    root_event_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedui.LoggingParameters.root_event_id)
}

// -------------------------------------------------------------------

// Slice

// .feedui.XSurfaceSlice xsurface_slice = 1;
inline bool Slice::_internal_has_xsurface_slice() const {
  return SliceData_case() == kXsurfaceSlice;
}
inline bool Slice::has_xsurface_slice() const {
  return _internal_has_xsurface_slice();
}
inline void Slice::set_has_xsurface_slice() {
  _oneof_case_[0] = kXsurfaceSlice;
}
inline void Slice::clear_xsurface_slice() {
  if (_internal_has_xsurface_slice()) {
    if (GetArenaForAllocation() == nullptr) {
      delete SliceData_.xsurface_slice_;
    }
    clear_has_SliceData();
  }
}
inline ::feedui::XSurfaceSlice* Slice::release_xsurface_slice() {
  // @@protoc_insertion_point(field_release:feedui.Slice.xsurface_slice)
  if (_internal_has_xsurface_slice()) {
    clear_has_SliceData();
    ::feedui::XSurfaceSlice* temp = SliceData_.xsurface_slice_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    SliceData_.xsurface_slice_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::feedui::XSurfaceSlice& Slice::_internal_xsurface_slice() const {
  return _internal_has_xsurface_slice()
      ? *SliceData_.xsurface_slice_
      : reinterpret_cast< ::feedui::XSurfaceSlice&>(::feedui::_XSurfaceSlice_default_instance_);
}
inline const ::feedui::XSurfaceSlice& Slice::xsurface_slice() const {
  // @@protoc_insertion_point(field_get:feedui.Slice.xsurface_slice)
  return _internal_xsurface_slice();
}
inline ::feedui::XSurfaceSlice* Slice::unsafe_arena_release_xsurface_slice() {
  // @@protoc_insertion_point(field_unsafe_arena_release:feedui.Slice.xsurface_slice)
  if (_internal_has_xsurface_slice()) {
    clear_has_SliceData();
    ::feedui::XSurfaceSlice* temp = SliceData_.xsurface_slice_;
    SliceData_.xsurface_slice_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Slice::unsafe_arena_set_allocated_xsurface_slice(::feedui::XSurfaceSlice* xsurface_slice) {
  clear_SliceData();
  if (xsurface_slice) {
    set_has_xsurface_slice();
    SliceData_.xsurface_slice_ = xsurface_slice;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedui.Slice.xsurface_slice)
}
inline ::feedui::XSurfaceSlice* Slice::_internal_mutable_xsurface_slice() {
  if (!_internal_has_xsurface_slice()) {
    clear_SliceData();
    set_has_xsurface_slice();
    SliceData_.xsurface_slice_ = CreateMaybeMessage< ::feedui::XSurfaceSlice >(GetArenaForAllocation());
  }
  return SliceData_.xsurface_slice_;
}
inline ::feedui::XSurfaceSlice* Slice::mutable_xsurface_slice() {
  ::feedui::XSurfaceSlice* _msg = _internal_mutable_xsurface_slice();
  // @@protoc_insertion_point(field_mutable:feedui.Slice.xsurface_slice)
  return _msg;
}

// .feedui.ZeroStateSlice zero_state_slice = 3;
inline bool Slice::_internal_has_zero_state_slice() const {
  return SliceData_case() == kZeroStateSlice;
}
inline bool Slice::has_zero_state_slice() const {
  return _internal_has_zero_state_slice();
}
inline void Slice::set_has_zero_state_slice() {
  _oneof_case_[0] = kZeroStateSlice;
}
inline void Slice::clear_zero_state_slice() {
  if (_internal_has_zero_state_slice()) {
    if (GetArenaForAllocation() == nullptr) {
      delete SliceData_.zero_state_slice_;
    }
    clear_has_SliceData();
  }
}
inline ::feedui::ZeroStateSlice* Slice::release_zero_state_slice() {
  // @@protoc_insertion_point(field_release:feedui.Slice.zero_state_slice)
  if (_internal_has_zero_state_slice()) {
    clear_has_SliceData();
    ::feedui::ZeroStateSlice* temp = SliceData_.zero_state_slice_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    SliceData_.zero_state_slice_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::feedui::ZeroStateSlice& Slice::_internal_zero_state_slice() const {
  return _internal_has_zero_state_slice()
      ? *SliceData_.zero_state_slice_
      : reinterpret_cast< ::feedui::ZeroStateSlice&>(::feedui::_ZeroStateSlice_default_instance_);
}
inline const ::feedui::ZeroStateSlice& Slice::zero_state_slice() const {
  // @@protoc_insertion_point(field_get:feedui.Slice.zero_state_slice)
  return _internal_zero_state_slice();
}
inline ::feedui::ZeroStateSlice* Slice::unsafe_arena_release_zero_state_slice() {
  // @@protoc_insertion_point(field_unsafe_arena_release:feedui.Slice.zero_state_slice)
  if (_internal_has_zero_state_slice()) {
    clear_has_SliceData();
    ::feedui::ZeroStateSlice* temp = SliceData_.zero_state_slice_;
    SliceData_.zero_state_slice_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Slice::unsafe_arena_set_allocated_zero_state_slice(::feedui::ZeroStateSlice* zero_state_slice) {
  clear_SliceData();
  if (zero_state_slice) {
    set_has_zero_state_slice();
    SliceData_.zero_state_slice_ = zero_state_slice;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedui.Slice.zero_state_slice)
}
inline ::feedui::ZeroStateSlice* Slice::_internal_mutable_zero_state_slice() {
  if (!_internal_has_zero_state_slice()) {
    clear_SliceData();
    set_has_zero_state_slice();
    SliceData_.zero_state_slice_ = CreateMaybeMessage< ::feedui::ZeroStateSlice >(GetArenaForAllocation());
  }
  return SliceData_.zero_state_slice_;
}
inline ::feedui::ZeroStateSlice* Slice::mutable_zero_state_slice() {
  ::feedui::ZeroStateSlice* _msg = _internal_mutable_zero_state_slice();
  // @@protoc_insertion_point(field_mutable:feedui.Slice.zero_state_slice)
  return _msg;
}

// .feedui.LoadingSpinnerSlice loading_spinner_slice = 4;
inline bool Slice::_internal_has_loading_spinner_slice() const {
  return SliceData_case() == kLoadingSpinnerSlice;
}
inline bool Slice::has_loading_spinner_slice() const {
  return _internal_has_loading_spinner_slice();
}
inline void Slice::set_has_loading_spinner_slice() {
  _oneof_case_[0] = kLoadingSpinnerSlice;
}
inline void Slice::clear_loading_spinner_slice() {
  if (_internal_has_loading_spinner_slice()) {
    if (GetArenaForAllocation() == nullptr) {
      delete SliceData_.loading_spinner_slice_;
    }
    clear_has_SliceData();
  }
}
inline ::feedui::LoadingSpinnerSlice* Slice::release_loading_spinner_slice() {
  // @@protoc_insertion_point(field_release:feedui.Slice.loading_spinner_slice)
  if (_internal_has_loading_spinner_slice()) {
    clear_has_SliceData();
    ::feedui::LoadingSpinnerSlice* temp = SliceData_.loading_spinner_slice_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    SliceData_.loading_spinner_slice_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::feedui::LoadingSpinnerSlice& Slice::_internal_loading_spinner_slice() const {
  return _internal_has_loading_spinner_slice()
      ? *SliceData_.loading_spinner_slice_
      : reinterpret_cast< ::feedui::LoadingSpinnerSlice&>(::feedui::_LoadingSpinnerSlice_default_instance_);
}
inline const ::feedui::LoadingSpinnerSlice& Slice::loading_spinner_slice() const {
  // @@protoc_insertion_point(field_get:feedui.Slice.loading_spinner_slice)
  return _internal_loading_spinner_slice();
}
inline ::feedui::LoadingSpinnerSlice* Slice::unsafe_arena_release_loading_spinner_slice() {
  // @@protoc_insertion_point(field_unsafe_arena_release:feedui.Slice.loading_spinner_slice)
  if (_internal_has_loading_spinner_slice()) {
    clear_has_SliceData();
    ::feedui::LoadingSpinnerSlice* temp = SliceData_.loading_spinner_slice_;
    SliceData_.loading_spinner_slice_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Slice::unsafe_arena_set_allocated_loading_spinner_slice(::feedui::LoadingSpinnerSlice* loading_spinner_slice) {
  clear_SliceData();
  if (loading_spinner_slice) {
    set_has_loading_spinner_slice();
    SliceData_.loading_spinner_slice_ = loading_spinner_slice;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedui.Slice.loading_spinner_slice)
}
inline ::feedui::LoadingSpinnerSlice* Slice::_internal_mutable_loading_spinner_slice() {
  if (!_internal_has_loading_spinner_slice()) {
    clear_SliceData();
    set_has_loading_spinner_slice();
    SliceData_.loading_spinner_slice_ = CreateMaybeMessage< ::feedui::LoadingSpinnerSlice >(GetArenaForAllocation());
  }
  return SliceData_.loading_spinner_slice_;
}
inline ::feedui::LoadingSpinnerSlice* Slice::mutable_loading_spinner_slice() {
  ::feedui::LoadingSpinnerSlice* _msg = _internal_mutable_loading_spinner_slice();
  // @@protoc_insertion_point(field_mutable:feedui.Slice.loading_spinner_slice)
  return _msg;
}

// string slice_id = 2;
inline void Slice::clear_slice_id() {
  slice_id_.ClearToEmpty();
}
inline const std::string& Slice::slice_id() const {
  // @@protoc_insertion_point(field_get:feedui.Slice.slice_id)
  return _internal_slice_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Slice::set_slice_id(ArgT0&& arg0, ArgT... args) {
 
 slice_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedui.Slice.slice_id)
}
inline std::string* Slice::mutable_slice_id() {
  std::string* _s = _internal_mutable_slice_id();
  // @@protoc_insertion_point(field_mutable:feedui.Slice.slice_id)
  return _s;
}
inline const std::string& Slice::_internal_slice_id() const {
  return slice_id_.Get();
}
inline void Slice::_internal_set_slice_id(const std::string& value) {
  
  slice_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Slice::_internal_mutable_slice_id() {
  
  return slice_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Slice::release_slice_id() {
  // @@protoc_insertion_point(field_release:feedui.Slice.slice_id)
  return slice_id_.Release();
}
inline void Slice::set_allocated_slice_id(std::string* slice_id) {
  if (slice_id != nullptr) {
    
  } else {
    
  }
  slice_id_.SetAllocated(slice_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (slice_id_.IsDefault()) {
    slice_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedui.Slice.slice_id)
}

inline bool Slice::has_SliceData() const {
  return SliceData_case() != SLICEDATA_NOT_SET;
}
inline void Slice::clear_has_SliceData() {
  _oneof_case_[0] = SLICEDATA_NOT_SET;
}
inline Slice::SliceDataCase Slice::SliceData_case() const {
  return Slice::SliceDataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ZeroStateSlice

// .feedui.ZeroStateSlice.Type type = 1;
inline void ZeroStateSlice::clear_type() {
  type_ = 0;
}
inline ::feedui::ZeroStateSlice_Type ZeroStateSlice::_internal_type() const {
  return static_cast< ::feedui::ZeroStateSlice_Type >(type_);
}
inline ::feedui::ZeroStateSlice_Type ZeroStateSlice::type() const {
  // @@protoc_insertion_point(field_get:feedui.ZeroStateSlice.type)
  return _internal_type();
}
inline void ZeroStateSlice::_internal_set_type(::feedui::ZeroStateSlice_Type value) {
  
  type_ = value;
}
inline void ZeroStateSlice::set_type(::feedui::ZeroStateSlice_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:feedui.ZeroStateSlice.type)
}

// -------------------------------------------------------------------

// LoadingSpinnerSlice

// bool is_at_top = 1;
inline void LoadingSpinnerSlice::clear_is_at_top() {
  is_at_top_ = false;
}
inline bool LoadingSpinnerSlice::_internal_is_at_top() const {
  return is_at_top_;
}
inline bool LoadingSpinnerSlice::is_at_top() const {
  // @@protoc_insertion_point(field_get:feedui.LoadingSpinnerSlice.is_at_top)
  return _internal_is_at_top();
}
inline void LoadingSpinnerSlice::_internal_set_is_at_top(bool value) {
  
  is_at_top_ = value;
}
inline void LoadingSpinnerSlice::set_is_at_top(bool value) {
  _internal_set_is_at_top(value);
  // @@protoc_insertion_point(field_set:feedui.LoadingSpinnerSlice.is_at_top)
}

// -------------------------------------------------------------------

// XSurfaceSlice

// bytes xsurface_frame = 1;
inline void XSurfaceSlice::clear_xsurface_frame() {
  xsurface_frame_.ClearToEmpty();
}
inline const std::string& XSurfaceSlice::xsurface_frame() const {
  // @@protoc_insertion_point(field_get:feedui.XSurfaceSlice.xsurface_frame)
  return _internal_xsurface_frame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void XSurfaceSlice::set_xsurface_frame(ArgT0&& arg0, ArgT... args) {
 
 xsurface_frame_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedui.XSurfaceSlice.xsurface_frame)
}
inline std::string* XSurfaceSlice::mutable_xsurface_frame() {
  std::string* _s = _internal_mutable_xsurface_frame();
  // @@protoc_insertion_point(field_mutable:feedui.XSurfaceSlice.xsurface_frame)
  return _s;
}
inline const std::string& XSurfaceSlice::_internal_xsurface_frame() const {
  return xsurface_frame_.Get();
}
inline void XSurfaceSlice::_internal_set_xsurface_frame(const std::string& value) {
  
  xsurface_frame_.Set(value, GetArenaForAllocation());
}
inline std::string* XSurfaceSlice::_internal_mutable_xsurface_frame() {
  
  return xsurface_frame_.Mutable(GetArenaForAllocation());
}
inline std::string* XSurfaceSlice::release_xsurface_frame() {
  // @@protoc_insertion_point(field_release:feedui.XSurfaceSlice.xsurface_frame)
  return xsurface_frame_.Release();
}
inline void XSurfaceSlice::set_allocated_xsurface_frame(std::string* xsurface_frame) {
  if (xsurface_frame != nullptr) {
    
  } else {
    
  }
  xsurface_frame_.SetAllocated(xsurface_frame, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (xsurface_frame_.IsDefault()) {
    xsurface_frame_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedui.XSurfaceSlice.xsurface_frame)
}

// -------------------------------------------------------------------

// SharedState

// string id = 1;
inline void SharedState::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& SharedState::id() const {
  // @@protoc_insertion_point(field_get:feedui.SharedState.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharedState::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedui.SharedState.id)
}
inline std::string* SharedState::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:feedui.SharedState.id)
  return _s;
}
inline const std::string& SharedState::_internal_id() const {
  return id_.Get();
}
inline void SharedState::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* SharedState::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* SharedState::release_id() {
  // @@protoc_insertion_point(field_release:feedui.SharedState.id)
  return id_.Release();
}
inline void SharedState::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedui.SharedState.id)
}

// bytes xsurface_shared_state = 2;
inline void SharedState::clear_xsurface_shared_state() {
  xsurface_shared_state_.ClearToEmpty();
}
inline const std::string& SharedState::xsurface_shared_state() const {
  // @@protoc_insertion_point(field_get:feedui.SharedState.xsurface_shared_state)
  return _internal_xsurface_shared_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SharedState::set_xsurface_shared_state(ArgT0&& arg0, ArgT... args) {
 
 xsurface_shared_state_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedui.SharedState.xsurface_shared_state)
}
inline std::string* SharedState::mutable_xsurface_shared_state() {
  std::string* _s = _internal_mutable_xsurface_shared_state();
  // @@protoc_insertion_point(field_mutable:feedui.SharedState.xsurface_shared_state)
  return _s;
}
inline const std::string& SharedState::_internal_xsurface_shared_state() const {
  return xsurface_shared_state_.Get();
}
inline void SharedState::_internal_set_xsurface_shared_state(const std::string& value) {
  
  xsurface_shared_state_.Set(value, GetArenaForAllocation());
}
inline std::string* SharedState::_internal_mutable_xsurface_shared_state() {
  
  return xsurface_shared_state_.Mutable(GetArenaForAllocation());
}
inline std::string* SharedState::release_xsurface_shared_state() {
  // @@protoc_insertion_point(field_release:feedui.SharedState.xsurface_shared_state)
  return xsurface_shared_state_.Release();
}
inline void SharedState::set_allocated_xsurface_shared_state(std::string* xsurface_shared_state) {
  if (xsurface_shared_state != nullptr) {
    
  } else {
    
  }
  xsurface_shared_state_.SetAllocated(xsurface_shared_state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (xsurface_shared_state_.IsDefault()) {
    xsurface_shared_state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedui.SharedState.xsurface_shared_state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace feedui

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::feedui::ZeroStateSlice_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fui_2eproto
