// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/capability.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fcapability_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fcapability_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fcapability_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fcapability_2eproto {
  static const uint32_t offsets[];
};
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

enum Capability : int {
  UNKNOWN_CAPABILITY = 0,
  INFINITE_FEED = 5,
  DISMISS_COMMAND = 9,
  UNDO_FOR_DISMISS_COMMAND = 10,
  SPORTS_IN_GAME_UPDATE = 35,
  PERSIST_GAME_CONTENT = 46,
  OPEN_VIDEO_COMMAND = 16,
  UI_THEME_V2 = 17,
  INLINE_VIDEO_AUTOPLAY = 18,
  CARD_MENU = 19,
  REQUEST_SCHEDULE = 20,
  HEART = 23,
  SHARE = 24,
  OPEN_IN_TAB = 27,
  DOWNLOAD_LINK = 28,
  READ_LATER = 30,
  LOTTIE_ANIMATIONS = 37,
  LONG_PRESS_CARD_MENU = 38,
  PREFETCH_METADATA = 43,
  SILK_AMP_OPEN_COMMAND = 44,
  AMP_STORY_PLAYER = 47,
  AMP_GROUP_DATASTORE = 48,
  MATERIAL_NEXT_BASELINE = 60,
  MATERIAL_NEXT_GOOGLE_SANS = 61,
  CONTENT_LIFETIME = 64,
  OPEN_IN_INCOGNITO = 67,
  ON_DEVICE_USER_PROFILE = 70,
  INVALIDATE_CACHE_COMMAND = 73,
  INFO_CARD_ACKNOWLEDGEMENT_TRACKING = 77,
  THANK_CREATOR = 79,
  OPEN_IN_NEW_TAB_IN_GROUP = 81
};
bool Capability_IsValid(int value);
constexpr Capability Capability_MIN = UNKNOWN_CAPABILITY;
constexpr Capability Capability_MAX = OPEN_IN_NEW_TAB_IN_GROUP;
constexpr int Capability_ARRAYSIZE = Capability_MAX + 1;

const std::string& Capability_Name(Capability value);
template<typename T>
inline const std::string& Capability_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Capability>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Capability_Name.");
  return Capability_Name(static_cast<Capability>(enum_t_value));
}
bool Capability_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Capability* value);
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::feedwire::Capability> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fcapability_2eproto
