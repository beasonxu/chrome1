// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/feed_entry_point_source.proto

#include "components/feed/core/proto/v2/wire/feed_entry_point_source.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedwire {
}  // namespace feedwire
namespace feedwire {
bool FeedEntryPointSource_IsValid(int value) {
  switch (value) {
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FeedEntryPointSource_strings[2] = {};

static const char FeedEntryPointSource_names[] =
  "CHROME_DISCOVER_FEED"
  "CHROME_FOLLOWING_FEED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FeedEntryPointSource_entries[] = {
  { {FeedEntryPointSource_names + 0, 20}, 19 },
  { {FeedEntryPointSource_names + 20, 21}, 20 },
};

static const int FeedEntryPointSource_entries_by_number[] = {
  0, // 19 -> CHROME_DISCOVER_FEED
  1, // 20 -> CHROME_FOLLOWING_FEED
};

const std::string& FeedEntryPointSource_Name(
    FeedEntryPointSource value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FeedEntryPointSource_entries,
          FeedEntryPointSource_entries_by_number,
          2, FeedEntryPointSource_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FeedEntryPointSource_entries,
      FeedEntryPointSource_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FeedEntryPointSource_strings[idx].get();
}
bool FeedEntryPointSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FeedEntryPointSource* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FeedEntryPointSource_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<FeedEntryPointSource>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
