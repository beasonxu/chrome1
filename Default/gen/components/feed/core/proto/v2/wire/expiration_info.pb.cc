// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/expiration_info.proto

#include "components/feed/core/proto/v2/wire/expiration_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedwire {
PROTOBUF_CONSTEXPR ExpirationInfo::ExpirationInfo(
    ::_pbi::ConstantInitialized)
  : xsurface_expiration_info_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , expiration_duration_(nullptr)
  , should_expire_(false){}
struct ExpirationInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExpirationInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExpirationInfoDefaultTypeInternal() {}
  union {
    ExpirationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExpirationInfoDefaultTypeInternal _ExpirationInfo_default_instance_;
}  // namespace feedwire
namespace feedwire {

// ===================================================================

class ExpirationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ExpirationInfo>()._has_bits_);
  static void set_has_should_expire(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::feedwire::Duration& expiration_duration(const ExpirationInfo* msg);
  static void set_has_expiration_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_xsurface_expiration_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::feedwire::Duration&
ExpirationInfo::_Internal::expiration_duration(const ExpirationInfo* msg) {
  return *msg->expiration_duration_;
}
void ExpirationInfo::clear_expiration_duration() {
  if (expiration_duration_ != nullptr) expiration_duration_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ExpirationInfo::ExpirationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.ExpirationInfo)
}
ExpirationInfo::ExpirationInfo(const ExpirationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  xsurface_expiration_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    xsurface_expiration_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_xsurface_expiration_info()) {
    xsurface_expiration_info_.Set(from._internal_xsurface_expiration_info(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_expiration_duration()) {
    expiration_duration_ = new ::feedwire::Duration(*from.expiration_duration_);
  } else {
    expiration_duration_ = nullptr;
  }
  should_expire_ = from.should_expire_;
  // @@protoc_insertion_point(copy_constructor:feedwire.ExpirationInfo)
}

inline void ExpirationInfo::SharedCtor() {
xsurface_expiration_info_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  xsurface_expiration_info_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&expiration_duration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&should_expire_) -
    reinterpret_cast<char*>(&expiration_duration_)) + sizeof(should_expire_));
}

ExpirationInfo::~ExpirationInfo() {
  // @@protoc_insertion_point(destructor:feedwire.ExpirationInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExpirationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  xsurface_expiration_info_.Destroy();
  if (this != internal_default_instance()) delete expiration_duration_;
}

void ExpirationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExpirationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.ExpirationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      xsurface_expiration_info_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(expiration_duration_ != nullptr);
      expiration_duration_->Clear();
    }
  }
  should_expire_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExpirationInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool should_expire = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_should_expire(&has_bits);
          should_expire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.Duration expiration_duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiration_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes xsurface_expiration_info = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_xsurface_expiration_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExpirationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.ExpirationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool should_expire = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_should_expire(), target);
  }

  // optional .feedwire.Duration expiration_duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::expiration_duration(this),
        _Internal::expiration_duration(this).GetCachedSize(), target, stream);
  }

  // optional bytes xsurface_expiration_info = 1000;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1000, this->_internal_xsurface_expiration_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.ExpirationInfo)
  return target;
}

size_t ExpirationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.ExpirationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes xsurface_expiration_info = 1000;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_xsurface_expiration_info());
    }

    // optional .feedwire.Duration expiration_duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expiration_duration_);
    }

    // optional bool should_expire = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpirationInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ExpirationInfo*>(
      &from));
}

void ExpirationInfo::MergeFrom(const ExpirationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.ExpirationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_xsurface_expiration_info(from._internal_xsurface_expiration_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_expiration_duration()->::feedwire::Duration::MergeFrom(from._internal_expiration_duration());
    }
    if (cached_has_bits & 0x00000004u) {
      should_expire_ = from.should_expire_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ExpirationInfo::CopyFrom(const ExpirationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.ExpirationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpirationInfo::IsInitialized() const {
  return true;
}

void ExpirationInfo::InternalSwap(ExpirationInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &xsurface_expiration_info_, lhs_arena,
      &other->xsurface_expiration_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExpirationInfo, should_expire_)
      + sizeof(ExpirationInfo::should_expire_)
      - PROTOBUF_FIELD_OFFSET(ExpirationInfo, expiration_duration_)>(
          reinterpret_cast<char*>(&expiration_duration_),
          reinterpret_cast<char*>(&other->expiration_duration_));
}

std::string ExpirationInfo::GetTypeName() const {
  return "feedwire.ExpirationInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::feedwire::ExpirationInfo*
Arena::CreateMaybeMessage< ::feedwire::ExpirationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::ExpirationInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
