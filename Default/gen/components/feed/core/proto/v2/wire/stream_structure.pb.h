// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/stream_structure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fstream_5fstructure_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fstream_5fstructure_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/feed/core/proto/v2/wire/xsurface_content.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fstream_5fstructure_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fstream_5fstructure_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
class Cluster;
struct ClusterDefaultTypeInternal;
extern ClusterDefaultTypeInternal _Cluster_default_instance_;
class Content;
struct ContentDefaultTypeInternal;
extern ContentDefaultTypeInternal _Content_default_instance_;
class PrefetchMetadata;
struct PrefetchMetadataDefaultTypeInternal;
extern PrefetchMetadataDefaultTypeInternal _PrefetchMetadata_default_instance_;
class Stream;
struct StreamDefaultTypeInternal;
extern StreamDefaultTypeInternal _Stream_default_instance_;
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::Cluster* Arena::CreateMaybeMessage<::feedwire::Cluster>(Arena*);
template<> ::feedwire::Content* Arena::CreateMaybeMessage<::feedwire::Content>(Arena*);
template<> ::feedwire::PrefetchMetadata* Arena::CreateMaybeMessage<::feedwire::PrefetchMetadata>(Arena*);
template<> ::feedwire::Stream* Arena::CreateMaybeMessage<::feedwire::Stream>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

enum Content_Alignment : int {
  Content_Alignment_ALIGNMENT_UNSPECIFIED = 0,
  Content_Alignment_DEFAULT = 1,
  Content_Alignment_CENTER = 2
};
bool Content_Alignment_IsValid(int value);
constexpr Content_Alignment Content_Alignment_Alignment_MIN = Content_Alignment_ALIGNMENT_UNSPECIFIED;
constexpr Content_Alignment Content_Alignment_Alignment_MAX = Content_Alignment_CENTER;
constexpr int Content_Alignment_Alignment_ARRAYSIZE = Content_Alignment_Alignment_MAX + 1;

const std::string& Content_Alignment_Name(Content_Alignment value);
template<typename T>
inline const std::string& Content_Alignment_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Content_Alignment>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Content_Alignment_Name.");
  return Content_Alignment_Name(static_cast<Content_Alignment>(enum_t_value));
}
bool Content_Alignment_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Content_Alignment* value);
// ===================================================================

class Stream final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.Stream) */ {
 public:
  inline Stream() : Stream(nullptr) {}
  ~Stream() override;
  explicit PROTOBUF_CONSTEXPR Stream(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stream(const Stream& from);
  Stream(Stream&& from) noexcept
    : Stream() {
    *this = ::std::move(from);
  }

  inline Stream& operator=(const Stream& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stream& operator=(Stream&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Stream& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stream* internal_default_instance() {
    return reinterpret_cast<const Stream*>(
               &_Stream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Stream& a, Stream& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Stream* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stream>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Stream& from);
  void MergeFrom(const Stream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Stream* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.Stream";
  }
  protected:
  explicit Stream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:feedwire.Stream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fstream_5fstructure_2eproto;
};
// -------------------------------------------------------------------

class Cluster final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.Cluster) */ {
 public:
  inline Cluster() : Cluster(nullptr) {}
  ~Cluster() override;
  explicit PROTOBUF_CONSTEXPR Cluster(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cluster(const Cluster& from);
  Cluster(Cluster&& from) noexcept
    : Cluster() {
    *this = ::std::move(from);
  }

  inline Cluster& operator=(const Cluster& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cluster& operator=(Cluster&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Cluster& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cluster* internal_default_instance() {
    return reinterpret_cast<const Cluster*>(
               &_Cluster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Cluster& a, Cluster& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Cluster* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cluster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Cluster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Cluster>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Cluster& from);
  void MergeFrom(const Cluster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Cluster* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.Cluster";
  }
  protected:
  explicit Cluster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:feedwire.Cluster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fstream_5fstructure_2eproto;
};
// -------------------------------------------------------------------

class PrefetchMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.PrefetchMetadata) */ {
 public:
  inline PrefetchMetadata() : PrefetchMetadata(nullptr) {}
  ~PrefetchMetadata() override;
  explicit PROTOBUF_CONSTEXPR PrefetchMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrefetchMetadata(const PrefetchMetadata& from);
  PrefetchMetadata(PrefetchMetadata&& from) noexcept
    : PrefetchMetadata() {
    *this = ::std::move(from);
  }

  inline PrefetchMetadata& operator=(const PrefetchMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrefetchMetadata& operator=(PrefetchMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PrefetchMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrefetchMetadata* internal_default_instance() {
    return reinterpret_cast<const PrefetchMetadata*>(
               &_PrefetchMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PrefetchMetadata& a, PrefetchMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PrefetchMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrefetchMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrefetchMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrefetchMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PrefetchMetadata& from);
  void MergeFrom(const PrefetchMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrefetchMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.PrefetchMetadata";
  }
  protected:
  explicit PrefetchMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalImageUrlsFieldNumber = 4,
    kUriFieldNumber = 1,
    kTitleFieldNumber = 2,
    kImageUrlFieldNumber = 3,
    kPublisherFieldNumber = 5,
    kFaviconUrlFieldNumber = 6,
    kSnippetFieldNumber = 7,
    kBadgeIdFieldNumber = 8,
  };
  // repeated string additional_image_urls = 4;
  int additional_image_urls_size() const;
  private:
  int _internal_additional_image_urls_size() const;
  public:
  void clear_additional_image_urls();
  const std::string& additional_image_urls(int index) const;
  std::string* mutable_additional_image_urls(int index);
  void set_additional_image_urls(int index, const std::string& value);
  void set_additional_image_urls(int index, std::string&& value);
  void set_additional_image_urls(int index, const char* value);
  void set_additional_image_urls(int index, const char* value, size_t size);
  std::string* add_additional_image_urls();
  void add_additional_image_urls(const std::string& value);
  void add_additional_image_urls(std::string&& value);
  void add_additional_image_urls(const char* value);
  void add_additional_image_urls(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& additional_image_urls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_additional_image_urls();
  private:
  const std::string& _internal_additional_image_urls(int index) const;
  std::string* _internal_add_additional_image_urls();
  public:

  // optional string uri = 1;
  bool has_uri() const;
  private:
  bool _internal_has_uri() const;
  public:
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // optional string title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string image_url = 3;
  bool has_image_url() const;
  private:
  bool _internal_has_image_url() const;
  public:
  void clear_image_url();
  const std::string& image_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_url();
  PROTOBUF_NODISCARD std::string* release_image_url();
  void set_allocated_image_url(std::string* image_url);
  private:
  const std::string& _internal_image_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_url(const std::string& value);
  std::string* _internal_mutable_image_url();
  public:

  // optional string publisher = 5;
  bool has_publisher() const;
  private:
  bool _internal_has_publisher() const;
  public:
  void clear_publisher();
  const std::string& publisher() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_publisher(ArgT0&& arg0, ArgT... args);
  std::string* mutable_publisher();
  PROTOBUF_NODISCARD std::string* release_publisher();
  void set_allocated_publisher(std::string* publisher);
  private:
  const std::string& _internal_publisher() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_publisher(const std::string& value);
  std::string* _internal_mutable_publisher();
  public:

  // optional string favicon_url = 6;
  bool has_favicon_url() const;
  private:
  bool _internal_has_favicon_url() const;
  public:
  void clear_favicon_url();
  const std::string& favicon_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_favicon_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_favicon_url();
  PROTOBUF_NODISCARD std::string* release_favicon_url();
  void set_allocated_favicon_url(std::string* favicon_url);
  private:
  const std::string& _internal_favicon_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_favicon_url(const std::string& value);
  std::string* _internal_mutable_favicon_url();
  public:

  // optional string snippet = 7;
  bool has_snippet() const;
  private:
  bool _internal_has_snippet() const;
  public:
  void clear_snippet();
  const std::string& snippet() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snippet(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snippet();
  PROTOBUF_NODISCARD std::string* release_snippet();
  void set_allocated_snippet(std::string* snippet);
  private:
  const std::string& _internal_snippet() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snippet(const std::string& value);
  std::string* _internal_mutable_snippet();
  public:

  // optional string badge_id = 8;
  bool has_badge_id() const;
  private:
  bool _internal_has_badge_id() const;
  public:
  void clear_badge_id();
  const std::string& badge_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_badge_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_badge_id();
  PROTOBUF_NODISCARD std::string* release_badge_id();
  void set_allocated_badge_id(std::string* badge_id);
  private:
  const std::string& _internal_badge_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_badge_id(const std::string& value);
  std::string* _internal_mutable_badge_id();
  public:

  // @@protoc_insertion_point(class_scope:feedwire.PrefetchMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> additional_image_urls_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publisher_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr favicon_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snippet_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr badge_id_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fstream_5fstructure_2eproto;
};
// -------------------------------------------------------------------

class Content final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.Content) */ {
 public:
  inline Content() : Content(nullptr) {}
  ~Content() override;
  explicit PROTOBUF_CONSTEXPR Content(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Content(const Content& from);
  Content(Content&& from) noexcept
    : Content() {
    *this = ::std::move(from);
  }

  inline Content& operator=(const Content& from) {
    CopyFrom(from);
    return *this;
  }
  inline Content& operator=(Content&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Content& default_instance() {
    return *internal_default_instance();
  }
  static inline const Content* internal_default_instance() {
    return reinterpret_cast<const Content*>(
               &_Content_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Content& a, Content& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Content* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Content* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Content* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Content>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Content& from);
  void MergeFrom(const Content& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Content* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.Content";
  }
  protected:
  explicit Content(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Content_Alignment Alignment;
  static constexpr Alignment ALIGNMENT_UNSPECIFIED =
    Content_Alignment_ALIGNMENT_UNSPECIFIED;
  static constexpr Alignment DEFAULT =
    Content_Alignment_DEFAULT;
  static constexpr Alignment CENTER =
    Content_Alignment_CENTER;
  static inline bool Alignment_IsValid(int value) {
    return Content_Alignment_IsValid(value);
  }
  static constexpr Alignment Alignment_MIN =
    Content_Alignment_Alignment_MIN;
  static constexpr Alignment Alignment_MAX =
    Content_Alignment_Alignment_MAX;
  static constexpr int Alignment_ARRAYSIZE =
    Content_Alignment_Alignment_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Alignment_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Alignment>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Alignment_Name.");
    return Content_Alignment_Name(enum_t_value);
  }
  static inline bool Alignment_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Alignment* value) {
    return Content_Alignment_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPrefetchMetadataFieldNumber = 4,
    kXsurfaceContentFieldNumber = 1000,
    kAlignmentFieldNumber = 5,
  };
  // repeated .feedwire.PrefetchMetadata prefetch_metadata = 4;
  int prefetch_metadata_size() const;
  private:
  int _internal_prefetch_metadata_size() const;
  public:
  void clear_prefetch_metadata();
  ::feedwire::PrefetchMetadata* mutable_prefetch_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::PrefetchMetadata >*
      mutable_prefetch_metadata();
  private:
  const ::feedwire::PrefetchMetadata& _internal_prefetch_metadata(int index) const;
  ::feedwire::PrefetchMetadata* _internal_add_prefetch_metadata();
  public:
  const ::feedwire::PrefetchMetadata& prefetch_metadata(int index) const;
  ::feedwire::PrefetchMetadata* add_prefetch_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::PrefetchMetadata >&
      prefetch_metadata() const;

  // optional .feedwire.XSurfaceContent xsurface_content = 1000;
  bool has_xsurface_content() const;
  private:
  bool _internal_has_xsurface_content() const;
  public:
  void clear_xsurface_content();
  const ::feedwire::XSurfaceContent& xsurface_content() const;
  PROTOBUF_NODISCARD ::feedwire::XSurfaceContent* release_xsurface_content();
  ::feedwire::XSurfaceContent* mutable_xsurface_content();
  void set_allocated_xsurface_content(::feedwire::XSurfaceContent* xsurface_content);
  private:
  const ::feedwire::XSurfaceContent& _internal_xsurface_content() const;
  ::feedwire::XSurfaceContent* _internal_mutable_xsurface_content();
  public:
  void unsafe_arena_set_allocated_xsurface_content(
      ::feedwire::XSurfaceContent* xsurface_content);
  ::feedwire::XSurfaceContent* unsafe_arena_release_xsurface_content();

  // optional .feedwire.Content.Alignment alignment = 5;
  bool has_alignment() const;
  private:
  bool _internal_has_alignment() const;
  public:
  void clear_alignment();
  ::feedwire::Content_Alignment alignment() const;
  void set_alignment(::feedwire::Content_Alignment value);
  private:
  ::feedwire::Content_Alignment _internal_alignment() const;
  void _internal_set_alignment(::feedwire::Content_Alignment value);
  public:

  // @@protoc_insertion_point(class_scope:feedwire.Content)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::PrefetchMetadata > prefetch_metadata_;
  ::feedwire::XSurfaceContent* xsurface_content_;
  int alignment_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fstream_5fstructure_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Stream

// -------------------------------------------------------------------

// Cluster

// -------------------------------------------------------------------

// PrefetchMetadata

// optional string uri = 1;
inline bool PrefetchMetadata::_internal_has_uri() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrefetchMetadata::has_uri() const {
  return _internal_has_uri();
}
inline void PrefetchMetadata::clear_uri() {
  uri_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrefetchMetadata::uri() const {
  // @@protoc_insertion_point(field_get:feedwire.PrefetchMetadata.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrefetchMetadata::set_uri(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.PrefetchMetadata.uri)
}
inline std::string* PrefetchMetadata::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:feedwire.PrefetchMetadata.uri)
  return _s;
}
inline const std::string& PrefetchMetadata::_internal_uri() const {
  return uri_.Get();
}
inline void PrefetchMetadata::_internal_set_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uri_.Set(value, GetArenaForAllocation());
}
inline std::string* PrefetchMetadata::_internal_mutable_uri() {
  _has_bits_[0] |= 0x00000001u;
  return uri_.Mutable(GetArenaForAllocation());
}
inline std::string* PrefetchMetadata::release_uri() {
  // @@protoc_insertion_point(field_release:feedwire.PrefetchMetadata.uri)
  if (!_internal_has_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = uri_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uri_.IsDefault()) {
    uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrefetchMetadata::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uri_.IsDefault()) {
    uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.PrefetchMetadata.uri)
}

// optional string title = 2;
inline bool PrefetchMetadata::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrefetchMetadata::has_title() const {
  return _internal_has_title();
}
inline void PrefetchMetadata::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PrefetchMetadata::title() const {
  // @@protoc_insertion_point(field_get:feedwire.PrefetchMetadata.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrefetchMetadata::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.PrefetchMetadata.title)
}
inline std::string* PrefetchMetadata::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:feedwire.PrefetchMetadata.title)
  return _s;
}
inline const std::string& PrefetchMetadata::_internal_title() const {
  return title_.Get();
}
inline void PrefetchMetadata::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* PrefetchMetadata::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* PrefetchMetadata::release_title() {
  // @@protoc_insertion_point(field_release:feedwire.PrefetchMetadata.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrefetchMetadata::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.PrefetchMetadata.title)
}

// optional string image_url = 3;
inline bool PrefetchMetadata::_internal_has_image_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PrefetchMetadata::has_image_url() const {
  return _internal_has_image_url();
}
inline void PrefetchMetadata::clear_image_url() {
  image_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PrefetchMetadata::image_url() const {
  // @@protoc_insertion_point(field_get:feedwire.PrefetchMetadata.image_url)
  return _internal_image_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrefetchMetadata::set_image_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 image_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.PrefetchMetadata.image_url)
}
inline std::string* PrefetchMetadata::mutable_image_url() {
  std::string* _s = _internal_mutable_image_url();
  // @@protoc_insertion_point(field_mutable:feedwire.PrefetchMetadata.image_url)
  return _s;
}
inline const std::string& PrefetchMetadata::_internal_image_url() const {
  return image_url_.Get();
}
inline void PrefetchMetadata::_internal_set_image_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  image_url_.Set(value, GetArenaForAllocation());
}
inline std::string* PrefetchMetadata::_internal_mutable_image_url() {
  _has_bits_[0] |= 0x00000004u;
  return image_url_.Mutable(GetArenaForAllocation());
}
inline std::string* PrefetchMetadata::release_image_url() {
  // @@protoc_insertion_point(field_release:feedwire.PrefetchMetadata.image_url)
  if (!_internal_has_image_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = image_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_url_.IsDefault()) {
    image_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrefetchMetadata::set_allocated_image_url(std::string* image_url) {
  if (image_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  image_url_.SetAllocated(image_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_url_.IsDefault()) {
    image_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.PrefetchMetadata.image_url)
}

// repeated string additional_image_urls = 4;
inline int PrefetchMetadata::_internal_additional_image_urls_size() const {
  return additional_image_urls_.size();
}
inline int PrefetchMetadata::additional_image_urls_size() const {
  return _internal_additional_image_urls_size();
}
inline void PrefetchMetadata::clear_additional_image_urls() {
  additional_image_urls_.Clear();
}
inline std::string* PrefetchMetadata::add_additional_image_urls() {
  std::string* _s = _internal_add_additional_image_urls();
  // @@protoc_insertion_point(field_add_mutable:feedwire.PrefetchMetadata.additional_image_urls)
  return _s;
}
inline const std::string& PrefetchMetadata::_internal_additional_image_urls(int index) const {
  return additional_image_urls_.Get(index);
}
inline const std::string& PrefetchMetadata::additional_image_urls(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.PrefetchMetadata.additional_image_urls)
  return _internal_additional_image_urls(index);
}
inline std::string* PrefetchMetadata::mutable_additional_image_urls(int index) {
  // @@protoc_insertion_point(field_mutable:feedwire.PrefetchMetadata.additional_image_urls)
  return additional_image_urls_.Mutable(index);
}
inline void PrefetchMetadata::set_additional_image_urls(int index, const std::string& value) {
  additional_image_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:feedwire.PrefetchMetadata.additional_image_urls)
}
inline void PrefetchMetadata::set_additional_image_urls(int index, std::string&& value) {
  additional_image_urls_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:feedwire.PrefetchMetadata.additional_image_urls)
}
inline void PrefetchMetadata::set_additional_image_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  additional_image_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:feedwire.PrefetchMetadata.additional_image_urls)
}
inline void PrefetchMetadata::set_additional_image_urls(int index, const char* value, size_t size) {
  additional_image_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:feedwire.PrefetchMetadata.additional_image_urls)
}
inline std::string* PrefetchMetadata::_internal_add_additional_image_urls() {
  return additional_image_urls_.Add();
}
inline void PrefetchMetadata::add_additional_image_urls(const std::string& value) {
  additional_image_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:feedwire.PrefetchMetadata.additional_image_urls)
}
inline void PrefetchMetadata::add_additional_image_urls(std::string&& value) {
  additional_image_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:feedwire.PrefetchMetadata.additional_image_urls)
}
inline void PrefetchMetadata::add_additional_image_urls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  additional_image_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:feedwire.PrefetchMetadata.additional_image_urls)
}
inline void PrefetchMetadata::add_additional_image_urls(const char* value, size_t size) {
  additional_image_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:feedwire.PrefetchMetadata.additional_image_urls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PrefetchMetadata::additional_image_urls() const {
  // @@protoc_insertion_point(field_list:feedwire.PrefetchMetadata.additional_image_urls)
  return additional_image_urls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PrefetchMetadata::mutable_additional_image_urls() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.PrefetchMetadata.additional_image_urls)
  return &additional_image_urls_;
}

// optional string publisher = 5;
inline bool PrefetchMetadata::_internal_has_publisher() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PrefetchMetadata::has_publisher() const {
  return _internal_has_publisher();
}
inline void PrefetchMetadata::clear_publisher() {
  publisher_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PrefetchMetadata::publisher() const {
  // @@protoc_insertion_point(field_get:feedwire.PrefetchMetadata.publisher)
  return _internal_publisher();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrefetchMetadata::set_publisher(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 publisher_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.PrefetchMetadata.publisher)
}
inline std::string* PrefetchMetadata::mutable_publisher() {
  std::string* _s = _internal_mutable_publisher();
  // @@protoc_insertion_point(field_mutable:feedwire.PrefetchMetadata.publisher)
  return _s;
}
inline const std::string& PrefetchMetadata::_internal_publisher() const {
  return publisher_.Get();
}
inline void PrefetchMetadata::_internal_set_publisher(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  publisher_.Set(value, GetArenaForAllocation());
}
inline std::string* PrefetchMetadata::_internal_mutable_publisher() {
  _has_bits_[0] |= 0x00000008u;
  return publisher_.Mutable(GetArenaForAllocation());
}
inline std::string* PrefetchMetadata::release_publisher() {
  // @@protoc_insertion_point(field_release:feedwire.PrefetchMetadata.publisher)
  if (!_internal_has_publisher()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = publisher_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (publisher_.IsDefault()) {
    publisher_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrefetchMetadata::set_allocated_publisher(std::string* publisher) {
  if (publisher != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  publisher_.SetAllocated(publisher, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (publisher_.IsDefault()) {
    publisher_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.PrefetchMetadata.publisher)
}

// optional string favicon_url = 6;
inline bool PrefetchMetadata::_internal_has_favicon_url() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PrefetchMetadata::has_favicon_url() const {
  return _internal_has_favicon_url();
}
inline void PrefetchMetadata::clear_favicon_url() {
  favicon_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PrefetchMetadata::favicon_url() const {
  // @@protoc_insertion_point(field_get:feedwire.PrefetchMetadata.favicon_url)
  return _internal_favicon_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrefetchMetadata::set_favicon_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 favicon_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.PrefetchMetadata.favicon_url)
}
inline std::string* PrefetchMetadata::mutable_favicon_url() {
  std::string* _s = _internal_mutable_favicon_url();
  // @@protoc_insertion_point(field_mutable:feedwire.PrefetchMetadata.favicon_url)
  return _s;
}
inline const std::string& PrefetchMetadata::_internal_favicon_url() const {
  return favicon_url_.Get();
}
inline void PrefetchMetadata::_internal_set_favicon_url(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  favicon_url_.Set(value, GetArenaForAllocation());
}
inline std::string* PrefetchMetadata::_internal_mutable_favicon_url() {
  _has_bits_[0] |= 0x00000010u;
  return favicon_url_.Mutable(GetArenaForAllocation());
}
inline std::string* PrefetchMetadata::release_favicon_url() {
  // @@protoc_insertion_point(field_release:feedwire.PrefetchMetadata.favicon_url)
  if (!_internal_has_favicon_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = favicon_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (favicon_url_.IsDefault()) {
    favicon_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrefetchMetadata::set_allocated_favicon_url(std::string* favicon_url) {
  if (favicon_url != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  favicon_url_.SetAllocated(favicon_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (favicon_url_.IsDefault()) {
    favicon_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.PrefetchMetadata.favicon_url)
}

// optional string snippet = 7;
inline bool PrefetchMetadata::_internal_has_snippet() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PrefetchMetadata::has_snippet() const {
  return _internal_has_snippet();
}
inline void PrefetchMetadata::clear_snippet() {
  snippet_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& PrefetchMetadata::snippet() const {
  // @@protoc_insertion_point(field_get:feedwire.PrefetchMetadata.snippet)
  return _internal_snippet();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrefetchMetadata::set_snippet(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 snippet_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.PrefetchMetadata.snippet)
}
inline std::string* PrefetchMetadata::mutable_snippet() {
  std::string* _s = _internal_mutable_snippet();
  // @@protoc_insertion_point(field_mutable:feedwire.PrefetchMetadata.snippet)
  return _s;
}
inline const std::string& PrefetchMetadata::_internal_snippet() const {
  return snippet_.Get();
}
inline void PrefetchMetadata::_internal_set_snippet(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  snippet_.Set(value, GetArenaForAllocation());
}
inline std::string* PrefetchMetadata::_internal_mutable_snippet() {
  _has_bits_[0] |= 0x00000020u;
  return snippet_.Mutable(GetArenaForAllocation());
}
inline std::string* PrefetchMetadata::release_snippet() {
  // @@protoc_insertion_point(field_release:feedwire.PrefetchMetadata.snippet)
  if (!_internal_has_snippet()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = snippet_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (snippet_.IsDefault()) {
    snippet_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrefetchMetadata::set_allocated_snippet(std::string* snippet) {
  if (snippet != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  snippet_.SetAllocated(snippet, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (snippet_.IsDefault()) {
    snippet_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.PrefetchMetadata.snippet)
}

// optional string badge_id = 8;
inline bool PrefetchMetadata::_internal_has_badge_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PrefetchMetadata::has_badge_id() const {
  return _internal_has_badge_id();
}
inline void PrefetchMetadata::clear_badge_id() {
  badge_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& PrefetchMetadata::badge_id() const {
  // @@protoc_insertion_point(field_get:feedwire.PrefetchMetadata.badge_id)
  return _internal_badge_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrefetchMetadata::set_badge_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 badge_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.PrefetchMetadata.badge_id)
}
inline std::string* PrefetchMetadata::mutable_badge_id() {
  std::string* _s = _internal_mutable_badge_id();
  // @@protoc_insertion_point(field_mutable:feedwire.PrefetchMetadata.badge_id)
  return _s;
}
inline const std::string& PrefetchMetadata::_internal_badge_id() const {
  return badge_id_.Get();
}
inline void PrefetchMetadata::_internal_set_badge_id(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  badge_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PrefetchMetadata::_internal_mutable_badge_id() {
  _has_bits_[0] |= 0x00000040u;
  return badge_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PrefetchMetadata::release_badge_id() {
  // @@protoc_insertion_point(field_release:feedwire.PrefetchMetadata.badge_id)
  if (!_internal_has_badge_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = badge_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (badge_id_.IsDefault()) {
    badge_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrefetchMetadata::set_allocated_badge_id(std::string* badge_id) {
  if (badge_id != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  badge_id_.SetAllocated(badge_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (badge_id_.IsDefault()) {
    badge_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.PrefetchMetadata.badge_id)
}

// -------------------------------------------------------------------

// Content

// repeated .feedwire.PrefetchMetadata prefetch_metadata = 4;
inline int Content::_internal_prefetch_metadata_size() const {
  return prefetch_metadata_.size();
}
inline int Content::prefetch_metadata_size() const {
  return _internal_prefetch_metadata_size();
}
inline void Content::clear_prefetch_metadata() {
  prefetch_metadata_.Clear();
}
inline ::feedwire::PrefetchMetadata* Content::mutable_prefetch_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:feedwire.Content.prefetch_metadata)
  return prefetch_metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::PrefetchMetadata >*
Content::mutable_prefetch_metadata() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.Content.prefetch_metadata)
  return &prefetch_metadata_;
}
inline const ::feedwire::PrefetchMetadata& Content::_internal_prefetch_metadata(int index) const {
  return prefetch_metadata_.Get(index);
}
inline const ::feedwire::PrefetchMetadata& Content::prefetch_metadata(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.Content.prefetch_metadata)
  return _internal_prefetch_metadata(index);
}
inline ::feedwire::PrefetchMetadata* Content::_internal_add_prefetch_metadata() {
  return prefetch_metadata_.Add();
}
inline ::feedwire::PrefetchMetadata* Content::add_prefetch_metadata() {
  ::feedwire::PrefetchMetadata* _add = _internal_add_prefetch_metadata();
  // @@protoc_insertion_point(field_add:feedwire.Content.prefetch_metadata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::PrefetchMetadata >&
Content::prefetch_metadata() const {
  // @@protoc_insertion_point(field_list:feedwire.Content.prefetch_metadata)
  return prefetch_metadata_;
}

// optional .feedwire.Content.Alignment alignment = 5;
inline bool Content::_internal_has_alignment() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Content::has_alignment() const {
  return _internal_has_alignment();
}
inline void Content::clear_alignment() {
  alignment_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::feedwire::Content_Alignment Content::_internal_alignment() const {
  return static_cast< ::feedwire::Content_Alignment >(alignment_);
}
inline ::feedwire::Content_Alignment Content::alignment() const {
  // @@protoc_insertion_point(field_get:feedwire.Content.alignment)
  return _internal_alignment();
}
inline void Content::_internal_set_alignment(::feedwire::Content_Alignment value) {
  assert(::feedwire::Content_Alignment_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  alignment_ = value;
}
inline void Content::set_alignment(::feedwire::Content_Alignment value) {
  _internal_set_alignment(value);
  // @@protoc_insertion_point(field_set:feedwire.Content.alignment)
}

// optional .feedwire.XSurfaceContent xsurface_content = 1000;
inline bool Content::_internal_has_xsurface_content() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || xsurface_content_ != nullptr);
  return value;
}
inline bool Content::has_xsurface_content() const {
  return _internal_has_xsurface_content();
}
inline const ::feedwire::XSurfaceContent& Content::_internal_xsurface_content() const {
  const ::feedwire::XSurfaceContent* p = xsurface_content_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::XSurfaceContent&>(
      ::feedwire::_XSurfaceContent_default_instance_);
}
inline const ::feedwire::XSurfaceContent& Content::xsurface_content() const {
  // @@protoc_insertion_point(field_get:feedwire.Content.xsurface_content)
  return _internal_xsurface_content();
}
inline void Content::unsafe_arena_set_allocated_xsurface_content(
    ::feedwire::XSurfaceContent* xsurface_content) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(xsurface_content_);
  }
  xsurface_content_ = xsurface_content;
  if (xsurface_content) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.Content.xsurface_content)
}
inline ::feedwire::XSurfaceContent* Content::release_xsurface_content() {
  _has_bits_[0] &= ~0x00000001u;
  ::feedwire::XSurfaceContent* temp = xsurface_content_;
  xsurface_content_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::XSurfaceContent* Content::unsafe_arena_release_xsurface_content() {
  // @@protoc_insertion_point(field_release:feedwire.Content.xsurface_content)
  _has_bits_[0] &= ~0x00000001u;
  ::feedwire::XSurfaceContent* temp = xsurface_content_;
  xsurface_content_ = nullptr;
  return temp;
}
inline ::feedwire::XSurfaceContent* Content::_internal_mutable_xsurface_content() {
  _has_bits_[0] |= 0x00000001u;
  if (xsurface_content_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::XSurfaceContent>(GetArenaForAllocation());
    xsurface_content_ = p;
  }
  return xsurface_content_;
}
inline ::feedwire::XSurfaceContent* Content::mutable_xsurface_content() {
  ::feedwire::XSurfaceContent* _msg = _internal_mutable_xsurface_content();
  // @@protoc_insertion_point(field_mutable:feedwire.Content.xsurface_content)
  return _msg;
}
inline void Content::set_allocated_xsurface_content(::feedwire::XSurfaceContent* xsurface_content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(xsurface_content_);
  }
  if (xsurface_content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(xsurface_content));
    if (message_arena != submessage_arena) {
      xsurface_content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, xsurface_content, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  xsurface_content_ = xsurface_content;
  // @@protoc_insertion_point(field_set_allocated:feedwire.Content.xsurface_content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::feedwire::Content_Alignment> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fstream_5fstructure_2eproto
