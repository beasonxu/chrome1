// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/client_info.proto

#include "components/feed/core/proto/v2/wire/client_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedwire {
PROTOBUF_CONSTEXPR ClientInfo::ClientInfo(
    ::_pbi::ConstantInitialized)
  : display_info_()
  , locale_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , client_instance_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , advertising_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , platform_version_(nullptr)
  , app_version_(nullptr)
  , device_(nullptr)
  , chrome_client_info_(nullptr)
  , platform_type_(0)

  , app_type_(3)
{}
struct ClientInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientInfoDefaultTypeInternal() {}
  union {
    ClientInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientInfoDefaultTypeInternal _ClientInfo_default_instance_;
}  // namespace feedwire
namespace feedwire {
bool ClientInfo_PlatformType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientInfo_PlatformType_strings[3] = {};

static const char ClientInfo_PlatformType_names[] =
  "ANDROID_ID"
  "IOS"
  "UNKNOWN_PLATFORM";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientInfo_PlatformType_entries[] = {
  { {ClientInfo_PlatformType_names + 0, 10}, 1 },
  { {ClientInfo_PlatformType_names + 10, 3}, 2 },
  { {ClientInfo_PlatformType_names + 13, 16}, 0 },
};

static const int ClientInfo_PlatformType_entries_by_number[] = {
  2, // 0 -> UNKNOWN_PLATFORM
  0, // 1 -> ANDROID_ID
  1, // 2 -> IOS
};

const std::string& ClientInfo_PlatformType_Name(
    ClientInfo_PlatformType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientInfo_PlatformType_entries,
          ClientInfo_PlatformType_entries_by_number,
          3, ClientInfo_PlatformType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientInfo_PlatformType_entries,
      ClientInfo_PlatformType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientInfo_PlatformType_strings[idx].get();
}
bool ClientInfo_PlatformType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientInfo_PlatformType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientInfo_PlatformType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ClientInfo_PlatformType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientInfo_PlatformType ClientInfo::UNKNOWN_PLATFORM;
constexpr ClientInfo_PlatformType ClientInfo::ANDROID_ID;
constexpr ClientInfo_PlatformType ClientInfo::IOS;
constexpr ClientInfo_PlatformType ClientInfo::PlatformType_MIN;
constexpr ClientInfo_PlatformType ClientInfo::PlatformType_MAX;
constexpr int ClientInfo::PlatformType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ClientInfo_AppType_IsValid(int value) {
  switch (value) {
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientInfo_AppType_strings[1] = {};

static const char ClientInfo_AppType_names[] =
  "CHROME_ANDROID";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientInfo_AppType_entries[] = {
  { {ClientInfo_AppType_names + 0, 14}, 3 },
};

static const int ClientInfo_AppType_entries_by_number[] = {
  0, // 3 -> CHROME_ANDROID
};

const std::string& ClientInfo_AppType_Name(
    ClientInfo_AppType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientInfo_AppType_entries,
          ClientInfo_AppType_entries_by_number,
          1, ClientInfo_AppType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientInfo_AppType_entries,
      ClientInfo_AppType_entries_by_number,
      1, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientInfo_AppType_strings[idx].get();
}
bool ClientInfo_AppType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientInfo_AppType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientInfo_AppType_entries, 1, name, &int_value);
  if (success) {
    *value = static_cast<ClientInfo_AppType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientInfo_AppType ClientInfo::CHROME_ANDROID;
constexpr ClientInfo_AppType ClientInfo::AppType_MIN;
constexpr ClientInfo_AppType ClientInfo::AppType_MAX;
constexpr int ClientInfo::AppType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ClientInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientInfo>()._has_bits_);
  static void set_has_platform_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::feedwire::Version& platform_version(const ClientInfo* msg);
  static void set_has_platform_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_app_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::feedwire::Version& app_version(const ClientInfo* msg);
  static void set_has_app_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_advertising_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::feedwire::Device& device(const ClientInfo* msg);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::feedwire::ChromeClientInfo& chrome_client_info(const ClientInfo* msg);
  static void set_has_chrome_client_info(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::feedwire::Version&
ClientInfo::_Internal::platform_version(const ClientInfo* msg) {
  return *msg->platform_version_;
}
const ::feedwire::Version&
ClientInfo::_Internal::app_version(const ClientInfo* msg) {
  return *msg->app_version_;
}
const ::feedwire::Device&
ClientInfo::_Internal::device(const ClientInfo* msg) {
  return *msg->device_;
}
const ::feedwire::ChromeClientInfo&
ClientInfo::_Internal::chrome_client_info(const ClientInfo* msg) {
  return *msg->chrome_client_info_;
}
void ClientInfo::clear_platform_version() {
  if (platform_version_ != nullptr) platform_version_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ClientInfo::clear_app_version() {
  if (app_version_ != nullptr) app_version_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ClientInfo::clear_display_info() {
  display_info_.Clear();
}
void ClientInfo::clear_device() {
  if (device_ != nullptr) device_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ClientInfo::clear_chrome_client_info() {
  if (chrome_client_info_ != nullptr) chrome_client_info_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
ClientInfo::ClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  display_info_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.ClientInfo)
}
ClientInfo::ClientInfo(const ClientInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      display_info_(from.display_info_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_locale()) {
    locale_.Set(from._internal_locale(), 
      GetArenaForAllocation());
  }
  client_instance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_instance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_client_instance_id()) {
    client_instance_id_.Set(from._internal_client_instance_id(), 
      GetArenaForAllocation());
  }
  advertising_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    advertising_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_advertising_id()) {
    advertising_id_.Set(from._internal_advertising_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_platform_version()) {
    platform_version_ = new ::feedwire::Version(*from.platform_version_);
  } else {
    platform_version_ = nullptr;
  }
  if (from._internal_has_app_version()) {
    app_version_ = new ::feedwire::Version(*from.app_version_);
  } else {
    app_version_ = nullptr;
  }
  if (from._internal_has_device()) {
    device_ = new ::feedwire::Device(*from.device_);
  } else {
    device_ = nullptr;
  }
  if (from._internal_has_chrome_client_info()) {
    chrome_client_info_ = new ::feedwire::ChromeClientInfo(*from.chrome_client_info_);
  } else {
    chrome_client_info_ = nullptr;
  }
  ::memcpy(&platform_type_, &from.platform_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_type_) -
    reinterpret_cast<char*>(&platform_type_)) + sizeof(app_type_));
  // @@protoc_insertion_point(copy_constructor:feedwire.ClientInfo)
}

inline void ClientInfo::SharedCtor() {
locale_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  locale_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_instance_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_instance_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
advertising_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  advertising_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&platform_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&platform_type_) -
    reinterpret_cast<char*>(&platform_version_)) + sizeof(platform_type_));
app_type_ = 3;
}

ClientInfo::~ClientInfo() {
  // @@protoc_insertion_point(destructor:feedwire.ClientInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  locale_.Destroy();
  client_instance_id_.Destroy();
  advertising_id_.Destroy();
  if (this != internal_default_instance()) delete platform_version_;
  if (this != internal_default_instance()) delete app_version_;
  if (this != internal_default_instance()) delete device_;
  if (this != internal_default_instance()) delete chrome_client_info_;
}

void ClientInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.ClientInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  display_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      locale_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      client_instance_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      advertising_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(platform_version_ != nullptr);
      platform_version_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(app_version_ != nullptr);
      app_version_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(device_ != nullptr);
      device_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(chrome_client_info_ != nullptr);
      chrome_client_info_->Clear();
    }
  }
  platform_type_ = 0;
  app_type_ = 3;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .feedwire.ClientInfo.PlatformType platform_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::feedwire::ClientInfo_PlatformType_IsValid(val))) {
            _internal_set_platform_type(static_cast<::feedwire::ClientInfo_PlatformType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.Version platform_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_platform_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.ClientInfo.AppType app_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::feedwire::ClientInfo_AppType_IsValid(val))) {
            _internal_set_app_type(static_cast<::feedwire::ClientInfo_AppType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.Version app_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string locale = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .feedwire.DisplayInfo display_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string client_instance_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_client_instance_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string advertising_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_advertising_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.Device device = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.ChromeClientInfo chrome_client_info = 338478298;
      case 338478298:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_client_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.ClientInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .feedwire.ClientInfo.PlatformType platform_type = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_platform_type(), target);
  }

  // optional .feedwire.Version platform_version = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::platform_version(this),
        _Internal::platform_version(this).GetCachedSize(), target, stream);
  }

  // optional .feedwire.ClientInfo.AppType app_type = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_app_type(), target);
  }

  // optional .feedwire.Version app_version = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::app_version(this),
        _Internal::app_version(this).GetCachedSize(), target, stream);
  }

  // optional string locale = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_locale(), target);
  }

  // repeated .feedwire.DisplayInfo display_info = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_display_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_display_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string client_instance_id = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_client_instance_id(), target);
  }

  // optional string advertising_id = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_advertising_id(), target);
  }

  // optional .feedwire.Device device = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::device(this),
        _Internal::device(this).GetCachedSize(), target, stream);
  }

  // optional .feedwire.ChromeClientInfo chrome_client_info = 338478298;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(338478298, _Internal::chrome_client_info(this),
        _Internal::chrome_client_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.ClientInfo)
  return target;
}

size_t ClientInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.ClientInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .feedwire.DisplayInfo display_info = 6;
  total_size += 1UL * this->_internal_display_info_size();
  for (const auto& msg : this->display_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string locale = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_locale());
    }

    // optional string client_instance_id = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_instance_id());
    }

    // optional string advertising_id = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_advertising_id());
    }

    // optional .feedwire.Version platform_version = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *platform_version_);
    }

    // optional .feedwire.Version app_version = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_version_);
    }

    // optional .feedwire.Device device = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_);
    }

    // optional .feedwire.ChromeClientInfo chrome_client_info = 338478298;
    if (cached_has_bits & 0x00000040u) {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_client_info_);
    }

    // optional .feedwire.ClientInfo.PlatformType platform_type = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_platform_type());
    }

  }
  // optional .feedwire.ClientInfo.AppType app_type = 3;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_app_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientInfo*>(
      &from));
}

void ClientInfo::MergeFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  display_info_.MergeFrom(from.display_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_locale(from._internal_locale());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_client_instance_id(from._internal_client_instance_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_advertising_id(from._internal_advertising_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_platform_version()->::feedwire::Version::MergeFrom(from._internal_platform_version());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_app_version()->::feedwire::Version::MergeFrom(from._internal_app_version());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_device()->::feedwire::Device::MergeFrom(from._internal_device());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_chrome_client_info()->::feedwire::ChromeClientInfo::MergeFrom(from._internal_chrome_client_info());
    }
    if (cached_has_bits & 0x00000080u) {
      platform_type_ = from.platform_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_app_type(from._internal_app_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientInfo::CopyFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInfo::IsInitialized() const {
  return true;
}

void ClientInfo::InternalSwap(ClientInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  display_info_.InternalSwap(&other->display_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &locale_, lhs_arena,
      &other->locale_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &client_instance_id_, lhs_arena,
      &other->client_instance_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &advertising_id_, lhs_arena,
      &other->advertising_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientInfo, platform_type_)
      + sizeof(ClientInfo::platform_type_)
      - PROTOBUF_FIELD_OFFSET(ClientInfo, platform_version_)>(
          reinterpret_cast<char*>(&platform_version_),
          reinterpret_cast<char*>(&other->platform_version_));
  swap(app_type_, other->app_type_);
}

std::string ClientInfo::GetTypeName() const {
  return "feedwire.ClientInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::feedwire::ClientInfo*
Arena::CreateMaybeMessage< ::feedwire::ClientInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::ClientInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
