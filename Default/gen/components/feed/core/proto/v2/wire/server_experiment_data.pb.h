// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/server_experiment_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fserver_5fexperiment_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fserver_5fexperiment_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fserver_5fexperiment_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fserver_5fexperiment_5fdata_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
class ServerExperimentData;
struct ServerExperimentDataDefaultTypeInternal;
extern ServerExperimentDataDefaultTypeInternal _ServerExperimentData_default_instance_;
class ServerExperimentData_NamespacedExperimentInfo;
struct ServerExperimentData_NamespacedExperimentInfoDefaultTypeInternal;
extern ServerExperimentData_NamespacedExperimentInfoDefaultTypeInternal _ServerExperimentData_NamespacedExperimentInfo_default_instance_;
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::ServerExperimentData* Arena::CreateMaybeMessage<::feedwire::ServerExperimentData>(Arena*);
template<> ::feedwire::ServerExperimentData_NamespacedExperimentInfo* Arena::CreateMaybeMessage<::feedwire::ServerExperimentData_NamespacedExperimentInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

// ===================================================================

class ServerExperimentData_NamespacedExperimentInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.ServerExperimentData.NamespacedExperimentInfo) */ {
 public:
  inline ServerExperimentData_NamespacedExperimentInfo() : ServerExperimentData_NamespacedExperimentInfo(nullptr) {}
  ~ServerExperimentData_NamespacedExperimentInfo() override;
  explicit PROTOBUF_CONSTEXPR ServerExperimentData_NamespacedExperimentInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerExperimentData_NamespacedExperimentInfo(const ServerExperimentData_NamespacedExperimentInfo& from);
  ServerExperimentData_NamespacedExperimentInfo(ServerExperimentData_NamespacedExperimentInfo&& from) noexcept
    : ServerExperimentData_NamespacedExperimentInfo() {
    *this = ::std::move(from);
  }

  inline ServerExperimentData_NamespacedExperimentInfo& operator=(const ServerExperimentData_NamespacedExperimentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerExperimentData_NamespacedExperimentInfo& operator=(ServerExperimentData_NamespacedExperimentInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ServerExperimentData_NamespacedExperimentInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerExperimentData_NamespacedExperimentInfo* internal_default_instance() {
    return reinterpret_cast<const ServerExperimentData_NamespacedExperimentInfo*>(
               &_ServerExperimentData_NamespacedExperimentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerExperimentData_NamespacedExperimentInfo& a, ServerExperimentData_NamespacedExperimentInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ServerExperimentData_NamespacedExperimentInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerExperimentData_NamespacedExperimentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerExperimentData_NamespacedExperimentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerExperimentData_NamespacedExperimentInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ServerExperimentData_NamespacedExperimentInfo& from);
  void MergeFrom(const ServerExperimentData_NamespacedExperimentInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerExperimentData_NamespacedExperimentInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.ServerExperimentData.NamespacedExperimentInfo";
  }
  protected:
  explicit ServerExperimentData_NamespacedExperimentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExperimentIdFieldNumber = 2,
    kNamespaceFieldNumber = 1,
  };
  // repeated int32 experiment_id = 2;
  int experiment_id_size() const;
  private:
  int _internal_experiment_id_size() const;
  public:
  void clear_experiment_id();
  private:
  int32_t _internal_experiment_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_experiment_id() const;
  void _internal_add_experiment_id(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_experiment_id();
  public:
  int32_t experiment_id(int index) const;
  void set_experiment_id(int index, int32_t value);
  void add_experiment_id(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      experiment_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_experiment_id();

  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_namespace_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_namespace_();
  PROTOBUF_NODISCARD std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // @@protoc_insertion_point(class_scope:feedwire.ServerExperimentData.NamespacedExperimentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > experiment_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fserver_5fexperiment_5fdata_2eproto;
};
// -------------------------------------------------------------------

class ServerExperimentData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.ServerExperimentData) */ {
 public:
  inline ServerExperimentData() : ServerExperimentData(nullptr) {}
  ~ServerExperimentData() override;
  explicit PROTOBUF_CONSTEXPR ServerExperimentData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerExperimentData(const ServerExperimentData& from);
  ServerExperimentData(ServerExperimentData&& from) noexcept
    : ServerExperimentData() {
    *this = ::std::move(from);
  }

  inline ServerExperimentData& operator=(const ServerExperimentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerExperimentData& operator=(ServerExperimentData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ServerExperimentData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerExperimentData* internal_default_instance() {
    return reinterpret_cast<const ServerExperimentData*>(
               &_ServerExperimentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerExperimentData& a, ServerExperimentData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ServerExperimentData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerExperimentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerExperimentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerExperimentData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ServerExperimentData& from);
  void MergeFrom(const ServerExperimentData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerExperimentData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.ServerExperimentData";
  }
  protected:
  explicit ServerExperimentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ServerExperimentData_NamespacedExperimentInfo NamespacedExperimentInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kNamespacedExperimentInfoFieldNumber = 1,
  };
  // repeated .feedwire.ServerExperimentData.NamespacedExperimentInfo namespaced_experiment_info = 1;
  int namespaced_experiment_info_size() const;
  private:
  int _internal_namespaced_experiment_info_size() const;
  public:
  void clear_namespaced_experiment_info();
  ::feedwire::ServerExperimentData_NamespacedExperimentInfo* mutable_namespaced_experiment_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::ServerExperimentData_NamespacedExperimentInfo >*
      mutable_namespaced_experiment_info();
  private:
  const ::feedwire::ServerExperimentData_NamespacedExperimentInfo& _internal_namespaced_experiment_info(int index) const;
  ::feedwire::ServerExperimentData_NamespacedExperimentInfo* _internal_add_namespaced_experiment_info();
  public:
  const ::feedwire::ServerExperimentData_NamespacedExperimentInfo& namespaced_experiment_info(int index) const;
  ::feedwire::ServerExperimentData_NamespacedExperimentInfo* add_namespaced_experiment_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::ServerExperimentData_NamespacedExperimentInfo >&
      namespaced_experiment_info() const;

  // @@protoc_insertion_point(class_scope:feedwire.ServerExperimentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::ServerExperimentData_NamespacedExperimentInfo > namespaced_experiment_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fserver_5fexperiment_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerExperimentData_NamespacedExperimentInfo

// optional string namespace = 1;
inline bool ServerExperimentData_NamespacedExperimentInfo::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServerExperimentData_NamespacedExperimentInfo::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void ServerExperimentData_NamespacedExperimentInfo::clear_namespace_() {
  namespace__.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServerExperimentData_NamespacedExperimentInfo::namespace_() const {
  // @@protoc_insertion_point(field_get:feedwire.ServerExperimentData.NamespacedExperimentInfo.namespace)
  return _internal_namespace_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerExperimentData_NamespacedExperimentInfo::set_namespace_(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 namespace__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.ServerExperimentData.NamespacedExperimentInfo.namespace)
}
inline std::string* ServerExperimentData_NamespacedExperimentInfo::mutable_namespace_() {
  std::string* _s = _internal_mutable_namespace_();
  // @@protoc_insertion_point(field_mutable:feedwire.ServerExperimentData.NamespacedExperimentInfo.namespace)
  return _s;
}
inline const std::string& ServerExperimentData_NamespacedExperimentInfo::_internal_namespace_() const {
  return namespace__.Get();
}
inline void ServerExperimentData_NamespacedExperimentInfo::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(value, GetArenaForAllocation());
}
inline std::string* ServerExperimentData_NamespacedExperimentInfo::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(GetArenaForAllocation());
}
inline std::string* ServerExperimentData_NamespacedExperimentInfo::release_namespace_() {
  // @@protoc_insertion_point(field_release:feedwire.ServerExperimentData.NamespacedExperimentInfo.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = namespace__.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (namespace__.IsDefault()) {
    namespace__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerExperimentData_NamespacedExperimentInfo::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(namespace_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (namespace__.IsDefault()) {
    namespace__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.ServerExperimentData.NamespacedExperimentInfo.namespace)
}

// repeated int32 experiment_id = 2;
inline int ServerExperimentData_NamespacedExperimentInfo::_internal_experiment_id_size() const {
  return experiment_id_.size();
}
inline int ServerExperimentData_NamespacedExperimentInfo::experiment_id_size() const {
  return _internal_experiment_id_size();
}
inline void ServerExperimentData_NamespacedExperimentInfo::clear_experiment_id() {
  experiment_id_.Clear();
}
inline int32_t ServerExperimentData_NamespacedExperimentInfo::_internal_experiment_id(int index) const {
  return experiment_id_.Get(index);
}
inline int32_t ServerExperimentData_NamespacedExperimentInfo::experiment_id(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.ServerExperimentData.NamespacedExperimentInfo.experiment_id)
  return _internal_experiment_id(index);
}
inline void ServerExperimentData_NamespacedExperimentInfo::set_experiment_id(int index, int32_t value) {
  experiment_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:feedwire.ServerExperimentData.NamespacedExperimentInfo.experiment_id)
}
inline void ServerExperimentData_NamespacedExperimentInfo::_internal_add_experiment_id(int32_t value) {
  experiment_id_.Add(value);
}
inline void ServerExperimentData_NamespacedExperimentInfo::add_experiment_id(int32_t value) {
  _internal_add_experiment_id(value);
  // @@protoc_insertion_point(field_add:feedwire.ServerExperimentData.NamespacedExperimentInfo.experiment_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ServerExperimentData_NamespacedExperimentInfo::_internal_experiment_id() const {
  return experiment_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ServerExperimentData_NamespacedExperimentInfo::experiment_id() const {
  // @@protoc_insertion_point(field_list:feedwire.ServerExperimentData.NamespacedExperimentInfo.experiment_id)
  return _internal_experiment_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ServerExperimentData_NamespacedExperimentInfo::_internal_mutable_experiment_id() {
  return &experiment_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ServerExperimentData_NamespacedExperimentInfo::mutable_experiment_id() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.ServerExperimentData.NamespacedExperimentInfo.experiment_id)
  return _internal_mutable_experiment_id();
}

// -------------------------------------------------------------------

// ServerExperimentData

// repeated .feedwire.ServerExperimentData.NamespacedExperimentInfo namespaced_experiment_info = 1;
inline int ServerExperimentData::_internal_namespaced_experiment_info_size() const {
  return namespaced_experiment_info_.size();
}
inline int ServerExperimentData::namespaced_experiment_info_size() const {
  return _internal_namespaced_experiment_info_size();
}
inline void ServerExperimentData::clear_namespaced_experiment_info() {
  namespaced_experiment_info_.Clear();
}
inline ::feedwire::ServerExperimentData_NamespacedExperimentInfo* ServerExperimentData::mutable_namespaced_experiment_info(int index) {
  // @@protoc_insertion_point(field_mutable:feedwire.ServerExperimentData.namespaced_experiment_info)
  return namespaced_experiment_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::ServerExperimentData_NamespacedExperimentInfo >*
ServerExperimentData::mutable_namespaced_experiment_info() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.ServerExperimentData.namespaced_experiment_info)
  return &namespaced_experiment_info_;
}
inline const ::feedwire::ServerExperimentData_NamespacedExperimentInfo& ServerExperimentData::_internal_namespaced_experiment_info(int index) const {
  return namespaced_experiment_info_.Get(index);
}
inline const ::feedwire::ServerExperimentData_NamespacedExperimentInfo& ServerExperimentData::namespaced_experiment_info(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.ServerExperimentData.namespaced_experiment_info)
  return _internal_namespaced_experiment_info(index);
}
inline ::feedwire::ServerExperimentData_NamespacedExperimentInfo* ServerExperimentData::_internal_add_namespaced_experiment_info() {
  return namespaced_experiment_info_.Add();
}
inline ::feedwire::ServerExperimentData_NamespacedExperimentInfo* ServerExperimentData::add_namespaced_experiment_info() {
  ::feedwire::ServerExperimentData_NamespacedExperimentInfo* _add = _internal_add_namespaced_experiment_info();
  // @@protoc_insertion_point(field_add:feedwire.ServerExperimentData.namespaced_experiment_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::ServerExperimentData_NamespacedExperimentInfo >&
ServerExperimentData::namespaced_experiment_info() const {
  // @@protoc_insertion_point(field_list:feedwire.ServerExperimentData.namespaced_experiment_info)
  return namespaced_experiment_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fserver_5fexperiment_5fdata_2eproto
