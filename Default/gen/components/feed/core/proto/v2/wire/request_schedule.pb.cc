// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/request_schedule.proto

#include "components/feed/core/proto/v2/wire/request_schedule.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedwire {
PROTOBUF_CONSTEXPR RequestSchedule_TimeBasedSchedule::RequestSchedule_TimeBasedSchedule(
    ::_pbi::ConstantInitialized)
  : refresh_time_from_response_time_(){}
struct RequestSchedule_TimeBasedScheduleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestSchedule_TimeBasedScheduleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestSchedule_TimeBasedScheduleDefaultTypeInternal() {}
  union {
    RequestSchedule_TimeBasedSchedule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestSchedule_TimeBasedScheduleDefaultTypeInternal _RequestSchedule_TimeBasedSchedule_default_instance_;
PROTOBUF_CONSTEXPR RequestSchedule::RequestSchedule(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct RequestScheduleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestScheduleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestScheduleDefaultTypeInternal() {}
  union {
    RequestSchedule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestScheduleDefaultTypeInternal _RequestSchedule_default_instance_;
}  // namespace feedwire
namespace feedwire {

// ===================================================================

class RequestSchedule_TimeBasedSchedule::_Internal {
 public:
};

void RequestSchedule_TimeBasedSchedule::clear_refresh_time_from_response_time() {
  refresh_time_from_response_time_.Clear();
}
RequestSchedule_TimeBasedSchedule::RequestSchedule_TimeBasedSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  refresh_time_from_response_time_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.RequestSchedule.TimeBasedSchedule)
}
RequestSchedule_TimeBasedSchedule::RequestSchedule_TimeBasedSchedule(const RequestSchedule_TimeBasedSchedule& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      refresh_time_from_response_time_(from.refresh_time_from_response_time_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:feedwire.RequestSchedule.TimeBasedSchedule)
}

inline void RequestSchedule_TimeBasedSchedule::SharedCtor() {
}

RequestSchedule_TimeBasedSchedule::~RequestSchedule_TimeBasedSchedule() {
  // @@protoc_insertion_point(destructor:feedwire.RequestSchedule.TimeBasedSchedule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestSchedule_TimeBasedSchedule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestSchedule_TimeBasedSchedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestSchedule_TimeBasedSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.RequestSchedule.TimeBasedSchedule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  refresh_time_from_response_time_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RequestSchedule_TimeBasedSchedule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .feedwire.Duration refresh_time_from_response_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_refresh_time_from_response_time(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestSchedule_TimeBasedSchedule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.RequestSchedule.TimeBasedSchedule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .feedwire.Duration refresh_time_from_response_time = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_refresh_time_from_response_time_size()); i < n; i++) {
    const auto& repfield = this->_internal_refresh_time_from_response_time(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.RequestSchedule.TimeBasedSchedule)
  return target;
}

size_t RequestSchedule_TimeBasedSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.RequestSchedule.TimeBasedSchedule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .feedwire.Duration refresh_time_from_response_time = 1;
  total_size += 1UL * this->_internal_refresh_time_from_response_time_size();
  for (const auto& msg : this->refresh_time_from_response_time_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestSchedule_TimeBasedSchedule::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RequestSchedule_TimeBasedSchedule*>(
      &from));
}

void RequestSchedule_TimeBasedSchedule::MergeFrom(const RequestSchedule_TimeBasedSchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.RequestSchedule.TimeBasedSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  refresh_time_from_response_time_.MergeFrom(from.refresh_time_from_response_time_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RequestSchedule_TimeBasedSchedule::CopyFrom(const RequestSchedule_TimeBasedSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.RequestSchedule.TimeBasedSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSchedule_TimeBasedSchedule::IsInitialized() const {
  return true;
}

void RequestSchedule_TimeBasedSchedule::InternalSwap(RequestSchedule_TimeBasedSchedule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  refresh_time_from_response_time_.InternalSwap(&other->refresh_time_from_response_time_);
}

std::string RequestSchedule_TimeBasedSchedule::GetTypeName() const {
  return "feedwire.RequestSchedule.TimeBasedSchedule";
}


// ===================================================================

class RequestSchedule::_Internal {
 public:
  static const ::feedwire::RequestSchedule_TimeBasedSchedule& time_based_schedule(const RequestSchedule* msg);
};

const ::feedwire::RequestSchedule_TimeBasedSchedule&
RequestSchedule::_Internal::time_based_schedule(const RequestSchedule* msg) {
  return *msg->schedule_.time_based_schedule_;
}
void RequestSchedule::set_allocated_time_based_schedule(::feedwire::RequestSchedule_TimeBasedSchedule* time_based_schedule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_schedule();
  if (time_based_schedule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time_based_schedule);
    if (message_arena != submessage_arena) {
      time_based_schedule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_based_schedule, submessage_arena);
    }
    set_has_time_based_schedule();
    schedule_.time_based_schedule_ = time_based_schedule;
  }
  // @@protoc_insertion_point(field_set_allocated:feedwire.RequestSchedule.time_based_schedule)
}
RequestSchedule::RequestSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.RequestSchedule)
}
RequestSchedule::RequestSchedule(const RequestSchedule& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_schedule();
  switch (from.schedule_case()) {
    case kTimeBasedSchedule: {
      _internal_mutable_time_based_schedule()->::feedwire::RequestSchedule_TimeBasedSchedule::MergeFrom(from._internal_time_based_schedule());
      break;
    }
    case SCHEDULE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:feedwire.RequestSchedule)
}

inline void RequestSchedule::SharedCtor() {
clear_has_schedule();
}

RequestSchedule::~RequestSchedule() {
  // @@protoc_insertion_point(destructor:feedwire.RequestSchedule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestSchedule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_schedule()) {
    clear_schedule();
  }
}

void RequestSchedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestSchedule::clear_schedule() {
// @@protoc_insertion_point(one_of_clear_start:feedwire.RequestSchedule)
  switch (schedule_case()) {
    case kTimeBasedSchedule: {
      if (GetArenaForAllocation() == nullptr) {
        delete schedule_.time_based_schedule_;
      }
      break;
    }
    case SCHEDULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SCHEDULE_NOT_SET;
}


void RequestSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.RequestSchedule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_schedule();
  _internal_metadata_.Clear<std::string>();
}

const char* RequestSchedule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .feedwire.RequestSchedule.TimeBasedSchedule time_based_schedule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_based_schedule(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestSchedule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.RequestSchedule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .feedwire.RequestSchedule.TimeBasedSchedule time_based_schedule = 1;
  if (_internal_has_time_based_schedule()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_based_schedule(this),
        _Internal::time_based_schedule(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.RequestSchedule)
  return target;
}

size_t RequestSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.RequestSchedule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (schedule_case()) {
    // .feedwire.RequestSchedule.TimeBasedSchedule time_based_schedule = 1;
    case kTimeBasedSchedule: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *schedule_.time_based_schedule_);
      break;
    }
    case SCHEDULE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestSchedule::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RequestSchedule*>(
      &from));
}

void RequestSchedule::MergeFrom(const RequestSchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.RequestSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.schedule_case()) {
    case kTimeBasedSchedule: {
      _internal_mutable_time_based_schedule()->::feedwire::RequestSchedule_TimeBasedSchedule::MergeFrom(from._internal_time_based_schedule());
      break;
    }
    case SCHEDULE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RequestSchedule::CopyFrom(const RequestSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.RequestSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSchedule::IsInitialized() const {
  return true;
}

void RequestSchedule::InternalSwap(RequestSchedule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(schedule_, other->schedule_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string RequestSchedule::GetTypeName() const {
  return "feedwire.RequestSchedule";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::feedwire::RequestSchedule_TimeBasedSchedule*
Arena::CreateMaybeMessage< ::feedwire::RequestSchedule_TimeBasedSchedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::RequestSchedule_TimeBasedSchedule >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::RequestSchedule*
Arena::CreateMaybeMessage< ::feedwire::RequestSchedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::RequestSchedule >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
