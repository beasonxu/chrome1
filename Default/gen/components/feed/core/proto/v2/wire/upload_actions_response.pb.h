// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/upload_actions_response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fupload_5factions_5fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fupload_5factions_5fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "components/feed/core/proto/v2/wire/consistency_token.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fupload_5factions_5fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fupload_5factions_5fresponse_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
class UploadActionsResponse;
struct UploadActionsResponseDefaultTypeInternal;
extern UploadActionsResponseDefaultTypeInternal _UploadActionsResponse_default_instance_;
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::UploadActionsResponse* Arena::CreateMaybeMessage<::feedwire::UploadActionsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

// ===================================================================

class UploadActionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.UploadActionsResponse) */ {
 public:
  inline UploadActionsResponse() : UploadActionsResponse(nullptr) {}
  ~UploadActionsResponse() override;
  explicit PROTOBUF_CONSTEXPR UploadActionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadActionsResponse(const UploadActionsResponse& from);
  UploadActionsResponse(UploadActionsResponse&& from) noexcept
    : UploadActionsResponse() {
    *this = ::std::move(from);
  }

  inline UploadActionsResponse& operator=(const UploadActionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadActionsResponse& operator=(UploadActionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UploadActionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadActionsResponse* internal_default_instance() {
    return reinterpret_cast<const UploadActionsResponse*>(
               &_UploadActionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UploadActionsResponse& a, UploadActionsResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(UploadActionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadActionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadActionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadActionsResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UploadActionsResponse& from);
  void MergeFrom(const UploadActionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UploadActionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.UploadActionsResponse";
  }
  protected:
  explicit UploadActionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsistencyTokenFieldNumber = 1,
  };
  // .feedwire.ConsistencyToken consistency_token = 1;
  bool has_consistency_token() const;
  private:
  bool _internal_has_consistency_token() const;
  public:
  void clear_consistency_token();
  const ::feedwire::ConsistencyToken& consistency_token() const;
  PROTOBUF_NODISCARD ::feedwire::ConsistencyToken* release_consistency_token();
  ::feedwire::ConsistencyToken* mutable_consistency_token();
  void set_allocated_consistency_token(::feedwire::ConsistencyToken* consistency_token);
  private:
  const ::feedwire::ConsistencyToken& _internal_consistency_token() const;
  ::feedwire::ConsistencyToken* _internal_mutable_consistency_token();
  public:
  void unsafe_arena_set_allocated_consistency_token(
      ::feedwire::ConsistencyToken* consistency_token);
  ::feedwire::ConsistencyToken* unsafe_arena_release_consistency_token();

  // @@protoc_insertion_point(class_scope:feedwire.UploadActionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::feedwire::ConsistencyToken* consistency_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fupload_5factions_5fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UploadActionsResponse

// .feedwire.ConsistencyToken consistency_token = 1;
inline bool UploadActionsResponse::_internal_has_consistency_token() const {
  return this != internal_default_instance() && consistency_token_ != nullptr;
}
inline bool UploadActionsResponse::has_consistency_token() const {
  return _internal_has_consistency_token();
}
inline const ::feedwire::ConsistencyToken& UploadActionsResponse::_internal_consistency_token() const {
  const ::feedwire::ConsistencyToken* p = consistency_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ConsistencyToken&>(
      ::feedwire::_ConsistencyToken_default_instance_);
}
inline const ::feedwire::ConsistencyToken& UploadActionsResponse::consistency_token() const {
  // @@protoc_insertion_point(field_get:feedwire.UploadActionsResponse.consistency_token)
  return _internal_consistency_token();
}
inline void UploadActionsResponse::unsafe_arena_set_allocated_consistency_token(
    ::feedwire::ConsistencyToken* consistency_token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token_);
  }
  consistency_token_ = consistency_token;
  if (consistency_token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.UploadActionsResponse.consistency_token)
}
inline ::feedwire::ConsistencyToken* UploadActionsResponse::release_consistency_token() {
  
  ::feedwire::ConsistencyToken* temp = consistency_token_;
  consistency_token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ConsistencyToken* UploadActionsResponse::unsafe_arena_release_consistency_token() {
  // @@protoc_insertion_point(field_release:feedwire.UploadActionsResponse.consistency_token)
  
  ::feedwire::ConsistencyToken* temp = consistency_token_;
  consistency_token_ = nullptr;
  return temp;
}
inline ::feedwire::ConsistencyToken* UploadActionsResponse::_internal_mutable_consistency_token() {
  
  if (consistency_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ConsistencyToken>(GetArenaForAllocation());
    consistency_token_ = p;
  }
  return consistency_token_;
}
inline ::feedwire::ConsistencyToken* UploadActionsResponse::mutable_consistency_token() {
  ::feedwire::ConsistencyToken* _msg = _internal_mutable_consistency_token();
  // @@protoc_insertion_point(field_mutable:feedwire.UploadActionsResponse.consistency_token)
  return _msg;
}
inline void UploadActionsResponse::set_allocated_consistency_token(::feedwire::ConsistencyToken* consistency_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token_);
  }
  if (consistency_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token));
    if (message_arena != submessage_arena) {
      consistency_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consistency_token, submessage_arena);
    }
    
  } else {
    
  }
  consistency_token_ = consistency_token;
  // @@protoc_insertion_point(field_set_allocated:feedwire.UploadActionsResponse.consistency_token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fupload_5factions_5fresponse_2eproto
