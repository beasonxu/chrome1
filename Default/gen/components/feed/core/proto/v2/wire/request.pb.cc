// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/request.proto

#include "components/feed/core/proto/v2/wire/request.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedwire {
PROTOBUF_CONSTEXPR Request::Request(
    ::_pbi::ConstantInitialized)
  : feed_request_(nullptr)
  , request_version_(0)
{}
struct RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace feedwire
namespace feedwire {
bool Request_RequestVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Request_RequestVersion_strings[2] = {};

static const char Request_RequestVersion_names[] =
  "FEED_QUERY"
  "UNKNOWN_REQUEST_VERSION";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Request_RequestVersion_entries[] = {
  { {Request_RequestVersion_names + 0, 10}, 1 },
  { {Request_RequestVersion_names + 10, 23}, 0 },
};

static const int Request_RequestVersion_entries_by_number[] = {
  1, // 0 -> UNKNOWN_REQUEST_VERSION
  0, // 1 -> FEED_QUERY
};

const std::string& Request_RequestVersion_Name(
    Request_RequestVersion value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Request_RequestVersion_entries,
          Request_RequestVersion_entries_by_number,
          2, Request_RequestVersion_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Request_RequestVersion_entries,
      Request_RequestVersion_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Request_RequestVersion_strings[idx].get();
}
bool Request_RequestVersion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Request_RequestVersion* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Request_RequestVersion_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<Request_RequestVersion>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Request_RequestVersion Request::UNKNOWN_REQUEST_VERSION;
constexpr Request_RequestVersion Request::FEED_QUERY;
constexpr Request_RequestVersion Request::RequestVersion_MIN;
constexpr Request_RequestVersion Request::RequestVersion_MAX;
constexpr int Request::RequestVersion_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Request::_Internal {
 public:
  using HasBits = decltype(std::declval<Request>()._has_bits_);
  static void set_has_request_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::feedwire::FeedRequest& feed_request(const Request* msg);
  static void set_has_feed_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::feedwire::FeedRequest&
Request::_Internal::feed_request(const Request* msg) {
  return *msg->feed_request_;
}
void Request::clear_feed_request() {
  if (feed_request_ != nullptr) feed_request_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_feed_request()) {
    feed_request_ = new ::feedwire::FeedRequest(*from.feed_request_);
  } else {
    feed_request_ = nullptr;
  }
  request_version_ = from.request_version_;
  // @@protoc_insertion_point(copy_constructor:feedwire.Request)
}

inline void Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&feed_request_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_version_) -
    reinterpret_cast<char*>(&feed_request_)) + sizeof(request_version_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:feedwire.Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete feed_request_;
}

void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(feed_request_ != nullptr);
    feed_request_->Clear();
  }
  request_version_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .feedwire.Request.RequestVersion request_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::feedwire::Request_RequestVersion_IsValid(val))) {
            _internal_set_request_version(static_cast<::feedwire::Request_RequestVersion>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.FeedRequest feed_request = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_feed_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .feedwire.Request.RequestVersion request_version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_request_version(), target);
  }

  // optional .feedwire.FeedRequest feed_request = 1000;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1000, _Internal::feed_request(this),
        _Internal::feed_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .feedwire.FeedRequest feed_request = 1000;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feed_request_);
    }

    // optional .feedwire.Request.RequestVersion request_version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_request_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Request*>(
      &from));
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_feed_request()->::feedwire::FeedRequest::MergeFrom(from._internal_feed_request());
    }
    if (cached_has_bits & 0x00000002u) {
      request_version_ = from.request_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, request_version_)
      + sizeof(Request::request_version_)
      - PROTOBUF_FIELD_OFFSET(Request, feed_request_)>(
          reinterpret_cast<char*>(&feed_request_),
          reinterpret_cast<char*>(&other->feed_request_));
}

std::string Request::GetTypeName() const {
  return "feedwire.Request";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::feedwire::Request*
Arena::CreateMaybeMessage< ::feedwire::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::Request >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
