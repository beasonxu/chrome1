// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/client_user_profiles.proto

#include "components/feed/core/proto/v2/wire/client_user_profiles.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedwire {
PROTOBUF_CONSTEXPR ClientUserProfiles::ClientUserProfiles(
    ::_pbi::ConstantInitialized)
  : discover_user_actions_profile_(nullptr)
  , view_demotion_profile_(nullptr){}
struct ClientUserProfilesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientUserProfilesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientUserProfilesDefaultTypeInternal() {}
  union {
    ClientUserProfiles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientUserProfilesDefaultTypeInternal _ClientUserProfiles_default_instance_;
PROTOBUF_CONSTEXPR ActionCounts_Counts::ActionCounts_Counts(
    ::_pbi::ConstantInitialized)
  : count_1d_(0u)
  , count_7d_(0u)
  , count_30d_(0u){}
struct ActionCounts_CountsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionCounts_CountsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionCounts_CountsDefaultTypeInternal() {}
  union {
    ActionCounts_Counts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionCounts_CountsDefaultTypeInternal _ActionCounts_Counts_default_instance_;
PROTOBUF_CONSTEXPR ActionCounts::ActionCounts(
    ::_pbi::ConstantInitialized)
  : counts_(nullptr)
  , type_(0)
{}
struct ActionCountsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionCountsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionCountsDefaultTypeInternal() {}
  union {
    ActionCounts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionCountsDefaultTypeInternal _ActionCounts_default_instance_;
PROTOBUF_CONSTEXPR DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts(
    ::_pbi::ConstantInitialized)
  : counts_()
  , content_category_media_type_(uint64_t{0u})
  , mid_(uint64_t{0u}){}
struct DiscoverUserActionsProfile_ContentMediaXEntityActionCountsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiscoverUserActionsProfile_ContentMediaXEntityActionCountsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiscoverUserActionsProfile_ContentMediaXEntityActionCountsDefaultTypeInternal() {}
  union {
    DiscoverUserActionsProfile_ContentMediaXEntityActionCounts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiscoverUserActionsProfile_ContentMediaXEntityActionCountsDefaultTypeInternal _DiscoverUserActionsProfile_ContentMediaXEntityActionCounts_default_instance_;
PROTOBUF_CONSTEXPR DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts(
    ::_pbi::ConstantInitialized)
  : counts_()
  , card_category_(uint64_t{0u})
  , mid_(uint64_t{0u}){}
struct DiscoverUserActionsProfile_CardCategoryXEntityActionCountsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiscoverUserActionsProfile_CardCategoryXEntityActionCountsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiscoverUserActionsProfile_CardCategoryXEntityActionCountsDefaultTypeInternal() {}
  union {
    DiscoverUserActionsProfile_CardCategoryXEntityActionCounts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiscoverUserActionsProfile_CardCategoryXEntityActionCountsDefaultTypeInternal _DiscoverUserActionsProfile_CardCategoryXEntityActionCounts_default_instance_;
PROTOBUF_CONSTEXPR DiscoverUserActionsProfile::DiscoverUserActionsProfile(
    ::_pbi::ConstantInitialized)
  : content_media_x_entity_()
  , card_category_x_entity_(){}
struct DiscoverUserActionsProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiscoverUserActionsProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiscoverUserActionsProfileDefaultTypeInternal() {}
  union {
    DiscoverUserActionsProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiscoverUserActionsProfileDefaultTypeInternal _DiscoverUserActionsProfile_default_instance_;
PROTOBUF_CONSTEXPR ViewDemotionProfile::ViewDemotionProfile(
    ::_pbi::ConstantInitialized){}
struct ViewDemotionProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewDemotionProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewDemotionProfileDefaultTypeInternal() {}
  union {
    ViewDemotionProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewDemotionProfileDefaultTypeInternal _ViewDemotionProfile_default_instance_;
}  // namespace feedwire
namespace feedwire {
bool ActionCounts_ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ActionCounts_ActionType_strings[2] = {};

static const char ActionCounts_ActionType_names[] =
  "CLICK"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ActionCounts_ActionType_entries[] = {
  { {ActionCounts_ActionType_names + 0, 5}, 1 },
  { {ActionCounts_ActionType_names + 5, 7}, 0 },
};

static const int ActionCounts_ActionType_entries_by_number[] = {
  1, // 0 -> UNKNOWN
  0, // 1 -> CLICK
};

const std::string& ActionCounts_ActionType_Name(
    ActionCounts_ActionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ActionCounts_ActionType_entries,
          ActionCounts_ActionType_entries_by_number,
          2, ActionCounts_ActionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ActionCounts_ActionType_entries,
      ActionCounts_ActionType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ActionCounts_ActionType_strings[idx].get();
}
bool ActionCounts_ActionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActionCounts_ActionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ActionCounts_ActionType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ActionCounts_ActionType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ActionCounts_ActionType ActionCounts::UNKNOWN;
constexpr ActionCounts_ActionType ActionCounts::CLICK;
constexpr ActionCounts_ActionType ActionCounts::ActionType_MIN;
constexpr ActionCounts_ActionType ActionCounts::ActionType_MAX;
constexpr int ActionCounts::ActionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ClientUserProfiles::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientUserProfiles>()._has_bits_);
  static const ::feedwire::DiscoverUserActionsProfile& discover_user_actions_profile(const ClientUserProfiles* msg);
  static void set_has_discover_user_actions_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::feedwire::ViewDemotionProfile& view_demotion_profile(const ClientUserProfiles* msg);
  static void set_has_view_demotion_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::feedwire::DiscoverUserActionsProfile&
ClientUserProfiles::_Internal::discover_user_actions_profile(const ClientUserProfiles* msg) {
  return *msg->discover_user_actions_profile_;
}
const ::feedwire::ViewDemotionProfile&
ClientUserProfiles::_Internal::view_demotion_profile(const ClientUserProfiles* msg) {
  return *msg->view_demotion_profile_;
}
ClientUserProfiles::ClientUserProfiles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.ClientUserProfiles)
}
ClientUserProfiles::ClientUserProfiles(const ClientUserProfiles& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_discover_user_actions_profile()) {
    discover_user_actions_profile_ = new ::feedwire::DiscoverUserActionsProfile(*from.discover_user_actions_profile_);
  } else {
    discover_user_actions_profile_ = nullptr;
  }
  if (from._internal_has_view_demotion_profile()) {
    view_demotion_profile_ = new ::feedwire::ViewDemotionProfile(*from.view_demotion_profile_);
  } else {
    view_demotion_profile_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:feedwire.ClientUserProfiles)
}

inline void ClientUserProfiles::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&discover_user_actions_profile_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&view_demotion_profile_) -
    reinterpret_cast<char*>(&discover_user_actions_profile_)) + sizeof(view_demotion_profile_));
}

ClientUserProfiles::~ClientUserProfiles() {
  // @@protoc_insertion_point(destructor:feedwire.ClientUserProfiles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientUserProfiles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete discover_user_actions_profile_;
  if (this != internal_default_instance()) delete view_demotion_profile_;
}

void ClientUserProfiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientUserProfiles::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.ClientUserProfiles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(discover_user_actions_profile_ != nullptr);
      discover_user_actions_profile_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(view_demotion_profile_ != nullptr);
      view_demotion_profile_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientUserProfiles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .feedwire.DiscoverUserActionsProfile discover_user_actions_profile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_discover_user_actions_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.ViewDemotionProfile view_demotion_profile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_demotion_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientUserProfiles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.ClientUserProfiles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .feedwire.DiscoverUserActionsProfile discover_user_actions_profile = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::discover_user_actions_profile(this),
        _Internal::discover_user_actions_profile(this).GetCachedSize(), target, stream);
  }

  // optional .feedwire.ViewDemotionProfile view_demotion_profile = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::view_demotion_profile(this),
        _Internal::view_demotion_profile(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.ClientUserProfiles)
  return target;
}

size_t ClientUserProfiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.ClientUserProfiles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .feedwire.DiscoverUserActionsProfile discover_user_actions_profile = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *discover_user_actions_profile_);
    }

    // optional .feedwire.ViewDemotionProfile view_demotion_profile = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *view_demotion_profile_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientUserProfiles::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientUserProfiles*>(
      &from));
}

void ClientUserProfiles::MergeFrom(const ClientUserProfiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.ClientUserProfiles)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_discover_user_actions_profile()->::feedwire::DiscoverUserActionsProfile::MergeFrom(from._internal_discover_user_actions_profile());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_view_demotion_profile()->::feedwire::ViewDemotionProfile::MergeFrom(from._internal_view_demotion_profile());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientUserProfiles::CopyFrom(const ClientUserProfiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.ClientUserProfiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientUserProfiles::IsInitialized() const {
  return true;
}

void ClientUserProfiles::InternalSwap(ClientUserProfiles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientUserProfiles, view_demotion_profile_)
      + sizeof(ClientUserProfiles::view_demotion_profile_)
      - PROTOBUF_FIELD_OFFSET(ClientUserProfiles, discover_user_actions_profile_)>(
          reinterpret_cast<char*>(&discover_user_actions_profile_),
          reinterpret_cast<char*>(&other->discover_user_actions_profile_));
}

std::string ClientUserProfiles::GetTypeName() const {
  return "feedwire.ClientUserProfiles";
}


// ===================================================================

class ActionCounts_Counts::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionCounts_Counts>()._has_bits_);
  static void set_has_count_1d(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count_7d(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count_30d(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ActionCounts_Counts::ActionCounts_Counts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.ActionCounts.Counts)
}
ActionCounts_Counts::ActionCounts_Counts(const ActionCounts_Counts& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&count_1d_, &from.count_1d_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_30d_) -
    reinterpret_cast<char*>(&count_1d_)) + sizeof(count_30d_));
  // @@protoc_insertion_point(copy_constructor:feedwire.ActionCounts.Counts)
}

inline void ActionCounts_Counts::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&count_1d_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_30d_) -
    reinterpret_cast<char*>(&count_1d_)) + sizeof(count_30d_));
}

ActionCounts_Counts::~ActionCounts_Counts() {
  // @@protoc_insertion_point(destructor:feedwire.ActionCounts.Counts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionCounts_Counts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionCounts_Counts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionCounts_Counts::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.ActionCounts.Counts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&count_1d_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_30d_) -
        reinterpret_cast<char*>(&count_1d_)) + sizeof(count_30d_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ActionCounts_Counts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 count_1d = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_count_1d(&has_bits);
          count_1d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count_7d = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count_7d(&has_bits);
          count_7d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count_30d = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_count_30d(&has_bits);
          count_30d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionCounts_Counts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.ActionCounts.Counts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 count_1d = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count_1d(), target);
  }

  // optional uint32 count_7d = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count_7d(), target);
  }

  // optional uint32 count_30d = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count_30d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.ActionCounts.Counts)
  return target;
}

size_t ActionCounts_Counts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.ActionCounts.Counts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 count_1d = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count_1d());
    }

    // optional uint32 count_7d = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count_7d());
    }

    // optional uint32 count_30d = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count_30d());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionCounts_Counts::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ActionCounts_Counts*>(
      &from));
}

void ActionCounts_Counts::MergeFrom(const ActionCounts_Counts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.ActionCounts.Counts)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      count_1d_ = from.count_1d_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_7d_ = from.count_7d_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_30d_ = from.count_30d_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ActionCounts_Counts::CopyFrom(const ActionCounts_Counts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.ActionCounts.Counts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionCounts_Counts::IsInitialized() const {
  return true;
}

void ActionCounts_Counts::InternalSwap(ActionCounts_Counts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionCounts_Counts, count_30d_)
      + sizeof(ActionCounts_Counts::count_30d_)
      - PROTOBUF_FIELD_OFFSET(ActionCounts_Counts, count_1d_)>(
          reinterpret_cast<char*>(&count_1d_),
          reinterpret_cast<char*>(&other->count_1d_));
}

std::string ActionCounts_Counts::GetTypeName() const {
  return "feedwire.ActionCounts.Counts";
}


// ===================================================================

class ActionCounts::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionCounts>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::feedwire::ActionCounts_Counts& counts(const ActionCounts* msg);
  static void set_has_counts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::feedwire::ActionCounts_Counts&
ActionCounts::_Internal::counts(const ActionCounts* msg) {
  return *msg->counts_;
}
ActionCounts::ActionCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.ActionCounts)
}
ActionCounts::ActionCounts(const ActionCounts& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_counts()) {
    counts_ = new ::feedwire::ActionCounts_Counts(*from.counts_);
  } else {
    counts_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:feedwire.ActionCounts)
}

inline void ActionCounts::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&counts_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&counts_)) + sizeof(type_));
}

ActionCounts::~ActionCounts() {
  // @@protoc_insertion_point(destructor:feedwire.ActionCounts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionCounts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete counts_;
}

void ActionCounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionCounts::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.ActionCounts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(counts_ != nullptr);
    counts_->Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ActionCounts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .feedwire.ActionCounts.ActionType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::feedwire::ActionCounts_ActionType_IsValid(val))) {
            _internal_set_type(static_cast<::feedwire::ActionCounts_ActionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.ActionCounts.Counts counts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_counts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionCounts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.ActionCounts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .feedwire.ActionCounts.ActionType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .feedwire.ActionCounts.Counts counts = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::counts(this),
        _Internal::counts(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.ActionCounts)
  return target;
}

size_t ActionCounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.ActionCounts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .feedwire.ActionCounts.Counts counts = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *counts_);
    }

    // optional .feedwire.ActionCounts.ActionType type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionCounts::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ActionCounts*>(
      &from));
}

void ActionCounts::MergeFrom(const ActionCounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.ActionCounts)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_counts()->::feedwire::ActionCounts_Counts::MergeFrom(from._internal_counts());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ActionCounts::CopyFrom(const ActionCounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.ActionCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionCounts::IsInitialized() const {
  return true;
}

void ActionCounts::InternalSwap(ActionCounts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionCounts, type_)
      + sizeof(ActionCounts::type_)
      - PROTOBUF_FIELD_OFFSET(ActionCounts, counts_)>(
          reinterpret_cast<char*>(&counts_),
          reinterpret_cast<char*>(&other->counts_));
}

std::string ActionCounts::GetTypeName() const {
  return "feedwire.ActionCounts";
}


// ===================================================================

class DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::_Internal {
 public:
  using HasBits = decltype(std::declval<DiscoverUserActionsProfile_ContentMediaXEntityActionCounts>()._has_bits_);
  static void set_has_content_category_media_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  counts_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts)
}
DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts(const DiscoverUserActionsProfile_ContentMediaXEntityActionCounts& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      counts_(from.counts_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&content_category_media_type_, &from.content_category_media_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&mid_) -
    reinterpret_cast<char*>(&content_category_media_type_)) + sizeof(mid_));
  // @@protoc_insertion_point(copy_constructor:feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts)
}

inline void DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&content_category_media_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mid_) -
    reinterpret_cast<char*>(&content_category_media_type_)) + sizeof(mid_));
}

DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::~DiscoverUserActionsProfile_ContentMediaXEntityActionCounts() {
  // @@protoc_insertion_point(destructor:feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  counts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&content_category_media_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mid_) -
        reinterpret_cast<char*>(&content_category_media_type_)) + sizeof(mid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 content_category_media_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_content_category_media_type(&has_bits);
          content_category_media_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 mid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .feedwire.ActionCounts counts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_counts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 content_category_media_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_content_category_media_type(), target);
  }

  // optional uint64 mid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_mid(), target);
  }

  // repeated .feedwire.ActionCounts counts = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_counts_size()); i < n; i++) {
    const auto& repfield = this->_internal_counts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts)
  return target;
}

size_t DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .feedwire.ActionCounts counts = 3;
  total_size += 1UL * this->_internal_counts_size();
  for (const auto& msg : this->counts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 content_category_media_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_content_category_media_type());
    }

    // optional uint64 mid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_mid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DiscoverUserActionsProfile_ContentMediaXEntityActionCounts*>(
      &from));
}

void DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::MergeFrom(const DiscoverUserActionsProfile_ContentMediaXEntityActionCounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  counts_.MergeFrom(from.counts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      content_category_media_type_ = from.content_category_media_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      mid_ = from.mid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::CopyFrom(const DiscoverUserActionsProfile_ContentMediaXEntityActionCounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::IsInitialized() const {
  return true;
}

void DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::InternalSwap(DiscoverUserActionsProfile_ContentMediaXEntityActionCounts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  counts_.InternalSwap(&other->counts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DiscoverUserActionsProfile_ContentMediaXEntityActionCounts, mid_)
      + sizeof(DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::mid_)
      - PROTOBUF_FIELD_OFFSET(DiscoverUserActionsProfile_ContentMediaXEntityActionCounts, content_category_media_type_)>(
          reinterpret_cast<char*>(&content_category_media_type_),
          reinterpret_cast<char*>(&other->content_category_media_type_));
}

std::string DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::GetTypeName() const {
  return "feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts";
}


// ===================================================================

class DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::_Internal {
 public:
  using HasBits = decltype(std::declval<DiscoverUserActionsProfile_CardCategoryXEntityActionCounts>()._has_bits_);
  static void set_has_card_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  counts_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts)
}
DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts(const DiscoverUserActionsProfile_CardCategoryXEntityActionCounts& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      counts_(from.counts_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&card_category_, &from.card_category_,
    static_cast<size_t>(reinterpret_cast<char*>(&mid_) -
    reinterpret_cast<char*>(&card_category_)) + sizeof(mid_));
  // @@protoc_insertion_point(copy_constructor:feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts)
}

inline void DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&card_category_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mid_) -
    reinterpret_cast<char*>(&card_category_)) + sizeof(mid_));
}

DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::~DiscoverUserActionsProfile_CardCategoryXEntityActionCounts() {
  // @@protoc_insertion_point(destructor:feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  counts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&card_category_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mid_) -
        reinterpret_cast<char*>(&card_category_)) + sizeof(mid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 card_category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_card_category(&has_bits);
          card_category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 mid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .feedwire.ActionCounts counts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_counts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 card_category = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_card_category(), target);
  }

  // optional uint64 mid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_mid(), target);
  }

  // repeated .feedwire.ActionCounts counts = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_counts_size()); i < n; i++) {
    const auto& repfield = this->_internal_counts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts)
  return target;
}

size_t DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .feedwire.ActionCounts counts = 3;
  total_size += 1UL * this->_internal_counts_size();
  for (const auto& msg : this->counts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 card_category = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_card_category());
    }

    // optional uint64 mid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_mid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DiscoverUserActionsProfile_CardCategoryXEntityActionCounts*>(
      &from));
}

void DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::MergeFrom(const DiscoverUserActionsProfile_CardCategoryXEntityActionCounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  counts_.MergeFrom(from.counts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      card_category_ = from.card_category_;
    }
    if (cached_has_bits & 0x00000002u) {
      mid_ = from.mid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::CopyFrom(const DiscoverUserActionsProfile_CardCategoryXEntityActionCounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::IsInitialized() const {
  return true;
}

void DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::InternalSwap(DiscoverUserActionsProfile_CardCategoryXEntityActionCounts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  counts_.InternalSwap(&other->counts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DiscoverUserActionsProfile_CardCategoryXEntityActionCounts, mid_)
      + sizeof(DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::mid_)
      - PROTOBUF_FIELD_OFFSET(DiscoverUserActionsProfile_CardCategoryXEntityActionCounts, card_category_)>(
          reinterpret_cast<char*>(&card_category_),
          reinterpret_cast<char*>(&other->card_category_));
}

std::string DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::GetTypeName() const {
  return "feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts";
}


// ===================================================================

class DiscoverUserActionsProfile::_Internal {
 public:
};

DiscoverUserActionsProfile::DiscoverUserActionsProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  content_media_x_entity_(arena),
  card_category_x_entity_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.DiscoverUserActionsProfile)
}
DiscoverUserActionsProfile::DiscoverUserActionsProfile(const DiscoverUserActionsProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      content_media_x_entity_(from.content_media_x_entity_),
      card_category_x_entity_(from.card_category_x_entity_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:feedwire.DiscoverUserActionsProfile)
}

inline void DiscoverUserActionsProfile::SharedCtor() {
}

DiscoverUserActionsProfile::~DiscoverUserActionsProfile() {
  // @@protoc_insertion_point(destructor:feedwire.DiscoverUserActionsProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DiscoverUserActionsProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DiscoverUserActionsProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiscoverUserActionsProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.DiscoverUserActionsProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_media_x_entity_.Clear();
  card_category_x_entity_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DiscoverUserActionsProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts content_media_x_entity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_content_media_x_entity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts card_category_x_entity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_card_category_x_entity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiscoverUserActionsProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.DiscoverUserActionsProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts content_media_x_entity = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_content_media_x_entity_size()); i < n; i++) {
    const auto& repfield = this->_internal_content_media_x_entity(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts card_category_x_entity = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_card_category_x_entity_size()); i < n; i++) {
    const auto& repfield = this->_internal_card_category_x_entity(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.DiscoverUserActionsProfile)
  return target;
}

size_t DiscoverUserActionsProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.DiscoverUserActionsProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts content_media_x_entity = 2;
  total_size += 1UL * this->_internal_content_media_x_entity_size();
  for (const auto& msg : this->content_media_x_entity_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts card_category_x_entity = 3;
  total_size += 1UL * this->_internal_card_category_x_entity_size();
  for (const auto& msg : this->card_category_x_entity_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscoverUserActionsProfile::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DiscoverUserActionsProfile*>(
      &from));
}

void DiscoverUserActionsProfile::MergeFrom(const DiscoverUserActionsProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.DiscoverUserActionsProfile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  content_media_x_entity_.MergeFrom(from.content_media_x_entity_);
  card_category_x_entity_.MergeFrom(from.card_category_x_entity_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DiscoverUserActionsProfile::CopyFrom(const DiscoverUserActionsProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.DiscoverUserActionsProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoverUserActionsProfile::IsInitialized() const {
  return true;
}

void DiscoverUserActionsProfile::InternalSwap(DiscoverUserActionsProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  content_media_x_entity_.InternalSwap(&other->content_media_x_entity_);
  card_category_x_entity_.InternalSwap(&other->card_category_x_entity_);
}

std::string DiscoverUserActionsProfile::GetTypeName() const {
  return "feedwire.DiscoverUserActionsProfile";
}


// ===================================================================

class ViewDemotionProfile::_Internal {
 public:
};

ViewDemotionProfile::ViewDemotionProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.ViewDemotionProfile)
}
ViewDemotionProfile::ViewDemotionProfile(const ViewDemotionProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:feedwire.ViewDemotionProfile)
}

inline void ViewDemotionProfile::SharedCtor() {
}

ViewDemotionProfile::~ViewDemotionProfile() {
  // @@protoc_insertion_point(destructor:feedwire.ViewDemotionProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewDemotionProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ViewDemotionProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ViewDemotionProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.ViewDemotionProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ViewDemotionProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ViewDemotionProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.ViewDemotionProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.ViewDemotionProfile)
  return target;
}

size_t ViewDemotionProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.ViewDemotionProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewDemotionProfile::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ViewDemotionProfile*>(
      &from));
}

void ViewDemotionProfile::MergeFrom(const ViewDemotionProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.ViewDemotionProfile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ViewDemotionProfile::CopyFrom(const ViewDemotionProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.ViewDemotionProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewDemotionProfile::IsInitialized() const {
  return true;
}

void ViewDemotionProfile::InternalSwap(ViewDemotionProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string ViewDemotionProfile::GetTypeName() const {
  return "feedwire.ViewDemotionProfile";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::feedwire::ClientUserProfiles*
Arena::CreateMaybeMessage< ::feedwire::ClientUserProfiles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::ClientUserProfiles >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::ActionCounts_Counts*
Arena::CreateMaybeMessage< ::feedwire::ActionCounts_Counts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::ActionCounts_Counts >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::ActionCounts*
Arena::CreateMaybeMessage< ::feedwire::ActionCounts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::ActionCounts >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts*
Arena::CreateMaybeMessage< ::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts*
Arena::CreateMaybeMessage< ::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::DiscoverUserActionsProfile*
Arena::CreateMaybeMessage< ::feedwire::DiscoverUserActionsProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::DiscoverUserActionsProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::ViewDemotionProfile*
Arena::CreateMaybeMessage< ::feedwire::ViewDemotionProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::ViewDemotionProfile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
