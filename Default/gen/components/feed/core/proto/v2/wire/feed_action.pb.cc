// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/feed_action.proto

#include "components/feed/core/proto/v2/wire/feed_action.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedwire {
PROTOBUF_CONSTEXPR FeedAction_ClientData::FeedAction_ClientData(
    ::_pbi::ConstantInitialized)
  : timestamp_seconds_(int64_t{0})
  , sequence_number_(int64_t{0})
  , duration_ms_(int64_t{0})
  , action_origin_(0)

  , action_surface_(0)
{}
struct FeedAction_ClientDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedAction_ClientDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedAction_ClientDataDefaultTypeInternal() {}
  union {
    FeedAction_ClientData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedAction_ClientDataDefaultTypeInternal _FeedAction_ClientData_default_instance_;
PROTOBUF_CONSTEXPR FeedAction::FeedAction(
    ::_pbi::ConstantInitialized)
  : action_payload_(nullptr)
  , client_data_(nullptr){}
struct FeedActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedActionDefaultTypeInternal() {}
  union {
    FeedAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedActionDefaultTypeInternal _FeedAction_default_instance_;
}  // namespace feedwire
namespace feedwire {
bool FeedAction_ClientData_ActionOrigin_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FeedAction_ClientData_ActionOrigin_strings[3] = {};

static const char FeedAction_ClientData_ActionOrigin_names[] =
  "CLIENT_CACHE"
  "CLIENT_SESSION"
  "UNKNOWN_ORIGIN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FeedAction_ClientData_ActionOrigin_entries[] = {
  { {FeedAction_ClientData_ActionOrigin_names + 0, 12}, 2 },
  { {FeedAction_ClientData_ActionOrigin_names + 12, 14}, 1 },
  { {FeedAction_ClientData_ActionOrigin_names + 26, 14}, 0 },
};

static const int FeedAction_ClientData_ActionOrigin_entries_by_number[] = {
  2, // 0 -> UNKNOWN_ORIGIN
  1, // 1 -> CLIENT_SESSION
  0, // 2 -> CLIENT_CACHE
};

const std::string& FeedAction_ClientData_ActionOrigin_Name(
    FeedAction_ClientData_ActionOrigin value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FeedAction_ClientData_ActionOrigin_entries,
          FeedAction_ClientData_ActionOrigin_entries_by_number,
          3, FeedAction_ClientData_ActionOrigin_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FeedAction_ClientData_ActionOrigin_entries,
      FeedAction_ClientData_ActionOrigin_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FeedAction_ClientData_ActionOrigin_strings[idx].get();
}
bool FeedAction_ClientData_ActionOrigin_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FeedAction_ClientData_ActionOrigin* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FeedAction_ClientData_ActionOrigin_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<FeedAction_ClientData_ActionOrigin>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FeedAction_ClientData_ActionOrigin FeedAction_ClientData::UNKNOWN_ORIGIN;
constexpr FeedAction_ClientData_ActionOrigin FeedAction_ClientData::CLIENT_SESSION;
constexpr FeedAction_ClientData_ActionOrigin FeedAction_ClientData::CLIENT_CACHE;
constexpr FeedAction_ClientData_ActionOrigin FeedAction_ClientData::ActionOrigin_MIN;
constexpr FeedAction_ClientData_ActionOrigin FeedAction_ClientData::ActionOrigin_MAX;
constexpr int FeedAction_ClientData::ActionOrigin_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class FeedAction_ClientData::_Internal {
 public:
  using HasBits = decltype(std::declval<FeedAction_ClientData>()._has_bits_);
  static void set_has_timestamp_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_action_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_action_surface(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

FeedAction_ClientData::FeedAction_ClientData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.FeedAction.ClientData)
}
FeedAction_ClientData::FeedAction_ClientData(const FeedAction_ClientData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&timestamp_seconds_, &from.timestamp_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_surface_) -
    reinterpret_cast<char*>(&timestamp_seconds_)) + sizeof(action_surface_));
  // @@protoc_insertion_point(copy_constructor:feedwire.FeedAction.ClientData)
}

inline void FeedAction_ClientData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_seconds_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&action_surface_) -
    reinterpret_cast<char*>(&timestamp_seconds_)) + sizeof(action_surface_));
}

FeedAction_ClientData::~FeedAction_ClientData() {
  // @@protoc_insertion_point(destructor:feedwire.FeedAction.ClientData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeedAction_ClientData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FeedAction_ClientData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FeedAction_ClientData::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.FeedAction.ClientData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&timestamp_seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_surface_) -
        reinterpret_cast<char*>(&timestamp_seconds_)) + sizeof(action_surface_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FeedAction_ClientData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_seconds(&has_bits);
          timestamp_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 sequence_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.FeedAction.ClientData.ActionOrigin action_origin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::feedwire::FeedAction_ClientData_ActionOrigin_IsValid(val))) {
            _internal_set_action_origin(static_cast<::feedwire::FeedAction_ClientData_ActionOrigin>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.ActionSurface action_surface = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::feedwire::ActionSurface_IsValid(val))) {
            _internal_set_action_surface(static_cast<::feedwire::ActionSurface>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeedAction_ClientData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.FeedAction.ClientData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_seconds = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp_seconds(), target);
  }

  // optional int64 sequence_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_sequence_number(), target);
  }

  // optional int64 duration_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_duration_ms(), target);
  }

  // optional .feedwire.FeedAction.ClientData.ActionOrigin action_origin = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_action_origin(), target);
  }

  // optional .feedwire.ActionSurface action_surface = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_action_surface(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.FeedAction.ClientData)
  return target;
}

size_t FeedAction_ClientData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.FeedAction.ClientData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 timestamp_seconds = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_seconds());
    }

    // optional int64 sequence_number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sequence_number());
    }

    // optional int64 duration_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_duration_ms());
    }

    // optional .feedwire.FeedAction.ClientData.ActionOrigin action_origin = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_action_origin());
    }

    // optional .feedwire.ActionSurface action_surface = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_action_surface());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeedAction_ClientData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FeedAction_ClientData*>(
      &from));
}

void FeedAction_ClientData::MergeFrom(const FeedAction_ClientData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.FeedAction.ClientData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_seconds_ = from.timestamp_seconds_;
    }
    if (cached_has_bits & 0x00000002u) {
      sequence_number_ = from.sequence_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      action_origin_ = from.action_origin_;
    }
    if (cached_has_bits & 0x00000010u) {
      action_surface_ = from.action_surface_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FeedAction_ClientData::CopyFrom(const FeedAction_ClientData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.FeedAction.ClientData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedAction_ClientData::IsInitialized() const {
  return true;
}

void FeedAction_ClientData::InternalSwap(FeedAction_ClientData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FeedAction_ClientData, action_surface_)
      + sizeof(FeedAction_ClientData::action_surface_)
      - PROTOBUF_FIELD_OFFSET(FeedAction_ClientData, timestamp_seconds_)>(
          reinterpret_cast<char*>(&timestamp_seconds_),
          reinterpret_cast<char*>(&other->timestamp_seconds_));
}

std::string FeedAction_ClientData::GetTypeName() const {
  return "feedwire.FeedAction.ClientData";
}


// ===================================================================

class FeedAction::_Internal {
 public:
  using HasBits = decltype(std::declval<FeedAction>()._has_bits_);
  static const ::feedwire::ActionPayload& action_payload(const FeedAction* msg);
  static void set_has_action_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::feedwire::FeedAction_ClientData& client_data(const FeedAction* msg);
  static void set_has_client_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::feedwire::ActionPayload&
FeedAction::_Internal::action_payload(const FeedAction* msg) {
  return *msg->action_payload_;
}
const ::feedwire::FeedAction_ClientData&
FeedAction::_Internal::client_data(const FeedAction* msg) {
  return *msg->client_data_;
}
void FeedAction::clear_action_payload() {
  if (action_payload_ != nullptr) action_payload_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FeedAction::FeedAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.FeedAction)
}
FeedAction::FeedAction(const FeedAction& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_action_payload()) {
    action_payload_ = new ::feedwire::ActionPayload(*from.action_payload_);
  } else {
    action_payload_ = nullptr;
  }
  if (from._internal_has_client_data()) {
    client_data_ = new ::feedwire::FeedAction_ClientData(*from.client_data_);
  } else {
    client_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:feedwire.FeedAction)
}

inline void FeedAction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_payload_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_data_) -
    reinterpret_cast<char*>(&action_payload_)) + sizeof(client_data_));
}

FeedAction::~FeedAction() {
  // @@protoc_insertion_point(destructor:feedwire.FeedAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeedAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_payload_;
  if (this != internal_default_instance()) delete client_data_;
}

void FeedAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FeedAction::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.FeedAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(action_payload_ != nullptr);
      action_payload_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(client_data_ != nullptr);
      client_data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FeedAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .feedwire.ActionPayload action_payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.FeedAction.ClientData client_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeedAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.FeedAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .feedwire.ActionPayload action_payload = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::action_payload(this),
        _Internal::action_payload(this).GetCachedSize(), target, stream);
  }

  // optional .feedwire.FeedAction.ClientData client_data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::client_data(this),
        _Internal::client_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.FeedAction)
  return target;
}

size_t FeedAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.FeedAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .feedwire.ActionPayload action_payload = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_payload_);
    }

    // optional .feedwire.FeedAction.ClientData client_data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_data_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeedAction::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FeedAction*>(
      &from));
}

void FeedAction::MergeFrom(const FeedAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.FeedAction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_action_payload()->::feedwire::ActionPayload::MergeFrom(from._internal_action_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_client_data()->::feedwire::FeedAction_ClientData::MergeFrom(from._internal_client_data());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FeedAction::CopyFrom(const FeedAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.FeedAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedAction::IsInitialized() const {
  return true;
}

void FeedAction::InternalSwap(FeedAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FeedAction, client_data_)
      + sizeof(FeedAction::client_data_)
      - PROTOBUF_FIELD_OFFSET(FeedAction, action_payload_)>(
          reinterpret_cast<char*>(&action_payload_),
          reinterpret_cast<char*>(&other->action_payload_));
}

std::string FeedAction::GetTypeName() const {
  return "feedwire.FeedAction";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::feedwire::FeedAction_ClientData*
Arena::CreateMaybeMessage< ::feedwire::FeedAction_ClientData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::FeedAction_ClientData >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::FeedAction*
Arena::CreateMaybeMessage< ::feedwire::FeedAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::FeedAction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
