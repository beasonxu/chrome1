// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/content_id.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fcontent_5fid_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fcontent_5fid_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fcontent_5fid_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fcontent_5fid_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
class ContentId;
struct ContentIdDefaultTypeInternal;
extern ContentIdDefaultTypeInternal _ContentId_default_instance_;
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::ContentId* Arena::CreateMaybeMessage<::feedwire::ContentId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

enum ContentId_Type : int {
  ContentId_Type_TYPE_UNDEFINED = 0,
  ContentId_Type_CLUSTER = 3,
  ContentId_Type_FEATURE = 4
};
bool ContentId_Type_IsValid(int value);
constexpr ContentId_Type ContentId_Type_Type_MIN = ContentId_Type_TYPE_UNDEFINED;
constexpr ContentId_Type ContentId_Type_Type_MAX = ContentId_Type_FEATURE;
constexpr int ContentId_Type_Type_ARRAYSIZE = ContentId_Type_Type_MAX + 1;

const std::string& ContentId_Type_Name(ContentId_Type value);
template<typename T>
inline const std::string& ContentId_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContentId_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContentId_Type_Name.");
  return ContentId_Type_Name(static_cast<ContentId_Type>(enum_t_value));
}
bool ContentId_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ContentId_Type* value);
// ===================================================================

class ContentId final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.ContentId) */ {
 public:
  inline ContentId() : ContentId(nullptr) {}
  ~ContentId() override;
  explicit PROTOBUF_CONSTEXPR ContentId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentId(const ContentId& from);
  ContentId(ContentId&& from) noexcept
    : ContentId() {
    *this = ::std::move(from);
  }

  inline ContentId& operator=(const ContentId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentId& operator=(ContentId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ContentId& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentId* internal_default_instance() {
    return reinterpret_cast<const ContentId*>(
               &_ContentId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContentId& a, ContentId& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ContentId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentId>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ContentId& from);
  void MergeFrom(const ContentId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.ContentId";
  }
  protected:
  explicit ContentId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ContentId_Type Type;
  static constexpr Type TYPE_UNDEFINED =
    ContentId_Type_TYPE_UNDEFINED;
  static constexpr Type CLUSTER =
    ContentId_Type_CLUSTER;
  static constexpr Type FEATURE =
    ContentId_Type_FEATURE;
  static inline bool Type_IsValid(int value) {
    return ContentId_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ContentId_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ContentId_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ContentId_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ContentId_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ContentId_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContentDomainFieldNumber = 1,
    kIdFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // optional string content_domain = 1;
  bool has_content_domain() const;
  private:
  bool _internal_has_content_domain() const;
  public:
  void clear_content_domain();
  const std::string& content_domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_domain();
  PROTOBUF_NODISCARD std::string* release_content_domain();
  void set_allocated_content_domain(std::string* content_domain);
  private:
  const std::string& _internal_content_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_domain(const std::string& value);
  std::string* _internal_mutable_content_domain();
  public:

  // optional fixed64 id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional int32 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:feedwire.ContentId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_domain_;
  uint64_t id_;
  int32_t type_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fcontent_5fid_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContentId

// optional string content_domain = 1;
inline bool ContentId::_internal_has_content_domain() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContentId::has_content_domain() const {
  return _internal_has_content_domain();
}
inline void ContentId::clear_content_domain() {
  content_domain_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentId::content_domain() const {
  // @@protoc_insertion_point(field_get:feedwire.ContentId.content_domain)
  return _internal_content_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentId::set_content_domain(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 content_domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.ContentId.content_domain)
}
inline std::string* ContentId::mutable_content_domain() {
  std::string* _s = _internal_mutable_content_domain();
  // @@protoc_insertion_point(field_mutable:feedwire.ContentId.content_domain)
  return _s;
}
inline const std::string& ContentId::_internal_content_domain() const {
  return content_domain_.Get();
}
inline void ContentId::_internal_set_content_domain(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_domain_.Set(value, GetArenaForAllocation());
}
inline std::string* ContentId::_internal_mutable_content_domain() {
  _has_bits_[0] |= 0x00000001u;
  return content_domain_.Mutable(GetArenaForAllocation());
}
inline std::string* ContentId::release_content_domain() {
  // @@protoc_insertion_point(field_release:feedwire.ContentId.content_domain)
  if (!_internal_has_content_domain()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = content_domain_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_domain_.IsDefault()) {
    content_domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentId::set_allocated_content_domain(std::string* content_domain) {
  if (content_domain != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_domain_.SetAllocated(content_domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_domain_.IsDefault()) {
    content_domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.ContentId.content_domain)
}

// optional int32 type = 2;
inline bool ContentId::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContentId::has_type() const {
  return _internal_has_type();
}
inline void ContentId::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t ContentId::_internal_type() const {
  return type_;
}
inline int32_t ContentId::type() const {
  // @@protoc_insertion_point(field_get:feedwire.ContentId.type)
  return _internal_type();
}
inline void ContentId::_internal_set_type(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void ContentId::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:feedwire.ContentId.type)
}

// optional fixed64 id = 3;
inline bool ContentId::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContentId::has_id() const {
  return _internal_has_id();
}
inline void ContentId::clear_id() {
  id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t ContentId::_internal_id() const {
  return id_;
}
inline uint64_t ContentId::id() const {
  // @@protoc_insertion_point(field_get:feedwire.ContentId.id)
  return _internal_id();
}
inline void ContentId::_internal_set_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void ContentId::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:feedwire.ContentId.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::feedwire::ContentId_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fcontent_5fid_2eproto
