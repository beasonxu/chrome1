// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/version.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fversion_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fversion_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fversion_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fversion_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
class Version;
struct VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::Version* Arena::CreateMaybeMessage<::feedwire::Version>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

enum Version_Architecture : int {
  Version_Architecture_UNKNOWN_ARCHITECTURE = 0,
  Version_Architecture_ARM = 1,
  Version_Architecture_ARM64 = 2,
  Version_Architecture_MIPS = 3,
  Version_Architecture_MIPS64 = 4,
  Version_Architecture_X86 = 5,
  Version_Architecture_X86_64 = 6
};
bool Version_Architecture_IsValid(int value);
constexpr Version_Architecture Version_Architecture_Architecture_MIN = Version_Architecture_UNKNOWN_ARCHITECTURE;
constexpr Version_Architecture Version_Architecture_Architecture_MAX = Version_Architecture_X86_64;
constexpr int Version_Architecture_Architecture_ARRAYSIZE = Version_Architecture_Architecture_MAX + 1;

const std::string& Version_Architecture_Name(Version_Architecture value);
template<typename T>
inline const std::string& Version_Architecture_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Version_Architecture>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Version_Architecture_Name.");
  return Version_Architecture_Name(static_cast<Version_Architecture>(enum_t_value));
}
bool Version_Architecture_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Version_Architecture* value);
enum Version_BuildType : int {
  Version_BuildType_UNKNOWN_BUILD_TYPE = 0,
  Version_BuildType_DEV = 1,
  Version_BuildType_ALPHA = 2,
  Version_BuildType_BETA = 3,
  Version_BuildType_RELEASE = 4
};
bool Version_BuildType_IsValid(int value);
constexpr Version_BuildType Version_BuildType_BuildType_MIN = Version_BuildType_UNKNOWN_BUILD_TYPE;
constexpr Version_BuildType Version_BuildType_BuildType_MAX = Version_BuildType_RELEASE;
constexpr int Version_BuildType_BuildType_ARRAYSIZE = Version_BuildType_BuildType_MAX + 1;

const std::string& Version_BuildType_Name(Version_BuildType value);
template<typename T>
inline const std::string& Version_BuildType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Version_BuildType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Version_BuildType_Name.");
  return Version_BuildType_Name(static_cast<Version_BuildType>(enum_t_value));
}
bool Version_BuildType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Version_BuildType* value);
// ===================================================================

class Version final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  ~Version() override;
  explicit PROTOBUF_CONSTEXPR Version(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Version(const Version& from);
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Version& default_instance() {
    return *internal_default_instance();
  }
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Version* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Version& from);
  void MergeFrom(const Version& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Version* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.Version";
  }
  protected:
  explicit Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Version_Architecture Architecture;
  static constexpr Architecture UNKNOWN_ARCHITECTURE =
    Version_Architecture_UNKNOWN_ARCHITECTURE;
  static constexpr Architecture ARM =
    Version_Architecture_ARM;
  static constexpr Architecture ARM64 =
    Version_Architecture_ARM64;
  static constexpr Architecture MIPS =
    Version_Architecture_MIPS;
  static constexpr Architecture MIPS64 =
    Version_Architecture_MIPS64;
  static constexpr Architecture X86 =
    Version_Architecture_X86;
  static constexpr Architecture X86_64 =
    Version_Architecture_X86_64;
  static inline bool Architecture_IsValid(int value) {
    return Version_Architecture_IsValid(value);
  }
  static constexpr Architecture Architecture_MIN =
    Version_Architecture_Architecture_MIN;
  static constexpr Architecture Architecture_MAX =
    Version_Architecture_Architecture_MAX;
  static constexpr int Architecture_ARRAYSIZE =
    Version_Architecture_Architecture_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Architecture_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Architecture>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Architecture_Name.");
    return Version_Architecture_Name(enum_t_value);
  }
  static inline bool Architecture_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Architecture* value) {
    return Version_Architecture_Parse(name, value);
  }

  typedef Version_BuildType BuildType;
  static constexpr BuildType UNKNOWN_BUILD_TYPE =
    Version_BuildType_UNKNOWN_BUILD_TYPE;
  static constexpr BuildType DEV =
    Version_BuildType_DEV;
  static constexpr BuildType ALPHA =
    Version_BuildType_ALPHA;
  static constexpr BuildType BETA =
    Version_BuildType_BETA;
  static constexpr BuildType RELEASE =
    Version_BuildType_RELEASE;
  static inline bool BuildType_IsValid(int value) {
    return Version_BuildType_IsValid(value);
  }
  static constexpr BuildType BuildType_MIN =
    Version_BuildType_BuildType_MIN;
  static constexpr BuildType BuildType_MAX =
    Version_BuildType_BuildType_MAX;
  static constexpr int BuildType_ARRAYSIZE =
    Version_BuildType_BuildType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& BuildType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BuildType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BuildType_Name.");
    return Version_BuildType_Name(enum_t_value);
  }
  static inline bool BuildType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BuildType* value) {
    return Version_BuildType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMajorFieldNumber = 1,
    kMinorFieldNumber = 2,
    kBuildFieldNumber = 3,
    kRevisionFieldNumber = 4,
    kArchitectureFieldNumber = 5,
    kBuildTypeFieldNumber = 6,
    kApiVersionFieldNumber = 7,
  };
  // optional int32 major = 1;
  bool has_major() const;
  private:
  bool _internal_has_major() const;
  public:
  void clear_major();
  int32_t major() const;
  void set_major(int32_t value);
  private:
  int32_t _internal_major() const;
  void _internal_set_major(int32_t value);
  public:

  // optional int32 minor = 2;
  bool has_minor() const;
  private:
  bool _internal_has_minor() const;
  public:
  void clear_minor();
  int32_t minor() const;
  void set_minor(int32_t value);
  private:
  int32_t _internal_minor() const;
  void _internal_set_minor(int32_t value);
  public:

  // optional int32 build = 3;
  bool has_build() const;
  private:
  bool _internal_has_build() const;
  public:
  void clear_build();
  int32_t build() const;
  void set_build(int32_t value);
  private:
  int32_t _internal_build() const;
  void _internal_set_build(int32_t value);
  public:

  // optional int32 revision = 4;
  bool has_revision() const;
  private:
  bool _internal_has_revision() const;
  public:
  void clear_revision();
  int32_t revision() const;
  void set_revision(int32_t value);
  private:
  int32_t _internal_revision() const;
  void _internal_set_revision(int32_t value);
  public:

  // optional .feedwire.Version.Architecture architecture = 5;
  bool has_architecture() const;
  private:
  bool _internal_has_architecture() const;
  public:
  void clear_architecture();
  ::feedwire::Version_Architecture architecture() const;
  void set_architecture(::feedwire::Version_Architecture value);
  private:
  ::feedwire::Version_Architecture _internal_architecture() const;
  void _internal_set_architecture(::feedwire::Version_Architecture value);
  public:

  // optional .feedwire.Version.BuildType build_type = 6;
  bool has_build_type() const;
  private:
  bool _internal_has_build_type() const;
  public:
  void clear_build_type();
  ::feedwire::Version_BuildType build_type() const;
  void set_build_type(::feedwire::Version_BuildType value);
  private:
  ::feedwire::Version_BuildType _internal_build_type() const;
  void _internal_set_build_type(::feedwire::Version_BuildType value);
  public:

  // optional int32 api_version = 7;
  bool has_api_version() const;
  private:
  bool _internal_has_api_version() const;
  public:
  void clear_api_version();
  int32_t api_version() const;
  void set_api_version(int32_t value);
  private:
  int32_t _internal_api_version() const;
  void _internal_set_api_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:feedwire.Version)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t major_;
  int32_t minor_;
  int32_t build_;
  int32_t revision_;
  int architecture_;
  int build_type_;
  int32_t api_version_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fversion_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Version

// optional int32 major = 1;
inline bool Version::_internal_has_major() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Version::has_major() const {
  return _internal_has_major();
}
inline void Version::clear_major() {
  major_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t Version::_internal_major() const {
  return major_;
}
inline int32_t Version::major() const {
  // @@protoc_insertion_point(field_get:feedwire.Version.major)
  return _internal_major();
}
inline void Version::_internal_set_major(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  major_ = value;
}
inline void Version::set_major(int32_t value) {
  _internal_set_major(value);
  // @@protoc_insertion_point(field_set:feedwire.Version.major)
}

// optional int32 minor = 2;
inline bool Version::_internal_has_minor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Version::has_minor() const {
  return _internal_has_minor();
}
inline void Version::clear_minor() {
  minor_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Version::_internal_minor() const {
  return minor_;
}
inline int32_t Version::minor() const {
  // @@protoc_insertion_point(field_get:feedwire.Version.minor)
  return _internal_minor();
}
inline void Version::_internal_set_minor(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  minor_ = value;
}
inline void Version::set_minor(int32_t value) {
  _internal_set_minor(value);
  // @@protoc_insertion_point(field_set:feedwire.Version.minor)
}

// optional int32 build = 3;
inline bool Version::_internal_has_build() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Version::has_build() const {
  return _internal_has_build();
}
inline void Version::clear_build() {
  build_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t Version::_internal_build() const {
  return build_;
}
inline int32_t Version::build() const {
  // @@protoc_insertion_point(field_get:feedwire.Version.build)
  return _internal_build();
}
inline void Version::_internal_set_build(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  build_ = value;
}
inline void Version::set_build(int32_t value) {
  _internal_set_build(value);
  // @@protoc_insertion_point(field_set:feedwire.Version.build)
}

// optional int32 revision = 4;
inline bool Version::_internal_has_revision() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Version::has_revision() const {
  return _internal_has_revision();
}
inline void Version::clear_revision() {
  revision_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t Version::_internal_revision() const {
  return revision_;
}
inline int32_t Version::revision() const {
  // @@protoc_insertion_point(field_get:feedwire.Version.revision)
  return _internal_revision();
}
inline void Version::_internal_set_revision(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  revision_ = value;
}
inline void Version::set_revision(int32_t value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:feedwire.Version.revision)
}

// optional .feedwire.Version.Architecture architecture = 5;
inline bool Version::_internal_has_architecture() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Version::has_architecture() const {
  return _internal_has_architecture();
}
inline void Version::clear_architecture() {
  architecture_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::feedwire::Version_Architecture Version::_internal_architecture() const {
  return static_cast< ::feedwire::Version_Architecture >(architecture_);
}
inline ::feedwire::Version_Architecture Version::architecture() const {
  // @@protoc_insertion_point(field_get:feedwire.Version.architecture)
  return _internal_architecture();
}
inline void Version::_internal_set_architecture(::feedwire::Version_Architecture value) {
  assert(::feedwire::Version_Architecture_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  architecture_ = value;
}
inline void Version::set_architecture(::feedwire::Version_Architecture value) {
  _internal_set_architecture(value);
  // @@protoc_insertion_point(field_set:feedwire.Version.architecture)
}

// optional .feedwire.Version.BuildType build_type = 6;
inline bool Version::_internal_has_build_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Version::has_build_type() const {
  return _internal_has_build_type();
}
inline void Version::clear_build_type() {
  build_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::feedwire::Version_BuildType Version::_internal_build_type() const {
  return static_cast< ::feedwire::Version_BuildType >(build_type_);
}
inline ::feedwire::Version_BuildType Version::build_type() const {
  // @@protoc_insertion_point(field_get:feedwire.Version.build_type)
  return _internal_build_type();
}
inline void Version::_internal_set_build_type(::feedwire::Version_BuildType value) {
  assert(::feedwire::Version_BuildType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  build_type_ = value;
}
inline void Version::set_build_type(::feedwire::Version_BuildType value) {
  _internal_set_build_type(value);
  // @@protoc_insertion_point(field_set:feedwire.Version.build_type)
}

// optional int32 api_version = 7;
inline bool Version::_internal_has_api_version() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Version::has_api_version() const {
  return _internal_has_api_version();
}
inline void Version::clear_api_version() {
  api_version_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t Version::_internal_api_version() const {
  return api_version_;
}
inline int32_t Version::api_version() const {
  // @@protoc_insertion_point(field_get:feedwire.Version.api_version)
  return _internal_api_version();
}
inline void Version::_internal_set_api_version(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  api_version_ = value;
}
inline void Version::set_api_version(int32_t value) {
  _internal_set_api_version(value);
  // @@protoc_insertion_point(field_set:feedwire.Version.api_version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::feedwire::Version_Architecture> : ::std::true_type {};
template <> struct is_proto_enum< ::feedwire::Version_BuildType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fversion_2eproto
