// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/feed_query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5fquery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5fquery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/feed/core/proto/v2/wire/chrome_fulfillment_info.pb.h"
#include "components/feed/core/proto/v2/wire/feed_entry_point_data.pb.h"
#include "components/feed/core/proto/v2/wire/token.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5fquery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5fquery_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
class FeedQuery;
struct FeedQueryDefaultTypeInternal;
extern FeedQueryDefaultTypeInternal _FeedQuery_default_instance_;
class FeedQuery_Tokens;
struct FeedQuery_TokensDefaultTypeInternal;
extern FeedQuery_TokensDefaultTypeInternal _FeedQuery_Tokens_default_instance_;
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::FeedQuery* Arena::CreateMaybeMessage<::feedwire::FeedQuery>(Arena*);
template<> ::feedwire::FeedQuery_Tokens* Arena::CreateMaybeMessage<::feedwire::FeedQuery_Tokens>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

enum FeedQuery_RequestReason : int {
  FeedQuery_RequestReason_UNKNOWN_REQUEST_REASON = 0,
  FeedQuery_RequestReason_MANUAL_REFRESH = 1,
  FeedQuery_RequestReason_SCHEDULED_REFRESH = 2,
  FeedQuery_RequestReason_APP_CLOSE_REFRESH = 13,
  FeedQuery_RequestReason_NEXT_PAGE_SCROLL = 3,
  FeedQuery_RequestReason_PREFETCHED_WEB_FEED = 8,
  FeedQuery_RequestReason_INTERACTIVE_WEB_FEED = 9
};
bool FeedQuery_RequestReason_IsValid(int value);
constexpr FeedQuery_RequestReason FeedQuery_RequestReason_RequestReason_MIN = FeedQuery_RequestReason_UNKNOWN_REQUEST_REASON;
constexpr FeedQuery_RequestReason FeedQuery_RequestReason_RequestReason_MAX = FeedQuery_RequestReason_APP_CLOSE_REFRESH;
constexpr int FeedQuery_RequestReason_RequestReason_ARRAYSIZE = FeedQuery_RequestReason_RequestReason_MAX + 1;

const std::string& FeedQuery_RequestReason_Name(FeedQuery_RequestReason value);
template<typename T>
inline const std::string& FeedQuery_RequestReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FeedQuery_RequestReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FeedQuery_RequestReason_Name.");
  return FeedQuery_RequestReason_Name(static_cast<FeedQuery_RequestReason>(enum_t_value));
}
bool FeedQuery_RequestReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FeedQuery_RequestReason* value);
enum FeedQuery_ContentOrder : int {
  FeedQuery_ContentOrder_CONTENT_ORDER_UNSPECIFIED = 0,
  FeedQuery_ContentOrder_RECENT = 2,
  FeedQuery_ContentOrder_GROUPED = 4
};
bool FeedQuery_ContentOrder_IsValid(int value);
constexpr FeedQuery_ContentOrder FeedQuery_ContentOrder_ContentOrder_MIN = FeedQuery_ContentOrder_CONTENT_ORDER_UNSPECIFIED;
constexpr FeedQuery_ContentOrder FeedQuery_ContentOrder_ContentOrder_MAX = FeedQuery_ContentOrder_GROUPED;
constexpr int FeedQuery_ContentOrder_ContentOrder_ARRAYSIZE = FeedQuery_ContentOrder_ContentOrder_MAX + 1;

const std::string& FeedQuery_ContentOrder_Name(FeedQuery_ContentOrder value);
template<typename T>
inline const std::string& FeedQuery_ContentOrder_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FeedQuery_ContentOrder>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FeedQuery_ContentOrder_Name.");
  return FeedQuery_ContentOrder_Name(static_cast<FeedQuery_ContentOrder>(enum_t_value));
}
bool FeedQuery_ContentOrder_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FeedQuery_ContentOrder* value);
// ===================================================================

class FeedQuery_Tokens final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.FeedQuery.Tokens) */ {
 public:
  inline FeedQuery_Tokens() : FeedQuery_Tokens(nullptr) {}
  ~FeedQuery_Tokens() override;
  explicit PROTOBUF_CONSTEXPR FeedQuery_Tokens(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeedQuery_Tokens(const FeedQuery_Tokens& from);
  FeedQuery_Tokens(FeedQuery_Tokens&& from) noexcept
    : FeedQuery_Tokens() {
    *this = ::std::move(from);
  }

  inline FeedQuery_Tokens& operator=(const FeedQuery_Tokens& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedQuery_Tokens& operator=(FeedQuery_Tokens&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FeedQuery_Tokens& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeedQuery_Tokens* internal_default_instance() {
    return reinterpret_cast<const FeedQuery_Tokens*>(
               &_FeedQuery_Tokens_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FeedQuery_Tokens& a, FeedQuery_Tokens& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FeedQuery_Tokens* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedQuery_Tokens* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeedQuery_Tokens* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeedQuery_Tokens>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FeedQuery_Tokens& from);
  void MergeFrom(const FeedQuery_Tokens& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeedQuery_Tokens* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.FeedQuery.Tokens";
  }
  protected:
  explicit FeedQuery_Tokens(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokensFieldNumber = 1,
  };
  // repeated .feedwire.Token tokens = 1;
  int tokens_size() const;
  private:
  int _internal_tokens_size() const;
  public:
  void clear_tokens();
  ::feedwire::Token* mutable_tokens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::Token >*
      mutable_tokens();
  private:
  const ::feedwire::Token& _internal_tokens(int index) const;
  ::feedwire::Token* _internal_add_tokens();
  public:
  const ::feedwire::Token& tokens(int index) const;
  ::feedwire::Token* add_tokens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::Token >&
      tokens() const;

  // @@protoc_insertion_point(class_scope:feedwire.FeedQuery.Tokens)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::Token > tokens_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5fquery_2eproto;
};
// -------------------------------------------------------------------

class FeedQuery final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.FeedQuery) */ {
 public:
  inline FeedQuery() : FeedQuery(nullptr) {}
  ~FeedQuery() override;
  explicit PROTOBUF_CONSTEXPR FeedQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeedQuery(const FeedQuery& from);
  FeedQuery(FeedQuery&& from) noexcept
    : FeedQuery() {
    *this = ::std::move(from);
  }

  inline FeedQuery& operator=(const FeedQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedQuery& operator=(FeedQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FeedQuery& default_instance() {
    return *internal_default_instance();
  }
  enum TokenCase {
    kNextPageToken = 3,
    kWebFeedToken = 4,
    TOKEN_NOT_SET = 0,
  };

  static inline const FeedQuery* internal_default_instance() {
    return reinterpret_cast<const FeedQuery*>(
               &_FeedQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FeedQuery& a, FeedQuery& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FeedQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeedQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeedQuery>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FeedQuery& from);
  void MergeFrom(const FeedQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeedQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.FeedQuery";
  }
  protected:
  explicit FeedQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FeedQuery_Tokens Tokens;

  typedef FeedQuery_RequestReason RequestReason;
  static constexpr RequestReason UNKNOWN_REQUEST_REASON =
    FeedQuery_RequestReason_UNKNOWN_REQUEST_REASON;
  static constexpr RequestReason MANUAL_REFRESH =
    FeedQuery_RequestReason_MANUAL_REFRESH;
  static constexpr RequestReason SCHEDULED_REFRESH =
    FeedQuery_RequestReason_SCHEDULED_REFRESH;
  static constexpr RequestReason APP_CLOSE_REFRESH =
    FeedQuery_RequestReason_APP_CLOSE_REFRESH;
  static constexpr RequestReason NEXT_PAGE_SCROLL =
    FeedQuery_RequestReason_NEXT_PAGE_SCROLL;
  static constexpr RequestReason PREFETCHED_WEB_FEED =
    FeedQuery_RequestReason_PREFETCHED_WEB_FEED;
  static constexpr RequestReason INTERACTIVE_WEB_FEED =
    FeedQuery_RequestReason_INTERACTIVE_WEB_FEED;
  static inline bool RequestReason_IsValid(int value) {
    return FeedQuery_RequestReason_IsValid(value);
  }
  static constexpr RequestReason RequestReason_MIN =
    FeedQuery_RequestReason_RequestReason_MIN;
  static constexpr RequestReason RequestReason_MAX =
    FeedQuery_RequestReason_RequestReason_MAX;
  static constexpr int RequestReason_ARRAYSIZE =
    FeedQuery_RequestReason_RequestReason_ARRAYSIZE;
  template<typename T>
  static inline const std::string& RequestReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RequestReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RequestReason_Name.");
    return FeedQuery_RequestReason_Name(enum_t_value);
  }
  static inline bool RequestReason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RequestReason* value) {
    return FeedQuery_RequestReason_Parse(name, value);
  }

  typedef FeedQuery_ContentOrder ContentOrder;
  static constexpr ContentOrder CONTENT_ORDER_UNSPECIFIED =
    FeedQuery_ContentOrder_CONTENT_ORDER_UNSPECIFIED;
  static constexpr ContentOrder RECENT =
    FeedQuery_ContentOrder_RECENT;
  static constexpr ContentOrder GROUPED =
    FeedQuery_ContentOrder_GROUPED;
  static inline bool ContentOrder_IsValid(int value) {
    return FeedQuery_ContentOrder_IsValid(value);
  }
  static constexpr ContentOrder ContentOrder_MIN =
    FeedQuery_ContentOrder_ContentOrder_MIN;
  static constexpr ContentOrder ContentOrder_MAX =
    FeedQuery_ContentOrder_ContentOrder_MAX;
  static constexpr int ContentOrder_ARRAYSIZE =
    FeedQuery_ContentOrder_ContentOrder_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ContentOrder_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ContentOrder>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ContentOrder_Name.");
    return FeedQuery_ContentOrder_Name(enum_t_value);
  }
  static inline bool ContentOrder_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ContentOrder* value) {
    return FeedQuery_ContentOrder_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFeedEntryPointDataFieldNumber = 9,
    kChromeFulfillmentInfoFieldNumber = 341477699,
    kReasonFieldNumber = 1,
    kOrderByFieldNumber = 8,
    kNextPageTokenFieldNumber = 3,
    kWebFeedTokenFieldNumber = 4,
  };
  // optional .feedwire.FeedEntryPointData feed_entry_point_data = 9;
  bool has_feed_entry_point_data() const;
  private:
  bool _internal_has_feed_entry_point_data() const;
  public:
  void clear_feed_entry_point_data();
  const ::feedwire::FeedEntryPointData& feed_entry_point_data() const;
  PROTOBUF_NODISCARD ::feedwire::FeedEntryPointData* release_feed_entry_point_data();
  ::feedwire::FeedEntryPointData* mutable_feed_entry_point_data();
  void set_allocated_feed_entry_point_data(::feedwire::FeedEntryPointData* feed_entry_point_data);
  private:
  const ::feedwire::FeedEntryPointData& _internal_feed_entry_point_data() const;
  ::feedwire::FeedEntryPointData* _internal_mutable_feed_entry_point_data();
  public:
  void unsafe_arena_set_allocated_feed_entry_point_data(
      ::feedwire::FeedEntryPointData* feed_entry_point_data);
  ::feedwire::FeedEntryPointData* unsafe_arena_release_feed_entry_point_data();

  // optional .feedwire.ChromeFulfillmentInfo chrome_fulfillment_info = 341477699;
  bool has_chrome_fulfillment_info() const;
  private:
  bool _internal_has_chrome_fulfillment_info() const;
  public:
  void clear_chrome_fulfillment_info();
  const ::feedwire::ChromeFulfillmentInfo& chrome_fulfillment_info() const;
  PROTOBUF_NODISCARD ::feedwire::ChromeFulfillmentInfo* release_chrome_fulfillment_info();
  ::feedwire::ChromeFulfillmentInfo* mutable_chrome_fulfillment_info();
  void set_allocated_chrome_fulfillment_info(::feedwire::ChromeFulfillmentInfo* chrome_fulfillment_info);
  private:
  const ::feedwire::ChromeFulfillmentInfo& _internal_chrome_fulfillment_info() const;
  ::feedwire::ChromeFulfillmentInfo* _internal_mutable_chrome_fulfillment_info();
  public:
  void unsafe_arena_set_allocated_chrome_fulfillment_info(
      ::feedwire::ChromeFulfillmentInfo* chrome_fulfillment_info);
  ::feedwire::ChromeFulfillmentInfo* unsafe_arena_release_chrome_fulfillment_info();

  // optional .feedwire.FeedQuery.RequestReason reason = 1;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::feedwire::FeedQuery_RequestReason reason() const;
  void set_reason(::feedwire::FeedQuery_RequestReason value);
  private:
  ::feedwire::FeedQuery_RequestReason _internal_reason() const;
  void _internal_set_reason(::feedwire::FeedQuery_RequestReason value);
  public:

  // optional .feedwire.FeedQuery.ContentOrder order_by = 8;
  bool has_order_by() const;
  private:
  bool _internal_has_order_by() const;
  public:
  void clear_order_by();
  ::feedwire::FeedQuery_ContentOrder order_by() const;
  void set_order_by(::feedwire::FeedQuery_ContentOrder value);
  private:
  ::feedwire::FeedQuery_ContentOrder _internal_order_by() const;
  void _internal_set_order_by(::feedwire::FeedQuery_ContentOrder value);
  public:

  // .feedwire.Token next_page_token = 3;
  bool has_next_page_token() const;
  private:
  bool _internal_has_next_page_token() const;
  public:
  void clear_next_page_token();
  const ::feedwire::Token& next_page_token() const;
  PROTOBUF_NODISCARD ::feedwire::Token* release_next_page_token();
  ::feedwire::Token* mutable_next_page_token();
  void set_allocated_next_page_token(::feedwire::Token* next_page_token);
  private:
  const ::feedwire::Token& _internal_next_page_token() const;
  ::feedwire::Token* _internal_mutable_next_page_token();
  public:
  void unsafe_arena_set_allocated_next_page_token(
      ::feedwire::Token* next_page_token);
  ::feedwire::Token* unsafe_arena_release_next_page_token();

  // .feedwire.Token web_feed_token = 4;
  bool has_web_feed_token() const;
  private:
  bool _internal_has_web_feed_token() const;
  public:
  void clear_web_feed_token();
  const ::feedwire::Token& web_feed_token() const;
  PROTOBUF_NODISCARD ::feedwire::Token* release_web_feed_token();
  ::feedwire::Token* mutable_web_feed_token();
  void set_allocated_web_feed_token(::feedwire::Token* web_feed_token);
  private:
  const ::feedwire::Token& _internal_web_feed_token() const;
  ::feedwire::Token* _internal_mutable_web_feed_token();
  public:
  void unsafe_arena_set_allocated_web_feed_token(
      ::feedwire::Token* web_feed_token);
  ::feedwire::Token* unsafe_arena_release_web_feed_token();

  void clear_token();
  TokenCase token_case() const;
  // @@protoc_insertion_point(class_scope:feedwire.FeedQuery)
 private:
  class _Internal;
  void set_has_next_page_token();
  void set_has_web_feed_token();

  inline bool has_token() const;
  inline void clear_has_token();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::feedwire::FeedEntryPointData* feed_entry_point_data_;
  ::feedwire::ChromeFulfillmentInfo* chrome_fulfillment_info_;
  int reason_;
  int order_by_;
  union TokenUnion {
    constexpr TokenUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::feedwire::Token* next_page_token_;
    ::feedwire::Token* web_feed_token_;
  } token_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5fquery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FeedQuery_Tokens

// repeated .feedwire.Token tokens = 1;
inline int FeedQuery_Tokens::_internal_tokens_size() const {
  return tokens_.size();
}
inline int FeedQuery_Tokens::tokens_size() const {
  return _internal_tokens_size();
}
inline ::feedwire::Token* FeedQuery_Tokens::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:feedwire.FeedQuery.Tokens.tokens)
  return tokens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::Token >*
FeedQuery_Tokens::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.FeedQuery.Tokens.tokens)
  return &tokens_;
}
inline const ::feedwire::Token& FeedQuery_Tokens::_internal_tokens(int index) const {
  return tokens_.Get(index);
}
inline const ::feedwire::Token& FeedQuery_Tokens::tokens(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.FeedQuery.Tokens.tokens)
  return _internal_tokens(index);
}
inline ::feedwire::Token* FeedQuery_Tokens::_internal_add_tokens() {
  return tokens_.Add();
}
inline ::feedwire::Token* FeedQuery_Tokens::add_tokens() {
  ::feedwire::Token* _add = _internal_add_tokens();
  // @@protoc_insertion_point(field_add:feedwire.FeedQuery.Tokens.tokens)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::Token >&
FeedQuery_Tokens::tokens() const {
  // @@protoc_insertion_point(field_list:feedwire.FeedQuery.Tokens.tokens)
  return tokens_;
}

// -------------------------------------------------------------------

// FeedQuery

// .feedwire.Token next_page_token = 3;
inline bool FeedQuery::_internal_has_next_page_token() const {
  return token_case() == kNextPageToken;
}
inline bool FeedQuery::has_next_page_token() const {
  return _internal_has_next_page_token();
}
inline void FeedQuery::set_has_next_page_token() {
  _oneof_case_[0] = kNextPageToken;
}
inline ::feedwire::Token* FeedQuery::release_next_page_token() {
  // @@protoc_insertion_point(field_release:feedwire.FeedQuery.next_page_token)
  if (_internal_has_next_page_token()) {
    clear_has_token();
    ::feedwire::Token* temp = token_.next_page_token_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    token_.next_page_token_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::feedwire::Token& FeedQuery::_internal_next_page_token() const {
  return _internal_has_next_page_token()
      ? *token_.next_page_token_
      : reinterpret_cast< ::feedwire::Token&>(::feedwire::_Token_default_instance_);
}
inline const ::feedwire::Token& FeedQuery::next_page_token() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedQuery.next_page_token)
  return _internal_next_page_token();
}
inline ::feedwire::Token* FeedQuery::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:feedwire.FeedQuery.next_page_token)
  if (_internal_has_next_page_token()) {
    clear_has_token();
    ::feedwire::Token* temp = token_.next_page_token_;
    token_.next_page_token_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FeedQuery::unsafe_arena_set_allocated_next_page_token(::feedwire::Token* next_page_token) {
  clear_token();
  if (next_page_token) {
    set_has_next_page_token();
    token_.next_page_token_ = next_page_token;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.FeedQuery.next_page_token)
}
inline ::feedwire::Token* FeedQuery::_internal_mutable_next_page_token() {
  if (!_internal_has_next_page_token()) {
    clear_token();
    set_has_next_page_token();
    token_.next_page_token_ = CreateMaybeMessage< ::feedwire::Token >(GetArenaForAllocation());
  }
  return token_.next_page_token_;
}
inline ::feedwire::Token* FeedQuery::mutable_next_page_token() {
  ::feedwire::Token* _msg = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:feedwire.FeedQuery.next_page_token)
  return _msg;
}

// .feedwire.Token web_feed_token = 4;
inline bool FeedQuery::_internal_has_web_feed_token() const {
  return token_case() == kWebFeedToken;
}
inline bool FeedQuery::has_web_feed_token() const {
  return _internal_has_web_feed_token();
}
inline void FeedQuery::set_has_web_feed_token() {
  _oneof_case_[0] = kWebFeedToken;
}
inline ::feedwire::Token* FeedQuery::release_web_feed_token() {
  // @@protoc_insertion_point(field_release:feedwire.FeedQuery.web_feed_token)
  if (_internal_has_web_feed_token()) {
    clear_has_token();
    ::feedwire::Token* temp = token_.web_feed_token_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    token_.web_feed_token_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::feedwire::Token& FeedQuery::_internal_web_feed_token() const {
  return _internal_has_web_feed_token()
      ? *token_.web_feed_token_
      : reinterpret_cast< ::feedwire::Token&>(::feedwire::_Token_default_instance_);
}
inline const ::feedwire::Token& FeedQuery::web_feed_token() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedQuery.web_feed_token)
  return _internal_web_feed_token();
}
inline ::feedwire::Token* FeedQuery::unsafe_arena_release_web_feed_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:feedwire.FeedQuery.web_feed_token)
  if (_internal_has_web_feed_token()) {
    clear_has_token();
    ::feedwire::Token* temp = token_.web_feed_token_;
    token_.web_feed_token_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FeedQuery::unsafe_arena_set_allocated_web_feed_token(::feedwire::Token* web_feed_token) {
  clear_token();
  if (web_feed_token) {
    set_has_web_feed_token();
    token_.web_feed_token_ = web_feed_token;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.FeedQuery.web_feed_token)
}
inline ::feedwire::Token* FeedQuery::_internal_mutable_web_feed_token() {
  if (!_internal_has_web_feed_token()) {
    clear_token();
    set_has_web_feed_token();
    token_.web_feed_token_ = CreateMaybeMessage< ::feedwire::Token >(GetArenaForAllocation());
  }
  return token_.web_feed_token_;
}
inline ::feedwire::Token* FeedQuery::mutable_web_feed_token() {
  ::feedwire::Token* _msg = _internal_mutable_web_feed_token();
  // @@protoc_insertion_point(field_mutable:feedwire.FeedQuery.web_feed_token)
  return _msg;
}

// optional .feedwire.FeedQuery.RequestReason reason = 1;
inline bool FeedQuery::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FeedQuery::has_reason() const {
  return _internal_has_reason();
}
inline void FeedQuery::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::feedwire::FeedQuery_RequestReason FeedQuery::_internal_reason() const {
  return static_cast< ::feedwire::FeedQuery_RequestReason >(reason_);
}
inline ::feedwire::FeedQuery_RequestReason FeedQuery::reason() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedQuery.reason)
  return _internal_reason();
}
inline void FeedQuery::_internal_set_reason(::feedwire::FeedQuery_RequestReason value) {
  assert(::feedwire::FeedQuery_RequestReason_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  reason_ = value;
}
inline void FeedQuery::set_reason(::feedwire::FeedQuery_RequestReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:feedwire.FeedQuery.reason)
}

// optional .feedwire.FeedQuery.ContentOrder order_by = 8;
inline bool FeedQuery::_internal_has_order_by() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FeedQuery::has_order_by() const {
  return _internal_has_order_by();
}
inline void FeedQuery::clear_order_by() {
  order_by_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::feedwire::FeedQuery_ContentOrder FeedQuery::_internal_order_by() const {
  return static_cast< ::feedwire::FeedQuery_ContentOrder >(order_by_);
}
inline ::feedwire::FeedQuery_ContentOrder FeedQuery::order_by() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedQuery.order_by)
  return _internal_order_by();
}
inline void FeedQuery::_internal_set_order_by(::feedwire::FeedQuery_ContentOrder value) {
  assert(::feedwire::FeedQuery_ContentOrder_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  order_by_ = value;
}
inline void FeedQuery::set_order_by(::feedwire::FeedQuery_ContentOrder value) {
  _internal_set_order_by(value);
  // @@protoc_insertion_point(field_set:feedwire.FeedQuery.order_by)
}

// optional .feedwire.FeedEntryPointData feed_entry_point_data = 9;
inline bool FeedQuery::_internal_has_feed_entry_point_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || feed_entry_point_data_ != nullptr);
  return value;
}
inline bool FeedQuery::has_feed_entry_point_data() const {
  return _internal_has_feed_entry_point_data();
}
inline const ::feedwire::FeedEntryPointData& FeedQuery::_internal_feed_entry_point_data() const {
  const ::feedwire::FeedEntryPointData* p = feed_entry_point_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::FeedEntryPointData&>(
      ::feedwire::_FeedEntryPointData_default_instance_);
}
inline const ::feedwire::FeedEntryPointData& FeedQuery::feed_entry_point_data() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedQuery.feed_entry_point_data)
  return _internal_feed_entry_point_data();
}
inline void FeedQuery::unsafe_arena_set_allocated_feed_entry_point_data(
    ::feedwire::FeedEntryPointData* feed_entry_point_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feed_entry_point_data_);
  }
  feed_entry_point_data_ = feed_entry_point_data;
  if (feed_entry_point_data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.FeedQuery.feed_entry_point_data)
}
inline ::feedwire::FeedEntryPointData* FeedQuery::release_feed_entry_point_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::feedwire::FeedEntryPointData* temp = feed_entry_point_data_;
  feed_entry_point_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::FeedEntryPointData* FeedQuery::unsafe_arena_release_feed_entry_point_data() {
  // @@protoc_insertion_point(field_release:feedwire.FeedQuery.feed_entry_point_data)
  _has_bits_[0] &= ~0x00000001u;
  ::feedwire::FeedEntryPointData* temp = feed_entry_point_data_;
  feed_entry_point_data_ = nullptr;
  return temp;
}
inline ::feedwire::FeedEntryPointData* FeedQuery::_internal_mutable_feed_entry_point_data() {
  _has_bits_[0] |= 0x00000001u;
  if (feed_entry_point_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::FeedEntryPointData>(GetArenaForAllocation());
    feed_entry_point_data_ = p;
  }
  return feed_entry_point_data_;
}
inline ::feedwire::FeedEntryPointData* FeedQuery::mutable_feed_entry_point_data() {
  ::feedwire::FeedEntryPointData* _msg = _internal_mutable_feed_entry_point_data();
  // @@protoc_insertion_point(field_mutable:feedwire.FeedQuery.feed_entry_point_data)
  return _msg;
}
inline void FeedQuery::set_allocated_feed_entry_point_data(::feedwire::FeedEntryPointData* feed_entry_point_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(feed_entry_point_data_);
  }
  if (feed_entry_point_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feed_entry_point_data));
    if (message_arena != submessage_arena) {
      feed_entry_point_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feed_entry_point_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  feed_entry_point_data_ = feed_entry_point_data;
  // @@protoc_insertion_point(field_set_allocated:feedwire.FeedQuery.feed_entry_point_data)
}

// optional .feedwire.ChromeFulfillmentInfo chrome_fulfillment_info = 341477699;
inline bool FeedQuery::_internal_has_chrome_fulfillment_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || chrome_fulfillment_info_ != nullptr);
  return value;
}
inline bool FeedQuery::has_chrome_fulfillment_info() const {
  return _internal_has_chrome_fulfillment_info();
}
inline const ::feedwire::ChromeFulfillmentInfo& FeedQuery::_internal_chrome_fulfillment_info() const {
  const ::feedwire::ChromeFulfillmentInfo* p = chrome_fulfillment_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ChromeFulfillmentInfo&>(
      ::feedwire::_ChromeFulfillmentInfo_default_instance_);
}
inline const ::feedwire::ChromeFulfillmentInfo& FeedQuery::chrome_fulfillment_info() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedQuery.chrome_fulfillment_info)
  return _internal_chrome_fulfillment_info();
}
inline void FeedQuery::unsafe_arena_set_allocated_chrome_fulfillment_info(
    ::feedwire::ChromeFulfillmentInfo* chrome_fulfillment_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_fulfillment_info_);
  }
  chrome_fulfillment_info_ = chrome_fulfillment_info;
  if (chrome_fulfillment_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.FeedQuery.chrome_fulfillment_info)
}
inline ::feedwire::ChromeFulfillmentInfo* FeedQuery::release_chrome_fulfillment_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::feedwire::ChromeFulfillmentInfo* temp = chrome_fulfillment_info_;
  chrome_fulfillment_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ChromeFulfillmentInfo* FeedQuery::unsafe_arena_release_chrome_fulfillment_info() {
  // @@protoc_insertion_point(field_release:feedwire.FeedQuery.chrome_fulfillment_info)
  _has_bits_[0] &= ~0x00000002u;
  ::feedwire::ChromeFulfillmentInfo* temp = chrome_fulfillment_info_;
  chrome_fulfillment_info_ = nullptr;
  return temp;
}
inline ::feedwire::ChromeFulfillmentInfo* FeedQuery::_internal_mutable_chrome_fulfillment_info() {
  _has_bits_[0] |= 0x00000002u;
  if (chrome_fulfillment_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ChromeFulfillmentInfo>(GetArenaForAllocation());
    chrome_fulfillment_info_ = p;
  }
  return chrome_fulfillment_info_;
}
inline ::feedwire::ChromeFulfillmentInfo* FeedQuery::mutable_chrome_fulfillment_info() {
  ::feedwire::ChromeFulfillmentInfo* _msg = _internal_mutable_chrome_fulfillment_info();
  // @@protoc_insertion_point(field_mutable:feedwire.FeedQuery.chrome_fulfillment_info)
  return _msg;
}
inline void FeedQuery::set_allocated_chrome_fulfillment_info(::feedwire::ChromeFulfillmentInfo* chrome_fulfillment_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_fulfillment_info_);
  }
  if (chrome_fulfillment_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_fulfillment_info));
    if (message_arena != submessage_arena) {
      chrome_fulfillment_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_fulfillment_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  chrome_fulfillment_info_ = chrome_fulfillment_info;
  // @@protoc_insertion_point(field_set_allocated:feedwire.FeedQuery.chrome_fulfillment_info)
}

inline bool FeedQuery::has_token() const {
  return token_case() != TOKEN_NOT_SET;
}
inline void FeedQuery::clear_has_token() {
  _oneof_case_[0] = TOKEN_NOT_SET;
}
inline FeedQuery::TokenCase FeedQuery::token_case() const {
  return FeedQuery::TokenCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::feedwire::FeedQuery_RequestReason> : ::std::true_type {};
template <> struct is_proto_enum< ::feedwire::FeedQuery_ContentOrder> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5fquery_2eproto
