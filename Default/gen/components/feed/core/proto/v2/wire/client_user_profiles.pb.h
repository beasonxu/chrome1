// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/client_user_profiles.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fclient_5fuser_5fprofiles_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fclient_5fuser_5fprofiles_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fclient_5fuser_5fprofiles_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fclient_5fuser_5fprofiles_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
class ActionCounts;
struct ActionCountsDefaultTypeInternal;
extern ActionCountsDefaultTypeInternal _ActionCounts_default_instance_;
class ActionCounts_Counts;
struct ActionCounts_CountsDefaultTypeInternal;
extern ActionCounts_CountsDefaultTypeInternal _ActionCounts_Counts_default_instance_;
class ClientUserProfiles;
struct ClientUserProfilesDefaultTypeInternal;
extern ClientUserProfilesDefaultTypeInternal _ClientUserProfiles_default_instance_;
class DiscoverUserActionsProfile;
struct DiscoverUserActionsProfileDefaultTypeInternal;
extern DiscoverUserActionsProfileDefaultTypeInternal _DiscoverUserActionsProfile_default_instance_;
class DiscoverUserActionsProfile_CardCategoryXEntityActionCounts;
struct DiscoverUserActionsProfile_CardCategoryXEntityActionCountsDefaultTypeInternal;
extern DiscoverUserActionsProfile_CardCategoryXEntityActionCountsDefaultTypeInternal _DiscoverUserActionsProfile_CardCategoryXEntityActionCounts_default_instance_;
class DiscoverUserActionsProfile_ContentMediaXEntityActionCounts;
struct DiscoverUserActionsProfile_ContentMediaXEntityActionCountsDefaultTypeInternal;
extern DiscoverUserActionsProfile_ContentMediaXEntityActionCountsDefaultTypeInternal _DiscoverUserActionsProfile_ContentMediaXEntityActionCounts_default_instance_;
class ViewDemotionProfile;
struct ViewDemotionProfileDefaultTypeInternal;
extern ViewDemotionProfileDefaultTypeInternal _ViewDemotionProfile_default_instance_;
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::ActionCounts* Arena::CreateMaybeMessage<::feedwire::ActionCounts>(Arena*);
template<> ::feedwire::ActionCounts_Counts* Arena::CreateMaybeMessage<::feedwire::ActionCounts_Counts>(Arena*);
template<> ::feedwire::ClientUserProfiles* Arena::CreateMaybeMessage<::feedwire::ClientUserProfiles>(Arena*);
template<> ::feedwire::DiscoverUserActionsProfile* Arena::CreateMaybeMessage<::feedwire::DiscoverUserActionsProfile>(Arena*);
template<> ::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts* Arena::CreateMaybeMessage<::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts>(Arena*);
template<> ::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts* Arena::CreateMaybeMessage<::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts>(Arena*);
template<> ::feedwire::ViewDemotionProfile* Arena::CreateMaybeMessage<::feedwire::ViewDemotionProfile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

enum ActionCounts_ActionType : int {
  ActionCounts_ActionType_UNKNOWN = 0,
  ActionCounts_ActionType_CLICK = 1
};
bool ActionCounts_ActionType_IsValid(int value);
constexpr ActionCounts_ActionType ActionCounts_ActionType_ActionType_MIN = ActionCounts_ActionType_UNKNOWN;
constexpr ActionCounts_ActionType ActionCounts_ActionType_ActionType_MAX = ActionCounts_ActionType_CLICK;
constexpr int ActionCounts_ActionType_ActionType_ARRAYSIZE = ActionCounts_ActionType_ActionType_MAX + 1;

const std::string& ActionCounts_ActionType_Name(ActionCounts_ActionType value);
template<typename T>
inline const std::string& ActionCounts_ActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActionCounts_ActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActionCounts_ActionType_Name.");
  return ActionCounts_ActionType_Name(static_cast<ActionCounts_ActionType>(enum_t_value));
}
bool ActionCounts_ActionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActionCounts_ActionType* value);
// ===================================================================

class ClientUserProfiles final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.ClientUserProfiles) */ {
 public:
  inline ClientUserProfiles() : ClientUserProfiles(nullptr) {}
  ~ClientUserProfiles() override;
  explicit PROTOBUF_CONSTEXPR ClientUserProfiles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientUserProfiles(const ClientUserProfiles& from);
  ClientUserProfiles(ClientUserProfiles&& from) noexcept
    : ClientUserProfiles() {
    *this = ::std::move(from);
  }

  inline ClientUserProfiles& operator=(const ClientUserProfiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientUserProfiles& operator=(ClientUserProfiles&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientUserProfiles& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientUserProfiles* internal_default_instance() {
    return reinterpret_cast<const ClientUserProfiles*>(
               &_ClientUserProfiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientUserProfiles& a, ClientUserProfiles& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientUserProfiles* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientUserProfiles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientUserProfiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientUserProfiles>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientUserProfiles& from);
  void MergeFrom(const ClientUserProfiles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientUserProfiles* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.ClientUserProfiles";
  }
  protected:
  explicit ClientUserProfiles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiscoverUserActionsProfileFieldNumber = 1,
    kViewDemotionProfileFieldNumber = 2,
  };
  // optional .feedwire.DiscoverUserActionsProfile discover_user_actions_profile = 1;
  bool has_discover_user_actions_profile() const;
  private:
  bool _internal_has_discover_user_actions_profile() const;
  public:
  void clear_discover_user_actions_profile();
  const ::feedwire::DiscoverUserActionsProfile& discover_user_actions_profile() const;
  PROTOBUF_NODISCARD ::feedwire::DiscoverUserActionsProfile* release_discover_user_actions_profile();
  ::feedwire::DiscoverUserActionsProfile* mutable_discover_user_actions_profile();
  void set_allocated_discover_user_actions_profile(::feedwire::DiscoverUserActionsProfile* discover_user_actions_profile);
  private:
  const ::feedwire::DiscoverUserActionsProfile& _internal_discover_user_actions_profile() const;
  ::feedwire::DiscoverUserActionsProfile* _internal_mutable_discover_user_actions_profile();
  public:
  void unsafe_arena_set_allocated_discover_user_actions_profile(
      ::feedwire::DiscoverUserActionsProfile* discover_user_actions_profile);
  ::feedwire::DiscoverUserActionsProfile* unsafe_arena_release_discover_user_actions_profile();

  // optional .feedwire.ViewDemotionProfile view_demotion_profile = 2;
  bool has_view_demotion_profile() const;
  private:
  bool _internal_has_view_demotion_profile() const;
  public:
  void clear_view_demotion_profile();
  const ::feedwire::ViewDemotionProfile& view_demotion_profile() const;
  PROTOBUF_NODISCARD ::feedwire::ViewDemotionProfile* release_view_demotion_profile();
  ::feedwire::ViewDemotionProfile* mutable_view_demotion_profile();
  void set_allocated_view_demotion_profile(::feedwire::ViewDemotionProfile* view_demotion_profile);
  private:
  const ::feedwire::ViewDemotionProfile& _internal_view_demotion_profile() const;
  ::feedwire::ViewDemotionProfile* _internal_mutable_view_demotion_profile();
  public:
  void unsafe_arena_set_allocated_view_demotion_profile(
      ::feedwire::ViewDemotionProfile* view_demotion_profile);
  ::feedwire::ViewDemotionProfile* unsafe_arena_release_view_demotion_profile();

  // @@protoc_insertion_point(class_scope:feedwire.ClientUserProfiles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::feedwire::DiscoverUserActionsProfile* discover_user_actions_profile_;
  ::feedwire::ViewDemotionProfile* view_demotion_profile_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fclient_5fuser_5fprofiles_2eproto;
};
// -------------------------------------------------------------------

class ActionCounts_Counts final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.ActionCounts.Counts) */ {
 public:
  inline ActionCounts_Counts() : ActionCounts_Counts(nullptr) {}
  ~ActionCounts_Counts() override;
  explicit PROTOBUF_CONSTEXPR ActionCounts_Counts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActionCounts_Counts(const ActionCounts_Counts& from);
  ActionCounts_Counts(ActionCounts_Counts&& from) noexcept
    : ActionCounts_Counts() {
    *this = ::std::move(from);
  }

  inline ActionCounts_Counts& operator=(const ActionCounts_Counts& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionCounts_Counts& operator=(ActionCounts_Counts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ActionCounts_Counts& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActionCounts_Counts* internal_default_instance() {
    return reinterpret_cast<const ActionCounts_Counts*>(
               &_ActionCounts_Counts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ActionCounts_Counts& a, ActionCounts_Counts& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ActionCounts_Counts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionCounts_Counts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActionCounts_Counts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActionCounts_Counts>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ActionCounts_Counts& from);
  void MergeFrom(const ActionCounts_Counts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionCounts_Counts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.ActionCounts.Counts";
  }
  protected:
  explicit ActionCounts_Counts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCount1DFieldNumber = 1,
    kCount7DFieldNumber = 2,
    kCount30DFieldNumber = 3,
  };
  // optional uint32 count_1d = 1;
  bool has_count_1d() const;
  private:
  bool _internal_has_count_1d() const;
  public:
  void clear_count_1d();
  uint32_t count_1d() const;
  void set_count_1d(uint32_t value);
  private:
  uint32_t _internal_count_1d() const;
  void _internal_set_count_1d(uint32_t value);
  public:

  // optional uint32 count_7d = 2;
  bool has_count_7d() const;
  private:
  bool _internal_has_count_7d() const;
  public:
  void clear_count_7d();
  uint32_t count_7d() const;
  void set_count_7d(uint32_t value);
  private:
  uint32_t _internal_count_7d() const;
  void _internal_set_count_7d(uint32_t value);
  public:

  // optional uint32 count_30d = 3;
  bool has_count_30d() const;
  private:
  bool _internal_has_count_30d() const;
  public:
  void clear_count_30d();
  uint32_t count_30d() const;
  void set_count_30d(uint32_t value);
  private:
  uint32_t _internal_count_30d() const;
  void _internal_set_count_30d(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:feedwire.ActionCounts.Counts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t count_1d_;
  uint32_t count_7d_;
  uint32_t count_30d_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fclient_5fuser_5fprofiles_2eproto;
};
// -------------------------------------------------------------------

class ActionCounts final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.ActionCounts) */ {
 public:
  inline ActionCounts() : ActionCounts(nullptr) {}
  ~ActionCounts() override;
  explicit PROTOBUF_CONSTEXPR ActionCounts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActionCounts(const ActionCounts& from);
  ActionCounts(ActionCounts&& from) noexcept
    : ActionCounts() {
    *this = ::std::move(from);
  }

  inline ActionCounts& operator=(const ActionCounts& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionCounts& operator=(ActionCounts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ActionCounts& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActionCounts* internal_default_instance() {
    return reinterpret_cast<const ActionCounts*>(
               &_ActionCounts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ActionCounts& a, ActionCounts& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ActionCounts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionCounts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActionCounts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActionCounts>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ActionCounts& from);
  void MergeFrom(const ActionCounts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionCounts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.ActionCounts";
  }
  protected:
  explicit ActionCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ActionCounts_Counts Counts;

  typedef ActionCounts_ActionType ActionType;
  static constexpr ActionType UNKNOWN =
    ActionCounts_ActionType_UNKNOWN;
  static constexpr ActionType CLICK =
    ActionCounts_ActionType_CLICK;
  static inline bool ActionType_IsValid(int value) {
    return ActionCounts_ActionType_IsValid(value);
  }
  static constexpr ActionType ActionType_MIN =
    ActionCounts_ActionType_ActionType_MIN;
  static constexpr ActionType ActionType_MAX =
    ActionCounts_ActionType_ActionType_MAX;
  static constexpr int ActionType_ARRAYSIZE =
    ActionCounts_ActionType_ActionType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ActionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ActionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ActionType_Name.");
    return ActionCounts_ActionType_Name(enum_t_value);
  }
  static inline bool ActionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ActionType* value) {
    return ActionCounts_ActionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCountsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional .feedwire.ActionCounts.Counts counts = 2;
  bool has_counts() const;
  private:
  bool _internal_has_counts() const;
  public:
  void clear_counts();
  const ::feedwire::ActionCounts_Counts& counts() const;
  PROTOBUF_NODISCARD ::feedwire::ActionCounts_Counts* release_counts();
  ::feedwire::ActionCounts_Counts* mutable_counts();
  void set_allocated_counts(::feedwire::ActionCounts_Counts* counts);
  private:
  const ::feedwire::ActionCounts_Counts& _internal_counts() const;
  ::feedwire::ActionCounts_Counts* _internal_mutable_counts();
  public:
  void unsafe_arena_set_allocated_counts(
      ::feedwire::ActionCounts_Counts* counts);
  ::feedwire::ActionCounts_Counts* unsafe_arena_release_counts();

  // optional .feedwire.ActionCounts.ActionType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::feedwire::ActionCounts_ActionType type() const;
  void set_type(::feedwire::ActionCounts_ActionType value);
  private:
  ::feedwire::ActionCounts_ActionType _internal_type() const;
  void _internal_set_type(::feedwire::ActionCounts_ActionType value);
  public:

  // @@protoc_insertion_point(class_scope:feedwire.ActionCounts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::feedwire::ActionCounts_Counts* counts_;
  int type_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fclient_5fuser_5fprofiles_2eproto;
};
// -------------------------------------------------------------------

class DiscoverUserActionsProfile_ContentMediaXEntityActionCounts final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts) */ {
 public:
  inline DiscoverUserActionsProfile_ContentMediaXEntityActionCounts() : DiscoverUserActionsProfile_ContentMediaXEntityActionCounts(nullptr) {}
  ~DiscoverUserActionsProfile_ContentMediaXEntityActionCounts() override;
  explicit PROTOBUF_CONSTEXPR DiscoverUserActionsProfile_ContentMediaXEntityActionCounts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoverUserActionsProfile_ContentMediaXEntityActionCounts(const DiscoverUserActionsProfile_ContentMediaXEntityActionCounts& from);
  DiscoverUserActionsProfile_ContentMediaXEntityActionCounts(DiscoverUserActionsProfile_ContentMediaXEntityActionCounts&& from) noexcept
    : DiscoverUserActionsProfile_ContentMediaXEntityActionCounts() {
    *this = ::std::move(from);
  }

  inline DiscoverUserActionsProfile_ContentMediaXEntityActionCounts& operator=(const DiscoverUserActionsProfile_ContentMediaXEntityActionCounts& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoverUserActionsProfile_ContentMediaXEntityActionCounts& operator=(DiscoverUserActionsProfile_ContentMediaXEntityActionCounts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DiscoverUserActionsProfile_ContentMediaXEntityActionCounts& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoverUserActionsProfile_ContentMediaXEntityActionCounts* internal_default_instance() {
    return reinterpret_cast<const DiscoverUserActionsProfile_ContentMediaXEntityActionCounts*>(
               &_DiscoverUserActionsProfile_ContentMediaXEntityActionCounts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DiscoverUserActionsProfile_ContentMediaXEntityActionCounts& a, DiscoverUserActionsProfile_ContentMediaXEntityActionCounts& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DiscoverUserActionsProfile_ContentMediaXEntityActionCounts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoverUserActionsProfile_ContentMediaXEntityActionCounts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoverUserActionsProfile_ContentMediaXEntityActionCounts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoverUserActionsProfile_ContentMediaXEntityActionCounts>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DiscoverUserActionsProfile_ContentMediaXEntityActionCounts& from);
  void MergeFrom(const DiscoverUserActionsProfile_ContentMediaXEntityActionCounts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DiscoverUserActionsProfile_ContentMediaXEntityActionCounts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts";
  }
  protected:
  explicit DiscoverUserActionsProfile_ContentMediaXEntityActionCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountsFieldNumber = 3,
    kContentCategoryMediaTypeFieldNumber = 1,
    kMidFieldNumber = 2,
  };
  // repeated .feedwire.ActionCounts counts = 3;
  int counts_size() const;
  private:
  int _internal_counts_size() const;
  public:
  void clear_counts();
  ::feedwire::ActionCounts* mutable_counts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::ActionCounts >*
      mutable_counts();
  private:
  const ::feedwire::ActionCounts& _internal_counts(int index) const;
  ::feedwire::ActionCounts* _internal_add_counts();
  public:
  const ::feedwire::ActionCounts& counts(int index) const;
  ::feedwire::ActionCounts* add_counts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::ActionCounts >&
      counts() const;

  // optional uint64 content_category_media_type = 1;
  bool has_content_category_media_type() const;
  private:
  bool _internal_has_content_category_media_type() const;
  public:
  void clear_content_category_media_type();
  uint64_t content_category_media_type() const;
  void set_content_category_media_type(uint64_t value);
  private:
  uint64_t _internal_content_category_media_type() const;
  void _internal_set_content_category_media_type(uint64_t value);
  public:

  // optional uint64 mid = 2;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  uint64_t mid() const;
  void set_mid(uint64_t value);
  private:
  uint64_t _internal_mid() const;
  void _internal_set_mid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::ActionCounts > counts_;
  uint64_t content_category_media_type_;
  uint64_t mid_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fclient_5fuser_5fprofiles_2eproto;
};
// -------------------------------------------------------------------

class DiscoverUserActionsProfile_CardCategoryXEntityActionCounts final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts) */ {
 public:
  inline DiscoverUserActionsProfile_CardCategoryXEntityActionCounts() : DiscoverUserActionsProfile_CardCategoryXEntityActionCounts(nullptr) {}
  ~DiscoverUserActionsProfile_CardCategoryXEntityActionCounts() override;
  explicit PROTOBUF_CONSTEXPR DiscoverUserActionsProfile_CardCategoryXEntityActionCounts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoverUserActionsProfile_CardCategoryXEntityActionCounts(const DiscoverUserActionsProfile_CardCategoryXEntityActionCounts& from);
  DiscoverUserActionsProfile_CardCategoryXEntityActionCounts(DiscoverUserActionsProfile_CardCategoryXEntityActionCounts&& from) noexcept
    : DiscoverUserActionsProfile_CardCategoryXEntityActionCounts() {
    *this = ::std::move(from);
  }

  inline DiscoverUserActionsProfile_CardCategoryXEntityActionCounts& operator=(const DiscoverUserActionsProfile_CardCategoryXEntityActionCounts& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoverUserActionsProfile_CardCategoryXEntityActionCounts& operator=(DiscoverUserActionsProfile_CardCategoryXEntityActionCounts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DiscoverUserActionsProfile_CardCategoryXEntityActionCounts& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoverUserActionsProfile_CardCategoryXEntityActionCounts* internal_default_instance() {
    return reinterpret_cast<const DiscoverUserActionsProfile_CardCategoryXEntityActionCounts*>(
               &_DiscoverUserActionsProfile_CardCategoryXEntityActionCounts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DiscoverUserActionsProfile_CardCategoryXEntityActionCounts& a, DiscoverUserActionsProfile_CardCategoryXEntityActionCounts& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DiscoverUserActionsProfile_CardCategoryXEntityActionCounts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoverUserActionsProfile_CardCategoryXEntityActionCounts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoverUserActionsProfile_CardCategoryXEntityActionCounts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoverUserActionsProfile_CardCategoryXEntityActionCounts>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DiscoverUserActionsProfile_CardCategoryXEntityActionCounts& from);
  void MergeFrom(const DiscoverUserActionsProfile_CardCategoryXEntityActionCounts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DiscoverUserActionsProfile_CardCategoryXEntityActionCounts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts";
  }
  protected:
  explicit DiscoverUserActionsProfile_CardCategoryXEntityActionCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountsFieldNumber = 3,
    kCardCategoryFieldNumber = 1,
    kMidFieldNumber = 2,
  };
  // repeated .feedwire.ActionCounts counts = 3;
  int counts_size() const;
  private:
  int _internal_counts_size() const;
  public:
  void clear_counts();
  ::feedwire::ActionCounts* mutable_counts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::ActionCounts >*
      mutable_counts();
  private:
  const ::feedwire::ActionCounts& _internal_counts(int index) const;
  ::feedwire::ActionCounts* _internal_add_counts();
  public:
  const ::feedwire::ActionCounts& counts(int index) const;
  ::feedwire::ActionCounts* add_counts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::ActionCounts >&
      counts() const;

  // optional uint64 card_category = 1;
  bool has_card_category() const;
  private:
  bool _internal_has_card_category() const;
  public:
  void clear_card_category();
  uint64_t card_category() const;
  void set_card_category(uint64_t value);
  private:
  uint64_t _internal_card_category() const;
  void _internal_set_card_category(uint64_t value);
  public:

  // optional uint64 mid = 2;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  uint64_t mid() const;
  void set_mid(uint64_t value);
  private:
  uint64_t _internal_mid() const;
  void _internal_set_mid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::ActionCounts > counts_;
  uint64_t card_category_;
  uint64_t mid_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fclient_5fuser_5fprofiles_2eproto;
};
// -------------------------------------------------------------------

class DiscoverUserActionsProfile final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.DiscoverUserActionsProfile) */ {
 public:
  inline DiscoverUserActionsProfile() : DiscoverUserActionsProfile(nullptr) {}
  ~DiscoverUserActionsProfile() override;
  explicit PROTOBUF_CONSTEXPR DiscoverUserActionsProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoverUserActionsProfile(const DiscoverUserActionsProfile& from);
  DiscoverUserActionsProfile(DiscoverUserActionsProfile&& from) noexcept
    : DiscoverUserActionsProfile() {
    *this = ::std::move(from);
  }

  inline DiscoverUserActionsProfile& operator=(const DiscoverUserActionsProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoverUserActionsProfile& operator=(DiscoverUserActionsProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DiscoverUserActionsProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoverUserActionsProfile* internal_default_instance() {
    return reinterpret_cast<const DiscoverUserActionsProfile*>(
               &_DiscoverUserActionsProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DiscoverUserActionsProfile& a, DiscoverUserActionsProfile& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DiscoverUserActionsProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoverUserActionsProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoverUserActionsProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoverUserActionsProfile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DiscoverUserActionsProfile& from);
  void MergeFrom(const DiscoverUserActionsProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DiscoverUserActionsProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.DiscoverUserActionsProfile";
  }
  protected:
  explicit DiscoverUserActionsProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DiscoverUserActionsProfile_ContentMediaXEntityActionCounts ContentMediaXEntityActionCounts;
  typedef DiscoverUserActionsProfile_CardCategoryXEntityActionCounts CardCategoryXEntityActionCounts;

  // accessors -------------------------------------------------------

  enum : int {
    kContentMediaXEntityFieldNumber = 2,
    kCardCategoryXEntityFieldNumber = 3,
  };
  // repeated .feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts content_media_x_entity = 2;
  int content_media_x_entity_size() const;
  private:
  int _internal_content_media_x_entity_size() const;
  public:
  void clear_content_media_x_entity();
  ::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts* mutable_content_media_x_entity(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts >*
      mutable_content_media_x_entity();
  private:
  const ::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts& _internal_content_media_x_entity(int index) const;
  ::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts* _internal_add_content_media_x_entity();
  public:
  const ::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts& content_media_x_entity(int index) const;
  ::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts* add_content_media_x_entity();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts >&
      content_media_x_entity() const;

  // repeated .feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts card_category_x_entity = 3;
  int card_category_x_entity_size() const;
  private:
  int _internal_card_category_x_entity_size() const;
  public:
  void clear_card_category_x_entity();
  ::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts* mutable_card_category_x_entity(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts >*
      mutable_card_category_x_entity();
  private:
  const ::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts& _internal_card_category_x_entity(int index) const;
  ::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts* _internal_add_card_category_x_entity();
  public:
  const ::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts& card_category_x_entity(int index) const;
  ::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts* add_card_category_x_entity();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts >&
      card_category_x_entity() const;

  // @@protoc_insertion_point(class_scope:feedwire.DiscoverUserActionsProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts > content_media_x_entity_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts > card_category_x_entity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fclient_5fuser_5fprofiles_2eproto;
};
// -------------------------------------------------------------------

class ViewDemotionProfile final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.ViewDemotionProfile) */ {
 public:
  inline ViewDemotionProfile() : ViewDemotionProfile(nullptr) {}
  ~ViewDemotionProfile() override;
  explicit PROTOBUF_CONSTEXPR ViewDemotionProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewDemotionProfile(const ViewDemotionProfile& from);
  ViewDemotionProfile(ViewDemotionProfile&& from) noexcept
    : ViewDemotionProfile() {
    *this = ::std::move(from);
  }

  inline ViewDemotionProfile& operator=(const ViewDemotionProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewDemotionProfile& operator=(ViewDemotionProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ViewDemotionProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewDemotionProfile* internal_default_instance() {
    return reinterpret_cast<const ViewDemotionProfile*>(
               &_ViewDemotionProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ViewDemotionProfile& a, ViewDemotionProfile& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ViewDemotionProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewDemotionProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewDemotionProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewDemotionProfile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ViewDemotionProfile& from);
  void MergeFrom(const ViewDemotionProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ViewDemotionProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.ViewDemotionProfile";
  }
  protected:
  explicit ViewDemotionProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:feedwire.ViewDemotionProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fclient_5fuser_5fprofiles_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientUserProfiles

// optional .feedwire.DiscoverUserActionsProfile discover_user_actions_profile = 1;
inline bool ClientUserProfiles::_internal_has_discover_user_actions_profile() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || discover_user_actions_profile_ != nullptr);
  return value;
}
inline bool ClientUserProfiles::has_discover_user_actions_profile() const {
  return _internal_has_discover_user_actions_profile();
}
inline void ClientUserProfiles::clear_discover_user_actions_profile() {
  if (discover_user_actions_profile_ != nullptr) discover_user_actions_profile_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::feedwire::DiscoverUserActionsProfile& ClientUserProfiles::_internal_discover_user_actions_profile() const {
  const ::feedwire::DiscoverUserActionsProfile* p = discover_user_actions_profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::DiscoverUserActionsProfile&>(
      ::feedwire::_DiscoverUserActionsProfile_default_instance_);
}
inline const ::feedwire::DiscoverUserActionsProfile& ClientUserProfiles::discover_user_actions_profile() const {
  // @@protoc_insertion_point(field_get:feedwire.ClientUserProfiles.discover_user_actions_profile)
  return _internal_discover_user_actions_profile();
}
inline void ClientUserProfiles::unsafe_arena_set_allocated_discover_user_actions_profile(
    ::feedwire::DiscoverUserActionsProfile* discover_user_actions_profile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(discover_user_actions_profile_);
  }
  discover_user_actions_profile_ = discover_user_actions_profile;
  if (discover_user_actions_profile) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.ClientUserProfiles.discover_user_actions_profile)
}
inline ::feedwire::DiscoverUserActionsProfile* ClientUserProfiles::release_discover_user_actions_profile() {
  _has_bits_[0] &= ~0x00000001u;
  ::feedwire::DiscoverUserActionsProfile* temp = discover_user_actions_profile_;
  discover_user_actions_profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::DiscoverUserActionsProfile* ClientUserProfiles::unsafe_arena_release_discover_user_actions_profile() {
  // @@protoc_insertion_point(field_release:feedwire.ClientUserProfiles.discover_user_actions_profile)
  _has_bits_[0] &= ~0x00000001u;
  ::feedwire::DiscoverUserActionsProfile* temp = discover_user_actions_profile_;
  discover_user_actions_profile_ = nullptr;
  return temp;
}
inline ::feedwire::DiscoverUserActionsProfile* ClientUserProfiles::_internal_mutable_discover_user_actions_profile() {
  _has_bits_[0] |= 0x00000001u;
  if (discover_user_actions_profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::DiscoverUserActionsProfile>(GetArenaForAllocation());
    discover_user_actions_profile_ = p;
  }
  return discover_user_actions_profile_;
}
inline ::feedwire::DiscoverUserActionsProfile* ClientUserProfiles::mutable_discover_user_actions_profile() {
  ::feedwire::DiscoverUserActionsProfile* _msg = _internal_mutable_discover_user_actions_profile();
  // @@protoc_insertion_point(field_mutable:feedwire.ClientUserProfiles.discover_user_actions_profile)
  return _msg;
}
inline void ClientUserProfiles::set_allocated_discover_user_actions_profile(::feedwire::DiscoverUserActionsProfile* discover_user_actions_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete discover_user_actions_profile_;
  }
  if (discover_user_actions_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(discover_user_actions_profile);
    if (message_arena != submessage_arena) {
      discover_user_actions_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discover_user_actions_profile, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  discover_user_actions_profile_ = discover_user_actions_profile;
  // @@protoc_insertion_point(field_set_allocated:feedwire.ClientUserProfiles.discover_user_actions_profile)
}

// optional .feedwire.ViewDemotionProfile view_demotion_profile = 2;
inline bool ClientUserProfiles::_internal_has_view_demotion_profile() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || view_demotion_profile_ != nullptr);
  return value;
}
inline bool ClientUserProfiles::has_view_demotion_profile() const {
  return _internal_has_view_demotion_profile();
}
inline void ClientUserProfiles::clear_view_demotion_profile() {
  if (view_demotion_profile_ != nullptr) view_demotion_profile_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::feedwire::ViewDemotionProfile& ClientUserProfiles::_internal_view_demotion_profile() const {
  const ::feedwire::ViewDemotionProfile* p = view_demotion_profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ViewDemotionProfile&>(
      ::feedwire::_ViewDemotionProfile_default_instance_);
}
inline const ::feedwire::ViewDemotionProfile& ClientUserProfiles::view_demotion_profile() const {
  // @@protoc_insertion_point(field_get:feedwire.ClientUserProfiles.view_demotion_profile)
  return _internal_view_demotion_profile();
}
inline void ClientUserProfiles::unsafe_arena_set_allocated_view_demotion_profile(
    ::feedwire::ViewDemotionProfile* view_demotion_profile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_demotion_profile_);
  }
  view_demotion_profile_ = view_demotion_profile;
  if (view_demotion_profile) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.ClientUserProfiles.view_demotion_profile)
}
inline ::feedwire::ViewDemotionProfile* ClientUserProfiles::release_view_demotion_profile() {
  _has_bits_[0] &= ~0x00000002u;
  ::feedwire::ViewDemotionProfile* temp = view_demotion_profile_;
  view_demotion_profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ViewDemotionProfile* ClientUserProfiles::unsafe_arena_release_view_demotion_profile() {
  // @@protoc_insertion_point(field_release:feedwire.ClientUserProfiles.view_demotion_profile)
  _has_bits_[0] &= ~0x00000002u;
  ::feedwire::ViewDemotionProfile* temp = view_demotion_profile_;
  view_demotion_profile_ = nullptr;
  return temp;
}
inline ::feedwire::ViewDemotionProfile* ClientUserProfiles::_internal_mutable_view_demotion_profile() {
  _has_bits_[0] |= 0x00000002u;
  if (view_demotion_profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ViewDemotionProfile>(GetArenaForAllocation());
    view_demotion_profile_ = p;
  }
  return view_demotion_profile_;
}
inline ::feedwire::ViewDemotionProfile* ClientUserProfiles::mutable_view_demotion_profile() {
  ::feedwire::ViewDemotionProfile* _msg = _internal_mutable_view_demotion_profile();
  // @@protoc_insertion_point(field_mutable:feedwire.ClientUserProfiles.view_demotion_profile)
  return _msg;
}
inline void ClientUserProfiles::set_allocated_view_demotion_profile(::feedwire::ViewDemotionProfile* view_demotion_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete view_demotion_profile_;
  }
  if (view_demotion_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(view_demotion_profile);
    if (message_arena != submessage_arena) {
      view_demotion_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view_demotion_profile, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  view_demotion_profile_ = view_demotion_profile;
  // @@protoc_insertion_point(field_set_allocated:feedwire.ClientUserProfiles.view_demotion_profile)
}

// -------------------------------------------------------------------

// ActionCounts_Counts

// optional uint32 count_1d = 1;
inline bool ActionCounts_Counts::_internal_has_count_1d() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ActionCounts_Counts::has_count_1d() const {
  return _internal_has_count_1d();
}
inline void ActionCounts_Counts::clear_count_1d() {
  count_1d_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ActionCounts_Counts::_internal_count_1d() const {
  return count_1d_;
}
inline uint32_t ActionCounts_Counts::count_1d() const {
  // @@protoc_insertion_point(field_get:feedwire.ActionCounts.Counts.count_1d)
  return _internal_count_1d();
}
inline void ActionCounts_Counts::_internal_set_count_1d(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  count_1d_ = value;
}
inline void ActionCounts_Counts::set_count_1d(uint32_t value) {
  _internal_set_count_1d(value);
  // @@protoc_insertion_point(field_set:feedwire.ActionCounts.Counts.count_1d)
}

// optional uint32 count_7d = 2;
inline bool ActionCounts_Counts::_internal_has_count_7d() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ActionCounts_Counts::has_count_7d() const {
  return _internal_has_count_7d();
}
inline void ActionCounts_Counts::clear_count_7d() {
  count_7d_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ActionCounts_Counts::_internal_count_7d() const {
  return count_7d_;
}
inline uint32_t ActionCounts_Counts::count_7d() const {
  // @@protoc_insertion_point(field_get:feedwire.ActionCounts.Counts.count_7d)
  return _internal_count_7d();
}
inline void ActionCounts_Counts::_internal_set_count_7d(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  count_7d_ = value;
}
inline void ActionCounts_Counts::set_count_7d(uint32_t value) {
  _internal_set_count_7d(value);
  // @@protoc_insertion_point(field_set:feedwire.ActionCounts.Counts.count_7d)
}

// optional uint32 count_30d = 3;
inline bool ActionCounts_Counts::_internal_has_count_30d() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ActionCounts_Counts::has_count_30d() const {
  return _internal_has_count_30d();
}
inline void ActionCounts_Counts::clear_count_30d() {
  count_30d_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ActionCounts_Counts::_internal_count_30d() const {
  return count_30d_;
}
inline uint32_t ActionCounts_Counts::count_30d() const {
  // @@protoc_insertion_point(field_get:feedwire.ActionCounts.Counts.count_30d)
  return _internal_count_30d();
}
inline void ActionCounts_Counts::_internal_set_count_30d(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  count_30d_ = value;
}
inline void ActionCounts_Counts::set_count_30d(uint32_t value) {
  _internal_set_count_30d(value);
  // @@protoc_insertion_point(field_set:feedwire.ActionCounts.Counts.count_30d)
}

// -------------------------------------------------------------------

// ActionCounts

// optional .feedwire.ActionCounts.ActionType type = 1;
inline bool ActionCounts::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ActionCounts::has_type() const {
  return _internal_has_type();
}
inline void ActionCounts::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::feedwire::ActionCounts_ActionType ActionCounts::_internal_type() const {
  return static_cast< ::feedwire::ActionCounts_ActionType >(type_);
}
inline ::feedwire::ActionCounts_ActionType ActionCounts::type() const {
  // @@protoc_insertion_point(field_get:feedwire.ActionCounts.type)
  return _internal_type();
}
inline void ActionCounts::_internal_set_type(::feedwire::ActionCounts_ActionType value) {
  assert(::feedwire::ActionCounts_ActionType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void ActionCounts::set_type(::feedwire::ActionCounts_ActionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:feedwire.ActionCounts.type)
}

// optional .feedwire.ActionCounts.Counts counts = 2;
inline bool ActionCounts::_internal_has_counts() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || counts_ != nullptr);
  return value;
}
inline bool ActionCounts::has_counts() const {
  return _internal_has_counts();
}
inline void ActionCounts::clear_counts() {
  if (counts_ != nullptr) counts_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::feedwire::ActionCounts_Counts& ActionCounts::_internal_counts() const {
  const ::feedwire::ActionCounts_Counts* p = counts_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ActionCounts_Counts&>(
      ::feedwire::_ActionCounts_Counts_default_instance_);
}
inline const ::feedwire::ActionCounts_Counts& ActionCounts::counts() const {
  // @@protoc_insertion_point(field_get:feedwire.ActionCounts.counts)
  return _internal_counts();
}
inline void ActionCounts::unsafe_arena_set_allocated_counts(
    ::feedwire::ActionCounts_Counts* counts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(counts_);
  }
  counts_ = counts;
  if (counts) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.ActionCounts.counts)
}
inline ::feedwire::ActionCounts_Counts* ActionCounts::release_counts() {
  _has_bits_[0] &= ~0x00000001u;
  ::feedwire::ActionCounts_Counts* temp = counts_;
  counts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ActionCounts_Counts* ActionCounts::unsafe_arena_release_counts() {
  // @@protoc_insertion_point(field_release:feedwire.ActionCounts.counts)
  _has_bits_[0] &= ~0x00000001u;
  ::feedwire::ActionCounts_Counts* temp = counts_;
  counts_ = nullptr;
  return temp;
}
inline ::feedwire::ActionCounts_Counts* ActionCounts::_internal_mutable_counts() {
  _has_bits_[0] |= 0x00000001u;
  if (counts_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ActionCounts_Counts>(GetArenaForAllocation());
    counts_ = p;
  }
  return counts_;
}
inline ::feedwire::ActionCounts_Counts* ActionCounts::mutable_counts() {
  ::feedwire::ActionCounts_Counts* _msg = _internal_mutable_counts();
  // @@protoc_insertion_point(field_mutable:feedwire.ActionCounts.counts)
  return _msg;
}
inline void ActionCounts::set_allocated_counts(::feedwire::ActionCounts_Counts* counts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete counts_;
  }
  if (counts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(counts);
    if (message_arena != submessage_arena) {
      counts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counts, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  counts_ = counts;
  // @@protoc_insertion_point(field_set_allocated:feedwire.ActionCounts.counts)
}

// -------------------------------------------------------------------

// DiscoverUserActionsProfile_ContentMediaXEntityActionCounts

// optional uint64 content_category_media_type = 1;
inline bool DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::_internal_has_content_category_media_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::has_content_category_media_type() const {
  return _internal_has_content_category_media_type();
}
inline void DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::clear_content_category_media_type() {
  content_category_media_type_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::_internal_content_category_media_type() const {
  return content_category_media_type_;
}
inline uint64_t DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::content_category_media_type() const {
  // @@protoc_insertion_point(field_get:feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts.content_category_media_type)
  return _internal_content_category_media_type();
}
inline void DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::_internal_set_content_category_media_type(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  content_category_media_type_ = value;
}
inline void DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::set_content_category_media_type(uint64_t value) {
  _internal_set_content_category_media_type(value);
  // @@protoc_insertion_point(field_set:feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts.content_category_media_type)
}

// optional uint64 mid = 2;
inline bool DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::has_mid() const {
  return _internal_has_mid();
}
inline void DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::clear_mid() {
  mid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::_internal_mid() const {
  return mid_;
}
inline uint64_t DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::mid() const {
  // @@protoc_insertion_point(field_get:feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts.mid)
  return _internal_mid();
}
inline void DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::_internal_set_mid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  mid_ = value;
}
inline void DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::set_mid(uint64_t value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts.mid)
}

// repeated .feedwire.ActionCounts counts = 3;
inline int DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::_internal_counts_size() const {
  return counts_.size();
}
inline int DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::counts_size() const {
  return _internal_counts_size();
}
inline void DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::clear_counts() {
  counts_.Clear();
}
inline ::feedwire::ActionCounts* DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::mutable_counts(int index) {
  // @@protoc_insertion_point(field_mutable:feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts.counts)
  return counts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::ActionCounts >*
DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::mutable_counts() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts.counts)
  return &counts_;
}
inline const ::feedwire::ActionCounts& DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::_internal_counts(int index) const {
  return counts_.Get(index);
}
inline const ::feedwire::ActionCounts& DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::counts(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts.counts)
  return _internal_counts(index);
}
inline ::feedwire::ActionCounts* DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::_internal_add_counts() {
  return counts_.Add();
}
inline ::feedwire::ActionCounts* DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::add_counts() {
  ::feedwire::ActionCounts* _add = _internal_add_counts();
  // @@protoc_insertion_point(field_add:feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts.counts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::ActionCounts >&
DiscoverUserActionsProfile_ContentMediaXEntityActionCounts::counts() const {
  // @@protoc_insertion_point(field_list:feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts.counts)
  return counts_;
}

// -------------------------------------------------------------------

// DiscoverUserActionsProfile_CardCategoryXEntityActionCounts

// optional uint64 card_category = 1;
inline bool DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::_internal_has_card_category() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::has_card_category() const {
  return _internal_has_card_category();
}
inline void DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::clear_card_category() {
  card_category_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::_internal_card_category() const {
  return card_category_;
}
inline uint64_t DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::card_category() const {
  // @@protoc_insertion_point(field_get:feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts.card_category)
  return _internal_card_category();
}
inline void DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::_internal_set_card_category(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  card_category_ = value;
}
inline void DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::set_card_category(uint64_t value) {
  _internal_set_card_category(value);
  // @@protoc_insertion_point(field_set:feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts.card_category)
}

// optional uint64 mid = 2;
inline bool DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::has_mid() const {
  return _internal_has_mid();
}
inline void DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::clear_mid() {
  mid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::_internal_mid() const {
  return mid_;
}
inline uint64_t DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::mid() const {
  // @@protoc_insertion_point(field_get:feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts.mid)
  return _internal_mid();
}
inline void DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::_internal_set_mid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  mid_ = value;
}
inline void DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::set_mid(uint64_t value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts.mid)
}

// repeated .feedwire.ActionCounts counts = 3;
inline int DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::_internal_counts_size() const {
  return counts_.size();
}
inline int DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::counts_size() const {
  return _internal_counts_size();
}
inline void DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::clear_counts() {
  counts_.Clear();
}
inline ::feedwire::ActionCounts* DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::mutable_counts(int index) {
  // @@protoc_insertion_point(field_mutable:feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts.counts)
  return counts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::ActionCounts >*
DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::mutable_counts() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts.counts)
  return &counts_;
}
inline const ::feedwire::ActionCounts& DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::_internal_counts(int index) const {
  return counts_.Get(index);
}
inline const ::feedwire::ActionCounts& DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::counts(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts.counts)
  return _internal_counts(index);
}
inline ::feedwire::ActionCounts* DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::_internal_add_counts() {
  return counts_.Add();
}
inline ::feedwire::ActionCounts* DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::add_counts() {
  ::feedwire::ActionCounts* _add = _internal_add_counts();
  // @@protoc_insertion_point(field_add:feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts.counts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::ActionCounts >&
DiscoverUserActionsProfile_CardCategoryXEntityActionCounts::counts() const {
  // @@protoc_insertion_point(field_list:feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts.counts)
  return counts_;
}

// -------------------------------------------------------------------

// DiscoverUserActionsProfile

// repeated .feedwire.DiscoverUserActionsProfile.ContentMediaXEntityActionCounts content_media_x_entity = 2;
inline int DiscoverUserActionsProfile::_internal_content_media_x_entity_size() const {
  return content_media_x_entity_.size();
}
inline int DiscoverUserActionsProfile::content_media_x_entity_size() const {
  return _internal_content_media_x_entity_size();
}
inline void DiscoverUserActionsProfile::clear_content_media_x_entity() {
  content_media_x_entity_.Clear();
}
inline ::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts* DiscoverUserActionsProfile::mutable_content_media_x_entity(int index) {
  // @@protoc_insertion_point(field_mutable:feedwire.DiscoverUserActionsProfile.content_media_x_entity)
  return content_media_x_entity_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts >*
DiscoverUserActionsProfile::mutable_content_media_x_entity() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.DiscoverUserActionsProfile.content_media_x_entity)
  return &content_media_x_entity_;
}
inline const ::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts& DiscoverUserActionsProfile::_internal_content_media_x_entity(int index) const {
  return content_media_x_entity_.Get(index);
}
inline const ::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts& DiscoverUserActionsProfile::content_media_x_entity(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.DiscoverUserActionsProfile.content_media_x_entity)
  return _internal_content_media_x_entity(index);
}
inline ::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts* DiscoverUserActionsProfile::_internal_add_content_media_x_entity() {
  return content_media_x_entity_.Add();
}
inline ::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts* DiscoverUserActionsProfile::add_content_media_x_entity() {
  ::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts* _add = _internal_add_content_media_x_entity();
  // @@protoc_insertion_point(field_add:feedwire.DiscoverUserActionsProfile.content_media_x_entity)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::DiscoverUserActionsProfile_ContentMediaXEntityActionCounts >&
DiscoverUserActionsProfile::content_media_x_entity() const {
  // @@protoc_insertion_point(field_list:feedwire.DiscoverUserActionsProfile.content_media_x_entity)
  return content_media_x_entity_;
}

// repeated .feedwire.DiscoverUserActionsProfile.CardCategoryXEntityActionCounts card_category_x_entity = 3;
inline int DiscoverUserActionsProfile::_internal_card_category_x_entity_size() const {
  return card_category_x_entity_.size();
}
inline int DiscoverUserActionsProfile::card_category_x_entity_size() const {
  return _internal_card_category_x_entity_size();
}
inline void DiscoverUserActionsProfile::clear_card_category_x_entity() {
  card_category_x_entity_.Clear();
}
inline ::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts* DiscoverUserActionsProfile::mutable_card_category_x_entity(int index) {
  // @@protoc_insertion_point(field_mutable:feedwire.DiscoverUserActionsProfile.card_category_x_entity)
  return card_category_x_entity_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts >*
DiscoverUserActionsProfile::mutable_card_category_x_entity() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.DiscoverUserActionsProfile.card_category_x_entity)
  return &card_category_x_entity_;
}
inline const ::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts& DiscoverUserActionsProfile::_internal_card_category_x_entity(int index) const {
  return card_category_x_entity_.Get(index);
}
inline const ::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts& DiscoverUserActionsProfile::card_category_x_entity(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.DiscoverUserActionsProfile.card_category_x_entity)
  return _internal_card_category_x_entity(index);
}
inline ::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts* DiscoverUserActionsProfile::_internal_add_card_category_x_entity() {
  return card_category_x_entity_.Add();
}
inline ::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts* DiscoverUserActionsProfile::add_card_category_x_entity() {
  ::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts* _add = _internal_add_card_category_x_entity();
  // @@protoc_insertion_point(field_add:feedwire.DiscoverUserActionsProfile.card_category_x_entity)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::DiscoverUserActionsProfile_CardCategoryXEntityActionCounts >&
DiscoverUserActionsProfile::card_category_x_entity() const {
  // @@protoc_insertion_point(field_list:feedwire.DiscoverUserActionsProfile.card_category_x_entity)
  return card_category_x_entity_;
}

// -------------------------------------------------------------------

// ViewDemotionProfile

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::feedwire::ActionCounts_ActionType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fclient_5fuser_5fprofiles_2eproto
