// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/feed_request.proto

#include "components/feed/core/proto/v2/wire/feed_request.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedwire {
PROTOBUF_CONSTEXPR FeedRequest::FeedRequest(
    ::_pbi::ConstantInitialized)
  : client_capability_()
  , client_info_(nullptr)
  , feed_query_(nullptr)
  , consistency_token_(nullptr)
  , diagnostic_info_(nullptr)
  , client_user_profiles_(nullptr){}
struct FeedRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedRequestDefaultTypeInternal() {}
  union {
    FeedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedRequestDefaultTypeInternal _FeedRequest_default_instance_;
}  // namespace feedwire
namespace feedwire {

// ===================================================================

class FeedRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<FeedRequest>()._has_bits_);
  static const ::feedwire::ClientInfo& client_info(const FeedRequest* msg);
  static void set_has_client_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::feedwire::FeedQuery& feed_query(const FeedRequest* msg);
  static void set_has_feed_query(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::feedwire::ConsistencyToken& consistency_token(const FeedRequest* msg);
  static void set_has_consistency_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::feedwire::DiagnosticInfo& diagnostic_info(const FeedRequest* msg);
  static void set_has_diagnostic_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::feedwire::ClientUserProfiles& client_user_profiles(const FeedRequest* msg);
  static void set_has_client_user_profiles(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::feedwire::ClientInfo&
FeedRequest::_Internal::client_info(const FeedRequest* msg) {
  return *msg->client_info_;
}
const ::feedwire::FeedQuery&
FeedRequest::_Internal::feed_query(const FeedRequest* msg) {
  return *msg->feed_query_;
}
const ::feedwire::ConsistencyToken&
FeedRequest::_Internal::consistency_token(const FeedRequest* msg) {
  return *msg->consistency_token_;
}
const ::feedwire::DiagnosticInfo&
FeedRequest::_Internal::diagnostic_info(const FeedRequest* msg) {
  return *msg->diagnostic_info_;
}
const ::feedwire::ClientUserProfiles&
FeedRequest::_Internal::client_user_profiles(const FeedRequest* msg) {
  return *msg->client_user_profiles_;
}
void FeedRequest::clear_client_info() {
  if (client_info_ != nullptr) client_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void FeedRequest::clear_feed_query() {
  if (feed_query_ != nullptr) feed_query_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void FeedRequest::clear_consistency_token() {
  if (consistency_token_ != nullptr) consistency_token_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void FeedRequest::clear_diagnostic_info() {
  if (diagnostic_info_ != nullptr) diagnostic_info_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void FeedRequest::clear_client_user_profiles() {
  if (client_user_profiles_ != nullptr) client_user_profiles_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
FeedRequest::FeedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  client_capability_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.FeedRequest)
}
FeedRequest::FeedRequest(const FeedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      client_capability_(from.client_capability_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_client_info()) {
    client_info_ = new ::feedwire::ClientInfo(*from.client_info_);
  } else {
    client_info_ = nullptr;
  }
  if (from._internal_has_feed_query()) {
    feed_query_ = new ::feedwire::FeedQuery(*from.feed_query_);
  } else {
    feed_query_ = nullptr;
  }
  if (from._internal_has_consistency_token()) {
    consistency_token_ = new ::feedwire::ConsistencyToken(*from.consistency_token_);
  } else {
    consistency_token_ = nullptr;
  }
  if (from._internal_has_diagnostic_info()) {
    diagnostic_info_ = new ::feedwire::DiagnosticInfo(*from.diagnostic_info_);
  } else {
    diagnostic_info_ = nullptr;
  }
  if (from._internal_has_client_user_profiles()) {
    client_user_profiles_ = new ::feedwire::ClientUserProfiles(*from.client_user_profiles_);
  } else {
    client_user_profiles_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:feedwire.FeedRequest)
}

inline void FeedRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_user_profiles_) -
    reinterpret_cast<char*>(&client_info_)) + sizeof(client_user_profiles_));
}

FeedRequest::~FeedRequest() {
  // @@protoc_insertion_point(destructor:feedwire.FeedRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_info_;
  if (this != internal_default_instance()) delete feed_query_;
  if (this != internal_default_instance()) delete consistency_token_;
  if (this != internal_default_instance()) delete diagnostic_info_;
  if (this != internal_default_instance()) delete client_user_profiles_;
}

void FeedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FeedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.FeedRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_capability_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(client_info_ != nullptr);
      client_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(feed_query_ != nullptr);
      feed_query_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(consistency_token_ != nullptr);
      consistency_token_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(diagnostic_info_ != nullptr);
      diagnostic_info_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(client_user_profiles_ != nullptr);
      client_user_profiles_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FeedRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .feedwire.ClientInfo client_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.FeedQuery feed_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_feed_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .feedwire.Capability client_capability = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::feedwire::Capability_IsValid(val))) {
              _internal_add_client_capability(static_cast<::feedwire::Capability>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_client_capability(), ptr, ctx, ::feedwire::Capability_IsValid, &_internal_metadata_, 4);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.ConsistencyToken consistency_token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_consistency_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.DiagnosticInfo diagnostic_info = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_diagnostic_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.ClientUserProfiles client_user_profiles = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_user_profiles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeedRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.FeedRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .feedwire.ClientInfo client_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_info(this),
        _Internal::client_info(this).GetCachedSize(), target, stream);
  }

  // optional .feedwire.FeedQuery feed_query = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::feed_query(this),
        _Internal::feed_query(this).GetCachedSize(), target, stream);
  }

  // repeated .feedwire.Capability client_capability = 4;
  for (int i = 0, n = this->_internal_client_capability_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_client_capability(i), target);
  }

  // optional .feedwire.ConsistencyToken consistency_token = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::consistency_token(this),
        _Internal::consistency_token(this).GetCachedSize(), target, stream);
  }

  // optional .feedwire.DiagnosticInfo diagnostic_info = 14;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::diagnostic_info(this),
        _Internal::diagnostic_info(this).GetCachedSize(), target, stream);
  }

  // optional .feedwire.ClientUserProfiles client_user_profiles = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::client_user_profiles(this),
        _Internal::client_user_profiles(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.FeedRequest)
  return target;
}

size_t FeedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.FeedRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .feedwire.Capability client_capability = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_client_capability_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_client_capability(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .feedwire.ClientInfo client_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_info_);
    }

    // optional .feedwire.FeedQuery feed_query = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feed_query_);
    }

    // optional .feedwire.ConsistencyToken consistency_token = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consistency_token_);
    }

    // optional .feedwire.DiagnosticInfo diagnostic_info = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *diagnostic_info_);
    }

    // optional .feedwire.ClientUserProfiles client_user_profiles = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_user_profiles_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeedRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FeedRequest*>(
      &from));
}

void FeedRequest::MergeFrom(const FeedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.FeedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  client_capability_.MergeFrom(from.client_capability_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_client_info()->::feedwire::ClientInfo::MergeFrom(from._internal_client_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_feed_query()->::feedwire::FeedQuery::MergeFrom(from._internal_feed_query());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_consistency_token()->::feedwire::ConsistencyToken::MergeFrom(from._internal_consistency_token());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_diagnostic_info()->::feedwire::DiagnosticInfo::MergeFrom(from._internal_diagnostic_info());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_client_user_profiles()->::feedwire::ClientUserProfiles::MergeFrom(from._internal_client_user_profiles());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FeedRequest::CopyFrom(const FeedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.FeedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedRequest::IsInitialized() const {
  return true;
}

void FeedRequest::InternalSwap(FeedRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  client_capability_.InternalSwap(&other->client_capability_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FeedRequest, client_user_profiles_)
      + sizeof(FeedRequest::client_user_profiles_)
      - PROTOBUF_FIELD_OFFSET(FeedRequest, client_info_)>(
          reinterpret_cast<char*>(&client_info_),
          reinterpret_cast<char*>(&other->client_info_));
}

std::string FeedRequest::GetTypeName() const {
  return "feedwire.FeedRequest";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::feedwire::FeedRequest*
Arena::CreateMaybeMessage< ::feedwire::FeedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::FeedRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
