// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/render_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2frender_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2frender_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/feed/core/proto/v2/wire/xsurface_container.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2frender_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2frender_5fdata_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
class RenderData;
struct RenderDataDefaultTypeInternal;
extern RenderDataDefaultTypeInternal _RenderData_default_instance_;
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::RenderData* Arena::CreateMaybeMessage<::feedwire::RenderData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

enum RenderData_RenderDataType : int {
  RenderData_RenderDataType_UNKNOWN_RENDER_DATA_TYPE = 0,
  RenderData_RenderDataType_XSURFACE = 1,
  RenderData_RenderDataType_PREFETCH_RESOURCES = 2
};
bool RenderData_RenderDataType_IsValid(int value);
constexpr RenderData_RenderDataType RenderData_RenderDataType_RenderDataType_MIN = RenderData_RenderDataType_UNKNOWN_RENDER_DATA_TYPE;
constexpr RenderData_RenderDataType RenderData_RenderDataType_RenderDataType_MAX = RenderData_RenderDataType_PREFETCH_RESOURCES;
constexpr int RenderData_RenderDataType_RenderDataType_ARRAYSIZE = RenderData_RenderDataType_RenderDataType_MAX + 1;

const std::string& RenderData_RenderDataType_Name(RenderData_RenderDataType value);
template<typename T>
inline const std::string& RenderData_RenderDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RenderData_RenderDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RenderData_RenderDataType_Name.");
  return RenderData_RenderDataType_Name(static_cast<RenderData_RenderDataType>(enum_t_value));
}
bool RenderData_RenderDataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RenderData_RenderDataType* value);
// ===================================================================

class RenderData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.RenderData) */ {
 public:
  inline RenderData() : RenderData(nullptr) {}
  ~RenderData() override;
  explicit PROTOBUF_CONSTEXPR RenderData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenderData(const RenderData& from);
  RenderData(RenderData&& from) noexcept
    : RenderData() {
    *this = ::std::move(from);
  }

  inline RenderData& operator=(const RenderData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderData& operator=(RenderData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RenderData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenderData* internal_default_instance() {
    return reinterpret_cast<const RenderData*>(
               &_RenderData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RenderData& a, RenderData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RenderData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenderData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RenderData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RenderData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RenderData& from);
  void MergeFrom(const RenderData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RenderData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.RenderData";
  }
  protected:
  explicit RenderData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef RenderData_RenderDataType RenderDataType;
  static constexpr RenderDataType UNKNOWN_RENDER_DATA_TYPE =
    RenderData_RenderDataType_UNKNOWN_RENDER_DATA_TYPE;
  static constexpr RenderDataType XSURFACE =
    RenderData_RenderDataType_XSURFACE;
  static constexpr RenderDataType PREFETCH_RESOURCES =
    RenderData_RenderDataType_PREFETCH_RESOURCES;
  static inline bool RenderDataType_IsValid(int value) {
    return RenderData_RenderDataType_IsValid(value);
  }
  static constexpr RenderDataType RenderDataType_MIN =
    RenderData_RenderDataType_RenderDataType_MIN;
  static constexpr RenderDataType RenderDataType_MAX =
    RenderData_RenderDataType_RenderDataType_MAX;
  static constexpr int RenderDataType_ARRAYSIZE =
    RenderData_RenderDataType_RenderDataType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& RenderDataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RenderDataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RenderDataType_Name.");
    return RenderData_RenderDataType_Name(enum_t_value);
  }
  static inline bool RenderDataType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RenderDataType* value) {
    return RenderData_RenderDataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kXsurfacePrefetchResourcesFieldNumber = 330939752,
    kXsurfaceContainerFieldNumber = 1000,
    kRenderDataTypeFieldNumber = 1,
  };
  // optional bytes xsurface_prefetch_resources = 330939752;
  bool has_xsurface_prefetch_resources() const;
  private:
  bool _internal_has_xsurface_prefetch_resources() const;
  public:
  void clear_xsurface_prefetch_resources();
  const std::string& xsurface_prefetch_resources() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xsurface_prefetch_resources(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xsurface_prefetch_resources();
  PROTOBUF_NODISCARD std::string* release_xsurface_prefetch_resources();
  void set_allocated_xsurface_prefetch_resources(std::string* xsurface_prefetch_resources);
  private:
  const std::string& _internal_xsurface_prefetch_resources() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xsurface_prefetch_resources(const std::string& value);
  std::string* _internal_mutable_xsurface_prefetch_resources();
  public:

  // optional .feedwire.XSurfaceContainer xsurface_container = 1000;
  bool has_xsurface_container() const;
  private:
  bool _internal_has_xsurface_container() const;
  public:
  void clear_xsurface_container();
  const ::feedwire::XSurfaceContainer& xsurface_container() const;
  PROTOBUF_NODISCARD ::feedwire::XSurfaceContainer* release_xsurface_container();
  ::feedwire::XSurfaceContainer* mutable_xsurface_container();
  void set_allocated_xsurface_container(::feedwire::XSurfaceContainer* xsurface_container);
  private:
  const ::feedwire::XSurfaceContainer& _internal_xsurface_container() const;
  ::feedwire::XSurfaceContainer* _internal_mutable_xsurface_container();
  public:
  void unsafe_arena_set_allocated_xsurface_container(
      ::feedwire::XSurfaceContainer* xsurface_container);
  ::feedwire::XSurfaceContainer* unsafe_arena_release_xsurface_container();

  // optional .feedwire.RenderData.RenderDataType render_data_type = 1;
  bool has_render_data_type() const;
  private:
  bool _internal_has_render_data_type() const;
  public:
  void clear_render_data_type();
  ::feedwire::RenderData_RenderDataType render_data_type() const;
  void set_render_data_type(::feedwire::RenderData_RenderDataType value);
  private:
  ::feedwire::RenderData_RenderDataType _internal_render_data_type() const;
  void _internal_set_render_data_type(::feedwire::RenderData_RenderDataType value);
  public:

  // @@protoc_insertion_point(class_scope:feedwire.RenderData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xsurface_prefetch_resources_;
  ::feedwire::XSurfaceContainer* xsurface_container_;
  int render_data_type_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2frender_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RenderData

// optional .feedwire.RenderData.RenderDataType render_data_type = 1;
inline bool RenderData::_internal_has_render_data_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RenderData::has_render_data_type() const {
  return _internal_has_render_data_type();
}
inline void RenderData::clear_render_data_type() {
  render_data_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::feedwire::RenderData_RenderDataType RenderData::_internal_render_data_type() const {
  return static_cast< ::feedwire::RenderData_RenderDataType >(render_data_type_);
}
inline ::feedwire::RenderData_RenderDataType RenderData::render_data_type() const {
  // @@protoc_insertion_point(field_get:feedwire.RenderData.render_data_type)
  return _internal_render_data_type();
}
inline void RenderData::_internal_set_render_data_type(::feedwire::RenderData_RenderDataType value) {
  assert(::feedwire::RenderData_RenderDataType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  render_data_type_ = value;
}
inline void RenderData::set_render_data_type(::feedwire::RenderData_RenderDataType value) {
  _internal_set_render_data_type(value);
  // @@protoc_insertion_point(field_set:feedwire.RenderData.render_data_type)
}

// optional .feedwire.XSurfaceContainer xsurface_container = 1000;
inline bool RenderData::_internal_has_xsurface_container() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || xsurface_container_ != nullptr);
  return value;
}
inline bool RenderData::has_xsurface_container() const {
  return _internal_has_xsurface_container();
}
inline const ::feedwire::XSurfaceContainer& RenderData::_internal_xsurface_container() const {
  const ::feedwire::XSurfaceContainer* p = xsurface_container_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::XSurfaceContainer&>(
      ::feedwire::_XSurfaceContainer_default_instance_);
}
inline const ::feedwire::XSurfaceContainer& RenderData::xsurface_container() const {
  // @@protoc_insertion_point(field_get:feedwire.RenderData.xsurface_container)
  return _internal_xsurface_container();
}
inline void RenderData::unsafe_arena_set_allocated_xsurface_container(
    ::feedwire::XSurfaceContainer* xsurface_container) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(xsurface_container_);
  }
  xsurface_container_ = xsurface_container;
  if (xsurface_container) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.RenderData.xsurface_container)
}
inline ::feedwire::XSurfaceContainer* RenderData::release_xsurface_container() {
  _has_bits_[0] &= ~0x00000002u;
  ::feedwire::XSurfaceContainer* temp = xsurface_container_;
  xsurface_container_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::XSurfaceContainer* RenderData::unsafe_arena_release_xsurface_container() {
  // @@protoc_insertion_point(field_release:feedwire.RenderData.xsurface_container)
  _has_bits_[0] &= ~0x00000002u;
  ::feedwire::XSurfaceContainer* temp = xsurface_container_;
  xsurface_container_ = nullptr;
  return temp;
}
inline ::feedwire::XSurfaceContainer* RenderData::_internal_mutable_xsurface_container() {
  _has_bits_[0] |= 0x00000002u;
  if (xsurface_container_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::XSurfaceContainer>(GetArenaForAllocation());
    xsurface_container_ = p;
  }
  return xsurface_container_;
}
inline ::feedwire::XSurfaceContainer* RenderData::mutable_xsurface_container() {
  ::feedwire::XSurfaceContainer* _msg = _internal_mutable_xsurface_container();
  // @@protoc_insertion_point(field_mutable:feedwire.RenderData.xsurface_container)
  return _msg;
}
inline void RenderData::set_allocated_xsurface_container(::feedwire::XSurfaceContainer* xsurface_container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(xsurface_container_);
  }
  if (xsurface_container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(xsurface_container));
    if (message_arena != submessage_arena) {
      xsurface_container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, xsurface_container, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  xsurface_container_ = xsurface_container;
  // @@protoc_insertion_point(field_set_allocated:feedwire.RenderData.xsurface_container)
}

// optional bytes xsurface_prefetch_resources = 330939752;
inline bool RenderData::_internal_has_xsurface_prefetch_resources() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RenderData::has_xsurface_prefetch_resources() const {
  return _internal_has_xsurface_prefetch_resources();
}
inline void RenderData::clear_xsurface_prefetch_resources() {
  xsurface_prefetch_resources_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RenderData::xsurface_prefetch_resources() const {
  // @@protoc_insertion_point(field_get:feedwire.RenderData.xsurface_prefetch_resources)
  return _internal_xsurface_prefetch_resources();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenderData::set_xsurface_prefetch_resources(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 xsurface_prefetch_resources_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.RenderData.xsurface_prefetch_resources)
}
inline std::string* RenderData::mutable_xsurface_prefetch_resources() {
  std::string* _s = _internal_mutable_xsurface_prefetch_resources();
  // @@protoc_insertion_point(field_mutable:feedwire.RenderData.xsurface_prefetch_resources)
  return _s;
}
inline const std::string& RenderData::_internal_xsurface_prefetch_resources() const {
  return xsurface_prefetch_resources_.Get();
}
inline void RenderData::_internal_set_xsurface_prefetch_resources(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  xsurface_prefetch_resources_.Set(value, GetArenaForAllocation());
}
inline std::string* RenderData::_internal_mutable_xsurface_prefetch_resources() {
  _has_bits_[0] |= 0x00000001u;
  return xsurface_prefetch_resources_.Mutable(GetArenaForAllocation());
}
inline std::string* RenderData::release_xsurface_prefetch_resources() {
  // @@protoc_insertion_point(field_release:feedwire.RenderData.xsurface_prefetch_resources)
  if (!_internal_has_xsurface_prefetch_resources()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = xsurface_prefetch_resources_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (xsurface_prefetch_resources_.IsDefault()) {
    xsurface_prefetch_resources_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RenderData::set_allocated_xsurface_prefetch_resources(std::string* xsurface_prefetch_resources) {
  if (xsurface_prefetch_resources != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  xsurface_prefetch_resources_.SetAllocated(xsurface_prefetch_resources, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (xsurface_prefetch_resources_.IsDefault()) {
    xsurface_prefetch_resources_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.RenderData.xsurface_prefetch_resources)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::feedwire::RenderData_RenderDataType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2frender_5fdata_2eproto
