// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/token.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ftoken_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ftoken_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "components/feed/core/proto/v2/wire/content_id.pb.h"
#include "components/feed/core/proto/v2/wire/next_page_token.pb.h"
#include "components/feed/core/proto/v2/wire/web_feed_token.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ftoken_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ftoken_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
class Token;
struct TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::Token* Arena::CreateMaybeMessage<::feedwire::Token>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

// ===================================================================

class Token final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.Token) */ {
 public:
  inline Token() : Token(nullptr) {}
  ~Token() override;
  explicit PROTOBUF_CONSTEXPR Token(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Token(const Token& from);
  Token(Token&& from) noexcept
    : Token() {
    *this = ::std::move(from);
  }

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline Token& operator=(Token&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Token& default_instance() {
    return *internal_default_instance();
  }
  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
               &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Token& a, Token& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Token* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Token* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Token>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Token& from);
  void MergeFrom(const Token& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Token* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.Token";
  }
  protected:
  explicit Token(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInPlaceUpdateTokenFieldNumber = 1003,
    kStoryTokenFieldNumber = 1004,
    kParentIdFieldNumber = 2,
    kWebFeedTokenFieldNumber = 1001,
    kNextPageTokenFieldNumber = 1002,
  };
  // optional bytes in_place_update_token = 1003;
  bool has_in_place_update_token() const;
  private:
  bool _internal_has_in_place_update_token() const;
  public:
  void clear_in_place_update_token();
  const std::string& in_place_update_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_in_place_update_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_in_place_update_token();
  PROTOBUF_NODISCARD std::string* release_in_place_update_token();
  void set_allocated_in_place_update_token(std::string* in_place_update_token);
  private:
  const std::string& _internal_in_place_update_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_in_place_update_token(const std::string& value);
  std::string* _internal_mutable_in_place_update_token();
  public:

  // optional bytes story_token = 1004;
  bool has_story_token() const;
  private:
  bool _internal_has_story_token() const;
  public:
  void clear_story_token();
  const std::string& story_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_story_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_story_token();
  PROTOBUF_NODISCARD std::string* release_story_token();
  void set_allocated_story_token(std::string* story_token);
  private:
  const std::string& _internal_story_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_story_token(const std::string& value);
  std::string* _internal_mutable_story_token();
  public:

  // optional .feedwire.ContentId parent_id = 2;
  bool has_parent_id() const;
  private:
  bool _internal_has_parent_id() const;
  public:
  void clear_parent_id();
  const ::feedwire::ContentId& parent_id() const;
  PROTOBUF_NODISCARD ::feedwire::ContentId* release_parent_id();
  ::feedwire::ContentId* mutable_parent_id();
  void set_allocated_parent_id(::feedwire::ContentId* parent_id);
  private:
  const ::feedwire::ContentId& _internal_parent_id() const;
  ::feedwire::ContentId* _internal_mutable_parent_id();
  public:
  void unsafe_arena_set_allocated_parent_id(
      ::feedwire::ContentId* parent_id);
  ::feedwire::ContentId* unsafe_arena_release_parent_id();

  // optional .feedwire.WebFeedToken web_feed_token = 1001;
  bool has_web_feed_token() const;
  private:
  bool _internal_has_web_feed_token() const;
  public:
  void clear_web_feed_token();
  const ::feedwire::WebFeedToken& web_feed_token() const;
  PROTOBUF_NODISCARD ::feedwire::WebFeedToken* release_web_feed_token();
  ::feedwire::WebFeedToken* mutable_web_feed_token();
  void set_allocated_web_feed_token(::feedwire::WebFeedToken* web_feed_token);
  private:
  const ::feedwire::WebFeedToken& _internal_web_feed_token() const;
  ::feedwire::WebFeedToken* _internal_mutable_web_feed_token();
  public:
  void unsafe_arena_set_allocated_web_feed_token(
      ::feedwire::WebFeedToken* web_feed_token);
  ::feedwire::WebFeedToken* unsafe_arena_release_web_feed_token();

  // optional .feedwire.NextPageToken next_page_token = 1002;
  bool has_next_page_token() const;
  private:
  bool _internal_has_next_page_token() const;
  public:
  void clear_next_page_token();
  const ::feedwire::NextPageToken& next_page_token() const;
  PROTOBUF_NODISCARD ::feedwire::NextPageToken* release_next_page_token();
  ::feedwire::NextPageToken* mutable_next_page_token();
  void set_allocated_next_page_token(::feedwire::NextPageToken* next_page_token);
  private:
  const ::feedwire::NextPageToken& _internal_next_page_token() const;
  ::feedwire::NextPageToken* _internal_mutable_next_page_token();
  public:
  void unsafe_arena_set_allocated_next_page_token(
      ::feedwire::NextPageToken* next_page_token);
  ::feedwire::NextPageToken* unsafe_arena_release_next_page_token();

  // @@protoc_insertion_point(class_scope:feedwire.Token)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr in_place_update_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr story_token_;
  ::feedwire::ContentId* parent_id_;
  ::feedwire::WebFeedToken* web_feed_token_;
  ::feedwire::NextPageToken* next_page_token_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ftoken_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Token

// optional .feedwire.ContentId parent_id = 2;
inline bool Token::_internal_has_parent_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || parent_id_ != nullptr);
  return value;
}
inline bool Token::has_parent_id() const {
  return _internal_has_parent_id();
}
inline const ::feedwire::ContentId& Token::_internal_parent_id() const {
  const ::feedwire::ContentId* p = parent_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ContentId&>(
      ::feedwire::_ContentId_default_instance_);
}
inline const ::feedwire::ContentId& Token::parent_id() const {
  // @@protoc_insertion_point(field_get:feedwire.Token.parent_id)
  return _internal_parent_id();
}
inline void Token::unsafe_arena_set_allocated_parent_id(
    ::feedwire::ContentId* parent_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_id_);
  }
  parent_id_ = parent_id;
  if (parent_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.Token.parent_id)
}
inline ::feedwire::ContentId* Token::release_parent_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::feedwire::ContentId* temp = parent_id_;
  parent_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ContentId* Token::unsafe_arena_release_parent_id() {
  // @@protoc_insertion_point(field_release:feedwire.Token.parent_id)
  _has_bits_[0] &= ~0x00000004u;
  ::feedwire::ContentId* temp = parent_id_;
  parent_id_ = nullptr;
  return temp;
}
inline ::feedwire::ContentId* Token::_internal_mutable_parent_id() {
  _has_bits_[0] |= 0x00000004u;
  if (parent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ContentId>(GetArenaForAllocation());
    parent_id_ = p;
  }
  return parent_id_;
}
inline ::feedwire::ContentId* Token::mutable_parent_id() {
  ::feedwire::ContentId* _msg = _internal_mutable_parent_id();
  // @@protoc_insertion_point(field_mutable:feedwire.Token.parent_id)
  return _msg;
}
inline void Token::set_allocated_parent_id(::feedwire::ContentId* parent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_id_);
  }
  if (parent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_id));
    if (message_arena != submessage_arena) {
      parent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  parent_id_ = parent_id;
  // @@protoc_insertion_point(field_set_allocated:feedwire.Token.parent_id)
}

// optional .feedwire.WebFeedToken web_feed_token = 1001;
inline bool Token::_internal_has_web_feed_token() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || web_feed_token_ != nullptr);
  return value;
}
inline bool Token::has_web_feed_token() const {
  return _internal_has_web_feed_token();
}
inline const ::feedwire::WebFeedToken& Token::_internal_web_feed_token() const {
  const ::feedwire::WebFeedToken* p = web_feed_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::WebFeedToken&>(
      ::feedwire::_WebFeedToken_default_instance_);
}
inline const ::feedwire::WebFeedToken& Token::web_feed_token() const {
  // @@protoc_insertion_point(field_get:feedwire.Token.web_feed_token)
  return _internal_web_feed_token();
}
inline void Token::unsafe_arena_set_allocated_web_feed_token(
    ::feedwire::WebFeedToken* web_feed_token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(web_feed_token_);
  }
  web_feed_token_ = web_feed_token;
  if (web_feed_token) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.Token.web_feed_token)
}
inline ::feedwire::WebFeedToken* Token::release_web_feed_token() {
  _has_bits_[0] &= ~0x00000008u;
  ::feedwire::WebFeedToken* temp = web_feed_token_;
  web_feed_token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::WebFeedToken* Token::unsafe_arena_release_web_feed_token() {
  // @@protoc_insertion_point(field_release:feedwire.Token.web_feed_token)
  _has_bits_[0] &= ~0x00000008u;
  ::feedwire::WebFeedToken* temp = web_feed_token_;
  web_feed_token_ = nullptr;
  return temp;
}
inline ::feedwire::WebFeedToken* Token::_internal_mutable_web_feed_token() {
  _has_bits_[0] |= 0x00000008u;
  if (web_feed_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::WebFeedToken>(GetArenaForAllocation());
    web_feed_token_ = p;
  }
  return web_feed_token_;
}
inline ::feedwire::WebFeedToken* Token::mutable_web_feed_token() {
  ::feedwire::WebFeedToken* _msg = _internal_mutable_web_feed_token();
  // @@protoc_insertion_point(field_mutable:feedwire.Token.web_feed_token)
  return _msg;
}
inline void Token::set_allocated_web_feed_token(::feedwire::WebFeedToken* web_feed_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(web_feed_token_);
  }
  if (web_feed_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(web_feed_token));
    if (message_arena != submessage_arena) {
      web_feed_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, web_feed_token, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  web_feed_token_ = web_feed_token;
  // @@protoc_insertion_point(field_set_allocated:feedwire.Token.web_feed_token)
}

// optional .feedwire.NextPageToken next_page_token = 1002;
inline bool Token::_internal_has_next_page_token() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || next_page_token_ != nullptr);
  return value;
}
inline bool Token::has_next_page_token() const {
  return _internal_has_next_page_token();
}
inline const ::feedwire::NextPageToken& Token::_internal_next_page_token() const {
  const ::feedwire::NextPageToken* p = next_page_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::NextPageToken&>(
      ::feedwire::_NextPageToken_default_instance_);
}
inline const ::feedwire::NextPageToken& Token::next_page_token() const {
  // @@protoc_insertion_point(field_get:feedwire.Token.next_page_token)
  return _internal_next_page_token();
}
inline void Token::unsafe_arena_set_allocated_next_page_token(
    ::feedwire::NextPageToken* next_page_token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_page_token_);
  }
  next_page_token_ = next_page_token;
  if (next_page_token) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.Token.next_page_token)
}
inline ::feedwire::NextPageToken* Token::release_next_page_token() {
  _has_bits_[0] &= ~0x00000010u;
  ::feedwire::NextPageToken* temp = next_page_token_;
  next_page_token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::NextPageToken* Token::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_release:feedwire.Token.next_page_token)
  _has_bits_[0] &= ~0x00000010u;
  ::feedwire::NextPageToken* temp = next_page_token_;
  next_page_token_ = nullptr;
  return temp;
}
inline ::feedwire::NextPageToken* Token::_internal_mutable_next_page_token() {
  _has_bits_[0] |= 0x00000010u;
  if (next_page_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::NextPageToken>(GetArenaForAllocation());
    next_page_token_ = p;
  }
  return next_page_token_;
}
inline ::feedwire::NextPageToken* Token::mutable_next_page_token() {
  ::feedwire::NextPageToken* _msg = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:feedwire.Token.next_page_token)
  return _msg;
}
inline void Token::set_allocated_next_page_token(::feedwire::NextPageToken* next_page_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_page_token_);
  }
  if (next_page_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_page_token));
    if (message_arena != submessage_arena) {
      next_page_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_page_token, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  next_page_token_ = next_page_token;
  // @@protoc_insertion_point(field_set_allocated:feedwire.Token.next_page_token)
}

// optional bytes in_place_update_token = 1003;
inline bool Token::_internal_has_in_place_update_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Token::has_in_place_update_token() const {
  return _internal_has_in_place_update_token();
}
inline void Token::clear_in_place_update_token() {
  in_place_update_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Token::in_place_update_token() const {
  // @@protoc_insertion_point(field_get:feedwire.Token.in_place_update_token)
  return _internal_in_place_update_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Token::set_in_place_update_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 in_place_update_token_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.Token.in_place_update_token)
}
inline std::string* Token::mutable_in_place_update_token() {
  std::string* _s = _internal_mutable_in_place_update_token();
  // @@protoc_insertion_point(field_mutable:feedwire.Token.in_place_update_token)
  return _s;
}
inline const std::string& Token::_internal_in_place_update_token() const {
  return in_place_update_token_.Get();
}
inline void Token::_internal_set_in_place_update_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  in_place_update_token_.Set(value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_in_place_update_token() {
  _has_bits_[0] |= 0x00000001u;
  return in_place_update_token_.Mutable(GetArenaForAllocation());
}
inline std::string* Token::release_in_place_update_token() {
  // @@protoc_insertion_point(field_release:feedwire.Token.in_place_update_token)
  if (!_internal_has_in_place_update_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = in_place_update_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (in_place_update_token_.IsDefault()) {
    in_place_update_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Token::set_allocated_in_place_update_token(std::string* in_place_update_token) {
  if (in_place_update_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  in_place_update_token_.SetAllocated(in_place_update_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (in_place_update_token_.IsDefault()) {
    in_place_update_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.Token.in_place_update_token)
}

// optional bytes story_token = 1004;
inline bool Token::_internal_has_story_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Token::has_story_token() const {
  return _internal_has_story_token();
}
inline void Token::clear_story_token() {
  story_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Token::story_token() const {
  // @@protoc_insertion_point(field_get:feedwire.Token.story_token)
  return _internal_story_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Token::set_story_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 story_token_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.Token.story_token)
}
inline std::string* Token::mutable_story_token() {
  std::string* _s = _internal_mutable_story_token();
  // @@protoc_insertion_point(field_mutable:feedwire.Token.story_token)
  return _s;
}
inline const std::string& Token::_internal_story_token() const {
  return story_token_.Get();
}
inline void Token::_internal_set_story_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  story_token_.Set(value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_story_token() {
  _has_bits_[0] |= 0x00000002u;
  return story_token_.Mutable(GetArenaForAllocation());
}
inline std::string* Token::release_story_token() {
  // @@protoc_insertion_point(field_release:feedwire.Token.story_token)
  if (!_internal_has_story_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = story_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (story_token_.IsDefault()) {
    story_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Token::set_allocated_story_token(std::string* story_token) {
  if (story_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  story_token_.SetAllocated(story_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (story_token_.IsDefault()) {
    story_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.Token.story_token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ftoken_2eproto
