// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/web_feed_matcher.proto

#include "components/feed/core/proto/v2/wire/web_feed_matcher.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedwire {
namespace webfeed {
PROTOBUF_CONSTEXPR WebFeedMatcher_Criteria::WebFeedMatcher_Criteria(
    ::_pbi::ConstantInitialized)
  : criteria_type_(0)

  , _oneof_case_{}{}
struct WebFeedMatcher_CriteriaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebFeedMatcher_CriteriaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebFeedMatcher_CriteriaDefaultTypeInternal() {}
  union {
    WebFeedMatcher_Criteria _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebFeedMatcher_CriteriaDefaultTypeInternal _WebFeedMatcher_Criteria_default_instance_;
PROTOBUF_CONSTEXPR WebFeedMatcher::WebFeedMatcher(
    ::_pbi::ConstantInitialized)
  : criteria_(){}
struct WebFeedMatcherDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebFeedMatcherDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebFeedMatcherDefaultTypeInternal() {}
  union {
    WebFeedMatcher _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebFeedMatcherDefaultTypeInternal _WebFeedMatcher_default_instance_;
}  // namespace webfeed
}  // namespace feedwire
namespace feedwire {
namespace webfeed {
bool WebFeedMatcher_Criteria_CriteriaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WebFeedMatcher_Criteria_CriteriaType_strings[5] = {};

static const char WebFeedMatcher_Criteria_CriteriaType_names[] =
  "CRITERIA_TYPE_UNSPECIFIED"
  "PAGE_URL_HOST_MATCH"
  "PAGE_URL_HOST_SUFFIX"
  "PAGE_URL_PATH_MATCH"
  "RSS_URL_MATCH";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WebFeedMatcher_Criteria_CriteriaType_entries[] = {
  { {WebFeedMatcher_Criteria_CriteriaType_names + 0, 25}, 0 },
  { {WebFeedMatcher_Criteria_CriteriaType_names + 25, 19}, 1 },
  { {WebFeedMatcher_Criteria_CriteriaType_names + 44, 20}, 2 },
  { {WebFeedMatcher_Criteria_CriteriaType_names + 64, 19}, 3 },
  { {WebFeedMatcher_Criteria_CriteriaType_names + 83, 13}, 4 },
};

static const int WebFeedMatcher_Criteria_CriteriaType_entries_by_number[] = {
  0, // 0 -> CRITERIA_TYPE_UNSPECIFIED
  1, // 1 -> PAGE_URL_HOST_MATCH
  2, // 2 -> PAGE_URL_HOST_SUFFIX
  3, // 3 -> PAGE_URL_PATH_MATCH
  4, // 4 -> RSS_URL_MATCH
};

const std::string& WebFeedMatcher_Criteria_CriteriaType_Name(
    WebFeedMatcher_Criteria_CriteriaType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WebFeedMatcher_Criteria_CriteriaType_entries,
          WebFeedMatcher_Criteria_CriteriaType_entries_by_number,
          5, WebFeedMatcher_Criteria_CriteriaType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WebFeedMatcher_Criteria_CriteriaType_entries,
      WebFeedMatcher_Criteria_CriteriaType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WebFeedMatcher_Criteria_CriteriaType_strings[idx].get();
}
bool WebFeedMatcher_Criteria_CriteriaType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WebFeedMatcher_Criteria_CriteriaType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WebFeedMatcher_Criteria_CriteriaType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<WebFeedMatcher_Criteria_CriteriaType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WebFeedMatcher_Criteria_CriteriaType WebFeedMatcher_Criteria::CRITERIA_TYPE_UNSPECIFIED;
constexpr WebFeedMatcher_Criteria_CriteriaType WebFeedMatcher_Criteria::PAGE_URL_HOST_MATCH;
constexpr WebFeedMatcher_Criteria_CriteriaType WebFeedMatcher_Criteria::PAGE_URL_HOST_SUFFIX;
constexpr WebFeedMatcher_Criteria_CriteriaType WebFeedMatcher_Criteria::PAGE_URL_PATH_MATCH;
constexpr WebFeedMatcher_Criteria_CriteriaType WebFeedMatcher_Criteria::RSS_URL_MATCH;
constexpr WebFeedMatcher_Criteria_CriteriaType WebFeedMatcher_Criteria::CriteriaType_MIN;
constexpr WebFeedMatcher_Criteria_CriteriaType WebFeedMatcher_Criteria::CriteriaType_MAX;
constexpr int WebFeedMatcher_Criteria::CriteriaType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class WebFeedMatcher_Criteria::_Internal {
 public:
};

WebFeedMatcher_Criteria::WebFeedMatcher_Criteria(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.webfeed.WebFeedMatcher.Criteria)
}
WebFeedMatcher_Criteria::WebFeedMatcher_Criteria(const WebFeedMatcher_Criteria& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  criteria_type_ = from.criteria_type_;
  clear_has_match();
  switch (from.match_case()) {
    case kText: {
      _internal_set_text(from._internal_text());
      break;
    }
    case kPartialMatchRegex: {
      _internal_set_partial_match_regex(from._internal_partial_match_regex());
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:feedwire.webfeed.WebFeedMatcher.Criteria)
}

inline void WebFeedMatcher_Criteria::SharedCtor() {
criteria_type_ = 0;
clear_has_match();
}

WebFeedMatcher_Criteria::~WebFeedMatcher_Criteria() {
  // @@protoc_insertion_point(destructor:feedwire.webfeed.WebFeedMatcher.Criteria)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebFeedMatcher_Criteria::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_match()) {
    clear_match();
  }
}

void WebFeedMatcher_Criteria::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WebFeedMatcher_Criteria::clear_match() {
// @@protoc_insertion_point(one_of_clear_start:feedwire.webfeed.WebFeedMatcher.Criteria)
  switch (match_case()) {
    case kText: {
      match_.text_.Destroy();
      break;
    }
    case kPartialMatchRegex: {
      match_.partial_match_regex_.Destroy();
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MATCH_NOT_SET;
}


void WebFeedMatcher_Criteria::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.webfeed.WebFeedMatcher.Criteria)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  criteria_type_ = 0;
  clear_match();
  _internal_metadata_.Clear<std::string>();
}

const char* WebFeedMatcher_Criteria::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .feedwire.webfeed.WebFeedMatcher.Criteria.CriteriaType criteria_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_criteria_type(static_cast<::feedwire::webfeed::WebFeedMatcher_Criteria_CriteriaType>(val));
        } else
          goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string partial_match_regex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_partial_match_regex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebFeedMatcher_Criteria::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.webfeed.WebFeedMatcher.Criteria)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .feedwire.webfeed.WebFeedMatcher.Criteria.CriteriaType criteria_type = 1;
  if (this->_internal_criteria_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_criteria_type(), target);
  }

  // string text = 2;
  if (_internal_has_text()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "feedwire.webfeed.WebFeedMatcher.Criteria.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // string partial_match_regex = 3;
  if (_internal_has_partial_match_regex()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partial_match_regex().data(), static_cast<int>(this->_internal_partial_match_regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "feedwire.webfeed.WebFeedMatcher.Criteria.partial_match_regex");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_partial_match_regex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.webfeed.WebFeedMatcher.Criteria)
  return target;
}

size_t WebFeedMatcher_Criteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.webfeed.WebFeedMatcher.Criteria)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .feedwire.webfeed.WebFeedMatcher.Criteria.CriteriaType criteria_type = 1;
  if (this->_internal_criteria_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_criteria_type());
  }

  switch (match_case()) {
    // string text = 2;
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
      break;
    }
    // string partial_match_regex = 3;
    case kPartialMatchRegex: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_partial_match_regex());
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebFeedMatcher_Criteria::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WebFeedMatcher_Criteria*>(
      &from));
}

void WebFeedMatcher_Criteria::MergeFrom(const WebFeedMatcher_Criteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.webfeed.WebFeedMatcher.Criteria)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_criteria_type() != 0) {
    _internal_set_criteria_type(from._internal_criteria_type());
  }
  switch (from.match_case()) {
    case kText: {
      _internal_set_text(from._internal_text());
      break;
    }
    case kPartialMatchRegex: {
      _internal_set_partial_match_regex(from._internal_partial_match_regex());
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WebFeedMatcher_Criteria::CopyFrom(const WebFeedMatcher_Criteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.webfeed.WebFeedMatcher.Criteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebFeedMatcher_Criteria::IsInitialized() const {
  return true;
}

void WebFeedMatcher_Criteria::InternalSwap(WebFeedMatcher_Criteria* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(criteria_type_, other->criteria_type_);
  swap(match_, other->match_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string WebFeedMatcher_Criteria::GetTypeName() const {
  return "feedwire.webfeed.WebFeedMatcher.Criteria";
}


// ===================================================================

class WebFeedMatcher::_Internal {
 public:
};

WebFeedMatcher::WebFeedMatcher(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  criteria_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.webfeed.WebFeedMatcher)
}
WebFeedMatcher::WebFeedMatcher(const WebFeedMatcher& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      criteria_(from.criteria_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:feedwire.webfeed.WebFeedMatcher)
}

inline void WebFeedMatcher::SharedCtor() {
}

WebFeedMatcher::~WebFeedMatcher() {
  // @@protoc_insertion_point(destructor:feedwire.webfeed.WebFeedMatcher)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebFeedMatcher::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WebFeedMatcher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WebFeedMatcher::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.webfeed.WebFeedMatcher)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  criteria_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WebFeedMatcher::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .feedwire.webfeed.WebFeedMatcher.Criteria criteria = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_criteria(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebFeedMatcher::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.webfeed.WebFeedMatcher)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .feedwire.webfeed.WebFeedMatcher.Criteria criteria = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_criteria_size()); i < n; i++) {
    const auto& repfield = this->_internal_criteria(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.webfeed.WebFeedMatcher)
  return target;
}

size_t WebFeedMatcher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.webfeed.WebFeedMatcher)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .feedwire.webfeed.WebFeedMatcher.Criteria criteria = 1;
  total_size += 1UL * this->_internal_criteria_size();
  for (const auto& msg : this->criteria_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebFeedMatcher::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WebFeedMatcher*>(
      &from));
}

void WebFeedMatcher::MergeFrom(const WebFeedMatcher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.webfeed.WebFeedMatcher)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  criteria_.MergeFrom(from.criteria_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WebFeedMatcher::CopyFrom(const WebFeedMatcher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.webfeed.WebFeedMatcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebFeedMatcher::IsInitialized() const {
  return true;
}

void WebFeedMatcher::InternalSwap(WebFeedMatcher* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  criteria_.InternalSwap(&other->criteria_);
}

std::string WebFeedMatcher::GetTypeName() const {
  return "feedwire.webfeed.WebFeedMatcher";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace webfeed
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::feedwire::webfeed::WebFeedMatcher_Criteria*
Arena::CreateMaybeMessage< ::feedwire::webfeed::WebFeedMatcher_Criteria >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::webfeed::WebFeedMatcher_Criteria >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::webfeed::WebFeedMatcher*
Arena::CreateMaybeMessage< ::feedwire::webfeed::WebFeedMatcher >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::webfeed::WebFeedMatcher >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
