// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/server_experiment_data.proto

#include "components/feed/core/proto/v2/wire/server_experiment_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedwire {
PROTOBUF_CONSTEXPR ServerExperimentData_NamespacedExperimentInfo::ServerExperimentData_NamespacedExperimentInfo(
    ::_pbi::ConstantInitialized)
  : experiment_id_()
  , namespace__(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ServerExperimentData_NamespacedExperimentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerExperimentData_NamespacedExperimentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerExperimentData_NamespacedExperimentInfoDefaultTypeInternal() {}
  union {
    ServerExperimentData_NamespacedExperimentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerExperimentData_NamespacedExperimentInfoDefaultTypeInternal _ServerExperimentData_NamespacedExperimentInfo_default_instance_;
PROTOBUF_CONSTEXPR ServerExperimentData::ServerExperimentData(
    ::_pbi::ConstantInitialized)
  : namespaced_experiment_info_(){}
struct ServerExperimentDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerExperimentDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerExperimentDataDefaultTypeInternal() {}
  union {
    ServerExperimentData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerExperimentDataDefaultTypeInternal _ServerExperimentData_default_instance_;
}  // namespace feedwire
namespace feedwire {

// ===================================================================

class ServerExperimentData_NamespacedExperimentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerExperimentData_NamespacedExperimentInfo>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ServerExperimentData_NamespacedExperimentInfo::ServerExperimentData_NamespacedExperimentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  experiment_id_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.ServerExperimentData.NamespacedExperimentInfo)
}
ServerExperimentData_NamespacedExperimentInfo::ServerExperimentData_NamespacedExperimentInfo(const ServerExperimentData_NamespacedExperimentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      experiment_id_(from.experiment_id_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_namespace_()) {
    namespace__.Set(from._internal_namespace_(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:feedwire.ServerExperimentData.NamespacedExperimentInfo)
}

inline void ServerExperimentData_NamespacedExperimentInfo::SharedCtor() {
namespace__.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  namespace__.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerExperimentData_NamespacedExperimentInfo::~ServerExperimentData_NamespacedExperimentInfo() {
  // @@protoc_insertion_point(destructor:feedwire.ServerExperimentData.NamespacedExperimentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerExperimentData_NamespacedExperimentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  namespace__.Destroy();
}

void ServerExperimentData_NamespacedExperimentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerExperimentData_NamespacedExperimentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.ServerExperimentData.NamespacedExperimentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  experiment_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    namespace__.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ServerExperimentData_NamespacedExperimentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 experiment_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_experiment_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_experiment_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerExperimentData_NamespacedExperimentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.ServerExperimentData.NamespacedExperimentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // repeated int32 experiment_id = 2;
  for (int i = 0, n = this->_internal_experiment_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_experiment_id(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.ServerExperimentData.NamespacedExperimentInfo)
  return target;
}

size_t ServerExperimentData_NamespacedExperimentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.ServerExperimentData.NamespacedExperimentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 experiment_id = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->experiment_id_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_experiment_id_size());
    total_size += data_size;
  }

  // optional string namespace = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerExperimentData_NamespacedExperimentInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ServerExperimentData_NamespacedExperimentInfo*>(
      &from));
}

void ServerExperimentData_NamespacedExperimentInfo::MergeFrom(const ServerExperimentData_NamespacedExperimentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.ServerExperimentData.NamespacedExperimentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  experiment_id_.MergeFrom(from.experiment_id_);
  if (from._internal_has_namespace_()) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ServerExperimentData_NamespacedExperimentInfo::CopyFrom(const ServerExperimentData_NamespacedExperimentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.ServerExperimentData.NamespacedExperimentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerExperimentData_NamespacedExperimentInfo::IsInitialized() const {
  return true;
}

void ServerExperimentData_NamespacedExperimentInfo::InternalSwap(ServerExperimentData_NamespacedExperimentInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  experiment_id_.InternalSwap(&other->experiment_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &namespace__, lhs_arena,
      &other->namespace__, rhs_arena
  );
}

std::string ServerExperimentData_NamespacedExperimentInfo::GetTypeName() const {
  return "feedwire.ServerExperimentData.NamespacedExperimentInfo";
}


// ===================================================================

class ServerExperimentData::_Internal {
 public:
};

ServerExperimentData::ServerExperimentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  namespaced_experiment_info_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.ServerExperimentData)
}
ServerExperimentData::ServerExperimentData(const ServerExperimentData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      namespaced_experiment_info_(from.namespaced_experiment_info_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:feedwire.ServerExperimentData)
}

inline void ServerExperimentData::SharedCtor() {
}

ServerExperimentData::~ServerExperimentData() {
  // @@protoc_insertion_point(destructor:feedwire.ServerExperimentData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerExperimentData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerExperimentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerExperimentData::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.ServerExperimentData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespaced_experiment_info_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ServerExperimentData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .feedwire.ServerExperimentData.NamespacedExperimentInfo namespaced_experiment_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_namespaced_experiment_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerExperimentData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.ServerExperimentData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .feedwire.ServerExperimentData.NamespacedExperimentInfo namespaced_experiment_info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_namespaced_experiment_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_namespaced_experiment_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.ServerExperimentData)
  return target;
}

size_t ServerExperimentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.ServerExperimentData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .feedwire.ServerExperimentData.NamespacedExperimentInfo namespaced_experiment_info = 1;
  total_size += 1UL * this->_internal_namespaced_experiment_info_size();
  for (const auto& msg : this->namespaced_experiment_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerExperimentData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ServerExperimentData*>(
      &from));
}

void ServerExperimentData::MergeFrom(const ServerExperimentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.ServerExperimentData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  namespaced_experiment_info_.MergeFrom(from.namespaced_experiment_info_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ServerExperimentData::CopyFrom(const ServerExperimentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.ServerExperimentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerExperimentData::IsInitialized() const {
  return true;
}

void ServerExperimentData::InternalSwap(ServerExperimentData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  namespaced_experiment_info_.InternalSwap(&other->namespaced_experiment_info_);
}

std::string ServerExperimentData::GetTypeName() const {
  return "feedwire.ServerExperimentData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::feedwire::ServerExperimentData_NamespacedExperimentInfo*
Arena::CreateMaybeMessage< ::feedwire::ServerExperimentData_NamespacedExperimentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::ServerExperimentData_NamespacedExperimentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::ServerExperimentData*
Arena::CreateMaybeMessage< ::feedwire::ServerExperimentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::ServerExperimentData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
