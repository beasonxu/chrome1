// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/feature.proto

#include "components/feed/core/proto/v2/wire/feature.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedwire {
PROTOBUF_CONSTEXPR Feature::Feature(
    ::_pbi::ConstantInitialized)
  : expiration_info_(nullptr)
  , stream_(nullptr)
  , content_(nullptr)
  , cluster_(nullptr)
  , token_(nullptr)
  , renderable_unit_(0)

  , _oneof_case_{}{}
struct FeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeatureDefaultTypeInternal() {}
  union {
    Feature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeatureDefaultTypeInternal _Feature_default_instance_;
}  // namespace feedwire
namespace feedwire {
bool Feature_RenderableUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Feature_RenderableUnit_strings[4] = {};

static const char Feature_RenderableUnit_names[] =
  "CLUSTER"
  "CONTENT"
  "STREAM"
  "UNKNOWN_RENDERABLE_UNIT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Feature_RenderableUnit_entries[] = {
  { {Feature_RenderableUnit_names + 0, 7}, 4 },
  { {Feature_RenderableUnit_names + 7, 7}, 3 },
  { {Feature_RenderableUnit_names + 14, 6}, 1 },
  { {Feature_RenderableUnit_names + 20, 23}, 0 },
};

static const int Feature_RenderableUnit_entries_by_number[] = {
  3, // 0 -> UNKNOWN_RENDERABLE_UNIT
  2, // 1 -> STREAM
  1, // 3 -> CONTENT
  0, // 4 -> CLUSTER
};

const std::string& Feature_RenderableUnit_Name(
    Feature_RenderableUnit value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Feature_RenderableUnit_entries,
          Feature_RenderableUnit_entries_by_number,
          4, Feature_RenderableUnit_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Feature_RenderableUnit_entries,
      Feature_RenderableUnit_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Feature_RenderableUnit_strings[idx].get();
}
bool Feature_RenderableUnit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Feature_RenderableUnit* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Feature_RenderableUnit_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<Feature_RenderableUnit>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Feature_RenderableUnit Feature::UNKNOWN_RENDERABLE_UNIT;
constexpr Feature_RenderableUnit Feature::STREAM;
constexpr Feature_RenderableUnit Feature::CONTENT;
constexpr Feature_RenderableUnit Feature::CLUSTER;
constexpr Feature_RenderableUnit Feature::RenderableUnit_MIN;
constexpr Feature_RenderableUnit Feature::RenderableUnit_MAX;
constexpr int Feature::RenderableUnit_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Feature::_Internal {
 public:
  using HasBits = decltype(std::declval<Feature>()._has_bits_);
  static const ::feedwire::ContentId& parent_id(const Feature* msg);
  static void set_has_renderable_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::feedwire::ExpirationInfo& expiration_info(const Feature* msg);
  static void set_has_expiration_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::feedwire::Stream& stream(const Feature* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::feedwire::Content& content(const Feature* msg);
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::feedwire::Cluster& cluster(const Feature* msg);
  static void set_has_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::feedwire::Token& token(const Feature* msg);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::feedwire::ContentId&
Feature::_Internal::parent_id(const Feature* msg) {
  return *msg->parent_info_.parent_id_;
}
const ::feedwire::ExpirationInfo&
Feature::_Internal::expiration_info(const Feature* msg) {
  return *msg->expiration_info_;
}
const ::feedwire::Stream&
Feature::_Internal::stream(const Feature* msg) {
  return *msg->stream_;
}
const ::feedwire::Content&
Feature::_Internal::content(const Feature* msg) {
  return *msg->content_;
}
const ::feedwire::Cluster&
Feature::_Internal::cluster(const Feature* msg) {
  return *msg->cluster_;
}
const ::feedwire::Token&
Feature::_Internal::token(const Feature* msg) {
  return *msg->token_;
}
void Feature::set_allocated_parent_id(::feedwire::ContentId* parent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_parent_info();
  if (parent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_id));
    if (message_arena != submessage_arena) {
      parent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent_id, submessage_arena);
    }
    set_has_parent_id();
    parent_info_.parent_id_ = parent_id;
  }
  // @@protoc_insertion_point(field_set_allocated:feedwire.Feature.parent_id)
}
void Feature::clear_parent_id() {
  if (_internal_has_parent_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete parent_info_.parent_id_;
    }
    clear_has_parent_info();
  }
}
void Feature::clear_expiration_info() {
  if (expiration_info_ != nullptr) expiration_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Feature::clear_stream() {
  if (stream_ != nullptr) stream_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Feature::clear_content() {
  if (content_ != nullptr) content_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Feature::clear_cluster() {
  if (cluster_ != nullptr) cluster_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Feature::clear_token() {
  if (token_ != nullptr) token_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
Feature::Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.Feature)
}
Feature::Feature(const Feature& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_expiration_info()) {
    expiration_info_ = new ::feedwire::ExpirationInfo(*from.expiration_info_);
  } else {
    expiration_info_ = nullptr;
  }
  if (from._internal_has_stream()) {
    stream_ = new ::feedwire::Stream(*from.stream_);
  } else {
    stream_ = nullptr;
  }
  if (from._internal_has_content()) {
    content_ = new ::feedwire::Content(*from.content_);
  } else {
    content_ = nullptr;
  }
  if (from._internal_has_cluster()) {
    cluster_ = new ::feedwire::Cluster(*from.cluster_);
  } else {
    cluster_ = nullptr;
  }
  if (from._internal_has_token()) {
    token_ = new ::feedwire::Token(*from.token_);
  } else {
    token_ = nullptr;
  }
  renderable_unit_ = from.renderable_unit_;
  clear_has_parent_info();
  switch (from.parent_info_case()) {
    case kParentId: {
      _internal_mutable_parent_id()->::feedwire::ContentId::MergeFrom(from._internal_parent_id());
      break;
    }
    case kIsRoot: {
      _internal_set_is_root(from._internal_is_root());
      break;
    }
    case PARENT_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:feedwire.Feature)
}

inline void Feature::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&expiration_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&renderable_unit_) -
    reinterpret_cast<char*>(&expiration_info_)) + sizeof(renderable_unit_));
clear_has_parent_info();
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:feedwire.Feature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Feature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete expiration_info_;
  if (this != internal_default_instance()) delete stream_;
  if (this != internal_default_instance()) delete content_;
  if (this != internal_default_instance()) delete cluster_;
  if (this != internal_default_instance()) delete token_;
  if (has_parent_info()) {
    clear_parent_info();
  }
}

void Feature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Feature::clear_parent_info() {
// @@protoc_insertion_point(one_of_clear_start:feedwire.Feature)
  switch (parent_info_case()) {
    case kParentId: {
      if (GetArenaForAllocation() == nullptr) {
        delete parent_info_.parent_id_;
      }
      break;
    }
    case kIsRoot: {
      // No need to clear
      break;
    }
    case PARENT_INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARENT_INFO_NOT_SET;
}


void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.Feature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(expiration_info_ != nullptr);
      expiration_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stream_ != nullptr);
      stream_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(content_ != nullptr);
      content_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(cluster_ != nullptr);
      cluster_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(token_ != nullptr);
      token_->Clear();
    }
  }
  renderable_unit_ = 0;
  clear_parent_info();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Feature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .feedwire.ContentId parent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.Feature.RenderableUnit renderable_unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::feedwire::Feature_RenderableUnit_IsValid(val))) {
            _internal_set_renderable_unit(static_cast<::feedwire::Feature_RenderableUnit>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.ExpirationInfo expiration_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiration_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_root = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_is_root(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.Stream stream = 185431437;
      case 185431437:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.Content content = 185431439;
      case 185431439:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.Cluster cluster = 190812910;
      case 190812910:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_cluster(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.Token token = 194964015;
      case 194964015:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Feature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.Feature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .feedwire.ContentId parent_id = 1;
  if (_internal_has_parent_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::parent_id(this),
        _Internal::parent_id(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .feedwire.Feature.RenderableUnit renderable_unit = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_renderable_unit(), target);
  }

  // optional .feedwire.ExpirationInfo expiration_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::expiration_info(this),
        _Internal::expiration_info(this).GetCachedSize(), target, stream);
  }

  // bool is_root = 4;
  if (_internal_has_is_root()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_root(), target);
  }

  // optional .feedwire.Stream stream = 185431437;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(185431437, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // optional .feedwire.Content content = 185431439;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(185431439, _Internal::content(this),
        _Internal::content(this).GetCachedSize(), target, stream);
  }

  // optional .feedwire.Cluster cluster = 190812910;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(190812910, _Internal::cluster(this),
        _Internal::cluster(this).GetCachedSize(), target, stream);
  }

  // optional .feedwire.Token token = 194964015;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(194964015, _Internal::token(this),
        _Internal::token(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.Feature)
  return target;
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.Feature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .feedwire.ExpirationInfo expiration_info = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expiration_info_);
    }

    // optional .feedwire.Stream stream = 185431437;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_);
    }

    // optional .feedwire.Content content = 185431439;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_);
    }

    // optional .feedwire.Cluster cluster = 190812910;
    if (cached_has_bits & 0x00000008u) {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cluster_);
    }

    // optional .feedwire.Token token = 194964015;
    if (cached_has_bits & 0x00000010u) {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *token_);
    }

    // optional .feedwire.Feature.RenderableUnit renderable_unit = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_renderable_unit());
    }

  }
  switch (parent_info_case()) {
    // .feedwire.ContentId parent_id = 1;
    case kParentId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parent_info_.parent_id_);
      break;
    }
    // bool is_root = 4;
    case kIsRoot: {
      total_size += 1 + 1;
      break;
    }
    case PARENT_INFO_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Feature::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Feature*>(
      &from));
}

void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_expiration_info()->::feedwire::ExpirationInfo::MergeFrom(from._internal_expiration_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stream()->::feedwire::Stream::MergeFrom(from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_content()->::feedwire::Content::MergeFrom(from._internal_content());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_cluster()->::feedwire::Cluster::MergeFrom(from._internal_cluster());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_token()->::feedwire::Token::MergeFrom(from._internal_token());
    }
    if (cached_has_bits & 0x00000020u) {
      renderable_unit_ = from.renderable_unit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.parent_info_case()) {
    case kParentId: {
      _internal_mutable_parent_id()->::feedwire::ContentId::MergeFrom(from._internal_parent_id());
      break;
    }
    case kIsRoot: {
      _internal_set_is_root(from._internal_is_root());
      break;
    }
    case PARENT_INFO_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  return true;
}

void Feature::InternalSwap(Feature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Feature, renderable_unit_)
      + sizeof(Feature::renderable_unit_)
      - PROTOBUF_FIELD_OFFSET(Feature, expiration_info_)>(
          reinterpret_cast<char*>(&expiration_info_),
          reinterpret_cast<char*>(&other->expiration_info_));
  swap(parent_info_, other->parent_info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string Feature::GetTypeName() const {
  return "feedwire.Feature";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::feedwire::Feature*
Arena::CreateMaybeMessage< ::feedwire::Feature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::Feature >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
