// components/mirroring/mojom/session_observer.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../mojo/public/js/bindings.js';


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const SessionErrorSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const SessionError = {
  
  ANSWER_TIME_OUT: 0,
  ANSWER_NOT_OK: 1,
  ANSWER_MISMATCHED_CAST_MODE: 2,
  ANSWER_MISMATCHED_SSRC_LENGTH: 3,
  ANSWER_SELECT_MULTIPLE_AUDIO: 4,
  ANSWER_SELECT_MULTIPLE_VIDEO: 5,
  ANSWER_SELECT_INVALID_INDEX: 6,
  ANSWER_NO_AUDIO_OR_VIDEO: 7,
  AUDIO_CAPTURE_ERROR: 8,
  VIDEO_CAPTURE_ERROR: 9,
  RTP_STREAM_ERROR: 10,
  ENCODING_ERROR: 11,
  CAST_TRANSPORT_ERROR: 12,
  MIN_VALUE: 0,
  MAX_VALUE: 12,
};



/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class SessionObserverPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'mirroring.mojom.SessionObserver', scope);
  }
}

/** @interface */
export class SessionObserverInterface {
  
  /**
   * @param { !SessionError } error
   */

  onError(error) {}
  
  /**
   */

  didStart() {}
  
  /**
   */

  didStop() {}
  
  /**
   * @param { !string } message
   */

  logInfoMessage(message) {}
  
  /**
   * @param { !string } message
   */

  logErrorMessage(message) {}
}

/**
 * @implements { SessionObserverInterface }
 */
export class SessionObserverRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!SessionObserverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          SessionObserverPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!SessionObserverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !SessionError } error
   */

  onError(
      error) {
    this.proxy.sendMessage(
        0,
        SessionObserver_OnError_ParamsSpec.$,
        null,
        [
          error
        ]);
  }

  
  /**
   */

  didStart() {
    this.proxy.sendMessage(
        1,
        SessionObserver_DidStart_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  didStop() {
    this.proxy.sendMessage(
        2,
        SessionObserver_DidStop_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @param { !string } message
   */

  logInfoMessage(
      message) {
    this.proxy.sendMessage(
        3,
        SessionObserver_LogInfoMessage_ParamsSpec.$,
        null,
        [
          message
        ]);
  }

  
  /**
   * @param { !string } message
   */

  logErrorMessage(
      message) {
    this.proxy.sendMessage(
        4,
        SessionObserver_LogErrorMessage_ParamsSpec.$,
        null,
        [
          message
        ]);
  }
}

/**
 * An object which receives request messages for the SessionObserver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class SessionObserverReceiver {
  /**
   * @param {!SessionObserverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!SessionObserverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        SessionObserverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!SessionObserverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        SessionObserver_OnError_ParamsSpec.$,
        null,
        impl.onError.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        SessionObserver_DidStart_ParamsSpec.$,
        null,
        impl.didStart.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        SessionObserver_DidStop_ParamsSpec.$,
        null,
        impl.didStop.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        SessionObserver_LogInfoMessage_ParamsSpec.$,
        null,
        impl.logInfoMessage.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        SessionObserver_LogErrorMessage_ParamsSpec.$,
        null,
        impl.logErrorMessage.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class SessionObserver {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mirroring.mojom.SessionObserver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!SessionObserverRemote}
   */
  static getRemote() {
    let remote = new SessionObserverRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the SessionObserver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class SessionObserverCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      SessionObserverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!SessionObserverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onError =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        SessionObserver_OnError_ParamsSpec.$,
        null,
        this.onError.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.didStart =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        SessionObserver_DidStart_ParamsSpec.$,
        null,
        this.didStart.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.didStop =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        SessionObserver_DidStop_ParamsSpec.$,
        null,
        this.didStop.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.logInfoMessage =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        SessionObserver_LogInfoMessage_ParamsSpec.$,
        null,
        this.logInfoMessage.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.logErrorMessage =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        SessionObserver_LogErrorMessage_ParamsSpec.$,
        null,
        this.logErrorMessage.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SessionObserver_OnError_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SessionObserver_DidStart_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SessionObserver_DidStop_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SessionObserver_LogInfoMessage_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const SessionObserver_LogErrorMessage_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    SessionObserver_OnError_ParamsSpec.$,
    'SessionObserver_OnError_Params',
    [
      mojo.internal.StructField(
        'error', 0,
        0,
        SessionErrorSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class SessionObserver_OnError_Params {
  constructor() {
    /** @type { !SessionError } */
    this.error;
  }
}



mojo.internal.Struct(
    SessionObserver_DidStart_ParamsSpec.$,
    'SessionObserver_DidStart_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class SessionObserver_DidStart_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    SessionObserver_DidStop_ParamsSpec.$,
    'SessionObserver_DidStop_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class SessionObserver_DidStop_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    SessionObserver_LogInfoMessage_ParamsSpec.$,
    'SessionObserver_LogInfoMessage_Params',
    [
      mojo.internal.StructField(
        'message', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class SessionObserver_LogInfoMessage_Params {
  constructor() {
    /** @type { !string } */
    this.message;
  }
}



mojo.internal.Struct(
    SessionObserver_LogErrorMessage_ParamsSpec.$,
    'SessionObserver_LogErrorMessage_Params',
    [
      mojo.internal.StructField(
        'message', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class SessionObserver_LogErrorMessage_Params {
  constructor() {
    /** @type { !string } */
    this.message;
  }
}

