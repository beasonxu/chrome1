// components/mirroring/mojom/resource_provider.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_MIRRORING_MOJOM_RESOURCE_PROVIDER_MOJOM_TEST_UTILS_H_
#define COMPONENTS_MIRRORING_MOJOM_RESOURCE_PROVIDER_MOJOM_TEST_UTILS_H_

#include "components/mirroring/mojom/resource_provider.mojom.h"


namespace mirroring {
namespace mojom {


class  AudioStreamCreatorClientInterceptorForTesting : public AudioStreamCreatorClient {
  virtual AudioStreamCreatorClient* GetForwardingInterface() = 0;
  void StreamCreated(::mojo::PendingRemote<::media::mojom::AudioInputStream> stream, ::mojo::PendingReceiver<::media::mojom::AudioInputStreamClient> client_receiver, ::media::mojom::ReadOnlyAudioDataPipePtr data_pipe) override;
};
class  AudioStreamCreatorClientAsyncWaiter {
 public:
  explicit AudioStreamCreatorClientAsyncWaiter(AudioStreamCreatorClient* proxy);

  AudioStreamCreatorClientAsyncWaiter(const AudioStreamCreatorClientAsyncWaiter&) = delete;
  AudioStreamCreatorClientAsyncWaiter& operator=(const AudioStreamCreatorClientAsyncWaiter&) = delete;

  ~AudioStreamCreatorClientAsyncWaiter();

 private:
  AudioStreamCreatorClient* const proxy_;
};


class  ResourceProviderInterceptorForTesting : public ResourceProvider {
  virtual ResourceProvider* GetForwardingInterface() = 0;
  void BindGpu(::mojo::PendingReceiver<::viz::mojom::Gpu> receiver) override;
  void GetVideoCaptureHost(::mojo::PendingReceiver<::media::mojom::VideoCaptureHost> receiver) override;
  void GetNetworkContext(::mojo::PendingReceiver<::network::mojom::NetworkContext> receiver) override;
  void CreateAudioStream(::mojo::PendingRemote<AudioStreamCreatorClient> client, const ::media::AudioParameters& param, uint32_t shared_memory_count) override;
  void ConnectToRemotingSource(::mojo::PendingRemote<::media::mojom::Remoter> remoter, ::mojo::PendingReceiver<::media::mojom::RemotingSource> receiver) override;
};
class  ResourceProviderAsyncWaiter {
 public:
  explicit ResourceProviderAsyncWaiter(ResourceProvider* proxy);

  ResourceProviderAsyncWaiter(const ResourceProviderAsyncWaiter&) = delete;
  ResourceProviderAsyncWaiter& operator=(const ResourceProviderAsyncWaiter&) = delete;

  ~ResourceProviderAsyncWaiter();

 private:
  ResourceProvider* const proxy_;
};




}  // namespace mojom
}  // namespace mirroring

#endif  // COMPONENTS_MIRRORING_MOJOM_RESOURCE_PROVIDER_MOJOM_TEST_UTILS_H_