// SharedStorageDocumentService_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/shared_storage/shared_storage.mojom
//

package org.chromium.blink.mojom;

import androidx.annotation.IntDef;


class SharedStorageDocumentService_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<SharedStorageDocumentService, SharedStorageDocumentService.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<SharedStorageDocumentService, SharedStorageDocumentService.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.SharedStorageDocumentService";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, SharedStorageDocumentService impl) {
            return new Stub(core, impl);
        }

        @Override
        public SharedStorageDocumentService[] buildArray(int size) {
          return new SharedStorageDocumentService[size];
        }
    };


    private static final int ADD_MODULE_ON_WORKLET_ORDINAL = 0;

    private static final int RUN_OPERATION_ON_WORKLET_ORDINAL = 1;

    private static final int RUN_URL_SELECTION_OPERATION_ON_WORKLET_ORDINAL = 2;

    private static final int SHARED_STORAGE_SET_ORDINAL = 3;

    private static final int SHARED_STORAGE_APPEND_ORDINAL = 4;

    private static final int SHARED_STORAGE_DELETE_ORDINAL = 5;

    private static final int SHARED_STORAGE_CLEAR_ORDINAL = 6;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements SharedStorageDocumentService.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void addModuleOnWorklet(
org.chromium.url.mojom.Url scriptSourceUrl, 
AddModuleOnWorklet_Response callback) {

            SharedStorageDocumentServiceAddModuleOnWorkletParams _message = new SharedStorageDocumentServiceAddModuleOnWorkletParams();

            _message.scriptSourceUrl = scriptSourceUrl;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ADD_MODULE_ON_WORKLET_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new SharedStorageDocumentServiceAddModuleOnWorkletResponseParamsForwardToCallback(callback));

        }


        @Override
        public void runOperationOnWorklet(
String name, byte[] serializedData, 
RunOperationOnWorklet_Response callback) {

            SharedStorageDocumentServiceRunOperationOnWorkletParams _message = new SharedStorageDocumentServiceRunOperationOnWorkletParams();

            _message.name = name;

            _message.serializedData = serializedData;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_OPERATION_ON_WORKLET_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new SharedStorageDocumentServiceRunOperationOnWorkletResponseParamsForwardToCallback(callback));

        }


        @Override
        public void runUrlSelectionOperationOnWorklet(
String name, SharedStorageUrlWithMetadata[] urlsWithMetadata, byte[] serializedData, 
RunUrlSelectionOperationOnWorklet_Response callback) {

            SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletParams _message = new SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletParams();

            _message.name = name;

            _message.urlsWithMetadata = urlsWithMetadata;

            _message.serializedData = serializedData;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_URL_SELECTION_OPERATION_ON_WORKLET_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletResponseParamsForwardToCallback(callback));

        }


        @Override
        public void sharedStorageSet(
SharedStorageKeyArgument key, SharedStorageValueArgument value, boolean ignoreIfPresent, 
SharedStorageSet_Response callback) {

            SharedStorageDocumentServiceSharedStorageSetParams _message = new SharedStorageDocumentServiceSharedStorageSetParams();

            _message.key = key;

            _message.value = value;

            _message.ignoreIfPresent = ignoreIfPresent;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SHARED_STORAGE_SET_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new SharedStorageDocumentServiceSharedStorageSetResponseParamsForwardToCallback(callback));

        }


        @Override
        public void sharedStorageAppend(
SharedStorageKeyArgument key, SharedStorageValueArgument value, 
SharedStorageAppend_Response callback) {

            SharedStorageDocumentServiceSharedStorageAppendParams _message = new SharedStorageDocumentServiceSharedStorageAppendParams();

            _message.key = key;

            _message.value = value;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SHARED_STORAGE_APPEND_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new SharedStorageDocumentServiceSharedStorageAppendResponseParamsForwardToCallback(callback));

        }


        @Override
        public void sharedStorageDelete(
SharedStorageKeyArgument key, 
SharedStorageDelete_Response callback) {

            SharedStorageDocumentServiceSharedStorageDeleteParams _message = new SharedStorageDocumentServiceSharedStorageDeleteParams();

            _message.key = key;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SHARED_STORAGE_DELETE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new SharedStorageDocumentServiceSharedStorageDeleteResponseParamsForwardToCallback(callback));

        }


        @Override
        public void sharedStorageClear(

SharedStorageClear_Response callback) {

            SharedStorageDocumentServiceSharedStorageClearParams _message = new SharedStorageDocumentServiceSharedStorageClearParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SHARED_STORAGE_CLEAR_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new SharedStorageDocumentServiceSharedStorageClearResponseParamsForwardToCallback(callback));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<SharedStorageDocumentService> {

        Stub(org.chromium.mojo.system.Core core, SharedStorageDocumentService impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                SharedStorageDocumentService_Internal.MANAGER, messageWithHeader);
















                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), SharedStorageDocumentService_Internal.MANAGER, messageWithHeader, receiver);







                    case ADD_MODULE_ON_WORKLET_ORDINAL: {

                        SharedStorageDocumentServiceAddModuleOnWorkletParams data =
                                SharedStorageDocumentServiceAddModuleOnWorkletParams.deserialize(messageWithHeader.getPayload());

                        getImpl().addModuleOnWorklet(data.scriptSourceUrl, new SharedStorageDocumentServiceAddModuleOnWorkletResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case RUN_OPERATION_ON_WORKLET_ORDINAL: {

                        SharedStorageDocumentServiceRunOperationOnWorkletParams data =
                                SharedStorageDocumentServiceRunOperationOnWorkletParams.deserialize(messageWithHeader.getPayload());

                        getImpl().runOperationOnWorklet(data.name, data.serializedData, new SharedStorageDocumentServiceRunOperationOnWorkletResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case RUN_URL_SELECTION_OPERATION_ON_WORKLET_ORDINAL: {

                        SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletParams data =
                                SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletParams.deserialize(messageWithHeader.getPayload());

                        getImpl().runUrlSelectionOperationOnWorklet(data.name, data.urlsWithMetadata, data.serializedData, new SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case SHARED_STORAGE_SET_ORDINAL: {

                        SharedStorageDocumentServiceSharedStorageSetParams data =
                                SharedStorageDocumentServiceSharedStorageSetParams.deserialize(messageWithHeader.getPayload());

                        getImpl().sharedStorageSet(data.key, data.value, data.ignoreIfPresent, new SharedStorageDocumentServiceSharedStorageSetResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case SHARED_STORAGE_APPEND_ORDINAL: {

                        SharedStorageDocumentServiceSharedStorageAppendParams data =
                                SharedStorageDocumentServiceSharedStorageAppendParams.deserialize(messageWithHeader.getPayload());

                        getImpl().sharedStorageAppend(data.key, data.value, new SharedStorageDocumentServiceSharedStorageAppendResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case SHARED_STORAGE_DELETE_ORDINAL: {

                        SharedStorageDocumentServiceSharedStorageDeleteParams data =
                                SharedStorageDocumentServiceSharedStorageDeleteParams.deserialize(messageWithHeader.getPayload());

                        getImpl().sharedStorageDelete(data.key, new SharedStorageDocumentServiceSharedStorageDeleteResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case SHARED_STORAGE_CLEAR_ORDINAL: {

                        SharedStorageDocumentServiceSharedStorageClearParams.deserialize(messageWithHeader.getPayload());

                        getImpl().sharedStorageClear(new SharedStorageDocumentServiceSharedStorageClearResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class SharedStorageDocumentServiceAddModuleOnWorkletParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url scriptSourceUrl;

        private SharedStorageDocumentServiceAddModuleOnWorkletParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SharedStorageDocumentServiceAddModuleOnWorkletParams() {
            this(0);
        }

        public static SharedStorageDocumentServiceAddModuleOnWorkletParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SharedStorageDocumentServiceAddModuleOnWorkletParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SharedStorageDocumentServiceAddModuleOnWorkletParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SharedStorageDocumentServiceAddModuleOnWorkletParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SharedStorageDocumentServiceAddModuleOnWorkletParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.scriptSourceUrl = org.chromium.url.mojom.Url.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.scriptSourceUrl, 8, false);
        }
    }



    
    static final class SharedStorageDocumentServiceAddModuleOnWorkletResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;
        public String errorMessage;

        private SharedStorageDocumentServiceAddModuleOnWorkletResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SharedStorageDocumentServiceAddModuleOnWorkletResponseParams() {
            this(0);
        }

        public static SharedStorageDocumentServiceAddModuleOnWorkletResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SharedStorageDocumentServiceAddModuleOnWorkletResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SharedStorageDocumentServiceAddModuleOnWorkletResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SharedStorageDocumentServiceAddModuleOnWorkletResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SharedStorageDocumentServiceAddModuleOnWorkletResponseParams(elementsOrVersion);
                    {
                        
                    result.success = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.errorMessage = decoder0.readString(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.success, 8, 0);
            
            encoder0.encode(this.errorMessage, 16, false);
        }
    }

    static class SharedStorageDocumentServiceAddModuleOnWorkletResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final SharedStorageDocumentService.AddModuleOnWorklet_Response mCallback;

        SharedStorageDocumentServiceAddModuleOnWorkletResponseParamsForwardToCallback(SharedStorageDocumentService.AddModuleOnWorklet_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ADD_MODULE_ON_WORKLET_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                SharedStorageDocumentServiceAddModuleOnWorkletResponseParams response = SharedStorageDocumentServiceAddModuleOnWorkletResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.success, response.errorMessage);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class SharedStorageDocumentServiceAddModuleOnWorkletResponseParamsProxyToResponder implements SharedStorageDocumentService.AddModuleOnWorklet_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        SharedStorageDocumentServiceAddModuleOnWorkletResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean success, String errorMessage) {
            SharedStorageDocumentServiceAddModuleOnWorkletResponseParams _response = new SharedStorageDocumentServiceAddModuleOnWorkletResponseParams();

            _response.success = success;

            _response.errorMessage = errorMessage;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ADD_MODULE_ON_WORKLET_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class SharedStorageDocumentServiceRunOperationOnWorkletParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String name;
        public byte[] serializedData;

        private SharedStorageDocumentServiceRunOperationOnWorkletParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SharedStorageDocumentServiceRunOperationOnWorkletParams() {
            this(0);
        }

        public static SharedStorageDocumentServiceRunOperationOnWorkletParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SharedStorageDocumentServiceRunOperationOnWorkletParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SharedStorageDocumentServiceRunOperationOnWorkletParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SharedStorageDocumentServiceRunOperationOnWorkletParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SharedStorageDocumentServiceRunOperationOnWorkletParams(elementsOrVersion);
                    {
                        
                    result.name = decoder0.readString(8, false);
                    }
                    {
                        
                    result.serializedData = decoder0.readBytes(16, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.name, 8, false);
            
            encoder0.encode(this.serializedData, 16, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }
    }



    
    static final class SharedStorageDocumentServiceRunOperationOnWorkletResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;
        public String errorMessage;

        private SharedStorageDocumentServiceRunOperationOnWorkletResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SharedStorageDocumentServiceRunOperationOnWorkletResponseParams() {
            this(0);
        }

        public static SharedStorageDocumentServiceRunOperationOnWorkletResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SharedStorageDocumentServiceRunOperationOnWorkletResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SharedStorageDocumentServiceRunOperationOnWorkletResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SharedStorageDocumentServiceRunOperationOnWorkletResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SharedStorageDocumentServiceRunOperationOnWorkletResponseParams(elementsOrVersion);
                    {
                        
                    result.success = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.errorMessage = decoder0.readString(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.success, 8, 0);
            
            encoder0.encode(this.errorMessage, 16, false);
        }
    }

    static class SharedStorageDocumentServiceRunOperationOnWorkletResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final SharedStorageDocumentService.RunOperationOnWorklet_Response mCallback;

        SharedStorageDocumentServiceRunOperationOnWorkletResponseParamsForwardToCallback(SharedStorageDocumentService.RunOperationOnWorklet_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(RUN_OPERATION_ON_WORKLET_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                SharedStorageDocumentServiceRunOperationOnWorkletResponseParams response = SharedStorageDocumentServiceRunOperationOnWorkletResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.success, response.errorMessage);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class SharedStorageDocumentServiceRunOperationOnWorkletResponseParamsProxyToResponder implements SharedStorageDocumentService.RunOperationOnWorklet_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        SharedStorageDocumentServiceRunOperationOnWorkletResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean success, String errorMessage) {
            SharedStorageDocumentServiceRunOperationOnWorkletResponseParams _response = new SharedStorageDocumentServiceRunOperationOnWorkletResponseParams();

            _response.success = success;

            _response.errorMessage = errorMessage;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_OPERATION_ON_WORKLET_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String name;
        public SharedStorageUrlWithMetadata[] urlsWithMetadata;
        public byte[] serializedData;

        private SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletParams() {
            this(0);
        }

        public static SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletParams(elementsOrVersion);
                    {
                        
                    result.name = decoder0.readString(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.urlsWithMetadata = new SharedStorageUrlWithMetadata[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.urlsWithMetadata[i1] = SharedStorageUrlWithMetadata.decode(decoder2);
                        }
                    }
                    }
                    {
                        
                    result.serializedData = decoder0.readBytes(24, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.name, 8, false);
            
            if (this.urlsWithMetadata == null) {
                encoder0.encodeNullPointer(16, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.urlsWithMetadata.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.urlsWithMetadata.length; ++i0) {
                    
                    encoder1.encode(this.urlsWithMetadata[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
            
            encoder0.encode(this.serializedData, 24, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }
    }



    
    static final class SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;
        public String errorMessage;
        public org.chromium.url.mojom.Url opaqueUrl;

        private SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletResponseParams() {
            this(0);
        }

        public static SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletResponseParams(elementsOrVersion);
                    {
                        
                    result.success = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.errorMessage = decoder0.readString(16, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.opaqueUrl = org.chromium.url.mojom.Url.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.success, 8, 0);
            
            encoder0.encode(this.errorMessage, 16, false);
            
            encoder0.encode(this.opaqueUrl, 24, false);
        }
    }

    static class SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final SharedStorageDocumentService.RunUrlSelectionOperationOnWorklet_Response mCallback;

        SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletResponseParamsForwardToCallback(SharedStorageDocumentService.RunUrlSelectionOperationOnWorklet_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(RUN_URL_SELECTION_OPERATION_ON_WORKLET_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletResponseParams response = SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.success, response.errorMessage, response.opaqueUrl);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletResponseParamsProxyToResponder implements SharedStorageDocumentService.RunUrlSelectionOperationOnWorklet_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean success, String errorMessage, org.chromium.url.mojom.Url opaqueUrl) {
            SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletResponseParams _response = new SharedStorageDocumentServiceRunUrlSelectionOperationOnWorkletResponseParams();

            _response.success = success;

            _response.errorMessage = errorMessage;

            _response.opaqueUrl = opaqueUrl;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_URL_SELECTION_OPERATION_ON_WORKLET_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class SharedStorageDocumentServiceSharedStorageSetParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public SharedStorageKeyArgument key;
        public SharedStorageValueArgument value;
        public boolean ignoreIfPresent;

        private SharedStorageDocumentServiceSharedStorageSetParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SharedStorageDocumentServiceSharedStorageSetParams() {
            this(0);
        }

        public static SharedStorageDocumentServiceSharedStorageSetParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SharedStorageDocumentServiceSharedStorageSetParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SharedStorageDocumentServiceSharedStorageSetParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SharedStorageDocumentServiceSharedStorageSetParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SharedStorageDocumentServiceSharedStorageSetParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.key = SharedStorageKeyArgument.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.value = SharedStorageValueArgument.decode(decoder1);
                    }
                    {
                        
                    result.ignoreIfPresent = decoder0.readBoolean(24, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.key, 8, false);
            
            encoder0.encode(this.value, 16, false);
            
            encoder0.encode(this.ignoreIfPresent, 24, 0);
        }
    }



    
    static final class SharedStorageDocumentServiceSharedStorageSetResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;
        public String errorMessage;

        private SharedStorageDocumentServiceSharedStorageSetResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SharedStorageDocumentServiceSharedStorageSetResponseParams() {
            this(0);
        }

        public static SharedStorageDocumentServiceSharedStorageSetResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SharedStorageDocumentServiceSharedStorageSetResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SharedStorageDocumentServiceSharedStorageSetResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SharedStorageDocumentServiceSharedStorageSetResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SharedStorageDocumentServiceSharedStorageSetResponseParams(elementsOrVersion);
                    {
                        
                    result.success = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.errorMessage = decoder0.readString(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.success, 8, 0);
            
            encoder0.encode(this.errorMessage, 16, false);
        }
    }

    static class SharedStorageDocumentServiceSharedStorageSetResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final SharedStorageDocumentService.SharedStorageSet_Response mCallback;

        SharedStorageDocumentServiceSharedStorageSetResponseParamsForwardToCallback(SharedStorageDocumentService.SharedStorageSet_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(SHARED_STORAGE_SET_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                SharedStorageDocumentServiceSharedStorageSetResponseParams response = SharedStorageDocumentServiceSharedStorageSetResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.success, response.errorMessage);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class SharedStorageDocumentServiceSharedStorageSetResponseParamsProxyToResponder implements SharedStorageDocumentService.SharedStorageSet_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        SharedStorageDocumentServiceSharedStorageSetResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean success, String errorMessage) {
            SharedStorageDocumentServiceSharedStorageSetResponseParams _response = new SharedStorageDocumentServiceSharedStorageSetResponseParams();

            _response.success = success;

            _response.errorMessage = errorMessage;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SHARED_STORAGE_SET_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class SharedStorageDocumentServiceSharedStorageAppendParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public SharedStorageKeyArgument key;
        public SharedStorageValueArgument value;

        private SharedStorageDocumentServiceSharedStorageAppendParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SharedStorageDocumentServiceSharedStorageAppendParams() {
            this(0);
        }

        public static SharedStorageDocumentServiceSharedStorageAppendParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SharedStorageDocumentServiceSharedStorageAppendParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SharedStorageDocumentServiceSharedStorageAppendParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SharedStorageDocumentServiceSharedStorageAppendParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SharedStorageDocumentServiceSharedStorageAppendParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.key = SharedStorageKeyArgument.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.value = SharedStorageValueArgument.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.key, 8, false);
            
            encoder0.encode(this.value, 16, false);
        }
    }



    
    static final class SharedStorageDocumentServiceSharedStorageAppendResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;
        public String errorMessage;

        private SharedStorageDocumentServiceSharedStorageAppendResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SharedStorageDocumentServiceSharedStorageAppendResponseParams() {
            this(0);
        }

        public static SharedStorageDocumentServiceSharedStorageAppendResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SharedStorageDocumentServiceSharedStorageAppendResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SharedStorageDocumentServiceSharedStorageAppendResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SharedStorageDocumentServiceSharedStorageAppendResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SharedStorageDocumentServiceSharedStorageAppendResponseParams(elementsOrVersion);
                    {
                        
                    result.success = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.errorMessage = decoder0.readString(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.success, 8, 0);
            
            encoder0.encode(this.errorMessage, 16, false);
        }
    }

    static class SharedStorageDocumentServiceSharedStorageAppendResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final SharedStorageDocumentService.SharedStorageAppend_Response mCallback;

        SharedStorageDocumentServiceSharedStorageAppendResponseParamsForwardToCallback(SharedStorageDocumentService.SharedStorageAppend_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(SHARED_STORAGE_APPEND_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                SharedStorageDocumentServiceSharedStorageAppendResponseParams response = SharedStorageDocumentServiceSharedStorageAppendResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.success, response.errorMessage);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class SharedStorageDocumentServiceSharedStorageAppendResponseParamsProxyToResponder implements SharedStorageDocumentService.SharedStorageAppend_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        SharedStorageDocumentServiceSharedStorageAppendResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean success, String errorMessage) {
            SharedStorageDocumentServiceSharedStorageAppendResponseParams _response = new SharedStorageDocumentServiceSharedStorageAppendResponseParams();

            _response.success = success;

            _response.errorMessage = errorMessage;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SHARED_STORAGE_APPEND_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class SharedStorageDocumentServiceSharedStorageDeleteParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public SharedStorageKeyArgument key;

        private SharedStorageDocumentServiceSharedStorageDeleteParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SharedStorageDocumentServiceSharedStorageDeleteParams() {
            this(0);
        }

        public static SharedStorageDocumentServiceSharedStorageDeleteParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SharedStorageDocumentServiceSharedStorageDeleteParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SharedStorageDocumentServiceSharedStorageDeleteParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SharedStorageDocumentServiceSharedStorageDeleteParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SharedStorageDocumentServiceSharedStorageDeleteParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.key = SharedStorageKeyArgument.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.key, 8, false);
        }
    }



    
    static final class SharedStorageDocumentServiceSharedStorageDeleteResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;
        public String errorMessage;

        private SharedStorageDocumentServiceSharedStorageDeleteResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SharedStorageDocumentServiceSharedStorageDeleteResponseParams() {
            this(0);
        }

        public static SharedStorageDocumentServiceSharedStorageDeleteResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SharedStorageDocumentServiceSharedStorageDeleteResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SharedStorageDocumentServiceSharedStorageDeleteResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SharedStorageDocumentServiceSharedStorageDeleteResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SharedStorageDocumentServiceSharedStorageDeleteResponseParams(elementsOrVersion);
                    {
                        
                    result.success = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.errorMessage = decoder0.readString(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.success, 8, 0);
            
            encoder0.encode(this.errorMessage, 16, false);
        }
    }

    static class SharedStorageDocumentServiceSharedStorageDeleteResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final SharedStorageDocumentService.SharedStorageDelete_Response mCallback;

        SharedStorageDocumentServiceSharedStorageDeleteResponseParamsForwardToCallback(SharedStorageDocumentService.SharedStorageDelete_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(SHARED_STORAGE_DELETE_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                SharedStorageDocumentServiceSharedStorageDeleteResponseParams response = SharedStorageDocumentServiceSharedStorageDeleteResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.success, response.errorMessage);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class SharedStorageDocumentServiceSharedStorageDeleteResponseParamsProxyToResponder implements SharedStorageDocumentService.SharedStorageDelete_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        SharedStorageDocumentServiceSharedStorageDeleteResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean success, String errorMessage) {
            SharedStorageDocumentServiceSharedStorageDeleteResponseParams _response = new SharedStorageDocumentServiceSharedStorageDeleteResponseParams();

            _response.success = success;

            _response.errorMessage = errorMessage;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SHARED_STORAGE_DELETE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class SharedStorageDocumentServiceSharedStorageClearParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private SharedStorageDocumentServiceSharedStorageClearParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SharedStorageDocumentServiceSharedStorageClearParams() {
            this(0);
        }

        public static SharedStorageDocumentServiceSharedStorageClearParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SharedStorageDocumentServiceSharedStorageClearParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SharedStorageDocumentServiceSharedStorageClearParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SharedStorageDocumentServiceSharedStorageClearParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SharedStorageDocumentServiceSharedStorageClearParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class SharedStorageDocumentServiceSharedStorageClearResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;
        public String errorMessage;

        private SharedStorageDocumentServiceSharedStorageClearResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SharedStorageDocumentServiceSharedStorageClearResponseParams() {
            this(0);
        }

        public static SharedStorageDocumentServiceSharedStorageClearResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SharedStorageDocumentServiceSharedStorageClearResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SharedStorageDocumentServiceSharedStorageClearResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SharedStorageDocumentServiceSharedStorageClearResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SharedStorageDocumentServiceSharedStorageClearResponseParams(elementsOrVersion);
                    {
                        
                    result.success = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.errorMessage = decoder0.readString(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.success, 8, 0);
            
            encoder0.encode(this.errorMessage, 16, false);
        }
    }

    static class SharedStorageDocumentServiceSharedStorageClearResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final SharedStorageDocumentService.SharedStorageClear_Response mCallback;

        SharedStorageDocumentServiceSharedStorageClearResponseParamsForwardToCallback(SharedStorageDocumentService.SharedStorageClear_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(SHARED_STORAGE_CLEAR_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                SharedStorageDocumentServiceSharedStorageClearResponseParams response = SharedStorageDocumentServiceSharedStorageClearResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.success, response.errorMessage);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class SharedStorageDocumentServiceSharedStorageClearResponseParamsProxyToResponder implements SharedStorageDocumentService.SharedStorageClear_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        SharedStorageDocumentServiceSharedStorageClearResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean success, String errorMessage) {
            SharedStorageDocumentServiceSharedStorageClearResponseParams _response = new SharedStorageDocumentServiceSharedStorageClearResponseParams();

            _response.success = success;

            _response.errorMessage = errorMessage;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SHARED_STORAGE_CLEAR_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



}
