// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/bookmark_model_metadata.proto

package org.chromium.components.sync.protocol;

public interface BookmarkModelMetadataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:sync_pb.BookmarkModelMetadata)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * Bookmark global metadata.
   * </pre>
   *
   * <code>optional .sync_pb.ModelTypeState model_type_state = 1;</code>
   * @return Whether the modelTypeState field is set.
   */
  boolean hasModelTypeState();
  /**
   * <pre>
   * Bookmark global metadata.
   * </pre>
   *
   * <code>optional .sync_pb.ModelTypeState model_type_state = 1;</code>
   * @return The modelTypeState.
   */
  org.chromium.components.sync.protocol.ModelTypeState getModelTypeState();

  /**
   * <pre>
   * A set of all bookmarks metadata.
   * </pre>
   *
   * <code>repeated .sync_pb.BookmarkMetadata bookmarks_metadata = 2;</code>
   */
  java.util.List<org.chromium.components.sync.protocol.BookmarkMetadata> 
      getBookmarksMetadataList();
  /**
   * <pre>
   * A set of all bookmarks metadata.
   * </pre>
   *
   * <code>repeated .sync_pb.BookmarkMetadata bookmarks_metadata = 2;</code>
   */
  org.chromium.components.sync.protocol.BookmarkMetadata getBookmarksMetadata(int index);
  /**
   * <pre>
   * A set of all bookmarks metadata.
   * </pre>
   *
   * <code>repeated .sync_pb.BookmarkMetadata bookmarks_metadata = 2;</code>
   */
  int getBookmarksMetadataCount();

  /**
   * <pre>
   * Indicates whether the reupload of bookmarks has been triggered such that
   * they include fields like |type|, |unique_position| and |parent_guid|, which
   * means that their sequence number has been increased (independently of
   * whether the commit has succeeded or even started).
   * TODO(crbug.com/1232951): remove this code when most of bookmarks are
   * reuploaded.
   * </pre>
   *
   * <code>optional bool bookmarks_hierarchy_fields_reuploaded = 6;</code>
   * @return Whether the bookmarksHierarchyFieldsReuploaded field is set.
   */
  boolean hasBookmarksHierarchyFieldsReuploaded();
  /**
   * <pre>
   * Indicates whether the reupload of bookmarks has been triggered such that
   * they include fields like |type|, |unique_position| and |parent_guid|, which
   * means that their sequence number has been increased (independently of
   * whether the commit has succeeded or even started).
   * TODO(crbug.com/1232951): remove this code when most of bookmarks are
   * reuploaded.
   * </pre>
   *
   * <code>optional bool bookmarks_hierarchy_fields_reuploaded = 6;</code>
   * @return The bookmarksHierarchyFieldsReuploaded.
   */
  boolean getBookmarksHierarchyFieldsReuploaded();

  /**
   * <pre>
   * Number of remote updates that were ignored because the parent folder could
   * not be determined since sync (bookmark sync) started (since initial sync,
   * including initial sync itself). Note that this excludes updates
   * representing changes (moves) to existing/tracked bookmarks (i.e. the parent
   * folder used to be known, but the new one specified in the update isn't).
   * Only a minority of users should have a non-zero value, due to a) corrupt
   * data, reasons unknown; or b) permanent folders that were unsupported at the
   * time the update was received (either for the permanent folder itself or for
   * descendants). The absence of this field should be interpreted as 'unknown',
   * which roughly means the counter wasn't supported by the browser -M77 or
   * below- at the time sync was enabled (it also means, it will remain
   * 'unknown' until initial sync is exercised, e.g. sync disabled and
   * reenabled).
   * </pre>
   *
   * <code>optional int64 num_ignored_updates_due_to_missing_parent = 7;</code>
   * @return Whether the numIgnoredUpdatesDueToMissingParent field is set.
   */
  boolean hasNumIgnoredUpdatesDueToMissingParent();
  /**
   * <pre>
   * Number of remote updates that were ignored because the parent folder could
   * not be determined since sync (bookmark sync) started (since initial sync,
   * including initial sync itself). Note that this excludes updates
   * representing changes (moves) to existing/tracked bookmarks (i.e. the parent
   * folder used to be known, but the new one specified in the update isn't).
   * Only a minority of users should have a non-zero value, due to a) corrupt
   * data, reasons unknown; or b) permanent folders that were unsupported at the
   * time the update was received (either for the permanent folder itself or for
   * descendants). The absence of this field should be interpreted as 'unknown',
   * which roughly means the counter wasn't supported by the browser -M77 or
   * below- at the time sync was enabled (it also means, it will remain
   * 'unknown' until initial sync is exercised, e.g. sync disabled and
   * reenabled).
   * </pre>
   *
   * <code>optional int64 num_ignored_updates_due_to_missing_parent = 7;</code>
   * @return The numIgnoredUpdatesDueToMissingParent.
   */
  long getNumIgnoredUpdatesDueToMissingParent();

  /**
   * <pre>
   * See field above. Among such ignored updates, this field tracks which was
   * the highest server version. This may be useful -in the future- to get a
   * sense of "time" (or, since versions are opaque to the client, at least a
   * notion of ordering with respect to other updates). The absence of this
   * field should be interpreted as 'unknown' and does not distinguish the
   * case between a) no updates ignored; and b) field wasn't supported at the
   * time the last update was ignored. To distinguish between these two, the
   * field above can be used.
   * </pre>
   *
   * <code>optional int64 max_version_among_ignored_updates_due_to_missing_parent = 8;</code>
   * @return Whether the maxVersionAmongIgnoredUpdatesDueToMissingParent field is set.
   */
  boolean hasMaxVersionAmongIgnoredUpdatesDueToMissingParent();
  /**
   * <pre>
   * See field above. Among such ignored updates, this field tracks which was
   * the highest server version. This may be useful -in the future- to get a
   * sense of "time" (or, since versions are opaque to the client, at least a
   * notion of ordering with respect to other updates). The absence of this
   * field should be interpreted as 'unknown' and does not distinguish the
   * case between a) no updates ignored; and b) field wasn't supported at the
   * time the last update was ignored. To distinguish between these two, the
   * field above can be used.
   * </pre>
   *
   * <code>optional int64 max_version_among_ignored_updates_due_to_missing_parent = 8;</code>
   * @return The maxVersionAmongIgnoredUpdatesDueToMissingParent.
   */
  long getMaxVersionAmongIgnoredUpdatesDueToMissingParent();
}
