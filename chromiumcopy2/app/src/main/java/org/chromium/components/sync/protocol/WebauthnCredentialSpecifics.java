// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/webauthn_credential_specifics.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * WebauthnCredentialSpecifics is an entity that backs a WebAuthn
 * PublicKeyCredential. Since it contains the authenticator’s view of this
 * object, it has a private key rather than a public key.
 * (https://www.w3.org/TR/webauthn-2/#iface-pkcredential).
 * Names of fields are taken from WebAuthn where possible. E.g.
 * user.displayName in WebAuthn becomes user_display_name here.
 * All fields are immutable after creation except for user_display_name, which
 * may be updated by a user.
 * </pre>
 *
 * Protobuf type {@code sync_pb.WebauthnCredentialSpecifics}
 */
public  final class WebauthnCredentialSpecifics extends
    com.google.protobuf.GeneratedMessageLite<
        WebauthnCredentialSpecifics, WebauthnCredentialSpecifics.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.WebauthnCredentialSpecifics)
    WebauthnCredentialSpecificsOrBuilder {
  private WebauthnCredentialSpecifics() {
    syncId_ = com.google.protobuf.ByteString.EMPTY;
    credentialId_ = com.google.protobuf.ByteString.EMPTY;
    rpId_ = "";
    userId_ = com.google.protobuf.ByteString.EMPTY;
    newlyShadowedCredentialIds_ = emptyProtobufList();
    userName_ = "";
    userDisplayName_ = "";
    privateKey_ = com.google.protobuf.ByteString.EMPTY;
  }
  private int bitField0_;
  public static final int SYNC_ID_FIELD_NUMBER = 1;
  private com.google.protobuf.ByteString syncId_;
  /**
   * <pre>
   * Sync's ID for this entity (sometimes called the client unique tag), 16
   * random bytes. This value is used within Sync to identify this entity. The
   * credential ID is not used because the (hashed) sync_id is exposed to the
   * Sync server, and we don’t want Google to be able to map a credential ID to
   * an account. Password entities construct this value from the concatenation
   * of many fields and depend on the fact that the server only sees a hash of
   * it. But the only high-entropy secret here is the private key, which will
   * have different encryption in the future, and private keys are not the sort
   * of data to copy into other fields. Therefore this independent value is
   * provided to form the client's ID.
   * </pre>
   *
   * <code>optional bytes sync_id = 1;</code>
   * @return Whether the syncId field is set.
   */
  @java.lang.Override
  public boolean hasSyncId() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Sync's ID for this entity (sometimes called the client unique tag), 16
   * random bytes. This value is used within Sync to identify this entity. The
   * credential ID is not used because the (hashed) sync_id is exposed to the
   * Sync server, and we don’t want Google to be able to map a credential ID to
   * an account. Password entities construct this value from the concatenation
   * of many fields and depend on the fact that the server only sees a hash of
   * it. But the only high-entropy secret here is the private key, which will
   * have different encryption in the future, and private keys are not the sort
   * of data to copy into other fields. Therefore this independent value is
   * provided to form the client's ID.
   * </pre>
   *
   * <code>optional bytes sync_id = 1;</code>
   * @return The syncId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getSyncId() {
    return syncId_;
  }
  /**
   * <pre>
   * Sync's ID for this entity (sometimes called the client unique tag), 16
   * random bytes. This value is used within Sync to identify this entity. The
   * credential ID is not used because the (hashed) sync_id is exposed to the
   * Sync server, and we don’t want Google to be able to map a credential ID to
   * an account. Password entities construct this value from the concatenation
   * of many fields and depend on the fact that the server only sees a hash of
   * it. But the only high-entropy secret here is the private key, which will
   * have different encryption in the future, and private keys are not the sort
   * of data to copy into other fields. Therefore this independent value is
   * provided to form the client's ID.
   * </pre>
   *
   * <code>optional bytes sync_id = 1;</code>
   * @param value The syncId to set.
   */
  private void setSyncId(com.google.protobuf.ByteString value) {
    value.getClass();
  bitField0_ |= 0x00000001;
    syncId_ = value;
  }
  /**
   * <pre>
   * Sync's ID for this entity (sometimes called the client unique tag), 16
   * random bytes. This value is used within Sync to identify this entity. The
   * credential ID is not used because the (hashed) sync_id is exposed to the
   * Sync server, and we don’t want Google to be able to map a credential ID to
   * an account. Password entities construct this value from the concatenation
   * of many fields and depend on the fact that the server only sees a hash of
   * it. But the only high-entropy secret here is the private key, which will
   * have different encryption in the future, and private keys are not the sort
   * of data to copy into other fields. Therefore this independent value is
   * provided to form the client's ID.
   * </pre>
   *
   * <code>optional bytes sync_id = 1;</code>
   */
  private void clearSyncId() {
    bitField0_ = (bitField0_ & ~0x00000001);
    syncId_ = getDefaultInstance().getSyncId();
  }

  public static final int CREDENTIAL_ID_FIELD_NUMBER = 2;
  private com.google.protobuf.ByteString credentialId_;
  /**
   * <pre>
   * The credential ID, 16 random bytes. This is a value surfaced in
   * the WebAuthn API (https://www.w3.org/TR/webauthn-2/#credential-id).
   * </pre>
   *
   * <code>optional bytes credential_id = 2;</code>
   * @return Whether the credentialId field is set.
   */
  @java.lang.Override
  public boolean hasCredentialId() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The credential ID, 16 random bytes. This is a value surfaced in
   * the WebAuthn API (https://www.w3.org/TR/webauthn-2/#credential-id).
   * </pre>
   *
   * <code>optional bytes credential_id = 2;</code>
   * @return The credentialId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getCredentialId() {
    return credentialId_;
  }
  /**
   * <pre>
   * The credential ID, 16 random bytes. This is a value surfaced in
   * the WebAuthn API (https://www.w3.org/TR/webauthn-2/#credential-id).
   * </pre>
   *
   * <code>optional bytes credential_id = 2;</code>
   * @param value The credentialId to set.
   */
  private void setCredentialId(com.google.protobuf.ByteString value) {
    value.getClass();
  bitField0_ |= 0x00000002;
    credentialId_ = value;
  }
  /**
   * <pre>
   * The credential ID, 16 random bytes. This is a value surfaced in
   * the WebAuthn API (https://www.w3.org/TR/webauthn-2/#credential-id).
   * </pre>
   *
   * <code>optional bytes credential_id = 2;</code>
   */
  private void clearCredentialId() {
    bitField0_ = (bitField0_ & ~0x00000002);
    credentialId_ = getDefaultInstance().getCredentialId();
  }

  public static final int RP_ID_FIELD_NUMBER = 3;
  private java.lang.String rpId_;
  /**
   * <pre>
   * An RP ID is a WebAuthn concept:
   * https://www.w3.org/TR/webauthn-2/#rp-id. It’s usually a domain name,
   * although in non-Web contexts it can be a URL with a non-Web scheme.
   * </pre>
   *
   * <code>optional string rp_id = 3;</code>
   * @return Whether the rpId field is set.
   */
  @java.lang.Override
  public boolean hasRpId() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * An RP ID is a WebAuthn concept:
   * https://www.w3.org/TR/webauthn-2/#rp-id. It’s usually a domain name,
   * although in non-Web contexts it can be a URL with a non-Web scheme.
   * </pre>
   *
   * <code>optional string rp_id = 3;</code>
   * @return The rpId.
   */
  @java.lang.Override
  public java.lang.String getRpId() {
    return rpId_;
  }
  /**
   * <pre>
   * An RP ID is a WebAuthn concept:
   * https://www.w3.org/TR/webauthn-2/#rp-id. It’s usually a domain name,
   * although in non-Web contexts it can be a URL with a non-Web scheme.
   * </pre>
   *
   * <code>optional string rp_id = 3;</code>
   * @return The bytes for rpId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getRpIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(rpId_);
  }
  /**
   * <pre>
   * An RP ID is a WebAuthn concept:
   * https://www.w3.org/TR/webauthn-2/#rp-id. It’s usually a domain name,
   * although in non-Web contexts it can be a URL with a non-Web scheme.
   * </pre>
   *
   * <code>optional string rp_id = 3;</code>
   * @param value The rpId to set.
   */
  private void setRpId(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000004;
    rpId_ = value;
  }
  /**
   * <pre>
   * An RP ID is a WebAuthn concept:
   * https://www.w3.org/TR/webauthn-2/#rp-id. It’s usually a domain name,
   * although in non-Web contexts it can be a URL with a non-Web scheme.
   * </pre>
   *
   * <code>optional string rp_id = 3;</code>
   */
  private void clearRpId() {
    bitField0_ = (bitField0_ & ~0x00000004);
    rpId_ = getDefaultInstance().getRpId();
  }
  /**
   * <pre>
   * An RP ID is a WebAuthn concept:
   * https://www.w3.org/TR/webauthn-2/#rp-id. It’s usually a domain name,
   * although in non-Web contexts it can be a URL with a non-Web scheme.
   * </pre>
   *
   * <code>optional string rp_id = 3;</code>
   * @param value The bytes for rpId to set.
   */
  private void setRpIdBytes(
      com.google.protobuf.ByteString value) {
    rpId_ = value.toStringUtf8();
    bitField0_ |= 0x00000004;
  }

  public static final int USER_ID_FIELD_NUMBER = 4;
  private com.google.protobuf.ByteString userId_;
  /**
   * <pre>
   * The user ID, which is also called a “user handle” in WebAuthn
   * (https://www.w3.org/TR/webauthn-2/#user-handle), is an RP-specific
   * identifier that is up to 64-bytes long. An authenticator conceptually only
   * stores a single credential for a given (rp_id, user_id) pair, but there
   * may be several credentials in Sync. They are prioritised using
   * newly_shadowed_credential_ids and creation_time. See below.
   * (We wish to be able to retain several entities for a single (rp_id,
   * user_id) pair because there’s an edge case where we may wish to revert to
   * an older entry and thus need to keep the older entry around in Sync. The
   * revert could happen on a different device too.)
   * </pre>
   *
   * <code>optional bytes user_id = 4;</code>
   * @return Whether the userId field is set.
   */
  @java.lang.Override
  public boolean hasUserId() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * The user ID, which is also called a “user handle” in WebAuthn
   * (https://www.w3.org/TR/webauthn-2/#user-handle), is an RP-specific
   * identifier that is up to 64-bytes long. An authenticator conceptually only
   * stores a single credential for a given (rp_id, user_id) pair, but there
   * may be several credentials in Sync. They are prioritised using
   * newly_shadowed_credential_ids and creation_time. See below.
   * (We wish to be able to retain several entities for a single (rp_id,
   * user_id) pair because there’s an edge case where we may wish to revert to
   * an older entry and thus need to keep the older entry around in Sync. The
   * revert could happen on a different device too.)
   * </pre>
   *
   * <code>optional bytes user_id = 4;</code>
   * @return The userId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getUserId() {
    return userId_;
  }
  /**
   * <pre>
   * The user ID, which is also called a “user handle” in WebAuthn
   * (https://www.w3.org/TR/webauthn-2/#user-handle), is an RP-specific
   * identifier that is up to 64-bytes long. An authenticator conceptually only
   * stores a single credential for a given (rp_id, user_id) pair, but there
   * may be several credentials in Sync. They are prioritised using
   * newly_shadowed_credential_ids and creation_time. See below.
   * (We wish to be able to retain several entities for a single (rp_id,
   * user_id) pair because there’s an edge case where we may wish to revert to
   * an older entry and thus need to keep the older entry around in Sync. The
   * revert could happen on a different device too.)
   * </pre>
   *
   * <code>optional bytes user_id = 4;</code>
   * @param value The userId to set.
   */
  private void setUserId(com.google.protobuf.ByteString value) {
    value.getClass();
  bitField0_ |= 0x00000008;
    userId_ = value;
  }
  /**
   * <pre>
   * The user ID, which is also called a “user handle” in WebAuthn
   * (https://www.w3.org/TR/webauthn-2/#user-handle), is an RP-specific
   * identifier that is up to 64-bytes long. An authenticator conceptually only
   * stores a single credential for a given (rp_id, user_id) pair, but there
   * may be several credentials in Sync. They are prioritised using
   * newly_shadowed_credential_ids and creation_time. See below.
   * (We wish to be able to retain several entities for a single (rp_id,
   * user_id) pair because there’s an edge case where we may wish to revert to
   * an older entry and thus need to keep the older entry around in Sync. The
   * revert could happen on a different device too.)
   * </pre>
   *
   * <code>optional bytes user_id = 4;</code>
   */
  private void clearUserId() {
    bitField0_ = (bitField0_ & ~0x00000008);
    userId_ = getDefaultInstance().getUserId();
  }

  public static final int NEWLY_SHADOWED_CREDENTIAL_IDS_FIELD_NUMBER = 5;
  private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> newlyShadowedCredentialIds_;
  /**
   * <pre>
   * The id of credentials with the same (rp_id, user_id) that were
   * shadowed by the creation of this entity.
   * A credential is shadowed if one or more other credentials (from the same
   * account, and with the same (rp_id, user_id)) include its credential_id in
   * their list of shadowed IDs. Shadowed credentials are ignored when finding
   * a credential to sign with. If there is more than one candidate remaining
   * after filtering shadowed credentials then the most recently created (based
   * on creation_time) is used.
   * The reason for all this is that sites can replace a credential by creating
   * another one with the same (rp_id, user_id) pair. However, we don't
   * immediately know whether the WebAuthn response reached the website's
   * server. Consider a user with a poor internet connection. Javascript in the
   * site's origin triggers a credential creation that “overwrites” an existing
   * credential, but the Javascript is unable to send the new public key to the
   * website's server. The user is now locked out: the old credential has been
   * over-written but the website's server doesn't know about the new one.
   * Thus we wish to keep “overwritten” credentials around for a while to allow
   * for some sort of recovery. In the simple case, a new credential shadows
   * the single, previous old credential. We could depend on creation_time, but
   * client clocks aren't always accurate, thus this field.
   * In complicated cases two devices might race to replace a credential, in
   * which case (after mutual syncing) two candidate credentials exist for the
   * same (rp_id, user_id) pair because neither shadows the other. In this case
   * we pick the newest based on |creation_time| but it's quite possible that
   * some recovery will be needed because the website's server thinks the other
   * one is correct.
   * A generation counter isn't used because a single device might replace a
   * series of credentials as it tries to update the website's server. But that
   * doesn't mean that it should dominate a different device that replaced it
   * only once, but later.
   * </pre>
   *
   * <code>repeated bytes newly_shadowed_credential_ids = 5;</code>
   * @return A list containing the newlyShadowedCredentialIds.
   */
  @java.lang.Override
  public java.util.List<com.google.protobuf.ByteString>
      getNewlyShadowedCredentialIdsList() {
    return newlyShadowedCredentialIds_;
  }
  /**
   * <pre>
   * The id of credentials with the same (rp_id, user_id) that were
   * shadowed by the creation of this entity.
   * A credential is shadowed if one or more other credentials (from the same
   * account, and with the same (rp_id, user_id)) include its credential_id in
   * their list of shadowed IDs. Shadowed credentials are ignored when finding
   * a credential to sign with. If there is more than one candidate remaining
   * after filtering shadowed credentials then the most recently created (based
   * on creation_time) is used.
   * The reason for all this is that sites can replace a credential by creating
   * another one with the same (rp_id, user_id) pair. However, we don't
   * immediately know whether the WebAuthn response reached the website's
   * server. Consider a user with a poor internet connection. Javascript in the
   * site's origin triggers a credential creation that “overwrites” an existing
   * credential, but the Javascript is unable to send the new public key to the
   * website's server. The user is now locked out: the old credential has been
   * over-written but the website's server doesn't know about the new one.
   * Thus we wish to keep “overwritten” credentials around for a while to allow
   * for some sort of recovery. In the simple case, a new credential shadows
   * the single, previous old credential. We could depend on creation_time, but
   * client clocks aren't always accurate, thus this field.
   * In complicated cases two devices might race to replace a credential, in
   * which case (after mutual syncing) two candidate credentials exist for the
   * same (rp_id, user_id) pair because neither shadows the other. In this case
   * we pick the newest based on |creation_time| but it's quite possible that
   * some recovery will be needed because the website's server thinks the other
   * one is correct.
   * A generation counter isn't used because a single device might replace a
   * series of credentials as it tries to update the website's server. But that
   * doesn't mean that it should dominate a different device that replaced it
   * only once, but later.
   * </pre>
   *
   * <code>repeated bytes newly_shadowed_credential_ids = 5;</code>
   * @return The count of newlyShadowedCredentialIds.
   */
  @java.lang.Override
  public int getNewlyShadowedCredentialIdsCount() {
    return newlyShadowedCredentialIds_.size();
  }
  /**
   * <pre>
   * The id of credentials with the same (rp_id, user_id) that were
   * shadowed by the creation of this entity.
   * A credential is shadowed if one or more other credentials (from the same
   * account, and with the same (rp_id, user_id)) include its credential_id in
   * their list of shadowed IDs. Shadowed credentials are ignored when finding
   * a credential to sign with. If there is more than one candidate remaining
   * after filtering shadowed credentials then the most recently created (based
   * on creation_time) is used.
   * The reason for all this is that sites can replace a credential by creating
   * another one with the same (rp_id, user_id) pair. However, we don't
   * immediately know whether the WebAuthn response reached the website's
   * server. Consider a user with a poor internet connection. Javascript in the
   * site's origin triggers a credential creation that “overwrites” an existing
   * credential, but the Javascript is unable to send the new public key to the
   * website's server. The user is now locked out: the old credential has been
   * over-written but the website's server doesn't know about the new one.
   * Thus we wish to keep “overwritten” credentials around for a while to allow
   * for some sort of recovery. In the simple case, a new credential shadows
   * the single, previous old credential. We could depend on creation_time, but
   * client clocks aren't always accurate, thus this field.
   * In complicated cases two devices might race to replace a credential, in
   * which case (after mutual syncing) two candidate credentials exist for the
   * same (rp_id, user_id) pair because neither shadows the other. In this case
   * we pick the newest based on |creation_time| but it's quite possible that
   * some recovery will be needed because the website's server thinks the other
   * one is correct.
   * A generation counter isn't used because a single device might replace a
   * series of credentials as it tries to update the website's server. But that
   * doesn't mean that it should dominate a different device that replaced it
   * only once, but later.
   * </pre>
   *
   * <code>repeated bytes newly_shadowed_credential_ids = 5;</code>
   * @param index The index of the element to return.
   * @return The newlyShadowedCredentialIds at the given index.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getNewlyShadowedCredentialIds(int index) {
    return newlyShadowedCredentialIds_.get(index);
  }
  private void ensureNewlyShadowedCredentialIdsIsMutable() {
    com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> tmp = newlyShadowedCredentialIds_;
    if (!tmp.isModifiable()) {
      newlyShadowedCredentialIds_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <pre>
   * The id of credentials with the same (rp_id, user_id) that were
   * shadowed by the creation of this entity.
   * A credential is shadowed if one or more other credentials (from the same
   * account, and with the same (rp_id, user_id)) include its credential_id in
   * their list of shadowed IDs. Shadowed credentials are ignored when finding
   * a credential to sign with. If there is more than one candidate remaining
   * after filtering shadowed credentials then the most recently created (based
   * on creation_time) is used.
   * The reason for all this is that sites can replace a credential by creating
   * another one with the same (rp_id, user_id) pair. However, we don't
   * immediately know whether the WebAuthn response reached the website's
   * server. Consider a user with a poor internet connection. Javascript in the
   * site's origin triggers a credential creation that “overwrites” an existing
   * credential, but the Javascript is unable to send the new public key to the
   * website's server. The user is now locked out: the old credential has been
   * over-written but the website's server doesn't know about the new one.
   * Thus we wish to keep “overwritten” credentials around for a while to allow
   * for some sort of recovery. In the simple case, a new credential shadows
   * the single, previous old credential. We could depend on creation_time, but
   * client clocks aren't always accurate, thus this field.
   * In complicated cases two devices might race to replace a credential, in
   * which case (after mutual syncing) two candidate credentials exist for the
   * same (rp_id, user_id) pair because neither shadows the other. In this case
   * we pick the newest based on |creation_time| but it's quite possible that
   * some recovery will be needed because the website's server thinks the other
   * one is correct.
   * A generation counter isn't used because a single device might replace a
   * series of credentials as it tries to update the website's server. But that
   * doesn't mean that it should dominate a different device that replaced it
   * only once, but later.
   * </pre>
   *
   * <code>repeated bytes newly_shadowed_credential_ids = 5;</code>
   * @param index The index to set the value at.
   * @param value The newlyShadowedCredentialIds to set.
   */
  private void setNewlyShadowedCredentialIds(
      int index, com.google.protobuf.ByteString value) {
    value.getClass();
  ensureNewlyShadowedCredentialIdsIsMutable();
    newlyShadowedCredentialIds_.set(index, value);
  }
  /**
   * <pre>
   * The id of credentials with the same (rp_id, user_id) that were
   * shadowed by the creation of this entity.
   * A credential is shadowed if one or more other credentials (from the same
   * account, and with the same (rp_id, user_id)) include its credential_id in
   * their list of shadowed IDs. Shadowed credentials are ignored when finding
   * a credential to sign with. If there is more than one candidate remaining
   * after filtering shadowed credentials then the most recently created (based
   * on creation_time) is used.
   * The reason for all this is that sites can replace a credential by creating
   * another one with the same (rp_id, user_id) pair. However, we don't
   * immediately know whether the WebAuthn response reached the website's
   * server. Consider a user with a poor internet connection. Javascript in the
   * site's origin triggers a credential creation that “overwrites” an existing
   * credential, but the Javascript is unable to send the new public key to the
   * website's server. The user is now locked out: the old credential has been
   * over-written but the website's server doesn't know about the new one.
   * Thus we wish to keep “overwritten” credentials around for a while to allow
   * for some sort of recovery. In the simple case, a new credential shadows
   * the single, previous old credential. We could depend on creation_time, but
   * client clocks aren't always accurate, thus this field.
   * In complicated cases two devices might race to replace a credential, in
   * which case (after mutual syncing) two candidate credentials exist for the
   * same (rp_id, user_id) pair because neither shadows the other. In this case
   * we pick the newest based on |creation_time| but it's quite possible that
   * some recovery will be needed because the website's server thinks the other
   * one is correct.
   * A generation counter isn't used because a single device might replace a
   * series of credentials as it tries to update the website's server. But that
   * doesn't mean that it should dominate a different device that replaced it
   * only once, but later.
   * </pre>
   *
   * <code>repeated bytes newly_shadowed_credential_ids = 5;</code>
   * @param value The newlyShadowedCredentialIds to add.
   */
  private void addNewlyShadowedCredentialIds(com.google.protobuf.ByteString value) {
    value.getClass();
  ensureNewlyShadowedCredentialIdsIsMutable();
    newlyShadowedCredentialIds_.add(value);
  }
  /**
   * <pre>
   * The id of credentials with the same (rp_id, user_id) that were
   * shadowed by the creation of this entity.
   * A credential is shadowed if one or more other credentials (from the same
   * account, and with the same (rp_id, user_id)) include its credential_id in
   * their list of shadowed IDs. Shadowed credentials are ignored when finding
   * a credential to sign with. If there is more than one candidate remaining
   * after filtering shadowed credentials then the most recently created (based
   * on creation_time) is used.
   * The reason for all this is that sites can replace a credential by creating
   * another one with the same (rp_id, user_id) pair. However, we don't
   * immediately know whether the WebAuthn response reached the website's
   * server. Consider a user with a poor internet connection. Javascript in the
   * site's origin triggers a credential creation that “overwrites” an existing
   * credential, but the Javascript is unable to send the new public key to the
   * website's server. The user is now locked out: the old credential has been
   * over-written but the website's server doesn't know about the new one.
   * Thus we wish to keep “overwritten” credentials around for a while to allow
   * for some sort of recovery. In the simple case, a new credential shadows
   * the single, previous old credential. We could depend on creation_time, but
   * client clocks aren't always accurate, thus this field.
   * In complicated cases two devices might race to replace a credential, in
   * which case (after mutual syncing) two candidate credentials exist for the
   * same (rp_id, user_id) pair because neither shadows the other. In this case
   * we pick the newest based on |creation_time| but it's quite possible that
   * some recovery will be needed because the website's server thinks the other
   * one is correct.
   * A generation counter isn't used because a single device might replace a
   * series of credentials as it tries to update the website's server. But that
   * doesn't mean that it should dominate a different device that replaced it
   * only once, but later.
   * </pre>
   *
   * <code>repeated bytes newly_shadowed_credential_ids = 5;</code>
   * @param values The newlyShadowedCredentialIds to add.
   */
  private void addAllNewlyShadowedCredentialIds(
      java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
    ensureNewlyShadowedCredentialIdsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, newlyShadowedCredentialIds_);
  }
  /**
   * <pre>
   * The id of credentials with the same (rp_id, user_id) that were
   * shadowed by the creation of this entity.
   * A credential is shadowed if one or more other credentials (from the same
   * account, and with the same (rp_id, user_id)) include its credential_id in
   * their list of shadowed IDs. Shadowed credentials are ignored when finding
   * a credential to sign with. If there is more than one candidate remaining
   * after filtering shadowed credentials then the most recently created (based
   * on creation_time) is used.
   * The reason for all this is that sites can replace a credential by creating
   * another one with the same (rp_id, user_id) pair. However, we don't
   * immediately know whether the WebAuthn response reached the website's
   * server. Consider a user with a poor internet connection. Javascript in the
   * site's origin triggers a credential creation that “overwrites” an existing
   * credential, but the Javascript is unable to send the new public key to the
   * website's server. The user is now locked out: the old credential has been
   * over-written but the website's server doesn't know about the new one.
   * Thus we wish to keep “overwritten” credentials around for a while to allow
   * for some sort of recovery. In the simple case, a new credential shadows
   * the single, previous old credential. We could depend on creation_time, but
   * client clocks aren't always accurate, thus this field.
   * In complicated cases two devices might race to replace a credential, in
   * which case (after mutual syncing) two candidate credentials exist for the
   * same (rp_id, user_id) pair because neither shadows the other. In this case
   * we pick the newest based on |creation_time| but it's quite possible that
   * some recovery will be needed because the website's server thinks the other
   * one is correct.
   * A generation counter isn't used because a single device might replace a
   * series of credentials as it tries to update the website's server. But that
   * doesn't mean that it should dominate a different device that replaced it
   * only once, but later.
   * </pre>
   *
   * <code>repeated bytes newly_shadowed_credential_ids = 5;</code>
   */
  private void clearNewlyShadowedCredentialIds() {
    newlyShadowedCredentialIds_ = emptyProtobufList();
  }

  public static final int CREATION_TIME_FIELD_NUMBER = 6;
  private long creationTime_;
  /**
   * <pre>
   * The local time on the device when this credential was created. Given in
   * milliseconds since the UNIX epoch. This is used to break ties between
   * credentials. See newly_shadowed_credential_ids.
   * </pre>
   *
   * <code>optional int64 creation_time = 6;</code>
   * @return Whether the creationTime field is set.
   */
  @java.lang.Override
  public boolean hasCreationTime() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * The local time on the device when this credential was created. Given in
   * milliseconds since the UNIX epoch. This is used to break ties between
   * credentials. See newly_shadowed_credential_ids.
   * </pre>
   *
   * <code>optional int64 creation_time = 6;</code>
   * @return The creationTime.
   */
  @java.lang.Override
  public long getCreationTime() {
    return creationTime_;
  }
  /**
   * <pre>
   * The local time on the device when this credential was created. Given in
   * milliseconds since the UNIX epoch. This is used to break ties between
   * credentials. See newly_shadowed_credential_ids.
   * </pre>
   *
   * <code>optional int64 creation_time = 6;</code>
   * @param value The creationTime to set.
   */
  private void setCreationTime(long value) {
    bitField0_ |= 0x00000010;
    creationTime_ = value;
  }
  /**
   * <pre>
   * The local time on the device when this credential was created. Given in
   * milliseconds since the UNIX epoch. This is used to break ties between
   * credentials. See newly_shadowed_credential_ids.
   * </pre>
   *
   * <code>optional int64 creation_time = 6;</code>
   */
  private void clearCreationTime() {
    bitField0_ = (bitField0_ & ~0x00000010);
    creationTime_ = 0L;
  }

  public static final int USER_NAME_FIELD_NUMBER = 7;
  private java.lang.String userName_;
  /**
   * <pre>
   * The human-readable account identifier. Usually an email address.
   * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialentity-name
   * </pre>
   *
   * <code>optional string user_name = 7;</code>
   * @return Whether the userName field is set.
   */
  @java.lang.Override
  public boolean hasUserName() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * The human-readable account identifier. Usually an email address.
   * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialentity-name
   * </pre>
   *
   * <code>optional string user_name = 7;</code>
   * @return The userName.
   */
  @java.lang.Override
  public java.lang.String getUserName() {
    return userName_;
  }
  /**
   * <pre>
   * The human-readable account identifier. Usually an email address.
   * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialentity-name
   * </pre>
   *
   * <code>optional string user_name = 7;</code>
   * @return The bytes for userName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getUserNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(userName_);
  }
  /**
   * <pre>
   * The human-readable account identifier. Usually an email address.
   * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialentity-name
   * </pre>
   *
   * <code>optional string user_name = 7;</code>
   * @param value The userName to set.
   */
  private void setUserName(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000020;
    userName_ = value;
  }
  /**
   * <pre>
   * The human-readable account identifier. Usually an email address.
   * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialentity-name
   * </pre>
   *
   * <code>optional string user_name = 7;</code>
   */
  private void clearUserName() {
    bitField0_ = (bitField0_ & ~0x00000020);
    userName_ = getDefaultInstance().getUserName();
  }
  /**
   * <pre>
   * The human-readable account identifier. Usually an email address.
   * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialentity-name
   * </pre>
   *
   * <code>optional string user_name = 7;</code>
   * @param value The bytes for userName to set.
   */
  private void setUserNameBytes(
      com.google.protobuf.ByteString value) {
    userName_ = value.toStringUtf8();
    bitField0_ |= 0x00000020;
  }

  public static final int USER_DISPLAY_NAME_FIELD_NUMBER = 8;
  private java.lang.String userDisplayName_;
  /**
   * <pre>
   * The human-readable name. Usually a legal name. This is the only mutable
   * field in a credential.
   * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialuserentity-displayname.
   * </pre>
   *
   * <code>optional string user_display_name = 8;</code>
   * @return Whether the userDisplayName field is set.
   */
  @java.lang.Override
  public boolean hasUserDisplayName() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * The human-readable name. Usually a legal name. This is the only mutable
   * field in a credential.
   * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialuserentity-displayname.
   * </pre>
   *
   * <code>optional string user_display_name = 8;</code>
   * @return The userDisplayName.
   */
  @java.lang.Override
  public java.lang.String getUserDisplayName() {
    return userDisplayName_;
  }
  /**
   * <pre>
   * The human-readable name. Usually a legal name. This is the only mutable
   * field in a credential.
   * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialuserentity-displayname.
   * </pre>
   *
   * <code>optional string user_display_name = 8;</code>
   * @return The bytes for userDisplayName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getUserDisplayNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(userDisplayName_);
  }
  /**
   * <pre>
   * The human-readable name. Usually a legal name. This is the only mutable
   * field in a credential.
   * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialuserentity-displayname.
   * </pre>
   *
   * <code>optional string user_display_name = 8;</code>
   * @param value The userDisplayName to set.
   */
  private void setUserDisplayName(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000040;
    userDisplayName_ = value;
  }
  /**
   * <pre>
   * The human-readable name. Usually a legal name. This is the only mutable
   * field in a credential.
   * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialuserentity-displayname.
   * </pre>
   *
   * <code>optional string user_display_name = 8;</code>
   */
  private void clearUserDisplayName() {
    bitField0_ = (bitField0_ & ~0x00000040);
    userDisplayName_ = getDefaultInstance().getUserDisplayName();
  }
  /**
   * <pre>
   * The human-readable name. Usually a legal name. This is the only mutable
   * field in a credential.
   * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialuserentity-displayname.
   * </pre>
   *
   * <code>optional string user_display_name = 8;</code>
   * @param value The bytes for userDisplayName to set.
   */
  private void setUserDisplayNameBytes(
      com.google.protobuf.ByteString value) {
    userDisplayName_ = value.toStringUtf8();
    bitField0_ |= 0x00000040;
  }

  public static final int PRIVATE_KEY_FIELD_NUMBER = 9;
  private com.google.protobuf.ByteString privateKey_;
  /**
   * <pre>
   * The bytes of the private key, in a format known to the consumers of these
   * sync entities. In the future the private key may be encrypted with a
   * different key and then stored in a future encrypted_private_key field.
   * </pre>
   *
   * <code>optional bytes private_key = 9;</code>
   * @return Whether the privateKey field is set.
   */
  @java.lang.Override
  public boolean hasPrivateKey() {
    return ((bitField0_ & 0x00000080) != 0);
  }
  /**
   * <pre>
   * The bytes of the private key, in a format known to the consumers of these
   * sync entities. In the future the private key may be encrypted with a
   * different key and then stored in a future encrypted_private_key field.
   * </pre>
   *
   * <code>optional bytes private_key = 9;</code>
   * @return The privateKey.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getPrivateKey() {
    return privateKey_;
  }
  /**
   * <pre>
   * The bytes of the private key, in a format known to the consumers of these
   * sync entities. In the future the private key may be encrypted with a
   * different key and then stored in a future encrypted_private_key field.
   * </pre>
   *
   * <code>optional bytes private_key = 9;</code>
   * @param value The privateKey to set.
   */
  private void setPrivateKey(com.google.protobuf.ByteString value) {
    value.getClass();
  bitField0_ |= 0x00000080;
    privateKey_ = value;
  }
  /**
   * <pre>
   * The bytes of the private key, in a format known to the consumers of these
   * sync entities. In the future the private key may be encrypted with a
   * different key and then stored in a future encrypted_private_key field.
   * </pre>
   *
   * <code>optional bytes private_key = 9;</code>
   */
  private void clearPrivateKey() {
    bitField0_ = (bitField0_ & ~0x00000080);
    privateKey_ = getDefaultInstance().getPrivateKey();
  }

  public static final int THIRD_PARTY_PAYMENTS_SUPPORT_FIELD_NUMBER = 11;
  private boolean thirdPartyPaymentsSupport_;
  /**
   * <pre>
   * Credentials may optionally be enabled for Secure Payment Confirmation[1] on
   * third-party sites. This is opt-in at creation time.
   * [1] https://www.w3.org/TR/secure-payment-confirmation/
   * </pre>
   *
   * <code>optional bool third_party_payments_support = 11;</code>
   * @return Whether the thirdPartyPaymentsSupport field is set.
   */
  @java.lang.Override
  public boolean hasThirdPartyPaymentsSupport() {
    return ((bitField0_ & 0x00000100) != 0);
  }
  /**
   * <pre>
   * Credentials may optionally be enabled for Secure Payment Confirmation[1] on
   * third-party sites. This is opt-in at creation time.
   * [1] https://www.w3.org/TR/secure-payment-confirmation/
   * </pre>
   *
   * <code>optional bool third_party_payments_support = 11;</code>
   * @return The thirdPartyPaymentsSupport.
   */
  @java.lang.Override
  public boolean getThirdPartyPaymentsSupport() {
    return thirdPartyPaymentsSupport_;
  }
  /**
   * <pre>
   * Credentials may optionally be enabled for Secure Payment Confirmation[1] on
   * third-party sites. This is opt-in at creation time.
   * [1] https://www.w3.org/TR/secure-payment-confirmation/
   * </pre>
   *
   * <code>optional bool third_party_payments_support = 11;</code>
   * @param value The thirdPartyPaymentsSupport to set.
   */
  private void setThirdPartyPaymentsSupport(boolean value) {
    bitField0_ |= 0x00000100;
    thirdPartyPaymentsSupport_ = value;
  }
  /**
   * <pre>
   * Credentials may optionally be enabled for Secure Payment Confirmation[1] on
   * third-party sites. This is opt-in at creation time.
   * [1] https://www.w3.org/TR/secure-payment-confirmation/
   * </pre>
   *
   * <code>optional bool third_party_payments_support = 11;</code>
   */
  private void clearThirdPartyPaymentsSupport() {
    bitField0_ = (bitField0_ & ~0x00000100);
    thirdPartyPaymentsSupport_ = false;
  }

  public static org.chromium.components.sync.protocol.WebauthnCredentialSpecifics parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.WebauthnCredentialSpecifics parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.WebauthnCredentialSpecifics parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.WebauthnCredentialSpecifics parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.WebauthnCredentialSpecifics parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.WebauthnCredentialSpecifics parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.WebauthnCredentialSpecifics parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.WebauthnCredentialSpecifics parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.WebauthnCredentialSpecifics parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.WebauthnCredentialSpecifics parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.WebauthnCredentialSpecifics parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.WebauthnCredentialSpecifics parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.WebauthnCredentialSpecifics prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * WebauthnCredentialSpecifics is an entity that backs a WebAuthn
   * PublicKeyCredential. Since it contains the authenticator’s view of this
   * object, it has a private key rather than a public key.
   * (https://www.w3.org/TR/webauthn-2/#iface-pkcredential).
   * Names of fields are taken from WebAuthn where possible. E.g.
   * user.displayName in WebAuthn becomes user_display_name here.
   * All fields are immutable after creation except for user_display_name, which
   * may be updated by a user.
   * </pre>
   *
   * Protobuf type {@code sync_pb.WebauthnCredentialSpecifics}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.WebauthnCredentialSpecifics, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.WebauthnCredentialSpecifics)
      org.chromium.components.sync.protocol.WebauthnCredentialSpecificsOrBuilder {
    // Construct using org.chromium.components.sync.protocol.WebauthnCredentialSpecifics.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Sync's ID for this entity (sometimes called the client unique tag), 16
     * random bytes. This value is used within Sync to identify this entity. The
     * credential ID is not used because the (hashed) sync_id is exposed to the
     * Sync server, and we don’t want Google to be able to map a credential ID to
     * an account. Password entities construct this value from the concatenation
     * of many fields and depend on the fact that the server only sees a hash of
     * it. But the only high-entropy secret here is the private key, which will
     * have different encryption in the future, and private keys are not the sort
     * of data to copy into other fields. Therefore this independent value is
     * provided to form the client's ID.
     * </pre>
     *
     * <code>optional bytes sync_id = 1;</code>
     * @return Whether the syncId field is set.
     */
    @java.lang.Override
    public boolean hasSyncId() {
      return instance.hasSyncId();
    }
    /**
     * <pre>
     * Sync's ID for this entity (sometimes called the client unique tag), 16
     * random bytes. This value is used within Sync to identify this entity. The
     * credential ID is not used because the (hashed) sync_id is exposed to the
     * Sync server, and we don’t want Google to be able to map a credential ID to
     * an account. Password entities construct this value from the concatenation
     * of many fields and depend on the fact that the server only sees a hash of
     * it. But the only high-entropy secret here is the private key, which will
     * have different encryption in the future, and private keys are not the sort
     * of data to copy into other fields. Therefore this independent value is
     * provided to form the client's ID.
     * </pre>
     *
     * <code>optional bytes sync_id = 1;</code>
     * @return The syncId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSyncId() {
      return instance.getSyncId();
    }
    /**
     * <pre>
     * Sync's ID for this entity (sometimes called the client unique tag), 16
     * random bytes. This value is used within Sync to identify this entity. The
     * credential ID is not used because the (hashed) sync_id is exposed to the
     * Sync server, and we don’t want Google to be able to map a credential ID to
     * an account. Password entities construct this value from the concatenation
     * of many fields and depend on the fact that the server only sees a hash of
     * it. But the only high-entropy secret here is the private key, which will
     * have different encryption in the future, and private keys are not the sort
     * of data to copy into other fields. Therefore this independent value is
     * provided to form the client's ID.
     * </pre>
     *
     * <code>optional bytes sync_id = 1;</code>
     * @param value The syncId to set.
     * @return This builder for chaining.
     */
    public Builder setSyncId(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setSyncId(value);
      return this;
    }
    /**
     * <pre>
     * Sync's ID for this entity (sometimes called the client unique tag), 16
     * random bytes. This value is used within Sync to identify this entity. The
     * credential ID is not used because the (hashed) sync_id is exposed to the
     * Sync server, and we don’t want Google to be able to map a credential ID to
     * an account. Password entities construct this value from the concatenation
     * of many fields and depend on the fact that the server only sees a hash of
     * it. But the only high-entropy secret here is the private key, which will
     * have different encryption in the future, and private keys are not the sort
     * of data to copy into other fields. Therefore this independent value is
     * provided to form the client's ID.
     * </pre>
     *
     * <code>optional bytes sync_id = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearSyncId() {
      copyOnWrite();
      instance.clearSyncId();
      return this;
    }

    /**
     * <pre>
     * The credential ID, 16 random bytes. This is a value surfaced in
     * the WebAuthn API (https://www.w3.org/TR/webauthn-2/#credential-id).
     * </pre>
     *
     * <code>optional bytes credential_id = 2;</code>
     * @return Whether the credentialId field is set.
     */
    @java.lang.Override
    public boolean hasCredentialId() {
      return instance.hasCredentialId();
    }
    /**
     * <pre>
     * The credential ID, 16 random bytes. This is a value surfaced in
     * the WebAuthn API (https://www.w3.org/TR/webauthn-2/#credential-id).
     * </pre>
     *
     * <code>optional bytes credential_id = 2;</code>
     * @return The credentialId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getCredentialId() {
      return instance.getCredentialId();
    }
    /**
     * <pre>
     * The credential ID, 16 random bytes. This is a value surfaced in
     * the WebAuthn API (https://www.w3.org/TR/webauthn-2/#credential-id).
     * </pre>
     *
     * <code>optional bytes credential_id = 2;</code>
     * @param value The credentialId to set.
     * @return This builder for chaining.
     */
    public Builder setCredentialId(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setCredentialId(value);
      return this;
    }
    /**
     * <pre>
     * The credential ID, 16 random bytes. This is a value surfaced in
     * the WebAuthn API (https://www.w3.org/TR/webauthn-2/#credential-id).
     * </pre>
     *
     * <code>optional bytes credential_id = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearCredentialId() {
      copyOnWrite();
      instance.clearCredentialId();
      return this;
    }

    /**
     * <pre>
     * An RP ID is a WebAuthn concept:
     * https://www.w3.org/TR/webauthn-2/#rp-id. It’s usually a domain name,
     * although in non-Web contexts it can be a URL with a non-Web scheme.
     * </pre>
     *
     * <code>optional string rp_id = 3;</code>
     * @return Whether the rpId field is set.
     */
    @java.lang.Override
    public boolean hasRpId() {
      return instance.hasRpId();
    }
    /**
     * <pre>
     * An RP ID is a WebAuthn concept:
     * https://www.w3.org/TR/webauthn-2/#rp-id. It’s usually a domain name,
     * although in non-Web contexts it can be a URL with a non-Web scheme.
     * </pre>
     *
     * <code>optional string rp_id = 3;</code>
     * @return The rpId.
     */
    @java.lang.Override
    public java.lang.String getRpId() {
      return instance.getRpId();
    }
    /**
     * <pre>
     * An RP ID is a WebAuthn concept:
     * https://www.w3.org/TR/webauthn-2/#rp-id. It’s usually a domain name,
     * although in non-Web contexts it can be a URL with a non-Web scheme.
     * </pre>
     *
     * <code>optional string rp_id = 3;</code>
     * @return The bytes for rpId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getRpIdBytes() {
      return instance.getRpIdBytes();
    }
    /**
     * <pre>
     * An RP ID is a WebAuthn concept:
     * https://www.w3.org/TR/webauthn-2/#rp-id. It’s usually a domain name,
     * although in non-Web contexts it can be a URL with a non-Web scheme.
     * </pre>
     *
     * <code>optional string rp_id = 3;</code>
     * @param value The rpId to set.
     * @return This builder for chaining.
     */
    public Builder setRpId(
        java.lang.String value) {
      copyOnWrite();
      instance.setRpId(value);
      return this;
    }
    /**
     * <pre>
     * An RP ID is a WebAuthn concept:
     * https://www.w3.org/TR/webauthn-2/#rp-id. It’s usually a domain name,
     * although in non-Web contexts it can be a URL with a non-Web scheme.
     * </pre>
     *
     * <code>optional string rp_id = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearRpId() {
      copyOnWrite();
      instance.clearRpId();
      return this;
    }
    /**
     * <pre>
     * An RP ID is a WebAuthn concept:
     * https://www.w3.org/TR/webauthn-2/#rp-id. It’s usually a domain name,
     * although in non-Web contexts it can be a URL with a non-Web scheme.
     * </pre>
     *
     * <code>optional string rp_id = 3;</code>
     * @param value The bytes for rpId to set.
     * @return This builder for chaining.
     */
    public Builder setRpIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setRpIdBytes(value);
      return this;
    }

    /**
     * <pre>
     * The user ID, which is also called a “user handle” in WebAuthn
     * (https://www.w3.org/TR/webauthn-2/#user-handle), is an RP-specific
     * identifier that is up to 64-bytes long. An authenticator conceptually only
     * stores a single credential for a given (rp_id, user_id) pair, but there
     * may be several credentials in Sync. They are prioritised using
     * newly_shadowed_credential_ids and creation_time. See below.
     * (We wish to be able to retain several entities for a single (rp_id,
     * user_id) pair because there’s an edge case where we may wish to revert to
     * an older entry and thus need to keep the older entry around in Sync. The
     * revert could happen on a different device too.)
     * </pre>
     *
     * <code>optional bytes user_id = 4;</code>
     * @return Whether the userId field is set.
     */
    @java.lang.Override
    public boolean hasUserId() {
      return instance.hasUserId();
    }
    /**
     * <pre>
     * The user ID, which is also called a “user handle” in WebAuthn
     * (https://www.w3.org/TR/webauthn-2/#user-handle), is an RP-specific
     * identifier that is up to 64-bytes long. An authenticator conceptually only
     * stores a single credential for a given (rp_id, user_id) pair, but there
     * may be several credentials in Sync. They are prioritised using
     * newly_shadowed_credential_ids and creation_time. See below.
     * (We wish to be able to retain several entities for a single (rp_id,
     * user_id) pair because there’s an edge case where we may wish to revert to
     * an older entry and thus need to keep the older entry around in Sync. The
     * revert could happen on a different device too.)
     * </pre>
     *
     * <code>optional bytes user_id = 4;</code>
     * @return The userId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getUserId() {
      return instance.getUserId();
    }
    /**
     * <pre>
     * The user ID, which is also called a “user handle” in WebAuthn
     * (https://www.w3.org/TR/webauthn-2/#user-handle), is an RP-specific
     * identifier that is up to 64-bytes long. An authenticator conceptually only
     * stores a single credential for a given (rp_id, user_id) pair, but there
     * may be several credentials in Sync. They are prioritised using
     * newly_shadowed_credential_ids and creation_time. See below.
     * (We wish to be able to retain several entities for a single (rp_id,
     * user_id) pair because there’s an edge case where we may wish to revert to
     * an older entry and thus need to keep the older entry around in Sync. The
     * revert could happen on a different device too.)
     * </pre>
     *
     * <code>optional bytes user_id = 4;</code>
     * @param value The userId to set.
     * @return This builder for chaining.
     */
    public Builder setUserId(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setUserId(value);
      return this;
    }
    /**
     * <pre>
     * The user ID, which is also called a “user handle” in WebAuthn
     * (https://www.w3.org/TR/webauthn-2/#user-handle), is an RP-specific
     * identifier that is up to 64-bytes long. An authenticator conceptually only
     * stores a single credential for a given (rp_id, user_id) pair, but there
     * may be several credentials in Sync. They are prioritised using
     * newly_shadowed_credential_ids and creation_time. See below.
     * (We wish to be able to retain several entities for a single (rp_id,
     * user_id) pair because there’s an edge case where we may wish to revert to
     * an older entry and thus need to keep the older entry around in Sync. The
     * revert could happen on a different device too.)
     * </pre>
     *
     * <code>optional bytes user_id = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearUserId() {
      copyOnWrite();
      instance.clearUserId();
      return this;
    }

    /**
     * <pre>
     * The id of credentials with the same (rp_id, user_id) that were
     * shadowed by the creation of this entity.
     * A credential is shadowed if one or more other credentials (from the same
     * account, and with the same (rp_id, user_id)) include its credential_id in
     * their list of shadowed IDs. Shadowed credentials are ignored when finding
     * a credential to sign with. If there is more than one candidate remaining
     * after filtering shadowed credentials then the most recently created (based
     * on creation_time) is used.
     * The reason for all this is that sites can replace a credential by creating
     * another one with the same (rp_id, user_id) pair. However, we don't
     * immediately know whether the WebAuthn response reached the website's
     * server. Consider a user with a poor internet connection. Javascript in the
     * site's origin triggers a credential creation that “overwrites” an existing
     * credential, but the Javascript is unable to send the new public key to the
     * website's server. The user is now locked out: the old credential has been
     * over-written but the website's server doesn't know about the new one.
     * Thus we wish to keep “overwritten” credentials around for a while to allow
     * for some sort of recovery. In the simple case, a new credential shadows
     * the single, previous old credential. We could depend on creation_time, but
     * client clocks aren't always accurate, thus this field.
     * In complicated cases two devices might race to replace a credential, in
     * which case (after mutual syncing) two candidate credentials exist for the
     * same (rp_id, user_id) pair because neither shadows the other. In this case
     * we pick the newest based on |creation_time| but it's quite possible that
     * some recovery will be needed because the website's server thinks the other
     * one is correct.
     * A generation counter isn't used because a single device might replace a
     * series of credentials as it tries to update the website's server. But that
     * doesn't mean that it should dominate a different device that replaced it
     * only once, but later.
     * </pre>
     *
     * <code>repeated bytes newly_shadowed_credential_ids = 5;</code>
     * @return A list containing the newlyShadowedCredentialIds.
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.ByteString>
        getNewlyShadowedCredentialIdsList() {
      return java.util.Collections.unmodifiableList(
          instance.getNewlyShadowedCredentialIdsList());
    }
    /**
     * <pre>
     * The id of credentials with the same (rp_id, user_id) that were
     * shadowed by the creation of this entity.
     * A credential is shadowed if one or more other credentials (from the same
     * account, and with the same (rp_id, user_id)) include its credential_id in
     * their list of shadowed IDs. Shadowed credentials are ignored when finding
     * a credential to sign with. If there is more than one candidate remaining
     * after filtering shadowed credentials then the most recently created (based
     * on creation_time) is used.
     * The reason for all this is that sites can replace a credential by creating
     * another one with the same (rp_id, user_id) pair. However, we don't
     * immediately know whether the WebAuthn response reached the website's
     * server. Consider a user with a poor internet connection. Javascript in the
     * site's origin triggers a credential creation that “overwrites” an existing
     * credential, but the Javascript is unable to send the new public key to the
     * website's server. The user is now locked out: the old credential has been
     * over-written but the website's server doesn't know about the new one.
     * Thus we wish to keep “overwritten” credentials around for a while to allow
     * for some sort of recovery. In the simple case, a new credential shadows
     * the single, previous old credential. We could depend on creation_time, but
     * client clocks aren't always accurate, thus this field.
     * In complicated cases two devices might race to replace a credential, in
     * which case (after mutual syncing) two candidate credentials exist for the
     * same (rp_id, user_id) pair because neither shadows the other. In this case
     * we pick the newest based on |creation_time| but it's quite possible that
     * some recovery will be needed because the website's server thinks the other
     * one is correct.
     * A generation counter isn't used because a single device might replace a
     * series of credentials as it tries to update the website's server. But that
     * doesn't mean that it should dominate a different device that replaced it
     * only once, but later.
     * </pre>
     *
     * <code>repeated bytes newly_shadowed_credential_ids = 5;</code>
     * @return The count of newlyShadowedCredentialIds.
     */
    @java.lang.Override
    public int getNewlyShadowedCredentialIdsCount() {
      return instance.getNewlyShadowedCredentialIdsCount();
    }
    /**
     * <pre>
     * The id of credentials with the same (rp_id, user_id) that were
     * shadowed by the creation of this entity.
     * A credential is shadowed if one or more other credentials (from the same
     * account, and with the same (rp_id, user_id)) include its credential_id in
     * their list of shadowed IDs. Shadowed credentials are ignored when finding
     * a credential to sign with. If there is more than one candidate remaining
     * after filtering shadowed credentials then the most recently created (based
     * on creation_time) is used.
     * The reason for all this is that sites can replace a credential by creating
     * another one with the same (rp_id, user_id) pair. However, we don't
     * immediately know whether the WebAuthn response reached the website's
     * server. Consider a user with a poor internet connection. Javascript in the
     * site's origin triggers a credential creation that “overwrites” an existing
     * credential, but the Javascript is unable to send the new public key to the
     * website's server. The user is now locked out: the old credential has been
     * over-written but the website's server doesn't know about the new one.
     * Thus we wish to keep “overwritten” credentials around for a while to allow
     * for some sort of recovery. In the simple case, a new credential shadows
     * the single, previous old credential. We could depend on creation_time, but
     * client clocks aren't always accurate, thus this field.
     * In complicated cases two devices might race to replace a credential, in
     * which case (after mutual syncing) two candidate credentials exist for the
     * same (rp_id, user_id) pair because neither shadows the other. In this case
     * we pick the newest based on |creation_time| but it's quite possible that
     * some recovery will be needed because the website's server thinks the other
     * one is correct.
     * A generation counter isn't used because a single device might replace a
     * series of credentials as it tries to update the website's server. But that
     * doesn't mean that it should dominate a different device that replaced it
     * only once, but later.
     * </pre>
     *
     * <code>repeated bytes newly_shadowed_credential_ids = 5;</code>
     * @param index The index of the element to return.
     * @return The newlyShadowedCredentialIds at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getNewlyShadowedCredentialIds(int index) {
      return instance.getNewlyShadowedCredentialIds(index);
    }
    /**
     * <pre>
     * The id of credentials with the same (rp_id, user_id) that were
     * shadowed by the creation of this entity.
     * A credential is shadowed if one or more other credentials (from the same
     * account, and with the same (rp_id, user_id)) include its credential_id in
     * their list of shadowed IDs. Shadowed credentials are ignored when finding
     * a credential to sign with. If there is more than one candidate remaining
     * after filtering shadowed credentials then the most recently created (based
     * on creation_time) is used.
     * The reason for all this is that sites can replace a credential by creating
     * another one with the same (rp_id, user_id) pair. However, we don't
     * immediately know whether the WebAuthn response reached the website's
     * server. Consider a user with a poor internet connection. Javascript in the
     * site's origin triggers a credential creation that “overwrites” an existing
     * credential, but the Javascript is unable to send the new public key to the
     * website's server. The user is now locked out: the old credential has been
     * over-written but the website's server doesn't know about the new one.
     * Thus we wish to keep “overwritten” credentials around for a while to allow
     * for some sort of recovery. In the simple case, a new credential shadows
     * the single, previous old credential. We could depend on creation_time, but
     * client clocks aren't always accurate, thus this field.
     * In complicated cases two devices might race to replace a credential, in
     * which case (after mutual syncing) two candidate credentials exist for the
     * same (rp_id, user_id) pair because neither shadows the other. In this case
     * we pick the newest based on |creation_time| but it's quite possible that
     * some recovery will be needed because the website's server thinks the other
     * one is correct.
     * A generation counter isn't used because a single device might replace a
     * series of credentials as it tries to update the website's server. But that
     * doesn't mean that it should dominate a different device that replaced it
     * only once, but later.
     * </pre>
     *
     * <code>repeated bytes newly_shadowed_credential_ids = 5;</code>
     * @param value The newlyShadowedCredentialIds to set.
     * @return This builder for chaining.
     */
    public Builder setNewlyShadowedCredentialIds(
        int index, com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNewlyShadowedCredentialIds(index, value);
      return this;
    }
    /**
     * <pre>
     * The id of credentials with the same (rp_id, user_id) that were
     * shadowed by the creation of this entity.
     * A credential is shadowed if one or more other credentials (from the same
     * account, and with the same (rp_id, user_id)) include its credential_id in
     * their list of shadowed IDs. Shadowed credentials are ignored when finding
     * a credential to sign with. If there is more than one candidate remaining
     * after filtering shadowed credentials then the most recently created (based
     * on creation_time) is used.
     * The reason for all this is that sites can replace a credential by creating
     * another one with the same (rp_id, user_id) pair. However, we don't
     * immediately know whether the WebAuthn response reached the website's
     * server. Consider a user with a poor internet connection. Javascript in the
     * site's origin triggers a credential creation that “overwrites” an existing
     * credential, but the Javascript is unable to send the new public key to the
     * website's server. The user is now locked out: the old credential has been
     * over-written but the website's server doesn't know about the new one.
     * Thus we wish to keep “overwritten” credentials around for a while to allow
     * for some sort of recovery. In the simple case, a new credential shadows
     * the single, previous old credential. We could depend on creation_time, but
     * client clocks aren't always accurate, thus this field.
     * In complicated cases two devices might race to replace a credential, in
     * which case (after mutual syncing) two candidate credentials exist for the
     * same (rp_id, user_id) pair because neither shadows the other. In this case
     * we pick the newest based on |creation_time| but it's quite possible that
     * some recovery will be needed because the website's server thinks the other
     * one is correct.
     * A generation counter isn't used because a single device might replace a
     * series of credentials as it tries to update the website's server. But that
     * doesn't mean that it should dominate a different device that replaced it
     * only once, but later.
     * </pre>
     *
     * <code>repeated bytes newly_shadowed_credential_ids = 5;</code>
     * @param value The newlyShadowedCredentialIds to add.
     * @return This builder for chaining.
     */
    public Builder addNewlyShadowedCredentialIds(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.addNewlyShadowedCredentialIds(value);
      return this;
    }
    /**
     * <pre>
     * The id of credentials with the same (rp_id, user_id) that were
     * shadowed by the creation of this entity.
     * A credential is shadowed if one or more other credentials (from the same
     * account, and with the same (rp_id, user_id)) include its credential_id in
     * their list of shadowed IDs. Shadowed credentials are ignored when finding
     * a credential to sign with. If there is more than one candidate remaining
     * after filtering shadowed credentials then the most recently created (based
     * on creation_time) is used.
     * The reason for all this is that sites can replace a credential by creating
     * another one with the same (rp_id, user_id) pair. However, we don't
     * immediately know whether the WebAuthn response reached the website's
     * server. Consider a user with a poor internet connection. Javascript in the
     * site's origin triggers a credential creation that “overwrites” an existing
     * credential, but the Javascript is unable to send the new public key to the
     * website's server. The user is now locked out: the old credential has been
     * over-written but the website's server doesn't know about the new one.
     * Thus we wish to keep “overwritten” credentials around for a while to allow
     * for some sort of recovery. In the simple case, a new credential shadows
     * the single, previous old credential. We could depend on creation_time, but
     * client clocks aren't always accurate, thus this field.
     * In complicated cases two devices might race to replace a credential, in
     * which case (after mutual syncing) two candidate credentials exist for the
     * same (rp_id, user_id) pair because neither shadows the other. In this case
     * we pick the newest based on |creation_time| but it's quite possible that
     * some recovery will be needed because the website's server thinks the other
     * one is correct.
     * A generation counter isn't used because a single device might replace a
     * series of credentials as it tries to update the website's server. But that
     * doesn't mean that it should dominate a different device that replaced it
     * only once, but later.
     * </pre>
     *
     * <code>repeated bytes newly_shadowed_credential_ids = 5;</code>
     * @param values The newlyShadowedCredentialIds to add.
     * @return This builder for chaining.
     */
    public Builder addAllNewlyShadowedCredentialIds(
        java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
      copyOnWrite();
      instance.addAllNewlyShadowedCredentialIds(values);
      return this;
    }
    /**
     * <pre>
     * The id of credentials with the same (rp_id, user_id) that were
     * shadowed by the creation of this entity.
     * A credential is shadowed if one or more other credentials (from the same
     * account, and with the same (rp_id, user_id)) include its credential_id in
     * their list of shadowed IDs. Shadowed credentials are ignored when finding
     * a credential to sign with. If there is more than one candidate remaining
     * after filtering shadowed credentials then the most recently created (based
     * on creation_time) is used.
     * The reason for all this is that sites can replace a credential by creating
     * another one with the same (rp_id, user_id) pair. However, we don't
     * immediately know whether the WebAuthn response reached the website's
     * server. Consider a user with a poor internet connection. Javascript in the
     * site's origin triggers a credential creation that “overwrites” an existing
     * credential, but the Javascript is unable to send the new public key to the
     * website's server. The user is now locked out: the old credential has been
     * over-written but the website's server doesn't know about the new one.
     * Thus we wish to keep “overwritten” credentials around for a while to allow
     * for some sort of recovery. In the simple case, a new credential shadows
     * the single, previous old credential. We could depend on creation_time, but
     * client clocks aren't always accurate, thus this field.
     * In complicated cases two devices might race to replace a credential, in
     * which case (after mutual syncing) two candidate credentials exist for the
     * same (rp_id, user_id) pair because neither shadows the other. In this case
     * we pick the newest based on |creation_time| but it's quite possible that
     * some recovery will be needed because the website's server thinks the other
     * one is correct.
     * A generation counter isn't used because a single device might replace a
     * series of credentials as it tries to update the website's server. But that
     * doesn't mean that it should dominate a different device that replaced it
     * only once, but later.
     * </pre>
     *
     * <code>repeated bytes newly_shadowed_credential_ids = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearNewlyShadowedCredentialIds() {
      copyOnWrite();
      instance.clearNewlyShadowedCredentialIds();
      return this;
    }

    /**
     * <pre>
     * The local time on the device when this credential was created. Given in
     * milliseconds since the UNIX epoch. This is used to break ties between
     * credentials. See newly_shadowed_credential_ids.
     * </pre>
     *
     * <code>optional int64 creation_time = 6;</code>
     * @return Whether the creationTime field is set.
     */
    @java.lang.Override
    public boolean hasCreationTime() {
      return instance.hasCreationTime();
    }
    /**
     * <pre>
     * The local time on the device when this credential was created. Given in
     * milliseconds since the UNIX epoch. This is used to break ties between
     * credentials. See newly_shadowed_credential_ids.
     * </pre>
     *
     * <code>optional int64 creation_time = 6;</code>
     * @return The creationTime.
     */
    @java.lang.Override
    public long getCreationTime() {
      return instance.getCreationTime();
    }
    /**
     * <pre>
     * The local time on the device when this credential was created. Given in
     * milliseconds since the UNIX epoch. This is used to break ties between
     * credentials. See newly_shadowed_credential_ids.
     * </pre>
     *
     * <code>optional int64 creation_time = 6;</code>
     * @param value The creationTime to set.
     * @return This builder for chaining.
     */
    public Builder setCreationTime(long value) {
      copyOnWrite();
      instance.setCreationTime(value);
      return this;
    }
    /**
     * <pre>
     * The local time on the device when this credential was created. Given in
     * milliseconds since the UNIX epoch. This is used to break ties between
     * credentials. See newly_shadowed_credential_ids.
     * </pre>
     *
     * <code>optional int64 creation_time = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearCreationTime() {
      copyOnWrite();
      instance.clearCreationTime();
      return this;
    }

    /**
     * <pre>
     * The human-readable account identifier. Usually an email address.
     * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialentity-name
     * </pre>
     *
     * <code>optional string user_name = 7;</code>
     * @return Whether the userName field is set.
     */
    @java.lang.Override
    public boolean hasUserName() {
      return instance.hasUserName();
    }
    /**
     * <pre>
     * The human-readable account identifier. Usually an email address.
     * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialentity-name
     * </pre>
     *
     * <code>optional string user_name = 7;</code>
     * @return The userName.
     */
    @java.lang.Override
    public java.lang.String getUserName() {
      return instance.getUserName();
    }
    /**
     * <pre>
     * The human-readable account identifier. Usually an email address.
     * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialentity-name
     * </pre>
     *
     * <code>optional string user_name = 7;</code>
     * @return The bytes for userName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUserNameBytes() {
      return instance.getUserNameBytes();
    }
    /**
     * <pre>
     * The human-readable account identifier. Usually an email address.
     * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialentity-name
     * </pre>
     *
     * <code>optional string user_name = 7;</code>
     * @param value The userName to set.
     * @return This builder for chaining.
     */
    public Builder setUserName(
        java.lang.String value) {
      copyOnWrite();
      instance.setUserName(value);
      return this;
    }
    /**
     * <pre>
     * The human-readable account identifier. Usually an email address.
     * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialentity-name
     * </pre>
     *
     * <code>optional string user_name = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearUserName() {
      copyOnWrite();
      instance.clearUserName();
      return this;
    }
    /**
     * <pre>
     * The human-readable account identifier. Usually an email address.
     * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialentity-name
     * </pre>
     *
     * <code>optional string user_name = 7;</code>
     * @param value The bytes for userName to set.
     * @return This builder for chaining.
     */
    public Builder setUserNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setUserNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * The human-readable name. Usually a legal name. This is the only mutable
     * field in a credential.
     * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialuserentity-displayname.
     * </pre>
     *
     * <code>optional string user_display_name = 8;</code>
     * @return Whether the userDisplayName field is set.
     */
    @java.lang.Override
    public boolean hasUserDisplayName() {
      return instance.hasUserDisplayName();
    }
    /**
     * <pre>
     * The human-readable name. Usually a legal name. This is the only mutable
     * field in a credential.
     * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialuserentity-displayname.
     * </pre>
     *
     * <code>optional string user_display_name = 8;</code>
     * @return The userDisplayName.
     */
    @java.lang.Override
    public java.lang.String getUserDisplayName() {
      return instance.getUserDisplayName();
    }
    /**
     * <pre>
     * The human-readable name. Usually a legal name. This is the only mutable
     * field in a credential.
     * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialuserentity-displayname.
     * </pre>
     *
     * <code>optional string user_display_name = 8;</code>
     * @return The bytes for userDisplayName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUserDisplayNameBytes() {
      return instance.getUserDisplayNameBytes();
    }
    /**
     * <pre>
     * The human-readable name. Usually a legal name. This is the only mutable
     * field in a credential.
     * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialuserentity-displayname.
     * </pre>
     *
     * <code>optional string user_display_name = 8;</code>
     * @param value The userDisplayName to set.
     * @return This builder for chaining.
     */
    public Builder setUserDisplayName(
        java.lang.String value) {
      copyOnWrite();
      instance.setUserDisplayName(value);
      return this;
    }
    /**
     * <pre>
     * The human-readable name. Usually a legal name. This is the only mutable
     * field in a credential.
     * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialuserentity-displayname.
     * </pre>
     *
     * <code>optional string user_display_name = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearUserDisplayName() {
      copyOnWrite();
      instance.clearUserDisplayName();
      return this;
    }
    /**
     * <pre>
     * The human-readable name. Usually a legal name. This is the only mutable
     * field in a credential.
     * https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialuserentity-displayname.
     * </pre>
     *
     * <code>optional string user_display_name = 8;</code>
     * @param value The bytes for userDisplayName to set.
     * @return This builder for chaining.
     */
    public Builder setUserDisplayNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setUserDisplayNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * The bytes of the private key, in a format known to the consumers of these
     * sync entities. In the future the private key may be encrypted with a
     * different key and then stored in a future encrypted_private_key field.
     * </pre>
     *
     * <code>optional bytes private_key = 9;</code>
     * @return Whether the privateKey field is set.
     */
    @java.lang.Override
    public boolean hasPrivateKey() {
      return instance.hasPrivateKey();
    }
    /**
     * <pre>
     * The bytes of the private key, in a format known to the consumers of these
     * sync entities. In the future the private key may be encrypted with a
     * different key and then stored in a future encrypted_private_key field.
     * </pre>
     *
     * <code>optional bytes private_key = 9;</code>
     * @return The privateKey.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPrivateKey() {
      return instance.getPrivateKey();
    }
    /**
     * <pre>
     * The bytes of the private key, in a format known to the consumers of these
     * sync entities. In the future the private key may be encrypted with a
     * different key and then stored in a future encrypted_private_key field.
     * </pre>
     *
     * <code>optional bytes private_key = 9;</code>
     * @param value The privateKey to set.
     * @return This builder for chaining.
     */
    public Builder setPrivateKey(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPrivateKey(value);
      return this;
    }
    /**
     * <pre>
     * The bytes of the private key, in a format known to the consumers of these
     * sync entities. In the future the private key may be encrypted with a
     * different key and then stored in a future encrypted_private_key field.
     * </pre>
     *
     * <code>optional bytes private_key = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearPrivateKey() {
      copyOnWrite();
      instance.clearPrivateKey();
      return this;
    }

    /**
     * <pre>
     * Credentials may optionally be enabled for Secure Payment Confirmation[1] on
     * third-party sites. This is opt-in at creation time.
     * [1] https://www.w3.org/TR/secure-payment-confirmation/
     * </pre>
     *
     * <code>optional bool third_party_payments_support = 11;</code>
     * @return Whether the thirdPartyPaymentsSupport field is set.
     */
    @java.lang.Override
    public boolean hasThirdPartyPaymentsSupport() {
      return instance.hasThirdPartyPaymentsSupport();
    }
    /**
     * <pre>
     * Credentials may optionally be enabled for Secure Payment Confirmation[1] on
     * third-party sites. This is opt-in at creation time.
     * [1] https://www.w3.org/TR/secure-payment-confirmation/
     * </pre>
     *
     * <code>optional bool third_party_payments_support = 11;</code>
     * @return The thirdPartyPaymentsSupport.
     */
    @java.lang.Override
    public boolean getThirdPartyPaymentsSupport() {
      return instance.getThirdPartyPaymentsSupport();
    }
    /**
     * <pre>
     * Credentials may optionally be enabled for Secure Payment Confirmation[1] on
     * third-party sites. This is opt-in at creation time.
     * [1] https://www.w3.org/TR/secure-payment-confirmation/
     * </pre>
     *
     * <code>optional bool third_party_payments_support = 11;</code>
     * @param value The thirdPartyPaymentsSupport to set.
     * @return This builder for chaining.
     */
    public Builder setThirdPartyPaymentsSupport(boolean value) {
      copyOnWrite();
      instance.setThirdPartyPaymentsSupport(value);
      return this;
    }
    /**
     * <pre>
     * Credentials may optionally be enabled for Secure Payment Confirmation[1] on
     * third-party sites. This is opt-in at creation time.
     * [1] https://www.w3.org/TR/secure-payment-confirmation/
     * </pre>
     *
     * <code>optional bool third_party_payments_support = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearThirdPartyPaymentsSupport() {
      copyOnWrite();
      instance.clearThirdPartyPaymentsSupport();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.WebauthnCredentialSpecifics)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.WebauthnCredentialSpecifics();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "syncId_",
            "credentialId_",
            "rpId_",
            "userId_",
            "newlyShadowedCredentialIds_",
            "creationTime_",
            "userName_",
            "userDisplayName_",
            "privateKey_",
            "thirdPartyPaymentsSupport_",
          };
          java.lang.String info =
              "\u0001\n\u0000\u0001\u0001\u000b\n\u0000\u0001\u0000\u0001\u100a\u0000\u0002\u100a" +
              "\u0001\u0003\u1008\u0002\u0004\u100a\u0003\u0005\u001c\u0006\u1002\u0004\u0007\u1008" +
              "\u0005\b\u1008\u0006\t\u100a\u0007\u000b\u1007\b";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.components.sync.protocol.WebauthnCredentialSpecifics> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.components.sync.protocol.WebauthnCredentialSpecifics.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.components.sync.protocol.WebauthnCredentialSpecifics>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.WebauthnCredentialSpecifics)
  private static final org.chromium.components.sync.protocol.WebauthnCredentialSpecifics DEFAULT_INSTANCE;
  static {
    WebauthnCredentialSpecifics defaultInstance = new WebauthnCredentialSpecifics();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      WebauthnCredentialSpecifics.class, defaultInstance);
  }

  public static org.chromium.components.sync.protocol.WebauthnCredentialSpecifics getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<WebauthnCredentialSpecifics> PARSER;

  public static com.google.protobuf.Parser<WebauthnCredentialSpecifics> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

