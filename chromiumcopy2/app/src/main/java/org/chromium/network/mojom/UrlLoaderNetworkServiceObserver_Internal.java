// UrlLoaderNetworkServiceObserver_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/url_loader_network_service_observer.mojom
//

package org.chromium.network.mojom;

import androidx.annotation.IntDef;


class UrlLoaderNetworkServiceObserver_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<UrlLoaderNetworkServiceObserver, UrlLoaderNetworkServiceObserver.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<UrlLoaderNetworkServiceObserver, UrlLoaderNetworkServiceObserver.Proxy>() {

        @Override
        public String getName() {
            return "network.mojom.URLLoaderNetworkServiceObserver";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, UrlLoaderNetworkServiceObserver impl) {
            return new Stub(core, impl);
        }

        @Override
        public UrlLoaderNetworkServiceObserver[] buildArray(int size) {
          return new UrlLoaderNetworkServiceObserver[size];
        }
    };


    private static final int ON_SSL_CERTIFICATE_ERROR_ORDINAL = 0;

    private static final int ON_CERTIFICATE_REQUESTED_ORDINAL = 1;

    private static final int ON_AUTH_REQUIRED_ORDINAL = 2;

    private static final int ON_CLEAR_SITE_DATA_ORDINAL = 3;

    private static final int ON_LOADING_STATE_UPDATE_ORDINAL = 4;

    private static final int ON_DATA_USE_UPDATE_ORDINAL = 5;

    private static final int CLONE_ORDINAL = 6;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements UrlLoaderNetworkServiceObserver.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void onSslCertificateError(
org.chromium.url.mojom.Url url, int netError, SslInfo sslInfo, boolean fatal, 
OnSslCertificateError_Response callback) {

            UrlLoaderNetworkServiceObserverOnSslCertificateErrorParams _message = new UrlLoaderNetworkServiceObserverOnSslCertificateErrorParams();

            _message.url = url;

            _message.netError = netError;

            _message.sslInfo = sslInfo;

            _message.fatal = fatal;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_SSL_CERTIFICATE_ERROR_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new UrlLoaderNetworkServiceObserverOnSslCertificateErrorResponseParamsForwardToCallback(callback));

        }


        @Override
        public void onCertificateRequested(
org.chromium.mojo_base.mojom.UnguessableToken windowId, SslCertRequestInfo certInfo, ClientCertificateResponder certResponder) {

            UrlLoaderNetworkServiceObserverOnCertificateRequestedParams _message = new UrlLoaderNetworkServiceObserverOnCertificateRequestedParams();

            _message.windowId = windowId;

            _message.certInfo = certInfo;

            _message.certResponder = certResponder;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_CERTIFICATE_REQUESTED_ORDINAL)));

        }


        @Override
        public void onAuthRequired(
org.chromium.mojo_base.mojom.UnguessableToken windowId, int requestId, org.chromium.url.mojom.Url url, boolean firstAuthAttempt, AuthChallengeInfo authInfo, HttpResponseHeaders headHeaders, AuthChallengeResponder authChallengeResponder) {

            UrlLoaderNetworkServiceObserverOnAuthRequiredParams _message = new UrlLoaderNetworkServiceObserverOnAuthRequiredParams();

            _message.windowId = windowId;

            _message.requestId = requestId;

            _message.url = url;

            _message.firstAuthAttempt = firstAuthAttempt;

            _message.authInfo = authInfo;

            _message.headHeaders = headHeaders;

            _message.authChallengeResponder = authChallengeResponder;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_AUTH_REQUIRED_ORDINAL)));

        }


        @Override
        public void onClearSiteData(
org.chromium.url.mojom.Url url, String headerValue, int loadFlags, CookiePartitionKey cookiePartitionKey, 
OnClearSiteData_Response callback) {

            UrlLoaderNetworkServiceObserverOnClearSiteDataParams _message = new UrlLoaderNetworkServiceObserverOnClearSiteDataParams();

            _message.url = url;

            _message.headerValue = headerValue;

            _message.loadFlags = loadFlags;

            _message.cookiePartitionKey = cookiePartitionKey;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_CLEAR_SITE_DATA_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new UrlLoaderNetworkServiceObserverOnClearSiteDataResponseParamsForwardToCallback(callback));

        }


        @Override
        public void onLoadingStateUpdate(
LoadInfo info, 
OnLoadingStateUpdate_Response callback) {

            UrlLoaderNetworkServiceObserverOnLoadingStateUpdateParams _message = new UrlLoaderNetworkServiceObserverOnLoadingStateUpdateParams();

            _message.info = info;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_LOADING_STATE_UPDATE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new UrlLoaderNetworkServiceObserverOnLoadingStateUpdateResponseParamsForwardToCallback(callback));

        }


        @Override
        public void onDataUseUpdate(
int networkTrafficAnnotationIdHash, long recvBytes, long sentBytes) {

            UrlLoaderNetworkServiceObserverOnDataUseUpdateParams _message = new UrlLoaderNetworkServiceObserverOnDataUseUpdateParams();

            _message.networkTrafficAnnotationIdHash = networkTrafficAnnotationIdHash;

            _message.recvBytes = recvBytes;

            _message.sentBytes = sentBytes;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_DATA_USE_UPDATE_ORDINAL)));

        }


        @Override
        public void clone(
org.chromium.mojo.bindings.InterfaceRequest<UrlLoaderNetworkServiceObserver> listener) {

            UrlLoaderNetworkServiceObserverCloneParams _message = new UrlLoaderNetworkServiceObserverCloneParams();

            _message.listener = listener;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CLONE_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<UrlLoaderNetworkServiceObserver> {

        Stub(org.chromium.mojo.system.Core core, UrlLoaderNetworkServiceObserver impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                UrlLoaderNetworkServiceObserver_Internal.MANAGER, messageWithHeader);







                    case ON_CERTIFICATE_REQUESTED_ORDINAL: {

                        UrlLoaderNetworkServiceObserverOnCertificateRequestedParams data =
                                UrlLoaderNetworkServiceObserverOnCertificateRequestedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onCertificateRequested(data.windowId, data.certInfo, data.certResponder);
                        return true;
                    }





                    case ON_AUTH_REQUIRED_ORDINAL: {

                        UrlLoaderNetworkServiceObserverOnAuthRequiredParams data =
                                UrlLoaderNetworkServiceObserverOnAuthRequiredParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onAuthRequired(data.windowId, data.requestId, data.url, data.firstAuthAttempt, data.authInfo, data.headHeaders, data.authChallengeResponder);
                        return true;
                    }









                    case ON_DATA_USE_UPDATE_ORDINAL: {

                        UrlLoaderNetworkServiceObserverOnDataUseUpdateParams data =
                                UrlLoaderNetworkServiceObserverOnDataUseUpdateParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onDataUseUpdate(data.networkTrafficAnnotationIdHash, data.recvBytes, data.sentBytes);
                        return true;
                    }





                    case CLONE_ORDINAL: {

                        UrlLoaderNetworkServiceObserverCloneParams data =
                                UrlLoaderNetworkServiceObserverCloneParams.deserialize(messageWithHeader.getPayload());

                        getImpl().clone(data.listener);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), UrlLoaderNetworkServiceObserver_Internal.MANAGER, messageWithHeader, receiver);







                    case ON_SSL_CERTIFICATE_ERROR_ORDINAL: {

                        UrlLoaderNetworkServiceObserverOnSslCertificateErrorParams data =
                                UrlLoaderNetworkServiceObserverOnSslCertificateErrorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onSslCertificateError(data.url, data.netError, data.sslInfo, data.fatal, new UrlLoaderNetworkServiceObserverOnSslCertificateErrorResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }











                    case ON_CLEAR_SITE_DATA_ORDINAL: {

                        UrlLoaderNetworkServiceObserverOnClearSiteDataParams data =
                                UrlLoaderNetworkServiceObserverOnClearSiteDataParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onClearSiteData(data.url, data.headerValue, data.loadFlags, data.cookiePartitionKey, new UrlLoaderNetworkServiceObserverOnClearSiteDataResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case ON_LOADING_STATE_UPDATE_ORDINAL: {

                        UrlLoaderNetworkServiceObserverOnLoadingStateUpdateParams data =
                                UrlLoaderNetworkServiceObserverOnLoadingStateUpdateParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onLoadingStateUpdate(data.info, new UrlLoaderNetworkServiceObserverOnLoadingStateUpdateResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }






                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class UrlLoaderNetworkServiceObserverOnSslCertificateErrorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url url;
        public int netError;
        public SslInfo sslInfo;
        public boolean fatal;

        private UrlLoaderNetworkServiceObserverOnSslCertificateErrorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public UrlLoaderNetworkServiceObserverOnSslCertificateErrorParams() {
            this(0);
        }

        public static UrlLoaderNetworkServiceObserverOnSslCertificateErrorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static UrlLoaderNetworkServiceObserverOnSslCertificateErrorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static UrlLoaderNetworkServiceObserverOnSslCertificateErrorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            UrlLoaderNetworkServiceObserverOnSslCertificateErrorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new UrlLoaderNetworkServiceObserverOnSslCertificateErrorParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    result.netError = decoder0.readInt(16);
                    }
                    {
                        
                    result.fatal = decoder0.readBoolean(20, 0);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.sslInfo = SslInfo.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.url, 8, false);
            
            encoder0.encode(this.netError, 16);
            
            encoder0.encode(this.fatal, 20, 0);
            
            encoder0.encode(this.sslInfo, 24, false);
        }
    }



    
    static final class UrlLoaderNetworkServiceObserverOnSslCertificateErrorResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int netError;

        private UrlLoaderNetworkServiceObserverOnSslCertificateErrorResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public UrlLoaderNetworkServiceObserverOnSslCertificateErrorResponseParams() {
            this(0);
        }

        public static UrlLoaderNetworkServiceObserverOnSslCertificateErrorResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static UrlLoaderNetworkServiceObserverOnSslCertificateErrorResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static UrlLoaderNetworkServiceObserverOnSslCertificateErrorResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            UrlLoaderNetworkServiceObserverOnSslCertificateErrorResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new UrlLoaderNetworkServiceObserverOnSslCertificateErrorResponseParams(elementsOrVersion);
                    {
                        
                    result.netError = decoder0.readInt(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.netError, 8);
        }
    }

    static class UrlLoaderNetworkServiceObserverOnSslCertificateErrorResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final UrlLoaderNetworkServiceObserver.OnSslCertificateError_Response mCallback;

        UrlLoaderNetworkServiceObserverOnSslCertificateErrorResponseParamsForwardToCallback(UrlLoaderNetworkServiceObserver.OnSslCertificateError_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ON_SSL_CERTIFICATE_ERROR_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                UrlLoaderNetworkServiceObserverOnSslCertificateErrorResponseParams response = UrlLoaderNetworkServiceObserverOnSslCertificateErrorResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.netError);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class UrlLoaderNetworkServiceObserverOnSslCertificateErrorResponseParamsProxyToResponder implements UrlLoaderNetworkServiceObserver.OnSslCertificateError_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        UrlLoaderNetworkServiceObserverOnSslCertificateErrorResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer netError) {
            UrlLoaderNetworkServiceObserverOnSslCertificateErrorResponseParams _response = new UrlLoaderNetworkServiceObserverOnSslCertificateErrorResponseParams();

            _response.netError = netError;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_SSL_CERTIFICATE_ERROR_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class UrlLoaderNetworkServiceObserverOnCertificateRequestedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken windowId;
        public SslCertRequestInfo certInfo;
        public ClientCertificateResponder certResponder;

        private UrlLoaderNetworkServiceObserverOnCertificateRequestedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public UrlLoaderNetworkServiceObserverOnCertificateRequestedParams() {
            this(0);
        }

        public static UrlLoaderNetworkServiceObserverOnCertificateRequestedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static UrlLoaderNetworkServiceObserverOnCertificateRequestedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static UrlLoaderNetworkServiceObserverOnCertificateRequestedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            UrlLoaderNetworkServiceObserverOnCertificateRequestedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new UrlLoaderNetworkServiceObserverOnCertificateRequestedParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.windowId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.certInfo = SslCertRequestInfo.decode(decoder1);
                    }
                    {
                        
                    result.certResponder = decoder0.readServiceInterface(24, false, ClientCertificateResponder.MANAGER);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.windowId, 8, true);
            
            encoder0.encode(this.certInfo, 16, false);
            
            encoder0.encode(this.certResponder, 24, false, ClientCertificateResponder.MANAGER);
        }
    }



    
    static final class UrlLoaderNetworkServiceObserverOnAuthRequiredParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 56;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(56, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken windowId;
        public int requestId;
        public org.chromium.url.mojom.Url url;
        public boolean firstAuthAttempt;
        public AuthChallengeInfo authInfo;
        public HttpResponseHeaders headHeaders;
        public AuthChallengeResponder authChallengeResponder;

        private UrlLoaderNetworkServiceObserverOnAuthRequiredParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public UrlLoaderNetworkServiceObserverOnAuthRequiredParams() {
            this(0);
        }

        public static UrlLoaderNetworkServiceObserverOnAuthRequiredParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static UrlLoaderNetworkServiceObserverOnAuthRequiredParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static UrlLoaderNetworkServiceObserverOnAuthRequiredParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            UrlLoaderNetworkServiceObserverOnAuthRequiredParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new UrlLoaderNetworkServiceObserverOnAuthRequiredParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.windowId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }
                    {
                        
                    result.requestId = decoder0.readInt(16);
                    }
                    {
                        
                    result.firstAuthAttempt = decoder0.readBoolean(20, 0);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.authInfo = AuthChallengeInfo.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, true);
                    result.headHeaders = HttpResponseHeaders.decode(decoder1);
                    }
                    {
                        
                    result.authChallengeResponder = decoder0.readServiceInterface(48, false, AuthChallengeResponder.MANAGER);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.windowId, 8, true);
            
            encoder0.encode(this.requestId, 16);
            
            encoder0.encode(this.firstAuthAttempt, 20, 0);
            
            encoder0.encode(this.url, 24, false);
            
            encoder0.encode(this.authInfo, 32, false);
            
            encoder0.encode(this.headHeaders, 40, true);
            
            encoder0.encode(this.authChallengeResponder, 48, false, AuthChallengeResponder.MANAGER);
        }
    }



    
    static final class UrlLoaderNetworkServiceObserverOnClearSiteDataParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url url;
        public String headerValue;
        public int loadFlags;
        public CookiePartitionKey cookiePartitionKey;

        private UrlLoaderNetworkServiceObserverOnClearSiteDataParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public UrlLoaderNetworkServiceObserverOnClearSiteDataParams() {
            this(0);
        }

        public static UrlLoaderNetworkServiceObserverOnClearSiteDataParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static UrlLoaderNetworkServiceObserverOnClearSiteDataParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static UrlLoaderNetworkServiceObserverOnClearSiteDataParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            UrlLoaderNetworkServiceObserverOnClearSiteDataParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new UrlLoaderNetworkServiceObserverOnClearSiteDataParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    result.headerValue = decoder0.readString(16, false);
                    }
                    {
                        
                    result.loadFlags = decoder0.readInt(24);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, true);
                    result.cookiePartitionKey = CookiePartitionKey.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.url, 8, false);
            
            encoder0.encode(this.headerValue, 16, false);
            
            encoder0.encode(this.loadFlags, 24);
            
            encoder0.encode(this.cookiePartitionKey, 32, true);
        }
    }



    
    static final class UrlLoaderNetworkServiceObserverOnClearSiteDataResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private UrlLoaderNetworkServiceObserverOnClearSiteDataResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public UrlLoaderNetworkServiceObserverOnClearSiteDataResponseParams() {
            this(0);
        }

        public static UrlLoaderNetworkServiceObserverOnClearSiteDataResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static UrlLoaderNetworkServiceObserverOnClearSiteDataResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static UrlLoaderNetworkServiceObserverOnClearSiteDataResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            UrlLoaderNetworkServiceObserverOnClearSiteDataResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new UrlLoaderNetworkServiceObserverOnClearSiteDataResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class UrlLoaderNetworkServiceObserverOnClearSiteDataResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final UrlLoaderNetworkServiceObserver.OnClearSiteData_Response mCallback;

        UrlLoaderNetworkServiceObserverOnClearSiteDataResponseParamsForwardToCallback(UrlLoaderNetworkServiceObserver.OnClearSiteData_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ON_CLEAR_SITE_DATA_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class UrlLoaderNetworkServiceObserverOnClearSiteDataResponseParamsProxyToResponder implements UrlLoaderNetworkServiceObserver.OnClearSiteData_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        UrlLoaderNetworkServiceObserverOnClearSiteDataResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            UrlLoaderNetworkServiceObserverOnClearSiteDataResponseParams _response = new UrlLoaderNetworkServiceObserverOnClearSiteDataResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_CLEAR_SITE_DATA_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class UrlLoaderNetworkServiceObserverOnLoadingStateUpdateParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public LoadInfo info;

        private UrlLoaderNetworkServiceObserverOnLoadingStateUpdateParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public UrlLoaderNetworkServiceObserverOnLoadingStateUpdateParams() {
            this(0);
        }

        public static UrlLoaderNetworkServiceObserverOnLoadingStateUpdateParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static UrlLoaderNetworkServiceObserverOnLoadingStateUpdateParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static UrlLoaderNetworkServiceObserverOnLoadingStateUpdateParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            UrlLoaderNetworkServiceObserverOnLoadingStateUpdateParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new UrlLoaderNetworkServiceObserverOnLoadingStateUpdateParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.info = LoadInfo.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.info, 8, false);
        }
    }



    
    static final class UrlLoaderNetworkServiceObserverOnLoadingStateUpdateResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private UrlLoaderNetworkServiceObserverOnLoadingStateUpdateResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public UrlLoaderNetworkServiceObserverOnLoadingStateUpdateResponseParams() {
            this(0);
        }

        public static UrlLoaderNetworkServiceObserverOnLoadingStateUpdateResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static UrlLoaderNetworkServiceObserverOnLoadingStateUpdateResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static UrlLoaderNetworkServiceObserverOnLoadingStateUpdateResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            UrlLoaderNetworkServiceObserverOnLoadingStateUpdateResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new UrlLoaderNetworkServiceObserverOnLoadingStateUpdateResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class UrlLoaderNetworkServiceObserverOnLoadingStateUpdateResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final UrlLoaderNetworkServiceObserver.OnLoadingStateUpdate_Response mCallback;

        UrlLoaderNetworkServiceObserverOnLoadingStateUpdateResponseParamsForwardToCallback(UrlLoaderNetworkServiceObserver.OnLoadingStateUpdate_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ON_LOADING_STATE_UPDATE_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class UrlLoaderNetworkServiceObserverOnLoadingStateUpdateResponseParamsProxyToResponder implements UrlLoaderNetworkServiceObserver.OnLoadingStateUpdate_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        UrlLoaderNetworkServiceObserverOnLoadingStateUpdateResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            UrlLoaderNetworkServiceObserverOnLoadingStateUpdateResponseParams _response = new UrlLoaderNetworkServiceObserverOnLoadingStateUpdateResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_LOADING_STATE_UPDATE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class UrlLoaderNetworkServiceObserverOnDataUseUpdateParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int networkTrafficAnnotationIdHash;
        public long recvBytes;
        public long sentBytes;

        private UrlLoaderNetworkServiceObserverOnDataUseUpdateParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public UrlLoaderNetworkServiceObserverOnDataUseUpdateParams() {
            this(0);
        }

        public static UrlLoaderNetworkServiceObserverOnDataUseUpdateParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static UrlLoaderNetworkServiceObserverOnDataUseUpdateParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static UrlLoaderNetworkServiceObserverOnDataUseUpdateParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            UrlLoaderNetworkServiceObserverOnDataUseUpdateParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new UrlLoaderNetworkServiceObserverOnDataUseUpdateParams(elementsOrVersion);
                    {
                        
                    result.networkTrafficAnnotationIdHash = decoder0.readInt(8);
                    }
                    {
                        
                    result.recvBytes = decoder0.readLong(16);
                    }
                    {
                        
                    result.sentBytes = decoder0.readLong(24);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.networkTrafficAnnotationIdHash, 8);
            
            encoder0.encode(this.recvBytes, 16);
            
            encoder0.encode(this.sentBytes, 24);
        }
    }



    
    static final class UrlLoaderNetworkServiceObserverCloneParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<UrlLoaderNetworkServiceObserver> listener;

        private UrlLoaderNetworkServiceObserverCloneParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public UrlLoaderNetworkServiceObserverCloneParams() {
            this(0);
        }

        public static UrlLoaderNetworkServiceObserverCloneParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static UrlLoaderNetworkServiceObserverCloneParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static UrlLoaderNetworkServiceObserverCloneParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            UrlLoaderNetworkServiceObserverCloneParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new UrlLoaderNetworkServiceObserverCloneParams(elementsOrVersion);
                    {
                        
                    result.listener = decoder0.readInterfaceRequest(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.listener, 8, false);
        }
    }



}
