// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: android_checkin.proto

#include "android_checkin.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace checkin_proto {
PROTOBUF_CONSTEXPR ChromeBuildProto::ChromeBuildProto(
    ::_pbi::ConstantInitialized)
  : chrome_version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , platform_(1)

  , channel_(1)
{}
struct ChromeBuildProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeBuildProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeBuildProtoDefaultTypeInternal() {}
  union {
    ChromeBuildProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeBuildProtoDefaultTypeInternal _ChromeBuildProto_default_instance_;
PROTOBUF_CONSTEXPR AndroidCheckinProto::AndroidCheckinProto(
    ::_pbi::ConstantInitialized)
  : cell_operator_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sim_operator_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , roaming_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , chrome_build_(nullptr)
  , last_checkin_msec_(int64_t{0})
  , user_number_(0)
  , type_(1)
{}
struct AndroidCheckinProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidCheckinProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidCheckinProtoDefaultTypeInternal() {}
  union {
    AndroidCheckinProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidCheckinProtoDefaultTypeInternal _AndroidCheckinProto_default_instance_;
}  // namespace checkin_proto
namespace checkin_proto {
bool ChromeBuildProto_Platform_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeBuildProto_Platform_strings[6] = {};

static const char ChromeBuildProto_Platform_names[] =
  "PLATFORM_ANDROID"
  "PLATFORM_CROS"
  "PLATFORM_IOS"
  "PLATFORM_LINUX"
  "PLATFORM_MAC"
  "PLATFORM_WIN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeBuildProto_Platform_entries[] = {
  { {ChromeBuildProto_Platform_names + 0, 16}, 6 },
  { {ChromeBuildProto_Platform_names + 16, 13}, 4 },
  { {ChromeBuildProto_Platform_names + 29, 12}, 5 },
  { {ChromeBuildProto_Platform_names + 41, 14}, 3 },
  { {ChromeBuildProto_Platform_names + 55, 12}, 2 },
  { {ChromeBuildProto_Platform_names + 67, 12}, 1 },
};

static const int ChromeBuildProto_Platform_entries_by_number[] = {
  5, // 1 -> PLATFORM_WIN
  4, // 2 -> PLATFORM_MAC
  3, // 3 -> PLATFORM_LINUX
  1, // 4 -> PLATFORM_CROS
  2, // 5 -> PLATFORM_IOS
  0, // 6 -> PLATFORM_ANDROID
};

const std::string& ChromeBuildProto_Platform_Name(
    ChromeBuildProto_Platform value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeBuildProto_Platform_entries,
          ChromeBuildProto_Platform_entries_by_number,
          6, ChromeBuildProto_Platform_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeBuildProto_Platform_entries,
      ChromeBuildProto_Platform_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeBuildProto_Platform_strings[idx].get();
}
bool ChromeBuildProto_Platform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeBuildProto_Platform* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeBuildProto_Platform_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<ChromeBuildProto_Platform>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeBuildProto_Platform ChromeBuildProto::PLATFORM_WIN;
constexpr ChromeBuildProto_Platform ChromeBuildProto::PLATFORM_MAC;
constexpr ChromeBuildProto_Platform ChromeBuildProto::PLATFORM_LINUX;
constexpr ChromeBuildProto_Platform ChromeBuildProto::PLATFORM_CROS;
constexpr ChromeBuildProto_Platform ChromeBuildProto::PLATFORM_IOS;
constexpr ChromeBuildProto_Platform ChromeBuildProto::PLATFORM_ANDROID;
constexpr ChromeBuildProto_Platform ChromeBuildProto::Platform_MIN;
constexpr ChromeBuildProto_Platform ChromeBuildProto::Platform_MAX;
constexpr int ChromeBuildProto::Platform_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ChromeBuildProto_Channel_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeBuildProto_Channel_strings[5] = {};

static const char ChromeBuildProto_Channel_names[] =
  "CHANNEL_BETA"
  "CHANNEL_CANARY"
  "CHANNEL_DEV"
  "CHANNEL_STABLE"
  "CHANNEL_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeBuildProto_Channel_entries[] = {
  { {ChromeBuildProto_Channel_names + 0, 12}, 2 },
  { {ChromeBuildProto_Channel_names + 12, 14}, 4 },
  { {ChromeBuildProto_Channel_names + 26, 11}, 3 },
  { {ChromeBuildProto_Channel_names + 37, 14}, 1 },
  { {ChromeBuildProto_Channel_names + 51, 15}, 5 },
};

static const int ChromeBuildProto_Channel_entries_by_number[] = {
  3, // 1 -> CHANNEL_STABLE
  0, // 2 -> CHANNEL_BETA
  2, // 3 -> CHANNEL_DEV
  1, // 4 -> CHANNEL_CANARY
  4, // 5 -> CHANNEL_UNKNOWN
};

const std::string& ChromeBuildProto_Channel_Name(
    ChromeBuildProto_Channel value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeBuildProto_Channel_entries,
          ChromeBuildProto_Channel_entries_by_number,
          5, ChromeBuildProto_Channel_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeBuildProto_Channel_entries,
      ChromeBuildProto_Channel_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeBuildProto_Channel_strings[idx].get();
}
bool ChromeBuildProto_Channel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeBuildProto_Channel* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeBuildProto_Channel_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ChromeBuildProto_Channel>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeBuildProto_Channel ChromeBuildProto::CHANNEL_STABLE;
constexpr ChromeBuildProto_Channel ChromeBuildProto::CHANNEL_BETA;
constexpr ChromeBuildProto_Channel ChromeBuildProto::CHANNEL_DEV;
constexpr ChromeBuildProto_Channel ChromeBuildProto::CHANNEL_CANARY;
constexpr ChromeBuildProto_Channel ChromeBuildProto::CHANNEL_UNKNOWN;
constexpr ChromeBuildProto_Channel ChromeBuildProto::Channel_MIN;
constexpr ChromeBuildProto_Channel ChromeBuildProto::Channel_MAX;
constexpr int ChromeBuildProto::Channel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool DeviceType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceType_strings[4] = {};

static const char DeviceType_names[] =
  "DEVICE_ANDROID_OS"
  "DEVICE_CHROME_BROWSER"
  "DEVICE_CHROME_OS"
  "DEVICE_IOS_OS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceType_entries[] = {
  { {DeviceType_names + 0, 17}, 1 },
  { {DeviceType_names + 17, 21}, 3 },
  { {DeviceType_names + 38, 16}, 4 },
  { {DeviceType_names + 54, 13}, 2 },
};

static const int DeviceType_entries_by_number[] = {
  0, // 1 -> DEVICE_ANDROID_OS
  3, // 2 -> DEVICE_IOS_OS
  1, // 3 -> DEVICE_CHROME_BROWSER
  2, // 4 -> DEVICE_CHROME_OS
};

const std::string& DeviceType_Name(
    DeviceType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceType_entries,
          DeviceType_entries_by_number,
          4, DeviceType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceType_entries,
      DeviceType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceType_strings[idx].get();
}
bool DeviceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeviceType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DeviceType>(int_value);
  }
  return success;
}

// ===================================================================

class ChromeBuildProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeBuildProto>()._has_bits_);
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chrome_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ChromeBuildProto::ChromeBuildProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:checkin_proto.ChromeBuildProto)
}
ChromeBuildProto::ChromeBuildProto(const ChromeBuildProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  chrome_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chrome_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chrome_version()) {
    chrome_version_.Set(from._internal_chrome_version(), 
      GetArenaForAllocation());
  }
  ::memcpy(&platform_, &from.platform_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&platform_)) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:checkin_proto.ChromeBuildProto)
}

inline void ChromeBuildProto::SharedCtor() {
chrome_version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chrome_version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
platform_ = 1;
channel_ = 1;
}

ChromeBuildProto::~ChromeBuildProto() {
  // @@protoc_insertion_point(destructor:checkin_proto.ChromeBuildProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeBuildProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chrome_version_.Destroy();
}

void ChromeBuildProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChromeBuildProto::Clear() {
// @@protoc_insertion_point(message_clear_start:checkin_proto.ChromeBuildProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      chrome_version_.ClearNonDefaultToEmpty();
    }
    platform_ = 1;
    channel_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeBuildProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .checkin_proto.ChromeBuildProto.Platform platform = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::checkin_proto::ChromeBuildProto_Platform_IsValid(val))) {
            _internal_set_platform(static_cast<::checkin_proto::ChromeBuildProto_Platform>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string chrome_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chrome_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .checkin_proto.ChromeBuildProto.Channel channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::checkin_proto::ChromeBuildProto_Channel_IsValid(val))) {
            _internal_set_channel(static_cast<::checkin_proto::ChromeBuildProto_Channel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeBuildProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:checkin_proto.ChromeBuildProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .checkin_proto.ChromeBuildProto.Platform platform = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_platform(), target);
  }

  // optional string chrome_version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chrome_version(), target);
  }

  // optional .checkin_proto.ChromeBuildProto.Channel channel = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:checkin_proto.ChromeBuildProto)
  return target;
}

size_t ChromeBuildProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:checkin_proto.ChromeBuildProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string chrome_version = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chrome_version());
    }

    // optional .checkin_proto.ChromeBuildProto.Platform platform = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_platform());
    }

    // optional .checkin_proto.ChromeBuildProto.Channel channel = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_channel());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeBuildProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeBuildProto*>(
      &from));
}

void ChromeBuildProto::MergeFrom(const ChromeBuildProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:checkin_proto.ChromeBuildProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_chrome_version(from._internal_chrome_version());
    }
    if (cached_has_bits & 0x00000002u) {
      platform_ = from.platform_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_ = from.channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeBuildProto::CopyFrom(const ChromeBuildProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:checkin_proto.ChromeBuildProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeBuildProto::IsInitialized() const {
  return true;
}

void ChromeBuildProto::InternalSwap(ChromeBuildProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &chrome_version_, lhs_arena,
      &other->chrome_version_, rhs_arena
  );
  swap(platform_, other->platform_);
  swap(channel_, other->channel_);
}

std::string ChromeBuildProto::GetTypeName() const {
  return "checkin_proto.ChromeBuildProto";
}


// ===================================================================

class AndroidCheckinProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidCheckinProto>()._has_bits_);
  static void set_has_last_checkin_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cell_operator(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sim_operator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_roaming(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_number(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::checkin_proto::ChromeBuildProto& chrome_build(const AndroidCheckinProto* msg);
  static void set_has_chrome_build(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::checkin_proto::ChromeBuildProto&
AndroidCheckinProto::_Internal::chrome_build(const AndroidCheckinProto* msg) {
  return *msg->chrome_build_;
}
AndroidCheckinProto::AndroidCheckinProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:checkin_proto.AndroidCheckinProto)
}
AndroidCheckinProto::AndroidCheckinProto(const AndroidCheckinProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  cell_operator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cell_operator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cell_operator()) {
    cell_operator_.Set(from._internal_cell_operator(), 
      GetArenaForAllocation());
  }
  sim_operator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sim_operator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sim_operator()) {
    sim_operator_.Set(from._internal_sim_operator(), 
      GetArenaForAllocation());
  }
  roaming_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roaming_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_roaming()) {
    roaming_.Set(from._internal_roaming(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_chrome_build()) {
    chrome_build_ = new ::checkin_proto::ChromeBuildProto(*from.chrome_build_);
  } else {
    chrome_build_ = nullptr;
  }
  ::memcpy(&last_checkin_msec_, &from.last_checkin_msec_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&last_checkin_msec_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:checkin_proto.AndroidCheckinProto)
}

inline void AndroidCheckinProto::SharedCtor() {
cell_operator_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cell_operator_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sim_operator_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sim_operator_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
roaming_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roaming_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chrome_build_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_number_) -
    reinterpret_cast<char*>(&chrome_build_)) + sizeof(user_number_));
type_ = 1;
}

AndroidCheckinProto::~AndroidCheckinProto() {
  // @@protoc_insertion_point(destructor:checkin_proto.AndroidCheckinProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidCheckinProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cell_operator_.Destroy();
  sim_operator_.Destroy();
  roaming_.Destroy();
  if (this != internal_default_instance()) delete chrome_build_;
}

void AndroidCheckinProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AndroidCheckinProto::Clear() {
// @@protoc_insertion_point(message_clear_start:checkin_proto.AndroidCheckinProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      cell_operator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sim_operator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      roaming_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(chrome_build_ != nullptr);
      chrome_build_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&last_checkin_msec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_number_) -
        reinterpret_cast<char*>(&last_checkin_msec_)) + sizeof(user_number_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AndroidCheckinProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 last_checkin_msec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_last_checkin_msec(&has_bits);
          last_checkin_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cell_operator = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_cell_operator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sim_operator = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_sim_operator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string roaming = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_roaming();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 user_number = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_user_number(&has_bits);
          user_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::checkin_proto::DeviceType_IsValid(val))) {
            _internal_set_type(static_cast<::checkin_proto::DeviceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .checkin_proto.ChromeBuildProto chrome_build = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_build(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidCheckinProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:checkin_proto.AndroidCheckinProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 last_checkin_msec = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_last_checkin_msec(), target);
  }

  // optional string cell_operator = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cell_operator(), target);
  }

  // optional string sim_operator = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_sim_operator(), target);
  }

  // optional string roaming = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_roaming(), target);
  }

  // optional int32 user_number = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_user_number(), target);
  }

  // optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_type(), target);
  }

  // optional .checkin_proto.ChromeBuildProto chrome_build = 13;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::chrome_build(this),
        _Internal::chrome_build(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:checkin_proto.AndroidCheckinProto)
  return target;
}

size_t AndroidCheckinProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:checkin_proto.AndroidCheckinProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string cell_operator = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cell_operator());
    }

    // optional string sim_operator = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sim_operator());
    }

    // optional string roaming = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_roaming());
    }

    // optional .checkin_proto.ChromeBuildProto chrome_build = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_build_);
    }

    // optional int64 last_checkin_msec = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_checkin_msec());
    }

    // optional int32 user_number = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_number());
    }

    // optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndroidCheckinProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AndroidCheckinProto*>(
      &from));
}

void AndroidCheckinProto::MergeFrom(const AndroidCheckinProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:checkin_proto.AndroidCheckinProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cell_operator(from._internal_cell_operator());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sim_operator(from._internal_sim_operator());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_roaming(from._internal_roaming());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_chrome_build()->::checkin_proto::ChromeBuildProto::MergeFrom(from._internal_chrome_build());
    }
    if (cached_has_bits & 0x00000010u) {
      last_checkin_msec_ = from.last_checkin_msec_;
    }
    if (cached_has_bits & 0x00000020u) {
      user_number_ = from.user_number_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AndroidCheckinProto::CopyFrom(const AndroidCheckinProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:checkin_proto.AndroidCheckinProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidCheckinProto::IsInitialized() const {
  return true;
}

void AndroidCheckinProto::InternalSwap(AndroidCheckinProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cell_operator_, lhs_arena,
      &other->cell_operator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sim_operator_, lhs_arena,
      &other->sim_operator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &roaming_, lhs_arena,
      &other->roaming_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidCheckinProto, user_number_)
      + sizeof(AndroidCheckinProto::user_number_)
      - PROTOBUF_FIELD_OFFSET(AndroidCheckinProto, chrome_build_)>(
          reinterpret_cast<char*>(&chrome_build_),
          reinterpret_cast<char*>(&other->chrome_build_));
  swap(type_, other->type_);
}

std::string AndroidCheckinProto::GetTypeName() const {
  return "checkin_proto.AndroidCheckinProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace checkin_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::checkin_proto::ChromeBuildProto*
Arena::CreateMaybeMessage< ::checkin_proto::ChromeBuildProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::checkin_proto::ChromeBuildProto >(arena);
}
template<> PROTOBUF_NOINLINE ::checkin_proto::AndroidCheckinProto*
Arena::CreateMaybeMessage< ::checkin_proto::AndroidCheckinProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::checkin_proto::AndroidCheckinProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
