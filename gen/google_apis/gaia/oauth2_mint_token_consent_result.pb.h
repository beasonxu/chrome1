// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oauth2_mint_token_consent_result.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oauth2_5fmint_5ftoken_5fconsent_5fresult_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oauth2_5fmint_5ftoken_5fconsent_5fresult_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oauth2_5fmint_5ftoken_5fconsent_5fresult_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oauth2_5fmint_5ftoken_5fconsent_5fresult_2eproto {
  static const uint32_t offsets[];
};
namespace gaia {
class OAuth2MintTokenConsentResult;
struct OAuth2MintTokenConsentResultDefaultTypeInternal;
extern OAuth2MintTokenConsentResultDefaultTypeInternal _OAuth2MintTokenConsentResult_default_instance_;
}  // namespace gaia
PROTOBUF_NAMESPACE_OPEN
template<> ::gaia::OAuth2MintTokenConsentResult* Arena::CreateMaybeMessage<::gaia::OAuth2MintTokenConsentResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gaia {

// ===================================================================

class OAuth2MintTokenConsentResult final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:gaia.OAuth2MintTokenConsentResult) */ {
 public:
  inline OAuth2MintTokenConsentResult() : OAuth2MintTokenConsentResult(nullptr) {}
  ~OAuth2MintTokenConsentResult() override;
  explicit PROTOBUF_CONSTEXPR OAuth2MintTokenConsentResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OAuth2MintTokenConsentResult(const OAuth2MintTokenConsentResult& from);
  OAuth2MintTokenConsentResult(OAuth2MintTokenConsentResult&& from) noexcept
    : OAuth2MintTokenConsentResult() {
    *this = ::std::move(from);
  }

  inline OAuth2MintTokenConsentResult& operator=(const OAuth2MintTokenConsentResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline OAuth2MintTokenConsentResult& operator=(OAuth2MintTokenConsentResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const OAuth2MintTokenConsentResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const OAuth2MintTokenConsentResult* internal_default_instance() {
    return reinterpret_cast<const OAuth2MintTokenConsentResult*>(
               &_OAuth2MintTokenConsentResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OAuth2MintTokenConsentResult& a, OAuth2MintTokenConsentResult& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(OAuth2MintTokenConsentResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OAuth2MintTokenConsentResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OAuth2MintTokenConsentResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OAuth2MintTokenConsentResult>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OAuth2MintTokenConsentResult& from);
  void MergeFrom(const OAuth2MintTokenConsentResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OAuth2MintTokenConsentResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gaia.OAuth2MintTokenConsentResult";
  }
  protected:
  explicit OAuth2MintTokenConsentResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedApprovalDataFieldNumber = 2,
    kObfuscatedIdFieldNumber = 3,
    kApprovedFieldNumber = 1,
  };
  // optional bytes encrypted_approval_data = 2;
  bool has_encrypted_approval_data() const;
  private:
  bool _internal_has_encrypted_approval_data() const;
  public:
  void clear_encrypted_approval_data();
  const std::string& encrypted_approval_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encrypted_approval_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encrypted_approval_data();
  PROTOBUF_NODISCARD std::string* release_encrypted_approval_data();
  void set_allocated_encrypted_approval_data(std::string* encrypted_approval_data);
  private:
  const std::string& _internal_encrypted_approval_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_approval_data(const std::string& value);
  std::string* _internal_mutable_encrypted_approval_data();
  public:

  // optional string obfuscated_id = 3;
  bool has_obfuscated_id() const;
  private:
  bool _internal_has_obfuscated_id() const;
  public:
  void clear_obfuscated_id();
  const std::string& obfuscated_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_obfuscated_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_obfuscated_id();
  PROTOBUF_NODISCARD std::string* release_obfuscated_id();
  void set_allocated_obfuscated_id(std::string* obfuscated_id);
  private:
  const std::string& _internal_obfuscated_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_obfuscated_id(const std::string& value);
  std::string* _internal_mutable_obfuscated_id();
  public:

  // optional bool approved = 1;
  bool has_approved() const;
  private:
  bool _internal_has_approved() const;
  public:
  void clear_approved();
  bool approved() const;
  void set_approved(bool value);
  private:
  bool _internal_approved() const;
  void _internal_set_approved(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gaia.OAuth2MintTokenConsentResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_approval_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obfuscated_id_;
  bool approved_;
  friend struct ::TableStruct_oauth2_5fmint_5ftoken_5fconsent_5fresult_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OAuth2MintTokenConsentResult

// optional bool approved = 1;
inline bool OAuth2MintTokenConsentResult::_internal_has_approved() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OAuth2MintTokenConsentResult::has_approved() const {
  return _internal_has_approved();
}
inline void OAuth2MintTokenConsentResult::clear_approved() {
  approved_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool OAuth2MintTokenConsentResult::_internal_approved() const {
  return approved_;
}
inline bool OAuth2MintTokenConsentResult::approved() const {
  // @@protoc_insertion_point(field_get:gaia.OAuth2MintTokenConsentResult.approved)
  return _internal_approved();
}
inline void OAuth2MintTokenConsentResult::_internal_set_approved(bool value) {
  _has_bits_[0] |= 0x00000004u;
  approved_ = value;
}
inline void OAuth2MintTokenConsentResult::set_approved(bool value) {
  _internal_set_approved(value);
  // @@protoc_insertion_point(field_set:gaia.OAuth2MintTokenConsentResult.approved)
}

// optional bytes encrypted_approval_data = 2;
inline bool OAuth2MintTokenConsentResult::_internal_has_encrypted_approval_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OAuth2MintTokenConsentResult::has_encrypted_approval_data() const {
  return _internal_has_encrypted_approval_data();
}
inline void OAuth2MintTokenConsentResult::clear_encrypted_approval_data() {
  encrypted_approval_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OAuth2MintTokenConsentResult::encrypted_approval_data() const {
  // @@protoc_insertion_point(field_get:gaia.OAuth2MintTokenConsentResult.encrypted_approval_data)
  return _internal_encrypted_approval_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OAuth2MintTokenConsentResult::set_encrypted_approval_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 encrypted_approval_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gaia.OAuth2MintTokenConsentResult.encrypted_approval_data)
}
inline std::string* OAuth2MintTokenConsentResult::mutable_encrypted_approval_data() {
  std::string* _s = _internal_mutable_encrypted_approval_data();
  // @@protoc_insertion_point(field_mutable:gaia.OAuth2MintTokenConsentResult.encrypted_approval_data)
  return _s;
}
inline const std::string& OAuth2MintTokenConsentResult::_internal_encrypted_approval_data() const {
  return encrypted_approval_data_.Get();
}
inline void OAuth2MintTokenConsentResult::_internal_set_encrypted_approval_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_approval_data_.Set(value, GetArenaForAllocation());
}
inline std::string* OAuth2MintTokenConsentResult::_internal_mutable_encrypted_approval_data() {
  _has_bits_[0] |= 0x00000001u;
  return encrypted_approval_data_.Mutable(GetArenaForAllocation());
}
inline std::string* OAuth2MintTokenConsentResult::release_encrypted_approval_data() {
  // @@protoc_insertion_point(field_release:gaia.OAuth2MintTokenConsentResult.encrypted_approval_data)
  if (!_internal_has_encrypted_approval_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = encrypted_approval_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encrypted_approval_data_.IsDefault()) {
    encrypted_approval_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OAuth2MintTokenConsentResult::set_allocated_encrypted_approval_data(std::string* encrypted_approval_data) {
  if (encrypted_approval_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encrypted_approval_data_.SetAllocated(encrypted_approval_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encrypted_approval_data_.IsDefault()) {
    encrypted_approval_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gaia.OAuth2MintTokenConsentResult.encrypted_approval_data)
}

// optional string obfuscated_id = 3;
inline bool OAuth2MintTokenConsentResult::_internal_has_obfuscated_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OAuth2MintTokenConsentResult::has_obfuscated_id() const {
  return _internal_has_obfuscated_id();
}
inline void OAuth2MintTokenConsentResult::clear_obfuscated_id() {
  obfuscated_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OAuth2MintTokenConsentResult::obfuscated_id() const {
  // @@protoc_insertion_point(field_get:gaia.OAuth2MintTokenConsentResult.obfuscated_id)
  return _internal_obfuscated_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OAuth2MintTokenConsentResult::set_obfuscated_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 obfuscated_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gaia.OAuth2MintTokenConsentResult.obfuscated_id)
}
inline std::string* OAuth2MintTokenConsentResult::mutable_obfuscated_id() {
  std::string* _s = _internal_mutable_obfuscated_id();
  // @@protoc_insertion_point(field_mutable:gaia.OAuth2MintTokenConsentResult.obfuscated_id)
  return _s;
}
inline const std::string& OAuth2MintTokenConsentResult::_internal_obfuscated_id() const {
  return obfuscated_id_.Get();
}
inline void OAuth2MintTokenConsentResult::_internal_set_obfuscated_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  obfuscated_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OAuth2MintTokenConsentResult::_internal_mutable_obfuscated_id() {
  _has_bits_[0] |= 0x00000002u;
  return obfuscated_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OAuth2MintTokenConsentResult::release_obfuscated_id() {
  // @@protoc_insertion_point(field_release:gaia.OAuth2MintTokenConsentResult.obfuscated_id)
  if (!_internal_has_obfuscated_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = obfuscated_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (obfuscated_id_.IsDefault()) {
    obfuscated_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OAuth2MintTokenConsentResult::set_allocated_obfuscated_id(std::string* obfuscated_id) {
  if (obfuscated_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  obfuscated_id_.SetAllocated(obfuscated_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (obfuscated_id_.IsDefault()) {
    obfuscated_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gaia.OAuth2MintTokenConsentResult.obfuscated_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace gaia

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oauth2_5fmint_5ftoken_5fconsent_5fresult_2eproto
