// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chrome_searchbox_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chrome_5fsearchbox_5fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chrome_5fsearchbox_5fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chrome_5fsearchbox_5fstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chrome_5fsearchbox_5fstats_2eproto {
  static const uint32_t offsets[];
};
namespace metrics {
class ChromeSearchboxStats;
struct ChromeSearchboxStatsDefaultTypeInternal;
extern ChromeSearchboxStatsDefaultTypeInternal _ChromeSearchboxStats_default_instance_;
class ChromeSearchboxStats_ExperimentStatsV2;
struct ChromeSearchboxStats_ExperimentStatsV2DefaultTypeInternal;
extern ChromeSearchboxStats_ExperimentStatsV2DefaultTypeInternal _ChromeSearchboxStats_ExperimentStatsV2_default_instance_;
class ChromeSearchboxStats_GroupInfo;
struct ChromeSearchboxStats_GroupInfoDefaultTypeInternal;
extern ChromeSearchboxStats_GroupInfoDefaultTypeInternal _ChromeSearchboxStats_GroupInfo_default_instance_;
class ChromeSearchboxStats_SuggestionInfo;
struct ChromeSearchboxStats_SuggestionInfoDefaultTypeInternal;
extern ChromeSearchboxStats_SuggestionInfoDefaultTypeInternal _ChromeSearchboxStats_SuggestionInfo_default_instance_;
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> ::metrics::ChromeSearchboxStats* Arena::CreateMaybeMessage<::metrics::ChromeSearchboxStats>(Arena*);
template<> ::metrics::ChromeSearchboxStats_ExperimentStatsV2* Arena::CreateMaybeMessage<::metrics::ChromeSearchboxStats_ExperimentStatsV2>(Arena*);
template<> ::metrics::ChromeSearchboxStats_GroupInfo* Arena::CreateMaybeMessage<::metrics::ChromeSearchboxStats_GroupInfo>(Arena*);
template<> ::metrics::ChromeSearchboxStats_SuggestionInfo* Arena::CreateMaybeMessage<::metrics::ChromeSearchboxStats_SuggestionInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

// ===================================================================

class ChromeSearchboxStats_SuggestionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.ChromeSearchboxStats.SuggestionInfo) */ {
 public:
  inline ChromeSearchboxStats_SuggestionInfo() : ChromeSearchboxStats_SuggestionInfo(nullptr) {}
  ~ChromeSearchboxStats_SuggestionInfo() override;
  explicit PROTOBUF_CONSTEXPR ChromeSearchboxStats_SuggestionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeSearchboxStats_SuggestionInfo(const ChromeSearchboxStats_SuggestionInfo& from);
  ChromeSearchboxStats_SuggestionInfo(ChromeSearchboxStats_SuggestionInfo&& from) noexcept
    : ChromeSearchboxStats_SuggestionInfo() {
    *this = ::std::move(from);
  }

  inline ChromeSearchboxStats_SuggestionInfo& operator=(const ChromeSearchboxStats_SuggestionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeSearchboxStats_SuggestionInfo& operator=(ChromeSearchboxStats_SuggestionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeSearchboxStats_SuggestionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeSearchboxStats_SuggestionInfo* internal_default_instance() {
    return reinterpret_cast<const ChromeSearchboxStats_SuggestionInfo*>(
               &_ChromeSearchboxStats_SuggestionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeSearchboxStats_SuggestionInfo& a, ChromeSearchboxStats_SuggestionInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeSearchboxStats_SuggestionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeSearchboxStats_SuggestionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeSearchboxStats_SuggestionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeSearchboxStats_SuggestionInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeSearchboxStats_SuggestionInfo& from);
  void MergeFrom(const ChromeSearchboxStats_SuggestionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeSearchboxStats_SuggestionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.ChromeSearchboxStats.SuggestionInfo";
  }
  protected:
  explicit ChromeSearchboxStats_SuggestionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubtypesFieldNumber = 3,
    kTypeFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // repeated uint32 subtypes = 3;
  int subtypes_size() const;
  private:
  int _internal_subtypes_size() const;
  public:
  void clear_subtypes();
  private:
  uint32_t _internal_subtypes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_subtypes() const;
  void _internal_add_subtypes(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_subtypes();
  public:
  uint32_t subtypes(int index) const;
  void set_subtypes(int index, uint32_t value);
  void add_subtypes(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      subtypes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_subtypes();

  // optional uint32 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // optional int32 index = 1 [default = -1];
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.ChromeSearchboxStats.SuggestionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > subtypes_;
  uint32_t type_;
  int32_t index_;
  friend struct ::TableStruct_chrome_5fsearchbox_5fstats_2eproto;
};
// -------------------------------------------------------------------

class ChromeSearchboxStats_ExperimentStatsV2 final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.ChromeSearchboxStats.ExperimentStatsV2) */ {
 public:
  inline ChromeSearchboxStats_ExperimentStatsV2() : ChromeSearchboxStats_ExperimentStatsV2(nullptr) {}
  ~ChromeSearchboxStats_ExperimentStatsV2() override;
  explicit PROTOBUF_CONSTEXPR ChromeSearchboxStats_ExperimentStatsV2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeSearchboxStats_ExperimentStatsV2(const ChromeSearchboxStats_ExperimentStatsV2& from);
  ChromeSearchboxStats_ExperimentStatsV2(ChromeSearchboxStats_ExperimentStatsV2&& from) noexcept
    : ChromeSearchboxStats_ExperimentStatsV2() {
    *this = ::std::move(from);
  }

  inline ChromeSearchboxStats_ExperimentStatsV2& operator=(const ChromeSearchboxStats_ExperimentStatsV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeSearchboxStats_ExperimentStatsV2& operator=(ChromeSearchboxStats_ExperimentStatsV2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeSearchboxStats_ExperimentStatsV2& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeSearchboxStats_ExperimentStatsV2* internal_default_instance() {
    return reinterpret_cast<const ChromeSearchboxStats_ExperimentStatsV2*>(
               &_ChromeSearchboxStats_ExperimentStatsV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChromeSearchboxStats_ExperimentStatsV2& a, ChromeSearchboxStats_ExperimentStatsV2& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeSearchboxStats_ExperimentStatsV2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeSearchboxStats_ExperimentStatsV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeSearchboxStats_ExperimentStatsV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeSearchboxStats_ExperimentStatsV2>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeSearchboxStats_ExperimentStatsV2& from);
  void MergeFrom(const ChromeSearchboxStats_ExperimentStatsV2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeSearchboxStats_ExperimentStatsV2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.ChromeSearchboxStats.ExperimentStatsV2";
  }
  protected:
  explicit ChromeSearchboxStats_ExperimentStatsV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 2,
    kIntValueFieldNumber = 3,
    kTypeIntFieldNumber = 4,
  };
  // optional string string_value = 2;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // optional int32 int_value = 3;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  int32_t int_value() const;
  void set_int_value(int32_t value);
  private:
  int32_t _internal_int_value() const;
  void _internal_set_int_value(int32_t value);
  public:

  // optional int32 type_int = 4;
  bool has_type_int() const;
  private:
  bool _internal_has_type_int() const;
  public:
  void clear_type_int();
  int32_t type_int() const;
  void set_type_int(int32_t value);
  private:
  int32_t _internal_type_int() const;
  void _internal_set_type_int(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.ChromeSearchboxStats.ExperimentStatsV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  int32_t int_value_;
  int32_t type_int_;
  friend struct ::TableStruct_chrome_5fsearchbox_5fstats_2eproto;
};
// -------------------------------------------------------------------

class ChromeSearchboxStats_GroupInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.ChromeSearchboxStats.GroupInfo) */ {
 public:
  inline ChromeSearchboxStats_GroupInfo() : ChromeSearchboxStats_GroupInfo(nullptr) {}
  ~ChromeSearchboxStats_GroupInfo() override;
  explicit PROTOBUF_CONSTEXPR ChromeSearchboxStats_GroupInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeSearchboxStats_GroupInfo(const ChromeSearchboxStats_GroupInfo& from);
  ChromeSearchboxStats_GroupInfo(ChromeSearchboxStats_GroupInfo&& from) noexcept
    : ChromeSearchboxStats_GroupInfo() {
    *this = ::std::move(from);
  }

  inline ChromeSearchboxStats_GroupInfo& operator=(const ChromeSearchboxStats_GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeSearchboxStats_GroupInfo& operator=(ChromeSearchboxStats_GroupInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeSearchboxStats_GroupInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeSearchboxStats_GroupInfo* internal_default_instance() {
    return reinterpret_cast<const ChromeSearchboxStats_GroupInfo*>(
               &_ChromeSearchboxStats_GroupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChromeSearchboxStats_GroupInfo& a, ChromeSearchboxStats_GroupInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeSearchboxStats_GroupInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeSearchboxStats_GroupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeSearchboxStats_GroupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeSearchboxStats_GroupInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeSearchboxStats_GroupInfo& from);
  void MergeFrom(const ChromeSearchboxStats_GroupInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeSearchboxStats_GroupInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.ChromeSearchboxStats.GroupInfo";
  }
  protected:
  explicit ChromeSearchboxStats_GroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsSetIndexFieldNumber = 1,
    kSideTypeFieldNumber = 2,
    kWhyThisResultReasonFieldNumber = 3,
  };
  // optional uint32 groups_set_index = 1;
  bool has_groups_set_index() const;
  private:
  bool _internal_has_groups_set_index() const;
  public:
  void clear_groups_set_index();
  uint32_t groups_set_index() const;
  void set_groups_set_index(uint32_t value);
  private:
  uint32_t _internal_groups_set_index() const;
  void _internal_set_groups_set_index(uint32_t value);
  public:

  // optional uint32 side_type = 2;
  bool has_side_type() const;
  private:
  bool _internal_has_side_type() const;
  public:
  void clear_side_type();
  uint32_t side_type() const;
  void set_side_type(uint32_t value);
  private:
  uint32_t _internal_side_type() const;
  void _internal_set_side_type(uint32_t value);
  public:

  // optional uint32 why_this_result_reason = 3;
  bool has_why_this_result_reason() const;
  private:
  bool _internal_has_why_this_result_reason() const;
  public:
  void clear_why_this_result_reason();
  uint32_t why_this_result_reason() const;
  void set_why_this_result_reason(uint32_t value);
  private:
  uint32_t _internal_why_this_result_reason() const;
  void _internal_set_why_this_result_reason(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.ChromeSearchboxStats.GroupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t groups_set_index_;
  uint32_t side_type_;
  uint32_t why_this_result_reason_;
  friend struct ::TableStruct_chrome_5fsearchbox_5fstats_2eproto;
};
// -------------------------------------------------------------------

class ChromeSearchboxStats final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.ChromeSearchboxStats) */ {
 public:
  inline ChromeSearchboxStats() : ChromeSearchboxStats(nullptr) {}
  ~ChromeSearchboxStats() override;
  explicit PROTOBUF_CONSTEXPR ChromeSearchboxStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeSearchboxStats(const ChromeSearchboxStats& from);
  ChromeSearchboxStats(ChromeSearchboxStats&& from) noexcept
    : ChromeSearchboxStats() {
    *this = ::std::move(from);
  }

  inline ChromeSearchboxStats& operator=(const ChromeSearchboxStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeSearchboxStats& operator=(ChromeSearchboxStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeSearchboxStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeSearchboxStats* internal_default_instance() {
    return reinterpret_cast<const ChromeSearchboxStats*>(
               &_ChromeSearchboxStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChromeSearchboxStats& a, ChromeSearchboxStats& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeSearchboxStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeSearchboxStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeSearchboxStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeSearchboxStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeSearchboxStats& from);
  void MergeFrom(const ChromeSearchboxStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeSearchboxStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.ChromeSearchboxStats";
  }
  protected:
  explicit ChromeSearchboxStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeSearchboxStats_SuggestionInfo SuggestionInfo;
  typedef ChromeSearchboxStats_ExperimentStatsV2 ExperimentStatsV2;
  typedef ChromeSearchboxStats_GroupInfo GroupInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableSuggestionsFieldNumber = 6,
    kExperimentStatsV2FieldNumber = 60,
    kGroupInfosFieldNumber = 103,
    kClientNameFieldNumber = 2,
    kExperimentStatsFieldNumber = 26,
    kAssistedQueryInfoFieldNumber = 5,
    kNumZeroPrefixSuggestionsShownFieldNumber = 37,
    kZeroPrefixEnabledFieldNumber = 38,
  };
  // repeated .metrics.ChromeSearchboxStats.SuggestionInfo available_suggestions = 6;
  int available_suggestions_size() const;
  private:
  int _internal_available_suggestions_size() const;
  public:
  void clear_available_suggestions();
  ::metrics::ChromeSearchboxStats_SuggestionInfo* mutable_available_suggestions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeSearchboxStats_SuggestionInfo >*
      mutable_available_suggestions();
  private:
  const ::metrics::ChromeSearchboxStats_SuggestionInfo& _internal_available_suggestions(int index) const;
  ::metrics::ChromeSearchboxStats_SuggestionInfo* _internal_add_available_suggestions();
  public:
  const ::metrics::ChromeSearchboxStats_SuggestionInfo& available_suggestions(int index) const;
  ::metrics::ChromeSearchboxStats_SuggestionInfo* add_available_suggestions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeSearchboxStats_SuggestionInfo >&
      available_suggestions() const;

  // repeated .metrics.ChromeSearchboxStats.ExperimentStatsV2 experiment_stats_v2 = 60;
  int experiment_stats_v2_size() const;
  private:
  int _internal_experiment_stats_v2_size() const;
  public:
  void clear_experiment_stats_v2();
  ::metrics::ChromeSearchboxStats_ExperimentStatsV2* mutable_experiment_stats_v2(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeSearchboxStats_ExperimentStatsV2 >*
      mutable_experiment_stats_v2();
  private:
  const ::metrics::ChromeSearchboxStats_ExperimentStatsV2& _internal_experiment_stats_v2(int index) const;
  ::metrics::ChromeSearchboxStats_ExperimentStatsV2* _internal_add_experiment_stats_v2();
  public:
  const ::metrics::ChromeSearchboxStats_ExperimentStatsV2& experiment_stats_v2(int index) const;
  ::metrics::ChromeSearchboxStats_ExperimentStatsV2* add_experiment_stats_v2();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeSearchboxStats_ExperimentStatsV2 >&
      experiment_stats_v2() const;

  // repeated .metrics.ChromeSearchboxStats.GroupInfo group_infos = 103;
  int group_infos_size() const;
  private:
  int _internal_group_infos_size() const;
  public:
  void clear_group_infos();
  ::metrics::ChromeSearchboxStats_GroupInfo* mutable_group_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeSearchboxStats_GroupInfo >*
      mutable_group_infos();
  private:
  const ::metrics::ChromeSearchboxStats_GroupInfo& _internal_group_infos(int index) const;
  ::metrics::ChromeSearchboxStats_GroupInfo* _internal_add_group_infos();
  public:
  const ::metrics::ChromeSearchboxStats_GroupInfo& group_infos(int index) const;
  ::metrics::ChromeSearchboxStats_GroupInfo* add_group_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeSearchboxStats_GroupInfo >&
      group_infos() const;

  // optional string client_name = 2;
  bool has_client_name() const;
  private:
  bool _internal_has_client_name() const;
  public:
  void clear_client_name();
  const std::string& client_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_name();
  PROTOBUF_NODISCARD std::string* release_client_name();
  void set_allocated_client_name(std::string* client_name);
  private:
  const std::string& _internal_client_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_name(const std::string& value);
  std::string* _internal_mutable_client_name();
  public:

  // optional string experiment_stats = 26 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_experiment_stats() const;
  private:
  bool _internal_has_experiment_stats() const;
  public:
  PROTOBUF_DEPRECATED void clear_experiment_stats();
  PROTOBUF_DEPRECATED const std::string& experiment_stats() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_experiment_stats(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_experiment_stats();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_experiment_stats();
  PROTOBUF_DEPRECATED void set_allocated_experiment_stats(std::string* experiment_stats);
  private:
  const std::string& _internal_experiment_stats() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_experiment_stats(const std::string& value);
  std::string* _internal_mutable_experiment_stats();
  public:

  // optional .metrics.ChromeSearchboxStats.SuggestionInfo assisted_query_info = 5;
  bool has_assisted_query_info() const;
  private:
  bool _internal_has_assisted_query_info() const;
  public:
  void clear_assisted_query_info();
  const ::metrics::ChromeSearchboxStats_SuggestionInfo& assisted_query_info() const;
  PROTOBUF_NODISCARD ::metrics::ChromeSearchboxStats_SuggestionInfo* release_assisted_query_info();
  ::metrics::ChromeSearchboxStats_SuggestionInfo* mutable_assisted_query_info();
  void set_allocated_assisted_query_info(::metrics::ChromeSearchboxStats_SuggestionInfo* assisted_query_info);
  private:
  const ::metrics::ChromeSearchboxStats_SuggestionInfo& _internal_assisted_query_info() const;
  ::metrics::ChromeSearchboxStats_SuggestionInfo* _internal_mutable_assisted_query_info();
  public:
  void unsafe_arena_set_allocated_assisted_query_info(
      ::metrics::ChromeSearchboxStats_SuggestionInfo* assisted_query_info);
  ::metrics::ChromeSearchboxStats_SuggestionInfo* unsafe_arena_release_assisted_query_info();

  // optional uint32 num_zero_prefix_suggestions_shown = 37;
  bool has_num_zero_prefix_suggestions_shown() const;
  private:
  bool _internal_has_num_zero_prefix_suggestions_shown() const;
  public:
  void clear_num_zero_prefix_suggestions_shown();
  uint32_t num_zero_prefix_suggestions_shown() const;
  void set_num_zero_prefix_suggestions_shown(uint32_t value);
  private:
  uint32_t _internal_num_zero_prefix_suggestions_shown() const;
  void _internal_set_num_zero_prefix_suggestions_shown(uint32_t value);
  public:

  // optional bool zero_prefix_enabled = 38;
  bool has_zero_prefix_enabled() const;
  private:
  bool _internal_has_zero_prefix_enabled() const;
  public:
  void clear_zero_prefix_enabled();
  bool zero_prefix_enabled() const;
  void set_zero_prefix_enabled(bool value);
  private:
  bool _internal_zero_prefix_enabled() const;
  void _internal_set_zero_prefix_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:metrics.ChromeSearchboxStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeSearchboxStats_SuggestionInfo > available_suggestions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeSearchboxStats_ExperimentStatsV2 > experiment_stats_v2_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeSearchboxStats_GroupInfo > group_infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr experiment_stats_;
  ::metrics::ChromeSearchboxStats_SuggestionInfo* assisted_query_info_;
  uint32_t num_zero_prefix_suggestions_shown_;
  bool zero_prefix_enabled_;
  friend struct ::TableStruct_chrome_5fsearchbox_5fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeSearchboxStats_SuggestionInfo

// optional int32 index = 1 [default = -1];
inline bool ChromeSearchboxStats_SuggestionInfo::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChromeSearchboxStats_SuggestionInfo::has_index() const {
  return _internal_has_index();
}
inline void ChromeSearchboxStats_SuggestionInfo::clear_index() {
  index_ = -1;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ChromeSearchboxStats_SuggestionInfo::_internal_index() const {
  return index_;
}
inline int32_t ChromeSearchboxStats_SuggestionInfo::index() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeSearchboxStats.SuggestionInfo.index)
  return _internal_index();
}
inline void ChromeSearchboxStats_SuggestionInfo::_internal_set_index(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  index_ = value;
}
inline void ChromeSearchboxStats_SuggestionInfo::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:metrics.ChromeSearchboxStats.SuggestionInfo.index)
}

// optional uint32 type = 2;
inline bool ChromeSearchboxStats_SuggestionInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChromeSearchboxStats_SuggestionInfo::has_type() const {
  return _internal_has_type();
}
inline void ChromeSearchboxStats_SuggestionInfo::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ChromeSearchboxStats_SuggestionInfo::_internal_type() const {
  return type_;
}
inline uint32_t ChromeSearchboxStats_SuggestionInfo::type() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeSearchboxStats.SuggestionInfo.type)
  return _internal_type();
}
inline void ChromeSearchboxStats_SuggestionInfo::_internal_set_type(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void ChromeSearchboxStats_SuggestionInfo::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:metrics.ChromeSearchboxStats.SuggestionInfo.type)
}

// repeated uint32 subtypes = 3;
inline int ChromeSearchboxStats_SuggestionInfo::_internal_subtypes_size() const {
  return subtypes_.size();
}
inline int ChromeSearchboxStats_SuggestionInfo::subtypes_size() const {
  return _internal_subtypes_size();
}
inline void ChromeSearchboxStats_SuggestionInfo::clear_subtypes() {
  subtypes_.Clear();
}
inline uint32_t ChromeSearchboxStats_SuggestionInfo::_internal_subtypes(int index) const {
  return subtypes_.Get(index);
}
inline uint32_t ChromeSearchboxStats_SuggestionInfo::subtypes(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeSearchboxStats.SuggestionInfo.subtypes)
  return _internal_subtypes(index);
}
inline void ChromeSearchboxStats_SuggestionInfo::set_subtypes(int index, uint32_t value) {
  subtypes_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.ChromeSearchboxStats.SuggestionInfo.subtypes)
}
inline void ChromeSearchboxStats_SuggestionInfo::_internal_add_subtypes(uint32_t value) {
  subtypes_.Add(value);
}
inline void ChromeSearchboxStats_SuggestionInfo::add_subtypes(uint32_t value) {
  _internal_add_subtypes(value);
  // @@protoc_insertion_point(field_add:metrics.ChromeSearchboxStats.SuggestionInfo.subtypes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ChromeSearchboxStats_SuggestionInfo::_internal_subtypes() const {
  return subtypes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ChromeSearchboxStats_SuggestionInfo::subtypes() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeSearchboxStats.SuggestionInfo.subtypes)
  return _internal_subtypes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ChromeSearchboxStats_SuggestionInfo::_internal_mutable_subtypes() {
  return &subtypes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ChromeSearchboxStats_SuggestionInfo::mutable_subtypes() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeSearchboxStats.SuggestionInfo.subtypes)
  return _internal_mutable_subtypes();
}

// -------------------------------------------------------------------

// ChromeSearchboxStats_ExperimentStatsV2

// optional int32 type_int = 4;
inline bool ChromeSearchboxStats_ExperimentStatsV2::_internal_has_type_int() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChromeSearchboxStats_ExperimentStatsV2::has_type_int() const {
  return _internal_has_type_int();
}
inline void ChromeSearchboxStats_ExperimentStatsV2::clear_type_int() {
  type_int_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t ChromeSearchboxStats_ExperimentStatsV2::_internal_type_int() const {
  return type_int_;
}
inline int32_t ChromeSearchboxStats_ExperimentStatsV2::type_int() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeSearchboxStats.ExperimentStatsV2.type_int)
  return _internal_type_int();
}
inline void ChromeSearchboxStats_ExperimentStatsV2::_internal_set_type_int(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  type_int_ = value;
}
inline void ChromeSearchboxStats_ExperimentStatsV2::set_type_int(int32_t value) {
  _internal_set_type_int(value);
  // @@protoc_insertion_point(field_set:metrics.ChromeSearchboxStats.ExperimentStatsV2.type_int)
}

// optional string string_value = 2;
inline bool ChromeSearchboxStats_ExperimentStatsV2::_internal_has_string_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChromeSearchboxStats_ExperimentStatsV2::has_string_value() const {
  return _internal_has_string_value();
}
inline void ChromeSearchboxStats_ExperimentStatsV2::clear_string_value() {
  string_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromeSearchboxStats_ExperimentStatsV2::string_value() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeSearchboxStats.ExperimentStatsV2.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChromeSearchboxStats_ExperimentStatsV2::set_string_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 string_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:metrics.ChromeSearchboxStats.ExperimentStatsV2.string_value)
}
inline std::string* ChromeSearchboxStats_ExperimentStatsV2::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:metrics.ChromeSearchboxStats.ExperimentStatsV2.string_value)
  return _s;
}
inline const std::string& ChromeSearchboxStats_ExperimentStatsV2::_internal_string_value() const {
  return string_value_.Get();
}
inline void ChromeSearchboxStats_ExperimentStatsV2::_internal_set_string_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeSearchboxStats_ExperimentStatsV2::_internal_mutable_string_value() {
  _has_bits_[0] |= 0x00000001u;
  return string_value_.Mutable(GetArenaForAllocation());
}
inline std::string* ChromeSearchboxStats_ExperimentStatsV2::release_string_value() {
  // @@protoc_insertion_point(field_release:metrics.ChromeSearchboxStats.ExperimentStatsV2.string_value)
  if (!_internal_has_string_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = string_value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (string_value_.IsDefault()) {
    string_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChromeSearchboxStats_ExperimentStatsV2::set_allocated_string_value(std::string* string_value) {
  if (string_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_value_.SetAllocated(string_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (string_value_.IsDefault()) {
    string_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:metrics.ChromeSearchboxStats.ExperimentStatsV2.string_value)
}

// optional int32 int_value = 3;
inline bool ChromeSearchboxStats_ExperimentStatsV2::_internal_has_int_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChromeSearchboxStats_ExperimentStatsV2::has_int_value() const {
  return _internal_has_int_value();
}
inline void ChromeSearchboxStats_ExperimentStatsV2::clear_int_value() {
  int_value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ChromeSearchboxStats_ExperimentStatsV2::_internal_int_value() const {
  return int_value_;
}
inline int32_t ChromeSearchboxStats_ExperimentStatsV2::int_value() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeSearchboxStats.ExperimentStatsV2.int_value)
  return _internal_int_value();
}
inline void ChromeSearchboxStats_ExperimentStatsV2::_internal_set_int_value(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  int_value_ = value;
}
inline void ChromeSearchboxStats_ExperimentStatsV2::set_int_value(int32_t value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:metrics.ChromeSearchboxStats.ExperimentStatsV2.int_value)
}

// -------------------------------------------------------------------

// ChromeSearchboxStats_GroupInfo

// optional uint32 groups_set_index = 1;
inline bool ChromeSearchboxStats_GroupInfo::_internal_has_groups_set_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChromeSearchboxStats_GroupInfo::has_groups_set_index() const {
  return _internal_has_groups_set_index();
}
inline void ChromeSearchboxStats_GroupInfo::clear_groups_set_index() {
  groups_set_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ChromeSearchboxStats_GroupInfo::_internal_groups_set_index() const {
  return groups_set_index_;
}
inline uint32_t ChromeSearchboxStats_GroupInfo::groups_set_index() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeSearchboxStats.GroupInfo.groups_set_index)
  return _internal_groups_set_index();
}
inline void ChromeSearchboxStats_GroupInfo::_internal_set_groups_set_index(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  groups_set_index_ = value;
}
inline void ChromeSearchboxStats_GroupInfo::set_groups_set_index(uint32_t value) {
  _internal_set_groups_set_index(value);
  // @@protoc_insertion_point(field_set:metrics.ChromeSearchboxStats.GroupInfo.groups_set_index)
}

// optional uint32 side_type = 2;
inline bool ChromeSearchboxStats_GroupInfo::_internal_has_side_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChromeSearchboxStats_GroupInfo::has_side_type() const {
  return _internal_has_side_type();
}
inline void ChromeSearchboxStats_GroupInfo::clear_side_type() {
  side_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ChromeSearchboxStats_GroupInfo::_internal_side_type() const {
  return side_type_;
}
inline uint32_t ChromeSearchboxStats_GroupInfo::side_type() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeSearchboxStats.GroupInfo.side_type)
  return _internal_side_type();
}
inline void ChromeSearchboxStats_GroupInfo::_internal_set_side_type(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  side_type_ = value;
}
inline void ChromeSearchboxStats_GroupInfo::set_side_type(uint32_t value) {
  _internal_set_side_type(value);
  // @@protoc_insertion_point(field_set:metrics.ChromeSearchboxStats.GroupInfo.side_type)
}

// optional uint32 why_this_result_reason = 3;
inline bool ChromeSearchboxStats_GroupInfo::_internal_has_why_this_result_reason() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChromeSearchboxStats_GroupInfo::has_why_this_result_reason() const {
  return _internal_has_why_this_result_reason();
}
inline void ChromeSearchboxStats_GroupInfo::clear_why_this_result_reason() {
  why_this_result_reason_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ChromeSearchboxStats_GroupInfo::_internal_why_this_result_reason() const {
  return why_this_result_reason_;
}
inline uint32_t ChromeSearchboxStats_GroupInfo::why_this_result_reason() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeSearchboxStats.GroupInfo.why_this_result_reason)
  return _internal_why_this_result_reason();
}
inline void ChromeSearchboxStats_GroupInfo::_internal_set_why_this_result_reason(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  why_this_result_reason_ = value;
}
inline void ChromeSearchboxStats_GroupInfo::set_why_this_result_reason(uint32_t value) {
  _internal_set_why_this_result_reason(value);
  // @@protoc_insertion_point(field_set:metrics.ChromeSearchboxStats.GroupInfo.why_this_result_reason)
}

// -------------------------------------------------------------------

// ChromeSearchboxStats

// optional string client_name = 2;
inline bool ChromeSearchboxStats::_internal_has_client_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChromeSearchboxStats::has_client_name() const {
  return _internal_has_client_name();
}
inline void ChromeSearchboxStats::clear_client_name() {
  client_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromeSearchboxStats::client_name() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeSearchboxStats.client_name)
  return _internal_client_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChromeSearchboxStats::set_client_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 client_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:metrics.ChromeSearchboxStats.client_name)
}
inline std::string* ChromeSearchboxStats::mutable_client_name() {
  std::string* _s = _internal_mutable_client_name();
  // @@protoc_insertion_point(field_mutable:metrics.ChromeSearchboxStats.client_name)
  return _s;
}
inline const std::string& ChromeSearchboxStats::_internal_client_name() const {
  return client_name_.Get();
}
inline void ChromeSearchboxStats::_internal_set_client_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  client_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeSearchboxStats::_internal_mutable_client_name() {
  _has_bits_[0] |= 0x00000001u;
  return client_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ChromeSearchboxStats::release_client_name() {
  // @@protoc_insertion_point(field_release:metrics.ChromeSearchboxStats.client_name)
  if (!_internal_has_client_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = client_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_name_.IsDefault()) {
    client_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChromeSearchboxStats::set_allocated_client_name(std::string* client_name) {
  if (client_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_name_.SetAllocated(client_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_name_.IsDefault()) {
    client_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:metrics.ChromeSearchboxStats.client_name)
}

// optional .metrics.ChromeSearchboxStats.SuggestionInfo assisted_query_info = 5;
inline bool ChromeSearchboxStats::_internal_has_assisted_query_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || assisted_query_info_ != nullptr);
  return value;
}
inline bool ChromeSearchboxStats::has_assisted_query_info() const {
  return _internal_has_assisted_query_info();
}
inline void ChromeSearchboxStats::clear_assisted_query_info() {
  if (assisted_query_info_ != nullptr) assisted_query_info_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::metrics::ChromeSearchboxStats_SuggestionInfo& ChromeSearchboxStats::_internal_assisted_query_info() const {
  const ::metrics::ChromeSearchboxStats_SuggestionInfo* p = assisted_query_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::metrics::ChromeSearchboxStats_SuggestionInfo&>(
      ::metrics::_ChromeSearchboxStats_SuggestionInfo_default_instance_);
}
inline const ::metrics::ChromeSearchboxStats_SuggestionInfo& ChromeSearchboxStats::assisted_query_info() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeSearchboxStats.assisted_query_info)
  return _internal_assisted_query_info();
}
inline void ChromeSearchboxStats::unsafe_arena_set_allocated_assisted_query_info(
    ::metrics::ChromeSearchboxStats_SuggestionInfo* assisted_query_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(assisted_query_info_);
  }
  assisted_query_info_ = assisted_query_info;
  if (assisted_query_info) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metrics.ChromeSearchboxStats.assisted_query_info)
}
inline ::metrics::ChromeSearchboxStats_SuggestionInfo* ChromeSearchboxStats::release_assisted_query_info() {
  _has_bits_[0] &= ~0x00000004u;
  ::metrics::ChromeSearchboxStats_SuggestionInfo* temp = assisted_query_info_;
  assisted_query_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::metrics::ChromeSearchboxStats_SuggestionInfo* ChromeSearchboxStats::unsafe_arena_release_assisted_query_info() {
  // @@protoc_insertion_point(field_release:metrics.ChromeSearchboxStats.assisted_query_info)
  _has_bits_[0] &= ~0x00000004u;
  ::metrics::ChromeSearchboxStats_SuggestionInfo* temp = assisted_query_info_;
  assisted_query_info_ = nullptr;
  return temp;
}
inline ::metrics::ChromeSearchboxStats_SuggestionInfo* ChromeSearchboxStats::_internal_mutable_assisted_query_info() {
  _has_bits_[0] |= 0x00000004u;
  if (assisted_query_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::metrics::ChromeSearchboxStats_SuggestionInfo>(GetArenaForAllocation());
    assisted_query_info_ = p;
  }
  return assisted_query_info_;
}
inline ::metrics::ChromeSearchboxStats_SuggestionInfo* ChromeSearchboxStats::mutable_assisted_query_info() {
  ::metrics::ChromeSearchboxStats_SuggestionInfo* _msg = _internal_mutable_assisted_query_info();
  // @@protoc_insertion_point(field_mutable:metrics.ChromeSearchboxStats.assisted_query_info)
  return _msg;
}
inline void ChromeSearchboxStats::set_allocated_assisted_query_info(::metrics::ChromeSearchboxStats_SuggestionInfo* assisted_query_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete assisted_query_info_;
  }
  if (assisted_query_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(assisted_query_info);
    if (message_arena != submessage_arena) {
      assisted_query_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assisted_query_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  assisted_query_info_ = assisted_query_info;
  // @@protoc_insertion_point(field_set_allocated:metrics.ChromeSearchboxStats.assisted_query_info)
}

// repeated .metrics.ChromeSearchboxStats.SuggestionInfo available_suggestions = 6;
inline int ChromeSearchboxStats::_internal_available_suggestions_size() const {
  return available_suggestions_.size();
}
inline int ChromeSearchboxStats::available_suggestions_size() const {
  return _internal_available_suggestions_size();
}
inline void ChromeSearchboxStats::clear_available_suggestions() {
  available_suggestions_.Clear();
}
inline ::metrics::ChromeSearchboxStats_SuggestionInfo* ChromeSearchboxStats::mutable_available_suggestions(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeSearchboxStats.available_suggestions)
  return available_suggestions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeSearchboxStats_SuggestionInfo >*
ChromeSearchboxStats::mutable_available_suggestions() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeSearchboxStats.available_suggestions)
  return &available_suggestions_;
}
inline const ::metrics::ChromeSearchboxStats_SuggestionInfo& ChromeSearchboxStats::_internal_available_suggestions(int index) const {
  return available_suggestions_.Get(index);
}
inline const ::metrics::ChromeSearchboxStats_SuggestionInfo& ChromeSearchboxStats::available_suggestions(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeSearchboxStats.available_suggestions)
  return _internal_available_suggestions(index);
}
inline ::metrics::ChromeSearchboxStats_SuggestionInfo* ChromeSearchboxStats::_internal_add_available_suggestions() {
  return available_suggestions_.Add();
}
inline ::metrics::ChromeSearchboxStats_SuggestionInfo* ChromeSearchboxStats::add_available_suggestions() {
  ::metrics::ChromeSearchboxStats_SuggestionInfo* _add = _internal_add_available_suggestions();
  // @@protoc_insertion_point(field_add:metrics.ChromeSearchboxStats.available_suggestions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeSearchboxStats_SuggestionInfo >&
ChromeSearchboxStats::available_suggestions() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeSearchboxStats.available_suggestions)
  return available_suggestions_;
}

// optional bool zero_prefix_enabled = 38;
inline bool ChromeSearchboxStats::_internal_has_zero_prefix_enabled() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChromeSearchboxStats::has_zero_prefix_enabled() const {
  return _internal_has_zero_prefix_enabled();
}
inline void ChromeSearchboxStats::clear_zero_prefix_enabled() {
  zero_prefix_enabled_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ChromeSearchboxStats::_internal_zero_prefix_enabled() const {
  return zero_prefix_enabled_;
}
inline bool ChromeSearchboxStats::zero_prefix_enabled() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeSearchboxStats.zero_prefix_enabled)
  return _internal_zero_prefix_enabled();
}
inline void ChromeSearchboxStats::_internal_set_zero_prefix_enabled(bool value) {
  _has_bits_[0] |= 0x00000010u;
  zero_prefix_enabled_ = value;
}
inline void ChromeSearchboxStats::set_zero_prefix_enabled(bool value) {
  _internal_set_zero_prefix_enabled(value);
  // @@protoc_insertion_point(field_set:metrics.ChromeSearchboxStats.zero_prefix_enabled)
}

// optional uint32 num_zero_prefix_suggestions_shown = 37;
inline bool ChromeSearchboxStats::_internal_has_num_zero_prefix_suggestions_shown() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChromeSearchboxStats::has_num_zero_prefix_suggestions_shown() const {
  return _internal_has_num_zero_prefix_suggestions_shown();
}
inline void ChromeSearchboxStats::clear_num_zero_prefix_suggestions_shown() {
  num_zero_prefix_suggestions_shown_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ChromeSearchboxStats::_internal_num_zero_prefix_suggestions_shown() const {
  return num_zero_prefix_suggestions_shown_;
}
inline uint32_t ChromeSearchboxStats::num_zero_prefix_suggestions_shown() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeSearchboxStats.num_zero_prefix_suggestions_shown)
  return _internal_num_zero_prefix_suggestions_shown();
}
inline void ChromeSearchboxStats::_internal_set_num_zero_prefix_suggestions_shown(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  num_zero_prefix_suggestions_shown_ = value;
}
inline void ChromeSearchboxStats::set_num_zero_prefix_suggestions_shown(uint32_t value) {
  _internal_set_num_zero_prefix_suggestions_shown(value);
  // @@protoc_insertion_point(field_set:metrics.ChromeSearchboxStats.num_zero_prefix_suggestions_shown)
}

// optional string experiment_stats = 26 [deprecated = true];
inline bool ChromeSearchboxStats::_internal_has_experiment_stats() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChromeSearchboxStats::has_experiment_stats() const {
  return _internal_has_experiment_stats();
}
inline void ChromeSearchboxStats::clear_experiment_stats() {
  experiment_stats_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChromeSearchboxStats::experiment_stats() const {
  // @@protoc_insertion_point(field_get:metrics.ChromeSearchboxStats.experiment_stats)
  return _internal_experiment_stats();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChromeSearchboxStats::set_experiment_stats(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 experiment_stats_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:metrics.ChromeSearchboxStats.experiment_stats)
}
inline std::string* ChromeSearchboxStats::mutable_experiment_stats() {
  std::string* _s = _internal_mutable_experiment_stats();
  // @@protoc_insertion_point(field_mutable:metrics.ChromeSearchboxStats.experiment_stats)
  return _s;
}
inline const std::string& ChromeSearchboxStats::_internal_experiment_stats() const {
  return experiment_stats_.Get();
}
inline void ChromeSearchboxStats::_internal_set_experiment_stats(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  experiment_stats_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeSearchboxStats::_internal_mutable_experiment_stats() {
  _has_bits_[0] |= 0x00000002u;
  return experiment_stats_.Mutable(GetArenaForAllocation());
}
inline std::string* ChromeSearchboxStats::release_experiment_stats() {
  // @@protoc_insertion_point(field_release:metrics.ChromeSearchboxStats.experiment_stats)
  if (!_internal_has_experiment_stats()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = experiment_stats_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (experiment_stats_.IsDefault()) {
    experiment_stats_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChromeSearchboxStats::set_allocated_experiment_stats(std::string* experiment_stats) {
  if (experiment_stats != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  experiment_stats_.SetAllocated(experiment_stats, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (experiment_stats_.IsDefault()) {
    experiment_stats_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:metrics.ChromeSearchboxStats.experiment_stats)
}

// repeated .metrics.ChromeSearchboxStats.ExperimentStatsV2 experiment_stats_v2 = 60;
inline int ChromeSearchboxStats::_internal_experiment_stats_v2_size() const {
  return experiment_stats_v2_.size();
}
inline int ChromeSearchboxStats::experiment_stats_v2_size() const {
  return _internal_experiment_stats_v2_size();
}
inline void ChromeSearchboxStats::clear_experiment_stats_v2() {
  experiment_stats_v2_.Clear();
}
inline ::metrics::ChromeSearchboxStats_ExperimentStatsV2* ChromeSearchboxStats::mutable_experiment_stats_v2(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeSearchboxStats.experiment_stats_v2)
  return experiment_stats_v2_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeSearchboxStats_ExperimentStatsV2 >*
ChromeSearchboxStats::mutable_experiment_stats_v2() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeSearchboxStats.experiment_stats_v2)
  return &experiment_stats_v2_;
}
inline const ::metrics::ChromeSearchboxStats_ExperimentStatsV2& ChromeSearchboxStats::_internal_experiment_stats_v2(int index) const {
  return experiment_stats_v2_.Get(index);
}
inline const ::metrics::ChromeSearchboxStats_ExperimentStatsV2& ChromeSearchboxStats::experiment_stats_v2(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeSearchboxStats.experiment_stats_v2)
  return _internal_experiment_stats_v2(index);
}
inline ::metrics::ChromeSearchboxStats_ExperimentStatsV2* ChromeSearchboxStats::_internal_add_experiment_stats_v2() {
  return experiment_stats_v2_.Add();
}
inline ::metrics::ChromeSearchboxStats_ExperimentStatsV2* ChromeSearchboxStats::add_experiment_stats_v2() {
  ::metrics::ChromeSearchboxStats_ExperimentStatsV2* _add = _internal_add_experiment_stats_v2();
  // @@protoc_insertion_point(field_add:metrics.ChromeSearchboxStats.experiment_stats_v2)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeSearchboxStats_ExperimentStatsV2 >&
ChromeSearchboxStats::experiment_stats_v2() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeSearchboxStats.experiment_stats_v2)
  return experiment_stats_v2_;
}

// repeated .metrics.ChromeSearchboxStats.GroupInfo group_infos = 103;
inline int ChromeSearchboxStats::_internal_group_infos_size() const {
  return group_infos_.size();
}
inline int ChromeSearchboxStats::group_infos_size() const {
  return _internal_group_infos_size();
}
inline void ChromeSearchboxStats::clear_group_infos() {
  group_infos_.Clear();
}
inline ::metrics::ChromeSearchboxStats_GroupInfo* ChromeSearchboxStats::mutable_group_infos(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.ChromeSearchboxStats.group_infos)
  return group_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeSearchboxStats_GroupInfo >*
ChromeSearchboxStats::mutable_group_infos() {
  // @@protoc_insertion_point(field_mutable_list:metrics.ChromeSearchboxStats.group_infos)
  return &group_infos_;
}
inline const ::metrics::ChromeSearchboxStats_GroupInfo& ChromeSearchboxStats::_internal_group_infos(int index) const {
  return group_infos_.Get(index);
}
inline const ::metrics::ChromeSearchboxStats_GroupInfo& ChromeSearchboxStats::group_infos(int index) const {
  // @@protoc_insertion_point(field_get:metrics.ChromeSearchboxStats.group_infos)
  return _internal_group_infos(index);
}
inline ::metrics::ChromeSearchboxStats_GroupInfo* ChromeSearchboxStats::_internal_add_group_infos() {
  return group_infos_.Add();
}
inline ::metrics::ChromeSearchboxStats_GroupInfo* ChromeSearchboxStats::add_group_infos() {
  ::metrics::ChromeSearchboxStats_GroupInfo* _add = _internal_add_group_infos();
  // @@protoc_insertion_point(field_add:metrics.ChromeSearchboxStats.group_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::ChromeSearchboxStats_GroupInfo >&
ChromeSearchboxStats::group_infos() const {
  // @@protoc_insertion_point(field_list:metrics.ChromeSearchboxStats.group_infos)
  return group_infos_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chrome_5fsearchbox_5fstats_2eproto
