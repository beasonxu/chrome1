// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chrome_searchbox_stats.proto

#include "chrome_searchbox_stats.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace metrics {
PROTOBUF_CONSTEXPR ChromeSearchboxStats_SuggestionInfo::ChromeSearchboxStats_SuggestionInfo(
    ::_pbi::ConstantInitialized)
  : subtypes_()
  , type_(0u)
  , index_(-1){}
struct ChromeSearchboxStats_SuggestionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeSearchboxStats_SuggestionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeSearchboxStats_SuggestionInfoDefaultTypeInternal() {}
  union {
    ChromeSearchboxStats_SuggestionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeSearchboxStats_SuggestionInfoDefaultTypeInternal _ChromeSearchboxStats_SuggestionInfo_default_instance_;
PROTOBUF_CONSTEXPR ChromeSearchboxStats_ExperimentStatsV2::ChromeSearchboxStats_ExperimentStatsV2(
    ::_pbi::ConstantInitialized)
  : string_value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , int_value_(0)
  , type_int_(0){}
struct ChromeSearchboxStats_ExperimentStatsV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeSearchboxStats_ExperimentStatsV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeSearchboxStats_ExperimentStatsV2DefaultTypeInternal() {}
  union {
    ChromeSearchboxStats_ExperimentStatsV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeSearchboxStats_ExperimentStatsV2DefaultTypeInternal _ChromeSearchboxStats_ExperimentStatsV2_default_instance_;
PROTOBUF_CONSTEXPR ChromeSearchboxStats_GroupInfo::ChromeSearchboxStats_GroupInfo(
    ::_pbi::ConstantInitialized)
  : groups_set_index_(0u)
  , side_type_(0u)
  , why_this_result_reason_(0u){}
struct ChromeSearchboxStats_GroupInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeSearchboxStats_GroupInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeSearchboxStats_GroupInfoDefaultTypeInternal() {}
  union {
    ChromeSearchboxStats_GroupInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeSearchboxStats_GroupInfoDefaultTypeInternal _ChromeSearchboxStats_GroupInfo_default_instance_;
PROTOBUF_CONSTEXPR ChromeSearchboxStats::ChromeSearchboxStats(
    ::_pbi::ConstantInitialized)
  : available_suggestions_()
  , experiment_stats_v2_()
  , group_infos_()
  , client_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , experiment_stats_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , assisted_query_info_(nullptr)
  , num_zero_prefix_suggestions_shown_(0u)
  , zero_prefix_enabled_(false){}
struct ChromeSearchboxStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeSearchboxStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeSearchboxStatsDefaultTypeInternal() {}
  union {
    ChromeSearchboxStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeSearchboxStatsDefaultTypeInternal _ChromeSearchboxStats_default_instance_;
}  // namespace metrics
namespace metrics {

// ===================================================================

class ChromeSearchboxStats_SuggestionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeSearchboxStats_SuggestionInfo>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChromeSearchboxStats_SuggestionInfo::ChromeSearchboxStats_SuggestionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  subtypes_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.ChromeSearchboxStats.SuggestionInfo)
}
ChromeSearchboxStats_SuggestionInfo::ChromeSearchboxStats_SuggestionInfo(const ChromeSearchboxStats_SuggestionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      subtypes_(from.subtypes_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&type_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:metrics.ChromeSearchboxStats.SuggestionInfo)
}

inline void ChromeSearchboxStats_SuggestionInfo::SharedCtor() {
type_ = 0u;
index_ = -1;
}

ChromeSearchboxStats_SuggestionInfo::~ChromeSearchboxStats_SuggestionInfo() {
  // @@protoc_insertion_point(destructor:metrics.ChromeSearchboxStats.SuggestionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeSearchboxStats_SuggestionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChromeSearchboxStats_SuggestionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChromeSearchboxStats_SuggestionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.ChromeSearchboxStats.SuggestionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subtypes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    type_ = 0u;
    index_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeSearchboxStats_SuggestionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 index = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 subtypes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_subtypes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_subtypes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeSearchboxStats_SuggestionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.ChromeSearchboxStats.SuggestionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 index = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // repeated uint32 subtypes = 3;
  for (int i = 0, n = this->_internal_subtypes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_subtypes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.ChromeSearchboxStats.SuggestionInfo)
  return target;
}

size_t ChromeSearchboxStats_SuggestionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.ChromeSearchboxStats.SuggestionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 subtypes = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->subtypes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_subtypes_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 type = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

    // optional int32 index = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeSearchboxStats_SuggestionInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeSearchboxStats_SuggestionInfo*>(
      &from));
}

void ChromeSearchboxStats_SuggestionInfo::MergeFrom(const ChromeSearchboxStats_SuggestionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.ChromeSearchboxStats.SuggestionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  subtypes_.MergeFrom(from.subtypes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeSearchboxStats_SuggestionInfo::CopyFrom(const ChromeSearchboxStats_SuggestionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.ChromeSearchboxStats.SuggestionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeSearchboxStats_SuggestionInfo::IsInitialized() const {
  return true;
}

void ChromeSearchboxStats_SuggestionInfo::InternalSwap(ChromeSearchboxStats_SuggestionInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subtypes_.InternalSwap(&other->subtypes_);
  swap(type_, other->type_);
  swap(index_, other->index_);
}

std::string ChromeSearchboxStats_SuggestionInfo::GetTypeName() const {
  return "metrics.ChromeSearchboxStats.SuggestionInfo";
}


// ===================================================================

class ChromeSearchboxStats_ExperimentStatsV2::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeSearchboxStats_ExperimentStatsV2>()._has_bits_);
  static void set_has_type_int(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_int_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChromeSearchboxStats_ExperimentStatsV2::ChromeSearchboxStats_ExperimentStatsV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.ChromeSearchboxStats.ExperimentStatsV2)
}
ChromeSearchboxStats_ExperimentStatsV2::ChromeSearchboxStats_ExperimentStatsV2(const ChromeSearchboxStats_ExperimentStatsV2& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string_value()) {
    string_value_.Set(from._internal_string_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&int_value_, &from.int_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_int_) -
    reinterpret_cast<char*>(&int_value_)) + sizeof(type_int_));
  // @@protoc_insertion_point(copy_constructor:metrics.ChromeSearchboxStats.ExperimentStatsV2)
}

inline void ChromeSearchboxStats_ExperimentStatsV2::SharedCtor() {
string_value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  string_value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&int_value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_int_) -
    reinterpret_cast<char*>(&int_value_)) + sizeof(type_int_));
}

ChromeSearchboxStats_ExperimentStatsV2::~ChromeSearchboxStats_ExperimentStatsV2() {
  // @@protoc_insertion_point(destructor:metrics.ChromeSearchboxStats.ExperimentStatsV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeSearchboxStats_ExperimentStatsV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  string_value_.Destroy();
}

void ChromeSearchboxStats_ExperimentStatsV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChromeSearchboxStats_ExperimentStatsV2::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.ChromeSearchboxStats.ExperimentStatsV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    string_value_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&int_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_int_) -
        reinterpret_cast<char*>(&int_value_)) + sizeof(type_int_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeSearchboxStats_ExperimentStatsV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string string_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 int_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_int_value(&has_bits);
          int_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 type_int = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_type_int(&has_bits);
          type_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeSearchboxStats_ExperimentStatsV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.ChromeSearchboxStats.ExperimentStatsV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string string_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_string_value(), target);
  }

  // optional int32 int_value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_int_value(), target);
  }

  // optional int32 type_int = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_type_int(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.ChromeSearchboxStats.ExperimentStatsV2)
  return target;
}

size_t ChromeSearchboxStats_ExperimentStatsV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.ChromeSearchboxStats.ExperimentStatsV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string string_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
    }

    // optional int32 int_value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int_value());
    }

    // optional int32 type_int = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type_int());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeSearchboxStats_ExperimentStatsV2::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeSearchboxStats_ExperimentStatsV2*>(
      &from));
}

void ChromeSearchboxStats_ExperimentStatsV2::MergeFrom(const ChromeSearchboxStats_ExperimentStatsV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.ChromeSearchboxStats.ExperimentStatsV2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000002u) {
      int_value_ = from.int_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_int_ = from.type_int_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeSearchboxStats_ExperimentStatsV2::CopyFrom(const ChromeSearchboxStats_ExperimentStatsV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.ChromeSearchboxStats.ExperimentStatsV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeSearchboxStats_ExperimentStatsV2::IsInitialized() const {
  return true;
}

void ChromeSearchboxStats_ExperimentStatsV2::InternalSwap(ChromeSearchboxStats_ExperimentStatsV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &string_value_, lhs_arena,
      &other->string_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeSearchboxStats_ExperimentStatsV2, type_int_)
      + sizeof(ChromeSearchboxStats_ExperimentStatsV2::type_int_)
      - PROTOBUF_FIELD_OFFSET(ChromeSearchboxStats_ExperimentStatsV2, int_value_)>(
          reinterpret_cast<char*>(&int_value_),
          reinterpret_cast<char*>(&other->int_value_));
}

std::string ChromeSearchboxStats_ExperimentStatsV2::GetTypeName() const {
  return "metrics.ChromeSearchboxStats.ExperimentStatsV2";
}


// ===================================================================

class ChromeSearchboxStats_GroupInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeSearchboxStats_GroupInfo>()._has_bits_);
  static void set_has_groups_set_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_side_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_why_this_result_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ChromeSearchboxStats_GroupInfo::ChromeSearchboxStats_GroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.ChromeSearchboxStats.GroupInfo)
}
ChromeSearchboxStats_GroupInfo::ChromeSearchboxStats_GroupInfo(const ChromeSearchboxStats_GroupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&groups_set_index_, &from.groups_set_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&why_this_result_reason_) -
    reinterpret_cast<char*>(&groups_set_index_)) + sizeof(why_this_result_reason_));
  // @@protoc_insertion_point(copy_constructor:metrics.ChromeSearchboxStats.GroupInfo)
}

inline void ChromeSearchboxStats_GroupInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&groups_set_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&why_this_result_reason_) -
    reinterpret_cast<char*>(&groups_set_index_)) + sizeof(why_this_result_reason_));
}

ChromeSearchboxStats_GroupInfo::~ChromeSearchboxStats_GroupInfo() {
  // @@protoc_insertion_point(destructor:metrics.ChromeSearchboxStats.GroupInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeSearchboxStats_GroupInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChromeSearchboxStats_GroupInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChromeSearchboxStats_GroupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.ChromeSearchboxStats.GroupInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&groups_set_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&why_this_result_reason_) -
        reinterpret_cast<char*>(&groups_set_index_)) + sizeof(why_this_result_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeSearchboxStats_GroupInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 groups_set_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_groups_set_index(&has_bits);
          groups_set_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 side_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_side_type(&has_bits);
          side_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 why_this_result_reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_why_this_result_reason(&has_bits);
          why_this_result_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeSearchboxStats_GroupInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.ChromeSearchboxStats.GroupInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 groups_set_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_groups_set_index(), target);
  }

  // optional uint32 side_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_side_type(), target);
  }

  // optional uint32 why_this_result_reason = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_why_this_result_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.ChromeSearchboxStats.GroupInfo)
  return target;
}

size_t ChromeSearchboxStats_GroupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.ChromeSearchboxStats.GroupInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 groups_set_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_groups_set_index());
    }

    // optional uint32 side_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_side_type());
    }

    // optional uint32 why_this_result_reason = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_why_this_result_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeSearchboxStats_GroupInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeSearchboxStats_GroupInfo*>(
      &from));
}

void ChromeSearchboxStats_GroupInfo::MergeFrom(const ChromeSearchboxStats_GroupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.ChromeSearchboxStats.GroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      groups_set_index_ = from.groups_set_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      side_type_ = from.side_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      why_this_result_reason_ = from.why_this_result_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeSearchboxStats_GroupInfo::CopyFrom(const ChromeSearchboxStats_GroupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.ChromeSearchboxStats.GroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeSearchboxStats_GroupInfo::IsInitialized() const {
  return true;
}

void ChromeSearchboxStats_GroupInfo::InternalSwap(ChromeSearchboxStats_GroupInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeSearchboxStats_GroupInfo, why_this_result_reason_)
      + sizeof(ChromeSearchboxStats_GroupInfo::why_this_result_reason_)
      - PROTOBUF_FIELD_OFFSET(ChromeSearchboxStats_GroupInfo, groups_set_index_)>(
          reinterpret_cast<char*>(&groups_set_index_),
          reinterpret_cast<char*>(&other->groups_set_index_));
}

std::string ChromeSearchboxStats_GroupInfo::GetTypeName() const {
  return "metrics.ChromeSearchboxStats.GroupInfo";
}


// ===================================================================

class ChromeSearchboxStats::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeSearchboxStats>()._has_bits_);
  static void set_has_client_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::metrics::ChromeSearchboxStats_SuggestionInfo& assisted_query_info(const ChromeSearchboxStats* msg);
  static void set_has_assisted_query_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_zero_prefix_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_zero_prefix_suggestions_shown(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_experiment_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::metrics::ChromeSearchboxStats_SuggestionInfo&
ChromeSearchboxStats::_Internal::assisted_query_info(const ChromeSearchboxStats* msg) {
  return *msg->assisted_query_info_;
}
ChromeSearchboxStats::ChromeSearchboxStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  available_suggestions_(arena),
  experiment_stats_v2_(arena),
  group_infos_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.ChromeSearchboxStats)
}
ChromeSearchboxStats::ChromeSearchboxStats(const ChromeSearchboxStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      available_suggestions_(from.available_suggestions_),
      experiment_stats_v2_(from.experiment_stats_v2_),
      group_infos_(from.group_infos_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  client_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_client_name()) {
    client_name_.Set(from._internal_client_name(), 
      GetArenaForAllocation());
  }
  experiment_stats_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    experiment_stats_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_experiment_stats()) {
    experiment_stats_.Set(from._internal_experiment_stats(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_assisted_query_info()) {
    assisted_query_info_ = new ::metrics::ChromeSearchboxStats_SuggestionInfo(*from.assisted_query_info_);
  } else {
    assisted_query_info_ = nullptr;
  }
  ::memcpy(&num_zero_prefix_suggestions_shown_, &from.num_zero_prefix_suggestions_shown_,
    static_cast<size_t>(reinterpret_cast<char*>(&zero_prefix_enabled_) -
    reinterpret_cast<char*>(&num_zero_prefix_suggestions_shown_)) + sizeof(zero_prefix_enabled_));
  // @@protoc_insertion_point(copy_constructor:metrics.ChromeSearchboxStats)
}

inline void ChromeSearchboxStats::SharedCtor() {
client_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
experiment_stats_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  experiment_stats_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&assisted_query_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&zero_prefix_enabled_) -
    reinterpret_cast<char*>(&assisted_query_info_)) + sizeof(zero_prefix_enabled_));
}

ChromeSearchboxStats::~ChromeSearchboxStats() {
  // @@protoc_insertion_point(destructor:metrics.ChromeSearchboxStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeSearchboxStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  client_name_.Destroy();
  experiment_stats_.Destroy();
  if (this != internal_default_instance()) delete assisted_query_info_;
}

void ChromeSearchboxStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChromeSearchboxStats::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.ChromeSearchboxStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  available_suggestions_.Clear();
  experiment_stats_v2_.Clear();
  group_infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      client_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      experiment_stats_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(assisted_query_info_ != nullptr);
      assisted_query_info_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&num_zero_prefix_suggestions_shown_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&zero_prefix_enabled_) -
        reinterpret_cast<char*>(&num_zero_prefix_suggestions_shown_)) + sizeof(zero_prefix_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeSearchboxStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string client_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_client_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.ChromeSearchboxStats.SuggestionInfo assisted_query_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_assisted_query_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.ChromeSearchboxStats.SuggestionInfo available_suggestions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_available_suggestions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string experiment_stats = 26 [deprecated = true];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_experiment_stats();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_zero_prefix_suggestions_shown = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_num_zero_prefix_suggestions_shown(&has_bits);
          num_zero_prefix_suggestions_shown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool zero_prefix_enabled = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_zero_prefix_enabled(&has_bits);
          zero_prefix_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.ChromeSearchboxStats.ExperimentStatsV2 experiment_stats_v2 = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_experiment_stats_v2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<482>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.ChromeSearchboxStats.GroupInfo group_infos = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_group_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<826>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeSearchboxStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.ChromeSearchboxStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string client_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client_name(), target);
  }

  // optional .metrics.ChromeSearchboxStats.SuggestionInfo assisted_query_info = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::assisted_query_info(this),
        _Internal::assisted_query_info(this).GetCachedSize(), target, stream);
  }

  // repeated .metrics.ChromeSearchboxStats.SuggestionInfo available_suggestions = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_available_suggestions_size()); i < n; i++) {
    const auto& repfield = this->_internal_available_suggestions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string experiment_stats = 26 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_experiment_stats(), target);
  }

  // optional uint32 num_zero_prefix_suggestions_shown = 37;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(37, this->_internal_num_zero_prefix_suggestions_shown(), target);
  }

  // optional bool zero_prefix_enabled = 38;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(38, this->_internal_zero_prefix_enabled(), target);
  }

  // repeated .metrics.ChromeSearchboxStats.ExperimentStatsV2 experiment_stats_v2 = 60;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_experiment_stats_v2_size()); i < n; i++) {
    const auto& repfield = this->_internal_experiment_stats_v2(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(60, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .metrics.ChromeSearchboxStats.GroupInfo group_infos = 103;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_group_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(103, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.ChromeSearchboxStats)
  return target;
}

size_t ChromeSearchboxStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.ChromeSearchboxStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.ChromeSearchboxStats.SuggestionInfo available_suggestions = 6;
  total_size += 1UL * this->_internal_available_suggestions_size();
  for (const auto& msg : this->available_suggestions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.ChromeSearchboxStats.ExperimentStatsV2 experiment_stats_v2 = 60;
  total_size += 2UL * this->_internal_experiment_stats_v2_size();
  for (const auto& msg : this->experiment_stats_v2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .metrics.ChromeSearchboxStats.GroupInfo group_infos = 103;
  total_size += 2UL * this->_internal_group_infos_size();
  for (const auto& msg : this->group_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string client_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_name());
    }

    // optional string experiment_stats = 26 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_experiment_stats());
    }

    // optional .metrics.ChromeSearchboxStats.SuggestionInfo assisted_query_info = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *assisted_query_info_);
    }

    // optional uint32 num_zero_prefix_suggestions_shown = 37;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_num_zero_prefix_suggestions_shown());
    }

    // optional bool zero_prefix_enabled = 38;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeSearchboxStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeSearchboxStats*>(
      &from));
}

void ChromeSearchboxStats::MergeFrom(const ChromeSearchboxStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.ChromeSearchboxStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  available_suggestions_.MergeFrom(from.available_suggestions_);
  experiment_stats_v2_.MergeFrom(from.experiment_stats_v2_);
  group_infos_.MergeFrom(from.group_infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_client_name(from._internal_client_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_experiment_stats(from._internal_experiment_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_assisted_query_info()->::metrics::ChromeSearchboxStats_SuggestionInfo::MergeFrom(from._internal_assisted_query_info());
    }
    if (cached_has_bits & 0x00000008u) {
      num_zero_prefix_suggestions_shown_ = from.num_zero_prefix_suggestions_shown_;
    }
    if (cached_has_bits & 0x00000010u) {
      zero_prefix_enabled_ = from.zero_prefix_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeSearchboxStats::CopyFrom(const ChromeSearchboxStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.ChromeSearchboxStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeSearchboxStats::IsInitialized() const {
  return true;
}

void ChromeSearchboxStats::InternalSwap(ChromeSearchboxStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  available_suggestions_.InternalSwap(&other->available_suggestions_);
  experiment_stats_v2_.InternalSwap(&other->experiment_stats_v2_);
  group_infos_.InternalSwap(&other->group_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &client_name_, lhs_arena,
      &other->client_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &experiment_stats_, lhs_arena,
      &other->experiment_stats_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeSearchboxStats, zero_prefix_enabled_)
      + sizeof(ChromeSearchboxStats::zero_prefix_enabled_)
      - PROTOBUF_FIELD_OFFSET(ChromeSearchboxStats, assisted_query_info_)>(
          reinterpret_cast<char*>(&assisted_query_info_),
          reinterpret_cast<char*>(&other->assisted_query_info_));
}

std::string ChromeSearchboxStats::GetTypeName() const {
  return "metrics.ChromeSearchboxStats";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::ChromeSearchboxStats_SuggestionInfo*
Arena::CreateMaybeMessage< ::metrics::ChromeSearchboxStats_SuggestionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::ChromeSearchboxStats_SuggestionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::ChromeSearchboxStats_ExperimentStatsV2*
Arena::CreateMaybeMessage< ::metrics::ChromeSearchboxStats_ExperimentStatsV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::ChromeSearchboxStats_ExperimentStatsV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::ChromeSearchboxStats_GroupInfo*
Arena::CreateMaybeMessage< ::metrics::ChromeSearchboxStats_GroupInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::ChromeSearchboxStats_GroupInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::ChromeSearchboxStats*
Arena::CreateMaybeMessage< ::metrics::ChromeSearchboxStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::ChromeSearchboxStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
