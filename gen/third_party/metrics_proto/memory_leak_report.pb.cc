// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: memory_leak_report.proto

#include "memory_leak_report.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace metrics {
PROTOBUF_CONSTEXPR MemoryLeakReportProto_Params::MemoryLeakReportProto_Params(
    ::_pbi::ConstantInitialized)
  : sampling_rate_(0)
  , max_stack_depth_(0u)
  , analysis_interval_bytes_(uint64_t{0u})
  , size_suspicion_threshold_(0u)
  , call_stack_suspicion_threshold_(0u){}
struct MemoryLeakReportProto_ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryLeakReportProto_ParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryLeakReportProto_ParamsDefaultTypeInternal() {}
  union {
    MemoryLeakReportProto_Params _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryLeakReportProto_ParamsDefaultTypeInternal _MemoryLeakReportProto_Params_default_instance_;
PROTOBUF_CONSTEXPR MemoryLeakReportProto_AllocationBreakdown::MemoryLeakReportProto_AllocationBreakdown(
    ::_pbi::ConstantInitialized)
  : counts_by_size_()
  , count_for_call_stack_(0u){}
struct MemoryLeakReportProto_AllocationBreakdownDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryLeakReportProto_AllocationBreakdownDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryLeakReportProto_AllocationBreakdownDefaultTypeInternal() {}
  union {
    MemoryLeakReportProto_AllocationBreakdown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryLeakReportProto_AllocationBreakdownDefaultTypeInternal _MemoryLeakReportProto_AllocationBreakdown_default_instance_;
PROTOBUF_CONSTEXPR MemoryLeakReportProto_MemoryUsageInfo::MemoryLeakReportProto_MemoryUsageInfo(
    ::_pbi::ConstantInitialized)
  : available_ram_mb_(uint64_t{0u})
  , chrome_ram_usage_mb_(uint64_t{0u}){}
struct MemoryLeakReportProto_MemoryUsageInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryLeakReportProto_MemoryUsageInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryLeakReportProto_MemoryUsageInfoDefaultTypeInternal() {}
  union {
    MemoryLeakReportProto_MemoryUsageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryLeakReportProto_MemoryUsageInfoDefaultTypeInternal _MemoryLeakReportProto_MemoryUsageInfo_default_instance_;
PROTOBUF_CONSTEXPR MemoryLeakReportProto::MemoryLeakReportProto(
    ::_pbi::ConstantInitialized)
  : call_stack_()
  , alloc_breakdown_history_()
  , build_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , params_(nullptr)
  , memory_usage_info_(nullptr)
  , size_bytes_(0u)
  , source_process_(0)

  , num_rising_intervals_(0u)
  , num_allocs_increase_(0u){}
struct MemoryLeakReportProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryLeakReportProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryLeakReportProtoDefaultTypeInternal() {}
  union {
    MemoryLeakReportProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryLeakReportProtoDefaultTypeInternal _MemoryLeakReportProto_default_instance_;
}  // namespace metrics
namespace metrics {
bool MemoryLeakReportProto_ProcessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MemoryLeakReportProto_ProcessType_strings[3] = {};

static const char MemoryLeakReportProto_ProcessType_names[] =
  "BROWSER_PROCESS"
  "RENDERER_PROCESS"
  "UNKNOWN_PROCESS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MemoryLeakReportProto_ProcessType_entries[] = {
  { {MemoryLeakReportProto_ProcessType_names + 0, 15}, 1 },
  { {MemoryLeakReportProto_ProcessType_names + 15, 16}, 2 },
  { {MemoryLeakReportProto_ProcessType_names + 31, 15}, 0 },
};

static const int MemoryLeakReportProto_ProcessType_entries_by_number[] = {
  2, // 0 -> UNKNOWN_PROCESS
  0, // 1 -> BROWSER_PROCESS
  1, // 2 -> RENDERER_PROCESS
};

const std::string& MemoryLeakReportProto_ProcessType_Name(
    MemoryLeakReportProto_ProcessType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MemoryLeakReportProto_ProcessType_entries,
          MemoryLeakReportProto_ProcessType_entries_by_number,
          3, MemoryLeakReportProto_ProcessType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MemoryLeakReportProto_ProcessType_entries,
      MemoryLeakReportProto_ProcessType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MemoryLeakReportProto_ProcessType_strings[idx].get();
}
bool MemoryLeakReportProto_ProcessType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MemoryLeakReportProto_ProcessType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MemoryLeakReportProto_ProcessType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<MemoryLeakReportProto_ProcessType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MemoryLeakReportProto_ProcessType MemoryLeakReportProto::UNKNOWN_PROCESS;
constexpr MemoryLeakReportProto_ProcessType MemoryLeakReportProto::BROWSER_PROCESS;
constexpr MemoryLeakReportProto_ProcessType MemoryLeakReportProto::RENDERER_PROCESS;
constexpr MemoryLeakReportProto_ProcessType MemoryLeakReportProto::ProcessType_MIN;
constexpr MemoryLeakReportProto_ProcessType MemoryLeakReportProto::ProcessType_MAX;
constexpr int MemoryLeakReportProto::ProcessType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class MemoryLeakReportProto_Params::_Internal {
 public:
  using HasBits = decltype(std::declval<MemoryLeakReportProto_Params>()._has_bits_);
  static void set_has_sampling_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_stack_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_analysis_interval_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_size_suspicion_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_call_stack_suspicion_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MemoryLeakReportProto_Params::MemoryLeakReportProto_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.MemoryLeakReportProto.Params)
}
MemoryLeakReportProto_Params::MemoryLeakReportProto_Params(const MemoryLeakReportProto_Params& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&sampling_rate_, &from.sampling_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&call_stack_suspicion_threshold_) -
    reinterpret_cast<char*>(&sampling_rate_)) + sizeof(call_stack_suspicion_threshold_));
  // @@protoc_insertion_point(copy_constructor:metrics.MemoryLeakReportProto.Params)
}

inline void MemoryLeakReportProto_Params::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sampling_rate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&call_stack_suspicion_threshold_) -
    reinterpret_cast<char*>(&sampling_rate_)) + sizeof(call_stack_suspicion_threshold_));
}

MemoryLeakReportProto_Params::~MemoryLeakReportProto_Params() {
  // @@protoc_insertion_point(destructor:metrics.MemoryLeakReportProto.Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemoryLeakReportProto_Params::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MemoryLeakReportProto_Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemoryLeakReportProto_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.MemoryLeakReportProto.Params)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&sampling_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&call_stack_suspicion_threshold_) -
        reinterpret_cast<char*>(&sampling_rate_)) + sizeof(call_stack_suspicion_threshold_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MemoryLeakReportProto_Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float sampling_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_sampling_rate(&has_bits);
          sampling_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_stack_depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_max_stack_depth(&has_bits);
          max_stack_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 analysis_interval_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_analysis_interval_bytes(&has_bits);
          analysis_interval_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 size_suspicion_threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_size_suspicion_threshold(&has_bits);
          size_suspicion_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 call_stack_suspicion_threshold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_call_stack_suspicion_threshold(&has_bits);
          call_stack_suspicion_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryLeakReportProto_Params::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.MemoryLeakReportProto.Params)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float sampling_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_sampling_rate(), target);
  }

  // optional uint32 max_stack_depth = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_stack_depth(), target);
  }

  // optional uint64 analysis_interval_bytes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_analysis_interval_bytes(), target);
  }

  // optional uint32 size_suspicion_threshold = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_size_suspicion_threshold(), target);
  }

  // optional uint32 call_stack_suspicion_threshold = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_call_stack_suspicion_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.MemoryLeakReportProto.Params)
  return target;
}

size_t MemoryLeakReportProto_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.MemoryLeakReportProto.Params)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float sampling_rate = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 max_stack_depth = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_stack_depth());
    }

    // optional uint64 analysis_interval_bytes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_analysis_interval_bytes());
    }

    // optional uint32 size_suspicion_threshold = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size_suspicion_threshold());
    }

    // optional uint32 call_stack_suspicion_threshold = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_call_stack_suspicion_threshold());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryLeakReportProto_Params::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MemoryLeakReportProto_Params*>(
      &from));
}

void MemoryLeakReportProto_Params::MergeFrom(const MemoryLeakReportProto_Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.MemoryLeakReportProto.Params)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      sampling_rate_ = from.sampling_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_stack_depth_ = from.max_stack_depth_;
    }
    if (cached_has_bits & 0x00000004u) {
      analysis_interval_bytes_ = from.analysis_interval_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      size_suspicion_threshold_ = from.size_suspicion_threshold_;
    }
    if (cached_has_bits & 0x00000010u) {
      call_stack_suspicion_threshold_ = from.call_stack_suspicion_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MemoryLeakReportProto_Params::CopyFrom(const MemoryLeakReportProto_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.MemoryLeakReportProto.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLeakReportProto_Params::IsInitialized() const {
  return true;
}

void MemoryLeakReportProto_Params::InternalSwap(MemoryLeakReportProto_Params* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryLeakReportProto_Params, call_stack_suspicion_threshold_)
      + sizeof(MemoryLeakReportProto_Params::call_stack_suspicion_threshold_)
      - PROTOBUF_FIELD_OFFSET(MemoryLeakReportProto_Params, sampling_rate_)>(
          reinterpret_cast<char*>(&sampling_rate_),
          reinterpret_cast<char*>(&other->sampling_rate_));
}

std::string MemoryLeakReportProto_Params::GetTypeName() const {
  return "metrics.MemoryLeakReportProto.Params";
}


// ===================================================================

class MemoryLeakReportProto_AllocationBreakdown::_Internal {
 public:
  using HasBits = decltype(std::declval<MemoryLeakReportProto_AllocationBreakdown>()._has_bits_);
  static void set_has_count_for_call_stack(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MemoryLeakReportProto_AllocationBreakdown::MemoryLeakReportProto_AllocationBreakdown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  counts_by_size_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.MemoryLeakReportProto.AllocationBreakdown)
}
MemoryLeakReportProto_AllocationBreakdown::MemoryLeakReportProto_AllocationBreakdown(const MemoryLeakReportProto_AllocationBreakdown& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      counts_by_size_(from.counts_by_size_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  count_for_call_stack_ = from.count_for_call_stack_;
  // @@protoc_insertion_point(copy_constructor:metrics.MemoryLeakReportProto.AllocationBreakdown)
}

inline void MemoryLeakReportProto_AllocationBreakdown::SharedCtor() {
count_for_call_stack_ = 0u;
}

MemoryLeakReportProto_AllocationBreakdown::~MemoryLeakReportProto_AllocationBreakdown() {
  // @@protoc_insertion_point(destructor:metrics.MemoryLeakReportProto.AllocationBreakdown)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemoryLeakReportProto_AllocationBreakdown::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MemoryLeakReportProto_AllocationBreakdown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemoryLeakReportProto_AllocationBreakdown::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  counts_by_size_.Clear();
  count_for_call_stack_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MemoryLeakReportProto_AllocationBreakdown::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 counts_by_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_counts_by_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_counts_by_size(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count_for_call_stack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count_for_call_stack(&has_bits);
          count_for_call_stack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryLeakReportProto_AllocationBreakdown::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 counts_by_size = 1;
  for (int i = 0, n = this->_internal_counts_by_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_counts_by_size(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 count_for_call_stack = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count_for_call_stack(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.MemoryLeakReportProto.AllocationBreakdown)
  return target;
}

size_t MemoryLeakReportProto_AllocationBreakdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 counts_by_size = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->counts_by_size_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_counts_by_size_size());
    total_size += data_size;
  }

  // optional uint32 count_for_call_stack = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count_for_call_stack());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryLeakReportProto_AllocationBreakdown::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MemoryLeakReportProto_AllocationBreakdown*>(
      &from));
}

void MemoryLeakReportProto_AllocationBreakdown::MergeFrom(const MemoryLeakReportProto_AllocationBreakdown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  counts_by_size_.MergeFrom(from.counts_by_size_);
  if (from._internal_has_count_for_call_stack()) {
    _internal_set_count_for_call_stack(from._internal_count_for_call_stack());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MemoryLeakReportProto_AllocationBreakdown::CopyFrom(const MemoryLeakReportProto_AllocationBreakdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLeakReportProto_AllocationBreakdown::IsInitialized() const {
  return true;
}

void MemoryLeakReportProto_AllocationBreakdown::InternalSwap(MemoryLeakReportProto_AllocationBreakdown* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  counts_by_size_.InternalSwap(&other->counts_by_size_);
  swap(count_for_call_stack_, other->count_for_call_stack_);
}

std::string MemoryLeakReportProto_AllocationBreakdown::GetTypeName() const {
  return "metrics.MemoryLeakReportProto.AllocationBreakdown";
}


// ===================================================================

class MemoryLeakReportProto_MemoryUsageInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MemoryLeakReportProto_MemoryUsageInfo>()._has_bits_);
  static void set_has_available_ram_mb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chrome_ram_usage_mb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MemoryLeakReportProto_MemoryUsageInfo::MemoryLeakReportProto_MemoryUsageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.MemoryLeakReportProto.MemoryUsageInfo)
}
MemoryLeakReportProto_MemoryUsageInfo::MemoryLeakReportProto_MemoryUsageInfo(const MemoryLeakReportProto_MemoryUsageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&available_ram_mb_, &from.available_ram_mb_,
    static_cast<size_t>(reinterpret_cast<char*>(&chrome_ram_usage_mb_) -
    reinterpret_cast<char*>(&available_ram_mb_)) + sizeof(chrome_ram_usage_mb_));
  // @@protoc_insertion_point(copy_constructor:metrics.MemoryLeakReportProto.MemoryUsageInfo)
}

inline void MemoryLeakReportProto_MemoryUsageInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&available_ram_mb_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chrome_ram_usage_mb_) -
    reinterpret_cast<char*>(&available_ram_mb_)) + sizeof(chrome_ram_usage_mb_));
}

MemoryLeakReportProto_MemoryUsageInfo::~MemoryLeakReportProto_MemoryUsageInfo() {
  // @@protoc_insertion_point(destructor:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemoryLeakReportProto_MemoryUsageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MemoryLeakReportProto_MemoryUsageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemoryLeakReportProto_MemoryUsageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&available_ram_mb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chrome_ram_usage_mb_) -
        reinterpret_cast<char*>(&available_ram_mb_)) + sizeof(chrome_ram_usage_mb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MemoryLeakReportProto_MemoryUsageInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 available_ram_mb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_available_ram_mb(&has_bits);
          available_ram_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chrome_ram_usage_mb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chrome_ram_usage_mb(&has_bits);
          chrome_ram_usage_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryLeakReportProto_MemoryUsageInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 available_ram_mb = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_available_ram_mb(), target);
  }

  // optional uint64 chrome_ram_usage_mb = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chrome_ram_usage_mb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  return target;
}

size_t MemoryLeakReportProto_MemoryUsageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 available_ram_mb = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_available_ram_mb());
    }

    // optional uint64 chrome_ram_usage_mb = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_chrome_ram_usage_mb());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryLeakReportProto_MemoryUsageInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MemoryLeakReportProto_MemoryUsageInfo*>(
      &from));
}

void MemoryLeakReportProto_MemoryUsageInfo::MergeFrom(const MemoryLeakReportProto_MemoryUsageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      available_ram_mb_ = from.available_ram_mb_;
    }
    if (cached_has_bits & 0x00000002u) {
      chrome_ram_usage_mb_ = from.chrome_ram_usage_mb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MemoryLeakReportProto_MemoryUsageInfo::CopyFrom(const MemoryLeakReportProto_MemoryUsageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLeakReportProto_MemoryUsageInfo::IsInitialized() const {
  return true;
}

void MemoryLeakReportProto_MemoryUsageInfo::InternalSwap(MemoryLeakReportProto_MemoryUsageInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryLeakReportProto_MemoryUsageInfo, chrome_ram_usage_mb_)
      + sizeof(MemoryLeakReportProto_MemoryUsageInfo::chrome_ram_usage_mb_)
      - PROTOBUF_FIELD_OFFSET(MemoryLeakReportProto_MemoryUsageInfo, available_ram_mb_)>(
          reinterpret_cast<char*>(&available_ram_mb_),
          reinterpret_cast<char*>(&other->available_ram_mb_));
}

std::string MemoryLeakReportProto_MemoryUsageInfo::GetTypeName() const {
  return "metrics.MemoryLeakReportProto.MemoryUsageInfo";
}


// ===================================================================

class MemoryLeakReportProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MemoryLeakReportProto>()._has_bits_);
  static void set_has_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::metrics::MemoryLeakReportProto_Params& params(const MemoryLeakReportProto* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_process(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_rising_intervals(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_allocs_increase(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::metrics::MemoryLeakReportProto_MemoryUsageInfo& memory_usage_info(const MemoryLeakReportProto* msg);
  static void set_has_memory_usage_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::metrics::MemoryLeakReportProto_Params&
MemoryLeakReportProto::_Internal::params(const MemoryLeakReportProto* msg) {
  return *msg->params_;
}
const ::metrics::MemoryLeakReportProto_MemoryUsageInfo&
MemoryLeakReportProto::_Internal::memory_usage_info(const MemoryLeakReportProto* msg) {
  return *msg->memory_usage_info_;
}
MemoryLeakReportProto::MemoryLeakReportProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  call_stack_(arena),
  alloc_breakdown_history_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:metrics.MemoryLeakReportProto)
}
MemoryLeakReportProto::MemoryLeakReportProto(const MemoryLeakReportProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      call_stack_(from.call_stack_),
      alloc_breakdown_history_(from.alloc_breakdown_history_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  build_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    build_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_build_id()) {
    build_id_.Set(from._internal_build_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_params()) {
    params_ = new ::metrics::MemoryLeakReportProto_Params(*from.params_);
  } else {
    params_ = nullptr;
  }
  if (from._internal_has_memory_usage_info()) {
    memory_usage_info_ = new ::metrics::MemoryLeakReportProto_MemoryUsageInfo(*from.memory_usage_info_);
  } else {
    memory_usage_info_ = nullptr;
  }
  ::memcpy(&size_bytes_, &from.size_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_allocs_increase_) -
    reinterpret_cast<char*>(&size_bytes_)) + sizeof(num_allocs_increase_));
  // @@protoc_insertion_point(copy_constructor:metrics.MemoryLeakReportProto)
}

inline void MemoryLeakReportProto::SharedCtor() {
build_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  build_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&params_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_allocs_increase_) -
    reinterpret_cast<char*>(&params_)) + sizeof(num_allocs_increase_));
}

MemoryLeakReportProto::~MemoryLeakReportProto() {
  // @@protoc_insertion_point(destructor:metrics.MemoryLeakReportProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemoryLeakReportProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  build_id_.Destroy();
  if (this != internal_default_instance()) delete params_;
  if (this != internal_default_instance()) delete memory_usage_info_;
}

void MemoryLeakReportProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemoryLeakReportProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.MemoryLeakReportProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  call_stack_.Clear();
  alloc_breakdown_history_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      build_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(params_ != nullptr);
      params_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(memory_usage_info_ != nullptr);
      memory_usage_info_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&size_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_allocs_increase_) -
        reinterpret_cast<char*>(&size_bytes_)) + sizeof(num_allocs_increase_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MemoryLeakReportProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 call_stack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_call_stack(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_call_stack(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 size_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_size_bytes(&has_bits);
          size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.MemoryLeakReportProto.Params params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .metrics.MemoryLeakReportProto.AllocationBreakdown alloc_breakdown_history = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alloc_breakdown_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.MemoryLeakReportProto.ProcessType source_process = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::MemoryLeakReportProto_ProcessType_IsValid(val))) {
            _internal_set_source_process(static_cast<::metrics::MemoryLeakReportProto_ProcessType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes build_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_build_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_rising_intervals = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_num_rising_intervals(&has_bits);
          num_rising_intervals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_allocs_increase = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_num_allocs_increase(&has_bits);
          num_allocs_increase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .metrics.MemoryLeakReportProto.MemoryUsageInfo memory_usage_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory_usage_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryLeakReportProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metrics.MemoryLeakReportProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 call_stack = 1;
  for (int i = 0, n = this->_internal_call_stack_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_call_stack(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 size_bytes = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size_bytes(), target);
  }

  // optional .metrics.MemoryLeakReportProto.Params params = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  // repeated .metrics.MemoryLeakReportProto.AllocationBreakdown alloc_breakdown_history = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_alloc_breakdown_history_size()); i < n; i++) {
    const auto& repfield = this->_internal_alloc_breakdown_history(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .metrics.MemoryLeakReportProto.ProcessType source_process = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_source_process(), target);
  }

  // optional bytes build_id = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_build_id(), target);
  }

  // optional uint32 num_rising_intervals = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_num_rising_intervals(), target);
  }

  // optional uint32 num_allocs_increase = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_num_allocs_increase(), target);
  }

  // optional .metrics.MemoryLeakReportProto.MemoryUsageInfo memory_usage_info = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::memory_usage_info(this),
        _Internal::memory_usage_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.MemoryLeakReportProto)
  return target;
}

size_t MemoryLeakReportProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.MemoryLeakReportProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 call_stack = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->call_stack_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_call_stack_size());
    total_size += data_size;
  }

  // repeated .metrics.MemoryLeakReportProto.AllocationBreakdown alloc_breakdown_history = 4;
  total_size += 1UL * this->_internal_alloc_breakdown_history_size();
  for (const auto& msg : this->alloc_breakdown_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes build_id = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_build_id());
    }

    // optional .metrics.MemoryLeakReportProto.Params params = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_);
    }

    // optional .metrics.MemoryLeakReportProto.MemoryUsageInfo memory_usage_info = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memory_usage_info_);
    }

    // optional uint32 size_bytes = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size_bytes());
    }

    // optional .metrics.MemoryLeakReportProto.ProcessType source_process = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_source_process());
    }

    // optional uint32 num_rising_intervals = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_rising_intervals());
    }

    // optional uint32 num_allocs_increase = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_allocs_increase());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryLeakReportProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MemoryLeakReportProto*>(
      &from));
}

void MemoryLeakReportProto::MergeFrom(const MemoryLeakReportProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.MemoryLeakReportProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  call_stack_.MergeFrom(from.call_stack_);
  alloc_breakdown_history_.MergeFrom(from.alloc_breakdown_history_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_build_id(from._internal_build_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_params()->::metrics::MemoryLeakReportProto_Params::MergeFrom(from._internal_params());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_memory_usage_info()->::metrics::MemoryLeakReportProto_MemoryUsageInfo::MergeFrom(from._internal_memory_usage_info());
    }
    if (cached_has_bits & 0x00000008u) {
      size_bytes_ = from.size_bytes_;
    }
    if (cached_has_bits & 0x00000010u) {
      source_process_ = from.source_process_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_rising_intervals_ = from.num_rising_intervals_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_allocs_increase_ = from.num_allocs_increase_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MemoryLeakReportProto::CopyFrom(const MemoryLeakReportProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.MemoryLeakReportProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLeakReportProto::IsInitialized() const {
  return true;
}

void MemoryLeakReportProto::InternalSwap(MemoryLeakReportProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  call_stack_.InternalSwap(&other->call_stack_);
  alloc_breakdown_history_.InternalSwap(&other->alloc_breakdown_history_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &build_id_, lhs_arena,
      &other->build_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryLeakReportProto, num_allocs_increase_)
      + sizeof(MemoryLeakReportProto::num_allocs_increase_)
      - PROTOBUF_FIELD_OFFSET(MemoryLeakReportProto, params_)>(
          reinterpret_cast<char*>(&params_),
          reinterpret_cast<char*>(&other->params_));
}

std::string MemoryLeakReportProto::GetTypeName() const {
  return "metrics.MemoryLeakReportProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::MemoryLeakReportProto_Params*
Arena::CreateMaybeMessage< ::metrics::MemoryLeakReportProto_Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::MemoryLeakReportProto_Params >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::MemoryLeakReportProto_AllocationBreakdown*
Arena::CreateMaybeMessage< ::metrics::MemoryLeakReportProto_AllocationBreakdown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::MemoryLeakReportProto_AllocationBreakdown >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::MemoryLeakReportProto_MemoryUsageInfo*
Arena::CreateMaybeMessage< ::metrics::MemoryLeakReportProto_MemoryUsageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::MemoryLeakReportProto_MemoryUsageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::MemoryLeakReportProto*
Arena::CreateMaybeMessage< ::metrics::MemoryLeakReportProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metrics::MemoryLeakReportProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
