import*as e from"../helpers/helpers.js";import*as t from"../../lit-html/lit-html.js";import*as i from"../input/input.js";const s=new CSSStyleSheet;s.replaceSync(":host{padding:0;margin:0}input{height:12px;width:12px;min-height:12px;min-width:12px}label{display:inline-flex;align-items:center;overflow:hidden;text-overflow:ellipsis}p{margin:12px 0}\n/*# sourceURL=settingCheckbox.css */\n");class n extends HTMLElement{static litTagName=t.literal`setting-checkbox`;#e=this.attachShadow({mode:"open"});#t;#i=!1;#s;connectedCallback(){this.#e.adoptedStyleSheets=[i.checkboxStyles,s]}set data(e){this.#s&&this.#t&&this.#t.removeChangeListener(this.#s.listener),this.#t=e.setting,this.#i=Boolean(e.disabled),this.#s=this.#t.addChangeListener((()=>{this.#n()})),this.#n()}#n(){if(!this.#t)throw new Error('No "Setting" object provided for rendering');t.render(t.html` <p> <label> <input type="checkbox" ?checked="${this.#t.get()}" ?disabled="${this.#i||this.#t.disabled()}" @change="${this.#h}" aria-label="${this.#t.title()}"> ${this.#t.title()} </label> `,this.#e,{host:this})}#h(e){this.#t?.set(e.target.checked)}}e.CustomElements.defineComponent("setting-checkbox",n);var h=Object.freeze({__proto__:null,SettingCheckbox:n});export{h as SettingCheckbox};
