{"version":3,"file":"StorageKeyManager_test.js","sourceRoot":"","sources":["../../../../../../../../../../../third_party/devtools-frontend/src/test/unittests/front_end/core/sdk/StorageKeyManager_test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC;AAEtB,OAAO,EAAC,YAAY,EAAC,MAAM,qCAAqC,CAAC;AACjE,OAAO,EAAC,0BAA0B,EAAC,MAAM,iCAAiC,CAAC;AAG3E,0BAA0B,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACnD,IAAI,GAAqB,CAAC;IAC1B,IAAI,OAAsD,CAAC;IAE3D,MAAM,CAAC,KAAK,IAAI,EAAE;QAChB,GAAG,GAAG,MAAM,MAAM,CAAC,0CAA0C,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,UAAU,CAAC,GAAG,EAAE;QACd,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE;YACvB,MAAM,MAAM,GAAG,YAAY,EAAE,CAAC;YAC9B,OAAO,GAAG,IAAI,GAAG,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;QACzD,IAAI,UAAU,GAAY,KAAK,CAAC;QAChC,MAAM,IAAI,GAAG,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;QAE5C,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC;QACtC,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,eAAe,EAAE,GAAG,EAAE;YAC1E,UAAU,GAAG,IAAI,CAAC;QACpB,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,iBAAiB,CAAC,IAAI,GAAG,CAAS,IAAI,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAC1B,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,CAAC;QAE9C,UAAU,GAAG,KAAK,CAAC;QACnB,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,iBAAiB,EAAE,GAAG,EAAE;YAC5E,UAAU,GAAG,IAAI,CAAC;QACpB,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,iBAAiB,CAAC,IAAI,GAAG,EAAU,CAAC,CAAC;QAC7C,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAC1B,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAC5D,MAAM,OAAO,GAAG,aAAa,CAAC;QAC9B,IAAI,UAAU,GAAG,KAAK,CAAC;QAEvB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC;QACzC,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,qBAAqB,EAAE,GAAG,EAAE;YAChF,UAAU,GAAG,IAAI,CAAC;QACpB,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACnC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAC1B,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,OAAO,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport {createTarget} from '../../helpers/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../helpers/MockConnection.js';\nimport type * as SDKModule from '../../../../../front_end/core/sdk/sdk.js';\n\ndescribeWithMockConnection('StorageKeyManager', () => {\n  let SDK: typeof SDKModule;\n  let manager: SDKModule.StorageKeyManager.StorageKeyManager;\n\n  before(async () => {\n    SDK = await import('../../../../../front_end/core/sdk/sdk.js');\n  });\n\n  beforeEach(() => {\n    assert.doesNotThrow(() => {\n      const target = createTarget();\n      manager = new SDK.StorageKeyManager.StorageKeyManager(target);\n    });\n  });\n\n  it('updates storage keys and emits events correctly', () => {\n    let eventFired: boolean = false;\n    const keys = ['storagekey1', 'storagekey2'];\n\n    assert.isEmpty(manager.storageKeys());\n    manager.addEventListener(SDK.StorageKeyManager.Events.StorageKeyAdded, () => {\n      eventFired = true;\n    });\n    manager.updateStorageKeys(new Set<string>(keys));\n    assert.isTrue(eventFired);\n    assert.deepEqual(manager.storageKeys(), keys);\n\n    eventFired = false;\n    manager.addEventListener(SDK.StorageKeyManager.Events.StorageKeyRemoved, () => {\n      eventFired = true;\n    });\n    manager.updateStorageKeys(new Set<string>());\n    assert.isTrue(eventFired);\n    assert.isEmpty(manager.storageKeys());\n  });\n\n  it('updates main storage key and emits event correctly', () => {\n    const mainKey = 'storagekey1';\n    let eventFired = false;\n\n    assert.isEmpty(manager.mainStorageKey());\n    manager.addEventListener(SDK.StorageKeyManager.Events.MainStorageKeyChanged, () => {\n      eventFired = true;\n    });\n    manager.setMainStorageKey(mainKey);\n    assert.isTrue(eventFired);\n    assert.strictEqual(manager.mainStorageKey(), mainKey);\n  });\n});\n"]}