{"version":3,"file":"CSSProperty_test.js","sourceRoot":"","sources":["../../../../../../../../../../../third_party/devtools-frontend/src/test/unittests/front_end/core/sdk/CSSProperty_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nconst {assert} = chai;\nimport * as SDK from '../../../../../front_end/core/sdk/sdk.js';\nimport {describeWithEnvironment} from '../../helpers/EnvironmentHelpers.js';\n\ndescribeWithEnvironment('CSSProperty', () => {\n  describe('formatStyle', () => {\n    const formatStyle = (styleText: string, indentation = ' ', endIndentation = '') => SDK.CSSProperty.CSSProperty.formatStyle(styleText, indentation, endIndentation);\n    it('formats a style declaration with a single trailing semicolon correctly', async () => {\n      assert.strictEqual(await formatStyle('color: red;'), '\\n color: red;\\n');\n    });\n    it('formats a style declaration with multiple trailing semicolons correctly', async () => {\n      assert.strictEqual(await formatStyle('color: red;;;'), '\\n color: red;\\n');\n    });\n    it('formats two style declarations correctly', async () => {\n      assert.strictEqual(await formatStyle('color: red;;;color: blue'), '\\n color: red;\\n color: blue\\n');\n    });\n    it('formats multiple style declarations correctly', async () => {\n      assert.strictEqual(\n          await formatStyle('color: var(-);margin: 0;padding:0'), '\\n color: var(-);margin: 0;padding:0\\n');\n    });\n    it('formats style declarations with comments correctly', async () => {\n      assert.strictEqual(\n          await formatStyle('color: red;/* a comment */;color: blue'), '\\n color: red;/* a comment */\\n color: blue\\n');\n    });\n    it('formats an empty decalaration correctly', async () => {\n      assert.strictEqual(await formatStyle(':; color: red; color: blue'), ':;\\n color: red;\\n color: blue\\n');\n    });\n    it('formats an empty decalaration correctly and doesn\\'t format comments', async () => {\n      assert.strictEqual(\n          await formatStyle('color: red;/* a comment;;; */ :; color: blue;'),\n          '\\n color: red;/* a comment;;; */ :;\\n color: blue;\\n');\n    });\n    it('formats a decalaration with line names correctly', async () => {\n      assert.strictEqual(\n          await formatStyle('grid: [first-row-start] \"a a\" 10px [first-row-end] [second-row-start] \"b b\" 20px / 100px'),\n          '\\n grid: [first-row-start] \"a a\" 10px [first-row-end] [second-row-start] \"b b\" 20px / 100px\\n');\n    });\n    it('formats shorthand declaration with a variable correctly', async () => {\n      assert.strictEqual(\n          await formatStyle('border: 1px solid var(--border-color);;', '', ''),\n          'border: 1px solid var(--border-color);');\n    });\n    it('formats shorthand declaration with a function correctly', async () => {\n      assert.strictEqual(await formatStyle('border: 1px solid rgb(0,0,0);;', '', ''), 'border: 1px solid rgb(0,0,0);');\n    });\n    it('formats declaration with unknown property that contains a function correctly', async () => {\n      assert.strictEqual(await formatStyle('unknownProperty: rgba(0,0,0,0);;', '', ''), 'unknownProperty: rgba(0,0,0,0);');\n    });\n  });\n});\n"]}