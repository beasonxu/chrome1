{"version":3,"file":"NetworkManager_test.js","sourceRoot":"","sources":["../../../../../../../../../../../third_party/devtools-frontend/src/test/unittests/front_end/core/sdk/NetworkManager_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as SDK from '../../../../../front_end/core/sdk/sdk.js';\nimport * as Common from '../../../../../front_end/core/common/common.js';\nimport type * as Platform from '../../../../../front_end/core/platform/platform.js';\nimport * as Protocol from '../../../../../front_end/generated/protocol.js';\nimport {createTarget, describeWithEnvironment} from '../../helpers/EnvironmentHelpers.js';\nimport {createWorkspaceProject} from '../../helpers/OverridesHelpers.js';\n\nimport * as Root from '../../../../../front_end/core/root/root.js';\nimport {describeWithMockConnection} from '../../helpers/MockConnection.js';\n\ndescribe('MultitargetNetworkManager', () => {\n  describe('Trust Token done event', () => {\n    it('is not lost when arriving before the corresponding requestWillBeSent event', () => {\n      // 1) Setup a NetworkManager and listen to \"RequestStarted\" events.\n      const networkManager = new Common.ObjectWrapper.ObjectWrapper<SDK.NetworkManager.EventTypes>();\n      const startedRequests: SDK.NetworkRequest.NetworkRequest[] = [];\n      networkManager.addEventListener(SDK.NetworkManager.Events.RequestStarted, event => {\n        startedRequests.push(event.data.request);\n      });\n      const networkDispatcher =\n          new SDK.NetworkManager.NetworkDispatcher(networkManager as SDK.NetworkManager.NetworkManager);\n\n      // 2) Fire a trust token event, followed by a requestWillBeSent event.\n      const mockEvent = {requestId: 'mockId'} as Protocol.Network.TrustTokenOperationDoneEvent;\n      networkDispatcher.trustTokenOperationDone(mockEvent);\n      networkDispatcher.requestWillBeSent(\n          {requestId: 'mockId', request: {url: 'example.com'}} as Protocol.Network.RequestWillBeSentEvent);\n\n      // 3) Check that the resulting NetworkRequest has the Trust Token Event data associated with it.\n      assert.strictEqual(startedRequests.length, 1);\n      assert.strictEqual(startedRequests[0].trustTokenOperationDoneEvent(), mockEvent);\n    });\n  });\n});\n\ndescribe('NetworkDispatcher', () => {\n  const requestWillBeSentEvent = {requestId: 'mockId', request: {url: 'example.com'}} as\n      Protocol.Network.RequestWillBeSentEvent;\n  const loadingFinishedEvent =\n      {requestId: 'mockId', timestamp: 42, encodedDataLength: 42, shouldReportCorbBlocking: false} as\n      Protocol.Network.LoadingFinishedEvent;\n  describeWithEnvironment('request', () => {\n    let networkDispatcher: SDK.NetworkManager.NetworkDispatcher;\n\n    beforeEach(() => {\n      const networkManager = new Common.ObjectWrapper.ObjectWrapper();\n      networkDispatcher = new SDK.NetworkManager.NetworkDispatcher(networkManager as SDK.NetworkManager.NetworkManager);\n    });\n\n    it('is preserved after loadingFinished', () => {\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n\n      assert.exists(networkDispatcher.requestForId('mockId'));\n    });\n\n    it('clears finished requests on clearRequests()', () => {\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n\n      const unfinishedRequestWillBeSentEvent = {requestId: 'unfinishedRequestId', request: {url: 'example.com'}} as\n          Protocol.Network.RequestWillBeSentEvent;\n      networkDispatcher.requestWillBeSent(unfinishedRequestWillBeSentEvent);\n\n      networkDispatcher.clearRequests();\n      assert.notExists(networkDispatcher.requestForId('mockId'));\n      assert.exists(networkDispatcher.requestForId('unfinishedRequestId'));\n    });\n\n    it('preserves extra info for unfinished clearRequests()', () => {\n      const requestWillBeSentExtraInfoEvent = {\n        requestId: 'mockId',\n        associatedCookies: [],\n        headers: {'Header-From-Extra-Info': 'foo'},\n        connectTiming: {requestTime: 0},\n      } as unknown as Protocol.Network.RequestWillBeSentExtraInfoEvent;\n      networkDispatcher.requestWillBeSentExtraInfo(requestWillBeSentExtraInfoEvent);\n\n      networkDispatcher.clearRequests();\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      assert.exists(networkDispatcher.requestForId('mockId'));\n      assert.deepEqual(\n          networkDispatcher.requestForId('mockId')?.requestHeaders(), [{name: 'Header-From-Extra-Info', value: 'foo'}]);\n    });\n\n    it('response headers are overwritten by request interception', () => {\n      const responseReceivedExtraInfoEvent = {\n        requestId: 'mockId' as Protocol.Network.RequestId,\n        blockedCookies: [],\n        headers: {\n          'test-header': 'first',\n        } as Protocol.Network.Headers,\n        resourceIPAddressSpace: Protocol.Network.IPAddressSpace.Public,\n        statusCode: 200,\n      } as Protocol.Network.ResponseReceivedExtraInfoEvent;\n      const mockResponseReceivedEventWithHeaders =\n          (headers: Protocol.Network.Headers): Protocol.Network.ResponseReceivedEvent => {\n            return {\n              requestId: 'mockId',\n              loaderId: 'mockLoaderId',\n              frameId: 'mockFrameId',\n              timestamp: 581734.083213,\n              type: Protocol.Network.ResourceType.Document,\n              response: {\n                url: 'example.com',\n                status: 200,\n                statusText: '',\n                headers,\n                mimeType: 'text/html',\n                connectionReused: true,\n                connectionId: 12345,\n                encodedDataLength: 100,\n                securityState: 'secure',\n              } as Protocol.Network.Response,\n            } as Protocol.Network.ResponseReceivedEvent;\n          };\n\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.responseReceivedExtraInfo(responseReceivedExtraInfoEvent);\n\n      // ResponseReceived does not overwrite response headers.\n      networkDispatcher.responseReceived(mockResponseReceivedEventWithHeaders({'test-header': 'second'}));\n      assert.deepEqual(\n          networkDispatcher.requestForId('mockId')?.responseHeaders, [{name: 'test-header', value: 'first'}]);\n\n      // ResponseReceived does overwrite response headers if request is marked as intercepted.\n      SDK.NetworkManager.MultitargetNetworkManager.instance().dispatchEventToListeners(\n          SDK.NetworkManager.MultitargetNetworkManager.Events.RequestIntercepted,\n          'example.com' as Platform.DevToolsPath.UrlString);\n      networkDispatcher.responseReceived(mockResponseReceivedEventWithHeaders({'test-header': 'third'}));\n      assert.deepEqual(\n          networkDispatcher.requestForId('mockId')?.responseHeaders, [{name: 'test-header', value: 'third'}]);\n    });\n  });\n\n  describeWithEnvironment('WebBundle requests', () => {\n    let networkDispatcher: SDK.NetworkManager.NetworkDispatcher;\n    const webBundleMetadataReceivedEvent = {requestId: 'mockId', urls: ['foo']} as\n        Protocol.Network.SubresourceWebBundleMetadataReceivedEvent;\n    const webBundleInnerResponseParsedEvent = {bundleRequestId: 'bundleRequestId', innerRequestId: 'mockId'} as\n        Protocol.Network.SubresourceWebBundleInnerResponseParsedEvent;\n    const resourceUrlsFoo = ['foo'] as Platform.DevToolsPath.UrlString[];\n\n    beforeEach(() => {\n      const networkManager = new Common.ObjectWrapper.ObjectWrapper();\n      networkDispatcher = new SDK.NetworkManager.NetworkDispatcher(networkManager as SDK.NetworkManager.NetworkManager);\n    });\n\n    it('have webbundle info when webbundle event happen between browser events', () => {\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.subresourceWebBundleMetadataReceived(webBundleMetadataReceivedEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n\n      assert.deepEqual(networkDispatcher.requestForId('mockId')?.webBundleInfo()?.resourceUrls, resourceUrlsFoo);\n    });\n\n    it('have webbundle info when webbundle event happen before browser events', () => {\n      networkDispatcher.subresourceWebBundleMetadataReceived(webBundleMetadataReceivedEvent);\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n\n      assert.deepEqual(networkDispatcher.requestForId('mockId')?.webBundleInfo()?.resourceUrls, resourceUrlsFoo);\n    });\n\n    it('have webbundle info when webbundle event happen after browser events', () => {\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n      networkDispatcher.subresourceWebBundleMetadataReceived(webBundleMetadataReceivedEvent);\n\n      assert.deepEqual(networkDispatcher.requestForId('mockId')?.webBundleInfo()?.resourceUrls, resourceUrlsFoo);\n    });\n\n    it('have webbundle info only for the final request but nor redirect', () => {\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.requestWillBeSent(\n          {requestId: 'mockId', request: {url: 'redirect.example.com'}, redirectResponse: {url: 'example.com'}} as\n          Protocol.Network.RequestWillBeSentEvent);\n      networkDispatcher.subresourceWebBundleMetadataReceived(webBundleMetadataReceivedEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n\n      assert.deepEqual(networkDispatcher.requestForId('mockId')?.webBundleInfo()?.resourceUrls, resourceUrlsFoo);\n      assert.exists(networkDispatcher.requestForId('mockId')?.redirectSource());\n      assert.notExists(networkDispatcher.requestForId('mockId')?.redirectSource()?.webBundleInfo());\n    });\n\n    it('have webbundle info on error', () => {\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n      networkDispatcher.subresourceWebBundleMetadataError(\n          {requestId: 'mockId', errorMessage: 'Kaboom!'} as Protocol.Network.SubresourceWebBundleMetadataErrorEvent);\n\n      assert.deepEqual(networkDispatcher.requestForId('mockId')?.webBundleInfo()?.errorMessage, 'Kaboom!');\n    });\n\n    it('have webbundle inner request info when webbundle event happen between browser events', () => {\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.subresourceWebBundleInnerResponseParsed(webBundleInnerResponseParsedEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n\n      assert.deepEqual(\n          networkDispatcher.requestForId('mockId')?.webBundleInnerRequestInfo()?.bundleRequestId, 'bundleRequestId');\n    });\n\n    it('have webbundle inner request info when webbundle event happen before browser events', () => {\n      networkDispatcher.subresourceWebBundleInnerResponseParsed(webBundleInnerResponseParsedEvent);\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n\n      assert.deepEqual(\n          networkDispatcher.requestForId('mockId')?.webBundleInnerRequestInfo()?.bundleRequestId, 'bundleRequestId');\n    });\n\n    it('have webbundle inner request info when webbundle event happen after browser events', () => {\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n      networkDispatcher.subresourceWebBundleInnerResponseParsed(webBundleInnerResponseParsedEvent);\n\n      assert.deepEqual(\n          networkDispatcher.requestForId('mockId')?.webBundleInnerRequestInfo()?.bundleRequestId, 'bundleRequestId');\n    });\n\n    it('have webbundle inner request info on error', () => {\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n      networkDispatcher.subresourceWebBundleInnerResponseError(\n          {innerRequestId: 'mockId', errorMessage: 'Kaboom!'} as\n          Protocol.Network.SubresourceWebBundleInnerResponseErrorEvent);\n\n      assert.deepEqual(networkDispatcher.requestForId('mockId')?.webBundleInnerRequestInfo()?.errorMessage, 'Kaboom!');\n    });\n  });\n});\n\ninterface OverriddenResponse {\n  requestId: Protocol.Fetch.RequestId;\n  responseCode: number;\n  body: string;\n  responseHeaders: Protocol.Fetch.HeaderEntry[];\n}\n\nasync function checkRequestOverride(\n    target: SDK.Target.Target, request: Protocol.Network.Request, requestId: Protocol.Fetch.RequestId,\n    responseStatusCode: number, responseHeaders: Protocol.Fetch.HeaderEntry[], responseBody: string,\n    expectedOverriddenResponse: OverriddenResponse) {\n  const multitargetNetworkManager = SDK.NetworkManager.MultitargetNetworkManager.instance();\n  const fetchAgent = target.fetchAgent();\n  const spy = sinon.spy(fetchAgent, 'invoke_fulfillRequest');\n\n  const fulfilledRequest = new Promise(resolve => {\n    multitargetNetworkManager.addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.RequestFulfilled, resolve);\n  });\n\n  const interceptedRequest = new SDK.NetworkManager.InterceptedRequest(\n      fetchAgent, request, Protocol.Network.ResourceType.Document, requestId, responseStatusCode, responseHeaders);\n  interceptedRequest.responseBody = async () => {\n    return {error: null, content: responseBody, encoded: true};\n  };\n\n  assert.isTrue(spy.notCalled);\n  await multitargetNetworkManager.requestIntercepted(interceptedRequest);\n  await fulfilledRequest;\n  assert.isTrue(spy.calledOnceWithExactly(expectedOverriddenResponse));\n}\n\ndescribeWithMockConnection('InterceptedRequest', () => {\n  let target: SDK.Target.Target;\n\n  beforeEach(async () => {\n    SDK.NetworkManager.MultitargetNetworkManager.dispose();\n    Root.Runtime.experiments.register(Root.Runtime.ExperimentName.HEADER_OVERRIDES, '');\n    Root.Runtime.experiments.enableForTest(Root.Runtime.ExperimentName.HEADER_OVERRIDES);\n    target = createTarget();\n    const networkPersistenceManager =\n        await createWorkspaceProject('file:///path/to/overrides' as Platform.DevToolsPath.UrlString, [\n          {\n            name: '.headers',\n            path: 'www.example.com/',\n            content: `[\n            {\n              \"applyTo\": \"index.html\",\n              \"headers\": {\n                \"index-only\": \"only added to index.html\"\n              }\n            },\n            {\n              \"applyTo\": \"*.css\",\n              \"headers\": {\n                \"css-only\": \"only added to css files\"\n              }\n            },\n            {\n              \"applyTo\": \"path/to/*.js\",\n              \"headers\": {\n                \"another-header\": \"only added to specific path\"\n              }\n            }\n          ]`,\n          },\n          {\n            name: '.headers',\n            path: '',\n            content: `[\n            {\n              \"applyTo\": \"*\",\n              \"headers\": {\n                \"age\": \"overridden\"\n              }\n            }\n          ]`,\n          },\n          {name: 'helloWorld.html', path: 'www.example.com/', content: 'Hello World!'},\n        ]);\n    sinon.stub(target.fetchAgent(), 'invoke_enable');\n    await networkPersistenceManager.updateInterceptionPatternsForTests();\n  });\n\n  it('can override headers-only for a status 200 request', async () => {\n    const responseCode = 200;\n    const requestId = 'request_id_1' as Protocol.Fetch.RequestId;\n    const responseBody = 'interceptedRequest content';\n    await checkRequestOverride(\n        target, {\n          method: 'GET',\n          url: 'https://www.example.com/styles.css',\n        } as Protocol.Network.Request,\n        requestId, responseCode, [{name: 'content-type', value: 'text/html; charset=utf-8'}], responseBody, {\n          requestId,\n          responseCode,\n          body: responseBody,\n          responseHeaders: [\n            {name: 'content-type', value: 'text/html; charset=utf-8'},\n            {name: 'age', value: 'overridden'},\n            {name: 'css-only', value: 'only added to css files'},\n          ],\n        });\n  });\n\n  it('can override headers and content for a status 200 request', async () => {\n    const responseCode = 200;\n    const requestId = 'request_id_2' as Protocol.Fetch.RequestId;\n    const responseBody = 'interceptedRequest content';\n    await checkRequestOverride(\n        target, {\n          method: 'GET',\n          url: 'https://www.example.com/helloWorld.html',\n        } as Protocol.Network.Request,\n        requestId, responseCode, [{name: 'content-type', value: 'text/html; charset=utf-8'}], responseBody, {\n          requestId,\n          responseCode,\n          body: btoa('Hello World!'),\n          responseHeaders: [\n            {name: 'content-type', value: 'text/html; charset=utf-8'},\n            {name: 'age', value: 'overridden'},\n          ],\n        });\n  });\n\n  it('can override headers-only for a status 300 (redirect) request', async () => {\n    const responseCode = 300;\n    const requestId = 'request_id_3' as Protocol.Fetch.RequestId;\n    const responseBody = 'interceptedRequest content';\n    await checkRequestOverride(\n        target, {\n          method: 'GET',\n          url: 'https://www.example.com/path/to/foo.js',\n        } as Protocol.Network.Request,\n        requestId, responseCode, [{name: 'content-type', value: 'text/html; charset=utf-8'}], responseBody, {\n          requestId,\n          responseCode,\n          body: '',\n          responseHeaders: [\n            {name: 'content-type', value: 'text/html; charset=utf-8'},\n            {name: 'age', value: 'overridden'},\n            {name: 'another-header', value: 'only added to specific path'},\n          ],\n        });\n  });\n\n  it('can override headers and content for a status 300 (redirect) request', async () => {\n    const responseCode = 300;\n    const requestId = 'request_id_4' as Protocol.Fetch.RequestId;\n    const responseBody = 'interceptedRequest content';\n    await checkRequestOverride(\n        target, {\n          method: 'GET',\n          url: 'https://www.example.com/helloWorld.html',\n        } as Protocol.Network.Request,\n        requestId, responseCode, [{name: 'content-type', value: 'text/html; charset=utf-8'}], responseBody, {\n          requestId,\n          responseCode: 200,\n          body: btoa('Hello World!'),\n          responseHeaders: [\n            {name: 'content-type', value: 'text/html; charset=utf-8'},\n            {name: 'age', value: 'overridden'},\n          ],\n        });\n  });\n\n  it('can override headers-only for a status 404 (not found) request', async () => {\n    const responseCode = 404;\n    const requestId = 'request_id_5' as Protocol.Fetch.RequestId;\n    const responseBody = 'interceptedRequest content';\n    await checkRequestOverride(\n        target, {\n          method: 'GET',\n          url: 'https://www.example.com/doesNotExist.html',\n        } as Protocol.Network.Request,\n        requestId, responseCode, [{name: 'content-type', value: 'text/html; charset=utf-8'}], responseBody, {\n          requestId,\n          responseCode,\n          body: 'interceptedRequest content',\n          responseHeaders: [\n            {name: 'content-type', value: 'text/html; charset=utf-8'},\n            {name: 'age', value: 'overridden'},\n          ],\n        });\n  });\n\n  it('can override headers and content for a status 404 (not found) request', async () => {\n    const responseCode = 404;\n    const requestId = 'request_id_6' as Protocol.Fetch.RequestId;\n    const responseBody = 'interceptedRequest content';\n    await checkRequestOverride(\n        target, {\n          method: 'GET',\n          url: 'https://www.example.com/helloWorld.html',\n        } as Protocol.Network.Request,\n        requestId, responseCode, [{name: 'content-type', value: 'text/html; charset=utf-8'}], responseBody, {\n          requestId,\n          responseCode: 200,\n          body: btoa('Hello World!'),\n          responseHeaders: [\n            {name: 'content-type', value: 'text/html; charset=utf-8'},\n            {name: 'age', value: 'overridden'},\n          ],\n        });\n  });\n});\n"]}