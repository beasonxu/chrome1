{"version":3,"file":"LinearMemoryInspectorHighlightChipList_test.js","sourceRoot":"","sources":["../../../../../../../../../../../../third_party/devtools-frontend/src/test/unittests/front_end/ui/components/linear_memory_inspector/LinearMemoryInspectorHighlightChipList_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as LinearMemoryInspector from '../../../../../../front_end/ui/components/linear_memory_inspector/linear_memory_inspector.js';\nimport {\n  assertElement,\n  assertShadowRoot,\n  getElementWithinComponent,\n  getEventPromise,\n  renderElementIntoDOM,\n} from '../../../helpers/DOMHelpers.js';\nimport {describeWithLocale} from '../../../helpers/EnvironmentHelpers.js';\n\nconst {assert} = chai;\n\nexport const HIGHLIGHT_CHIP = '.highlight-chip';\nexport const HIGHLIGHT_PILL_JUMP_BUTTON_SELECTOR = '.jump-to-highlight-button';\nexport const HIGHLIGHT_PILL_VARIABLE_NAME = HIGHLIGHT_PILL_JUMP_BUTTON_SELECTOR + ' .value';\nexport const HIGHLIGHT_ROW_REMOVE_BUTTON_SELECTOR = '.delete-highlight-button';\n\ndescribeWithLocale('LinearMemoryInspectorHighlightChipList', () => {\n  let component: LinearMemoryInspector.LinearMemoryHighlightChipList.LinearMemoryHighlightChipList;\n\n  beforeEach(renderHighlightRow);\n\n  function renderHighlightRow() {\n    component = new LinearMemoryInspector.LinearMemoryHighlightChipList.LinearMemoryHighlightChipList();\n    renderElementIntoDOM(component);\n\n    component.data = {\n      highlightInfos: [\n        {\n          startAddress: 10,\n          size: 8,\n          type: 'double',\n          name: 'myNumber',\n        },\n      ],\n    };\n  }\n\n  it('renders a highlight chip button', () => {\n    const shadowRoot = component.shadowRoot;\n    assertShadowRoot(shadowRoot);\n    const button = shadowRoot.querySelector(HIGHLIGHT_PILL_JUMP_BUTTON_SELECTOR);\n    assertElement(button, HTMLButtonElement);\n    const expressionName = shadowRoot.querySelector(HIGHLIGHT_PILL_VARIABLE_NAME);\n    assertElement(expressionName, HTMLSpanElement);\n    assert.strictEqual(expressionName.innerText, 'myNumber');\n  });\n\n  it('renders multiple chips', () => {\n    const shadowRoot = component.shadowRoot;\n    const highlightInfos = [\n      {\n        startAddress: 10,\n        size: 8,\n        type: 'double',\n        name: 'myNumber',\n      },\n      {\n        startAddress: 20,\n        size: 4,\n        type: 'int',\n        name: 'myInt',\n      },\n    ];\n    component.data = {\n      highlightInfos: highlightInfos,\n    };\n    assertShadowRoot(shadowRoot);\n    const chips = shadowRoot.querySelectorAll(HIGHLIGHT_CHIP);\n    assert.strictEqual(chips.length, highlightInfos.length);\n  });\n\n  it('sends event when clicking on jump to highlighted memory', async () => {\n    const eventPromise =\n        getEventPromise<LinearMemoryInspector.LinearMemoryHighlightChipList.JumpToHighlightedMemoryEvent>(\n            component, LinearMemoryInspector.LinearMemoryHighlightChipList.JumpToHighlightedMemoryEvent.eventName);\n\n    const shadowRoot = component.shadowRoot;\n    assertShadowRoot(shadowRoot);\n    const button = shadowRoot.querySelector(HIGHLIGHT_PILL_JUMP_BUTTON_SELECTOR);\n    assertElement(button, HTMLButtonElement);\n    button.click();\n\n    assert.isNotNull(await eventPromise);\n  });\n\n  it('sends event when clicking on delete highlight chip', async () => {\n    const eventPromise =\n        getEventPromise<LinearMemoryInspector.LinearMemoryHighlightChipList.DeleteMemoryHighlightEvent>(\n            component, LinearMemoryInspector.LinearMemoryHighlightChipList.DeleteMemoryHighlightEvent.eventName);\n\n    const shadowRoot = component.shadowRoot;\n    assertShadowRoot(shadowRoot);\n    const button = shadowRoot.querySelector(HIGHLIGHT_ROW_REMOVE_BUTTON_SELECTOR);\n    assertElement(button, HTMLButtonElement);\n    button.click();\n\n    assert.isNotNull(await eventPromise);\n  });\n\n  it('shows tooltip on jump to highlighted memory button', () => {\n    const button = getElementWithinComponent(component, HIGHLIGHT_PILL_JUMP_BUTTON_SELECTOR, HTMLButtonElement);\n    assert.strictEqual(button.title, 'Jump to highlighted memory');\n  });\n\n  it('shows tooltip on delete highlight button', () => {\n    const button = getElementWithinComponent(component, HIGHLIGHT_ROW_REMOVE_BUTTON_SELECTOR, HTMLButtonElement);\n    assert.strictEqual(button.title, 'Delete memory highlight');\n  });\n});\n"]}