{"version":3,"file":"NetworkLog_test.js","sourceRoot":"","sources":["../../../../../../../../../../../third_party/devtools-frontend/src/test/unittests/front_end/models/logs/NetworkLog_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../../../front_end/core/platform/platform.js';\nimport * as SDK from '../../../../../front_end/core/sdk/sdk.js';\nimport * as Protocol from '../../../../../front_end/generated/protocol.js';\nimport * as Logs from '../../../../../front_end/models/logs/logs.js';\n\nconst {assert} = chai;\n\nfunction url(input: string): Platform.DevToolsPath.UrlString {\n  return input as unknown as Platform.DevToolsPath.UrlString;\n}\n\ndescribe('NetworkLog', () => {\n  describe('initiatorInfoForRequest', () => {\n    const {initiatorInfoForRequest} = Logs.NetworkLog.NetworkLog;\n\n    it('uses the passed in initiator info if it exists', () => {\n      const request = {\n        initiator() {\n          return null;\n        },\n        redirectSource() {\n          return null;\n        },\n      } as unknown as SDK.NetworkRequest.NetworkRequest;\n      const existingInfo: Logs.NetworkLog.InitiatorData = {\n        info: null,\n        chain: null,\n        request: undefined,\n      };\n      const info = initiatorInfoForRequest(request, existingInfo);\n      assert.deepEqual(info, {\n        type: SDK.NetworkRequest.InitiatorType.Other,\n        url: Platform.DevToolsPath.EmptyUrlString,\n        lineNumber: -Infinity,\n        columnNumber: -Infinity,\n        scriptId: null,\n        stack: null,\n        initiatorRequest: null,\n      });\n      assert.deepEqual(info, existingInfo.info);\n    });\n\n    it('returns \"other\" if there is no initiator or redirect', () => {\n      const request = {\n        initiator() {\n          return null;\n        },\n        redirectSource() {\n          return null;\n        },\n      } as unknown as SDK.NetworkRequest.NetworkRequest;\n      const info = initiatorInfoForRequest(request);\n      assert.deepEqual(info, {\n        type: SDK.NetworkRequest.InitiatorType.Other,\n        url: Platform.DevToolsPath.EmptyUrlString,\n        lineNumber: -Infinity,\n        columnNumber: -Infinity,\n        scriptId: null,\n        stack: null,\n        initiatorRequest: null,\n      });\n    });\n\n    it('returns the redirect info if the request has a redirect', () => {\n      const request = {\n        initiator() {\n          return null;\n        },\n        redirectSource() {\n          return {\n            url() {\n              return url('http://localhost:3000/example.js');\n            },\n          } as unknown as SDK.NetworkRequest.NetworkRequest;\n        },\n      } as unknown as SDK.NetworkRequest.NetworkRequest;\n      const info = initiatorInfoForRequest(request);\n      assert.deepEqual(info, {\n        type: SDK.NetworkRequest.InitiatorType.Redirect,\n        url: url('http://localhost:3000/example.js'),\n        lineNumber: -Infinity,\n        columnNumber: -Infinity,\n        scriptId: null,\n        stack: null,\n        initiatorRequest: null,\n      });\n    });\n\n    it('returns the initiator info if the initiator is the parser', () => {\n      const request = {\n        initiator() {\n          return {\n            type: Protocol.Network.InitiatorType.Parser,\n            url: url('http://localhost:3000/example.js'),\n            lineNumber: 5,\n            columnNumber: 6,\n          } as unknown as Protocol.Network.Initiator;\n        },\n        redirectSource() {\n          return null;\n        },\n      } as unknown as SDK.NetworkRequest.NetworkRequest;\n      const info = initiatorInfoForRequest(request);\n      assert.deepEqual(info, {\n        type: SDK.NetworkRequest.InitiatorType.Parser,\n        url: url('http://localhost:3000/example.js'),\n        lineNumber: 5,\n        columnNumber: 6,\n        scriptId: null,\n        stack: null,\n        initiatorRequest: null,\n      });\n    });\n\n    it('returns the initiator info if the initiator is a script with a stack', () => {\n      const request = {\n        initiator() {\n          return {\n            type: Protocol.Network.InitiatorType.Script,\n            url: url('http://localhost:3000/example.js'),\n            stack: {\n              callFrames: [{\n                functionName: 'foo',\n                url: url('http://localhost:3000/example.js'),\n                scriptId: 'script-id-1' as Protocol.Runtime.ScriptId,\n                lineNumber: 5,\n                columnNumber: 6,\n              }],\n            },\n          } as unknown as Protocol.Network.Initiator;\n        },\n        redirectSource() {\n          return null;\n        },\n      } as unknown as SDK.NetworkRequest.NetworkRequest;\n      const info = initiatorInfoForRequest(request);\n      assert.deepEqual(info, {\n        type: SDK.NetworkRequest.InitiatorType.Script,\n        url: url('http://localhost:3000/example.js'),\n        lineNumber: 5,\n        columnNumber: 6,\n        scriptId: 'script-id-1' as Protocol.Runtime.ScriptId,\n        stack: {\n          callFrames: [{\n            functionName: 'foo',\n            url: url('http://localhost:3000/example.js'),\n            scriptId: 'script-id-1' as Protocol.Runtime.ScriptId,\n            lineNumber: 5,\n            columnNumber: 6,\n          }],\n        },\n        initiatorRequest: null,\n      });\n    });\n\n    it('deals with a nested stack and finds the top frame to use for the script-id', () => {\n      const request = {\n        initiator() {\n          return {\n            type: Protocol.Network.InitiatorType.Script,\n            url: url('http://localhost:3000/example.js'),\n            stack: {\n              parent: {\n                callFrames: [{\n                  functionName: 'foo',\n                  url: url('http://localhost:3000/example.js'),\n                  scriptId: 'script-id-1' as Protocol.Runtime.ScriptId,\n                  lineNumber: 5,\n                  columnNumber: 6,\n                }],\n              },\n              callFrames: [],\n            },\n          } as unknown as Protocol.Network.Initiator;\n        },\n        redirectSource() {\n          return null;\n        },\n      } as unknown as SDK.NetworkRequest.NetworkRequest;\n      const info = initiatorInfoForRequest(request);\n      assert.deepEqual(info, {\n        type: SDK.NetworkRequest.InitiatorType.Script,\n        url: url('http://localhost:3000/example.js'),\n        lineNumber: 5,\n        columnNumber: 6,\n        scriptId: 'script-id-1' as Protocol.Runtime.ScriptId,\n        stack: null,\n        initiatorRequest: null,\n      });\n    });\n\n    it('returns the initiator info if the initiator is a script without a stack and defaults the line number to 0',\n       () => {\n         const request = {\n           initiator() {\n             return {\n               type: Protocol.Network.InitiatorType.Script,\n               url: url('http://localhost:3000/example.js'),\n             } as unknown as Protocol.Network.Initiator;\n           },\n           redirectSource() {\n             return null;\n           },\n         } as unknown as SDK.NetworkRequest.NetworkRequest;\n         const info = initiatorInfoForRequest(request);\n         assert.deepEqual(info, {\n           type: SDK.NetworkRequest.InitiatorType.Script,\n           url: url('http://localhost:3000/example.js'),\n           lineNumber: 0,\n           columnNumber: -Infinity,\n           scriptId: null,\n           stack: null,\n           initiatorRequest: null,\n         });\n       });\n\n    it('returns the info for a Preload request', () => {\n      const request = {\n        initiator() {\n          return {\n            type: Protocol.Network.InitiatorType.Preload,\n          } as unknown as Protocol.Network.Initiator;\n        },\n        redirectSource() {\n          return null;\n        },\n      } as unknown as SDK.NetworkRequest.NetworkRequest;\n      const info = initiatorInfoForRequest(request);\n      assert.deepEqual(info, {\n        type: SDK.NetworkRequest.InitiatorType.Preload,\n        url: Platform.DevToolsPath.EmptyUrlString,\n        lineNumber: -Infinity,\n        columnNumber: -Infinity,\n        scriptId: null,\n        stack: null,\n        initiatorRequest: null,\n      });\n    });\n\n    it('returns the info for a Preflight request', () => {\n      const PREFLIGHT_INITIATOR_REQUEST = {} as unknown as SDK.NetworkRequest.NetworkRequest;\n      const request = {\n        initiator() {\n          return {\n            type: Protocol.Network.InitiatorType.Preflight,\n          } as unknown as Protocol.Network.Initiator;\n        },\n        preflightInitiatorRequest() {\n          return PREFLIGHT_INITIATOR_REQUEST;\n        },\n        redirectSource() {\n          return null;\n        },\n      } as unknown as SDK.NetworkRequest.NetworkRequest;\n      const info = initiatorInfoForRequest(request);\n      assert.deepEqual(info, {\n        type: SDK.NetworkRequest.InitiatorType.Preflight,\n        url: Platform.DevToolsPath.EmptyUrlString,\n        lineNumber: -Infinity,\n        columnNumber: -Infinity,\n        scriptId: null,\n        stack: null,\n        initiatorRequest: PREFLIGHT_INITIATOR_REQUEST,\n      });\n    });\n\n    it('returns the info for a signed exchange request', () => {\n      const request = {\n        initiator() {\n          return {\n            type: Protocol.Network.InitiatorType.SignedExchange,\n            url: url('http://localhost:3000/example.js'),\n          } as unknown as Protocol.Network.Initiator;\n        },\n        redirectSource() {\n          return null;\n        },\n      } as unknown as SDK.NetworkRequest.NetworkRequest;\n      const info = initiatorInfoForRequest(request);\n      assert.deepEqual(info, {\n        type: SDK.NetworkRequest.InitiatorType.SignedExchange,\n        url: url('http://localhost:3000/example.js'),\n        lineNumber: -Infinity,\n        columnNumber: -Infinity,\n        scriptId: null,\n        stack: null,\n        initiatorRequest: null,\n      });\n    });\n  });\n});\n"]}