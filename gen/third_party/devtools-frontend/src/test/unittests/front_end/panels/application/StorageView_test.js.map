{"version":3,"file":"StorageView_test.js","sourceRoot":"","sources":["../../../../../../../../../../../third_party/devtools-frontend/src/test/unittests/front_end/panels/application/StorageView_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as SDK from '../../../../../front_end/core/sdk/sdk.js';\nimport {assertNotNullOrUndefined} from '../../../../../front_end/core/platform/platform.js';\nimport * as Protocol from '../../../../../front_end/generated/protocol.js';\nimport * as Resources from '../../../../../front_end/panels/application/application.js';\nimport {createTarget} from '../../helpers/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../helpers/MockConnection.js';\n\ndescribeWithMockConnection('StorageView', () => {\n  const testKey = 'test-storage-key';\n  let target: SDK.Target.Target;\n  let domStorageModel: Resources.DOMStorageModel.DOMStorageModel|null;\n  let manager: SDK.StorageKeyManager.StorageKeyManager|null;\n\n  beforeEach(() => {\n    target = createTarget();\n    domStorageModel = target.model(Resources.DOMStorageModel.DOMStorageModel);\n    domStorageModel?.enable();\n    manager = target.model(SDK.StorageKeyManager.StorageKeyManager);\n  });\n\n  it('emits correct events on clearStorageByStorageKey', () => {\n    const testId = {storageKey: testKey, isLocalStorage: true} as Protocol.DOMStorage.StorageId;\n\n    assertNotNullOrUndefined(domStorageModel);\n    assert.isEmpty(domStorageModel.storages());\n    assertNotNullOrUndefined(manager);\n    manager.dispatchEventToListeners(SDK.StorageKeyManager.Events.StorageKeyAdded, testKey);\n    assertNotNullOrUndefined(domStorageModel.storageForId(testId));\n\n    const dispatcherSpy = sinon.spy(domStorageModel, 'dispatchEventToListeners');\n    const spyClearDataForStorageKey = sinon.stub(target.storageAgent(), 'invoke_clearDataForStorageKey');\n    Resources.StorageView.StorageView.clearByStorageKey(target, testKey, [Protocol.Storage.StorageType.All]);\n    // must be called 4 times, twice with DOMStorageRemoved for local and non-local storage and twice with DOMStorageAdded\n    assert.isTrue(spyClearDataForStorageKey.calledOnce);\n    assert.strictEqual(dispatcherSpy.callCount, 4);\n    sinon.assert.calledWith(\n        dispatcherSpy, Resources.DOMStorageModel.Events.DOMStorageRemoved as unknown as sinon.SinonMatcher);\n    sinon.assert.calledWith(\n        dispatcherSpy, Resources.DOMStorageModel.Events.DOMStorageAdded as unknown as sinon.SinonMatcher);\n  });\n\n  it('changes subtitle on MainStorageKeyChanged event', () => {\n    assertNotNullOrUndefined(domStorageModel);\n    assertNotNullOrUndefined(manager);\n    const view = new Resources.StorageView.StorageView();\n\n    manager.dispatchEventToListeners(SDK.StorageKeyManager.Events.MainStorageKeyChanged, {mainStorageKey: testKey});\n    const subtitle =\n        view.element.shadowRoot?.querySelector('div.flex-auto')?.shadowRoot?.querySelector('div.report-subtitle');\n    assert.strictEqual(subtitle?.textContent, testKey);\n  });\n});\n"]}