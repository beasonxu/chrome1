{"version":3,"file":"WebauthnPane_test.js","sourceRoot":"","sources":["../../../../../../../../../../../third_party/devtools-frontend/src/test/unittests/front_end/panels/webauthn/WebauthnPane_test.ts"],"names":[],"mappings":"AAAA,gEAAgE;AAChE,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,YAAY,EAAC,MAAM,qCAAqC,CAAC;AACjE,OAAO,EACL,0BAA0B,EAC1B,gCAAgC,GACjC,MAAM,iCAAiC,CAAC;AAGzC,OAAO,KAAK,GAAG,MAAM,0CAA0C,CAAC;AAEhE,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC;AAEtB,0BAA0B,CAAC,eAAe,EAAE,GAAG,EAAE;IAC/C,IAAI,QAA+B,CAAC;IAEpC,MAAM,CAAC,KAAK,IAAI,EAAE;QAChB,QAAQ,GAAG,MAAM,MAAM,CAAC,sDAAsD,CAAC,CAAC;IAClF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8DAA8D,EAAE,GAAG,EAAE;QACtE,MAAM,KAAK,GAAG,QAAQ,CAAC,YAAY,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;QAChE,MAAM,SAAS,GAAG,KAAK,CAAC,iBAAiB,CAAC;QAC1C,MAAM,YAAY,GAAG,KAAK,CAAC,mBAAmB,CAAC;QAE/C,IAAI,CAAC,SAAS,IAAI,CAAC,YAAY,EAAE;YAC/B,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;YAC3C,OAAO;SACR;QAED,yEAAyE;QACzE,aAAa;QACb,YAAY,CAAC,OAAO,GAAG,KAAK,CAAC;QAC7B,YAAY,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAClC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAElC,mEAAmE;QACnE,WAAW;QACX,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC;QAC5B,YAAY,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACnC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAElC,6BAA6B;QAC7B,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC;QACzB,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAEjC,kEAAkE;QAClE,aAAa;QACb,YAAY,CAAC,OAAO,GAAG,KAAK,CAAC;QAC7B,YAAY,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAClC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,IAAI,CAAC,EAAE;QACxD,MAAM,MAAM,GAAG,YAAY,EAAE,CAAC;QAC9B,MAAM,KAAK,GAAG,QAAQ,CAAC,YAAY,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;QAChE,KAAK,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;QAE9D,MAAM,SAAS,GAAG,KAAK,CAAC,iBAAiB,CAAC;QAC1C,MAAM,YAAY,GAAG,KAAK,CAAC,mBAAmB,CAAC;QAE/C,IAAI,CAAC,SAAS,IAAI,CAAC,YAAY,EAAE;YAC/B,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;YAC3C,OAAO;SACR;QACD,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC;QAC5B,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC;QAEzB,gCAAgC,CAAC,kCAAkC,EAAE,MAAM,CAAC,EAAE;YAC5E,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YAC7C,IAAI,EAAE,CAAC;YACP,OAAO;gBACL,eAAe,EAAE,MAAM;aACxB,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,KAAK,CAAC,sBAAsB,EAAE,KAAK,EAAE,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,IAAI,CAAC,EAAE;QAC/D,MAAM,MAAM,GAAG,YAAY,EAAE,CAAC;QAC9B,MAAM,KAAK,GAAG,QAAQ,CAAC,YAAY,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;QAChE,KAAK,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;QAE9D,MAAM,SAAS,GAAG,KAAK,CAAC,iBAAiB,CAAC;QAC1C,MAAM,YAAY,GAAG,KAAK,CAAC,mBAAmB,CAAC;QAE/C,IAAI,CAAC,SAAS,IAAI,CAAC,YAAY,EAAE;YAC/B,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;YAC3C,OAAO;SACR;QACD,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC;QAC5B,SAAS,CAAC,OAAO,GAAG,KAAK,CAAC;QAE1B,gCAAgC,CAAC,kCAAkC,EAAE,MAAM,CAAC,EAAE;YAC5E,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YAC5C,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YAC7C,IAAI,EAAE,CAAC;YACP,OAAO;gBACL,eAAe,EAAE,MAAM;aACxB,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,KAAK,CAAC,sBAAsB,EAAE,KAAK,EAAE,CAAC;IACxC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {createTarget} from '../../helpers/EnvironmentHelpers.js';\nimport {\n  describeWithMockConnection,\n  setMockConnectionResponseHandler,\n} from '../../helpers/MockConnection.js';\n\nimport type * as WebauthnModule from '../../../../../front_end/panels/webauthn/webauthn.js';\nimport * as SDK from '../../../../../front_end/core/sdk/sdk.js';\n\nconst {assert} = chai;\n\ndescribeWithMockConnection('WebAuthn pane', () => {\n  let Webauthn: typeof WebauthnModule;\n\n  before(async () => {\n    Webauthn = await import('../../../../../front_end/panels/webauthn/webauthn.js');\n  });\n\n  it('disables the large blob checkbox if resident key is disabled', () => {\n    const panel = Webauthn.WebauthnPane.WebauthnPaneImpl.instance();\n    const largeBlob = panel.largeBlobCheckbox;\n    const residentKeys = panel.residentKeyCheckbox;\n\n    if (!largeBlob || !residentKeys) {\n      assert.fail('Required checkbox not found');\n      return;\n    }\n\n    // Make sure resident keys is disabled. Large blob should be disabled and\n    // unchecked.\n    residentKeys.checked = false;\n    residentKeys.dispatchEvent(new Event('change'));\n    assert.isTrue(largeBlob.disabled);\n    assert.isFalse(largeBlob.checked);\n\n    // Enable resident keys. Large blob should be enabled but still not\n    // checked.\n    residentKeys.checked = true;\n    residentKeys.dispatchEvent(new Event('change'));\n    assert.isFalse(largeBlob.disabled);\n    assert.isFalse(largeBlob.checked);\n\n    // Manually check large blob.\n    largeBlob.checked = true;\n    assert.isTrue(largeBlob.checked);\n\n    // Disabling resident keys should reset large blob to disabled and\n    // unchecked.\n    residentKeys.checked = false;\n    residentKeys.dispatchEvent(new Event('change'));\n    assert.isTrue(largeBlob.disabled);\n    assert.isFalse(largeBlob.checked);\n  });\n\n  it('adds an authenticator with large blob option', done => {\n    const target = createTarget();\n    const panel = Webauthn.WebauthnPane.WebauthnPaneImpl.instance();\n    panel.modelAdded(new SDK.WebAuthnModel.WebAuthnModel(target));\n\n    const largeBlob = panel.largeBlobCheckbox;\n    const residentKeys = panel.residentKeyCheckbox;\n\n    if (!largeBlob || !residentKeys) {\n      assert.fail('Required checkbox not found');\n      return;\n    }\n    residentKeys.checked = true;\n    largeBlob.checked = true;\n\n    setMockConnectionResponseHandler('WebAuthn.addVirtualAuthenticator', params => {\n      assert.isTrue(params.options.hasLargeBlob);\n      assert.isTrue(params.options.hasResidentKey);\n      done();\n      return {\n        authenticatorId: 'test',\n      };\n    });\n    panel.addAuthenticatorButton?.click();\n  });\n\n  it('adds an authenticator without the large blob option', done => {\n    const target = createTarget();\n    const panel = Webauthn.WebauthnPane.WebauthnPaneImpl.instance();\n    panel.modelAdded(new SDK.WebAuthnModel.WebAuthnModel(target));\n\n    const largeBlob = panel.largeBlobCheckbox;\n    const residentKeys = panel.residentKeyCheckbox;\n\n    if (!largeBlob || !residentKeys) {\n      assert.fail('Required checkbox not found');\n      return;\n    }\n    residentKeys.checked = true;\n    largeBlob.checked = false;\n\n    setMockConnectionResponseHandler('WebAuthn.addVirtualAuthenticator', params => {\n      assert.isFalse(params.options.hasLargeBlob);\n      assert.isTrue(params.options.hasResidentKey);\n      done();\n      return {\n        authenticatorId: 'test',\n      };\n    });\n    panel.addAuthenticatorButton?.click();\n  });\n});\n"]}