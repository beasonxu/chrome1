{"version":3,"file":"breakpoint-javascript_test.js","sourceRoot":"","sources":["../../../../../../../../../third_party/devtools-frontend/src/test/e2e/sources/breakpoint-javascript_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {\n  $,\n  click,\n  enableExperiment,\n  getBrowserAndPages,\n  goToResource,\n  step,\n  waitFor,\n  waitForFunction,\n} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {getMenuItemAtPosition, getMenuItemTitleAtPosition, openFileQuickOpen} from '../helpers/quick_open-helpers.js';\nimport {\n  addBreakpointForLine,\n  isEqualOrAbbreviation,\n  openSourceCodeEditorForFile,\n  PAUSE_INDICATOR_SELECTOR,\n  refreshDevToolsAndRemoveBackendState,\n  RESUME_BUTTON,\n  retrieveTopCallFrameWithoutResuming,\n} from '../helpers/sources-helpers.js';\n\nasync function waitForTopCallFrameChanged(previousCallFrame: string, updatedCallFrame: string) {\n  await waitForFunction(async () => {\n    const actualTopCallFrame = await retrieveTopCallFrameWithoutResuming();\n    assert.isTrue(actualTopCallFrame === previousCallFrame || actualTopCallFrame === updatedCallFrame);\n    return actualTopCallFrame === updatedCallFrame;\n  });\n}\n\nasync function assertScriptLocation(expectedLocation: string) {\n  const scriptLocation = await retrieveTopCallFrameWithoutResuming();\n  if (!scriptLocation) {\n    assert.fail('Unable to retrieve script location for call frame');\n  }\n  assert.isTrue(isEqualOrAbbreviation(scriptLocation, expectedLocation));\n}\n\ndescribe('The Sources Tab', async function() {\n  // Some of these tests that use instrumentation breakpoints\n  // can be slower on mac and windows. Increaese the timeout for them.\n  if (this.timeout() !== 0) {\n    this.timeout(10000);\n  }\n\n  it('sets and hits breakpoints in JavaScript', async () => {\n    const {target, frontend} = getBrowserAndPages();\n    await openSourceCodeEditorForFile('click-breakpoint.js', 'click-breakpoint.html');\n    await addBreakpointForLine(frontend, 4);\n\n    const scriptEvaluation = target.evaluate('f2();');\n\n    const scriptLocation = await retrieveTopCallFrameWithoutResuming();\n    assert.deepEqual(scriptLocation, 'click-breakpoint.js:4');\n\n    const breakpointHandle = await $('label', await waitFor('.breakpoint-hit'));\n    const breakpointLocation = await breakpointHandle?.evaluate(label => label.textContent);\n    assert.deepEqual(breakpointLocation, scriptLocation);\n\n    await click(RESUME_BUTTON);\n    await scriptEvaluation;\n  });\n\n  it('stops at each breakpoint on resume (using F8) on target', async () => {\n    const {target, frontend} = getBrowserAndPages();\n    await step('navigate to page', async () => {\n      await openSourceCodeEditorForFile('click-breakpoint.js', 'click-breakpoint.html');\n    });\n\n    await step('add a breakpoint to line No.3, 4, and 9', async () => {\n      await addBreakpointForLine(frontend, 3);\n      await addBreakpointForLine(frontend, 4);\n      await addBreakpointForLine(frontend, 9);\n    });\n\n    let scriptEvaluation: Promise<void>;\n    await step('trigger evaluation of script', async () => {\n      scriptEvaluation = target.evaluate('f2();');\n    });\n\n    await step('wait for pause and check if we stopped at line 3', async () => {\n      await waitFor(PAUSE_INDICATOR_SELECTOR);\n      const scriptLocation = await retrieveTopCallFrameWithoutResuming();\n      assert.deepEqual(scriptLocation, 'click-breakpoint.js:3');\n    });\n\n    await step('resume and wait until we have hit the next breakpoint (3->4)', async () => {\n      await target.keyboard.press('F8');\n      await waitForTopCallFrameChanged('click-breakpoint.js:3', 'click-breakpoint.js:4');\n    });\n\n    await step('resume and wait until we have hit the next breakpoint (4->9)', async () => {\n      await target.keyboard.press('F8');\n      await waitForTopCallFrameChanged('click-breakpoint.js:4', 'click-breakpoint.js:9');\n    });\n\n    await step('resume and wait until script finishes execution', async () => {\n      await frontend.keyboard.press('F8');\n      await scriptEvaluation;\n    });\n  });\n\n  it('can hit a breakpoint on the main thread on a fresh DevTools', async () => {\n    await enableExperiment('instrumentationBreakpoints');\n    const {frontend, target} = getBrowserAndPages();\n\n    await step('navigate to a page and open the Sources tab', async () => {\n      await openSourceCodeEditorForFile('breakpoint-hit-on-first-load.js', 'breakpoint-hit-on-first-load.html');\n    });\n\n    await step('add a breakpoint to the beginning of the script', async () => {\n      await addBreakpointForLine(frontend, 1);\n    });\n\n    await step('Navigate to a different site to refresh devtools and remove back-end state', async () => {\n      await refreshDevToolsAndRemoveBackendState(target);\n    });\n\n    await step('Navigate back to test page', () => {\n      void goToResource('sources/breakpoint-hit-on-first-load.html');\n    });\n\n    await step('wait for pause and check if we stopped at line 1', async () => {\n      await waitFor(PAUSE_INDICATOR_SELECTOR);\n      await assertScriptLocation('breakpoint-hit-on-first-load.js:1');\n    });\n\n    await step('Resume', async () => {\n      await click(RESUME_BUTTON);\n    });\n  });\n\n  // Skip test for now to land unrelated changes that will fail this test. Inline scripts without source\n  // urls are currently not correctly handled.\n  it.skip(\n      '[crbug.com/1229541] can hit a breakpoint in an inline script on the main thread on a fresh DevTools',\n      async () => {\n        await enableExperiment('instrumentationBreakpoints');\n        const {frontend, target} = getBrowserAndPages();\n\n        await step('navigate to a page and open the Sources tab', async () => {\n          await openSourceCodeEditorForFile('breakpoint-hit-on-first-load.html', 'breakpoint-hit-on-first-load.html');\n        });\n\n        await step('add a breakpoint to the beginning of the inline script', async () => {\n          await addBreakpointForLine(frontend, 9);\n        });\n\n        await step('Navigate to a different site to refresh devtools and remove back-end state', async () => {\n          await refreshDevToolsAndRemoveBackendState(target);\n        });\n\n        await step('Navigate back to test page', () => {\n          void goToResource('sources/breakpoint-hit-on-first-load.html');\n        });\n\n        await step('wait for pause and check if we stopped at line 9', async () => {\n          await waitFor(PAUSE_INDICATOR_SELECTOR);\n          await assertScriptLocation('breakpoint-hit-on-first-load.html:9');\n        });\n\n        await step('Resume', async () => {\n          await click(RESUME_BUTTON);\n        });\n      });\n\n  it('can hit a breakpoint in an inline script with sourceURL comment on the main thread on a fresh DevTools',\n     async () => {\n       await enableExperiment('instrumentationBreakpoints');\n       const {frontend, target} = getBrowserAndPages();\n\n       await step('navigate to a page and open the Sources tab', async () => {\n         await openSourceCodeEditorForFile('breakpoint-hit-on-first-load.html', 'breakpoint-hit-on-first-load.html');\n       });\n\n       await step('open the hello.js file (inline script)', async () => {\n         await openFileQuickOpen();\n         await frontend.keyboard.type('hello.js');\n\n         const firstItemTitle = await getMenuItemTitleAtPosition(0);\n         const firstItem = await getMenuItemAtPosition(0);\n         assert.strictEqual(firstItemTitle, 'hello.js');\n         await click(firstItem);\n       });\n\n       await step('add a breakpoint to the beginning of the inline script with sourceURL', async () => {\n         await addBreakpointForLine(frontend, 2);\n       });\n\n       await step('Navigate to a different site to refresh devtools and remove back-end state', async () => {\n         await refreshDevToolsAndRemoveBackendState(target);\n       });\n\n       await step('Navigate back to test page', () => {\n         void goToResource('sources/breakpoint-hit-on-first-load.html');\n       });\n\n       await step('wait for pause and check if we stopped at line 2', async () => {\n         await waitFor(PAUSE_INDICATOR_SELECTOR);\n         await assertScriptLocation('hello.js:2');\n       });\n\n       await step('Resume', async () => {\n         await click(RESUME_BUTTON);\n       });\n     });\n});\n"]}