{"version":3,"file":"can-break-with-wasm-sourcemaps_test.js","sourceRoot":"","sources":["../../../../../../../../../third_party/devtools-frontend/src/test/e2e/sources/can-break-with-wasm-sourcemaps_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {getBrowserAndPages, step, waitFor, waitForFunction} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {\n  addBreakpointForLine,\n  checkBreakpointDidNotActivate,\n  isBreakpointSet,\n  openFileInEditor,\n  openSourceCodeEditorForFile,\n  reloadPageAndWaitForSourceFile,\n  removeBreakpointForLine,\n  retrieveTopCallFrameScriptLocation,\n  retrieveTopCallFrameWithoutResuming,\n  TURNED_OFF_PAUSE_BUTTON_SELECTOR,\n} from '../helpers/sources-helpers.js';\n\ndescribe('The Sources Tab', async () => {\n  const fileName = 'with-sourcemap.ll';\n\n  it('can add breakpoint for a sourcemapped wasm module', async () => {\n    const {target, frontend} = getBrowserAndPages();\n\n    await openSourceCodeEditorForFile(fileName, 'wasm/wasm-with-sourcemap.html');\n    await addBreakpointForLine(frontend, 5);\n\n    const scriptLocation = await retrieveTopCallFrameScriptLocation('main();', target);\n    assert.deepEqual(scriptLocation, `${fileName}:5`);\n  });\n\n  it('hits two breakpoints that are set and activated separately', async () => {\n    const {target, frontend} = getBrowserAndPages();\n\n    await step('navigate to a page and open the Sources tab', async () => {\n      await openSourceCodeEditorForFile(fileName, 'wasm/wasm-with-sourcemap.html');\n    });\n\n    await step('add a breakpoint to line No.5', async () => {\n      await addBreakpointForLine(frontend, 5);\n    });\n\n    await step('reload the page', async () => {\n      await reloadPageAndWaitForSourceFile(target, fileName);\n    });\n\n    await step('open original source file', async () => {\n      await openFileInEditor(fileName);\n    });\n\n    await waitForFunction(async () => await isBreakpointSet(5));\n\n    await step('check that the code has paused on the breakpoint at the correct script location', async () => {\n      await waitForFunction(async () => {\n        const scriptLocation = await retrieveTopCallFrameWithoutResuming();\n        return scriptLocation === `${fileName}:5`;\n      });\n    });\n\n    await step('resume script execution', async () => {\n      await frontend.keyboard.press('F8');\n      await waitFor(TURNED_OFF_PAUSE_BUTTON_SELECTOR);\n    });\n\n    await step('remove the breakpoint from the fifth line', async () => {\n      await removeBreakpointForLine(frontend, '5');\n    });\n\n    await step('reload the page', async () => {\n      await reloadPageAndWaitForSourceFile(target, fileName);\n    });\n\n    await step('open original source file', async () => {\n      await openFileInEditor(fileName);\n    });\n\n    await waitForFunction(async () => !(await isBreakpointSet(5)));\n    await checkBreakpointDidNotActivate();\n\n    await step('add a breakpoint to line No.6', async () => {\n      await addBreakpointForLine(frontend, 6);\n    });\n\n    await step('reload the page', async () => {\n      await reloadPageAndWaitForSourceFile(target, fileName);\n    });\n\n    await waitForFunction(async () => await isBreakpointSet(6));\n\n    await step('check that the code has paused on the breakpoint at the correct script location', async () => {\n      await waitForFunction(async () => {\n        const scriptLocation = await retrieveTopCallFrameWithoutResuming();\n        return scriptLocation === `${fileName}:6`;\n      });\n    });\n  });\n});\n"]}