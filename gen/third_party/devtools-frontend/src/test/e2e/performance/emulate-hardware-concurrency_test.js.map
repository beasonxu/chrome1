{"version":3,"file":"emulate-hardware-concurrency_test.js","sourceRoot":"","sources":["../../../../../../../../../third_party/devtools-frontend/src/test/e2e/performance/emulate-hardware-concurrency_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {getBrowserAndPages} from '../../conductor/puppeteer-state.js';\n\nimport {assertNotNullOrUndefined, waitFor, waitForAria, waitForFunction, type puppeteer} from '../../shared/helper.js';\nimport {describe, it} from '../../shared/mocha-extensions.js';\nimport {navigateToPerformanceTab, openCaptureSettings} from '../helpers/performance-helpers.js';\n\nasync function waitForChangedConcurrency(lastConcurrency: number|undefined) {\n  const {target} = getBrowserAndPages();\n  return waitForFunction(async () => {\n    const newConcurrency = await target.evaluate('navigator.hardwareConcurrency');\n    if (newConcurrency !== lastConcurrency) {\n      return newConcurrency;\n    }\n    return undefined;\n  });\n}\n\ndescribe('The Performance panel', () => {\n  it('can emulate navigator.hardwareConcurrency', async () => {\n    await navigateToPerformanceTab('empty');\n    await openCaptureSettings('.timeline-settings-pane');\n\n    let concurrency = await waitForChangedConcurrency(undefined);\n\n    // Wait for the checkbox to load\n    const toggle = await waitForAria('Hardware concurrency') as puppeteer.ElementHandle<HTMLInputElement>;\n    await waitForFunction(() => toggle.evaluate((e: HTMLInputElement) => {\n      if (e.disabled) {\n        return false;\n      }\n      e.click();\n      return true;\n    }));\n\n    // Check for the warning icon on the tab header\n    const tabHeader = await waitForAria('Performance');\n    const tabIcon = await waitFor('.smallicon-warning', tabHeader);\n    {\n      const tooltipText = await tabIcon.evaluate(e => e.getAttribute('title'));\n      assert.deepEqual(tooltipText, 'Hardware concurrency override is enabled');\n    }\n\n    // Check that the warning is shonw on the settings gear:\n    const gear =\n        await waitForAria('- Hardware concurrency override is enabled') as puppeteer.ElementHandle<HTMLElement>;\n    const gearColor = await gear.evaluate(\n        e => e.firstElementChild && getComputedStyle(e.firstElementChild).getPropertyValue('background-color'));\n    assert.deepEqual(gearColor, 'rgb(217, 48, 37)');\n\n    // Check that the concurrency input shows the correct value:\n    const input = await waitForAria('Value of navigator.hardwareConcurrency');\n    const initialValue = Number(await input.evaluate(input => {\n      return (input as HTMLInputElement).value;\n    }));\n\n    assert.deepEqual(initialValue, concurrency);\n\n    // Check setting a different value works:\n    await input.click({clickCount: 3});\n    await input.type(`${initialValue + 1}`);\n    concurrency = await waitForChangedConcurrency(concurrency);\n    assert.deepEqual(concurrency, initialValue + 1);\n\n    // Check that the warning is shown when exceeding the default value:\n    const warning = await waitForAria('Exceeding the default value may degrade system performance.') as\n        puppeteer.ElementHandle<HTMLElement>;\n    await waitForFunction(async () => await warning.evaluate(e => getComputedStyle(e).visibility) === 'visible');\n\n    // Check that resetting the value works:\n    const button = await waitForAria('Reset to the default value');\n    assertNotNullOrUndefined(button);\n    await button.click();\n\n    concurrency = await waitForChangedConcurrency(concurrency);\n    assert.deepEqual(concurrency, initialValue);\n  });\n});\n"]}