// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_sample.proto

#include "test_sample.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dom_distiller {
namespace test_sample {
namespace proto {
PROTOBUF_CONSTEXPR TypeTest_Message::TypeTest_Message(
    ::_pbi::ConstantInitialized)
  : dummy_(false){}
struct TypeTest_MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeTest_MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeTest_MessageDefaultTypeInternal() {}
  union {
    TypeTest_Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeTest_MessageDefaultTypeInternal _TypeTest_Message_default_instance_;
PROTOBUF_CONSTEXPR TypeTest::TypeTest(
    ::_pbi::ConstantInitialized)
  : string_value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , message_value_(nullptr)
  , double_value_(0)
  , float_value_(0)
  , int32_value_(0)
  , bool_value_(false){}
struct TypeTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeTestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeTestDefaultTypeInternal() {}
  union {
    TypeTest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeTestDefaultTypeInternal _TypeTest_default_instance_;
PROTOBUF_CONSTEXPR Repeated_Message::Repeated_Message(
    ::_pbi::ConstantInitialized)
  : dummy_(){}
struct Repeated_MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Repeated_MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Repeated_MessageDefaultTypeInternal() {}
  union {
    Repeated_Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Repeated_MessageDefaultTypeInternal _Repeated_Message_default_instance_;
PROTOBUF_CONSTEXPR Repeated::Repeated(
    ::_pbi::ConstantInitialized)
  : float_value_()
  , double_value_()
  , int32_value_()
  , bool_value_()
  , string_value_()
  , message_value_(){}
struct RepeatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RepeatedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RepeatedDefaultTypeInternal() {}
  union {
    Repeated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RepeatedDefaultTypeInternal _Repeated_default_instance_;
}  // namespace proto
}  // namespace test_sample
}  // namespace dom_distiller
namespace dom_distiller {
namespace test_sample {
namespace proto {

// ===================================================================

class TypeTest_Message::_Internal {
 public:
  using HasBits = decltype(std::declval<TypeTest_Message>()._has_bits_);
  static void set_has_dummy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TypeTest_Message::TypeTest_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:dom_distiller.test_sample.proto.TypeTest.Message)
}
TypeTest_Message::TypeTest_Message(const TypeTest_Message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:dom_distiller.test_sample.proto.TypeTest.Message)
}

inline void TypeTest_Message::SharedCtor() {
dummy_ = false;
}

TypeTest_Message::~TypeTest_Message() {
  // @@protoc_insertion_point(destructor:dom_distiller.test_sample.proto.TypeTest.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TypeTest_Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TypeTest_Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TypeTest_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.test_sample.proto.TypeTest.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dummy_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TypeTest_Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool dummy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dummy(&has_bits);
          dummy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypeTest_Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dom_distiller.test_sample.proto.TypeTest.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool dummy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_dummy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dom_distiller.test_sample.proto.TypeTest.Message)
  return target;
}

size_t TypeTest_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.test_sample.proto.TypeTest.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool dummy = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TypeTest_Message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TypeTest_Message*>(
      &from));
}

void TypeTest_Message::MergeFrom(const TypeTest_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.test_sample.proto.TypeTest.Message)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dummy()) {
    _internal_set_dummy(from._internal_dummy());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TypeTest_Message::CopyFrom(const TypeTest_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.test_sample.proto.TypeTest.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeTest_Message::IsInitialized() const {
  return true;
}

void TypeTest_Message::InternalSwap(TypeTest_Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dummy_, other->dummy_);
}

std::string TypeTest_Message::GetTypeName() const {
  return "dom_distiller.test_sample.proto.TypeTest.Message";
}


// ===================================================================

class TypeTest::_Internal {
 public:
  using HasBits = decltype(std::declval<TypeTest>()._has_bits_);
  static void set_has_float_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_int32_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bool_value(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::dom_distiller::test_sample::proto::TypeTest_Message& message_value(const TypeTest* msg);
  static void set_has_message_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::dom_distiller::test_sample::proto::TypeTest_Message&
TypeTest::_Internal::message_value(const TypeTest* msg) {
  return *msg->message_value_;
}
TypeTest::TypeTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:dom_distiller.test_sample.proto.TypeTest)
}
TypeTest::TypeTest(const TypeTest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string_value()) {
    string_value_.Set(from._internal_string_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_message_value()) {
    message_value_ = new ::dom_distiller::test_sample::proto::TypeTest_Message(*from.message_value_);
  } else {
    message_value_ = nullptr;
  }
  ::memcpy(&double_value_, &from.double_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&bool_value_) -
    reinterpret_cast<char*>(&double_value_)) + sizeof(bool_value_));
  // @@protoc_insertion_point(copy_constructor:dom_distiller.test_sample.proto.TypeTest)
}

inline void TypeTest::SharedCtor() {
string_value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  string_value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&message_value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bool_value_) -
    reinterpret_cast<char*>(&message_value_)) + sizeof(bool_value_));
}

TypeTest::~TypeTest() {
  // @@protoc_insertion_point(destructor:dom_distiller.test_sample.proto.TypeTest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TypeTest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  string_value_.Destroy();
  if (this != internal_default_instance()) delete message_value_;
}

void TypeTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TypeTest::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.test_sample.proto.TypeTest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      string_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(message_value_ != nullptr);
      message_value_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&double_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bool_value_) -
        reinterpret_cast<char*>(&double_value_)) + sizeof(bool_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TypeTest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float float_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_float_value(&has_bits);
          float_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional double double_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_double_value(&has_bits);
          double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 int32_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_int32_value(&has_bits);
          int32_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bool_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bool_value(&has_bits);
          bool_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string string_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .dom_distiller.test_sample.proto.TypeTest.Message message_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypeTest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dom_distiller.test_sample.proto.TypeTest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float float_value = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_float_value(), target);
  }

  // optional double double_value = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_double_value(), target);
  }

  // optional int32 int32_value = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_int32_value(), target);
  }

  // optional bool bool_value = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_bool_value(), target);
  }

  // optional string string_value = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_string_value(), target);
  }

  // optional .dom_distiller.test_sample.proto.TypeTest.Message message_value = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::message_value(this),
        _Internal::message_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dom_distiller.test_sample.proto.TypeTest)
  return target;
}

size_t TypeTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.test_sample.proto.TypeTest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string string_value = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
    }

    // optional .dom_distiller.test_sample.proto.TypeTest.Message message_value = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_value_);
    }

    // optional double double_value = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional float float_value = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 int32_value = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int32_value());
    }

    // optional bool bool_value = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TypeTest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TypeTest*>(
      &from));
}

void TypeTest::MergeFrom(const TypeTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.test_sample.proto.TypeTest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_message_value()->::dom_distiller::test_sample::proto::TypeTest_Message::MergeFrom(from._internal_message_value());
    }
    if (cached_has_bits & 0x00000004u) {
      double_value_ = from.double_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      float_value_ = from.float_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      int32_value_ = from.int32_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      bool_value_ = from.bool_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TypeTest::CopyFrom(const TypeTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.test_sample.proto.TypeTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeTest::IsInitialized() const {
  return true;
}

void TypeTest::InternalSwap(TypeTest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &string_value_, lhs_arena,
      &other->string_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TypeTest, bool_value_)
      + sizeof(TypeTest::bool_value_)
      - PROTOBUF_FIELD_OFFSET(TypeTest, message_value_)>(
          reinterpret_cast<char*>(&message_value_),
          reinterpret_cast<char*>(&other->message_value_));
}

std::string TypeTest::GetTypeName() const {
  return "dom_distiller.test_sample.proto.TypeTest";
}


// ===================================================================

class Repeated_Message::_Internal {
 public:
};

Repeated_Message::Repeated_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  dummy_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:dom_distiller.test_sample.proto.Repeated.Message)
}
Repeated_Message::Repeated_Message(const Repeated_Message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      dummy_(from.dummy_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dom_distiller.test_sample.proto.Repeated.Message)
}

inline void Repeated_Message::SharedCtor() {
}

Repeated_Message::~Repeated_Message() {
  // @@protoc_insertion_point(destructor:dom_distiller.test_sample.proto.Repeated.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Repeated_Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Repeated_Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Repeated_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.test_sample.proto.Repeated.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dummy_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Repeated_Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bool dummy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dummy(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_dummy(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Repeated_Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dom_distiller.test_sample.proto.Repeated.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool dummy = 1;
  for (int i = 0, n = this->_internal_dummy_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_dummy(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dom_distiller.test_sample.proto.Repeated.Message)
  return target;
}

size_t Repeated_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.test_sample.proto.Repeated.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool dummy = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_dummy_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_dummy_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Repeated_Message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Repeated_Message*>(
      &from));
}

void Repeated_Message::MergeFrom(const Repeated_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.test_sample.proto.Repeated.Message)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dummy_.MergeFrom(from.dummy_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Repeated_Message::CopyFrom(const Repeated_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.test_sample.proto.Repeated.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Repeated_Message::IsInitialized() const {
  return true;
}

void Repeated_Message::InternalSwap(Repeated_Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dummy_.InternalSwap(&other->dummy_);
}

std::string Repeated_Message::GetTypeName() const {
  return "dom_distiller.test_sample.proto.Repeated.Message";
}


// ===================================================================

class Repeated::_Internal {
 public:
};

Repeated::Repeated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  float_value_(arena),
  double_value_(arena),
  int32_value_(arena),
  bool_value_(arena),
  string_value_(arena),
  message_value_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:dom_distiller.test_sample.proto.Repeated)
}
Repeated::Repeated(const Repeated& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      float_value_(from.float_value_),
      double_value_(from.double_value_),
      int32_value_(from.int32_value_),
      bool_value_(from.bool_value_),
      string_value_(from.string_value_),
      message_value_(from.message_value_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dom_distiller.test_sample.proto.Repeated)
}

inline void Repeated::SharedCtor() {
}

Repeated::~Repeated() {
  // @@protoc_insertion_point(destructor:dom_distiller.test_sample.proto.Repeated)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Repeated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Repeated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Repeated::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.test_sample.proto.Repeated)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  float_value_.Clear();
  double_value_.Clear();
  int32_value_.Clear();
  bool_value_.Clear();
  string_value_.Clear();
  message_value_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Repeated::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float float_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_float_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_float_value(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double double_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_double_value(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 int32_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_int32_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int32_value(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool bool_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_bool_value(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string string_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string_value();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dom_distiller.test_sample.proto.Repeated.Message message_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Repeated::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dom_distiller.test_sample.proto.Repeated)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float float_value = 1;
  for (int i = 0, n = this->_internal_float_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_float_value(i), target);
  }

  // repeated double double_value = 2;
  for (int i = 0, n = this->_internal_double_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_double_value(i), target);
  }

  // repeated int32 int32_value = 3;
  for (int i = 0, n = this->_internal_int32_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_int32_value(i), target);
  }

  // repeated bool bool_value = 4;
  for (int i = 0, n = this->_internal_bool_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_bool_value(i), target);
  }

  // repeated string string_value = 5;
  for (int i = 0, n = this->_internal_string_value_size(); i < n; i++) {
    const auto& s = this->_internal_string_value(i);
    target = stream->WriteString(5, s, target);
  }

  // repeated .dom_distiller.test_sample.proto.Repeated.Message message_value = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_message_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_message_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dom_distiller.test_sample.proto.Repeated)
  return target;
}

size_t Repeated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.test_sample.proto.Repeated)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float float_value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_float_value_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_float_value_size());
    total_size += data_size;
  }

  // repeated double double_value = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_double_value_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_double_value_size());
    total_size += data_size;
  }

  // repeated int32 int32_value = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->int32_value_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_int32_value_size());
    total_size += data_size;
  }

  // repeated bool bool_value = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bool_value_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_bool_value_size());
    total_size += data_size;
  }

  // repeated string string_value = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(string_value_.size());
  for (int i = 0, n = string_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      string_value_.Get(i));
  }

  // repeated .dom_distiller.test_sample.proto.Repeated.Message message_value = 6;
  total_size += 1UL * this->_internal_message_value_size();
  for (const auto& msg : this->message_value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Repeated::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Repeated*>(
      &from));
}

void Repeated::MergeFrom(const Repeated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.test_sample.proto.Repeated)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  float_value_.MergeFrom(from.float_value_);
  double_value_.MergeFrom(from.double_value_);
  int32_value_.MergeFrom(from.int32_value_);
  bool_value_.MergeFrom(from.bool_value_);
  string_value_.MergeFrom(from.string_value_);
  message_value_.MergeFrom(from.message_value_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Repeated::CopyFrom(const Repeated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.test_sample.proto.Repeated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Repeated::IsInitialized() const {
  return true;
}

void Repeated::InternalSwap(Repeated* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  float_value_.InternalSwap(&other->float_value_);
  double_value_.InternalSwap(&other->double_value_);
  int32_value_.InternalSwap(&other->int32_value_);
  bool_value_.InternalSwap(&other->bool_value_);
  string_value_.InternalSwap(&other->string_value_);
  message_value_.InternalSwap(&other->message_value_);
}

std::string Repeated::GetTypeName() const {
  return "dom_distiller.test_sample.proto.Repeated";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace test_sample
}  // namespace dom_distiller
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dom_distiller::test_sample::proto::TypeTest_Message*
Arena::CreateMaybeMessage< ::dom_distiller::test_sample::proto::TypeTest_Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dom_distiller::test_sample::proto::TypeTest_Message >(arena);
}
template<> PROTOBUF_NOINLINE ::dom_distiller::test_sample::proto::TypeTest*
Arena::CreateMaybeMessage< ::dom_distiller::test_sample::proto::TypeTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dom_distiller::test_sample::proto::TypeTest >(arena);
}
template<> PROTOBUF_NOINLINE ::dom_distiller::test_sample::proto::Repeated_Message*
Arena::CreateMaybeMessage< ::dom_distiller::test_sample::proto::Repeated_Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dom_distiller::test_sample::proto::Repeated_Message >(arena);
}
template<> PROTOBUF_NOINLINE ::dom_distiller::test_sample::proto::Repeated*
Arena::CreateMaybeMessage< ::dom_distiller::test_sample::proto::Repeated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dom_distiller::test_sample::proto::Repeated >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
