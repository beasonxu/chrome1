// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_TEXT_UPDATE_EVENT_INIT_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_TEXT_UPDATE_EVENT_INIT_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_event_init.h"
#include "third_party/blink/renderer/core/core_export.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

namespace blink {

class ExceptionState;

class CORE_EXPORT TextUpdateEventInit : public EventInit {
  
  public:
static TextUpdateEventInit* Create() {
  return MakeGarbageCollected<TextUpdateEventInit>();
}
static TextUpdateEventInit* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<TextUpdateEventInit>(isolate);
}
static TextUpdateEventInit* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  TextUpdateEventInit();
explicit  TextUpdateEventInit(v8::Isolate* isolate);

bool hasNewSelectionEnd() const {
  return has_new_selection_end_;
}
uint32_t newSelectionEnd() const {
  DCHECK(hasNewSelectionEnd());
return member_new_selection_end_;
}
uint32_t getNewSelectionEndOr(uint32_t fallback_value) const {
  if (!hasNewSelectionEnd()) {
  return fallback_value;
}
return member_new_selection_end_;
}
void setNewSelectionEnd(uint32_t value) {
  member_new_selection_end_ = value;
has_new_selection_end_ = true;
}

bool hasNewSelectionStart() const {
  return has_new_selection_start_;
}
uint32_t newSelectionStart() const {
  DCHECK(hasNewSelectionStart());
return member_new_selection_start_;
}
uint32_t getNewSelectionStartOr(uint32_t fallback_value) const {
  if (!hasNewSelectionStart()) {
  return fallback_value;
}
return member_new_selection_start_;
}
void setNewSelectionStart(uint32_t value) {
  member_new_selection_start_ = value;
has_new_selection_start_ = true;
}

bool hasUpdateRangeEnd() const {
  return has_update_range_end_;
}
uint32_t updateRangeEnd() const {
  DCHECK(hasUpdateRangeEnd());
return member_update_range_end_;
}
uint32_t getUpdateRangeEndOr(uint32_t fallback_value) const {
  if (!hasUpdateRangeEnd()) {
  return fallback_value;
}
return member_update_range_end_;
}
void setUpdateRangeEnd(uint32_t value) {
  member_update_range_end_ = value;
has_update_range_end_ = true;
}

bool hasUpdateRangeStart() const {
  return has_update_range_start_;
}
uint32_t updateRangeStart() const {
  DCHECK(hasUpdateRangeStart());
return member_update_range_start_;
}
uint32_t getUpdateRangeStartOr(uint32_t fallback_value) const {
  if (!hasUpdateRangeStart()) {
  return fallback_value;
}
return member_update_range_start_;
}
void setUpdateRangeStart(uint32_t value) {
  member_update_range_start_ = value;
has_update_range_start_ = true;
}

bool hasUpdateText() const {
  return has_update_text_;
}
const String& updateText() const {
  DCHECK(hasUpdateText());
return member_update_text_;
}
String getUpdateTextOr(const String& fallback_value) const;
String getUpdateTextOr(String&& fallback_value) const;
void setUpdateText(const String& value);
void setUpdateText(String&& value);




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_new_selection_end_ = false;
bool has_new_selection_start_ = false;
bool has_update_range_end_ = false;
bool has_update_range_start_ = false;
bool has_update_text_ = false;

uint32_t member_new_selection_end_;
uint32_t member_new_selection_start_;
uint32_t member_update_range_end_;
uint32_t member_update_range_start_;
String member_update_text_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_TEXT_UPDATE_EVENT_INIT_H_
