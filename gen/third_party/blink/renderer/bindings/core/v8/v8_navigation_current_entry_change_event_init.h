// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_NAVIGATION_CURRENT_ENTRY_CHANGE_EVENT_INIT_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_NAVIGATION_CURRENT_ENTRY_CHANGE_EVENT_INIT_H_

#include "base/containers/span.h"
#include "third_party/abseil-cpp/absl/types/optional.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_event_init.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_navigation_navigation_type.h"
#include "third_party/blink/renderer/core/core_export.h"
#include "third_party/blink/renderer/platform/heap/member.h"

namespace blink {

class ExceptionState;
class NavigationHistoryEntry;

class CORE_EXPORT NavigationCurrentEntryChangeEventInit : public EventInit {
  
  public:
static NavigationCurrentEntryChangeEventInit* Create() {
  return MakeGarbageCollected<NavigationCurrentEntryChangeEventInit>();
}
static NavigationCurrentEntryChangeEventInit* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<NavigationCurrentEntryChangeEventInit>(isolate);
}
static NavigationCurrentEntryChangeEventInit* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  NavigationCurrentEntryChangeEventInit();
explicit  NavigationCurrentEntryChangeEventInit(v8::Isolate* isolate);

bool hasFrom() const {
  return true;
}
NavigationHistoryEntry* from() const {
  return member_from_;
}
void setFrom(NavigationHistoryEntry* value) {
  member_from_ = value;
DCHECK(member_from_);
}

bool hasNavigationType() const {
  return true;
}
const absl::optional<V8NavigationNavigationType>& navigationType() const {
  return member_navigation_type_;
}
void setNavigationType(const absl::optional<V8NavigationNavigationType>& value) {
  member_navigation_type_ = value;
}
void setNavigationType(V8NavigationNavigationType value) {
  member_navigation_type_ = value;
}
void setNavigationType(V8NavigationNavigationType::Enum value) {
  member_navigation_type_ = V8NavigationNavigationType(value);
}


// Obsolete accessor functions
void setNavigationType(const String& value) {
  member_navigation_type_ = V8NavigationNavigationType::Create(value).value();
}
bool hasNavigationTypeNonNull() const {
  return hasNavigationType() && navigationType().has_value();
}
V8NavigationNavigationType navigationTypeNonNull() const {
  DCHECK(hasNavigationTypeNonNull());
return navigationType().value();
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);



Member<NavigationHistoryEntry> member_from_;
absl::optional<V8NavigationNavigationType> member_navigation_type_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_NAVIGATION_CURRENT_ENTRY_CHANGE_EVENT_INIT_H_
