// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/core/v8/v8_security_policy_violation_event_init.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



SecurityPolicyViolationEventInit* SecurityPolicyViolationEventInit::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  SecurityPolicyViolationEventInit* dictionary = MakeGarbageCollected<SecurityPolicyViolationEventInit>(isolate);
if (!v8_value->IsObject()) {
  const char* const class_like_name = "SecurityPolicyViolationEventInit";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 SecurityPolicyViolationEventInit::SecurityPolicyViolationEventInit() {
  
}

 SecurityPolicyViolationEventInit::SecurityPolicyViolationEventInit(v8::Isolate* isolate) : EventInit(isolate) {
  
}



void SecurityPolicyViolationEventInit::setBlockedURI(const String& value) {
  member_blocked_uri_ = value;
}

void SecurityPolicyViolationEventInit::setBlockedURI(String&& value) {
  member_blocked_uri_ = std::move(value);
}














void SecurityPolicyViolationEventInit::setDocumentURI(const String& value) {
  member_document_uri_ = value;
}

void SecurityPolicyViolationEventInit::setDocumentURI(String&& value) {
  member_document_uri_ = std::move(value);
}




void SecurityPolicyViolationEventInit::setEffectiveDirective(const String& value) {
  member_effective_directive_ = value;
}

void SecurityPolicyViolationEventInit::setEffectiveDirective(String&& value) {
  member_effective_directive_ = std::move(value);
}









void SecurityPolicyViolationEventInit::setOriginalPolicy(const String& value) {
  member_original_policy_ = value;
}

void SecurityPolicyViolationEventInit::setOriginalPolicy(String&& value) {
  member_original_policy_ = std::move(value);
}




void SecurityPolicyViolationEventInit::setReferrer(const String& value) {
  member_referrer_ = value;
}

void SecurityPolicyViolationEventInit::setReferrer(String&& value) {
  member_referrer_ = std::move(value);
}




void SecurityPolicyViolationEventInit::setSample(const String& value) {
  member_sample_ = value;
}

void SecurityPolicyViolationEventInit::setSample(String&& value) {
  member_sample_ = std::move(value);
}




void SecurityPolicyViolationEventInit::setSourceFile(const String& value) {
  member_source_file_ = value;
}

void SecurityPolicyViolationEventInit::setSourceFile(String&& value) {
  member_source_file_ = std::move(value);
}









void SecurityPolicyViolationEventInit::setViolatedDirective(const String& value) {
  member_violated_directive_ = value;
}

void SecurityPolicyViolationEventInit::setViolatedDirective(String&& value) {
  member_violated_directive_ = std::move(value);
}




void SecurityPolicyViolationEventInit::Trace(Visitor* visitor) const {
  TraceIfNeeded<String>::Trace(visitor, member_blocked_uri_);
TraceIfNeeded<int32_t>::Trace(visitor, member_column_number_);
TraceIfNeeded<V8SecurityPolicyViolationEventDisposition>::Trace(visitor, member_disposition_);
TraceIfNeeded<String>::Trace(visitor, member_document_uri_);
TraceIfNeeded<String>::Trace(visitor, member_effective_directive_);
TraceIfNeeded<int32_t>::Trace(visitor, member_line_number_);
TraceIfNeeded<String>::Trace(visitor, member_original_policy_);
TraceIfNeeded<String>::Trace(visitor, member_referrer_);
TraceIfNeeded<String>::Trace(visitor, member_sample_);
TraceIfNeeded<String>::Trace(visitor, member_source_file_);
TraceIfNeeded<uint16_t>::Trace(visitor, member_status_code_);
TraceIfNeeded<String>::Trace(visitor, member_violated_directive_);
EventInit::Trace(visitor);
}

bool SecurityPolicyViolationEventInit::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  if (!EventInit::FillV8ObjectWithMembers(script_state, v8_dictionary)) {
  return false;
}

v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasBlockedURI()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_blocked_uri_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasColumnNumber()) {
  if (!ToV8Traits<IDLLong>::ToV8(script_state, member_column_number_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDisposition()) {
  if (!ToV8Traits<V8SecurityPolicyViolationEventDisposition>::ToV8(script_state, member_disposition_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDocumentURI()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_document_uri_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasEffectiveDirective()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_effective_directive_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasLineNumber()) {
  if (!ToV8Traits<IDLLong>::ToV8(script_state, member_line_number_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasOriginalPolicy()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_original_policy_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasReferrer()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_referrer_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasSample()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_sample_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[8].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasSourceFile()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_source_file_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[9].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasStatusCode()) {
  if (!ToV8Traits<IDLUnsignedShort>::ToV8(script_state, member_status_code_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[10].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasViolatedDirective()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_violated_directive_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[11].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void SecurityPolicyViolationEventInit::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  EventInit::FillMembersFromV8Object(isolate, v8_dictionary, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

const char* const class_like_name = "SecurityPolicyViolationEventInit";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("blockedURI");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool fallback_presence_var;
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), fallback_presence_var, member_blocked_uri_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("columnNumber");
if (!bindings::GetDictionaryMemberFromV8Object<IDLLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), fallback_presence_var, member_column_number_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("disposition");
constexpr bool is_required = true;
if (!bindings::GetDictionaryMemberFromV8Object<V8SecurityPolicyViolationEventDisposition, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), fallback_presence_var, member_disposition_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("documentURI");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), fallback_presence_var, member_document_uri_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("effectiveDirective");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), fallback_presence_var, member_effective_directive_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("lineNumber");
if (!bindings::GetDictionaryMemberFromV8Object<IDLLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), fallback_presence_var, member_line_number_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("originalPolicy");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), fallback_presence_var, member_original_policy_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("referrer");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), fallback_presence_var, member_referrer_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("sample");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[8].Get(isolate), fallback_presence_var, member_sample_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("sourceFile");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[9].Get(isolate), fallback_presence_var, member_source_file_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("statusCode");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedShort, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[10].Get(isolate), fallback_presence_var, member_status_code_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("violatedDirective");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[11].Get(isolate), fallback_presence_var, member_violated_directive_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> SecurityPolicyViolationEventInit::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"blockedURI",
"columnNumber",
"disposition",
"documentURI",
"effectiveDirective",
"lineNumber",
"originalPolicy",
"referrer",
"sample",
"sourceFile",
"statusCode",
"violatedDirective",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
