// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_SCROLL_STATE_INIT_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_SCROLL_STATE_INIT_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/core/core_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"

namespace blink {

class ExceptionState;

class CORE_EXPORT ScrollStateInit : public bindings::DictionaryBase {
  
  public:
static ScrollStateInit* Create() {
  return MakeGarbageCollected<ScrollStateInit>();
}
static ScrollStateInit* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<ScrollStateInit>(isolate);
}
static ScrollStateInit* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  ScrollStateInit();
explicit  ScrollStateInit(v8::Isolate* isolate);

bool hasDeltaGranularity() const {
  return true;
}
double deltaGranularity() const {
  return member_delta_granularity_;
}
void setDeltaGranularity(double value) {
  member_delta_granularity_ = value;
}

bool hasDeltaX() const {
  return true;
}
double deltaX() const {
  return member_delta_x_;
}
void setDeltaX(double value) {
  member_delta_x_ = value;
}

bool hasDeltaXHint() const {
  return true;
}
double deltaXHint() const {
  return member_delta_x_hint_;
}
void setDeltaXHint(double value) {
  member_delta_x_hint_ = value;
}

bool hasDeltaY() const {
  return true;
}
double deltaY() const {
  return member_delta_y_;
}
void setDeltaY(double value) {
  member_delta_y_ = value;
}

bool hasDeltaYHint() const {
  return true;
}
double deltaYHint() const {
  return member_delta_y_hint_;
}
void setDeltaYHint(double value) {
  member_delta_y_hint_ = value;
}

bool hasFromUserInput() const {
  return true;
}
bool fromUserInput() const {
  return member_from_user_input_;
}
void setFromUserInput(bool value) {
  member_from_user_input_ = value;
}

bool hasIsBeginning() const {
  return true;
}
bool isBeginning() const {
  return member_is_beginning_;
}
void setIsBeginning(bool value) {
  member_is_beginning_ = value;
}

bool hasIsDirectManipulation() const {
  return true;
}
bool isDirectManipulation() const {
  return member_is_direct_manipulation_;
}
void setIsDirectManipulation(bool value) {
  member_is_direct_manipulation_ = value;
}

bool hasIsEnding() const {
  return true;
}
bool isEnding() const {
  return member_is_ending_;
}
void setIsEnding(bool value) {
  member_is_ending_ = value;
}

bool hasIsInInertialPhase() const {
  return true;
}
bool isInInertialPhase() const {
  return member_is_in_inertial_phase_;
}
void setIsInInertialPhase(bool value) {
  member_is_in_inertial_phase_ = value;
}

bool hasPositionX() const {
  return true;
}
int32_t positionX() const {
  return member_position_x_;
}
void setPositionX(int32_t value) {
  member_position_x_ = value;
}

bool hasPositionY() const {
  return true;
}
int32_t positionY() const {
  return member_position_y_;
}
void setPositionY(int32_t value) {
  member_position_y_ = value;
}

bool hasShouldPropagate() const {
  return true;
}
bool shouldPropagate() const {
  return member_should_propagate_;
}
void setShouldPropagate(bool value) {
  member_should_propagate_ = value;
}

bool hasVelocityX() const {
  return true;
}
double velocityX() const {
  return member_velocity_x_;
}
void setVelocityX(double value) {
  member_velocity_x_ = value;
}

bool hasVelocityY() const {
  return true;
}
double velocityY() const {
  return member_velocity_y_;
}
void setVelocityY(double value) {
  member_velocity_y_ = value;
}




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);



double member_delta_granularity_{0};
double member_delta_x_{0};
double member_delta_x_hint_{0};
double member_delta_y_{0};
double member_delta_y_hint_{0};
bool member_from_user_input_{false};
bool member_is_beginning_{false};
bool member_is_direct_manipulation_{false};
bool member_is_ending_{false};
bool member_is_in_inertial_phase_{false};
int32_t member_position_x_{0};
int32_t member_position_y_{0};
bool member_should_propagate_{true};
double member_velocity_x_{0};
double member_velocity_y_{0};


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_SCROLL_STATE_INIT_H_
