// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_SCROLL_TO_OPTIONS_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_SCROLL_TO_OPTIONS_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_scroll_options.h"
#include "third_party/blink/renderer/core/core_export.h"

namespace blink {

class ExceptionState;

class CORE_EXPORT ScrollToOptions : public ScrollOptions {
  
  public:
static ScrollToOptions* Create() {
  return MakeGarbageCollected<ScrollToOptions>();
}
static ScrollToOptions* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<ScrollToOptions>(isolate);
}
static ScrollToOptions* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  ScrollToOptions();
explicit  ScrollToOptions(v8::Isolate* isolate);

bool hasLeft() const {
  return has_left_;
}
double left() const {
  DCHECK(hasLeft());
return member_left_;
}
double getLeftOr(double fallback_value) const {
  if (!hasLeft()) {
  return fallback_value;
}
return member_left_;
}
void setLeft(double value) {
  member_left_ = value;
has_left_ = true;
}

bool hasTop() const {
  return has_top_;
}
double top() const {
  DCHECK(hasTop());
return member_top_;
}
double getTopOr(double fallback_value) const {
  if (!hasTop()) {
  return fallback_value;
}
return member_top_;
}
void setTop(double value) {
  member_top_ = value;
has_top_ = true;
}




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_left_ = false;
bool has_top_ = false;

double member_left_;
double member_top_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_SCROLL_TO_OPTIONS_H_
