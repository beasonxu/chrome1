// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_INTERNAL_DICTIONARY_DERIVED_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_INTERNAL_DICTIONARY_DERIVED_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_internal_dictionary.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

namespace blink {

class ExceptionState;

class  InternalDictionaryDerived : public InternalDictionary {
  
  public:
static InternalDictionaryDerived* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<InternalDictionaryDerived>(isolate);
}
static InternalDictionaryDerived* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  InternalDictionaryDerived(v8::Isolate* isolate);

bool hasDerivedStringMember() const {
  return has_derived_string_member_;
}
const String& derivedStringMember() const {
  DCHECK(hasDerivedStringMember());
return member_derived_string_member_;
}
String getDerivedStringMemberOr(const String& fallback_value) const;
String getDerivedStringMemberOr(String&& fallback_value) const;
void setDerivedStringMember(const String& value);
void setDerivedStringMember(String&& value);

bool hasDerivedStringMemberWithDefault() const {
  return true;
}
const String& derivedStringMemberWithDefault() const {
  return member_derived_string_member_with_default_;
}
void setDerivedStringMemberWithDefault(const String& value);
void setDerivedStringMemberWithDefault(String&& value);

bool hasRequiredBooleanMember() const {
  return true;
}
bool requiredBooleanMember() const {
  return member_required_boolean_member_;
}
void setRequiredBooleanMember(bool value) {
  member_required_boolean_member_ = value;
}




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_derived_string_member_ = false;

String member_derived_string_member_;
String member_derived_string_member_with_default_{"derivedDefaultStringValue"};
bool member_required_boolean_member_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_INTERNAL_DICTIONARY_DERIVED_H_
