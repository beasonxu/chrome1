// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/core/v8/v8_union_float32array_uint16array_uint8clampedarray.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"

namespace blink {



V8UnionFloat32ArrayOrUint16ArrayOrUint8ClampedArray* V8UnionFloat32ArrayOrUint16ArrayOrUint8ClampedArray::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  if (v8_value->IsUint16Array()) {
  auto&& blink_value = NativeValueTraits<NotShared<DOMUint16Array>>::NativeValue(isolate, v8_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionFloat32ArrayOrUint16ArrayOrUint8ClampedArray>(blink_value);
}
if (v8_value->IsUint8ClampedArray()) {
  auto&& blink_value = NativeValueTraits<NotShared<DOMUint8ClampedArray>>::NativeValue(isolate, v8_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionFloat32ArrayOrUint16ArrayOrUint8ClampedArray>(blink_value);
}
if (v8_value->IsFloat32Array()) {
  auto&& blink_value = NativeValueTraits<NotShared<DOMFloat32Array>>::NativeValue(isolate, v8_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionFloat32ArrayOrUint16ArrayOrUint8ClampedArray>(blink_value);
}
ThrowTypeErrorNotOfType(exception_state, UnionNameInIDL());
return nullptr;
}













v8::MaybeLocal<v8::Value> V8UnionFloat32ArrayOrUint16ArrayOrUint8ClampedArray::ToV8Value(ScriptState* script_state) const {
  switch (content_type_) {
  case ContentType::kFloat32Array: {
    return ToV8Traits<NotShared<DOMFloat32Array>>::ToV8(script_state, member_float32_array_);
  }
  case ContentType::kUint16Array: {
    return ToV8Traits<NotShared<DOMUint16Array>>::ToV8(script_state, member_uint16_array_);
  }
  case ContentType::kUint8ClampedArray: {
    return ToV8Traits<NotShared<DOMUint8ClampedArray>>::ToV8(script_state, member_uint8_clamped_array_);
  }
}

NOTREACHED();
return v8::MaybeLocal<v8::Value>();
}

void V8UnionFloat32ArrayOrUint16ArrayOrUint8ClampedArray::Trace(Visitor* visitor) const {
  TraceIfNeeded<NotShared<DOMFloat32Array>>::Trace(visitor, member_float32_array_);
TraceIfNeeded<NotShared<DOMUint16Array>>::Trace(visitor, member_uint16_array_);
TraceIfNeeded<NotShared<DOMUint8ClampedArray>>::Trace(visitor, member_uint8_clamped_array_);
bindings::UnionBase::Trace(visitor);
}

void V8UnionFloat32ArrayOrUint16ArrayOrUint8ClampedArray::Clear() {
  member_float32_array_.Clear();
member_uint16_array_.Clear();
member_uint8_clamped_array_.Clear();
}



}  // namespace blink
