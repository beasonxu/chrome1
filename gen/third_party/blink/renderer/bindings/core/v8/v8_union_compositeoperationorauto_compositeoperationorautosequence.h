// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_UNION_COMPOSITEOPERATIONORAUTO_COMPOSITEOPERATIONORAUTOSEQUENCE_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_UNION_COMPOSITEOPERATIONORAUTO_COMPOSITEOPERATIONORAUTOSEQUENCE_H_

#include "third_party/blink/renderer/bindings/core/v8/v8_composite_operation_or_auto.h"
#include "third_party/blink/renderer/core/core_export.h"
#include "third_party/blink/renderer/platform/bindings/union_base.h"
#include "third_party/blink/renderer/platform/heap/collection_support/heap_vector.h"

namespace blink {

class ExceptionState;

class CORE_EXPORT V8UnionCompositeOperationOrAutoOrCompositeOperationOrAutoSequence final : public bindings::UnionBase {
  
  public:
// The type of the content value of this IDL union.
enum class ContentType {
kCompositeOperationOrAuto, kCompositeOperationOrAutoSequence
};

static V8UnionCompositeOperationOrAutoOrCompositeOperationOrAutoSequence* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  V8UnionCompositeOperationOrAutoOrCompositeOperationOrAutoSequence(V8CompositeOperationOrAuto value) : content_type_(ContentType::kCompositeOperationOrAuto), member_composite_operation_or_auto_(value) {
  
}
explicit  V8UnionCompositeOperationOrAutoOrCompositeOperationOrAutoSequence(const Vector<V8CompositeOperationOrAuto>& value);
explicit  V8UnionCompositeOperationOrAutoOrCompositeOperationOrAutoSequence(Vector<V8CompositeOperationOrAuto>&& value);

// Returns the type of the content value.
ContentType GetContentType() const {
  return content_type_;
}

bool IsCompositeOperationOrAuto() const {
  return content_type_ == ContentType::kCompositeOperationOrAuto;
}
V8CompositeOperationOrAuto GetAsCompositeOperationOrAuto() const {
  DCHECK_EQ(content_type_, ContentType::kCompositeOperationOrAuto);
return member_composite_operation_or_auto_;
}
void Set(V8CompositeOperationOrAuto value) {
  Clear();
member_composite_operation_or_auto_ = value;
content_type_ = ContentType::kCompositeOperationOrAuto;
}

bool IsCompositeOperationOrAutoSequence() const {
  return content_type_ == ContentType::kCompositeOperationOrAutoSequence;
}
const Vector<V8CompositeOperationOrAuto>& GetAsCompositeOperationOrAutoSequence() const {
  DCHECK_EQ(content_type_, ContentType::kCompositeOperationOrAutoSequence);
return member_composite_operation_or_auto_sequence_;
}
void Set(const Vector<V8CompositeOperationOrAuto>& value);
void Set(Vector<V8CompositeOperationOrAuto>&& value);


v8::MaybeLocal<v8::Value> ToV8Value(ScriptState* script_state) const override;

void Trace(Visitor* visitor) const override;


  
  private:
void Clear();

static constexpr const char* UnionNameInIDL() {
  return "(CompositeOperationOrAuto or sequence<CompositeOperationOrAuto>)";
}

ContentType content_type_;

V8CompositeOperationOrAuto member_composite_operation_or_auto_{static_cast<V8CompositeOperationOrAuto::Enum>(0)};
Vector<V8CompositeOperationOrAuto> member_composite_operation_or_auto_sequence_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_CORE_V8_V8_UNION_COMPOSITEOPERATIONORAUTO_COMPOSITEOPERATIONORAUTOSEQUENCE_H_
