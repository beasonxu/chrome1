// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/core/v8/v8_input_event_init.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/core/clipboard/data_transfer.h"
#include "third_party/blink/renderer/core/dom/static_range.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



InputEventInit* InputEventInit::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  InputEventInit* dictionary = MakeGarbageCollected<InputEventInit>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "InputEventInit";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 InputEventInit::InputEventInit() {
  
}

 InputEventInit::InputEventInit(v8::Isolate* isolate) : UIEventInit(isolate) {
  
}



String InputEventInit::getDataOr(const String& fallback_value) const {
  if (!hasData()) {
  return fallback_value;
}
return member_data_;
}

String InputEventInit::getDataOr(String&& fallback_value) const {
  if (!hasData()) {
  return std::move(fallback_value);
}
return member_data_;
}

void InputEventInit::setData(const String& value) {
  member_data_ = value;
has_data_ = true;
}

void InputEventInit::setData(String&& value) {
  member_data_ = std::move(value);
has_data_ = true;
}











void InputEventInit::setInputType(const String& value) {
  member_input_type_ = value;
}

void InputEventInit::setInputType(String&& value) {
  member_input_type_ = std::move(value);
}









void InputEventInit::setTargetRanges(const HeapVector<Member<StaticRange>>& value) {
  member_target_ranges_ = value;
}

void InputEventInit::setTargetRanges(HeapVector<Member<StaticRange>>&& value) {
  member_target_ranges_ = std::move(value);
}




void InputEventInit::Trace(Visitor* visitor) const {
  TraceIfNeeded<String>::Trace(visitor, member_data_);
TraceIfNeeded<Member<DataTransfer>>::Trace(visitor, member_data_transfer_);
TraceIfNeeded<String>::Trace(visitor, member_input_type_);
TraceIfNeeded<bool>::Trace(visitor, member_is_composing_);
TraceIfNeeded<HeapVector<Member<StaticRange>>>::Trace(visitor, member_target_ranges_);
UIEventInit::Trace(visitor);
}

bool InputEventInit::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  if (!UIEventInit::FillV8ObjectWithMembers(script_state, v8_dictionary)) {
  return false;
}

v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasData()) {
  if (!ToV8Traits<IDLNullable<IDLString>>::ToV8(script_state, member_data_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDataTransfer()) {
  if (!ToV8Traits<IDLNullable<DataTransfer>>::ToV8(script_state, member_data_transfer_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasInputType()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_input_type_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasIsComposing()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_is_composing_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasTargetRanges()) {
  if (!ToV8Traits<IDLSequence<StaticRange>>::ToV8(script_state, member_target_ranges_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void InputEventInit::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  UIEventInit::FillMembersFromV8Object(isolate, v8_dictionary, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

const char* const class_like_name = "InputEventInit";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("data");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLNullable<IDLString>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_data_, member_data_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("dataTransfer");
if (!bindings::GetDictionaryMemberFromV8Object<IDLNullable<DataTransfer>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_data_transfer_, member_data_transfer_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("inputType");
bool fallback_presence_var;
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), fallback_presence_var, member_input_type_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("isComposing");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), fallback_presence_var, member_is_composing_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("targetRanges");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<StaticRange>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), fallback_presence_var, member_target_ranges_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> InputEventInit::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"data",
"dataTransfer",
"inputType",
"isComposing",
"targetRanges",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
