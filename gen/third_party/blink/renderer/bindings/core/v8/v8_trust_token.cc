// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/core/v8/v8_trust_token.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



TrustToken* TrustToken::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  TrustToken* dictionary = MakeGarbageCollected<TrustToken>(isolate);
if (!v8_value->IsObject()) {
  const char* const class_like_name = "TrustToken";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 TrustToken::TrustToken() {
  
}

 TrustToken::TrustToken(v8::Isolate* isolate) {
  
}



Vector<String> TrustToken::getAdditionalSignedHeadersOr(const Vector<String>& fallback_value) const {
  if (!hasAdditionalSignedHeaders()) {
  return fallback_value;
}
return member_additional_signed_headers_;
}

Vector<String> TrustToken::getAdditionalSignedHeadersOr(Vector<String>&& fallback_value) const {
  if (!hasAdditionalSignedHeaders()) {
  return std::move(fallback_value);
}
return member_additional_signed_headers_;
}

void TrustToken::setAdditionalSignedHeaders(const Vector<String>& value) {
  member_additional_signed_headers_ = value;
has_additional_signed_headers_ = true;
}

void TrustToken::setAdditionalSignedHeaders(Vector<String>&& value) {
  member_additional_signed_headers_ = std::move(value);
has_additional_signed_headers_ = true;
}




String TrustToken::getAdditionalSigningDataOr(const String& fallback_value) const {
  if (!hasAdditionalSigningData()) {
  return fallback_value;
}
return member_additional_signing_data_;
}

String TrustToken::getAdditionalSigningDataOr(String&& fallback_value) const {
  if (!hasAdditionalSigningData()) {
  return std::move(fallback_value);
}
return member_additional_signing_data_;
}

void TrustToken::setAdditionalSigningData(const String& value) {
  member_additional_signing_data_ = value;
has_additional_signing_data_ = true;
}

void TrustToken::setAdditionalSigningData(String&& value) {
  member_additional_signing_data_ = std::move(value);
has_additional_signing_data_ = true;
}









Vector<String> TrustToken::getIssuersOr(const Vector<String>& fallback_value) const {
  if (!hasIssuers()) {
  return fallback_value;
}
return member_issuers_;
}

Vector<String> TrustToken::getIssuersOr(Vector<String>&& fallback_value) const {
  if (!hasIssuers()) {
  return std::move(fallback_value);
}
return member_issuers_;
}

void TrustToken::setIssuers(const Vector<String>& value) {
  member_issuers_ = value;
has_issuers_ = true;
}

void TrustToken::setIssuers(Vector<String>&& value) {
  member_issuers_ = std::move(value);
has_issuers_ = true;
}



















void TrustToken::Trace(Visitor* visitor) const {
  TraceIfNeeded<Vector<String>>::Trace(visitor, member_additional_signed_headers_);
TraceIfNeeded<String>::Trace(visitor, member_additional_signing_data_);
TraceIfNeeded<bool>::Trace(visitor, member_include_timestamp_header_);
TraceIfNeeded<Vector<String>>::Trace(visitor, member_issuers_);
TraceIfNeeded<V8RefreshPolicy>::Trace(visitor, member_refresh_policy_);
TraceIfNeeded<V8SignRequestData>::Trace(visitor, member_sign_request_data_);
TraceIfNeeded<V8OperationType>::Trace(visitor, member_type_);
bindings::DictionaryBase::Trace(visitor);
}

bool TrustToken::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasAdditionalSignedHeaders()) {
  if (!ToV8Traits<IDLSequence<IDLUSVString>>::ToV8(script_state, member_additional_signed_headers_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasAdditionalSigningData()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_additional_signing_data_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasIncludeTimestampHeader()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_include_timestamp_header_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasIssuers()) {
  if (!ToV8Traits<IDLSequence<IDLUSVString>>::ToV8(script_state, member_issuers_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasRefreshPolicy()) {
  if (!ToV8Traits<V8RefreshPolicy>::ToV8(script_state, member_refresh_policy_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasSignRequestData()) {
  if (!ToV8Traits<V8SignRequestData>::ToV8(script_state, member_sign_request_data_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasType()) {
  if (!ToV8Traits<V8OperationType>::ToV8(script_state, member_type_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void TrustToken::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "TrustToken";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("additionalSignedHeaders");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLUSVString>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_additional_signed_headers_, member_additional_signed_headers_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("additionalSigningData");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_additional_signing_data_, member_additional_signing_data_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("includeTimestampHeader");
bool fallback_presence_var;
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), fallback_presence_var, member_include_timestamp_header_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("issuers");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLUSVString>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_issuers_, member_issuers_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("refreshPolicy");
if (!bindings::GetDictionaryMemberFromV8Object<V8RefreshPolicy, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), fallback_presence_var, member_refresh_policy_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("signRequestData");
if (!bindings::GetDictionaryMemberFromV8Object<V8SignRequestData, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), fallback_presence_var, member_sign_request_data_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("type");
constexpr bool is_required = true;
if (!bindings::GetDictionaryMemberFromV8Object<V8OperationType, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), fallback_presence_var, member_type_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> TrustToken::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"additionalSignedHeaders",
"additionalSigningData",
"includeTimestampHeader",
"issuers",
"refreshPolicy",
"signRequestData",
"type",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
