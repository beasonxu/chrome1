// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/core/v8/v8_union_boolean_bytestringbytestringrecord.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"

namespace blink {



V8UnionBooleanOrByteStringByteStringRecord* V8UnionBooleanOrByteStringByteStringRecord::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  if (v8_value->IsObject()) {
  auto&& blink_value = NativeValueTraits<IDLRecord<IDLByteString, IDLByteString>>::NativeValue(isolate, v8_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionBooleanOrByteStringByteStringRecord>(std::move(blink_value));
}
if (v8_value->IsBoolean()) {
  auto&& blink_value = v8_value.As<v8::Boolean>()->Value();
return MakeGarbageCollected<V8UnionBooleanOrByteStringByteStringRecord>(blink_value);
}
{
  auto&& blink_value = NativeValueTraits<IDLBoolean>::NativeValue(isolate, v8_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionBooleanOrByteStringByteStringRecord>(blink_value);
}
}

 V8UnionBooleanOrByteStringByteStringRecord::V8UnionBooleanOrByteStringByteStringRecord(const Vector<std::pair<String, String>>& value) : content_type_(ContentType::kByteStringByteStringRecord), member_byte_string_byte_string_record_(value) {
  
}

 V8UnionBooleanOrByteStringByteStringRecord::V8UnionBooleanOrByteStringByteStringRecord(Vector<std::pair<String, String>>&& value) : content_type_(ContentType::kByteStringByteStringRecord), member_byte_string_byte_string_record_(std::move(value)) {
  
}







void V8UnionBooleanOrByteStringByteStringRecord::Set(const Vector<std::pair<String, String>>& value) {
  Clear();
member_byte_string_byte_string_record_ = value;
content_type_ = ContentType::kByteStringByteStringRecord;
}

void V8UnionBooleanOrByteStringByteStringRecord::Set(Vector<std::pair<String, String>>&& value) {
  Clear();
member_byte_string_byte_string_record_ = std::move(value);
content_type_ = ContentType::kByteStringByteStringRecord;
}


v8::MaybeLocal<v8::Value> V8UnionBooleanOrByteStringByteStringRecord::ToV8Value(ScriptState* script_state) const {
  switch (content_type_) {
  case ContentType::kBoolean: {
    return ToV8Traits<IDLBoolean>::ToV8(script_state, member_boolean_);
  }
  case ContentType::kByteStringByteStringRecord: {
    return ToV8Traits<IDLRecord<IDLByteString, IDLByteString>>::ToV8(script_state, member_byte_string_byte_string_record_);
  }
}

NOTREACHED();
return v8::MaybeLocal<v8::Value>();
}

void V8UnionBooleanOrByteStringByteStringRecord::Trace(Visitor* visitor) const {
  TraceIfNeeded<bool>::Trace(visitor, member_boolean_);
TraceIfNeeded<Vector<std::pair<String, String>>>::Trace(visitor, member_byte_string_byte_string_record_);
bindings::UnionBase::Trace(visitor);
}

void V8UnionBooleanOrByteStringByteStringRecord::Clear() {
  member_boolean_ = 0;
member_byte_string_byte_string_record_.clear();
}



}  // namespace blink
