// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_UNION_FLOAT_GPULOADOP_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_UNION_FLOAT_GPULOADOP_H_

#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_load_op.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/union_base.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT V8UnionFloatOrGPULoadOp final : public bindings::UnionBase {
  
  public:
// The type of the content value of this IDL union.
enum class ContentType {
kFloat, kGPULoadOp
};

static V8UnionFloatOrGPULoadOp* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  V8UnionFloatOrGPULoadOp(float value) : content_type_(ContentType::kFloat), member_float_(value) {
  
}
explicit  V8UnionFloatOrGPULoadOp(V8GPULoadOp value) : content_type_(ContentType::kGPULoadOp), member_gpu_load_op_(value) {
  
}

// Returns the type of the content value.
ContentType GetContentType() const {
  return content_type_;
}

bool IsFloat() const {
  return content_type_ == ContentType::kFloat;
}
float GetAsFloat() const {
  DCHECK_EQ(content_type_, ContentType::kFloat);
return member_float_;
}
void Set(float value) {
  Clear();
member_float_ = value;
content_type_ = ContentType::kFloat;
}

bool IsGPULoadOp() const {
  return content_type_ == ContentType::kGPULoadOp;
}
V8GPULoadOp GetAsGPULoadOp() const {
  DCHECK_EQ(content_type_, ContentType::kGPULoadOp);
return member_gpu_load_op_;
}
void Set(V8GPULoadOp value) {
  Clear();
member_gpu_load_op_ = value;
content_type_ = ContentType::kGPULoadOp;
}


v8::MaybeLocal<v8::Value> ToV8Value(ScriptState* script_state) const override;

void Trace(Visitor* visitor) const override;


  
  private:
void Clear();

static constexpr const char* UnionNameInIDL() {
  return "(GPULoadOp or float)";
}

ContentType content_type_;

float member_float_;
V8GPULoadOp member_gpu_load_op_{static_cast<V8GPULoadOp::Enum>(0)};


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_UNION_FLOAT_GPULOADOP_H_
