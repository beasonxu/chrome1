// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GPU_SHADER_MODULE_DESCRIPTOR_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GPU_SHADER_MODULE_DESCRIPTOR_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/core/v8/script_value.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_object_descriptor_base.h"
#include "third_party/blink/renderer/core/typed_arrays/array_buffer_view_helpers.h"
#include "third_party/blink/renderer/core/typed_arrays/dom_typed_array.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/heap/collection_support/heap_vector.h"
#include "third_party/blink/renderer/platform/heap/member.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

namespace blink {

class ExceptionState;
class GPUShaderModuleCompilationHint;
class V8UnionUSVStringOrUint32Array;

class MODULES_EXPORT GPUShaderModuleDescriptor : public GPUObjectDescriptorBase {
  
  public:
static GPUShaderModuleDescriptor* Create() {
  return MakeGarbageCollected<GPUShaderModuleDescriptor>();
}
static GPUShaderModuleDescriptor* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<GPUShaderModuleDescriptor>(isolate);
}
static GPUShaderModuleDescriptor* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  GPUShaderModuleDescriptor();
explicit  GPUShaderModuleDescriptor(v8::Isolate* isolate);

bool hasCode() const {
  return true;
}
V8UnionUSVStringOrUint32Array* code() const {
  return member_code_;
}
void setCode(V8UnionUSVStringOrUint32Array* value) {
  member_code_ = value;
DCHECK(member_code_);
}

bool hasHints() const {
  return has_hints_;
}
const HeapVector<std::pair<String, Member<GPUShaderModuleCompilationHint>>>& hints() const {
  DCHECK(hasHints());
return member_hints_;
}
HeapVector<std::pair<String, Member<GPUShaderModuleCompilationHint>>> getHintsOr(const HeapVector<std::pair<String, Member<GPUShaderModuleCompilationHint>>>& fallback_value) const;
HeapVector<std::pair<String, Member<GPUShaderModuleCompilationHint>>> getHintsOr(HeapVector<std::pair<String, Member<GPUShaderModuleCompilationHint>>>&& fallback_value) const;
void setHints(const HeapVector<std::pair<String, Member<GPUShaderModuleCompilationHint>>>& value);
void setHints(HeapVector<std::pair<String, Member<GPUShaderModuleCompilationHint>>>&& value);

bool hasSourceMap() const {
  return !member_source_map_.IsEmpty();
}
const ScriptValue& sourceMap() const {
  DCHECK(hasSourceMap());
return member_source_map_;
}
ScriptValue getSourceMapOr(const ScriptValue& fallback_value) const {
  if (!hasSourceMap()) {
  return fallback_value;
}
return member_source_map_;
}
void setSourceMap(const ScriptValue& value) {
  member_source_map_ = value;
DCHECK(member_source_map_.IsObject());
}




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_hints_ = false;

Member<V8UnionUSVStringOrUint32Array> member_code_;
HeapVector<std::pair<String, Member<GPUShaderModuleCompilationHint>>> member_hints_;
ScriptValue member_source_map_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GPU_SHADER_MODULE_DESCRIPTOR_H_
