// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_video_frame_buffer_init.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_dom_rect_init.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_plane_layout.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_video_color_space_init.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



VideoFrameBufferInit* VideoFrameBufferInit::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  VideoFrameBufferInit* dictionary = MakeGarbageCollected<VideoFrameBufferInit>(isolate);
if (!v8_value->IsObject()) {
  const char* const class_like_name = "VideoFrameBufferInit";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 VideoFrameBufferInit::VideoFrameBufferInit() {
  
}

 VideoFrameBufferInit::VideoFrameBufferInit(v8::Isolate* isolate) {
  
}














































HeapVector<Member<PlaneLayout>> VideoFrameBufferInit::getLayoutOr(const HeapVector<Member<PlaneLayout>>& fallback_value) const {
  if (!hasLayout()) {
  return fallback_value;
}
return member_layout_;
}

HeapVector<Member<PlaneLayout>> VideoFrameBufferInit::getLayoutOr(HeapVector<Member<PlaneLayout>>&& fallback_value) const {
  if (!hasLayout()) {
  return std::move(fallback_value);
}
return member_layout_;
}

void VideoFrameBufferInit::setLayout(const HeapVector<Member<PlaneLayout>>& value) {
  member_layout_ = value;
has_layout_ = true;
}

void VideoFrameBufferInit::setLayout(HeapVector<Member<PlaneLayout>>&& value) {
  member_layout_ = std::move(value);
has_layout_ = true;
}
















void VideoFrameBufferInit::Trace(Visitor* visitor) const {
  TraceIfNeeded<uint32_t>::Trace(visitor, member_coded_height_);
TraceIfNeeded<uint32_t>::Trace(visitor, member_coded_width_);
TraceIfNeeded<Member<VideoColorSpaceInit>>::Trace(visitor, member_color_space_);
TraceIfNeeded<uint32_t>::Trace(visitor, member_display_height_);
TraceIfNeeded<uint32_t>::Trace(visitor, member_display_width_);
TraceIfNeeded<uint64_t>::Trace(visitor, member_duration_);
TraceIfNeeded<V8VideoPixelFormat>::Trace(visitor, member_format_);
TraceIfNeeded<HeapVector<Member<PlaneLayout>>>::Trace(visitor, member_layout_);
TraceIfNeeded<int64_t>::Trace(visitor, member_timestamp_);
TraceIfNeeded<Member<DOMRectInit>>::Trace(visitor, member_visible_rect_);
bindings::DictionaryBase::Trace(visitor);
}

bool VideoFrameBufferInit::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasCodedHeight()) {
  if (!ToV8Traits<IDLUnsignedLongEnforceRange>::ToV8(script_state, member_coded_height_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasCodedWidth()) {
  if (!ToV8Traits<IDLUnsignedLongEnforceRange>::ToV8(script_state, member_coded_width_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasColorSpace()) {
  if (!ToV8Traits<VideoColorSpaceInit>::ToV8(script_state, member_color_space_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDisplayHeight()) {
  if (!ToV8Traits<IDLUnsignedLongEnforceRange>::ToV8(script_state, member_display_height_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDisplayWidth()) {
  if (!ToV8Traits<IDLUnsignedLongEnforceRange>::ToV8(script_state, member_display_width_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDuration()) {
  if (!ToV8Traits<IDLUnsignedLongLongEnforceRange>::ToV8(script_state, member_duration_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasFormat()) {
  if (!ToV8Traits<V8VideoPixelFormat>::ToV8(script_state, member_format_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasLayout()) {
  if (!ToV8Traits<IDLSequence<PlaneLayout>>::ToV8(script_state, member_layout_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasTimestamp()) {
  if (!ToV8Traits<IDLLongLongEnforceRange>::ToV8(script_state, member_timestamp_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[8].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasVisibleRect()) {
  if (!ToV8Traits<DOMRectInit>::ToV8(script_state, member_visible_rect_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[9].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void VideoFrameBufferInit::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "VideoFrameBufferInit";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("codedHeight");
constexpr bool is_required = true;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool fallback_presence_var;
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedLongEnforceRange, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), fallback_presence_var, member_coded_height_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("codedWidth");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedLongEnforceRange, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), fallback_presence_var, member_coded_width_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("colorSpace");
constexpr bool is_optional = false;
if (!bindings::GetDictionaryMemberFromV8Object<VideoColorSpaceInit, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_color_space_, member_color_space_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("displayHeight");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedLongEnforceRange, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_display_height_, member_display_height_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("displayWidth");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedLongEnforceRange, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_display_width_, member_display_width_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("duration");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedLongLongEnforceRange, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), has_duration_, member_duration_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("format");
if (!bindings::GetDictionaryMemberFromV8Object<V8VideoPixelFormat, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), fallback_presence_var, member_format_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("layout");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<PlaneLayout>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), has_layout_, member_layout_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("timestamp");
if (!bindings::GetDictionaryMemberFromV8Object<IDLLongLongEnforceRange, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[8].Get(isolate), fallback_presence_var, member_timestamp_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("visibleRect");
if (!bindings::GetDictionaryMemberFromV8Object<DOMRectInit, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[9].Get(isolate), has_visible_rect_, member_visible_rect_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> VideoFrameBufferInit::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"codedHeight",
"codedWidth",
"colorSpace",
"displayHeight",
"displayWidth",
"duration",
"format",
"layout",
"timestamp",
"visibleRect",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
