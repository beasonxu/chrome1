// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GPU_IMAGE_COPY_TEXTURE_TAGGED_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GPU_IMAGE_COPY_TEXTURE_TAGGED_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_predefined_color_space.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_image_copy_texture.h"
#include "third_party/blink/renderer/modules/modules_export.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT GPUImageCopyTextureTagged : public GPUImageCopyTexture {
  
  public:
static GPUImageCopyTextureTagged* Create() {
  return MakeGarbageCollected<GPUImageCopyTextureTagged>();
}
static GPUImageCopyTextureTagged* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<GPUImageCopyTextureTagged>(isolate);
}
static GPUImageCopyTextureTagged* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  GPUImageCopyTextureTagged();
explicit  GPUImageCopyTextureTagged(v8::Isolate* isolate);

bool hasColorSpace() const {
  return true;
}
V8PredefinedColorSpace colorSpace() const {
  return member_color_space_;
}
void setColorSpace(V8PredefinedColorSpace value) {
  member_color_space_ = value;
}
void setColorSpace(V8PredefinedColorSpace::Enum value) {
  member_color_space_ = V8PredefinedColorSpace(value);
}

bool hasPremultipliedAlpha() const {
  return true;
}
bool premultipliedAlpha() const {
  return member_premultiplied_alpha_;
}
void setPremultipliedAlpha(bool value) {
  member_premultiplied_alpha_ = value;
}


// Obsolete accessor functions
void setColorSpace(const String& value) {
  member_color_space_ = V8PredefinedColorSpace::Create(value).value();
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);



V8PredefinedColorSpace member_color_space_{V8PredefinedColorSpace::Enum::kSRGB};
bool member_premultiplied_alpha_{false};


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GPU_IMAGE_COPY_TEXTURE_TAGGED_H_
