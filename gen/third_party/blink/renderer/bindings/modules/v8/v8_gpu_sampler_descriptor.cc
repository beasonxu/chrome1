// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_sampler_descriptor.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



GPUSamplerDescriptor* GPUSamplerDescriptor::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  GPUSamplerDescriptor* dictionary = MakeGarbageCollected<GPUSamplerDescriptor>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "GPUSamplerDescriptor";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 GPUSamplerDescriptor::GPUSamplerDescriptor() {
  
}

 GPUSamplerDescriptor::GPUSamplerDescriptor(v8::Isolate* isolate) : GPUObjectDescriptorBase(isolate) {
  
}























































void GPUSamplerDescriptor::Trace(Visitor* visitor) const {
  TraceIfNeeded<V8GPUAddressMode>::Trace(visitor, member_address_mode_u_);
TraceIfNeeded<V8GPUAddressMode>::Trace(visitor, member_address_mode_v_);
TraceIfNeeded<V8GPUAddressMode>::Trace(visitor, member_address_mode_w_);
TraceIfNeeded<V8GPUCompareFunction>::Trace(visitor, member_compare_);
TraceIfNeeded<float>::Trace(visitor, member_lod_max_clamp_);
TraceIfNeeded<float>::Trace(visitor, member_lod_min_clamp_);
TraceIfNeeded<V8GPUFilterMode>::Trace(visitor, member_mag_filter_);
TraceIfNeeded<uint16_t>::Trace(visitor, member_max_anisotropy_);
TraceIfNeeded<V8GPUFilterMode>::Trace(visitor, member_min_filter_);
TraceIfNeeded<V8GPUFilterMode>::Trace(visitor, member_mipmap_filter_);
GPUObjectDescriptorBase::Trace(visitor);
}

bool GPUSamplerDescriptor::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  if (!GPUObjectDescriptorBase::FillV8ObjectWithMembers(script_state, v8_dictionary)) {
  return false;
}

v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasAddressModeU()) {
  if (!ToV8Traits<V8GPUAddressMode>::ToV8(script_state, member_address_mode_u_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasAddressModeV()) {
  if (!ToV8Traits<V8GPUAddressMode>::ToV8(script_state, member_address_mode_v_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasAddressModeW()) {
  if (!ToV8Traits<V8GPUAddressMode>::ToV8(script_state, member_address_mode_w_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasCompare()) {
  if (!ToV8Traits<V8GPUCompareFunction>::ToV8(script_state, member_compare_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasLodMaxClamp()) {
  if (!ToV8Traits<IDLFloat>::ToV8(script_state, member_lod_max_clamp_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasLodMinClamp()) {
  if (!ToV8Traits<IDLFloat>::ToV8(script_state, member_lod_min_clamp_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasMagFilter()) {
  if (!ToV8Traits<V8GPUFilterMode>::ToV8(script_state, member_mag_filter_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasMaxAnisotropy()) {
  if (!ToV8Traits<IDLUnsignedShortClamp>::ToV8(script_state, member_max_anisotropy_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasMinFilter()) {
  if (!ToV8Traits<V8GPUFilterMode>::ToV8(script_state, member_min_filter_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[8].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasMipmapFilter()) {
  if (!ToV8Traits<V8GPUFilterMode>::ToV8(script_state, member_mipmap_filter_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[9].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void GPUSamplerDescriptor::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  GPUObjectDescriptorBase::FillMembersFromV8Object(isolate, v8_dictionary, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

const char* const class_like_name = "GPUSamplerDescriptor";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("addressModeU");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool fallback_presence_var;
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<V8GPUAddressMode, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), fallback_presence_var, member_address_mode_u_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("addressModeV");
if (!bindings::GetDictionaryMemberFromV8Object<V8GPUAddressMode, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), fallback_presence_var, member_address_mode_v_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("addressModeW");
if (!bindings::GetDictionaryMemberFromV8Object<V8GPUAddressMode, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), fallback_presence_var, member_address_mode_w_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("compare");
if (!bindings::GetDictionaryMemberFromV8Object<V8GPUCompareFunction, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_compare_, member_compare_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("lodMaxClamp");
if (!bindings::GetDictionaryMemberFromV8Object<IDLFloat, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), fallback_presence_var, member_lod_max_clamp_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("lodMinClamp");
if (!bindings::GetDictionaryMemberFromV8Object<IDLFloat, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), fallback_presence_var, member_lod_min_clamp_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("magFilter");
if (!bindings::GetDictionaryMemberFromV8Object<V8GPUFilterMode, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), fallback_presence_var, member_mag_filter_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("maxAnisotropy");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedShortClamp, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), fallback_presence_var, member_max_anisotropy_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("minFilter");
if (!bindings::GetDictionaryMemberFromV8Object<V8GPUFilterMode, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[8].Get(isolate), fallback_presence_var, member_min_filter_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("mipmapFilter");
if (!bindings::GetDictionaryMemberFromV8Object<V8GPUFilterMode, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[9].Get(isolate), fallback_presence_var, member_mipmap_filter_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> GPUSamplerDescriptor::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"addressModeU",
"addressModeV",
"addressModeW",
"compare",
"lodMaxClamp",
"lodMinClamp",
"magFilter",
"maxAnisotropy",
"minFilter",
"mipmapFilter",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
