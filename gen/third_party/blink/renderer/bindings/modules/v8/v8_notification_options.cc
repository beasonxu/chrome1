// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_notification_options.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_unsignedlong_unsignedlongsequence.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_notification_action.h"
#include "third_party/blink/renderer/core/execution_context/execution_context.h"
#include "third_party/blink/renderer/modules/notifications/timestamp_trigger.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



NotificationOptions* NotificationOptions::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  NotificationOptions* dictionary = MakeGarbageCollected<NotificationOptions>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "NotificationOptions";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 NotificationOptions::NotificationOptions(v8::Isolate* isolate) : member_data_(isolate, v8::Null(isolate)) {
  
}



void NotificationOptions::setActions(const HeapVector<Member<NotificationAction>>& value) {
  member_actions_ = value;
}

void NotificationOptions::setActions(HeapVector<Member<NotificationAction>>&& value) {
  member_actions_ = std::move(value);
}




String NotificationOptions::getBadgeOr(const String& fallback_value) const {
  if (!hasBadge()) {
  return fallback_value;
}
return member_badge_;
}

String NotificationOptions::getBadgeOr(String&& fallback_value) const {
  if (!hasBadge()) {
  return std::move(fallback_value);
}
return member_badge_;
}

void NotificationOptions::setBadge(const String& value) {
  member_badge_ = value;
has_badge_ = true;
}

void NotificationOptions::setBadge(String&& value) {
  member_badge_ = std::move(value);
has_badge_ = true;
}




void NotificationOptions::setBody(const String& value) {
  member_body_ = value;
}

void NotificationOptions::setBody(String&& value) {
  member_body_ = std::move(value);
}














String NotificationOptions::getIconOr(const String& fallback_value) const {
  if (!hasIcon()) {
  return fallback_value;
}
return member_icon_;
}

String NotificationOptions::getIconOr(String&& fallback_value) const {
  if (!hasIcon()) {
  return std::move(fallback_value);
}
return member_icon_;
}

void NotificationOptions::setIcon(const String& value) {
  member_icon_ = value;
has_icon_ = true;
}

void NotificationOptions::setIcon(String&& value) {
  member_icon_ = std::move(value);
has_icon_ = true;
}




String NotificationOptions::getImageOr(const String& fallback_value) const {
  if (!hasImage()) {
  return fallback_value;
}
return member_image_;
}

String NotificationOptions::getImageOr(String&& fallback_value) const {
  if (!hasImage()) {
  return std::move(fallback_value);
}
return member_image_;
}

void NotificationOptions::setImage(const String& value) {
  member_image_ = value;
has_image_ = true;
}

void NotificationOptions::setImage(String&& value) {
  member_image_ = std::move(value);
has_image_ = true;
}




void NotificationOptions::setLang(const String& value) {
  member_lang_ = value;
}

void NotificationOptions::setLang(String&& value) {
  member_lang_ = std::move(value);
}


























void NotificationOptions::setTag(const String& value) {
  member_tag_ = value;
}

void NotificationOptions::setTag(String&& value) {
  member_tag_ = std::move(value);
}


















void NotificationOptions::Trace(Visitor* visitor) const {
  TraceIfNeeded<HeapVector<Member<NotificationAction>>>::Trace(visitor, member_actions_);
TraceIfNeeded<String>::Trace(visitor, member_badge_);
TraceIfNeeded<String>::Trace(visitor, member_body_);
TraceIfNeeded<ScriptValue>::Trace(visitor, member_data_);
TraceIfNeeded<V8NotificationDirection>::Trace(visitor, member_dir_);
TraceIfNeeded<String>::Trace(visitor, member_icon_);
TraceIfNeeded<String>::Trace(visitor, member_image_);
TraceIfNeeded<String>::Trace(visitor, member_lang_);
TraceIfNeeded<bool>::Trace(visitor, member_renotify_);
TraceIfNeeded<bool>::Trace(visitor, member_require_interaction_);
TraceIfNeeded<Member<TimestampTrigger>>::Trace(visitor, member_show_trigger_);
TraceIfNeeded<bool>::Trace(visitor, member_silent_);
TraceIfNeeded<String>::Trace(visitor, member_tag_);
TraceIfNeeded<uint64_t>::Trace(visitor, member_timestamp_);
TraceIfNeeded<Member<V8UnionUnsignedLongOrUnsignedLongSequence>>::Trace(visitor, member_vibrate_);
bindings::DictionaryBase::Trace(visitor);
}

bool NotificationOptions::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasActions()) {
  if (!ToV8Traits<IDLSequence<NotificationAction>>::ToV8(script_state, member_actions_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasBadge()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_badge_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasBody()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_body_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasData()) {
  if (!ToV8Traits<IDLAny>::ToV8(script_state, member_data_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDir()) {
  if (!ToV8Traits<V8NotificationDirection>::ToV8(script_state, member_dir_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasIcon()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_icon_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (RuntimeEnabledFeatures::NotificationContentImageEnabled()) {
  if (hasImage()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_image_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
if (hasLang()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_lang_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasRenotify()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_renotify_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[8].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasRequireInteraction()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_require_interaction_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[9].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
ExecutionContext* execution_context = ExecutionContext::From(current_context);
if (RuntimeEnabledFeatures::NotificationTriggersEnabled(execution_context)) {
  if (hasShowTrigger()) {
  if (!ToV8Traits<TimestampTrigger>::ToV8(script_state, member_show_trigger_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[10].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
if (hasSilent()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_silent_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[11].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasTag()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_tag_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[12].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasTimestamp()) {
  if (!ToV8Traits<IDLUnsignedLongLong>::ToV8(script_state, member_timestamp_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[13].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasVibrate()) {
  if (!ToV8Traits<V8UnionUnsignedLongOrUnsignedLongSequence>::ToV8(script_state, member_vibrate_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[14].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void NotificationOptions::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "NotificationOptions";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("actions");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool fallback_presence_var;
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<NotificationAction>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), fallback_presence_var, member_actions_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("badge");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_badge_, member_badge_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("body");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), fallback_presence_var, member_body_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("data");
if (!bindings::GetDictionaryMemberFromV8Object<IDLAny, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), fallback_presence_var, member_data_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("dir");
if (!bindings::GetDictionaryMemberFromV8Object<V8NotificationDirection, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), fallback_presence_var, member_dir_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("icon");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), has_icon_, member_icon_, try_block, exception_state)) {
  return;
}
if (RuntimeEnabledFeatures::NotificationContentImageEnabled()) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("image");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), has_image_, member_image_, try_block, exception_state)) {
  return;
}
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("lang");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), fallback_presence_var, member_lang_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("renotify");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[8].Get(isolate), fallback_presence_var, member_renotify_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("requireInteraction");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[9].Get(isolate), fallback_presence_var, member_require_interaction_, try_block, exception_state)) {
  return;
}
ExecutionContext* execution_context = ExecutionContext::From(current_context);
if (RuntimeEnabledFeatures::NotificationTriggersEnabled(execution_context)) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("showTrigger");
if (!bindings::GetDictionaryMemberFromV8Object<TimestampTrigger, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[10].Get(isolate), has_show_trigger_, member_show_trigger_, try_block, exception_state)) {
  return;
}
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("silent");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[11].Get(isolate), fallback_presence_var, member_silent_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("tag");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[12].Get(isolate), fallback_presence_var, member_tag_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("timestamp");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedLongLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[13].Get(isolate), has_timestamp_, member_timestamp_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("vibrate");
if (!bindings::GetDictionaryMemberFromV8Object<V8UnionUnsignedLongOrUnsignedLongSequence, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[14].Get(isolate), has_vibrate_, member_vibrate_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> NotificationOptions::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"actions",
"badge",
"body",
"data",
"dir",
"icon",
"image",
"lang",
"renotify",
"requireInteraction",
"showTrigger",
"silent",
"tag",
"timestamp",
"vibrate",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
