// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_window.h"

#include "third_party/blink/renderer/bindings/core/v8/binding_security.h"
#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_abort_controller.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_abort_signal.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_abstract_range.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_accessible_node.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_accessible_node_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_animation.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_animation_effect.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_animation_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_animation_playback_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_animation_timeline.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_attr.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_audio_track.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_audio_track_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_back_forward_cache_restoration.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_bar_prop.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_before_create_policy_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_before_unload_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_blob.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_byte_length_queuing_strategy.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_cdata_section.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_character_bounds_update_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_character_data.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_clipboard_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_close_watcher.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_comment.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_composition_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_computed_accessible_node.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_content_visibility_auto_state_changed_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_count_queuing_strategy.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_animation.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_color_value.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_condition_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_container_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_counter_style_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_font_face_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_font_palette_values_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_grouping_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_hsl.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_hwb.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_image_value.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_import_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_keyframe_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_keyframes_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_keyword_value.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_layer_block_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_layer_statement_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_math_clamp.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_math_invert.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_math_max.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_math_min.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_math_negate.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_math_product.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_math_sum.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_math_value.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_matrix_component.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_media_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_namespace_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_numeric_array.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_numeric_value.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_page_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_perspective.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_position_fallback_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_position_value.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_property_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_rgb.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_rotate.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_rule_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_scale.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_scope_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_scroll_timeline_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_skew.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_skew_x.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_skew_y.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_style_declaration.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_style_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_style_sheet.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_style_value.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_supports_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_transform_component.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_transform_value.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_transition.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_translate.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_try_rule.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_unit_value.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_unparsed_value.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_css_variable_reference_value.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_custom_element_registry.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_custom_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_custom_state_set.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_data_transfer.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_data_transfer_item.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_data_transfer_item_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_directive.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_document.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_document_fragment.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_document_timeline.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_document_transition.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_document_type.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_dom_exception.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_dom_implementation.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_dom_matrix.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_dom_matrix_read_only.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_dom_parser.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_dom_point.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_dom_point_read_only.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_dom_quad.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_dom_rect.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_dom_rect_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_dom_rect_read_only.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_dom_string_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_dom_string_map.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_dom_token_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_drag_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_edit_context.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_element_internals.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_error_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_event_counts.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_event_handler_non_null.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_event_target.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_external.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_feature_policy.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_fence.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_file.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_file_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_file_reader.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_focus_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_font_face.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_font_face_set.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_font_face_set_load_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_form_data.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_form_data_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_fragment_directive.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_frame_request_callback.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_function.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_hash_change_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_headers.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_highlight.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_highlight_pointer_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_highlight_registry.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_history.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_all_collection.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_anchor_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_area_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_audio_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_base_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_body_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_br_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_button_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_canvas_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_collection.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_data_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_data_list_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_details_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_dialog_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_directory_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_div_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_dlist_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_document.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_embed_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_fenced_frame_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_field_set_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_font_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_form_controls_collection.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_form_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_frame_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_frame_set_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_head_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_heading_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_hr_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_html_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_iframe_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_image_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_input_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_label_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_legend_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_li_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_link_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_map_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_marquee_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_media_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_menu_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_meta_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_meter_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_mod_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_object_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_olist_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_opt_group_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_option_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_options_collection.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_output_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_paragraph_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_param_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_picture_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_portal_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_pre_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_progress_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_quote_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_script_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_select_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_select_menu_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_slot_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_source_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_span_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_style_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_table_caption_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_table_cell_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_table_col_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_table_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_table_row_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_table_section_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_template_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_text_area_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_time_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_title_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_track_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_ulist_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_unknown_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_video_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_idle_deadline.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_idle_request_callback.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_idle_request_options.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_image_bitmap.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_image_bitmap_options.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_image_data.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_input_device_capabilities.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_input_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_intersection_observer.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_intersection_observer_entry.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_keyboard_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_keyframe_effect.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_largest_contentful_paint.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_layout_shift.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_layout_shift_attribution.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_location.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_mathml_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_media_error.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_media_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_media_query_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_media_query_list_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_memory_info.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_message_channel.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_message_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_message_port.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_mojo.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_mojo_handle.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_mojo_interface_interceptor.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_mojo_interface_request_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_mojo_watcher.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_mouse_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_mutation_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_mutation_observer.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_mutation_record.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_named_node_map.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_navigate_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_navigation.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_navigation_current_entry_change_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_navigation_destination.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_navigation_history_entry.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_navigation_transition.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_navigator.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_navigator_ua_data.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_node.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_node_filter.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_node_iterator.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_node_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_offscreen_canvas.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_overscroll_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_page_transition_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_pending_beacon.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_pending_get_beacon.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_pending_post_beacon.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_performance.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_performance_element_timing.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_performance_entry.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_performance_event_timing.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_performance_long_task_timing.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_performance_mark.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_performance_measure.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_performance_navigation.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_performance_navigation_timing.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_performance_observer.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_performance_observer_entry_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_performance_paint_timing.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_performance_resource_timing.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_performance_server_timing.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_performance_timing.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_pointer_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_pop_state_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_portal_activate_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_portal_host.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_processing_instruction.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_profiler.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_progress_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_promise_rejection_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_radio_node_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_range.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_readable_byte_stream_controller.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_readable_stream.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_readable_stream_byob_reader.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_readable_stream_byob_request.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_readable_stream_default_controller.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_readable_stream_default_reader.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_reporting_observer.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_request.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_request_init.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_resize_observer.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_resize_observer_entry.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_resize_observer_size.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_response.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_scheduling.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_screen.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_scroll_state.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_scroll_timeline.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_scroll_to_options.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_security_policy_violation_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_selection.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_selector_directive.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_set_return_value_for_core.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_shadow_root.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_shared_worker.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_static_range.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_structured_serialize_options.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_style_media.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_style_property_map.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_style_property_map_read_only.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_style_sheet.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_style_sheet_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_submit_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_a_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_angle.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_animate_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_animate_motion_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_animate_transform_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_animated_angle.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_animated_boolean.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_animated_enumeration.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_animated_integer.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_animated_length.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_animated_length_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_animated_number.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_animated_number_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_animated_preserve_aspect_ratio.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_animated_rect.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_animated_string.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_animated_transform_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_animation_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_circle_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_clip_path_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_component_transfer_function_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_defs_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_desc_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_ellipse_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_blend_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_color_matrix_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_component_transfer_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_composite_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_convolve_matrix_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_diffuse_lighting_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_displacement_map_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_distant_light_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_drop_shadow_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_flood_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_func_a_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_func_b_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_func_g_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_func_r_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_gaussian_blur_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_image_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_merge_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_merge_node_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_morphology_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_offset_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_point_light_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_specular_lighting_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_spot_light_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_tile_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_fe_turbulence_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_filter_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_foreign_object_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_g_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_geometry_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_gradient_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_graphics_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_image_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_length.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_length_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_line_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_linear_gradient_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_marker_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_mask_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_matrix.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_metadata_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_mpath_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_number.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_number_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_path_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_pattern_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_point.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_point_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_polygon_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_polyline_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_preserve_aspect_ratio.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_radial_gradient_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_rect.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_rect_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_script_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_set_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_stop_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_string_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_style_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_svg_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_switch_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_symbol_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_text_content_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_text_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_text_path_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_text_positioning_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_title_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_transform.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_transform_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_tspan_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_unit_types.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_use_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_view_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_task_attribution_timing.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_text.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_text_directive.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_text_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_text_format.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_text_format_update_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_text_metrics.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_text_track.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_text_track_cue.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_text_track_cue_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_text_track_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_text_update_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_time_ranges.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_touch.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_touch_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_touch_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_track_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_transform_stream.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_transform_stream_default_controller.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_transition_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_tree_walker.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_trusted_html.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_trusted_script.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_trusted_script_url.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_trusted_type_policy.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_trusted_type_policy_factory.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_ui_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_request_usvstring.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_url.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_url_search_params.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_user_activation.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_validity_state.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_video_track.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_video_track_list.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_view_timeline.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_visibility_state_entry.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_visual_viewport.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_void_function.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_vtt_cue.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_vtt_region.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_wheel_event.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_window_post_message_options.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_worker.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_worklet.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_writable_stream.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_writable_stream_default_controller.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_writable_stream_default_writer.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_xml_document.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_xml_http_request.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_xml_http_request_event_target.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_xml_http_request_upload.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_xml_serializer.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_xpath_evaluator.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_xpath_expression.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_xpath_result.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_xslt_processor.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_absolute_orientation_sensor.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_accelerometer.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_ambient_light_sensor.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_analyser_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_audio_buffer.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_audio_buffer_source_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_audio_context.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_audio_data.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_audio_decoder.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_audio_destination_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_audio_encoder.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_audio_listener.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_audio_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_audio_param.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_audio_param_map.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_audio_processing_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_audio_scheduled_source_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_audio_worklet.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_audio_worklet_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_authenticator_assertion_response.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_authenticator_attestation_response.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_authenticator_response.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_background_fetch_manager.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_background_fetch_record.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_background_fetch_registration.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_barcode_detector.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_base_audio_context.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_battery_manager.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_before_install_prompt_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_biquad_filter_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_blob_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_bluetooth.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_bluetooth_advertising_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_bluetooth_characteristic_properties.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_bluetooth_device.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_bluetooth_le_scan.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_bluetooth_manufacturer_data_map.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_bluetooth_remote_gatt_characteristic.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_bluetooth_remote_gatt_descriptor.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_bluetooth_remote_gatt_server.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_bluetooth_remote_gatt_service.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_bluetooth_service_data_map.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_bluetooth_uuid.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_broadcast_channel.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_browser_capture_media_stream_track.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_cache.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_cache_storage.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_canvas_capture_media_stream_track.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_canvas_filter.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_canvas_formatted_text.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_canvas_formatted_text_run.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_canvas_gradient.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_canvas_pattern.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_canvas_rendering_context_2d.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_channel_merger_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_channel_splitter_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_clipboard.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_clipboard_item.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_close_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_compression_stream.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_constant_source_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_contact_address.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_contacts_manager.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_content_index.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_convolver_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_cookie_change_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_cookie_store.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_cookie_store_manager.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_credential.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_credentials_container.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_crop_target.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_crypto.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_crypto_key.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_database.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_database_callback.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_decompression_stream.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_delay_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_delegated_ink_trail_presenter.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_deprecated_storage_info.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_device_motion_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_device_motion_event_acceleration.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_device_motion_event_rotation_rate.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_device_orientation_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_device_posture.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_directory_picker_options.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_dom_error.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_dynamics_compressor_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_encoded_audio_chunk.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_encoded_video_chunk.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_entry_callback.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_error_callback.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_event_source.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_eye_dropper.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_face_detector.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_federated_credential.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_file_system_callback.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_file_system_directory_handle.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_file_system_file_handle.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_file_system_handle.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_file_system_writable_file_stream.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_focusable_media_stream_track.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_font_data.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gain_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gamepad.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gamepad_axis_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gamepad_button.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gamepad_button_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gamepad_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gamepad_haptic_actuator.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_geolocation.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_geolocation_coordinates.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_geolocation_position.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_geolocation_position_error.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_adapter.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_adapter_info.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_bind_group.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_bind_group_layout.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_buffer.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_buffer_usage.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_canvas_context.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_color_write.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_command_buffer.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_command_encoder.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_compilation_info.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_compilation_message.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_compute_pass_encoder.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_compute_pipeline.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_device.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_device_lost_info.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_error.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_external_texture.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_map_mode.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_out_of_memory_error.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_pipeline_layout.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_query_set.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_queue.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_render_bundle.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_render_bundle_encoder.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_render_pass_encoder.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_render_pipeline.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_sampler.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_shader_module.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_shader_stage.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_supported_features.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_supported_limits.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_texture.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_texture_usage.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_texture_view.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_uncaptured_error_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_validation_error.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gravity_sensor.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gyroscope.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_handwriting_stroke.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_hid.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_hid_connection_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_hid_device.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_hid_input_report_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_idb_cursor.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_idb_cursor_with_value.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_idb_database.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_idb_factory.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_idb_index.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_idb_key_range.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_idb_object_store.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_idb_open_db_request.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_idb_request.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_idb_transaction.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_idb_version_change_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_identity_credential.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_idle_detector.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_iir_filter_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_image_bitmap_rendering_context.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_image_capture.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_image_decoder.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_image_track.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_image_track_list.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_ink.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_input_device_info.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_keyboard.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_keyboard_layout_map.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_launch_params.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_launch_queue.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_linear_acceleration_sensor.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_lock.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_lock_manager.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_magnetometer.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_capabilities.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_device_info.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_devices.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_element_audio_source_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_encrypted_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_key_message_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_key_session.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_key_status_map.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_key_system_access.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_keys.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_metadata.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_recorder.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_session.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_source.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_source_handle.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_stream.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_stream_audio_destination_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_stream_audio_source_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_stream_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_stream_track.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_stream_track_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_stream_track_generator.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_stream_track_processor.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_merchant_validation_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_midi_access.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_midi_connection_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_midi_input.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_midi_input_map.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_midi_message_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_midi_output.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_midi_output_map.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_midi_port.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_mime_type.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_mime_type_array.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_ml.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_ml_context.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_ml_graph_builder.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_ml_model_loader.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_ml_operand.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_ml_operator.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_native_io_file.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_native_io_file_manager.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_navigation_preload_manager.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_navigator_managed_data.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_ndef_message.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_ndef_reader.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_ndef_reading_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_ndef_record.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_network_information.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_notification.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_offline_audio_completion_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_offline_audio_context.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_offscreen_canvas_rendering_context_2d.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_open_file_picker_options.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_orientation_sensor.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_oscillator_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_otp_credential.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_overconstrained_error.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_panner_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_password_credential.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_path_2d.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_payment_address.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_payment_instruments.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_payment_manager.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_payment_method_change_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_payment_request.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_payment_request_update_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_payment_response.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_periodic_sync_manager.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_periodic_wave.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_permission_status.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_permissions.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_picture_in_picture_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_picture_in_picture_window.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_picture_in_picture_window_options.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_plugin.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_plugin_array.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_presentation.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_presentation_availability.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_presentation_connection.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_presentation_connection_available_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_presentation_connection_close_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_presentation_connection_list.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_presentation_receiver.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_presentation_request.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_pressure_observer.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_public_key_credential.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_push_manager.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_push_subscription.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_push_subscription_options.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_query_options.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_relative_orientation_sensor.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_remote_playback.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_certificate.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_data_channel.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_data_channel_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_dtls_transport.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_dtmf_sender.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_dtmf_tone_change_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_encoded_audio_frame.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_encoded_video_frame.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_error.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_error_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_ice_candidate.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_ice_transport.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_peer_connection.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_peer_connection_ice_error_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_peer_connection_ice_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_rtp_receiver.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_rtp_sender.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_rtp_transceiver.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_sctp_transport.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_session_description.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_stats_report.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_track_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_sanitizer.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_save_file_picker_options.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_scheduler.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_screen_detailed.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_screen_details.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_screen_orientation.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_script_processor_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_sensor.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_sensor_error_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_service_worker.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_service_worker_container.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_service_worker_registration.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_shared_storage.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_shared_storage_worklet.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_source_buffer.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_source_buffer_list.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_speech_grammar.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_speech_grammar_list.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_speech_recognition.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_speech_recognition_error_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_speech_recognition_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_speech_synthesis.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_speech_synthesis_error_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_speech_synthesis_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_speech_synthesis_utterance.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_stereo_panner_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_storage.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_storage_bucket.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_storage_bucket_manager.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_storage_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_storage_manager.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_sub_apps.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_subtle_crypto.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_sync_manager.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_task_controller.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_task_priority_change_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_task_signal.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_text_decoder.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_text_decoder_stream.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_text_detector.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_text_encoder.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_text_encoder_stream.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_timestamp_trigger.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_track_default.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_track_default_list.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_union_blob_htmlcanvaselement_htmlimageelement_htmlvideoelement_imagebitmap_imagedata_offscreencanvas_svgimageelement_videoframe.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_url_pattern.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_usb.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_usb_alternate_interface.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_usb_configuration.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_usb_connection_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_usb_device.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_usb_endpoint.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_usb_in_transfer_result.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_usb_interface.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_usb_isochronous_in_transfer_packet.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_usb_isochronous_in_transfer_result.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_usb_isochronous_out_transfer_packet.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_usb_isochronous_out_transfer_result.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_usb_out_transfer_result.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_video_color_space.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_video_decoder.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_video_encoder.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_video_frame.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_video_playback_quality.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_video_track_generator.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_virtual_keyboard.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_virtual_keyboard_geometry_change_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_wake_lock.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_wake_lock_sentinel.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_wave_shaper_node.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_web_transport.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_web_transport_bidirectional_stream.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_web_transport_datagram_duplex_stream.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_web_transport_error.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl2_rendering_context.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_active_info.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_buffer.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_context_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_framebuffer.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_program.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_query.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_renderbuffer.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_rendering_context.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_sampler.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_shader.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_shader_precision_format.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_sync.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_texture.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_transform_feedback.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_uniform_location.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_vertex_array_object.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_websocket.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_websocket_stream.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_worklet_animation.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_anchor.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_anchor_set.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_bounded_reference_space.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_camera.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_cpu_depth_information.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_depth_information.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_dom_overlay_state.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_frame.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_hand.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_hit_test_result.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_hit_test_source.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_image_tracking_result.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_input_source.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_input_source_array.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_input_source_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_input_sources_change_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_joint_pose.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_joint_space.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_layer.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_light_estimate.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_light_probe.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_plane.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_plane_set.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_pose.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_ray.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_reference_space.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_reference_space_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_render_state.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_rigid_transform.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_session.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_session_event.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_space.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_system.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_transient_input_hit_test_result.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_transient_input_hit_test_source.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_view.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_viewer_pose.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_viewport.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_webgl_binding.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_webgl_depth_information.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_webgl_layer.h"
#include "third_party/blink/renderer/core/context_features/context_feature_settings.h"
#include "third_party/blink/renderer/core/css/css_style_declaration.h"
#include "third_party/blink/renderer/core/css/media_query_list.h"
#include "third_party/blink/renderer/core/css/style_media.h"
#include "third_party/blink/renderer/core/dom/document.h"
#include "third_party/blink/renderer/core/dom/element.h"
#include "third_party/blink/renderer/core/dom/global_event_handlers.h"
#include "third_party/blink/renderer/core/editing/dom_selection.h"
#include "third_party/blink/renderer/core/execution_context/execution_context.h"
#include "third_party/blink/renderer/core/fetch/global_fetch.h"
#include "third_party/blink/renderer/core/fetch/request.h"
#include "third_party/blink/renderer/core/fileapi/blob.h"
#include "third_party/blink/renderer/core/frame/bar_prop.h"
#include "third_party/blink/renderer/core/frame/dactyloscoper.h"
#include "third_party/blink/renderer/core/frame/deprecation/deprecation.h"
#include "third_party/blink/renderer/core/frame/dom_visual_viewport.h"
#include "third_party/blink/renderer/core/frame/dom_window.h"
#include "third_party/blink/renderer/core/frame/external.h"
#include "third_party/blink/renderer/core/frame/history.h"
#include "third_party/blink/renderer/core/frame/local_dom_window.h"
#include "third_party/blink/renderer/core/frame/location.h"
#include "third_party/blink/renderer/core/frame/navigator.h"
#include "third_party/blink/renderer/core/frame/screen.h"
#include "third_party/blink/renderer/core/frame/web_feature.h"
#include "third_party/blink/renderer/core/frame/window_event_handlers.h"
#include "third_party/blink/renderer/core/frame/window_or_worker_global_scope.h"
#include "third_party/blink/renderer/core/html/canvas/html_canvas_element.h"
#include "third_party/blink/renderer/core/html/canvas/image_data.h"
#include "third_party/blink/renderer/core/html/custom/custom_element_registry.h"
#include "third_party/blink/renderer/core/html/fenced_frame/fence.h"
#include "third_party/blink/renderer/core/html/forms/html_option_element.h"
#include "third_party/blink/renderer/core/html/html_image_element.h"
#include "third_party/blink/renderer/core/html/media/html_audio_element.h"
#include "third_party/blink/renderer/core/html/media/html_video_element.h"
#include "third_party/blink/renderer/core/html/portal/dom_window_portal_host.h"
#include "third_party/blink/renderer/core/html/portal/portal_host.h"
#include "third_party/blink/renderer/core/imagebitmap/image_bitmap.h"
#include "third_party/blink/renderer/core/navigation_api/navigation_api.h"
#include "third_party/blink/renderer/core/offscreencanvas/offscreen_canvas.h"
#include "third_party/blink/renderer/core/svg/svg_image_element.h"
#include "third_party/blink/renderer/core/testing/origin_trials_test_global.h"
#include "third_party/blink/renderer/core/timing/dom_window_performance.h"
#include "third_party/blink/renderer/core/timing/performance.h"
#include "third_party/blink/renderer/core/trustedtypes/trusted_type_policy_factory.h"
#include "third_party/blink/renderer/modules/app_banner/dom_window_installation.h"
#include "third_party/blink/renderer/modules/cache_storage/cache_storage.h"
#include "third_party/blink/renderer/modules/cache_storage/global_cache_storage.h"
#include "third_party/blink/renderer/modules/canvas/imagebitmap/image_bitmap_factories.h"
#include "third_party/blink/renderer/modules/cookie_store/cookie_store.h"
#include "third_party/blink/renderer/modules/cookie_store/global_cookie_store.h"
#include "third_party/blink/renderer/modules/crypto/crypto.h"
#include "third_party/blink/renderer/modules/crypto/dom_window_crypto.h"
#include "third_party/blink/renderer/modules/device_orientation/dom_window_device_motion.h"
#include "third_party/blink/renderer/modules/device_orientation/dom_window_device_orientation.h"
#include "third_party/blink/renderer/modules/file_system_access/global_file_system_access.h"
#include "third_party/blink/renderer/modules/filesystem/dom_window_file_system.h"
#include "third_party/blink/renderer/modules/font_access/font_access.h"
#include "third_party/blink/renderer/modules/indexeddb/global_indexed_db.h"
#include "third_party/blink/renderer/modules/indexeddb/idb_factory.h"
#include "third_party/blink/renderer/modules/launch/dom_window_launch_queue.h"
#include "third_party/blink/renderer/modules/launch/launch_queue.h"
#include "third_party/blink/renderer/modules/lock_screen/lock_screen_data.h"
#include "third_party/blink/renderer/modules/native_io/global_native_io.h"
#include "third_party/blink/renderer/modules/native_io/native_io_file_manager.h"
#include "third_party/blink/renderer/modules/payments/goods/dom_window_digital_goods.h"
#include "third_party/blink/renderer/modules/picture_in_picture/window_picture_in_picture.h"
#include "third_party/blink/renderer/modules/quota/deprecated_storage_info.h"
#include "third_party/blink/renderer/modules/quota/dom_window_quota.h"
#include "third_party/blink/renderer/modules/scheduler/dom_scheduler.h"
#include "third_party/blink/renderer/modules/screen_enumeration/window_screens.h"
#include "third_party/blink/renderer/modules/shared_storage/shared_storage.h"
#include "third_party/blink/renderer/modules/shared_storage/window_shared_storage.h"
#include "third_party/blink/renderer/modules/speech/speech_synthesis.h"
#include "third_party/blink/renderer/modules/storage/dom_window_storage.h"
#include "third_party/blink/renderer/modules/storage/storage_area.h"
#include "third_party/blink/renderer/modules/webcodecs/video_frame.h"
#include "third_party/blink/renderer/modules/webdatabase/database.h"
#include "third_party/blink/renderer/modules/webdatabase/dom_window_web_database.h"
#include "third_party/blink/renderer/modules/xr/global_event_handlers_xr.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/idl_member_installer.h"
#include "third_party/blink/renderer/platform/bindings/runtime_call_stats.h"
#include "third_party/blink/renderer/platform/bindings/v8_binding.h"
#include "third_party/blink/renderer/platform/bindings/v8_cross_origin_property_support.h"
#include "third_party/blink/renderer/platform/bindings/v8_dom_activity_logger.h"
#include "third_party/blink/renderer/platform/bindings/v8_object_constructor.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_context_data.h"
#include "third_party/blink/renderer/platform/instrumentation/use_counter.h"
#include "third_party/blink/renderer/platform/scheduler/public/cooperative_scheduling_manager.h"

namespace blink {



void V8Window::Impl::Init() {
  V8Window::install_interface_template_func_ = InstallInterfaceTemplate;
V8Window::install_unconditional_props_func_ = InstallUnconditionalProperties;
V8Window::install_context_independent_props_func_ = InstallContextIndependentProperties;
V8Window::install_context_dependent_props_func_ = InstallContextDependentProperties;
}

namespace  {

namespace v8_window {

void WindowAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_window_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.window.get");
v8::Local<v8::Object> v8_receiver = info.This();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "window";
blink_receiver->ReportCoopAccess(property_name);


auto&& return_value = blink_receiver->window();
bindings::V8SetReturnValue(info, return_value, blink_receiver, bindings::V8ReturnValue::kMaybeCrossOriginWindow);
}


void SelfAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_self_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.self.get");
v8::Local<v8::Object> v8_receiver = info.This();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "self";
blink_receiver->ReportCoopAccess(property_name);


auto&& return_value = blink_receiver->self();
bindings::V8SetReturnValue(info, return_value, blink_receiver, bindings::V8ReturnValue::kMaybeCrossOriginWindow);
}

void SelfAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_self_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.self.set");

v8::Isolate* isolate = info.GetIsolate();
const char* const property_name = "self";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void DocumentAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_document_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.document.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->document();
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}


void NameAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_name_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.name.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->name();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void NameAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_name_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.name.set");



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
const char* const property_name = "name";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setName(arg1_value);

}

void LocationAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_location_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.location.get");
v8::Local<v8::Object> v8_receiver = info.This();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "location";
blink_receiver->ReportCoopAccess(property_name);

V8Window::LocationAttributeGetterCustom(info);
}

void LocationAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_location_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.location.set");

v8::Isolate* isolate = info.GetIsolate();
const char* const property_name = "location";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [PutForwards]
v8::Local<v8::Value> target;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
if (!v8_receiver->Get(current_context, V8AtomicString(isolate, property_name)).ToLocal(&target)) {
  return;
}
if (!target->IsObject()) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError("The attribute value is not an object");
return;
}
bool did_set;
v8::Local<v8::Value> v8_property_value = info[0];
if (!target.As<v8::Object>()->Set(current_context, V8AtomicString(isolate, "href"), v8_property_value).To(&did_set)) {{
  return;
}}
}

void CustomElementsAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_customElements_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.customElements.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
auto&& return_value = blink_receiver->customElements(script_state);
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}


void HistoryAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_history_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.history.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->history();
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}


void LocationbarAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_locationbar_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.locationbar.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kBarPropLocationbar);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->locationbar();
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void LocationbarAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_locationbar_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.locationbar.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kBarPropLocationbar);

const char* const property_name = "locationbar";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void MenubarAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_menubar_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.menubar.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kBarPropMenubar);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->menubar();
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void MenubarAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_menubar_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.menubar.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kBarPropMenubar);

const char* const property_name = "menubar";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void PersonalbarAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_personalbar_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.personalbar.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kBarPropPersonalbar);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->personalbar();
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void PersonalbarAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_personalbar_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.personalbar.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kBarPropPersonalbar);

const char* const property_name = "personalbar";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void ScrollbarsAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_scrollbars_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.scrollbars.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kBarPropScrollbars);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->scrollbars();
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void ScrollbarsAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_scrollbars_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.scrollbars.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kBarPropScrollbars);

const char* const property_name = "scrollbars";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void StatusbarAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_statusbar_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.statusbar.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kBarPropStatusbar);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->statusbar();
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void StatusbarAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_statusbar_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.statusbar.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kBarPropStatusbar);

const char* const property_name = "statusbar";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void ToolbarAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_toolbar_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.toolbar.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kBarPropToolbar);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->toolbar();
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void ToolbarAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_toolbar_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.toolbar.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kBarPropToolbar);

const char* const property_name = "toolbar";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void StatusAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_status_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.status.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->status();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void StatusAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_status_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.status.set");



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
const char* const property_name = "status";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setStatus(arg1_value);

}

void ClosedAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_closed_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.closed.get");
v8::Local<v8::Object> v8_receiver = info.This();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "closed";
blink_receiver->ReportCoopAccess(property_name);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowClosed);


auto&& return_value = blink_receiver->closed();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<bool>());
}


void FramesAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_frames_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.frames.get");
v8::Local<v8::Object> v8_receiver = info.This();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "frames";
blink_receiver->ReportCoopAccess(property_name);


auto&& return_value = blink_receiver->frames();
bindings::V8SetReturnValue(info, return_value, blink_receiver, bindings::V8ReturnValue::kMaybeCrossOriginWindow);
}

void FramesAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_frames_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.frames.set");

v8::Isolate* isolate = info.GetIsolate();
const char* const property_name = "frames";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void LengthAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_length_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.length.get");
v8::Local<v8::Object> v8_receiver = info.This();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "length";
blink_receiver->ReportCoopAccess(property_name);


auto&& return_value = blink_receiver->length();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}

void LengthAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_length_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.length.set");

v8::Isolate* isolate = info.GetIsolate();
const char* const property_name = "length";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void TopAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_top_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.top.get");
v8::Local<v8::Object> v8_receiver = info.This();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "top";
blink_receiver->ReportCoopAccess(property_name);


auto&& return_value = blink_receiver->top();
bindings::V8SetReturnValue(info, return_value, blink_receiver, bindings::V8ReturnValue::kMaybeCrossOriginWindow);
}


void OpenerAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_opener_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.opener.get");
v8::Local<v8::Object> v8_receiver = info.This();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "opener";
blink_receiver->ReportCoopAccess(property_name);


auto&& return_value = blink_receiver->OpenerWithMetrics();
bindings::V8SetReturnValue(info, return_value, blink_receiver, bindings::V8ReturnValue::kMaybeCrossOriginWindow);
}

void OpenerAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_opener_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.opener.set");

v8::Local<v8::Value> v8_property_value = info[0];
V8Window::OpenerAttributeSetterCustom(v8_property_value, info);
}

void ParentAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_parent_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.parent.get");
v8::Local<v8::Object> v8_receiver = info.This();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "parent";
blink_receiver->ReportCoopAccess(property_name);


auto&& return_value = blink_receiver->parent();
bindings::V8SetReturnValue(info, return_value, blink_receiver, bindings::V8ReturnValue::kMaybeCrossOriginWindow);
}

void ParentAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_parent_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.parent.set");

v8::Isolate* isolate = info.GetIsolate();
const char* const property_name = "parent";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void FrameElementAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_frameElement_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.frameElement.get");

V8Window::FrameElementAttributeGetterCustom(info);
}


void NavigatorAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_navigator_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.navigator.get");
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
V8PerContextData* per_context_data = script_state->PerContextData();
// [LogActivity], [LogAllWorlds]
if (script_state->World().IsIsolatedWorld() && per_context_data && per_context_data->ActivityLogger()) { per_context_data->ActivityLogger()->LogGetter("Window.navigator"); }


LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->navigator();
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}


void OriginAgentClusterAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_originAgentCluster_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.originAgentCluster.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->originAgentCluster();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<bool>());
}


void OriginAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_origin_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.origin.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->origin();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void OriginAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_origin_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.origin.set");

v8::Isolate* isolate = info.GetIsolate();
const char* const property_name = "origin";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void ExternalAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_external_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.external.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->external();
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void ExternalAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_external_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.external.set");

v8::Isolate* isolate = info.GetIsolate();
const char* const property_name = "external";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void ScreenAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_screen_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.screen.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->screen();
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void ScreenAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_screen_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.screen.set");

v8::Isolate* isolate = info.GetIsolate();
const char* const property_name = "screen";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void InnerWidthAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_innerWidth_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.innerWidth.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowInnerWidth);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->innerWidth();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int32_t>());
// [HighEntropy=Direct]
Dactyloscoper::RecordDirectSurface(current_execution_context, WebFeature::kWindowInnerWidth, return_value);
}

void InnerWidthAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_innerWidth_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.innerWidth.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowInnerWidth);

const char* const property_name = "innerWidth";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void InnerHeightAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_innerHeight_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.innerHeight.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowInnerHeight);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->innerHeight();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int32_t>());
// [HighEntropy=Direct]
Dactyloscoper::RecordDirectSurface(current_execution_context, WebFeature::kWindowInnerHeight, return_value);
}

void InnerHeightAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_innerHeight_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.innerHeight.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowInnerHeight);

const char* const property_name = "innerHeight";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void ScrollXAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_scrollX_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.scrollX.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowScrollX);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->scrollX();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<double>());
// [HighEntropy=Direct]
Dactyloscoper::RecordDirectSurface(current_execution_context, WebFeature::kWindowScrollX, return_value);
}

void ScrollXAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_scrollX_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.scrollX.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowScrollX);

const char* const property_name = "scrollX";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void PageXOffsetAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_pageXOffset_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.pageXOffset.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowPageXOffset);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->pageXOffset();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<double>());
// [HighEntropy=Direct]
Dactyloscoper::RecordDirectSurface(current_execution_context, WebFeature::kWindowPageXOffset, return_value);
}

void PageXOffsetAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_pageXOffset_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.pageXOffset.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowPageXOffset);

const char* const property_name = "pageXOffset";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void ScrollYAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_scrollY_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.scrollY.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowScrollY);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->scrollY();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<double>());
// [HighEntropy=Direct]
Dactyloscoper::RecordDirectSurface(current_execution_context, WebFeature::kWindowScrollY, return_value);
}

void ScrollYAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_scrollY_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.scrollY.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowScrollY);

const char* const property_name = "scrollY";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void PageYOffsetAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_pageYOffset_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.pageYOffset.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowPageYOffset);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->pageYOffset();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<double>());
// [HighEntropy=Direct]
Dactyloscoper::RecordDirectSurface(current_execution_context, WebFeature::kWindowPageYOffset, return_value);
}

void PageYOffsetAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_pageYOffset_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.pageYOffset.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowPageYOffset);

const char* const property_name = "pageYOffset";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void VisualViewportAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_visualViewport_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.visualViewport.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->visualViewport();
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void VisualViewportAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_visualViewport_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.visualViewport.set");

v8::Isolate* isolate = info.GetIsolate();
const char* const property_name = "visualViewport";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void ScreenXAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_screenX_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.screenX.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowScreenX);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->screenX();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int32_t>());
// [HighEntropy=Direct]
Dactyloscoper::RecordDirectSurface(current_execution_context, WebFeature::kWindowScreenX, return_value);
}

void ScreenXAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_screenX_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.screenX.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowScreenX);

const char* const property_name = "screenX";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void ScreenYAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_screenY_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.screenY.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowScreenY);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->screenY();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int32_t>());
// [HighEntropy=Direct]
Dactyloscoper::RecordDirectSurface(current_execution_context, WebFeature::kWindowScreenY, return_value);
}

void ScreenYAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_screenY_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.screenY.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowScreenY);

const char* const property_name = "screenY";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void OuterWidthAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_outerWidth_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.outerWidth.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowOuterWidth);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->outerWidth();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int32_t>());
// [HighEntropy=Direct]
Dactyloscoper::RecordDirectSurface(current_execution_context, WebFeature::kWindowOuterWidth, return_value);
}

void OuterWidthAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_outerWidth_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.outerWidth.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowOuterWidth);

const char* const property_name = "outerWidth";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void OuterHeightAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_outerHeight_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.outerHeight.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowOuterHeight);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->outerHeight();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int32_t>());
// [HighEntropy=Direct]
Dactyloscoper::RecordDirectSurface(current_execution_context, WebFeature::kWindowOuterHeight, return_value);
}

void OuterHeightAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_outerHeight_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.outerHeight.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowOuterHeight);

const char* const property_name = "outerHeight";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void DevicePixelRatioAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_devicePixelRatio_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.devicePixelRatio.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowDevicePixelRatio);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->devicePixelRatio();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<double>());
// [HighEntropy=Direct]
Dactyloscoper::RecordDirectSurface(current_execution_context, WebFeature::kWindowDevicePixelRatio, return_value);
}

void DevicePixelRatioAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_devicePixelRatio_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.devicePixelRatio.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowDevicePixelRatio);

const char* const property_name = "devicePixelRatio";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void OnorientationchangeAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onorientationchange_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onorientationchange.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->onorientationchange();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnorientationchangeAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onorientationchange_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onorientationchange.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
blink_receiver->setOnorientationchange(event_handler);
}

void OrientationAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_orientation_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.orientation.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowOrientation);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->orientation();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int32_t>());
// [HighEntropy=Direct]
Dactyloscoper::RecordDirectSurface(current_execution_context, WebFeature::kWindowOrientation, return_value);
}


void EventAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_event_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.event.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowEvent);


v8::Local<v8::Value> v8_return_value;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->event(script_state);
if (!ToV8Traits<IDLAny>::ToV8(script_state, return_value).ToLocal(&v8_return_value)) {
  return;
}
bindings::V8SetReturnValue(info, v8_return_value);
}

void EventAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_event_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.event.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowEvent);

const char* const property_name = "event";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void ClientInformationAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_clientInformation_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.clientInformation.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowClientInformation);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->clientInformation();
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void ClientInformationAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_clientInformation_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.clientInformation.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowClientInformation);

const char* const property_name = "clientInformation";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void OffscreenBufferingAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_offscreenBuffering_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.offscreenBuffering.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowOffscreenBuffering);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->offscreenBuffering();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<bool>());
}

void OffscreenBufferingAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_offscreenBuffering_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.offscreenBuffering.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowOffscreenBuffering);

const char* const property_name = "offscreenBuffering";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void ScreenLeftAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_screenLeft_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.screenLeft.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowScreenLeft);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->screenLeft();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int32_t>());
// [HighEntropy=Direct]
Dactyloscoper::RecordDirectSurface(current_execution_context, WebFeature::kWindowScreenLeft, return_value);
}

void ScreenLeftAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_screenLeft_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.screenLeft.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowScreenLeft);

const char* const property_name = "screenLeft";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void ScreenTopAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_screenTop_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.screenTop.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowScreenTop);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->screenTop();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int32_t>());
// [HighEntropy=Direct]
Dactyloscoper::RecordDirectSurface(current_execution_context, WebFeature::kWindowScreenTop, return_value);
}

void ScreenTopAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_screenTop_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.screenTop.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowScreenTop);

const char* const property_name = "screenTop";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void DefaultStatusAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_defaultStatus_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.defaultStatus.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowDefaultStatus);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->defaultStatus();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void DefaultStatusAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_defaultStatus_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.defaultStatus.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowDefaultStatus);



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
const char* const property_name = "defaultStatus";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setDefaultStatus(arg1_value);

}

void DefaultstatusAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_defaultstatus_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.defaultstatus.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowDefaultstatus);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->defaultStatus();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void DefaultstatusAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_defaultstatus_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.defaultstatus.set");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowDefaultstatus);



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
v8::Local<v8::Value> v8_property_value = info[0];
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
const char* const property_name = "defaultstatus";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_value = NativeValueTraits<IDLString>::NativeValue(isolate, v8_property_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->setDefaultStatus(arg1_value);

}

void StyleMediaAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_styleMedia_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.styleMedia.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kStyleMedia);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->styleMedia();
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}


void OnsearchAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onsearch_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onsearch.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->onsearch();
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnsearchAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onsearch_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onsearch.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
blink_receiver->setOnsearch(event_handler);
}

void IsSecureContextAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_isSecureContext_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.isSecureContext.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->isSecureContext();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<bool>());
}


void TrustedTypesAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_trustedTypes_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.trustedTypes.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
auto&& return_value = blink_receiver->trustedTypes(script_state);
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}


void AnonymouslyFramedAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_anonymouslyFramed_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.anonymouslyFramed.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->anonymouslyFramed();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<bool>());
}


void FenceAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_fence_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.fence.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->fence();
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}


void PortalHostAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_portalHost_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.portalHost.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_PortalHost_AttributeGetter);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = DOMWindowPortalHost::portalHost(*blink_receiver);
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}


void NavigationAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_navigation_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.navigation.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = NavigationApi::navigation(*blink_receiver);
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void NavigationAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_navigation_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.navigation.set");

v8::Isolate* isolate = info.GetIsolate();
const char* const property_name = "navigation";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void PerformanceAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_performance_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.performance.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = DOMWindowPerformance::performance(*blink_receiver);
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void PerformanceAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_performance_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.performance.set");

v8::Isolate* isolate = info.GetIsolate();
const char* const property_name = "performance";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}

void TestOriginTrialGlobalAttributeAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_testOriginTrialGlobalAttribute_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.testOriginTrialGlobalAttribute.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = OriginTrialsTestGlobal::testOriginTrialGlobalAttribute(*blink_receiver);
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<bool>());
}


void OnappinstalledAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onappinstalled_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onappinstalled.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = DOMWindowInstallation::onappinstalled(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnappinstalledAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onappinstalled_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onappinstalled.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
DOMWindowInstallation::setOnappinstalled(*blink_receiver, event_handler);
}

void OnbeforeinstallpromptAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onbeforeinstallprompt_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onbeforeinstallprompt.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = DOMWindowInstallation::onbeforeinstallprompt(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnbeforeinstallpromptAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onbeforeinstallprompt_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onbeforeinstallprompt.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
DOMWindowInstallation::setOnbeforeinstallprompt(*blink_receiver, event_handler);
}

void CachesAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_caches_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.caches.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kGlobalCacheStorage);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeGet;
const char* const class_like_name = "Window";
const char* const property_name = "caches";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& return_value = GlobalCacheStorage::caches(*blink_receiver, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}


void CookieStoreAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_cookieStore_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.cookieStore.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalCookieStore::cookieStore(*blink_receiver);
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}


void CryptoAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_crypto_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.crypto.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = DOMWindowCrypto::crypto(*blink_receiver);
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}


void OndevicemotionAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondevicemotion_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondevicemotion.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = DOMWindowDeviceMotion::ondevicemotion(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OndevicemotionAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondevicemotion_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondevicemotion.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
DOMWindowDeviceMotion::setOndevicemotion(*blink_receiver, event_handler);
}

void OndeviceorientationAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondeviceorientation_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondeviceorientation.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = DOMWindowDeviceOrientation::ondeviceorientation(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OndeviceorientationAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondeviceorientation_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondeviceorientation.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
DOMWindowDeviceOrientation::setOndeviceorientation(*blink_receiver, event_handler);
}

void OndeviceorientationabsoluteAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondeviceorientationabsolute_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondeviceorientationabsolute.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = DOMWindowDeviceOrientation::ondeviceorientationabsolute(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OndeviceorientationabsoluteAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondeviceorientationabsolute_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondeviceorientationabsolute.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
DOMWindowDeviceOrientation::setOndeviceorientationabsolute(*blink_receiver, event_handler);
}

void IndexedDBAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_indexedDB_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.indexedDB.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalIndexedDB::indexedDB(*blink_receiver);
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}


void LaunchQueueAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_launchQueue_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.launchQueue.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = DOMWindowLaunchQueue::launchQueue(*blink_receiver);
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}


void StorageFoundationAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_storageFoundation_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.storageFoundation.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalNativeIO::storageFoundation(*blink_receiver);
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}


void WebkitStorageInfoAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_webkitStorageInfo_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.webkitStorageInfo.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [DeprecateAs]
Deprecation::CountDeprecation(current_execution_context, WebFeature::kPrefixedStorageInfo);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = DOMWindowQuota::webkitStorageInfo(*blink_receiver);
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}


void SharedStorageAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_sharedStorage_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.sharedStorage.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kSharedStorageAPI_SharedStorage_DOMReference);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowSharedStorage::sharedStorage(*blink_receiver);
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}


void SpeechSynthesisAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_speechSynthesis_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.speechSynthesis.get");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_SpeechSynthesis_AttributeGetter);


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = SpeechSynthesis::speechSynthesis(*blink_receiver);
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}


void SessionStorageAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_sessionStorage_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.sessionStorage.get");
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
V8PerContextData* per_context_data = script_state->PerContextData();
// [LogActivity], [LogAllWorlds]
if (script_state->World().IsIsolatedWorld() && per_context_data && per_context_data->ActivityLogger()) { per_context_data->ActivityLogger()->LogGetter("Window.sessionStorage"); }


LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeGet;
const char* const class_like_name = "Window";
const char* const property_name = "sessionStorage";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& return_value = DOMWindowStorage::sessionStorage(*blink_receiver, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}


void LocalStorageAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_localStorage_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.localStorage.get");
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
V8PerContextData* per_context_data = script_state->PerContextData();
// [LogActivity], [LogAllWorlds]
if (script_state->World().IsIsolatedWorld() && per_context_data && per_context_data->ActivityLogger()) { per_context_data->ActivityLogger()->LogGetter("Window.localStorage"); }


LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeGet;
const char* const class_like_name = "Window";
const char* const property_name = "localStorage";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& return_value = DOMWindowStorage::localStorage(*blink_receiver, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}


void OnbeforexrselectAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onbeforexrselect_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onbeforexrselect.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlersXR::onbeforexrselect(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnbeforexrselectAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onbeforexrselect_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onbeforexrselect.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlersXR::setOnbeforexrselect(*blink_receiver, event_handler);
}

void OnabortAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onabort_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onabort.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onabort(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnabortAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onabort_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onabort.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnabort(*blink_receiver, event_handler);
}

void OnbeforeinputAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onbeforeinput_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onbeforeinput.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onbeforeinput(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnbeforeinputAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onbeforeinput_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onbeforeinput.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnbeforeinput(*blink_receiver, event_handler);
}

void OnbeforematchAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onbeforematch_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onbeforematch.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onbeforematch(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnbeforematchAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onbeforematch_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onbeforematch.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnbeforematch(*blink_receiver, event_handler);
}

void OnblurAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onblur_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onblur.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onblur(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnblurAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onblur_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onblur.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnblur(*blink_receiver, event_handler);
}

void OncancelAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_oncancel_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.oncancel.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::oncancel(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OncancelAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_oncancel_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.oncancel.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOncancel(*blink_receiver, event_handler);
}

void OncanplayAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_oncanplay_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.oncanplay.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::oncanplay(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OncanplayAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_oncanplay_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.oncanplay.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOncanplay(*blink_receiver, event_handler);
}

void OncanplaythroughAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_oncanplaythrough_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.oncanplaythrough.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::oncanplaythrough(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OncanplaythroughAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_oncanplaythrough_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.oncanplaythrough.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOncanplaythrough(*blink_receiver, event_handler);
}

void OnchangeAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onchange_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onchange.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onchange(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnchangeAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onchange_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onchange.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnchange(*blink_receiver, event_handler);
}

void OnclickAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onclick_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onclick.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onclick(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnclickAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onclick_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onclick.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnclick(*blink_receiver, event_handler);
}

void OncloseAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onclose_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onclose.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onclose(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OncloseAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onclose_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onclose.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnclose(*blink_receiver, event_handler);
}

void OncontentvisibilityautostatechangedAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_oncontentvisibilityautostatechanged_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.oncontentvisibilityautostatechanged.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::oncontentvisibilityautostatechanged(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OncontentvisibilityautostatechangedAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_oncontentvisibilityautostatechanged_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.oncontentvisibilityautostatechanged.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOncontentvisibilityautostatechanged(*blink_receiver, event_handler);
}

void OncontextlostAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_oncontextlost_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.oncontextlost.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::oncontextlost(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OncontextlostAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_oncontextlost_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.oncontextlost.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOncontextlost(*blink_receiver, event_handler);
}

void OncontextmenuAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_oncontextmenu_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.oncontextmenu.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::oncontextmenu(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OncontextmenuAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_oncontextmenu_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.oncontextmenu.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOncontextmenu(*blink_receiver, event_handler);
}

void OncontextrestoredAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_oncontextrestored_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.oncontextrestored.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::oncontextrestored(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OncontextrestoredAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_oncontextrestored_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.oncontextrestored.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOncontextrestored(*blink_receiver, event_handler);
}

void OncuechangeAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_oncuechange_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.oncuechange.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::oncuechange(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OncuechangeAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_oncuechange_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.oncuechange.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOncuechange(*blink_receiver, event_handler);
}

void OndblclickAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondblclick_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondblclick.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::ondblclick(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OndblclickAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondblclick_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondblclick.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOndblclick(*blink_receiver, event_handler);
}

void OndragAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondrag_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondrag.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::ondrag(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OndragAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondrag_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondrag.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOndrag(*blink_receiver, event_handler);
}

void OndragendAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondragend_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondragend.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::ondragend(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OndragendAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondragend_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondragend.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOndragend(*blink_receiver, event_handler);
}

void OndragenterAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondragenter_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondragenter.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::ondragenter(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OndragenterAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondragenter_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondragenter.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOndragenter(*blink_receiver, event_handler);
}

void OndragleaveAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondragleave_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondragleave.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::ondragleave(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OndragleaveAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondragleave_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondragleave.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOndragleave(*blink_receiver, event_handler);
}

void OndragoverAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondragover_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondragover.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::ondragover(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OndragoverAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondragover_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondragover.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOndragover(*blink_receiver, event_handler);
}

void OndragstartAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondragstart_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondragstart.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::ondragstart(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OndragstartAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondragstart_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondragstart.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOndragstart(*blink_receiver, event_handler);
}

void OndropAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondrop_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondrop.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::ondrop(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OndropAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondrop_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondrop.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOndrop(*blink_receiver, event_handler);
}

void OndurationchangeAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondurationchange_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondurationchange.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::ondurationchange(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OndurationchangeAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ondurationchange_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ondurationchange.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOndurationchange(*blink_receiver, event_handler);
}

void OnemptiedAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onemptied_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onemptied.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onemptied(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnemptiedAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onemptied_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onemptied.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnemptied(*blink_receiver, event_handler);
}

void OnendedAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onended_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onended.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onended(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnendedAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onended_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onended.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnended(*blink_receiver, event_handler);
}

void OnerrorAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onerror_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onerror.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onerror(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnerrorAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onerror_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onerror.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kOnErrorEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnerror(*blink_receiver, event_handler);
}

void OnfocusAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onfocus_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onfocus.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onfocus(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnfocusAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onfocus_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onfocus.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnfocus(*blink_receiver, event_handler);
}

void OnformdataAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onformdata_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onformdata.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onformdata(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnformdataAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onformdata_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onformdata.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnformdata(*blink_receiver, event_handler);
}

void OninputAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_oninput_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.oninput.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::oninput(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OninputAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_oninput_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.oninput.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOninput(*blink_receiver, event_handler);
}

void OninvalidAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_oninvalid_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.oninvalid.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::oninvalid(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OninvalidAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_oninvalid_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.oninvalid.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOninvalid(*blink_receiver, event_handler);
}

void OnkeydownAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onkeydown_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onkeydown.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onkeydown(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnkeydownAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onkeydown_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onkeydown.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnkeydown(*blink_receiver, event_handler);
}

void OnkeypressAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onkeypress_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onkeypress.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onkeypress(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnkeypressAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onkeypress_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onkeypress.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnkeypress(*blink_receiver, event_handler);
}

void OnkeyupAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onkeyup_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onkeyup.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onkeyup(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnkeyupAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onkeyup_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onkeyup.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnkeyup(*blink_receiver, event_handler);
}

void OnloadAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onload_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onload.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onload(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnloadAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onload_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onload.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnload(*blink_receiver, event_handler);
}

void OnloadeddataAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onloadeddata_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onloadeddata.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onloadeddata(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnloadeddataAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onloadeddata_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onloadeddata.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnloadeddata(*blink_receiver, event_handler);
}

void OnloadedmetadataAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onloadedmetadata_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onloadedmetadata.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onloadedmetadata(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnloadedmetadataAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onloadedmetadata_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onloadedmetadata.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnloadedmetadata(*blink_receiver, event_handler);
}

void OnloadstartAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onloadstart_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onloadstart.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onloadstart(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnloadstartAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onloadstart_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onloadstart.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnloadstart(*blink_receiver, event_handler);
}

void OnmousedownAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onmousedown_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onmousedown.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onmousedown(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnmousedownAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onmousedown_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onmousedown.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnmousedown(*blink_receiver, event_handler);
}

void OnmouseenterAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  // [LegacyLenientThis]
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
if (!V8Window::HasInstance(isolate, v8_receiver)) {
  return;
}

RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onmouseenter_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onmouseenter.get");


LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onmouseenter(*blink_receiver);
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnmouseenterAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  // [LegacyLenientThis]
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
if (!V8Window::HasInstance(isolate, v8_receiver)) {
  return;
}

RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onmouseenter_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onmouseenter.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnmouseenter(*blink_receiver, event_handler);
}

void OnmouseleaveAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  // [LegacyLenientThis]
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
if (!V8Window::HasInstance(isolate, v8_receiver)) {
  return;
}

RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onmouseleave_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onmouseleave.get");


LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onmouseleave(*blink_receiver);
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnmouseleaveAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  // [LegacyLenientThis]
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
if (!V8Window::HasInstance(isolate, v8_receiver)) {
  return;
}

RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onmouseleave_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onmouseleave.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnmouseleave(*blink_receiver, event_handler);
}

void OnmousemoveAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onmousemove_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onmousemove.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onmousemove(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnmousemoveAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onmousemove_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onmousemove.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnmousemove(*blink_receiver, event_handler);
}

void OnmouseoutAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onmouseout_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onmouseout.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onmouseout(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnmouseoutAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onmouseout_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onmouseout.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnmouseout(*blink_receiver, event_handler);
}

void OnmouseoverAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onmouseover_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onmouseover.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onmouseover(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnmouseoverAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onmouseover_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onmouseover.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnmouseover(*blink_receiver, event_handler);
}

void OnmouseupAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onmouseup_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onmouseup.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onmouseup(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnmouseupAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onmouseup_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onmouseup.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnmouseup(*blink_receiver, event_handler);
}

void OnmousewheelAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onmousewheel_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onmousewheel.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onmousewheel(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnmousewheelAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onmousewheel_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onmousewheel.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnmousewheel(*blink_receiver, event_handler);
}

void OnoverscrollAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onoverscroll_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onoverscroll.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onoverscroll(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnoverscrollAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onoverscroll_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onoverscroll.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnoverscroll(*blink_receiver, event_handler);
}

void OnpauseAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpause_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpause.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onpause(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnpauseAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpause_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpause.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnpause(*blink_receiver, event_handler);
}

void OnplayAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onplay_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onplay.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onplay(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnplayAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onplay_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onplay.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnplay(*blink_receiver, event_handler);
}

void OnplayingAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onplaying_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onplaying.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onplaying(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnplayingAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onplaying_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onplaying.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnplaying(*blink_receiver, event_handler);
}

void OnprogressAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onprogress_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onprogress.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onprogress(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnprogressAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onprogress_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onprogress.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnprogress(*blink_receiver, event_handler);
}

void OnratechangeAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onratechange_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onratechange.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onratechange(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnratechangeAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onratechange_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onratechange.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnratechange(*blink_receiver, event_handler);
}

void OnresetAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onreset_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onreset.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onreset(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnresetAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onreset_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onreset.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnreset(*blink_receiver, event_handler);
}

void OnresizeAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onresize_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onresize.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onresize(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnresizeAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onresize_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onresize.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnresize(*blink_receiver, event_handler);
}

void OnscrollAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onscroll_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onscroll.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onscroll(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnscrollAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onscroll_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onscroll.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnscroll(*blink_receiver, event_handler);
}

void OnscrollendAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onscrollend_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onscrollend.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onscrollend(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnscrollendAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onscrollend_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onscrollend.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnscrollend(*blink_receiver, event_handler);
}

void OnsecuritypolicyviolationAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onsecuritypolicyviolation_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onsecuritypolicyviolation.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onsecuritypolicyviolation(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnsecuritypolicyviolationAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onsecuritypolicyviolation_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onsecuritypolicyviolation.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnsecuritypolicyviolation(*blink_receiver, event_handler);
}

void OnseekedAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onseeked_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onseeked.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onseeked(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnseekedAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onseeked_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onseeked.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnseeked(*blink_receiver, event_handler);
}

void OnseekingAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onseeking_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onseeking.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onseeking(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnseekingAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onseeking_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onseeking.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnseeking(*blink_receiver, event_handler);
}

void OnselectAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onselect_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onselect.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onselect(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnselectAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onselect_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onselect.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnselect(*blink_receiver, event_handler);
}

void OnslotchangeAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onslotchange_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onslotchange.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onslotchange(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnslotchangeAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onslotchange_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onslotchange.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnslotchange(*blink_receiver, event_handler);
}

void OnstalledAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onstalled_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onstalled.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onstalled(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnstalledAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onstalled_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onstalled.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnstalled(*blink_receiver, event_handler);
}

void OnsubmitAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onsubmit_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onsubmit.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onsubmit(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnsubmitAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onsubmit_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onsubmit.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnsubmit(*blink_receiver, event_handler);
}

void OnsuspendAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onsuspend_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onsuspend.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onsuspend(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnsuspendAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onsuspend_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onsuspend.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnsuspend(*blink_receiver, event_handler);
}

void OntimeupdateAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontimeupdate_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontimeupdate.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::ontimeupdate(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OntimeupdateAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontimeupdate_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontimeupdate.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOntimeupdate(*blink_receiver, event_handler);
}

void OntoggleAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontoggle_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontoggle.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::ontoggle(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OntoggleAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontoggle_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontoggle.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOntoggle(*blink_receiver, event_handler);
}

void OnvolumechangeAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onvolumechange_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onvolumechange.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onvolumechange(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnvolumechangeAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onvolumechange_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onvolumechange.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnvolumechange(*blink_receiver, event_handler);
}

void OnwaitingAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onwaiting_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onwaiting.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onwaiting(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnwaitingAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onwaiting_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onwaiting.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnwaiting(*blink_receiver, event_handler);
}

void OnwebkitanimationendAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onwebkitanimationend_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onwebkitanimationend.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onwebkitanimationend(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnwebkitanimationendAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onwebkitanimationend_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onwebkitanimationend.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnwebkitanimationend(*blink_receiver, event_handler);
}

void OnwebkitanimationiterationAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onwebkitanimationiteration_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onwebkitanimationiteration.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onwebkitanimationiteration(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnwebkitanimationiterationAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onwebkitanimationiteration_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onwebkitanimationiteration.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnwebkitanimationiteration(*blink_receiver, event_handler);
}

void OnwebkitanimationstartAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onwebkitanimationstart_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onwebkitanimationstart.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onwebkitanimationstart(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnwebkitanimationstartAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onwebkitanimationstart_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onwebkitanimationstart.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnwebkitanimationstart(*blink_receiver, event_handler);
}

void OnwebkittransitionendAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onwebkittransitionend_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onwebkittransitionend.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onwebkittransitionend(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnwebkittransitionendAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onwebkittransitionend_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onwebkittransitionend.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnwebkittransitionend(*blink_receiver, event_handler);
}

void OnwheelAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onwheel_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onwheel.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onwheel(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnwheelAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onwheel_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onwheel.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnwheel(*blink_receiver, event_handler);
}

void OnauxclickAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onauxclick_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onauxclick.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onauxclick(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnauxclickAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onauxclick_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onauxclick.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnauxclick(*blink_receiver, event_handler);
}

void OngotpointercaptureAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ongotpointercapture_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ongotpointercapture.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::ongotpointercapture(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OngotpointercaptureAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ongotpointercapture_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ongotpointercapture.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOngotpointercapture(*blink_receiver, event_handler);
}

void OnlostpointercaptureAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onlostpointercapture_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onlostpointercapture.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onlostpointercapture(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnlostpointercaptureAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onlostpointercapture_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onlostpointercapture.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnlostpointercapture(*blink_receiver, event_handler);
}

void OnpointerdownAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpointerdown_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpointerdown.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onpointerdown(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnpointerdownAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpointerdown_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpointerdown.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnpointerdown(*blink_receiver, event_handler);
}

void OnpointermoveAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpointermove_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpointermove.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onpointermove(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnpointermoveAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpointermove_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpointermove.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnpointermove(*blink_receiver, event_handler);
}

void OnpointerrawupdateAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpointerrawupdate_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpointerrawupdate.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onpointerrawupdate(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnpointerrawupdateAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpointerrawupdate_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpointerrawupdate.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnpointerrawupdate(*blink_receiver, event_handler);
}

void OnpointerupAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpointerup_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpointerup.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onpointerup(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnpointerupAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpointerup_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpointerup.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnpointerup(*blink_receiver, event_handler);
}

void OnpointercancelAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpointercancel_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpointercancel.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onpointercancel(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnpointercancelAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpointercancel_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpointercancel.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnpointercancel(*blink_receiver, event_handler);
}

void OnpointeroverAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpointerover_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpointerover.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onpointerover(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnpointeroverAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpointerover_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpointerover.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnpointerover(*blink_receiver, event_handler);
}

void OnpointeroutAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpointerout_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpointerout.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onpointerout(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnpointeroutAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpointerout_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpointerout.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnpointerout(*blink_receiver, event_handler);
}

void OnpointerenterAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpointerenter_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpointerenter.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onpointerenter(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnpointerenterAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpointerenter_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpointerenter.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnpointerenter(*blink_receiver, event_handler);
}

void OnpointerleaveAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpointerleave_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpointerleave.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onpointerleave(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnpointerleaveAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpointerleave_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpointerleave.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnpointerleave(*blink_receiver, event_handler);
}

void OntouchcancelAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontouchcancel_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontouchcancel.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::ontouchcancel(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OntouchcancelAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontouchcancel_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontouchcancel.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOntouchcancel(*blink_receiver, event_handler);
}

void OntouchendAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontouchend_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontouchend.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::ontouchend(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OntouchendAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontouchend_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontouchend.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOntouchend(*blink_receiver, event_handler);
}

void OntouchmoveAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontouchmove_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontouchmove.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::ontouchmove(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OntouchmoveAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontouchmove_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontouchmove.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOntouchmove(*blink_receiver, event_handler);
}

void OntouchstartAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontouchstart_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontouchstart.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::ontouchstart(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OntouchstartAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontouchstart_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontouchstart.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOntouchstart(*blink_receiver, event_handler);
}

void OnselectstartAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onselectstart_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onselectstart.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onselectstart(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnselectstartAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onselectstart_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onselectstart.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnselectstart(*blink_receiver, event_handler);
}

void OnselectionchangeAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onselectionchange_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onselectionchange.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onselectionchange(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnselectionchangeAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onselectionchange_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onselectionchange.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnselectionchange(*blink_receiver, event_handler);
}

void OnanimationendAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onanimationend_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onanimationend.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onanimationend(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnanimationendAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onanimationend_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onanimationend.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnanimationend(*blink_receiver, event_handler);
}

void OnanimationiterationAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onanimationiteration_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onanimationiteration.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onanimationiteration(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnanimationiterationAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onanimationiteration_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onanimationiteration.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnanimationiteration(*blink_receiver, event_handler);
}

void OnanimationstartAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onanimationstart_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onanimationstart.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::onanimationstart(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnanimationstartAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onanimationstart_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onanimationstart.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOnanimationstart(*blink_receiver, event_handler);
}

void OntransitionrunAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontransitionrun_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontransitionrun.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::ontransitionrun(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OntransitionrunAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontransitionrun_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontransitionrun.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOntransitionrun(*blink_receiver, event_handler);
}

void OntransitionstartAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontransitionstart_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontransitionstart.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::ontransitionstart(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OntransitionstartAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontransitionstart_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontransitionstart.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOntransitionstart(*blink_receiver, event_handler);
}

void OntransitionendAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontransitionend_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontransitionend.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::ontransitionend(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OntransitionendAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontransitionend_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontransitionend.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOntransitionend(*blink_receiver, event_handler);
}

void OntransitioncancelAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontransitioncancel_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontransitioncancel.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = GlobalEventHandlers::ontransitioncancel(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OntransitioncancelAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontransitioncancel_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontransitioncancel.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
GlobalEventHandlers::setOntransitioncancel(*blink_receiver, event_handler);
}

void OnafterprintAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onafterprint_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onafterprint.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowEventHandlers::onafterprint(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnafterprintAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onafterprint_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onafterprint.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
WindowEventHandlers::setOnafterprint(*blink_receiver, event_handler);
}

void OnbeforeprintAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onbeforeprint_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onbeforeprint.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowEventHandlers::onbeforeprint(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnbeforeprintAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onbeforeprint_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onbeforeprint.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
WindowEventHandlers::setOnbeforeprint(*blink_receiver, event_handler);
}

void OnbeforeunloadAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onbeforeunload_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onbeforeunload.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowEventHandlers::onbeforeunload(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnbeforeunloadAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onbeforeunload_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onbeforeunload.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kOnBeforeUnloadEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
WindowEventHandlers::setOnbeforeunload(*blink_receiver, event_handler);
}

void OnhashchangeAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onhashchange_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onhashchange.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowEventHandlers::onhashchange(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnhashchangeAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onhashchange_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onhashchange.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
WindowEventHandlers::setOnhashchange(*blink_receiver, event_handler);
}

void OnlanguagechangeAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onlanguagechange_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onlanguagechange.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowEventHandlers::onlanguagechange(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnlanguagechangeAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onlanguagechange_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onlanguagechange.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
WindowEventHandlers::setOnlanguagechange(*blink_receiver, event_handler);
}

void OnmessageAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onmessage_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onmessage.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowEventHandlers::onmessage(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnmessageAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onmessage_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onmessage.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
WindowEventHandlers::setOnmessage(*blink_receiver, event_handler);
}

void OnmessageerrorAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onmessageerror_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onmessageerror.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowEventHandlers::onmessageerror(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnmessageerrorAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onmessageerror_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onmessageerror.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
WindowEventHandlers::setOnmessageerror(*blink_receiver, event_handler);
}

void OnofflineAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onoffline_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onoffline.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowEventHandlers::onoffline(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnofflineAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onoffline_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onoffline.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
WindowEventHandlers::setOnoffline(*blink_receiver, event_handler);
}

void OnonlineAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ononline_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ononline.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowEventHandlers::ononline(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnonlineAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ononline_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ononline.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
WindowEventHandlers::setOnonline(*blink_receiver, event_handler);
}

void OnpagehideAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpagehide_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpagehide.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowEventHandlers::onpagehide(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnpagehideAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpagehide_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpagehide.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
WindowEventHandlers::setOnpagehide(*blink_receiver, event_handler);
}

void OnpageshowAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpageshow_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpageshow.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowEventHandlers::onpageshow(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnpageshowAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpageshow_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpageshow.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
WindowEventHandlers::setOnpageshow(*blink_receiver, event_handler);
}

void OnpopstateAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpopstate_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpopstate.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowEventHandlers::onpopstate(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnpopstateAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onpopstate_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onpopstate.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
WindowEventHandlers::setOnpopstate(*blink_receiver, event_handler);
}

void OnportalactivateAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onportalactivate_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onportalactivate.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowEventHandlers::onportalactivate(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnportalactivateAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onportalactivate_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onportalactivate.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
WindowEventHandlers::setOnportalactivate(*blink_receiver, event_handler);
}

void OnrejectionhandledAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onrejectionhandled_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onrejectionhandled.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowEventHandlers::onrejectionhandled(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnrejectionhandledAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onrejectionhandled_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onrejectionhandled.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
WindowEventHandlers::setOnrejectionhandled(*blink_receiver, event_handler);
}

void OnstorageAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onstorage_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onstorage.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowEventHandlers::onstorage(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnstorageAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onstorage_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onstorage.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
WindowEventHandlers::setOnstorage(*blink_receiver, event_handler);
}

void OntimezonechangeAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontimezonechange_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontimezonechange.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowEventHandlers::ontimezonechange(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OntimezonechangeAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ontimezonechange_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.ontimezonechange.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
WindowEventHandlers::setOntimezonechange(*blink_receiver, event_handler);
}

void OnunhandledrejectionAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onunhandledrejection_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onunhandledrejection.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowEventHandlers::onunhandledrejection(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnunhandledrejectionAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onunhandledrejection_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onunhandledrejection.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
WindowEventHandlers::setOnunhandledrejection(*blink_receiver, event_handler);
}

void OnunloadAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onunload_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.onunload.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowEventHandlers::onunload(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, blink_receiver);
}

void OnunloadAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_onunload_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.onunload.set");

v8::Local<v8::Value> v8_property_value = info[0];
EventListener* event_handler = JSEventHandler::CreateOrNull(
    v8_property_value,
    JSEventHandler::HandlerType::kEventHandler);
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
WindowEventHandlers::setOnunload(*blink_receiver, event_handler);
}

void CrossOriginIsolatedAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_crossOriginIsolated_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.crossOriginIsolated.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowOrWorkerGlobalScope::crossOriginIsolated(*blink_receiver);
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<bool>());
}


void CrossOriginEmbedderPolicyAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_crossOriginEmbedderPolicy_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.crossOriginEmbedderPolicy.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowOrWorkerGlobalScope::crossOriginEmbedderPolicy(*blink_receiver);
v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}


void SchedulerAttributeGetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_scheduler_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.scheduler.get");


v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = DOMScheduler::scheduler(*blink_receiver);
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void SchedulerAttributeSetCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_scheduler_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.scheduler.set");

v8::Isolate* isolate = info.GetIsolate();
const char* const property_name = "scheduler";
if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}

// [Replaceable]
bool did_create;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
v8::Local<v8::Value> v8_property_value = info[0];
if (!v8_receiver->CreateDataProperty(current_context, V8AtomicString(isolate, property_name), v8_property_value).To(&did_create)) {
  return;
}
}



void AbortControllerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AbortController_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AbortController");

bindings::V8SetReturnValue(info, V8AbortController::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AbortSignalExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AbortSignal_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AbortSignal");

bindings::V8SetReturnValue(info, V8AbortSignal::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AbsoluteOrientationSensorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AbsoluteOrientationSensor_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AbsoluteOrientationSensor");

bindings::V8SetReturnValue(info, V8AbsoluteOrientationSensor::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AbstractRangeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AbstractRange_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AbstractRange");

bindings::V8SetReturnValue(info, V8AbstractRange::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AccelerometerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Accelerometer_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Accelerometer");

bindings::V8SetReturnValue(info, V8Accelerometer::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AccessibleNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AccessibleNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AccessibleNode");

bindings::V8SetReturnValue(info, V8AccessibleNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AccessibleNodeListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AccessibleNodeList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AccessibleNodeList");

bindings::V8SetReturnValue(info, V8AccessibleNodeList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AmbientLightSensorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AmbientLightSensor_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AmbientLightSensor");

bindings::V8SetReturnValue(info, V8AmbientLightSensor::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AnalyserNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AnalyserNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AnalyserNode");

bindings::V8SetReturnValue(info, V8AnalyserNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AnimationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Animation_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Animation");

bindings::V8SetReturnValue(info, V8Animation::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AnimationEffectExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AnimationEffect_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AnimationEffect");

bindings::V8SetReturnValue(info, V8AnimationEffect::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AnimationEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AnimationEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AnimationEvent");

bindings::V8SetReturnValue(info, V8AnimationEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AnimationPlaybackEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AnimationPlaybackEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AnimationPlaybackEvent");

bindings::V8SetReturnValue(info, V8AnimationPlaybackEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AnimationTimelineExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AnimationTimeline_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AnimationTimeline");

bindings::V8SetReturnValue(info, V8AnimationTimeline::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AttrExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Attr_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Attr");

bindings::V8SetReturnValue(info, V8Attr::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AudioBufferExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AudioBuffer_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AudioBuffer");

bindings::V8SetReturnValue(info, V8AudioBuffer::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AudioBufferSourceNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AudioBufferSourceNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AudioBufferSourceNode");

bindings::V8SetReturnValue(info, V8AudioBufferSourceNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AudioContextExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AudioContext_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AudioContext");

bindings::V8SetReturnValue(info, V8AudioContext::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AudioDataExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AudioData_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AudioData");

bindings::V8SetReturnValue(info, V8AudioData::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AudioDecoderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AudioDecoder_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AudioDecoder");

bindings::V8SetReturnValue(info, V8AudioDecoder::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AudioDestinationNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AudioDestinationNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AudioDestinationNode");

bindings::V8SetReturnValue(info, V8AudioDestinationNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AudioEncoderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AudioEncoder_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AudioEncoder");

bindings::V8SetReturnValue(info, V8AudioEncoder::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AudioListenerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AudioListener_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AudioListener");

bindings::V8SetReturnValue(info, V8AudioListener::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AudioNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AudioNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AudioNode");

bindings::V8SetReturnValue(info, V8AudioNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AudioParamExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AudioParam_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AudioParam");

bindings::V8SetReturnValue(info, V8AudioParam::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AudioParamMapExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AudioParamMap_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AudioParamMap");

bindings::V8SetReturnValue(info, V8AudioParamMap::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AudioProcessingEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AudioProcessingEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AudioProcessingEvent");

bindings::V8SetReturnValue(info, V8AudioProcessingEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AudioScheduledSourceNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AudioScheduledSourceNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AudioScheduledSourceNode");

bindings::V8SetReturnValue(info, V8AudioScheduledSourceNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AudioTrackExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AudioTrack_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AudioTrack");

bindings::V8SetReturnValue(info, V8AudioTrack::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AudioTrackListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AudioTrackList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AudioTrackList");

bindings::V8SetReturnValue(info, V8AudioTrackList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AudioWorkletExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AudioWorklet_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AudioWorklet");

bindings::V8SetReturnValue(info, V8AudioWorklet::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AudioWorkletNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AudioWorkletNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AudioWorkletNode");

bindings::V8SetReturnValue(info, V8AudioWorkletNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AuthenticatorAssertionResponseExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AuthenticatorAssertionResponse_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AuthenticatorAssertionResponse");

bindings::V8SetReturnValue(info, V8AuthenticatorAssertionResponse::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AuthenticatorAttestationResponseExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AuthenticatorAttestationResponse_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AuthenticatorAttestationResponse");

bindings::V8SetReturnValue(info, V8AuthenticatorAttestationResponse::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AuthenticatorResponseExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_AuthenticatorResponse_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.AuthenticatorResponse");

bindings::V8SetReturnValue(info, V8AuthenticatorResponse::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BackForwardCacheRestorationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BackForwardCacheRestoration_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BackForwardCacheRestoration");

bindings::V8SetReturnValue(info, V8BackForwardCacheRestoration::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BackgroundFetchManagerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BackgroundFetchManager_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BackgroundFetchManager");

bindings::V8SetReturnValue(info, V8BackgroundFetchManager::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BackgroundFetchRecordExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BackgroundFetchRecord_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BackgroundFetchRecord");

bindings::V8SetReturnValue(info, V8BackgroundFetchRecord::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BackgroundFetchRegistrationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BackgroundFetchRegistration_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BackgroundFetchRegistration");

bindings::V8SetReturnValue(info, V8BackgroundFetchRegistration::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BarPropExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BarProp_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BarProp");

bindings::V8SetReturnValue(info, V8BarProp::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BarcodeDetectorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BarcodeDetector_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BarcodeDetector");

bindings::V8SetReturnValue(info, V8BarcodeDetector::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BaseAudioContextExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BaseAudioContext_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BaseAudioContext");

bindings::V8SetReturnValue(info, V8BaseAudioContext::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BatteryManagerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BatteryManager_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BatteryManager");

bindings::V8SetReturnValue(info, V8BatteryManager::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BeforeCreatePolicyEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BeforeCreatePolicyEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BeforeCreatePolicyEvent");

bindings::V8SetReturnValue(info, V8BeforeCreatePolicyEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BeforeInstallPromptEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BeforeInstallPromptEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BeforeInstallPromptEvent");

bindings::V8SetReturnValue(info, V8BeforeInstallPromptEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BeforeUnloadEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BeforeUnloadEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BeforeUnloadEvent");

bindings::V8SetReturnValue(info, V8BeforeUnloadEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BiquadFilterNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BiquadFilterNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BiquadFilterNode");

bindings::V8SetReturnValue(info, V8BiquadFilterNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BlobExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Blob_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Blob");

bindings::V8SetReturnValue(info, V8Blob::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BlobEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BlobEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BlobEvent");

bindings::V8SetReturnValue(info, V8BlobEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BluetoothExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Bluetooth_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Bluetooth");

bindings::V8SetReturnValue(info, V8Bluetooth::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BluetoothAdvertisingEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BluetoothAdvertisingEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BluetoothAdvertisingEvent");

bindings::V8SetReturnValue(info, V8BluetoothAdvertisingEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BluetoothCharacteristicPropertiesExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BluetoothCharacteristicProperties_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BluetoothCharacteristicProperties");

bindings::V8SetReturnValue(info, V8BluetoothCharacteristicProperties::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BluetoothDeviceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BluetoothDevice_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BluetoothDevice");

bindings::V8SetReturnValue(info, V8BluetoothDevice::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BluetoothLEScanExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BluetoothLEScan_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BluetoothLEScan");

bindings::V8SetReturnValue(info, V8BluetoothLEScan::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BluetoothManufacturerDataMapExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BluetoothManufacturerDataMap_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BluetoothManufacturerDataMap");

bindings::V8SetReturnValue(info, V8BluetoothManufacturerDataMap::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BluetoothRemoteGATTCharacteristicExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BluetoothRemoteGATTCharacteristic_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BluetoothRemoteGATTCharacteristic");

bindings::V8SetReturnValue(info, V8BluetoothRemoteGATTCharacteristic::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BluetoothRemoteGATTDescriptorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BluetoothRemoteGATTDescriptor_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BluetoothRemoteGATTDescriptor");

bindings::V8SetReturnValue(info, V8BluetoothRemoteGATTDescriptor::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BluetoothRemoteGATTServerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BluetoothRemoteGATTServer_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BluetoothRemoteGATTServer");

bindings::V8SetReturnValue(info, V8BluetoothRemoteGATTServer::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BluetoothRemoteGATTServiceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BluetoothRemoteGATTService_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BluetoothRemoteGATTService");

bindings::V8SetReturnValue(info, V8BluetoothRemoteGATTService::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BluetoothServiceDataMapExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BluetoothServiceDataMap_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BluetoothServiceDataMap");

bindings::V8SetReturnValue(info, V8BluetoothServiceDataMap::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BluetoothUUIDExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BluetoothUUID_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BluetoothUUID");

bindings::V8SetReturnValue(info, V8BluetoothUUID::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BroadcastChannelExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BroadcastChannel_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BroadcastChannel");

bindings::V8SetReturnValue(info, V8BroadcastChannel::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void BrowserCaptureMediaStreamTrackExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_BrowserCaptureMediaStreamTrack_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.BrowserCaptureMediaStreamTrack");

bindings::V8SetReturnValue(info, V8BrowserCaptureMediaStreamTrack::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ByteLengthQueuingStrategyExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ByteLengthQueuingStrategy_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ByteLengthQueuingStrategy");

bindings::V8SetReturnValue(info, V8ByteLengthQueuingStrategy::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CDATASectionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CDATASection_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CDATASection");

bindings::V8SetReturnValue(info, V8CDATASection::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSS_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSS");

bindings::V8SetReturnValue(info, V8CSS::GetWrapperTypeInfo(), bindings::V8ReturnValue::kNamespaceObject);
}

void CSSAnimationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSAnimation_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSAnimation");

bindings::V8SetReturnValue(info, V8CSSAnimation::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSColorValueExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSColorValue_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSColorValue");

bindings::V8SetReturnValue(info, V8CSSColorValue::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSConditionRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSConditionRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSConditionRule");

bindings::V8SetReturnValue(info, V8CSSConditionRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSContainerRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSContainerRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSContainerRule");

bindings::V8SetReturnValue(info, V8CSSContainerRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSCounterStyleRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSCounterStyleRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSCounterStyleRule");

bindings::V8SetReturnValue(info, V8CSSCounterStyleRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSFontFaceRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSFontFaceRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSFontFaceRule");

bindings::V8SetReturnValue(info, V8CSSFontFaceRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSFontPaletteValuesRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSFontPaletteValuesRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSFontPaletteValuesRule");

bindings::V8SetReturnValue(info, V8CSSFontPaletteValuesRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSGroupingRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSGroupingRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSGroupingRule");

bindings::V8SetReturnValue(info, V8CSSGroupingRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSHSLExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSHSL_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSHSL");

bindings::V8SetReturnValue(info, V8CSSHSL::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSHWBExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSHWB_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSHWB");

bindings::V8SetReturnValue(info, V8CSSHWB::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSImageValueExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSImageValue_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSImageValue");

bindings::V8SetReturnValue(info, V8CSSImageValue::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSImportRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSImportRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSImportRule");

bindings::V8SetReturnValue(info, V8CSSImportRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSKeyframeRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSKeyframeRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSKeyframeRule");

bindings::V8SetReturnValue(info, V8CSSKeyframeRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSKeyframesRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSKeyframesRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSKeyframesRule");

bindings::V8SetReturnValue(info, V8CSSKeyframesRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSKeywordValueExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSKeywordValue_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSKeywordValue");

bindings::V8SetReturnValue(info, V8CSSKeywordValue::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSLayerBlockRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSLayerBlockRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSLayerBlockRule");

bindings::V8SetReturnValue(info, V8CSSLayerBlockRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSLayerStatementRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSLayerStatementRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSLayerStatementRule");

bindings::V8SetReturnValue(info, V8CSSLayerStatementRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSMathClampExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSMathClamp_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSMathClamp");

bindings::V8SetReturnValue(info, V8CSSMathClamp::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSMathInvertExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSMathInvert_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSMathInvert");

bindings::V8SetReturnValue(info, V8CSSMathInvert::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSMathMaxExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSMathMax_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSMathMax");

bindings::V8SetReturnValue(info, V8CSSMathMax::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSMathMinExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSMathMin_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSMathMin");

bindings::V8SetReturnValue(info, V8CSSMathMin::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSMathNegateExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSMathNegate_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSMathNegate");

bindings::V8SetReturnValue(info, V8CSSMathNegate::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSMathProductExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSMathProduct_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSMathProduct");

bindings::V8SetReturnValue(info, V8CSSMathProduct::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSMathSumExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSMathSum_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSMathSum");

bindings::V8SetReturnValue(info, V8CSSMathSum::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSMathValueExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSMathValue_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSMathValue");

bindings::V8SetReturnValue(info, V8CSSMathValue::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSMatrixComponentExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSMatrixComponent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSMatrixComponent");

bindings::V8SetReturnValue(info, V8CSSMatrixComponent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSMediaRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSMediaRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSMediaRule");

bindings::V8SetReturnValue(info, V8CSSMediaRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSNamespaceRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSNamespaceRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSNamespaceRule");

bindings::V8SetReturnValue(info, V8CSSNamespaceRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSNumericArrayExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSNumericArray_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSNumericArray");

bindings::V8SetReturnValue(info, V8CSSNumericArray::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSNumericValueExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSNumericValue_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSNumericValue");

bindings::V8SetReturnValue(info, V8CSSNumericValue::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSPageRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSPageRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSPageRule");

bindings::V8SetReturnValue(info, V8CSSPageRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSPerspectiveExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSPerspective_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSPerspective");

bindings::V8SetReturnValue(info, V8CSSPerspective::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSPositionFallbackRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSPositionFallbackRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSPositionFallbackRule");

bindings::V8SetReturnValue(info, V8CSSPositionFallbackRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSPositionValueExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSPositionValue_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSPositionValue");

bindings::V8SetReturnValue(info, V8CSSPositionValue::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSPropertyRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSPropertyRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSPropertyRule");

bindings::V8SetReturnValue(info, V8CSSPropertyRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSRGBExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSRGB_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSRGB");

bindings::V8SetReturnValue(info, V8CSSRGB::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSRotateExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSRotate_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSRotate");

bindings::V8SetReturnValue(info, V8CSSRotate::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSRule");

bindings::V8SetReturnValue(info, V8CSSRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSRuleListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSRuleList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSRuleList");

bindings::V8SetReturnValue(info, V8CSSRuleList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSScaleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSScale_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSScale");

bindings::V8SetReturnValue(info, V8CSSScale::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSScopeRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSScopeRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSScopeRule");

bindings::V8SetReturnValue(info, V8CSSScopeRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSScrollTimelineRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSScrollTimelineRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSScrollTimelineRule");

bindings::V8SetReturnValue(info, V8CSSScrollTimelineRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSSkewExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSSkew_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSSkew");

bindings::V8SetReturnValue(info, V8CSSSkew::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSSkewXExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSSkewX_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSSkewX");

bindings::V8SetReturnValue(info, V8CSSSkewX::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSSkewYExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSSkewY_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSSkewY");

bindings::V8SetReturnValue(info, V8CSSSkewY::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSStyleDeclarationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSStyleDeclaration_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSStyleDeclaration");

bindings::V8SetReturnValue(info, V8CSSStyleDeclaration::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSStyleRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSStyleRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSStyleRule");

bindings::V8SetReturnValue(info, V8CSSStyleRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSStyleSheetExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSStyleSheet_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSStyleSheet");

bindings::V8SetReturnValue(info, V8CSSStyleSheet::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSStyleValueExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSStyleValue_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSStyleValue");

bindings::V8SetReturnValue(info, V8CSSStyleValue::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSSupportsRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSSupportsRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSSupportsRule");

bindings::V8SetReturnValue(info, V8CSSSupportsRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSTransformComponentExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSTransformComponent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSTransformComponent");

bindings::V8SetReturnValue(info, V8CSSTransformComponent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSTransformValueExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSTransformValue_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSTransformValue");

bindings::V8SetReturnValue(info, V8CSSTransformValue::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSTransitionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSTransition_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSTransition");

bindings::V8SetReturnValue(info, V8CSSTransition::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSTranslateExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSTranslate_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSTranslate");

bindings::V8SetReturnValue(info, V8CSSTranslate::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSTryRuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSTryRule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSTryRule");

bindings::V8SetReturnValue(info, V8CSSTryRule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSUnitValueExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSUnitValue_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSUnitValue");

bindings::V8SetReturnValue(info, V8CSSUnitValue::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSUnparsedValueExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSUnparsedValue_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSUnparsedValue");

bindings::V8SetReturnValue(info, V8CSSUnparsedValue::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CSSVariableReferenceValueExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CSSVariableReferenceValue_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CSSVariableReferenceValue");

bindings::V8SetReturnValue(info, V8CSSVariableReferenceValue::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CacheExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Cache_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Cache");

bindings::V8SetReturnValue(info, V8Cache::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CacheStorageExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CacheStorage_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CacheStorage");

bindings::V8SetReturnValue(info, V8CacheStorage::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CanvasCaptureMediaStreamTrackExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CanvasCaptureMediaStreamTrack_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CanvasCaptureMediaStreamTrack");

bindings::V8SetReturnValue(info, V8CanvasCaptureMediaStreamTrack::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CanvasFilterExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CanvasFilter_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CanvasFilter");

bindings::V8SetReturnValue(info, V8CanvasFilter::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CanvasFormattedTextExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CanvasFormattedText_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CanvasFormattedText");

bindings::V8SetReturnValue(info, V8CanvasFormattedText::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CanvasFormattedTextRunExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CanvasFormattedTextRun_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CanvasFormattedTextRun");

bindings::V8SetReturnValue(info, V8CanvasFormattedTextRun::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CanvasGradientExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CanvasGradient_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CanvasGradient");

bindings::V8SetReturnValue(info, V8CanvasGradient::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CanvasPatternExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CanvasPattern_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CanvasPattern");

bindings::V8SetReturnValue(info, V8CanvasPattern::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CanvasRenderingContext2DExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CanvasRenderingContext2D_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CanvasRenderingContext2D");

bindings::V8SetReturnValue(info, V8CanvasRenderingContext2D::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ChannelMergerNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ChannelMergerNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ChannelMergerNode");

bindings::V8SetReturnValue(info, V8ChannelMergerNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ChannelSplitterNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ChannelSplitterNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ChannelSplitterNode");

bindings::V8SetReturnValue(info, V8ChannelSplitterNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CharacterBoundsUpdateEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CharacterBoundsUpdateEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CharacterBoundsUpdateEvent");

bindings::V8SetReturnValue(info, V8CharacterBoundsUpdateEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CharacterDataExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CharacterData_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CharacterData");

bindings::V8SetReturnValue(info, V8CharacterData::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ClipboardExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Clipboard_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Clipboard");

bindings::V8SetReturnValue(info, V8Clipboard::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ClipboardEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ClipboardEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ClipboardEvent");

bindings::V8SetReturnValue(info, V8ClipboardEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ClipboardItemExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ClipboardItem_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ClipboardItem");

bindings::V8SetReturnValue(info, V8ClipboardItem::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CloseEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CloseEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CloseEvent");

bindings::V8SetReturnValue(info, V8CloseEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CloseWatcherExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CloseWatcher_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CloseWatcher");

bindings::V8SetReturnValue(info, V8CloseWatcher::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CommentExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Comment_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Comment");

bindings::V8SetReturnValue(info, V8Comment::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CompositionEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CompositionEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CompositionEvent");

bindings::V8SetReturnValue(info, V8CompositionEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CompressionStreamExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CompressionStream_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CompressionStream");

bindings::V8SetReturnValue(info, V8CompressionStream::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ComputedAccessibleNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ComputedAccessibleNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ComputedAccessibleNode");

bindings::V8SetReturnValue(info, V8ComputedAccessibleNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ConstantSourceNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ConstantSourceNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ConstantSourceNode");

bindings::V8SetReturnValue(info, V8ConstantSourceNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ContactAddressExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ContactAddress_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ContactAddress");

bindings::V8SetReturnValue(info, V8ContactAddress::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ContactsManagerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ContactsManager_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ContactsManager");

bindings::V8SetReturnValue(info, V8ContactsManager::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ContentIndexExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ContentIndex_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ContentIndex");

bindings::V8SetReturnValue(info, V8ContentIndex::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ContentVisibilityAutoStateChangedEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ContentVisibilityAutoStateChangedEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ContentVisibilityAutoStateChangedEvent");

bindings::V8SetReturnValue(info, V8ContentVisibilityAutoStateChangedEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ConvolverNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ConvolverNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ConvolverNode");

bindings::V8SetReturnValue(info, V8ConvolverNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CookieChangeEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CookieChangeEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CookieChangeEvent");

bindings::V8SetReturnValue(info, V8CookieChangeEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CookieStoreExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CookieStore_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CookieStore");

bindings::V8SetReturnValue(info, V8CookieStore::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CookieStoreManagerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CookieStoreManager_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CookieStoreManager");

bindings::V8SetReturnValue(info, V8CookieStoreManager::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CountQueuingStrategyExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CountQueuingStrategy_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CountQueuingStrategy");

bindings::V8SetReturnValue(info, V8CountQueuingStrategy::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CredentialExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Credential_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Credential");

bindings::V8SetReturnValue(info, V8Credential::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CredentialsContainerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CredentialsContainer_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CredentialsContainer");

bindings::V8SetReturnValue(info, V8CredentialsContainer::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CropTargetExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CropTarget_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CropTarget");

bindings::V8SetReturnValue(info, V8CropTarget::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CryptoExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Crypto_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Crypto");

bindings::V8SetReturnValue(info, V8Crypto::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CryptoKeyExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CryptoKey_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CryptoKey");

bindings::V8SetReturnValue(info, V8CryptoKey::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CustomElementRegistryExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CustomElementRegistry_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CustomElementRegistry");

bindings::V8SetReturnValue(info, V8CustomElementRegistry::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CustomEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CustomEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CustomEvent");

bindings::V8SetReturnValue(info, V8CustomEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void CustomStateSetExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CustomStateSet_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.CustomStateSet");

bindings::V8SetReturnValue(info, V8CustomStateSet::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DOMErrorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DOMError_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DOMError");

bindings::V8SetReturnValue(info, V8DOMError::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DOMExceptionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DOMException_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DOMException");

bindings::V8SetReturnValue(info, V8DOMException::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DOMImplementationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DOMImplementation_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DOMImplementation");

bindings::V8SetReturnValue(info, V8DOMImplementation::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DOMMatrixExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DOMMatrix_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DOMMatrix");

bindings::V8SetReturnValue(info, V8DOMMatrix::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DOMMatrixReadOnlyExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DOMMatrixReadOnly_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DOMMatrixReadOnly");

bindings::V8SetReturnValue(info, V8DOMMatrixReadOnly::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DOMParserExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DOMParser_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DOMParser");

bindings::V8SetReturnValue(info, V8DOMParser::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DOMPointExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DOMPoint_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DOMPoint");

bindings::V8SetReturnValue(info, V8DOMPoint::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DOMPointReadOnlyExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DOMPointReadOnly_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DOMPointReadOnly");

bindings::V8SetReturnValue(info, V8DOMPointReadOnly::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DOMQuadExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DOMQuad_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DOMQuad");

bindings::V8SetReturnValue(info, V8DOMQuad::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DOMRectExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DOMRect_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DOMRect");

bindings::V8SetReturnValue(info, V8DOMRect::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DOMRectListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DOMRectList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DOMRectList");

bindings::V8SetReturnValue(info, V8DOMRectList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DOMRectReadOnlyExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DOMRectReadOnly_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DOMRectReadOnly");

bindings::V8SetReturnValue(info, V8DOMRectReadOnly::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DOMStringListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DOMStringList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DOMStringList");

bindings::V8SetReturnValue(info, V8DOMStringList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DOMStringMapExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DOMStringMap_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DOMStringMap");

bindings::V8SetReturnValue(info, V8DOMStringMap::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DOMTokenListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DOMTokenList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DOMTokenList");

bindings::V8SetReturnValue(info, V8DOMTokenList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DataTransferExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DataTransfer_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DataTransfer");

bindings::V8SetReturnValue(info, V8DataTransfer::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DataTransferItemExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DataTransferItem_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DataTransferItem");

bindings::V8SetReturnValue(info, V8DataTransferItem::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DataTransferItemListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DataTransferItemList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DataTransferItemList");

bindings::V8SetReturnValue(info, V8DataTransferItemList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DecompressionStreamExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DecompressionStream_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DecompressionStream");

bindings::V8SetReturnValue(info, V8DecompressionStream::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DelayNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DelayNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DelayNode");

bindings::V8SetReturnValue(info, V8DelayNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DelegatedInkTrailPresenterExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DelegatedInkTrailPresenter_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DelegatedInkTrailPresenter");

bindings::V8SetReturnValue(info, V8DelegatedInkTrailPresenter::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DeviceMotionEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DeviceMotionEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DeviceMotionEvent");

bindings::V8SetReturnValue(info, V8DeviceMotionEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DeviceMotionEventAccelerationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DeviceMotionEventAcceleration_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DeviceMotionEventAcceleration");

bindings::V8SetReturnValue(info, V8DeviceMotionEventAcceleration::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DeviceMotionEventRotationRateExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DeviceMotionEventRotationRate_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DeviceMotionEventRotationRate");

bindings::V8SetReturnValue(info, V8DeviceMotionEventRotationRate::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DeviceOrientationEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DeviceOrientationEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DeviceOrientationEvent");

bindings::V8SetReturnValue(info, V8DeviceOrientationEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DevicePostureExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DevicePosture_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DevicePosture");

bindings::V8SetReturnValue(info, V8DevicePosture::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DirectiveExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Directive_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Directive");

bindings::V8SetReturnValue(info, V8Directive::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DocumentExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Document_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Document");

bindings::V8SetReturnValue(info, V8Document::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DocumentFragmentExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DocumentFragment_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DocumentFragment");

bindings::V8SetReturnValue(info, V8DocumentFragment::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DocumentTimelineExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DocumentTimeline_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DocumentTimeline");

bindings::V8SetReturnValue(info, V8DocumentTimeline::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DocumentTransitionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DocumentTransition_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DocumentTransition");

bindings::V8SetReturnValue(info, V8DocumentTransition::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DocumentTypeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DocumentType_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DocumentType");

bindings::V8SetReturnValue(info, V8DocumentType::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DragEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DragEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DragEvent");

bindings::V8SetReturnValue(info, V8DragEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void DynamicsCompressorNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_DynamicsCompressorNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.DynamicsCompressorNode");

bindings::V8SetReturnValue(info, V8DynamicsCompressorNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void EditContextExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_EditContext_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.EditContext");

bindings::V8SetReturnValue(info, V8EditContext::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Element_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Element");

bindings::V8SetReturnValue(info, V8Element::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ElementInternalsExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ElementInternals_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ElementInternals");

bindings::V8SetReturnValue(info, V8ElementInternals::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void EncodedAudioChunkExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_EncodedAudioChunk_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.EncodedAudioChunk");

bindings::V8SetReturnValue(info, V8EncodedAudioChunk::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void EncodedVideoChunkExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_EncodedVideoChunk_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.EncodedVideoChunk");

bindings::V8SetReturnValue(info, V8EncodedVideoChunk::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ErrorEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ErrorEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ErrorEvent");

bindings::V8SetReturnValue(info, V8ErrorEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void EventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Event_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Event");

bindings::V8SetReturnValue(info, V8Event::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void EventCountsExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_EventCounts_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.EventCounts");

bindings::V8SetReturnValue(info, V8EventCounts::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void EventSourceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_EventSource_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.EventSource");

bindings::V8SetReturnValue(info, V8EventSource::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void EventTargetExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_EventTarget_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.EventTarget");

bindings::V8SetReturnValue(info, V8EventTarget::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ExternalExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_External_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.External");

bindings::V8SetReturnValue(info, V8External::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void EyeDropperExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_EyeDropper_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.EyeDropper");

bindings::V8SetReturnValue(info, V8EyeDropper::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void FaceDetectorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_FaceDetector_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.FaceDetector");

bindings::V8SetReturnValue(info, V8FaceDetector::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void FeaturePolicyExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_FeaturePolicy_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.FeaturePolicy");

bindings::V8SetReturnValue(info, V8FeaturePolicy::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void FederatedCredentialExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_FederatedCredential_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.FederatedCredential");

bindings::V8SetReturnValue(info, V8FederatedCredential::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void FenceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Fence_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Fence");

bindings::V8SetReturnValue(info, V8Fence::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void FileExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_File_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.File");

bindings::V8SetReturnValue(info, V8File::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void FileListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_FileList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.FileList");

bindings::V8SetReturnValue(info, V8FileList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void FileReaderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_FileReader_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.FileReader");

bindings::V8SetReturnValue(info, V8FileReader::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void FileSystemDirectoryHandleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_FileSystemDirectoryHandle_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.FileSystemDirectoryHandle");

bindings::V8SetReturnValue(info, V8FileSystemDirectoryHandle::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void FileSystemFileHandleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_FileSystemFileHandle_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.FileSystemFileHandle");

bindings::V8SetReturnValue(info, V8FileSystemFileHandle::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void FileSystemHandleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_FileSystemHandle_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.FileSystemHandle");

bindings::V8SetReturnValue(info, V8FileSystemHandle::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void FileSystemWritableFileStreamExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_FileSystemWritableFileStream_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.FileSystemWritableFileStream");

bindings::V8SetReturnValue(info, V8FileSystemWritableFileStream::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void FocusEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_FocusEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.FocusEvent");

bindings::V8SetReturnValue(info, V8FocusEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void FocusableMediaStreamTrackExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_FocusableMediaStreamTrack_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.FocusableMediaStreamTrack");

bindings::V8SetReturnValue(info, V8FocusableMediaStreamTrack::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void FontDataExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_FontData_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.FontData");

bindings::V8SetReturnValue(info, V8FontData::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void FontFaceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_FontFace_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.FontFace");

bindings::V8SetReturnValue(info, V8FontFace::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void FontFaceSetLoadEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_FontFaceSetLoadEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.FontFaceSetLoadEvent");

bindings::V8SetReturnValue(info, V8FontFaceSetLoadEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void FormDataExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_FormData_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.FormData");

bindings::V8SetReturnValue(info, V8FormData::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void FormDataEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_FormDataEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.FormDataEvent");

bindings::V8SetReturnValue(info, V8FormDataEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void FragmentDirectiveExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_FragmentDirective_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.FragmentDirective");

bindings::V8SetReturnValue(info, V8FragmentDirective::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPU_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPU");

bindings::V8SetReturnValue(info, V8GPU::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUAdapterExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUAdapter_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUAdapter");

bindings::V8SetReturnValue(info, V8GPUAdapter::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUAdapterInfoExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUAdapterInfo_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUAdapterInfo");

bindings::V8SetReturnValue(info, V8GPUAdapterInfo::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUBindGroupExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUBindGroup_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUBindGroup");

bindings::V8SetReturnValue(info, V8GPUBindGroup::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUBindGroupLayoutExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUBindGroupLayout_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUBindGroupLayout");

bindings::V8SetReturnValue(info, V8GPUBindGroupLayout::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUBufferExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUBuffer_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUBuffer");

bindings::V8SetReturnValue(info, V8GPUBuffer::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUBufferUsageExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUBufferUsage_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUBufferUsage");

bindings::V8SetReturnValue(info, V8GPUBufferUsage::GetWrapperTypeInfo(), bindings::V8ReturnValue::kNamespaceObject);
}

void GPUCanvasContextExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUCanvasContext_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUCanvasContext");

bindings::V8SetReturnValue(info, V8GPUCanvasContext::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUColorWriteExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUColorWrite_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUColorWrite");

bindings::V8SetReturnValue(info, V8GPUColorWrite::GetWrapperTypeInfo(), bindings::V8ReturnValue::kNamespaceObject);
}

void GPUCommandBufferExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUCommandBuffer_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUCommandBuffer");

bindings::V8SetReturnValue(info, V8GPUCommandBuffer::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUCommandEncoderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUCommandEncoder_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUCommandEncoder");

bindings::V8SetReturnValue(info, V8GPUCommandEncoder::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUCompilationInfoExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUCompilationInfo_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUCompilationInfo");

bindings::V8SetReturnValue(info, V8GPUCompilationInfo::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUCompilationMessageExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUCompilationMessage_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUCompilationMessage");

bindings::V8SetReturnValue(info, V8GPUCompilationMessage::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUComputePassEncoderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUComputePassEncoder_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUComputePassEncoder");

bindings::V8SetReturnValue(info, V8GPUComputePassEncoder::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUComputePipelineExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUComputePipeline_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUComputePipeline");

bindings::V8SetReturnValue(info, V8GPUComputePipeline::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUDeviceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUDevice_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUDevice");

bindings::V8SetReturnValue(info, V8GPUDevice::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUDeviceLostInfoExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUDeviceLostInfo_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUDeviceLostInfo");

bindings::V8SetReturnValue(info, V8GPUDeviceLostInfo::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUErrorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUError_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUError");

bindings::V8SetReturnValue(info, V8GPUError::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUExternalTextureExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUExternalTexture_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUExternalTexture");

bindings::V8SetReturnValue(info, V8GPUExternalTexture::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUMapModeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUMapMode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUMapMode");

bindings::V8SetReturnValue(info, V8GPUMapMode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kNamespaceObject);
}

void GPUOutOfMemoryErrorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUOutOfMemoryError_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUOutOfMemoryError");

bindings::V8SetReturnValue(info, V8GPUOutOfMemoryError::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUPipelineLayoutExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUPipelineLayout_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUPipelineLayout");

bindings::V8SetReturnValue(info, V8GPUPipelineLayout::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUQuerySetExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUQuerySet_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUQuerySet");

bindings::V8SetReturnValue(info, V8GPUQuerySet::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUQueueExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUQueue_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUQueue");

bindings::V8SetReturnValue(info, V8GPUQueue::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPURenderBundleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPURenderBundle_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPURenderBundle");

bindings::V8SetReturnValue(info, V8GPURenderBundle::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPURenderBundleEncoderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPURenderBundleEncoder_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPURenderBundleEncoder");

bindings::V8SetReturnValue(info, V8GPURenderBundleEncoder::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPURenderPassEncoderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPURenderPassEncoder_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPURenderPassEncoder");

bindings::V8SetReturnValue(info, V8GPURenderPassEncoder::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPURenderPipelineExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPURenderPipeline_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPURenderPipeline");

bindings::V8SetReturnValue(info, V8GPURenderPipeline::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUSamplerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUSampler_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUSampler");

bindings::V8SetReturnValue(info, V8GPUSampler::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUShaderModuleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUShaderModule_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUShaderModule");

bindings::V8SetReturnValue(info, V8GPUShaderModule::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUShaderStageExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUShaderStage_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUShaderStage");

bindings::V8SetReturnValue(info, V8GPUShaderStage::GetWrapperTypeInfo(), bindings::V8ReturnValue::kNamespaceObject);
}

void GPUSupportedFeaturesExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUSupportedFeatures_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUSupportedFeatures");

bindings::V8SetReturnValue(info, V8GPUSupportedFeatures::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUSupportedLimitsExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUSupportedLimits_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUSupportedLimits");

bindings::V8SetReturnValue(info, V8GPUSupportedLimits::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUTextureExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUTexture_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUTexture");

bindings::V8SetReturnValue(info, V8GPUTexture::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUTextureUsageExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUTextureUsage_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUTextureUsage");

bindings::V8SetReturnValue(info, V8GPUTextureUsage::GetWrapperTypeInfo(), bindings::V8ReturnValue::kNamespaceObject);
}

void GPUTextureViewExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUTextureView_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUTextureView");

bindings::V8SetReturnValue(info, V8GPUTextureView::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUUncapturedErrorEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUUncapturedErrorEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUUncapturedErrorEvent");

bindings::V8SetReturnValue(info, V8GPUUncapturedErrorEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GPUValidationErrorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GPUValidationError_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GPUValidationError");

bindings::V8SetReturnValue(info, V8GPUValidationError::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GainNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GainNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GainNode");

bindings::V8SetReturnValue(info, V8GainNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GamepadExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Gamepad_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Gamepad");

bindings::V8SetReturnValue(info, V8Gamepad::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GamepadAxisEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GamepadAxisEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GamepadAxisEvent");

bindings::V8SetReturnValue(info, V8GamepadAxisEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GamepadButtonExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GamepadButton_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GamepadButton");

bindings::V8SetReturnValue(info, V8GamepadButton::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GamepadButtonEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GamepadButtonEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GamepadButtonEvent");

bindings::V8SetReturnValue(info, V8GamepadButtonEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GamepadEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GamepadEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GamepadEvent");

bindings::V8SetReturnValue(info, V8GamepadEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GamepadHapticActuatorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GamepadHapticActuator_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GamepadHapticActuator");

bindings::V8SetReturnValue(info, V8GamepadHapticActuator::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GeolocationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Geolocation_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Geolocation");

bindings::V8SetReturnValue(info, V8Geolocation::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GeolocationCoordinatesExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GeolocationCoordinates_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GeolocationCoordinates");

bindings::V8SetReturnValue(info, V8GeolocationCoordinates::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GeolocationPositionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GeolocationPosition_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GeolocationPosition");

bindings::V8SetReturnValue(info, V8GeolocationPosition::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GeolocationPositionErrorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GeolocationPositionError_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GeolocationPositionError");

bindings::V8SetReturnValue(info, V8GeolocationPositionError::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GravitySensorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_GravitySensor_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.GravitySensor");

bindings::V8SetReturnValue(info, V8GravitySensor::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void GyroscopeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Gyroscope_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Gyroscope");

bindings::V8SetReturnValue(info, V8Gyroscope::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HIDExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HID_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HID");

bindings::V8SetReturnValue(info, V8HID::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HIDConnectionEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HIDConnectionEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HIDConnectionEvent");

bindings::V8SetReturnValue(info, V8HIDConnectionEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HIDDeviceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HIDDevice_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HIDDevice");

bindings::V8SetReturnValue(info, V8HIDDevice::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HIDInputReportEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HIDInputReportEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HIDInputReportEvent");

bindings::V8SetReturnValue(info, V8HIDInputReportEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLAllCollectionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLAllCollection_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLAllCollection");

bindings::V8SetReturnValue(info, V8HTMLAllCollection::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLAnchorElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLAnchorElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLAnchorElement");

bindings::V8SetReturnValue(info, V8HTMLAnchorElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLAreaElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLAreaElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLAreaElement");

bindings::V8SetReturnValue(info, V8HTMLAreaElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLAudioElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLAudioElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLAudioElement");

bindings::V8SetReturnValue(info, V8HTMLAudioElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLBRElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLBRElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLBRElement");

bindings::V8SetReturnValue(info, V8HTMLBRElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLBaseElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLBaseElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLBaseElement");

bindings::V8SetReturnValue(info, V8HTMLBaseElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLBodyElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLBodyElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLBodyElement");

bindings::V8SetReturnValue(info, V8HTMLBodyElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLButtonElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLButtonElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLButtonElement");

bindings::V8SetReturnValue(info, V8HTMLButtonElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLCanvasElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLCanvasElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLCanvasElement");

bindings::V8SetReturnValue(info, V8HTMLCanvasElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLCollectionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLCollection_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLCollection");

bindings::V8SetReturnValue(info, V8HTMLCollection::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLDListElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLDListElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLDListElement");

bindings::V8SetReturnValue(info, V8HTMLDListElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLDataElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLDataElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLDataElement");

bindings::V8SetReturnValue(info, V8HTMLDataElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLDataListElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLDataListElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLDataListElement");

bindings::V8SetReturnValue(info, V8HTMLDataListElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLDetailsElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLDetailsElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLDetailsElement");

bindings::V8SetReturnValue(info, V8HTMLDetailsElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLDialogElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLDialogElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLDialogElement");

bindings::V8SetReturnValue(info, V8HTMLDialogElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLDirectoryElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLDirectoryElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLDirectoryElement");

bindings::V8SetReturnValue(info, V8HTMLDirectoryElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLDivElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLDivElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLDivElement");

bindings::V8SetReturnValue(info, V8HTMLDivElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLDocumentExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLDocument_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLDocument");

bindings::V8SetReturnValue(info, V8HTMLDocument::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLElement");

bindings::V8SetReturnValue(info, V8HTMLElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLEmbedElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLEmbedElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLEmbedElement");

bindings::V8SetReturnValue(info, V8HTMLEmbedElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLFencedFrameElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLFencedFrameElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLFencedFrameElement");

bindings::V8SetReturnValue(info, V8HTMLFencedFrameElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLFieldSetElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLFieldSetElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLFieldSetElement");

bindings::V8SetReturnValue(info, V8HTMLFieldSetElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLFontElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLFontElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLFontElement");

bindings::V8SetReturnValue(info, V8HTMLFontElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLFormControlsCollectionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLFormControlsCollection_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLFormControlsCollection");

bindings::V8SetReturnValue(info, V8HTMLFormControlsCollection::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLFormElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLFormElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLFormElement");

bindings::V8SetReturnValue(info, V8HTMLFormElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLFrameElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLFrameElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLFrameElement");

bindings::V8SetReturnValue(info, V8HTMLFrameElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLFrameSetElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLFrameSetElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLFrameSetElement");

bindings::V8SetReturnValue(info, V8HTMLFrameSetElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLHRElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLHRElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLHRElement");

bindings::V8SetReturnValue(info, V8HTMLHRElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLHeadElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLHeadElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLHeadElement");

bindings::V8SetReturnValue(info, V8HTMLHeadElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLHeadingElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLHeadingElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLHeadingElement");

bindings::V8SetReturnValue(info, V8HTMLHeadingElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLHtmlElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLHtmlElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLHtmlElement");

bindings::V8SetReturnValue(info, V8HTMLHtmlElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLIFrameElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLIFrameElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLIFrameElement");

bindings::V8SetReturnValue(info, V8HTMLIFrameElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLImageElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLImageElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLImageElement");

bindings::V8SetReturnValue(info, V8HTMLImageElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLInputElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLInputElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLInputElement");

bindings::V8SetReturnValue(info, V8HTMLInputElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLLIElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLLIElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLLIElement");

bindings::V8SetReturnValue(info, V8HTMLLIElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLLabelElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLLabelElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLLabelElement");

bindings::V8SetReturnValue(info, V8HTMLLabelElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLLegendElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLLegendElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLLegendElement");

bindings::V8SetReturnValue(info, V8HTMLLegendElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLLinkElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLLinkElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLLinkElement");

bindings::V8SetReturnValue(info, V8HTMLLinkElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLMapElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLMapElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLMapElement");

bindings::V8SetReturnValue(info, V8HTMLMapElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLMarqueeElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLMarqueeElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLMarqueeElement");

bindings::V8SetReturnValue(info, V8HTMLMarqueeElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLMediaElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLMediaElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLMediaElement");

bindings::V8SetReturnValue(info, V8HTMLMediaElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLMenuElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLMenuElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLMenuElement");

bindings::V8SetReturnValue(info, V8HTMLMenuElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLMetaElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLMetaElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLMetaElement");

bindings::V8SetReturnValue(info, V8HTMLMetaElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLMeterElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLMeterElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLMeterElement");

bindings::V8SetReturnValue(info, V8HTMLMeterElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLModElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLModElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLModElement");

bindings::V8SetReturnValue(info, V8HTMLModElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLOListElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLOListElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLOListElement");

bindings::V8SetReturnValue(info, V8HTMLOListElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLObjectElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLObjectElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLObjectElement");

bindings::V8SetReturnValue(info, V8HTMLObjectElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLOptGroupElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLOptGroupElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLOptGroupElement");

bindings::V8SetReturnValue(info, V8HTMLOptGroupElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLOptionElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLOptionElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLOptionElement");

bindings::V8SetReturnValue(info, V8HTMLOptionElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLOptionsCollectionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLOptionsCollection_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLOptionsCollection");

bindings::V8SetReturnValue(info, V8HTMLOptionsCollection::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLOutputElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLOutputElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLOutputElement");

bindings::V8SetReturnValue(info, V8HTMLOutputElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLParagraphElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLParagraphElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLParagraphElement");

bindings::V8SetReturnValue(info, V8HTMLParagraphElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLParamElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLParamElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLParamElement");

bindings::V8SetReturnValue(info, V8HTMLParamElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLPictureElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLPictureElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLPictureElement");

bindings::V8SetReturnValue(info, V8HTMLPictureElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLPortalElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLPortalElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLPortalElement");

bindings::V8SetReturnValue(info, V8HTMLPortalElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLPreElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLPreElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLPreElement");

bindings::V8SetReturnValue(info, V8HTMLPreElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLProgressElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLProgressElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLProgressElement");

bindings::V8SetReturnValue(info, V8HTMLProgressElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLQuoteElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLQuoteElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLQuoteElement");

bindings::V8SetReturnValue(info, V8HTMLQuoteElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLScriptElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLScriptElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLScriptElement");

bindings::V8SetReturnValue(info, V8HTMLScriptElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLSelectElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLSelectElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLSelectElement");

bindings::V8SetReturnValue(info, V8HTMLSelectElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLSelectMenuElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLSelectMenuElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLSelectMenuElement");

bindings::V8SetReturnValue(info, V8HTMLSelectMenuElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLSlotElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLSlotElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLSlotElement");

bindings::V8SetReturnValue(info, V8HTMLSlotElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLSourceElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLSourceElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLSourceElement");

bindings::V8SetReturnValue(info, V8HTMLSourceElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLSpanElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLSpanElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLSpanElement");

bindings::V8SetReturnValue(info, V8HTMLSpanElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLStyleElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLStyleElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLStyleElement");

bindings::V8SetReturnValue(info, V8HTMLStyleElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLTableCaptionElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLTableCaptionElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLTableCaptionElement");

bindings::V8SetReturnValue(info, V8HTMLTableCaptionElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLTableCellElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLTableCellElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLTableCellElement");

bindings::V8SetReturnValue(info, V8HTMLTableCellElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLTableColElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLTableColElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLTableColElement");

bindings::V8SetReturnValue(info, V8HTMLTableColElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLTableElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLTableElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLTableElement");

bindings::V8SetReturnValue(info, V8HTMLTableElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLTableRowElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLTableRowElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLTableRowElement");

bindings::V8SetReturnValue(info, V8HTMLTableRowElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLTableSectionElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLTableSectionElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLTableSectionElement");

bindings::V8SetReturnValue(info, V8HTMLTableSectionElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLTemplateElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLTemplateElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLTemplateElement");

bindings::V8SetReturnValue(info, V8HTMLTemplateElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLTextAreaElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLTextAreaElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLTextAreaElement");

bindings::V8SetReturnValue(info, V8HTMLTextAreaElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLTimeElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLTimeElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLTimeElement");

bindings::V8SetReturnValue(info, V8HTMLTimeElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLTitleElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLTitleElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLTitleElement");

bindings::V8SetReturnValue(info, V8HTMLTitleElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLTrackElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLTrackElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLTrackElement");

bindings::V8SetReturnValue(info, V8HTMLTrackElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLUListElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLUListElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLUListElement");

bindings::V8SetReturnValue(info, V8HTMLUListElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLUnknownElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLUnknownElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLUnknownElement");

bindings::V8SetReturnValue(info, V8HTMLUnknownElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HTMLVideoElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HTMLVideoElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HTMLVideoElement");

bindings::V8SetReturnValue(info, V8HTMLVideoElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HandwritingStrokeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HandwritingStroke_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HandwritingStroke");

bindings::V8SetReturnValue(info, V8HandwritingStroke::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HashChangeEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HashChangeEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HashChangeEvent");

bindings::V8SetReturnValue(info, V8HashChangeEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HeadersExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Headers_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Headers");

bindings::V8SetReturnValue(info, V8Headers::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HighlightExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Highlight_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Highlight");

bindings::V8SetReturnValue(info, V8Highlight::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HighlightPointerEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HighlightPointerEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HighlightPointerEvent");

bindings::V8SetReturnValue(info, V8HighlightPointerEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HighlightRegistryExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_HighlightRegistry_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.HighlightRegistry");

bindings::V8SetReturnValue(info, V8HighlightRegistry::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void HistoryExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_History_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.History");

bindings::V8SetReturnValue(info, V8History::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void IDBCursorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_IDBCursor_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.IDBCursor");

bindings::V8SetReturnValue(info, V8IDBCursor::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void IDBCursorWithValueExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_IDBCursorWithValue_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.IDBCursorWithValue");

bindings::V8SetReturnValue(info, V8IDBCursorWithValue::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void IDBDatabaseExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_IDBDatabase_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.IDBDatabase");

bindings::V8SetReturnValue(info, V8IDBDatabase::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void IDBFactoryExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_IDBFactory_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.IDBFactory");

bindings::V8SetReturnValue(info, V8IDBFactory::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void IDBIndexExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_IDBIndex_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.IDBIndex");

bindings::V8SetReturnValue(info, V8IDBIndex::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void IDBKeyRangeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_IDBKeyRange_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.IDBKeyRange");

bindings::V8SetReturnValue(info, V8IDBKeyRange::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void IDBObjectStoreExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_IDBObjectStore_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.IDBObjectStore");

bindings::V8SetReturnValue(info, V8IDBObjectStore::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void IDBOpenDBRequestExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_IDBOpenDBRequest_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.IDBOpenDBRequest");

bindings::V8SetReturnValue(info, V8IDBOpenDBRequest::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void IDBRequestExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_IDBRequest_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.IDBRequest");

bindings::V8SetReturnValue(info, V8IDBRequest::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void IDBTransactionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_IDBTransaction_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.IDBTransaction");

bindings::V8SetReturnValue(info, V8IDBTransaction::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void IDBVersionChangeEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_IDBVersionChangeEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.IDBVersionChangeEvent");

bindings::V8SetReturnValue(info, V8IDBVersionChangeEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void IIRFilterNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_IIRFilterNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.IIRFilterNode");

bindings::V8SetReturnValue(info, V8IIRFilterNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void IdentityCredentialExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_IdentityCredential_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.IdentityCredential");

bindings::V8SetReturnValue(info, V8IdentityCredential::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void IdleDeadlineExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_IdleDeadline_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.IdleDeadline");

bindings::V8SetReturnValue(info, V8IdleDeadline::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void IdleDetectorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_IdleDetector_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.IdleDetector");

bindings::V8SetReturnValue(info, V8IdleDetector::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ImageBitmapExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ImageBitmap_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ImageBitmap");

bindings::V8SetReturnValue(info, V8ImageBitmap::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ImageBitmapRenderingContextExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ImageBitmapRenderingContext_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ImageBitmapRenderingContext");

bindings::V8SetReturnValue(info, V8ImageBitmapRenderingContext::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ImageCaptureExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ImageCapture_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ImageCapture");

bindings::V8SetReturnValue(info, V8ImageCapture::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ImageDataExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ImageData_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ImageData");

bindings::V8SetReturnValue(info, V8ImageData::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ImageDecoderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ImageDecoder_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ImageDecoder");

bindings::V8SetReturnValue(info, V8ImageDecoder::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ImageTrackExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ImageTrack_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ImageTrack");

bindings::V8SetReturnValue(info, V8ImageTrack::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ImageTrackListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ImageTrackList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ImageTrackList");

bindings::V8SetReturnValue(info, V8ImageTrackList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void InkExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Ink_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Ink");

bindings::V8SetReturnValue(info, V8Ink::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void InputDeviceCapabilitiesExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_InputDeviceCapabilities_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.InputDeviceCapabilities");

bindings::V8SetReturnValue(info, V8InputDeviceCapabilities::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void InputDeviceInfoExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_InputDeviceInfo_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.InputDeviceInfo");

bindings::V8SetReturnValue(info, V8InputDeviceInfo::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void InputEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_InputEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.InputEvent");

bindings::V8SetReturnValue(info, V8InputEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void IntersectionObserverExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_IntersectionObserver_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.IntersectionObserver");

bindings::V8SetReturnValue(info, V8IntersectionObserver::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void IntersectionObserverEntryExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_IntersectionObserverEntry_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.IntersectionObserverEntry");

bindings::V8SetReturnValue(info, V8IntersectionObserverEntry::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void KeyboardExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Keyboard_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Keyboard");

bindings::V8SetReturnValue(info, V8Keyboard::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void KeyboardEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_KeyboardEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.KeyboardEvent");

bindings::V8SetReturnValue(info, V8KeyboardEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void KeyboardLayoutMapExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_KeyboardLayoutMap_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.KeyboardLayoutMap");

bindings::V8SetReturnValue(info, V8KeyboardLayoutMap::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void KeyframeEffectExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_KeyframeEffect_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.KeyframeEffect");

bindings::V8SetReturnValue(info, V8KeyframeEffect::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void LargestContentfulPaintExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_LargestContentfulPaint_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.LargestContentfulPaint");

bindings::V8SetReturnValue(info, V8LargestContentfulPaint::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void LaunchParamsExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_LaunchParams_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.LaunchParams");

bindings::V8SetReturnValue(info, V8LaunchParams::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void LaunchQueueExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_LaunchQueue_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.LaunchQueue");

bindings::V8SetReturnValue(info, V8LaunchQueue::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void LayoutShiftExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_LayoutShift_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.LayoutShift");

bindings::V8SetReturnValue(info, V8LayoutShift::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void LayoutShiftAttributionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_LayoutShiftAttribution_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.LayoutShiftAttribution");

bindings::V8SetReturnValue(info, V8LayoutShiftAttribution::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void LinearAccelerationSensorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_LinearAccelerationSensor_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.LinearAccelerationSensor");

bindings::V8SetReturnValue(info, V8LinearAccelerationSensor::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void LocationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Location_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Location");

bindings::V8SetReturnValue(info, V8Location::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void LockExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Lock_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Lock");

bindings::V8SetReturnValue(info, V8Lock::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void LockManagerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_LockManager_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.LockManager");

bindings::V8SetReturnValue(info, V8LockManager::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MIDIAccessExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MIDIAccess_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MIDIAccess");

bindings::V8SetReturnValue(info, V8MIDIAccess::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MIDIConnectionEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MIDIConnectionEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MIDIConnectionEvent");

bindings::V8SetReturnValue(info, V8MIDIConnectionEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MIDIInputExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MIDIInput_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MIDIInput");

bindings::V8SetReturnValue(info, V8MIDIInput::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MIDIInputMapExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MIDIInputMap_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MIDIInputMap");

bindings::V8SetReturnValue(info, V8MIDIInputMap::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MIDIMessageEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MIDIMessageEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MIDIMessageEvent");

bindings::V8SetReturnValue(info, V8MIDIMessageEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MIDIOutputExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MIDIOutput_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MIDIOutput");

bindings::V8SetReturnValue(info, V8MIDIOutput::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MIDIOutputMapExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MIDIOutputMap_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MIDIOutputMap");

bindings::V8SetReturnValue(info, V8MIDIOutputMap::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MIDIPortExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MIDIPort_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MIDIPort");

bindings::V8SetReturnValue(info, V8MIDIPort::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MLExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ML_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ML");

bindings::V8SetReturnValue(info, V8ML::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MLContextExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MLContext_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MLContext");

bindings::V8SetReturnValue(info, V8MLContext::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MLGraphBuilderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MLGraphBuilder_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MLGraphBuilder");

bindings::V8SetReturnValue(info, V8MLGraphBuilder::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MLModelLoaderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MLModelLoader_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MLModelLoader");

bindings::V8SetReturnValue(info, V8MLModelLoader::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MLOperandExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MLOperand_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MLOperand");

bindings::V8SetReturnValue(info, V8MLOperand::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MLOperatorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MLOperator_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MLOperator");

bindings::V8SetReturnValue(info, V8MLOperator::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MagnetometerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Magnetometer_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Magnetometer");

bindings::V8SetReturnValue(info, V8Magnetometer::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MathMLElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MathMLElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MathMLElement");

bindings::V8SetReturnValue(info, V8MathMLElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaCapabilitiesExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaCapabilities_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaCapabilities");

bindings::V8SetReturnValue(info, V8MediaCapabilities::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaDeviceInfoExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaDeviceInfo_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaDeviceInfo");

bindings::V8SetReturnValue(info, V8MediaDeviceInfo::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaDevicesExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaDevices_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaDevices");

bindings::V8SetReturnValue(info, V8MediaDevices::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaElementAudioSourceNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaElementAudioSourceNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaElementAudioSourceNode");

bindings::V8SetReturnValue(info, V8MediaElementAudioSourceNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaEncryptedEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaEncryptedEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaEncryptedEvent");

bindings::V8SetReturnValue(info, V8MediaEncryptedEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaErrorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaError_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaError");

bindings::V8SetReturnValue(info, V8MediaError::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaKeyMessageEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaKeyMessageEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaKeyMessageEvent");

bindings::V8SetReturnValue(info, V8MediaKeyMessageEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaKeySessionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaKeySession_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaKeySession");

bindings::V8SetReturnValue(info, V8MediaKeySession::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaKeyStatusMapExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaKeyStatusMap_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaKeyStatusMap");

bindings::V8SetReturnValue(info, V8MediaKeyStatusMap::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaKeySystemAccessExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaKeySystemAccess_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaKeySystemAccess");

bindings::V8SetReturnValue(info, V8MediaKeySystemAccess::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaKeysExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaKeys_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaKeys");

bindings::V8SetReturnValue(info, V8MediaKeys::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaList");

bindings::V8SetReturnValue(info, V8MediaList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaMetadataExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaMetadata_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaMetadata");

bindings::V8SetReturnValue(info, V8MediaMetadata::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaQueryListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaQueryList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaQueryList");

bindings::V8SetReturnValue(info, V8MediaQueryList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaQueryListEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaQueryListEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaQueryListEvent");

bindings::V8SetReturnValue(info, V8MediaQueryListEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaRecorderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaRecorder_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaRecorder");

bindings::V8SetReturnValue(info, V8MediaRecorder::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaSessionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaSession_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaSession");

bindings::V8SetReturnValue(info, V8MediaSession::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaSourceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaSource_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaSource");

bindings::V8SetReturnValue(info, V8MediaSource::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaSourceHandleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaSourceHandle_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaSourceHandle");

bindings::V8SetReturnValue(info, V8MediaSourceHandle::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaStreamExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaStream_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaStream");

bindings::V8SetReturnValue(info, V8MediaStream::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaStreamAudioDestinationNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaStreamAudioDestinationNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaStreamAudioDestinationNode");

bindings::V8SetReturnValue(info, V8MediaStreamAudioDestinationNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaStreamAudioSourceNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaStreamAudioSourceNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaStreamAudioSourceNode");

bindings::V8SetReturnValue(info, V8MediaStreamAudioSourceNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaStreamEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaStreamEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaStreamEvent");

bindings::V8SetReturnValue(info, V8MediaStreamEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaStreamTrackExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaStreamTrack_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaStreamTrack");

bindings::V8SetReturnValue(info, V8MediaStreamTrack::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaStreamTrackEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaStreamTrackEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaStreamTrackEvent");

bindings::V8SetReturnValue(info, V8MediaStreamTrackEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaStreamTrackGeneratorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaStreamTrackGenerator_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaStreamTrackGenerator");

bindings::V8SetReturnValue(info, V8MediaStreamTrackGenerator::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MediaStreamTrackProcessorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MediaStreamTrackProcessor_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MediaStreamTrackProcessor");

bindings::V8SetReturnValue(info, V8MediaStreamTrackProcessor::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MerchantValidationEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MerchantValidationEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MerchantValidationEvent");

bindings::V8SetReturnValue(info, V8MerchantValidationEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MessageChannelExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MessageChannel_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MessageChannel");

bindings::V8SetReturnValue(info, V8MessageChannel::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MessageEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MessageEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MessageEvent");

bindings::V8SetReturnValue(info, V8MessageEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MessagePortExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MessagePort_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MessagePort");

bindings::V8SetReturnValue(info, V8MessagePort::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MimeTypeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MimeType_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MimeType");

bindings::V8SetReturnValue(info, V8MimeType::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MimeTypeArrayExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MimeTypeArray_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MimeTypeArray");

bindings::V8SetReturnValue(info, V8MimeTypeArray::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MojoExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Mojo_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Mojo");

bindings::V8SetReturnValue(info, V8Mojo::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MojoHandleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MojoHandle_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MojoHandle");

bindings::V8SetReturnValue(info, V8MojoHandle::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MojoInterfaceInterceptorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MojoInterfaceInterceptor_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MojoInterfaceInterceptor");

bindings::V8SetReturnValue(info, V8MojoInterfaceInterceptor::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MojoInterfaceRequestEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MojoInterfaceRequestEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MojoInterfaceRequestEvent");

bindings::V8SetReturnValue(info, V8MojoInterfaceRequestEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MojoWatcherExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MojoWatcher_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MojoWatcher");

bindings::V8SetReturnValue(info, V8MojoWatcher::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MouseEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MouseEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MouseEvent");

bindings::V8SetReturnValue(info, V8MouseEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MutationEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MutationEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MutationEvent");

bindings::V8SetReturnValue(info, V8MutationEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MutationObserverExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MutationObserver_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MutationObserver");

bindings::V8SetReturnValue(info, V8MutationObserver::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void MutationRecordExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_MutationRecord_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.MutationRecord");

bindings::V8SetReturnValue(info, V8MutationRecord::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NDEFMessageExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NDEFMessage_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.NDEFMessage");

bindings::V8SetReturnValue(info, V8NDEFMessage::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NDEFReaderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NDEFReader_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.NDEFReader");

bindings::V8SetReturnValue(info, V8NDEFReader::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NDEFReadingEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NDEFReadingEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.NDEFReadingEvent");

bindings::V8SetReturnValue(info, V8NDEFReadingEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NDEFRecordExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NDEFRecord_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.NDEFRecord");

bindings::V8SetReturnValue(info, V8NDEFRecord::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NamedNodeMapExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NamedNodeMap_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.NamedNodeMap");

bindings::V8SetReturnValue(info, V8NamedNodeMap::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NativeIOFileExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NativeIOFile_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.NativeIOFile");

bindings::V8SetReturnValue(info, V8NativeIOFile::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NativeIOFileManagerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NativeIOFileManager_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.NativeIOFileManager");

bindings::V8SetReturnValue(info, V8NativeIOFileManager::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NavigateEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NavigateEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.NavigateEvent");

bindings::V8SetReturnValue(info, V8NavigateEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NavigationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Navigation_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Navigation");

bindings::V8SetReturnValue(info, V8Navigation::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NavigationCurrentEntryChangeEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NavigationCurrentEntryChangeEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.NavigationCurrentEntryChangeEvent");

bindings::V8SetReturnValue(info, V8NavigationCurrentEntryChangeEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NavigationDestinationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NavigationDestination_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.NavigationDestination");

bindings::V8SetReturnValue(info, V8NavigationDestination::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NavigationHistoryEntryExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NavigationHistoryEntry_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.NavigationHistoryEntry");

bindings::V8SetReturnValue(info, V8NavigationHistoryEntry::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NavigationPreloadManagerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NavigationPreloadManager_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.NavigationPreloadManager");

bindings::V8SetReturnValue(info, V8NavigationPreloadManager::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NavigationTransitionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NavigationTransition_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.NavigationTransition");

bindings::V8SetReturnValue(info, V8NavigationTransition::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NavigatorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Navigator_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Navigator");

bindings::V8SetReturnValue(info, V8Navigator::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NavigatorManagedDataExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NavigatorManagedData_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.NavigatorManagedData");

bindings::V8SetReturnValue(info, V8NavigatorManagedData::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NavigatorUADataExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NavigatorUAData_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.NavigatorUAData");

bindings::V8SetReturnValue(info, V8NavigatorUAData::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NetworkInformationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NetworkInformation_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.NetworkInformation");

bindings::V8SetReturnValue(info, V8NetworkInformation::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Node_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Node");

bindings::V8SetReturnValue(info, V8Node::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NodeFilterExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NodeFilter_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.NodeFilter");

bindings::V8SetReturnValue(info, V8NodeFilter::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NodeIteratorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NodeIterator_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.NodeIterator");

bindings::V8SetReturnValue(info, V8NodeIterator::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NodeListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NodeList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.NodeList");

bindings::V8SetReturnValue(info, V8NodeList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void NotificationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Notification_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Notification");

bindings::V8SetReturnValue(info, V8Notification::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void OTPCredentialExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_OTPCredential_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.OTPCredential");

bindings::V8SetReturnValue(info, V8OTPCredential::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void OfflineAudioCompletionEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_OfflineAudioCompletionEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.OfflineAudioCompletionEvent");

bindings::V8SetReturnValue(info, V8OfflineAudioCompletionEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void OfflineAudioContextExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_OfflineAudioContext_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.OfflineAudioContext");

bindings::V8SetReturnValue(info, V8OfflineAudioContext::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void OffscreenCanvasExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_OffscreenCanvas_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.OffscreenCanvas");

bindings::V8SetReturnValue(info, V8OffscreenCanvas::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void OffscreenCanvasRenderingContext2DExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_OffscreenCanvasRenderingContext2D_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.OffscreenCanvasRenderingContext2D");

bindings::V8SetReturnValue(info, V8OffscreenCanvasRenderingContext2D::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void OrientationSensorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_OrientationSensor_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.OrientationSensor");

bindings::V8SetReturnValue(info, V8OrientationSensor::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void OscillatorNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_OscillatorNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.OscillatorNode");

bindings::V8SetReturnValue(info, V8OscillatorNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void OverconstrainedErrorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_OverconstrainedError_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.OverconstrainedError");

bindings::V8SetReturnValue(info, V8OverconstrainedError::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void OverscrollEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_OverscrollEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.OverscrollEvent");

bindings::V8SetReturnValue(info, V8OverscrollEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PageTransitionEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PageTransitionEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PageTransitionEvent");

bindings::V8SetReturnValue(info, V8PageTransitionEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PannerNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PannerNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PannerNode");

bindings::V8SetReturnValue(info, V8PannerNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PasswordCredentialExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PasswordCredential_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PasswordCredential");

bindings::V8SetReturnValue(info, V8PasswordCredential::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void Path2DExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Path2D_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Path2D");

bindings::V8SetReturnValue(info, V8Path2D::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PaymentAddressExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PaymentAddress_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PaymentAddress");

bindings::V8SetReturnValue(info, V8PaymentAddress::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PaymentInstrumentsExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PaymentInstruments_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PaymentInstruments");

bindings::V8SetReturnValue(info, V8PaymentInstruments::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PaymentManagerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PaymentManager_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PaymentManager");

bindings::V8SetReturnValue(info, V8PaymentManager::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PaymentMethodChangeEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PaymentMethodChangeEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PaymentMethodChangeEvent");

bindings::V8SetReturnValue(info, V8PaymentMethodChangeEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PaymentRequestExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PaymentRequest_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PaymentRequest");

bindings::V8SetReturnValue(info, V8PaymentRequest::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PaymentRequestUpdateEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PaymentRequestUpdateEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PaymentRequestUpdateEvent");

bindings::V8SetReturnValue(info, V8PaymentRequestUpdateEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PaymentResponseExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PaymentResponse_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PaymentResponse");

bindings::V8SetReturnValue(info, V8PaymentResponse::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PendingBeaconExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PendingBeacon_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PendingBeacon");

bindings::V8SetReturnValue(info, V8PendingBeacon::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PendingGetBeaconExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PendingGetBeacon_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PendingGetBeacon");

bindings::V8SetReturnValue(info, V8PendingGetBeacon::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PendingPostBeaconExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PendingPostBeacon_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PendingPostBeacon");

bindings::V8SetReturnValue(info, V8PendingPostBeacon::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PerformanceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Performance_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Performance");

bindings::V8SetReturnValue(info, V8Performance::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PerformanceElementTimingExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PerformanceElementTiming_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PerformanceElementTiming");

bindings::V8SetReturnValue(info, V8PerformanceElementTiming::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PerformanceEntryExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PerformanceEntry_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PerformanceEntry");

bindings::V8SetReturnValue(info, V8PerformanceEntry::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PerformanceEventTimingExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PerformanceEventTiming_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PerformanceEventTiming");

bindings::V8SetReturnValue(info, V8PerformanceEventTiming::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PerformanceLongTaskTimingExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PerformanceLongTaskTiming_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PerformanceLongTaskTiming");

bindings::V8SetReturnValue(info, V8PerformanceLongTaskTiming::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PerformanceMarkExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PerformanceMark_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PerformanceMark");

bindings::V8SetReturnValue(info, V8PerformanceMark::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PerformanceMeasureExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PerformanceMeasure_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PerformanceMeasure");

bindings::V8SetReturnValue(info, V8PerformanceMeasure::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PerformanceNavigationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PerformanceNavigation_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PerformanceNavigation");

bindings::V8SetReturnValue(info, V8PerformanceNavigation::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PerformanceNavigationTimingExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PerformanceNavigationTiming_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PerformanceNavigationTiming");

bindings::V8SetReturnValue(info, V8PerformanceNavigationTiming::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PerformanceObserverExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PerformanceObserver_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PerformanceObserver");

bindings::V8SetReturnValue(info, V8PerformanceObserver::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PerformanceObserverEntryListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PerformanceObserverEntryList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PerformanceObserverEntryList");

bindings::V8SetReturnValue(info, V8PerformanceObserverEntryList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PerformancePaintTimingExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PerformancePaintTiming_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PerformancePaintTiming");

bindings::V8SetReturnValue(info, V8PerformancePaintTiming::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PerformanceResourceTimingExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PerformanceResourceTiming_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PerformanceResourceTiming");

bindings::V8SetReturnValue(info, V8PerformanceResourceTiming::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PerformanceServerTimingExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PerformanceServerTiming_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PerformanceServerTiming");

bindings::V8SetReturnValue(info, V8PerformanceServerTiming::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PerformanceTimingExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PerformanceTiming_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PerformanceTiming");

bindings::V8SetReturnValue(info, V8PerformanceTiming::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PeriodicSyncManagerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PeriodicSyncManager_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PeriodicSyncManager");

bindings::V8SetReturnValue(info, V8PeriodicSyncManager::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PeriodicWaveExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PeriodicWave_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PeriodicWave");

bindings::V8SetReturnValue(info, V8PeriodicWave::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PermissionStatusExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PermissionStatus_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PermissionStatus");

bindings::V8SetReturnValue(info, V8PermissionStatus::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PermissionsExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Permissions_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Permissions");

bindings::V8SetReturnValue(info, V8Permissions::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PictureInPictureEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PictureInPictureEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PictureInPictureEvent");

bindings::V8SetReturnValue(info, V8PictureInPictureEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PictureInPictureWindowExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PictureInPictureWindow_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PictureInPictureWindow");

bindings::V8SetReturnValue(info, V8PictureInPictureWindow::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PluginExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Plugin_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Plugin");

bindings::V8SetReturnValue(info, V8Plugin::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PluginArrayExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PluginArray_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PluginArray");

bindings::V8SetReturnValue(info, V8PluginArray::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PointerEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PointerEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PointerEvent");

bindings::V8SetReturnValue(info, V8PointerEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PopStateEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PopStateEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PopStateEvent");

bindings::V8SetReturnValue(info, V8PopStateEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PortalActivateEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PortalActivateEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PortalActivateEvent");

bindings::V8SetReturnValue(info, V8PortalActivateEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PortalHostExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PortalHost_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PortalHost");

bindings::V8SetReturnValue(info, V8PortalHost::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PresentationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Presentation_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Presentation");

bindings::V8SetReturnValue(info, V8Presentation::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PresentationAvailabilityExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PresentationAvailability_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PresentationAvailability");

bindings::V8SetReturnValue(info, V8PresentationAvailability::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PresentationConnectionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PresentationConnection_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PresentationConnection");

bindings::V8SetReturnValue(info, V8PresentationConnection::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PresentationConnectionAvailableEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PresentationConnectionAvailableEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PresentationConnectionAvailableEvent");

bindings::V8SetReturnValue(info, V8PresentationConnectionAvailableEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PresentationConnectionCloseEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PresentationConnectionCloseEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PresentationConnectionCloseEvent");

bindings::V8SetReturnValue(info, V8PresentationConnectionCloseEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PresentationConnectionListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PresentationConnectionList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PresentationConnectionList");

bindings::V8SetReturnValue(info, V8PresentationConnectionList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PresentationReceiverExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PresentationReceiver_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PresentationReceiver");

bindings::V8SetReturnValue(info, V8PresentationReceiver::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PresentationRequestExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PresentationRequest_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PresentationRequest");

bindings::V8SetReturnValue(info, V8PresentationRequest::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PressureObserverExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PressureObserver_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PressureObserver");

bindings::V8SetReturnValue(info, V8PressureObserver::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ProcessingInstructionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ProcessingInstruction_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ProcessingInstruction");

bindings::V8SetReturnValue(info, V8ProcessingInstruction::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ProfilerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Profiler_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Profiler");

bindings::V8SetReturnValue(info, V8Profiler::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ProgressEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ProgressEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ProgressEvent");

bindings::V8SetReturnValue(info, V8ProgressEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PromiseRejectionEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PromiseRejectionEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PromiseRejectionEvent");

bindings::V8SetReturnValue(info, V8PromiseRejectionEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PublicKeyCredentialExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PublicKeyCredential_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PublicKeyCredential");

bindings::V8SetReturnValue(info, V8PublicKeyCredential::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PushManagerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PushManager_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PushManager");

bindings::V8SetReturnValue(info, V8PushManager::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PushSubscriptionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PushSubscription_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PushSubscription");

bindings::V8SetReturnValue(info, V8PushSubscription::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void PushSubscriptionOptionsExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_PushSubscriptionOptions_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.PushSubscriptionOptions");

bindings::V8SetReturnValue(info, V8PushSubscriptionOptions::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCCertificateExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCCertificate_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCCertificate");

bindings::V8SetReturnValue(info, V8RTCCertificate::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCDTMFSenderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCDTMFSender_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCDTMFSender");

bindings::V8SetReturnValue(info, V8RTCDTMFSender::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCDTMFToneChangeEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCDTMFToneChangeEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCDTMFToneChangeEvent");

bindings::V8SetReturnValue(info, V8RTCDTMFToneChangeEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCDataChannelExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCDataChannel_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCDataChannel");

bindings::V8SetReturnValue(info, V8RTCDataChannel::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCDataChannelEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCDataChannelEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCDataChannelEvent");

bindings::V8SetReturnValue(info, V8RTCDataChannelEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCDtlsTransportExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCDtlsTransport_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCDtlsTransport");

bindings::V8SetReturnValue(info, V8RTCDtlsTransport::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCEncodedAudioFrameExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCEncodedAudioFrame_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCEncodedAudioFrame");

bindings::V8SetReturnValue(info, V8RTCEncodedAudioFrame::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCEncodedVideoFrameExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCEncodedVideoFrame_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCEncodedVideoFrame");

bindings::V8SetReturnValue(info, V8RTCEncodedVideoFrame::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCErrorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCError_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCError");

bindings::V8SetReturnValue(info, V8RTCError::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCErrorEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCErrorEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCErrorEvent");

bindings::V8SetReturnValue(info, V8RTCErrorEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCIceCandidateExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCIceCandidate_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCIceCandidate");

bindings::V8SetReturnValue(info, V8RTCIceCandidate::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCIceTransportExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCIceTransport_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCIceTransport");

bindings::V8SetReturnValue(info, V8RTCIceTransport::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCPeerConnectionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCPeerConnection_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCPeerConnection");

bindings::V8SetReturnValue(info, V8RTCPeerConnection::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCPeerConnectionIceErrorEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCPeerConnectionIceErrorEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCPeerConnectionIceErrorEvent");

bindings::V8SetReturnValue(info, V8RTCPeerConnectionIceErrorEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCPeerConnectionIceEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCPeerConnectionIceEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCPeerConnectionIceEvent");

bindings::V8SetReturnValue(info, V8RTCPeerConnectionIceEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCRtpReceiverExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCRtpReceiver_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCRtpReceiver");

bindings::V8SetReturnValue(info, V8RTCRtpReceiver::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCRtpSenderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCRtpSender_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCRtpSender");

bindings::V8SetReturnValue(info, V8RTCRtpSender::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCRtpTransceiverExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCRtpTransceiver_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCRtpTransceiver");

bindings::V8SetReturnValue(info, V8RTCRtpTransceiver::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCSctpTransportExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCSctpTransport_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCSctpTransport");

bindings::V8SetReturnValue(info, V8RTCSctpTransport::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCSessionDescriptionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCSessionDescription_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCSessionDescription");

bindings::V8SetReturnValue(info, V8RTCSessionDescription::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCStatsReportExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCStatsReport_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCStatsReport");

bindings::V8SetReturnValue(info, V8RTCStatsReport::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RTCTrackEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RTCTrackEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RTCTrackEvent");

bindings::V8SetReturnValue(info, V8RTCTrackEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RadioNodeListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RadioNodeList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RadioNodeList");

bindings::V8SetReturnValue(info, V8RadioNodeList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RangeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Range_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Range");

bindings::V8SetReturnValue(info, V8Range::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ReadableByteStreamControllerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ReadableByteStreamController_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ReadableByteStreamController");

bindings::V8SetReturnValue(info, V8ReadableByteStreamController::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ReadableStreamExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ReadableStream_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ReadableStream");

bindings::V8SetReturnValue(info, V8ReadableStream::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ReadableStreamBYOBReaderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ReadableStreamBYOBReader_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ReadableStreamBYOBReader");

bindings::V8SetReturnValue(info, V8ReadableStreamBYOBReader::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ReadableStreamBYOBRequestExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ReadableStreamBYOBRequest_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ReadableStreamBYOBRequest");

bindings::V8SetReturnValue(info, V8ReadableStreamBYOBRequest::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ReadableStreamDefaultControllerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ReadableStreamDefaultController_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ReadableStreamDefaultController");

bindings::V8SetReturnValue(info, V8ReadableStreamDefaultController::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ReadableStreamDefaultReaderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ReadableStreamDefaultReader_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ReadableStreamDefaultReader");

bindings::V8SetReturnValue(info, V8ReadableStreamDefaultReader::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RelativeOrientationSensorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RelativeOrientationSensor_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RelativeOrientationSensor");

bindings::V8SetReturnValue(info, V8RelativeOrientationSensor::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RemotePlaybackExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_RemotePlayback_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.RemotePlayback");

bindings::V8SetReturnValue(info, V8RemotePlayback::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ReportingObserverExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ReportingObserver_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ReportingObserver");

bindings::V8SetReturnValue(info, V8ReportingObserver::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void RequestExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Request_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Request");

bindings::V8SetReturnValue(info, V8Request::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ResizeObserverExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ResizeObserver_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ResizeObserver");

bindings::V8SetReturnValue(info, V8ResizeObserver::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ResizeObserverEntryExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ResizeObserverEntry_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ResizeObserverEntry");

bindings::V8SetReturnValue(info, V8ResizeObserverEntry::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ResizeObserverSizeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ResizeObserverSize_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ResizeObserverSize");

bindings::V8SetReturnValue(info, V8ResizeObserverSize::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ResponseExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Response_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Response");

bindings::V8SetReturnValue(info, V8Response::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGAElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGAElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGAElement");

bindings::V8SetReturnValue(info, V8SVGAElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGAngleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGAngle_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGAngle");

bindings::V8SetReturnValue(info, V8SVGAngle::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGAnimateElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGAnimateElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGAnimateElement");

bindings::V8SetReturnValue(info, V8SVGAnimateElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGAnimateMotionElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGAnimateMotionElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGAnimateMotionElement");

bindings::V8SetReturnValue(info, V8SVGAnimateMotionElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGAnimateTransformElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGAnimateTransformElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGAnimateTransformElement");

bindings::V8SetReturnValue(info, V8SVGAnimateTransformElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGAnimatedAngleExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGAnimatedAngle_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGAnimatedAngle");

bindings::V8SetReturnValue(info, V8SVGAnimatedAngle::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGAnimatedBooleanExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGAnimatedBoolean_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGAnimatedBoolean");

bindings::V8SetReturnValue(info, V8SVGAnimatedBoolean::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGAnimatedEnumerationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGAnimatedEnumeration_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGAnimatedEnumeration");

bindings::V8SetReturnValue(info, V8SVGAnimatedEnumeration::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGAnimatedIntegerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGAnimatedInteger_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGAnimatedInteger");

bindings::V8SetReturnValue(info, V8SVGAnimatedInteger::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGAnimatedLengthExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGAnimatedLength_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGAnimatedLength");

bindings::V8SetReturnValue(info, V8SVGAnimatedLength::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGAnimatedLengthListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGAnimatedLengthList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGAnimatedLengthList");

bindings::V8SetReturnValue(info, V8SVGAnimatedLengthList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGAnimatedNumberExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGAnimatedNumber_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGAnimatedNumber");

bindings::V8SetReturnValue(info, V8SVGAnimatedNumber::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGAnimatedNumberListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGAnimatedNumberList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGAnimatedNumberList");

bindings::V8SetReturnValue(info, V8SVGAnimatedNumberList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGAnimatedPreserveAspectRatioExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGAnimatedPreserveAspectRatio_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGAnimatedPreserveAspectRatio");

bindings::V8SetReturnValue(info, V8SVGAnimatedPreserveAspectRatio::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGAnimatedRectExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGAnimatedRect_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGAnimatedRect");

bindings::V8SetReturnValue(info, V8SVGAnimatedRect::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGAnimatedStringExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGAnimatedString_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGAnimatedString");

bindings::V8SetReturnValue(info, V8SVGAnimatedString::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGAnimatedTransformListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGAnimatedTransformList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGAnimatedTransformList");

bindings::V8SetReturnValue(info, V8SVGAnimatedTransformList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGAnimationElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGAnimationElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGAnimationElement");

bindings::V8SetReturnValue(info, V8SVGAnimationElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGCircleElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGCircleElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGCircleElement");

bindings::V8SetReturnValue(info, V8SVGCircleElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGClipPathElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGClipPathElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGClipPathElement");

bindings::V8SetReturnValue(info, V8SVGClipPathElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGComponentTransferFunctionElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGComponentTransferFunctionElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGComponentTransferFunctionElement");

bindings::V8SetReturnValue(info, V8SVGComponentTransferFunctionElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGDefsElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGDefsElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGDefsElement");

bindings::V8SetReturnValue(info, V8SVGDefsElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGDescElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGDescElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGDescElement");

bindings::V8SetReturnValue(info, V8SVGDescElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGElement");

bindings::V8SetReturnValue(info, V8SVGElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGEllipseElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGEllipseElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGEllipseElement");

bindings::V8SetReturnValue(info, V8SVGEllipseElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFEBlendElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFEBlendElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFEBlendElement");

bindings::V8SetReturnValue(info, V8SVGFEBlendElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFEColorMatrixElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFEColorMatrixElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFEColorMatrixElement");

bindings::V8SetReturnValue(info, V8SVGFEColorMatrixElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFEComponentTransferElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFEComponentTransferElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFEComponentTransferElement");

bindings::V8SetReturnValue(info, V8SVGFEComponentTransferElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFECompositeElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFECompositeElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFECompositeElement");

bindings::V8SetReturnValue(info, V8SVGFECompositeElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFEConvolveMatrixElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFEConvolveMatrixElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFEConvolveMatrixElement");

bindings::V8SetReturnValue(info, V8SVGFEConvolveMatrixElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFEDiffuseLightingElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFEDiffuseLightingElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFEDiffuseLightingElement");

bindings::V8SetReturnValue(info, V8SVGFEDiffuseLightingElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFEDisplacementMapElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFEDisplacementMapElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFEDisplacementMapElement");

bindings::V8SetReturnValue(info, V8SVGFEDisplacementMapElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFEDistantLightElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFEDistantLightElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFEDistantLightElement");

bindings::V8SetReturnValue(info, V8SVGFEDistantLightElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFEDropShadowElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFEDropShadowElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFEDropShadowElement");

bindings::V8SetReturnValue(info, V8SVGFEDropShadowElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFEFloodElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFEFloodElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFEFloodElement");

bindings::V8SetReturnValue(info, V8SVGFEFloodElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFEFuncAElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFEFuncAElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFEFuncAElement");

bindings::V8SetReturnValue(info, V8SVGFEFuncAElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFEFuncBElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFEFuncBElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFEFuncBElement");

bindings::V8SetReturnValue(info, V8SVGFEFuncBElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFEFuncGElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFEFuncGElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFEFuncGElement");

bindings::V8SetReturnValue(info, V8SVGFEFuncGElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFEFuncRElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFEFuncRElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFEFuncRElement");

bindings::V8SetReturnValue(info, V8SVGFEFuncRElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFEGaussianBlurElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFEGaussianBlurElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFEGaussianBlurElement");

bindings::V8SetReturnValue(info, V8SVGFEGaussianBlurElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFEImageElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFEImageElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFEImageElement");

bindings::V8SetReturnValue(info, V8SVGFEImageElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFEMergeElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFEMergeElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFEMergeElement");

bindings::V8SetReturnValue(info, V8SVGFEMergeElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFEMergeNodeElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFEMergeNodeElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFEMergeNodeElement");

bindings::V8SetReturnValue(info, V8SVGFEMergeNodeElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFEMorphologyElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFEMorphologyElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFEMorphologyElement");

bindings::V8SetReturnValue(info, V8SVGFEMorphologyElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFEOffsetElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFEOffsetElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFEOffsetElement");

bindings::V8SetReturnValue(info, V8SVGFEOffsetElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFEPointLightElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFEPointLightElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFEPointLightElement");

bindings::V8SetReturnValue(info, V8SVGFEPointLightElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFESpecularLightingElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFESpecularLightingElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFESpecularLightingElement");

bindings::V8SetReturnValue(info, V8SVGFESpecularLightingElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFESpotLightElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFESpotLightElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFESpotLightElement");

bindings::V8SetReturnValue(info, V8SVGFESpotLightElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFETileElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFETileElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFETileElement");

bindings::V8SetReturnValue(info, V8SVGFETileElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFETurbulenceElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFETurbulenceElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFETurbulenceElement");

bindings::V8SetReturnValue(info, V8SVGFETurbulenceElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGFilterElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGFilterElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGFilterElement");

bindings::V8SetReturnValue(info, V8SVGFilterElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGForeignObjectElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGForeignObjectElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGForeignObjectElement");

bindings::V8SetReturnValue(info, V8SVGForeignObjectElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGGElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGGElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGGElement");

bindings::V8SetReturnValue(info, V8SVGGElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGGeometryElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGGeometryElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGGeometryElement");

bindings::V8SetReturnValue(info, V8SVGGeometryElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGGradientElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGGradientElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGGradientElement");

bindings::V8SetReturnValue(info, V8SVGGradientElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGGraphicsElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGGraphicsElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGGraphicsElement");

bindings::V8SetReturnValue(info, V8SVGGraphicsElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGImageElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGImageElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGImageElement");

bindings::V8SetReturnValue(info, V8SVGImageElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGLengthExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGLength_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGLength");

bindings::V8SetReturnValue(info, V8SVGLength::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGLengthListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGLengthList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGLengthList");

bindings::V8SetReturnValue(info, V8SVGLengthList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGLineElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGLineElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGLineElement");

bindings::V8SetReturnValue(info, V8SVGLineElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGLinearGradientElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGLinearGradientElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGLinearGradientElement");

bindings::V8SetReturnValue(info, V8SVGLinearGradientElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGMPathElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGMPathElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGMPathElement");

bindings::V8SetReturnValue(info, V8SVGMPathElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGMarkerElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGMarkerElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGMarkerElement");

bindings::V8SetReturnValue(info, V8SVGMarkerElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGMaskElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGMaskElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGMaskElement");

bindings::V8SetReturnValue(info, V8SVGMaskElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGMatrixExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGMatrix_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGMatrix");

bindings::V8SetReturnValue(info, V8SVGMatrix::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGMetadataElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGMetadataElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGMetadataElement");

bindings::V8SetReturnValue(info, V8SVGMetadataElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGNumberExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGNumber_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGNumber");

bindings::V8SetReturnValue(info, V8SVGNumber::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGNumberListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGNumberList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGNumberList");

bindings::V8SetReturnValue(info, V8SVGNumberList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGPathElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGPathElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGPathElement");

bindings::V8SetReturnValue(info, V8SVGPathElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGPatternElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGPatternElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGPatternElement");

bindings::V8SetReturnValue(info, V8SVGPatternElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGPointExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGPoint_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGPoint");

bindings::V8SetReturnValue(info, V8SVGPoint::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGPointListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGPointList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGPointList");

bindings::V8SetReturnValue(info, V8SVGPointList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGPolygonElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGPolygonElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGPolygonElement");

bindings::V8SetReturnValue(info, V8SVGPolygonElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGPolylineElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGPolylineElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGPolylineElement");

bindings::V8SetReturnValue(info, V8SVGPolylineElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGPreserveAspectRatioExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGPreserveAspectRatio_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGPreserveAspectRatio");

bindings::V8SetReturnValue(info, V8SVGPreserveAspectRatio::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGRadialGradientElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGRadialGradientElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGRadialGradientElement");

bindings::V8SetReturnValue(info, V8SVGRadialGradientElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGRectExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGRect_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGRect");

bindings::V8SetReturnValue(info, V8SVGRect::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGRectElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGRectElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGRectElement");

bindings::V8SetReturnValue(info, V8SVGRectElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGSVGElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGSVGElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGSVGElement");

bindings::V8SetReturnValue(info, V8SVGSVGElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGScriptElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGScriptElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGScriptElement");

bindings::V8SetReturnValue(info, V8SVGScriptElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGSetElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGSetElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGSetElement");

bindings::V8SetReturnValue(info, V8SVGSetElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGStopElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGStopElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGStopElement");

bindings::V8SetReturnValue(info, V8SVGStopElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGStringListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGStringList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGStringList");

bindings::V8SetReturnValue(info, V8SVGStringList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGStyleElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGStyleElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGStyleElement");

bindings::V8SetReturnValue(info, V8SVGStyleElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGSwitchElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGSwitchElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGSwitchElement");

bindings::V8SetReturnValue(info, V8SVGSwitchElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGSymbolElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGSymbolElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGSymbolElement");

bindings::V8SetReturnValue(info, V8SVGSymbolElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGTSpanElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGTSpanElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGTSpanElement");

bindings::V8SetReturnValue(info, V8SVGTSpanElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGTextContentElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGTextContentElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGTextContentElement");

bindings::V8SetReturnValue(info, V8SVGTextContentElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGTextElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGTextElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGTextElement");

bindings::V8SetReturnValue(info, V8SVGTextElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGTextPathElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGTextPathElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGTextPathElement");

bindings::V8SetReturnValue(info, V8SVGTextPathElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGTextPositioningElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGTextPositioningElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGTextPositioningElement");

bindings::V8SetReturnValue(info, V8SVGTextPositioningElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGTitleElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGTitleElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGTitleElement");

bindings::V8SetReturnValue(info, V8SVGTitleElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGTransformExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGTransform_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGTransform");

bindings::V8SetReturnValue(info, V8SVGTransform::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGTransformListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGTransformList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGTransformList");

bindings::V8SetReturnValue(info, V8SVGTransformList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGUnitTypesExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGUnitTypes_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGUnitTypes");

bindings::V8SetReturnValue(info, V8SVGUnitTypes::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGUseElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGUseElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGUseElement");

bindings::V8SetReturnValue(info, V8SVGUseElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SVGViewElementExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SVGViewElement_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SVGViewElement");

bindings::V8SetReturnValue(info, V8SVGViewElement::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SanitizerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Sanitizer_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Sanitizer");

bindings::V8SetReturnValue(info, V8Sanitizer::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SchedulerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Scheduler_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Scheduler");

bindings::V8SetReturnValue(info, V8Scheduler::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SchedulingExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Scheduling_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Scheduling");

bindings::V8SetReturnValue(info, V8Scheduling::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ScreenExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Screen_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Screen");

bindings::V8SetReturnValue(info, V8Screen::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ScreenDetailedExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ScreenDetailed_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ScreenDetailed");

bindings::V8SetReturnValue(info, V8ScreenDetailed::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ScreenDetailsExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ScreenDetails_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ScreenDetails");

bindings::V8SetReturnValue(info, V8ScreenDetails::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ScreenOrientationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ScreenOrientation_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ScreenOrientation");

bindings::V8SetReturnValue(info, V8ScreenOrientation::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ScriptProcessorNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ScriptProcessorNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ScriptProcessorNode");

bindings::V8SetReturnValue(info, V8ScriptProcessorNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ScrollStateExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ScrollState_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ScrollState");

bindings::V8SetReturnValue(info, V8ScrollState::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ScrollTimelineExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ScrollTimeline_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ScrollTimeline");

bindings::V8SetReturnValue(info, V8ScrollTimeline::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SecurityPolicyViolationEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SecurityPolicyViolationEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SecurityPolicyViolationEvent");

bindings::V8SetReturnValue(info, V8SecurityPolicyViolationEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SelectionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Selection_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Selection");

bindings::V8SetReturnValue(info, V8Selection::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SelectorDirectiveExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SelectorDirective_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SelectorDirective");

bindings::V8SetReturnValue(info, V8SelectorDirective::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SensorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Sensor_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Sensor");

bindings::V8SetReturnValue(info, V8Sensor::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SensorErrorEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SensorErrorEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SensorErrorEvent");

bindings::V8SetReturnValue(info, V8SensorErrorEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ServiceWorkerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ServiceWorker_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ServiceWorker");

bindings::V8SetReturnValue(info, V8ServiceWorker::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ServiceWorkerContainerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ServiceWorkerContainer_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ServiceWorkerContainer");

bindings::V8SetReturnValue(info, V8ServiceWorkerContainer::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ServiceWorkerRegistrationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ServiceWorkerRegistration_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ServiceWorkerRegistration");

bindings::V8SetReturnValue(info, V8ServiceWorkerRegistration::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ShadowRootExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ShadowRoot_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ShadowRoot");

bindings::V8SetReturnValue(info, V8ShadowRoot::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SharedStorageExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SharedStorage_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SharedStorage");

bindings::V8SetReturnValue(info, V8SharedStorage::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SharedStorageWorkletExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SharedStorageWorklet_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SharedStorageWorklet");

bindings::V8SetReturnValue(info, V8SharedStorageWorklet::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SharedWorkerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SharedWorker_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SharedWorker");

bindings::V8SetReturnValue(info, V8SharedWorker::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SourceBufferExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SourceBuffer_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SourceBuffer");

bindings::V8SetReturnValue(info, V8SourceBuffer::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SourceBufferListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SourceBufferList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SourceBufferList");

bindings::V8SetReturnValue(info, V8SourceBufferList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SpeechSynthesisErrorEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SpeechSynthesisErrorEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SpeechSynthesisErrorEvent");

bindings::V8SetReturnValue(info, V8SpeechSynthesisErrorEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SpeechSynthesisEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SpeechSynthesisEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SpeechSynthesisEvent");

bindings::V8SetReturnValue(info, V8SpeechSynthesisEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SpeechSynthesisUtteranceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SpeechSynthesisUtterance_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SpeechSynthesisUtterance");

bindings::V8SetReturnValue(info, V8SpeechSynthesisUtterance::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void StaticRangeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_StaticRange_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.StaticRange");

bindings::V8SetReturnValue(info, V8StaticRange::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void StereoPannerNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_StereoPannerNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.StereoPannerNode");

bindings::V8SetReturnValue(info, V8StereoPannerNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void StorageExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Storage_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Storage");

bindings::V8SetReturnValue(info, V8Storage::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void StorageBucketExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_StorageBucket_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.StorageBucket");

bindings::V8SetReturnValue(info, V8StorageBucket::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void StorageBucketManagerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_StorageBucketManager_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.StorageBucketManager");

bindings::V8SetReturnValue(info, V8StorageBucketManager::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void StorageEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_StorageEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.StorageEvent");

bindings::V8SetReturnValue(info, V8StorageEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void StorageManagerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_StorageManager_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.StorageManager");

bindings::V8SetReturnValue(info, V8StorageManager::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void StylePropertyMapExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_StylePropertyMap_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.StylePropertyMap");

bindings::V8SetReturnValue(info, V8StylePropertyMap::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void StylePropertyMapReadOnlyExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_StylePropertyMapReadOnly_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.StylePropertyMapReadOnly");

bindings::V8SetReturnValue(info, V8StylePropertyMapReadOnly::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void StyleSheetExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_StyleSheet_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.StyleSheet");

bindings::V8SetReturnValue(info, V8StyleSheet::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void StyleSheetListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_StyleSheetList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.StyleSheetList");

bindings::V8SetReturnValue(info, V8StyleSheetList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SubAppsExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SubApps_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SubApps");

bindings::V8SetReturnValue(info, V8SubApps::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SubmitEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SubmitEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SubmitEvent");

bindings::V8SetReturnValue(info, V8SubmitEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SubtleCryptoExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SubtleCrypto_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SubtleCrypto");

bindings::V8SetReturnValue(info, V8SubtleCrypto::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void SyncManagerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SyncManager_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.SyncManager");

bindings::V8SetReturnValue(info, V8SyncManager::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TaskAttributionTimingExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TaskAttributionTiming_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TaskAttributionTiming");

bindings::V8SetReturnValue(info, V8TaskAttributionTiming::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TaskControllerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TaskController_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TaskController");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kTaskControllerConstructor);

bindings::V8SetReturnValue(info, V8TaskController::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TaskPriorityChangeEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TaskPriorityChangeEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TaskPriorityChangeEvent");

bindings::V8SetReturnValue(info, V8TaskPriorityChangeEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TaskSignalExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TaskSignal_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TaskSignal");

bindings::V8SetReturnValue(info, V8TaskSignal::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TextExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Text_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Text");

bindings::V8SetReturnValue(info, V8Text::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TextDecoderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TextDecoder_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TextDecoder");

bindings::V8SetReturnValue(info, V8TextDecoder::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TextDecoderStreamExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TextDecoderStream_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TextDecoderStream");

bindings::V8SetReturnValue(info, V8TextDecoderStream::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TextDetectorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TextDetector_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TextDetector");

bindings::V8SetReturnValue(info, V8TextDetector::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TextDirectiveExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TextDirective_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TextDirective");

bindings::V8SetReturnValue(info, V8TextDirective::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TextEncoderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TextEncoder_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TextEncoder");

bindings::V8SetReturnValue(info, V8TextEncoder::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TextEncoderStreamExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TextEncoderStream_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TextEncoderStream");

bindings::V8SetReturnValue(info, V8TextEncoderStream::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TextEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TextEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TextEvent");

bindings::V8SetReturnValue(info, V8TextEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TextFormatExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TextFormat_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TextFormat");

bindings::V8SetReturnValue(info, V8TextFormat::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TextFormatUpdateEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TextFormatUpdateEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TextFormatUpdateEvent");

bindings::V8SetReturnValue(info, V8TextFormatUpdateEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TextMetricsExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TextMetrics_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TextMetrics");

bindings::V8SetReturnValue(info, V8TextMetrics::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TextTrackExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TextTrack_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TextTrack");

bindings::V8SetReturnValue(info, V8TextTrack::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TextTrackCueExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TextTrackCue_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TextTrackCue");

bindings::V8SetReturnValue(info, V8TextTrackCue::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TextTrackCueListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TextTrackCueList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TextTrackCueList");

bindings::V8SetReturnValue(info, V8TextTrackCueList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TextTrackListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TextTrackList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TextTrackList");

bindings::V8SetReturnValue(info, V8TextTrackList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TextUpdateEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TextUpdateEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TextUpdateEvent");

bindings::V8SetReturnValue(info, V8TextUpdateEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TimeRangesExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TimeRanges_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TimeRanges");

bindings::V8SetReturnValue(info, V8TimeRanges::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TimestampTriggerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TimestampTrigger_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TimestampTrigger");

bindings::V8SetReturnValue(info, V8TimestampTrigger::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TouchExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Touch_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Touch");

bindings::V8SetReturnValue(info, V8Touch::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TouchEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TouchEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TouchEvent");

bindings::V8SetReturnValue(info, V8TouchEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TouchListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TouchList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TouchList");

bindings::V8SetReturnValue(info, V8TouchList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TrackDefaultExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TrackDefault_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TrackDefault");

bindings::V8SetReturnValue(info, V8TrackDefault::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TrackDefaultListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TrackDefaultList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TrackDefaultList");

bindings::V8SetReturnValue(info, V8TrackDefaultList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TrackEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TrackEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TrackEvent");

bindings::V8SetReturnValue(info, V8TrackEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TransformStreamExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TransformStream_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TransformStream");

bindings::V8SetReturnValue(info, V8TransformStream::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TransformStreamDefaultControllerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TransformStreamDefaultController_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TransformStreamDefaultController");

bindings::V8SetReturnValue(info, V8TransformStreamDefaultController::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TransitionEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TransitionEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TransitionEvent");

bindings::V8SetReturnValue(info, V8TransitionEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TreeWalkerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TreeWalker_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TreeWalker");

bindings::V8SetReturnValue(info, V8TreeWalker::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TrustedHTMLExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TrustedHTML_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TrustedHTML");

bindings::V8SetReturnValue(info, V8TrustedHTML::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TrustedScriptExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TrustedScript_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TrustedScript");

bindings::V8SetReturnValue(info, V8TrustedScript::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TrustedScriptURLExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TrustedScriptURL_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TrustedScriptURL");

bindings::V8SetReturnValue(info, V8TrustedScriptURL::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TrustedTypePolicyExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TrustedTypePolicy_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TrustedTypePolicy");

bindings::V8SetReturnValue(info, V8TrustedTypePolicy::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void TrustedTypePolicyFactoryExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_TrustedTypePolicyFactory_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.TrustedTypePolicyFactory");

bindings::V8SetReturnValue(info, V8TrustedTypePolicyFactory::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void UIEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_UIEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.UIEvent");

bindings::V8SetReturnValue(info, V8UIEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void URLExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_URL_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.URL");

bindings::V8SetReturnValue(info, V8URL::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void URLPatternExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_URLPattern_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.URLPattern");

bindings::V8SetReturnValue(info, V8URLPattern::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void URLSearchParamsExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_URLSearchParams_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.URLSearchParams");

bindings::V8SetReturnValue(info, V8URLSearchParams::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void USBExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_USB_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.USB");

bindings::V8SetReturnValue(info, V8USB::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void USBAlternateInterfaceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_USBAlternateInterface_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.USBAlternateInterface");

bindings::V8SetReturnValue(info, V8USBAlternateInterface::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void USBConfigurationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_USBConfiguration_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.USBConfiguration");

bindings::V8SetReturnValue(info, V8USBConfiguration::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void USBConnectionEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_USBConnectionEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.USBConnectionEvent");

bindings::V8SetReturnValue(info, V8USBConnectionEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void USBDeviceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_USBDevice_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.USBDevice");

bindings::V8SetReturnValue(info, V8USBDevice::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void USBEndpointExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_USBEndpoint_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.USBEndpoint");

bindings::V8SetReturnValue(info, V8USBEndpoint::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void USBInTransferResultExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_USBInTransferResult_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.USBInTransferResult");

bindings::V8SetReturnValue(info, V8USBInTransferResult::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void USBInterfaceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_USBInterface_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.USBInterface");

bindings::V8SetReturnValue(info, V8USBInterface::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void USBIsochronousInTransferPacketExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_USBIsochronousInTransferPacket_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.USBIsochronousInTransferPacket");

bindings::V8SetReturnValue(info, V8USBIsochronousInTransferPacket::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void USBIsochronousInTransferResultExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_USBIsochronousInTransferResult_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.USBIsochronousInTransferResult");

bindings::V8SetReturnValue(info, V8USBIsochronousInTransferResult::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void USBIsochronousOutTransferPacketExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_USBIsochronousOutTransferPacket_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.USBIsochronousOutTransferPacket");

bindings::V8SetReturnValue(info, V8USBIsochronousOutTransferPacket::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void USBIsochronousOutTransferResultExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_USBIsochronousOutTransferResult_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.USBIsochronousOutTransferResult");

bindings::V8SetReturnValue(info, V8USBIsochronousOutTransferResult::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void USBOutTransferResultExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_USBOutTransferResult_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.USBOutTransferResult");

bindings::V8SetReturnValue(info, V8USBOutTransferResult::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void UserActivationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_UserActivation_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.UserActivation");

bindings::V8SetReturnValue(info, V8UserActivation::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void VTTCueExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_VTTCue_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.VTTCue");

bindings::V8SetReturnValue(info, V8VTTCue::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void VTTRegionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_VTTRegion_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.VTTRegion");

bindings::V8SetReturnValue(info, V8VTTRegion::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ValidityStateExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ValidityState_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ValidityState");

bindings::V8SetReturnValue(info, V8ValidityState::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void VideoColorSpaceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_VideoColorSpace_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.VideoColorSpace");

bindings::V8SetReturnValue(info, V8VideoColorSpace::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void VideoDecoderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_VideoDecoder_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.VideoDecoder");

bindings::V8SetReturnValue(info, V8VideoDecoder::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void VideoEncoderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_VideoEncoder_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.VideoEncoder");

bindings::V8SetReturnValue(info, V8VideoEncoder::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void VideoFrameExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_VideoFrame_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.VideoFrame");

bindings::V8SetReturnValue(info, V8VideoFrame::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void VideoPlaybackQualityExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_VideoPlaybackQuality_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.VideoPlaybackQuality");

bindings::V8SetReturnValue(info, V8VideoPlaybackQuality::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void VideoTrackExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_VideoTrack_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.VideoTrack");

bindings::V8SetReturnValue(info, V8VideoTrack::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void VideoTrackGeneratorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_VideoTrackGenerator_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.VideoTrackGenerator");

bindings::V8SetReturnValue(info, V8VideoTrackGenerator::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void VideoTrackListExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_VideoTrackList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.VideoTrackList");

bindings::V8SetReturnValue(info, V8VideoTrackList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void ViewTimelineExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_ViewTimeline_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.ViewTimeline");

bindings::V8SetReturnValue(info, V8ViewTimeline::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void VirtualKeyboardExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_VirtualKeyboard_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.VirtualKeyboard");

bindings::V8SetReturnValue(info, V8VirtualKeyboard::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void VirtualKeyboardGeometryChangeEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_VirtualKeyboardGeometryChangeEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.VirtualKeyboardGeometryChangeEvent");

bindings::V8SetReturnValue(info, V8VirtualKeyboardGeometryChangeEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void VisibilityStateEntryExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_VisibilityStateEntry_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.VisibilityStateEntry");

bindings::V8SetReturnValue(info, V8VisibilityStateEntry::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void VisualViewportExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_VisualViewport_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.VisualViewport");

bindings::V8SetReturnValue(info, V8VisualViewport::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WakeLockExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WakeLock_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WakeLock");

bindings::V8SetReturnValue(info, V8WakeLock::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WakeLockSentinelExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WakeLockSentinel_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WakeLockSentinel");

bindings::V8SetReturnValue(info, V8WakeLockSentinel::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WaveShaperNodeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WaveShaperNode_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WaveShaperNode");

bindings::V8SetReturnValue(info, V8WaveShaperNode::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebGL2RenderingContextExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebGL2RenderingContext_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebGL2RenderingContext");

bindings::V8SetReturnValue(info, V8WebGL2RenderingContext::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebGLActiveInfoExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebGLActiveInfo_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebGLActiveInfo");

bindings::V8SetReturnValue(info, V8WebGLActiveInfo::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebGLBufferExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebGLBuffer_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebGLBuffer");

bindings::V8SetReturnValue(info, V8WebGLBuffer::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebGLContextEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebGLContextEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebGLContextEvent");

bindings::V8SetReturnValue(info, V8WebGLContextEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebGLFramebufferExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebGLFramebuffer_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebGLFramebuffer");

bindings::V8SetReturnValue(info, V8WebGLFramebuffer::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebGLProgramExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebGLProgram_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebGLProgram");

bindings::V8SetReturnValue(info, V8WebGLProgram::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebGLQueryExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebGLQuery_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebGLQuery");

bindings::V8SetReturnValue(info, V8WebGLQuery::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebGLRenderbufferExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebGLRenderbuffer_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebGLRenderbuffer");

bindings::V8SetReturnValue(info, V8WebGLRenderbuffer::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebGLRenderingContextExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebGLRenderingContext_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebGLRenderingContext");

bindings::V8SetReturnValue(info, V8WebGLRenderingContext::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebGLSamplerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebGLSampler_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebGLSampler");

bindings::V8SetReturnValue(info, V8WebGLSampler::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebGLShaderExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebGLShader_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebGLShader");

bindings::V8SetReturnValue(info, V8WebGLShader::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebGLShaderPrecisionFormatExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebGLShaderPrecisionFormat_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebGLShaderPrecisionFormat");

bindings::V8SetReturnValue(info, V8WebGLShaderPrecisionFormat::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebGLSyncExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebGLSync_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebGLSync");

bindings::V8SetReturnValue(info, V8WebGLSync::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebGLTextureExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebGLTexture_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebGLTexture");

bindings::V8SetReturnValue(info, V8WebGLTexture::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebGLTransformFeedbackExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebGLTransformFeedback_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebGLTransformFeedback");

bindings::V8SetReturnValue(info, V8WebGLTransformFeedback::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebGLUniformLocationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebGLUniformLocation_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebGLUniformLocation");

bindings::V8SetReturnValue(info, V8WebGLUniformLocation::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebGLVertexArrayObjectExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebGLVertexArrayObject_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebGLVertexArrayObject");

bindings::V8SetReturnValue(info, V8WebGLVertexArrayObject::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebSocketExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebSocket_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebSocket");

bindings::V8SetReturnValue(info, V8WebSocket::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebSocketStreamExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebSocketStream_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebSocketStream");

bindings::V8SetReturnValue(info, V8WebSocketStream::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebTransportExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebTransport_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebTransport");

bindings::V8SetReturnValue(info, V8WebTransport::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebTransportBidirectionalStreamExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebTransportBidirectionalStream_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebTransportBidirectionalStream");

bindings::V8SetReturnValue(info, V8WebTransportBidirectionalStream::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebTransportDatagramDuplexStreamExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebTransportDatagramDuplexStream_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebTransportDatagramDuplexStream");

bindings::V8SetReturnValue(info, V8WebTransportDatagramDuplexStream::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebTransportErrorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebTransportError_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebTransportError");

bindings::V8SetReturnValue(info, V8WebTransportError::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WheelEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WheelEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WheelEvent");

bindings::V8SetReturnValue(info, V8WheelEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WindowExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Window_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Window");

bindings::V8SetReturnValue(info, V8Window::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WorkerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Worker_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Worker");

bindings::V8SetReturnValue(info, V8Worker::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WorkletExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Worklet_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Worklet");

bindings::V8SetReturnValue(info, V8Worklet::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WorkletAnimationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WorkletAnimation_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WorkletAnimation");

bindings::V8SetReturnValue(info, V8WorkletAnimation::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WritableStreamExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WritableStream_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WritableStream");

bindings::V8SetReturnValue(info, V8WritableStream::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WritableStreamDefaultControllerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WritableStreamDefaultController_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WritableStreamDefaultController");

bindings::V8SetReturnValue(info, V8WritableStreamDefaultController::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WritableStreamDefaultWriterExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WritableStreamDefaultWriter_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WritableStreamDefaultWriter");

bindings::V8SetReturnValue(info, V8WritableStreamDefaultWriter::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XMLDocumentExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XMLDocument_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XMLDocument");

bindings::V8SetReturnValue(info, V8XMLDocument::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XMLHttpRequestExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XMLHttpRequest_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XMLHttpRequest");

bindings::V8SetReturnValue(info, V8XMLHttpRequest::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XMLHttpRequestEventTargetExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XMLHttpRequestEventTarget_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XMLHttpRequestEventTarget");

bindings::V8SetReturnValue(info, V8XMLHttpRequestEventTarget::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XMLHttpRequestUploadExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XMLHttpRequestUpload_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XMLHttpRequestUpload");

bindings::V8SetReturnValue(info, V8XMLHttpRequestUpload::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XMLSerializerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XMLSerializer_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XMLSerializer");

bindings::V8SetReturnValue(info, V8XMLSerializer::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XPathEvaluatorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XPathEvaluator_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XPathEvaluator");

bindings::V8SetReturnValue(info, V8XPathEvaluator::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XPathExpressionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XPathExpression_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XPathExpression");

bindings::V8SetReturnValue(info, V8XPathExpression::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XPathResultExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XPathResult_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XPathResult");

bindings::V8SetReturnValue(info, V8XPathResult::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRAnchorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRAnchor_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRAnchor");

bindings::V8SetReturnValue(info, V8XRAnchor::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRAnchorSetExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRAnchorSet_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRAnchorSet");

bindings::V8SetReturnValue(info, V8XRAnchorSet::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRBoundedReferenceSpaceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRBoundedReferenceSpace_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRBoundedReferenceSpace");

bindings::V8SetReturnValue(info, V8XRBoundedReferenceSpace::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRCPUDepthInformationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRCPUDepthInformation_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRCPUDepthInformation");

bindings::V8SetReturnValue(info, V8XRCPUDepthInformation::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRCameraExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRCamera_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRCamera");

bindings::V8SetReturnValue(info, V8XRCamera::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRDOMOverlayStateExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRDOMOverlayState_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRDOMOverlayState");

bindings::V8SetReturnValue(info, V8XRDOMOverlayState::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRDepthInformationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRDepthInformation_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRDepthInformation");

bindings::V8SetReturnValue(info, V8XRDepthInformation::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRFrameExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRFrame_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRFrame");

bindings::V8SetReturnValue(info, V8XRFrame::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRHandExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRHand_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRHand");

bindings::V8SetReturnValue(info, V8XRHand::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRHitTestResultExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRHitTestResult_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRHitTestResult");

bindings::V8SetReturnValue(info, V8XRHitTestResult::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRHitTestSourceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRHitTestSource_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRHitTestSource");

bindings::V8SetReturnValue(info, V8XRHitTestSource::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRImageTrackingResultExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRImageTrackingResult_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRImageTrackingResult");

bindings::V8SetReturnValue(info, V8XRImageTrackingResult::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRInputSourceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRInputSource_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRInputSource");

bindings::V8SetReturnValue(info, V8XRInputSource::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRInputSourceArrayExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRInputSourceArray_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRInputSourceArray");

bindings::V8SetReturnValue(info, V8XRInputSourceArray::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRInputSourceEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRInputSourceEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRInputSourceEvent");

bindings::V8SetReturnValue(info, V8XRInputSourceEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRInputSourcesChangeEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRInputSourcesChangeEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRInputSourcesChangeEvent");

bindings::V8SetReturnValue(info, V8XRInputSourcesChangeEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRJointPoseExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRJointPose_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRJointPose");

bindings::V8SetReturnValue(info, V8XRJointPose::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRJointSpaceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRJointSpace_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRJointSpace");

bindings::V8SetReturnValue(info, V8XRJointSpace::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRLayerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRLayer_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRLayer");

bindings::V8SetReturnValue(info, V8XRLayer::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRLightEstimateExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRLightEstimate_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRLightEstimate");

bindings::V8SetReturnValue(info, V8XRLightEstimate::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRLightProbeExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRLightProbe_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRLightProbe");

bindings::V8SetReturnValue(info, V8XRLightProbe::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRPlaneExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRPlane_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRPlane");

bindings::V8SetReturnValue(info, V8XRPlane::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRPlaneSetExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRPlaneSet_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRPlaneSet");

bindings::V8SetReturnValue(info, V8XRPlaneSet::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRPoseExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRPose_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRPose");

bindings::V8SetReturnValue(info, V8XRPose::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRRayExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRRay_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRRay");

bindings::V8SetReturnValue(info, V8XRRay::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRReferenceSpaceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRReferenceSpace_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRReferenceSpace");

bindings::V8SetReturnValue(info, V8XRReferenceSpace::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRReferenceSpaceEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRReferenceSpaceEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRReferenceSpaceEvent");

bindings::V8SetReturnValue(info, V8XRReferenceSpaceEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRRenderStateExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRRenderState_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRRenderState");

bindings::V8SetReturnValue(info, V8XRRenderState::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRRigidTransformExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRRigidTransform_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRRigidTransform");

bindings::V8SetReturnValue(info, V8XRRigidTransform::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRSessionExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRSession_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRSession");

bindings::V8SetReturnValue(info, V8XRSession::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRSessionEventExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRSessionEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRSessionEvent");

bindings::V8SetReturnValue(info, V8XRSessionEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRSpaceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRSpace_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRSpace");

bindings::V8SetReturnValue(info, V8XRSpace::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRSystemExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRSystem_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRSystem");

bindings::V8SetReturnValue(info, V8XRSystem::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRTransientInputHitTestResultExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRTransientInputHitTestResult_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRTransientInputHitTestResult");

bindings::V8SetReturnValue(info, V8XRTransientInputHitTestResult::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRTransientInputHitTestSourceExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRTransientInputHitTestSource_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRTransientInputHitTestSource");

bindings::V8SetReturnValue(info, V8XRTransientInputHitTestSource::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRViewExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRView_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRView");

bindings::V8SetReturnValue(info, V8XRView::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRViewerPoseExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRViewerPose_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRViewerPose");

bindings::V8SetReturnValue(info, V8XRViewerPose::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRViewportExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRViewport_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRViewport");

bindings::V8SetReturnValue(info, V8XRViewport::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRWebGLBindingExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRWebGLBinding_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRWebGLBinding");

bindings::V8SetReturnValue(info, V8XRWebGLBinding::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRWebGLDepthInformationExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRWebGLDepthInformation_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRWebGLDepthInformation");

bindings::V8SetReturnValue(info, V8XRWebGLDepthInformation::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XRWebGLLayerExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XRWebGLLayer_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XRWebGLLayer");

bindings::V8SetReturnValue(info, V8XRWebGLLayer::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void XSLTProcessorExposedConstructCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_XSLTProcessor_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.XSLTProcessor");

bindings::V8SetReturnValue(info, V8XSLTProcessor::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebKitCSSMatrixLegacyWindowAliasCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebKitCSSMatrix_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebKitCSSMatrix");

bindings::V8SetReturnValue(info, V8DOMMatrix::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebKitMutationObserverLegacyWindowAliasCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_WebKitMutationObserver_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.WebKitMutationObserver");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kPrefixedMutationObserverConstructor);

bindings::V8SetReturnValue(info, V8MutationObserver::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebkitMediaStreamLegacyWindowAliasCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_webkitMediaStream_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.webkitMediaStream");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_WebkitMediaStream_ConstructorGetter);

bindings::V8SetReturnValue(info, V8MediaStream::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebkitRTCPeerConnectionLegacyWindowAliasCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_webkitRTCPeerConnection_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.webkitRTCPeerConnection");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_WebkitRTCPeerConnection_ConstructorGetter);

bindings::V8SetReturnValue(info, V8RTCPeerConnection::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebkitSpeechGrammarLegacyWindowAliasCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_webkitSpeechGrammar_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.webkitSpeechGrammar");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_WebkitSpeechGrammar_ConstructorGetter);

bindings::V8SetReturnValue(info, V8SpeechGrammar::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebkitSpeechGrammarListLegacyWindowAliasCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_webkitSpeechGrammarList_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.webkitSpeechGrammarList");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_WebkitSpeechGrammarList_ConstructorGetter);

bindings::V8SetReturnValue(info, V8SpeechGrammarList::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebkitSpeechRecognitionLegacyWindowAliasCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_webkitSpeechRecognition_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.webkitSpeechRecognition");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_WebkitSpeechRecognition_ConstructorGetter);

bindings::V8SetReturnValue(info, V8SpeechRecognition::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebkitSpeechRecognitionErrorLegacyWindowAliasCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_webkitSpeechRecognitionError_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.webkitSpeechRecognitionError");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_WebkitSpeechRecognitionError_ConstructorGetter);

bindings::V8SetReturnValue(info, V8SpeechRecognitionErrorEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebkitSpeechRecognitionEventLegacyWindowAliasCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_webkitSpeechRecognitionEvent_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.webkitSpeechRecognitionEvent");
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_WebkitSpeechRecognitionEvent_ConstructorGetter);

bindings::V8SetReturnValue(info, V8SpeechRecognitionEvent::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void WebkitURLLegacyWindowAliasCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_webkitURL_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.webkitURL");

bindings::V8SetReturnValue(info, V8URL::GetWrapperTypeInfo(), bindings::V8ReturnValue::kInterfaceObject);
}

void AudioNamedConstructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_HTMLAudioElement_Audio");
BLINK_BINDINGS_TRACE_EVENT("HTMLAudioElement.Audio");

v8::Isolate* isolate = info.GetIsolate();
if (!info.IsConstructCall()) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kConstructorOperationInvoke;
ExceptionState exception_state(isolate, exception_state_context_type, "Audio");
exception_state.ThrowTypeError(ExceptionMessages::ConstructorCalledAsFunction());
return;
}



HTMLAudioElement* return_value;
do {  // Dummy loop for use of 'break'.
  const int non_undefined_argument_length = bindings::NonUndefinedArgumentLength(info);
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
ExecutionContext* execution_context = current_execution_context;
if (non_undefined_argument_length <= 0) {
  return_value = HTMLAudioElement::CreateForJSConstructor(*bindings::ToDocumentFromExecutionContext(execution_context));
break;
}
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kConstructorOperationInvoke;
ExceptionState exception_state(isolate, exception_state_context_type, "Audio");
auto&& arg1_src = NativeValueTraits<IDLString>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
return_value = HTMLAudioElement::CreateForJSConstructor(*bindings::ToDocumentFromExecutionContext(execution_context), arg1_src);
} while (false);
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Object> v8_wrapper = return_value->AssociateWithWrapper(isolate, V8HTMLAudioElement::GetWrapperTypeInfo(), v8_receiver);
bindings::V8SetReturnValue(info, v8_wrapper);
}

void AudioNamedConstructorPropertyCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Audio_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Audio");

v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.Holder();
static const V8PrivateProperty::SymbolKey kPrivatePropertyNamedConstructor;
auto&& v8_private_named_constructor =
    V8PrivateProperty::GetSymbol(isolate, kPrivatePropertyNamedConstructor);
v8::Local<v8::Value> v8_named_constructor;
if (!v8_private_named_constructor.GetOrUndefined(v8_receiver)
         .ToLocal(&v8_named_constructor)) {
  return;
}
if (!v8_named_constructor->IsUndefined()) {
  bindings::V8SetReturnValue(info, v8_named_constructor);
  return;
}

v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
v8::Local<v8::Value> v8_value;
if (!bindings::CreateNamedConstructorFunction(
         script_state,
         AudioNamedConstructorCallback,
         "Audio",
         0,
         V8HTMLAudioElement::GetWrapperTypeInfo())
     .ToLocal(&v8_value)) {
  return;
}
bindings::V8SetReturnValue(info, v8_value);

v8_private_named_constructor.Set(v8_receiver, v8_value);

}

void ImageNamedConstructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_HTMLImageElement_Image");
BLINK_BINDINGS_TRACE_EVENT("HTMLImageElement.Image");

v8::Isolate* isolate = info.GetIsolate();
if (!info.IsConstructCall()) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kConstructorOperationInvoke;
ExceptionState exception_state(isolate, exception_state_context_type, "Image");
exception_state.ThrowTypeError(ExceptionMessages::ConstructorCalledAsFunction());
return;
}



HTMLImageElement* return_value;
do {  // Dummy loop for use of 'break'.
  const int non_undefined_argument_length = bindings::NonUndefinedArgumentLength(info);
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
ExecutionContext* execution_context = current_execution_context;
if (non_undefined_argument_length <= 0) {
  return_value = HTMLImageElement::CreateForJSConstructor(*bindings::ToDocumentFromExecutionContext(execution_context));
break;
}
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kConstructorOperationInvoke;
ExceptionState exception_state(isolate, exception_state_context_type, "Image");
auto&& arg1_width = NativeValueTraits<IDLOptional<IDLUnsignedLong>>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
if (non_undefined_argument_length <= 1) {
  return_value = HTMLImageElement::CreateForJSConstructor(*bindings::ToDocumentFromExecutionContext(execution_context), arg1_width);
break;
}
auto&& arg2_height = NativeValueTraits<IDLUnsignedLong>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
return_value = HTMLImageElement::CreateForJSConstructor(*bindings::ToDocumentFromExecutionContext(execution_context), arg1_width, arg2_height);
} while (false);
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Object> v8_wrapper = return_value->AssociateWithWrapper(isolate, V8HTMLImageElement::GetWrapperTypeInfo(), v8_receiver);
bindings::V8SetReturnValue(info, v8_wrapper);
}

void ImageNamedConstructorPropertyCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Image_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Image");

v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.Holder();
static const V8PrivateProperty::SymbolKey kPrivatePropertyNamedConstructor;
auto&& v8_private_named_constructor =
    V8PrivateProperty::GetSymbol(isolate, kPrivatePropertyNamedConstructor);
v8::Local<v8::Value> v8_named_constructor;
if (!v8_private_named_constructor.GetOrUndefined(v8_receiver)
         .ToLocal(&v8_named_constructor)) {
  return;
}
if (!v8_named_constructor->IsUndefined()) {
  bindings::V8SetReturnValue(info, v8_named_constructor);
  return;
}

v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
v8::Local<v8::Value> v8_value;
if (!bindings::CreateNamedConstructorFunction(
         script_state,
         ImageNamedConstructorCallback,
         "Image",
         0,
         V8HTMLImageElement::GetWrapperTypeInfo())
     .ToLocal(&v8_value)) {
  return;
}
bindings::V8SetReturnValue(info, v8_value);

v8_private_named_constructor.Set(v8_receiver, v8_value);

}

void OptionNamedConstructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_HTMLOptionElement_Option");
BLINK_BINDINGS_TRACE_EVENT("HTMLOptionElement.Option");

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kConstructorOperationInvoke;
ExceptionState exception_state(isolate, exception_state_context_type, "Option");
if (!info.IsConstructCall()) {
  exception_state.ThrowTypeError(ExceptionMessages::ConstructorCalledAsFunction());
return;
}



HTMLOptionElement* return_value;
do {  // Dummy loop for use of 'break'.
  const int non_undefined_argument_length = bindings::NonUndefinedArgumentLength(info);
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
ExecutionContext* execution_context = current_execution_context;
decltype(NativeValueTraits<IDLString>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_data;
if (info[0]->IsUndefined()) {
  arg1_data = "";
} else {
  arg1_data = NativeValueTraits<IDLString>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
if (non_undefined_argument_length <= 1) {
  return_value = HTMLOptionElement::CreateForJSConstructor(*bindings::ToDocumentFromExecutionContext(execution_context), arg1_data, exception_state);
break;
}
auto&& arg2_value = NativeValueTraits<IDLOptional<IDLString>>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
decltype(NativeValueTraits<IDLBoolean>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg3_default_selected{false};
if (!info[2]->IsUndefined()) {
  arg3_default_selected = NativeValueTraits<IDLBoolean>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
decltype(NativeValueTraits<IDLBoolean>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg4_selected{false};
if (!info[3]->IsUndefined()) {
  arg4_selected = NativeValueTraits<IDLBoolean>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
return_value = HTMLOptionElement::CreateForJSConstructor(*bindings::ToDocumentFromExecutionContext(execution_context), arg1_data, arg2_value, arg3_default_selected, arg4_selected, exception_state);
} while (false);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Object> v8_wrapper = return_value->AssociateWithWrapper(isolate, V8HTMLOptionElement::GetWrapperTypeInfo(), v8_receiver);
bindings::V8SetReturnValue(info, v8_wrapper);
}

void OptionNamedConstructorPropertyCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_Option_ConstructorGetterCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.Option");

v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.Holder();
static const V8PrivateProperty::SymbolKey kPrivatePropertyNamedConstructor;
auto&& v8_private_named_constructor =
    V8PrivateProperty::GetSymbol(isolate, kPrivatePropertyNamedConstructor);
v8::Local<v8::Value> v8_named_constructor;
if (!v8_private_named_constructor.GetOrUndefined(v8_receiver)
         .ToLocal(&v8_named_constructor)) {
  return;
}
if (!v8_named_constructor->IsUndefined()) {
  bindings::V8SetReturnValue(info, v8_named_constructor);
  return;
}

v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
v8::Local<v8::Value> v8_value;
if (!bindings::CreateNamedConstructorFunction(
         script_state,
         OptionNamedConstructorCallback,
         "Option",
         0,
         V8HTMLOptionElement::GetWrapperTypeInfo())
     .ToLocal(&v8_value)) {
  return;
}
bindings::V8SetReturnValue(info, v8_value);

v8_private_named_constructor.Set(v8_receiver, v8_value);

}

void AlertOperationOverload1(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_Alert_Method);





v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
blink_receiver->alert(script_state);

}

void AlertOperationOverload2(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_Alert_Method);


if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "alert";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
decltype(NativeValueTraits<IDLString>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_message;
if (LIKELY(info[0]->IsString())) {
  arg1_message.Init(info[0].As<v8::String>());
} else {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "alert";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
arg1_message = NativeValueTraits<IDLString>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
blink_receiver->alert(script_state, arg1_message);

}

void AlertOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_alert");
BLINK_BINDINGS_TRACE_EVENT("Window.alert");

scheduler::CooperativeSchedulingManager::Instance()->Safepoint();

const int arg_count = std::min(info.Length(), 1);
if (arg_count == 1) {
  return AlertOperationOverload2(info);
}
return AlertOperationOverload1(info);
}

void AtobOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_atob");
BLINK_BINDINGS_TRACE_EVENT("Window.atob");




v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "atob";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_atob = NativeValueTraits<IDLString>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& return_value = WindowOrWorkerGlobalScope::atob(*blink_receiver, arg1_atob, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void BlurOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_blur");
BLINK_BINDINGS_TRACE_EVENT("Window.blur");


v8::Local<v8::Object> v8_receiver = info.This();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "blur";
blink_receiver->ReportCoopAccess(property_name);





blink_receiver->blur();

}

void BtoaOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_btoa");
BLINK_BINDINGS_TRACE_EVENT("Window.btoa");




v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "btoa";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_btoa = NativeValueTraits<IDLString>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& return_value = WindowOrWorkerGlobalScope::btoa(*blink_receiver, arg1_btoa, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNonNullable);
}

void CancelAnimationFrameOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_cancelAnimationFrame");
BLINK_BINDINGS_TRACE_EVENT("Window.cancelAnimationFrame");




v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "cancelAnimationFrame";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_handle = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->cancelAnimationFrame(arg1_handle);

}

void CancelIdleCallbackOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_cancelIdleCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.cancelIdleCallback");




v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "cancelIdleCallback";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_handle = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->cancelIdleCallback(arg1_handle);

}

void CaptureEventsOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_captureEvents");
BLINK_BINDINGS_TRACE_EVENT("Window.captureEvents");


v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowCaptureEvents);





v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
blink_receiver->captureEvents();

}

void ClearIntervalOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_clearInterval");
BLINK_BINDINGS_TRACE_EVENT("Window.clearInterval");







v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
decltype(NativeValueTraits<IDLLong>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_handle{0};
if (!info[0]->IsUndefined()) {
  v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "clearInterval";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
arg1_handle = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
WindowOrWorkerGlobalScope::clearInterval(*blink_receiver, arg1_handle);

}

void ClearTimeoutOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_clearTimeout");
BLINK_BINDINGS_TRACE_EVENT("Window.clearTimeout");







v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
decltype(NativeValueTraits<IDLLong>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_handle{0};
if (!info[0]->IsUndefined()) {
  v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "clearTimeout";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
arg1_handle = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
WindowOrWorkerGlobalScope::clearTimeout(*blink_receiver, arg1_handle);

}

void CloseOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_close");
BLINK_BINDINGS_TRACE_EVENT("Window.close");


v8::Local<v8::Object> v8_receiver = info.This();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "close";
blink_receiver->ReportCoopAccess(property_name);





v8::Isolate* isolate = info.GetIsolate();
blink_receiver->close(isolate);

}

void ConfirmOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_confirm");
BLINK_BINDINGS_TRACE_EVENT("Window.confirm");


v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_Confirm_Method);





v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
decltype(NativeValueTraits<IDLString>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_message;
if (LIKELY(info[0]->IsString())) {
  arg1_message.Init(info[0].As<v8::String>());
} else {
  if (info[0]->IsUndefined()) {
  arg1_message = "";
} else {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "confirm";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
arg1_message = NativeValueTraits<IDLString>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
}
auto&& return_value = blink_receiver->confirm(script_state, arg1_message);
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<bool>());
}

void CreateImageBitmapOperationOverload1(const v8::FunctionCallbackInfo<v8::Value>& info) {
  // Promise returning function: Convert a TypeError to a reject promise.
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "createImageBitmap";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
ExceptionToRejectPromiseScope reject_promise_scope(info, exception_state);
if (!V8Window::HasInstance(isolate, v8_receiver)) {
  exception_state.ThrowTypeError("Illegal invocation");
return;
}



if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_image_bitmap = NativeValueTraits<V8UnionBlobOrHTMLCanvasElementOrHTMLImageElementOrHTMLVideoElementOrImageBitmapOrImageDataOrOffscreenCanvasOrSVGImageElementOrVideoFrame>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
decltype(NativeValueTraits<ImageBitmapOptions>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg2_options;
if (info[1]->IsUndefined()) {
  arg2_options = ImageBitmapOptions::Create();
} else {
  arg2_options = NativeValueTraits<ImageBitmapOptions>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
auto&& return_value = ImageBitmapFactories::createImageBitmap(script_state, *blink_receiver, arg1_image_bitmap, arg2_options, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value.V8Value());
}

void CreateImageBitmapOperationOverload2(const v8::FunctionCallbackInfo<v8::Value>& info) {
  // Promise returning function: Convert a TypeError to a reject promise.
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "createImageBitmap";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
ExceptionToRejectPromiseScope reject_promise_scope(info, exception_state);
if (!V8Window::HasInstance(isolate, v8_receiver)) {
  exception_state.ThrowTypeError("Illegal invocation");
return;
}



if (UNLIKELY(info.Length() < 5)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(5, info.Length()));
return;
}



v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_image_bitmap = NativeValueTraits<V8UnionBlobOrHTMLCanvasElementOrHTMLImageElementOrHTMLVideoElementOrImageBitmapOrImageDataOrOffscreenCanvasOrSVGImageElementOrVideoFrame>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_sx = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_sy = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_sw = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg5_sh = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
decltype(NativeValueTraits<ImageBitmapOptions>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg6_options;
if (info[5]->IsUndefined()) {
  arg6_options = ImageBitmapOptions::Create();
} else {
  arg6_options = NativeValueTraits<ImageBitmapOptions>::ArgumentValue(isolate, 5, info[5], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
auto&& return_value = ImageBitmapFactories::createImageBitmap(script_state, *blink_receiver, arg1_image_bitmap, arg2_sx, arg3_sy, arg4_sw, arg5_sh, arg6_options, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value.V8Value());
}

void CreateImageBitmapOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_createImageBitmap");
BLINK_BINDINGS_TRACE_EVENT("Window.createImageBitmap");

scheduler::CooperativeSchedulingManager::Instance()->Safepoint();

const int arg_count = std::min(info.Length(), 6);
if (arg_count == 6) {
  return CreateImageBitmapOperationOverload2(info);
}
if (arg_count == 5) {
  return CreateImageBitmapOperationOverload2(info);
}
if (arg_count == 2) {
  return CreateImageBitmapOperationOverload1(info);
}
if (arg_count == 1) {
  return CreateImageBitmapOperationOverload1(info);
}

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "createImageBitmap";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
ExceptionToRejectPromiseScope reject_promise_scope(info, exception_state);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}
exception_state.ThrowTypeError("Overload resolution failed.");
return;
}

void FetchOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_fetch");
BLINK_BINDINGS_TRACE_EVENT("Window.fetch");

// Promise returning function: Convert a TypeError to a reject promise.
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "fetch";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
ExceptionToRejectPromiseScope reject_promise_scope(info, exception_state);
if (!V8Window::HasInstance(isolate, v8_receiver)) {
  exception_state.ThrowTypeError("Illegal invocation");
return;
}



if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_input = NativeValueTraits<V8UnionRequestOrUSVString>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
decltype(NativeValueTraits<RequestInit>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg2_init;
if (info[1]->IsUndefined()) {
  arg2_init = RequestInit::Create();
} else {
  arg2_init = NativeValueTraits<RequestInit>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
auto&& return_value = GlobalFetch::fetch(script_state, *blink_receiver, arg1_input, arg2_init, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value.V8Value());
}

void FindOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_find");
BLINK_BINDINGS_TRACE_EVENT("Window.find");


v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowFind);





v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
decltype(NativeValueTraits<IDLString>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_string;
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "find";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (info[0]->IsUndefined()) {
  arg1_string = "";
} else {
  arg1_string = NativeValueTraits<IDLString>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
decltype(NativeValueTraits<IDLBoolean>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg2_case_sensitive{false};
if (!info[1]->IsUndefined()) {
  arg2_case_sensitive = NativeValueTraits<IDLBoolean>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
decltype(NativeValueTraits<IDLBoolean>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg3_backwards{false};
if (!info[2]->IsUndefined()) {
  arg3_backwards = NativeValueTraits<IDLBoolean>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
decltype(NativeValueTraits<IDLBoolean>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg4_wrap{false};
if (!info[3]->IsUndefined()) {
  arg4_wrap = NativeValueTraits<IDLBoolean>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
decltype(NativeValueTraits<IDLBoolean>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg5_whole_word{false};
if (!info[4]->IsUndefined()) {
  arg5_whole_word = NativeValueTraits<IDLBoolean>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
decltype(NativeValueTraits<IDLBoolean>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg6_search_in_frames{false};
if (!info[5]->IsUndefined()) {
  arg6_search_in_frames = NativeValueTraits<IDLBoolean>::ArgumentValue(isolate, 5, info[5], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
decltype(NativeValueTraits<IDLBoolean>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg7_show_dialog{false};
if (!info[6]->IsUndefined()) {
  arg7_show_dialog = NativeValueTraits<IDLBoolean>::ArgumentValue(isolate, 6, info[6], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
auto&& return_value = blink_receiver->find(arg1_string, arg2_case_sensitive, arg3_backwards, arg4_wrap, arg5_whole_word, arg6_search_in_frames, arg7_show_dialog);
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<bool>());
}

void FocusOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_focus");
BLINK_BINDINGS_TRACE_EVENT("Window.focus");


v8::Local<v8::Object> v8_receiver = info.This();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "focus";
blink_receiver->ReportCoopAccess(property_name);





v8::Isolate* isolate = info.GetIsolate();
blink_receiver->focus(isolate);

}

void GetComputedAccessibleNodeOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_getComputedAccessibleNode");
BLINK_BINDINGS_TRACE_EVENT("Window.getComputedAccessibleNode");

// Promise returning function: Convert a TypeError to a reject promise.
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "getComputedAccessibleNode";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
ExceptionToRejectPromiseScope reject_promise_scope(info, exception_state);
if (!V8Window::HasInstance(isolate, v8_receiver)) {
  exception_state.ThrowTypeError("Illegal invocation");
return;
}



if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
auto&& arg1_element = NativeValueTraits<Element>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& return_value = blink_receiver->getComputedAccessibleNode(script_state, arg1_element);
bindings::V8SetReturnValue(info, return_value.V8Value());
}

void GetComputedStyleOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_getComputedStyle");
BLINK_BINDINGS_TRACE_EVENT("Window.getComputedStyle");




if (UNLIKELY(info.Length() < 1)) {
  v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "getComputedStyle";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



CSSStyleDeclaration* return_value;
v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
do {  // Dummy loop for use of 'break'.
  const int non_undefined_argument_length = bindings::NonUndefinedArgumentLength(info);
v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "getComputedStyle";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
auto&& arg1_elt = NativeValueTraits<Element>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
if (non_undefined_argument_length <= 1) {
  return_value = blink_receiver->getComputedStyle(arg1_elt);
break;
}
auto&& arg2_pseudo_elt = NativeValueTraits<IDLNullable<IDLString>>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
return_value = blink_receiver->getComputedStyle(arg1_elt, arg2_pseudo_elt);
} while (false);
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void GetDigitalGoodsServiceOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_getDigitalGoodsService");
BLINK_BINDINGS_TRACE_EVENT("Window.getDigitalGoodsService");

// Promise returning function: Convert a TypeError to a reject promise.
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "getDigitalGoodsService";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
ExceptionToRejectPromiseScope reject_promise_scope(info, exception_state);
if (!V8Window::HasInstance(isolate, v8_receiver)) {
  exception_state.ThrowTypeError("Illegal invocation");
return;
}

v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kDigitalGoodsGetDigitalGoodsService);


if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_payment_method = NativeValueTraits<IDLString>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& return_value = DOMWindowDigitalGoods::getDigitalGoodsService(script_state, *blink_receiver, arg1_payment_method, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value.V8Value());
}

void GetLockScreenDataOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_getLockScreenData");
BLINK_BINDINGS_TRACE_EVENT("Window.getLockScreenData");

// Promise returning function: Convert a TypeError to a reject promise.
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
if (!V8Window::HasInstance(isolate, v8_receiver)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "getLockScreenData";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
ExceptionToRejectPromiseScope reject_promise_scope(info, exception_state);
exception_state.ThrowTypeError("Illegal invocation");
return;
}






v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = LockScreenData::getLockScreenData(script_state, *blink_receiver);
bindings::V8SetReturnValue(info, return_value.V8Value());
}

void GetScreenDetailsOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_getScreenDetails");
BLINK_BINDINGS_TRACE_EVENT("Window.getScreenDetails");

// Promise returning function: Convert a TypeError to a reject promise.
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "getScreenDetails";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
ExceptionToRejectPromiseScope reject_promise_scope(info, exception_state);
if (!V8Window::HasInstance(isolate, v8_receiver)) {
  exception_state.ThrowTypeError("Illegal invocation");
return;
}

v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_GetScreenDetails_Method);





v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = WindowScreens::getScreenDetails(script_state, *blink_receiver, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value.V8Value());
}

void GetSelectionOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_getSelection");
BLINK_BINDINGS_TRACE_EVENT("Window.getSelection");







v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& return_value = blink_receiver->getSelection();
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void MatchMediaOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_matchMedia");
BLINK_BINDINGS_TRACE_EVENT("Window.matchMedia");


v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_MatchMedia_Method);


if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "matchMedia";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
decltype(NativeValueTraits<IDLString>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_query;
if (LIKELY(info[0]->IsString())) {
  arg1_query.Init(info[0].As<v8::String>());
} else {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "matchMedia";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
arg1_query = NativeValueTraits<IDLString>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
auto&& return_value = blink_receiver->matchMedia(arg1_query);
bindings::V8SetReturnValue(info, return_value, blink_receiver);
// [HighEntropy]
Dactyloscoper::Record(current_execution_context, WebFeature::kV8Window_MatchMedia_Method);
}

void MoveByOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_moveBy");
BLINK_BINDINGS_TRACE_EVENT("Window.moveBy");


v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowMove);


const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "moveBy";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 2)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(2, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_x = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->moveBy(arg1_x, arg2_y);

}

void MoveToOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_moveTo");
BLINK_BINDINGS_TRACE_EVENT("Window.moveTo");


v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowMove);


const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "moveTo";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 2)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(2, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_x = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->moveTo(arg1_x, arg2_y);

}

void OpenOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_open");
BLINK_BINDINGS_TRACE_EVENT("Window.open");







v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
v8::Isolate* isolate = info.GetIsolate();
decltype(NativeValueTraits<IDLUSVString>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_url;
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "open";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (info[0]->IsUndefined()) {
  arg1_url = "";
} else {
  arg1_url = NativeValueTraits<IDLUSVString>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
decltype(NativeValueTraits<IDLString>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg2_target;
if (info[1]->IsUndefined()) {
  arg2_target = "_blank";
} else {
  arg2_target = NativeValueTraits<IDLString>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
decltype(NativeValueTraits<IDLStringTreatNullAsEmptyString>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg3_features;
if (info[2]->IsUndefined()) {
  arg3_features = "";
} else {
  arg3_features = NativeValueTraits<IDLStringTreatNullAsEmptyString>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
auto&& return_value = blink_receiver->open(isolate, arg1_url, arg2_target, arg3_features, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value, blink_receiver, bindings::V8ReturnValue::kMaybeCrossOriginWindow);
}

void OpenDatabaseOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_openDatabase");
BLINK_BINDINGS_TRACE_EVENT("Window.openDatabase");


v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kOpenWebDatabase);
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
V8PerContextData* per_context_data = script_state->PerContextData();
// [LogActivity], [LogAllWorlds]
if (per_context_data && per_context_data->ActivityLogger()) { per_context_data->ActivityLogger()->LogMethod("Window.openDatabase", info); }


const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "openDatabase";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 4)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(4, info.Length()));
return;
}



Database* return_value;
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
do {  // Dummy loop for use of 'break'.
  const int non_undefined_argument_length = bindings::NonUndefinedArgumentLength(info);
auto&& arg1_name = NativeValueTraits<IDLString>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_version = NativeValueTraits<IDLString>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_display_name = NativeValueTraits<IDLString>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_estimated_size = NativeValueTraits<IDLUnsignedLong>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
if (non_undefined_argument_length <= 4) {
  return_value = DOMWindowWebDatabase::openDatabase(*blink_receiver, arg1_name, arg2_version, arg3_display_name, arg4_estimated_size, exception_state);
break;
}
auto&& arg5_creation_callback = NativeValueTraits<IDLNullable<V8DatabaseCallback>>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
return_value = DOMWindowWebDatabase::openDatabase(*blink_receiver, arg1_name, arg2_version, arg3_display_name, arg4_estimated_size, arg5_creation_callback, exception_state);
} while (false);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value, blink_receiver);
}

void PostMessageOperationOverload1(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
v8::Local<v8::Object> v8_receiver = info.This();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "postMessage";
blink_receiver->ReportCoopAccess(property_name);


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 2)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(2, info.Length()));
return;
}



auto&& arg1_message = NativeValueTraits<IDLAny>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_target_origin = NativeValueTraits<IDLUSVString>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
decltype(NativeValueTraits<IDLSequence<IDLObject>>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg3_transfer;
if (!info[2]->IsUndefined()) {
  arg3_transfer = NativeValueTraits<IDLSequence<IDLObject>>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
blink_receiver->postMessage(isolate, arg1_message, arg2_target_origin, arg3_transfer, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

}

void PostMessageOperationOverload2(const v8::FunctionCallbackInfo<v8::Value>& info) {
  
v8::Local<v8::Object> v8_receiver = info.This();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "postMessage";
blink_receiver->ReportCoopAccess(property_name);


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



auto&& arg1_message = NativeValueTraits<IDLAny>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
decltype(NativeValueTraits<WindowPostMessageOptions>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg2_options;
if (info[1]->IsUndefined()) {
  arg2_options = WindowPostMessageOptions::Create();
} else {
  arg2_options = NativeValueTraits<WindowPostMessageOptions>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
blink_receiver->postMessage(isolate, arg1_message, arg2_options, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

}

void PostMessageOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_postMessage");
BLINK_BINDINGS_TRACE_EVENT("Window.postMessage");

scheduler::CooperativeSchedulingManager::Instance()->Safepoint();

const int arg_count = std::min(info.Length(), 3);
if (arg_count == 3) {
  return PostMessageOperationOverload1(info);
}
if (arg_count == 2) {
  if (info[1]->IsUndefined()) {
  return PostMessageOperationOverload2(info);
}
if (info[1]->IsNullOrUndefined()) {
  return PostMessageOperationOverload2(info);
}
if (info[1]->IsObject()) {
  return PostMessageOperationOverload2(info);
}
return PostMessageOperationOverload1(info);
}
if (arg_count == 1) {
  return PostMessageOperationOverload2(info);
}

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "postMessage";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}
exception_state.ThrowTypeError("Overload resolution failed.");
return;
}

void PrintOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_print");
BLINK_BINDINGS_TRACE_EVENT("Window.print");


v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_Print_Method);





v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
blink_receiver->print(script_state);

}

void PromptOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_prompt");
BLINK_BINDINGS_TRACE_EVENT("Window.prompt");


v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_Prompt_Method);





v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
decltype(NativeValueTraits<IDLString>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_message;
if (LIKELY(info[0]->IsString())) {
  arg1_message.Init(info[0].As<v8::String>());
} else {
  if (info[0]->IsUndefined()) {
  arg1_message = "";
} else {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "prompt";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
arg1_message = NativeValueTraits<IDLString>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
}
decltype(NativeValueTraits<IDLString>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg2_default_value;
if (LIKELY(info[1]->IsString())) {
  arg2_default_value.Init(info[1].As<v8::String>());
} else {
  if (info[1]->IsUndefined()) {
  arg2_default_value = "";
} else {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "prompt";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
arg2_default_value = NativeValueTraits<IDLString>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
}
auto&& return_value = blink_receiver->prompt(script_state, arg1_message, arg2_default_value);
bindings::V8SetReturnValue(info, return_value, isolate, bindings::V8ReturnValue::kNullable);
}

void QueryLocalFontsOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_queryLocalFonts");
BLINK_BINDINGS_TRACE_EVENT("Window.queryLocalFonts");

// Promise returning function: Convert a TypeError to a reject promise.
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "queryLocalFonts";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
ExceptionToRejectPromiseScope reject_promise_scope(info, exception_state);
if (!V8Window::HasInstance(isolate, v8_receiver)) {
  exception_state.ThrowTypeError("Illegal invocation");
return;
}

v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_QueryLocalFonts_Method);





v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
decltype(NativeValueTraits<QueryOptions>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_options;
if (info[0]->IsUndefined()) {
  arg1_options = QueryOptions::Create();
} else {
  arg1_options = NativeValueTraits<QueryOptions>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
auto&& return_value = FontAccess::queryLocalFonts(script_state, *blink_receiver, arg1_options, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value.V8Value());
}

void QueueMicrotaskOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_queueMicrotask");
BLINK_BINDINGS_TRACE_EVENT("Window.queueMicrotask");




if (UNLIKELY(info.Length() < 1)) {
  v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "queueMicrotask";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
decltype(NativeValueTraits<V8VoidFunction>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_callback;
if (LIKELY(info[0]->IsFunction())) {
  arg1_callback = V8VoidFunction::Create(info[0].As<v8::Function>());
} else {
  v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "queueMicrotask";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
arg1_callback = NativeValueTraits<V8VoidFunction>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
blink_receiver->queueMicrotask(arg1_callback);

}

void ReleaseEventsOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_releaseEvents");
BLINK_BINDINGS_TRACE_EVENT("Window.releaseEvents");


v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowReleaseEvents);





v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
blink_receiver->releaseEvents();

}

void ReportErrorOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_reportError");
BLINK_BINDINGS_TRACE_EVENT("Window.reportError");




v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "reportError";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_e = NativeValueTraits<IDLAny>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
WindowOrWorkerGlobalScope::reportError(script_state, *blink_receiver, arg1_e);

}

void RequestAnimationFrameOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_requestAnimationFrame");
BLINK_BINDINGS_TRACE_EVENT("Window.requestAnimationFrame");


v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kUnprefixedRequestAnimationFrame);


if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "requestAnimationFrame";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
decltype(NativeValueTraits<V8FrameRequestCallback>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_callback;
if (LIKELY(info[0]->IsFunction())) {
  arg1_callback = V8FrameRequestCallback::Create(info[0].As<v8::Function>());
} else {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "requestAnimationFrame";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
arg1_callback = NativeValueTraits<V8FrameRequestCallback>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
auto&& return_value = blink_receiver->requestAnimationFrame(arg1_callback);
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int32_t>());
}

void RequestIdleCallbackOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_requestIdleCallback");
BLINK_BINDINGS_TRACE_EVENT("Window.requestIdleCallback");


v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_RequestIdleCallback_Method);


const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "requestIdleCallback";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_callback = NativeValueTraits<V8IdleRequestCallback>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
decltype(NativeValueTraits<IdleRequestOptions>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg2_options;
if (info[1]->IsUndefined()) {
  arg2_options = IdleRequestOptions::Create();
} else {
  arg2_options = NativeValueTraits<IdleRequestOptions>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
auto&& return_value = blink_receiver->requestIdleCallback(arg1_callback, arg2_options);
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int32_t>());
}

void RequestPictureInPictureWindowOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_requestPictureInPictureWindow");
BLINK_BINDINGS_TRACE_EVENT("Window.requestPictureInPictureWindow");

// Promise returning function: Convert a TypeError to a reject promise.
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "requestPictureInPictureWindow";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
ExceptionToRejectPromiseScope reject_promise_scope(info, exception_state);
if (!V8Window::HasInstance(isolate, v8_receiver)) {
  exception_state.ThrowTypeError("Illegal invocation");
return;
}

v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_RequestPictureInPictureWindow_Method);





v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
decltype(NativeValueTraits<PictureInPictureWindowOptions>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_options;
if (info[0]->IsUndefined()) {
  arg1_options = PictureInPictureWindowOptions::Create();
} else {
  arg1_options = NativeValueTraits<PictureInPictureWindowOptions>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
auto&& return_value = WindowPictureInPicture::requestPictureInPictureWindow(script_state, *blink_receiver, arg1_options, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value.V8Value());
}

void ResizeByOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_resizeBy");
BLINK_BINDINGS_TRACE_EVENT("Window.resizeBy");


v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowResize);


const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "resizeBy";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 2)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(2, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_x = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->resizeBy(arg1_x, arg2_y);

}

void ResizeToOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_resizeTo");
BLINK_BINDINGS_TRACE_EVENT("Window.resizeTo");


v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowResize);


const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "resizeTo";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 2)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(2, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_x = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->resizeTo(arg1_x, arg2_y);

}

void ScrollOperationOverload1(const v8::FunctionCallbackInfo<v8::Value>& info) {
  





v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
decltype(NativeValueTraits<ScrollToOptions>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_options;
if (info[0]->IsUndefined()) {
  arg1_options = ScrollToOptions::Create();
} else {
  v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "scroll";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
arg1_options = NativeValueTraits<ScrollToOptions>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
blink_receiver->scroll(arg1_options);

}

void ScrollOperationOverload2(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "scroll";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 2)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(2, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->scroll(arg1_x, arg2_y);

}

void ScrollOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_scroll");
BLINK_BINDINGS_TRACE_EVENT("Window.scroll");

scheduler::CooperativeSchedulingManager::Instance()->Safepoint();

const int arg_count = std::min(info.Length(), 2);
if (arg_count == 2) {
  return ScrollOperationOverload2(info);
}
if (arg_count == 1) {
  return ScrollOperationOverload1(info);
}
return ScrollOperationOverload1(info);
}

void ScrollByOperationOverload1(const v8::FunctionCallbackInfo<v8::Value>& info) {
  





v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
decltype(NativeValueTraits<ScrollToOptions>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_options;
if (info[0]->IsUndefined()) {
  arg1_options = ScrollToOptions::Create();
} else {
  v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "scrollBy";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
arg1_options = NativeValueTraits<ScrollToOptions>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
blink_receiver->scrollBy(arg1_options);

}

void ScrollByOperationOverload2(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "scrollBy";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 2)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(2, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->scrollBy(arg1_x, arg2_y);

}

void ScrollByOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_scrollBy");
BLINK_BINDINGS_TRACE_EVENT("Window.scrollBy");

scheduler::CooperativeSchedulingManager::Instance()->Safepoint();

const int arg_count = std::min(info.Length(), 2);
if (arg_count == 2) {
  return ScrollByOperationOverload2(info);
}
if (arg_count == 1) {
  return ScrollByOperationOverload1(info);
}
return ScrollByOperationOverload1(info);
}

void ScrollToOperationOverload1(const v8::FunctionCallbackInfo<v8::Value>& info) {
  





v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
decltype(NativeValueTraits<ScrollToOptions>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_options;
if (info[0]->IsUndefined()) {
  arg1_options = ScrollToOptions::Create();
} else {
  v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "scrollTo";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
arg1_options = NativeValueTraits<ScrollToOptions>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
blink_receiver->scrollTo(arg1_options);

}

void ScrollToOperationOverload2(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "scrollTo";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 2)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(2, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_x = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_y = NativeValueTraits<IDLUnrestrictedDouble>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->scrollTo(arg1_x, arg2_y);

}

void ScrollToOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_scrollTo");
BLINK_BINDINGS_TRACE_EVENT("Window.scrollTo");

scheduler::CooperativeSchedulingManager::Instance()->Safepoint();

const int arg_count = std::min(info.Length(), 2);
if (arg_count == 2) {
  return ScrollToOperationOverload2(info);
}
if (arg_count == 1) {
  return ScrollToOperationOverload1(info);
}
return ScrollToOperationOverload1(info);
}

void SetIntervalOperationOverload1(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "setInterval";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_handler = NativeValueTraits<V8Function>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
decltype(NativeValueTraits<IDLLong>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg2_timeout{0};
if (!info[1]->IsUndefined()) {
  arg2_timeout = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
auto&& arg3_arguments = bindings::VariadicArgumentsToNativeValues<IDLAny>(isolate, info, 2, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& return_value = WindowOrWorkerGlobalScope::setInterval(script_state, *blink_receiver, arg1_handler, arg2_timeout, arg3_arguments);
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int32_t>());
}

void SetIntervalOperationOverload2(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "setInterval";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
ExecutionContext* execution_context_of_document_tree = bindings::ExecutionContextFromV8Wrappable(blink_receiver);
auto&& arg1_handler = NativeValueTraits<IDLStringStringContextTrustedScript>::ArgumentValue(isolate, 0, info[0], exception_state, execution_context_of_document_tree);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
decltype(NativeValueTraits<IDLLong>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg2_timeout{0};
if (!info[1]->IsUndefined()) {
  arg2_timeout = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
auto&& arg3_arguments = bindings::VariadicArgumentsToNativeValues<IDLAny>(isolate, info, 2, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& return_value = WindowOrWorkerGlobalScope::setInterval(script_state, *blink_receiver, arg1_handler, arg2_timeout, arg3_arguments);
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int32_t>());
}

void SetIntervalOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_setInterval");
BLINK_BINDINGS_TRACE_EVENT("Window.setInterval");

scheduler::CooperativeSchedulingManager::Instance()->Safepoint();

const int arg_count = std::min(info.Length(), 3);
do {  // Dummy loop for use of 'break'.
  v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ExecutionContext* receiver_execution_context = ExecutionContext::From(receiver_context);
ExecutionContext* execution_context = receiver_execution_context;
if ((execution_context->IsWindow() || execution_context->IsWorkerGlobalScope())) {
  if (arg_count == 3) {
  if (execution_context->IsWindow() || execution_context->IsWorkerGlobalScope()) {
  if (info[0]->IsFunction()) {
  return SetIntervalOperationOverload1(info);
}
}
if (execution_context->IsWindow() || execution_context->IsWorkerGlobalScope()) {
  return SetIntervalOperationOverload2(info);
}
break;
}
}
if ((execution_context->IsWindow() || execution_context->IsWorkerGlobalScope())) {
  if (arg_count == 2) {
  if (execution_context->IsWindow() || execution_context->IsWorkerGlobalScope()) {
  if (info[0]->IsFunction()) {
  return SetIntervalOperationOverload1(info);
}
}
if (execution_context->IsWindow() || execution_context->IsWorkerGlobalScope()) {
  return SetIntervalOperationOverload2(info);
}
break;
}
}
if ((execution_context->IsWindow() || execution_context->IsWorkerGlobalScope())) {
  if (arg_count == 1) {
  if (execution_context->IsWindow() || execution_context->IsWorkerGlobalScope()) {
  if (info[0]->IsFunction()) {
  return SetIntervalOperationOverload1(info);
}
}
if (execution_context->IsWindow() || execution_context->IsWorkerGlobalScope()) {
  return SetIntervalOperationOverload2(info);
}
break;
}
}
} while (false);

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "setInterval";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}
exception_state.ThrowTypeError("Overload resolution failed.");
return;
}

void SetTimeoutOperationOverload1(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "setTimeout";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_handler = NativeValueTraits<V8Function>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
decltype(NativeValueTraits<IDLLong>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg2_timeout{0};
if (!info[1]->IsUndefined()) {
  arg2_timeout = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
auto&& arg3_arguments = bindings::VariadicArgumentsToNativeValues<IDLAny>(isolate, info, 2, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& return_value = WindowOrWorkerGlobalScope::setTimeout(script_state, *blink_receiver, arg1_handler, arg2_timeout, arg3_arguments);
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int32_t>());
}

void SetTimeoutOperationOverload2(const v8::FunctionCallbackInfo<v8::Value>& info) {
  


v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "setTimeout";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
ExecutionContext* execution_context_of_document_tree = bindings::ExecutionContextFromV8Wrappable(blink_receiver);
auto&& arg1_handler = NativeValueTraits<IDLStringStringContextTrustedScript>::ArgumentValue(isolate, 0, info[0], exception_state, execution_context_of_document_tree);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
decltype(NativeValueTraits<IDLLong>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg2_timeout{0};
if (!info[1]->IsUndefined()) {
  arg2_timeout = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
auto&& arg3_arguments = bindings::VariadicArgumentsToNativeValues<IDLAny>(isolate, info, 2, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& return_value = WindowOrWorkerGlobalScope::setTimeout(script_state, *blink_receiver, arg1_handler, arg2_timeout, arg3_arguments);
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int32_t>());
}

void SetTimeoutOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_setTimeout");
BLINK_BINDINGS_TRACE_EVENT("Window.setTimeout");

scheduler::CooperativeSchedulingManager::Instance()->Safepoint();

const int arg_count = std::min(info.Length(), 3);
do {  // Dummy loop for use of 'break'.
  v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ExecutionContext* receiver_execution_context = ExecutionContext::From(receiver_context);
ExecutionContext* execution_context = receiver_execution_context;
if ((execution_context->IsWindow() || execution_context->IsWorkerGlobalScope())) {
  if (arg_count == 3) {
  if (execution_context->IsWindow() || execution_context->IsWorkerGlobalScope()) {
  if (info[0]->IsFunction()) {
  return SetTimeoutOperationOverload1(info);
}
}
if (execution_context->IsWindow() || execution_context->IsWorkerGlobalScope()) {
  return SetTimeoutOperationOverload2(info);
}
break;
}
}
if ((execution_context->IsWindow() || execution_context->IsWorkerGlobalScope())) {
  if (arg_count == 2) {
  if (execution_context->IsWindow() || execution_context->IsWorkerGlobalScope()) {
  if (info[0]->IsFunction()) {
  return SetTimeoutOperationOverload1(info);
}
}
if (execution_context->IsWindow() || execution_context->IsWorkerGlobalScope()) {
  return SetTimeoutOperationOverload2(info);
}
break;
}
}
if ((execution_context->IsWindow() || execution_context->IsWorkerGlobalScope())) {
  if (arg_count == 1) {
  if (execution_context->IsWindow() || execution_context->IsWorkerGlobalScope()) {
  if (info[0]->IsFunction()) {
  return SetTimeoutOperationOverload1(info);
}
}
if (execution_context->IsWindow() || execution_context->IsWorkerGlobalScope()) {
  return SetTimeoutOperationOverload2(info);
}
break;
}
}
} while (false);

v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "setTimeout";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}
exception_state.ThrowTypeError("Overload resolution failed.");
return;
}

void ShowDirectoryPickerOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_showDirectoryPicker");
BLINK_BINDINGS_TRACE_EVENT("Window.showDirectoryPicker");

// Promise returning function: Convert a TypeError to a reject promise.
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "showDirectoryPicker";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
ExceptionToRejectPromiseScope reject_promise_scope(info, exception_state);
if (!V8Window::HasInstance(isolate, v8_receiver)) {
  exception_state.ThrowTypeError("Illegal invocation");
return;
}

v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_ShowDirectoryPicker_Method);





v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
decltype(NativeValueTraits<DirectoryPickerOptions>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_options;
if (info[0]->IsUndefined()) {
  arg1_options = DirectoryPickerOptions::Create();
} else {
  arg1_options = NativeValueTraits<DirectoryPickerOptions>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
auto&& return_value = GlobalFileSystemAccess::showDirectoryPicker(script_state, *blink_receiver, arg1_options, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value.V8Value());
}

void ShowOpenFilePickerOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_showOpenFilePicker");
BLINK_BINDINGS_TRACE_EVENT("Window.showOpenFilePicker");

// Promise returning function: Convert a TypeError to a reject promise.
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "showOpenFilePicker";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
ExceptionToRejectPromiseScope reject_promise_scope(info, exception_state);
if (!V8Window::HasInstance(isolate, v8_receiver)) {
  exception_state.ThrowTypeError("Illegal invocation");
return;
}

v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_ShowOpenFilePicker_Method);





v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
decltype(NativeValueTraits<OpenFilePickerOptions>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_options;
if (info[0]->IsUndefined()) {
  arg1_options = OpenFilePickerOptions::Create();
} else {
  arg1_options = NativeValueTraits<OpenFilePickerOptions>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
auto&& return_value = GlobalFileSystemAccess::showOpenFilePicker(script_state, *blink_receiver, arg1_options, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value.V8Value());
}

void ShowSaveFilePickerOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_showSaveFilePicker");
BLINK_BINDINGS_TRACE_EVENT("Window.showSaveFilePicker");

// Promise returning function: Convert a TypeError to a reject promise.
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Object> v8_receiver = info.This();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "showSaveFilePicker";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
ExceptionToRejectPromiseScope reject_promise_scope(info, exception_state);
if (!V8Window::HasInstance(isolate, v8_receiver)) {
  exception_state.ThrowTypeError("Illegal invocation");
return;
}

v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kV8Window_ShowSaveFilePicker_Method);





v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
decltype(NativeValueTraits<SaveFilePickerOptions>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_options;
if (info[0]->IsUndefined()) {
  arg1_options = SaveFilePickerOptions::Create();
} else {
  arg1_options = NativeValueTraits<SaveFilePickerOptions>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
auto&& return_value = GlobalFileSystemAccess::showSaveFilePicker(script_state, *blink_receiver, arg1_options, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
bindings::V8SetReturnValue(info, return_value.V8Value());
}

void StopOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_stop");
BLINK_BINDINGS_TRACE_EVENT("Window.stop");







v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
blink_receiver->stop();

}

void StructuredCloneOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_structuredClone");
BLINK_BINDINGS_TRACE_EVENT("Window.structuredClone");




v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "structuredClone";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Value> v8_return_value;
v8::Local<v8::Object> v8_receiver = info.This();
v8::Local<v8::Context> receiver_context = v8_receiver->GetCreationContextChecked();
ScriptState* receiver_script_state = ScriptState::From(receiver_context);
ScriptState* script_state = receiver_script_state;
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_value = NativeValueTraits<IDLAny>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
decltype(NativeValueTraits<StructuredSerializeOptions>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg2_options;
if (info[1]->IsUndefined()) {
  arg2_options = StructuredSerializeOptions::Create();
} else {
  arg2_options = NativeValueTraits<StructuredSerializeOptions>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
auto&& return_value = WindowOrWorkerGlobalScope::structuredClone(script_state, *blink_receiver, arg1_value, arg2_options, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
if (!ToV8Traits<IDLAny>::ToV8(script_state, return_value).ToLocal(&v8_return_value)) {
  return;
}
bindings::V8SetReturnValue(info, v8_return_value);
}

void WebkitCancelAnimationFrameOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_webkitCancelAnimationFrame");
BLINK_BINDINGS_TRACE_EVENT("Window.webkitCancelAnimationFrame");


v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [DeprecateAs]
Deprecation::CountDeprecation(current_execution_context, WebFeature::kPrefixedCancelAnimationFrame);


const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "webkitCancelAnimationFrame";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 1)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_id = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->cancelAnimationFrame(arg1_id);

}

void WebkitRequestAnimationFrameOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_webkitRequestAnimationFrame");
BLINK_BINDINGS_TRACE_EVENT("Window.webkitRequestAnimationFrame");


v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [DeprecateAs]
Deprecation::CountDeprecation(current_execution_context, WebFeature::kPrefixedRequestAnimationFrame);


if (UNLIKELY(info.Length() < 1)) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "webkitRequestAnimationFrame";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(1, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
decltype(NativeValueTraits<V8FrameRequestCallback>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg1_callback;
if (LIKELY(info[0]->IsFunction())) {
  arg1_callback = V8FrameRequestCallback::Create(info[0].As<v8::Function>());
} else {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "webkitRequestAnimationFrame";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
arg1_callback = NativeValueTraits<V8FrameRequestCallback>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
auto&& return_value = blink_receiver->webkitRequestAnimationFrame(arg1_callback);
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<int32_t>());
}

void WebkitRequestFileSystemOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_webkitRequestFileSystem");
BLINK_BINDINGS_TRACE_EVENT("Window.webkitRequestFileSystem");


v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kRequestFileSystem);


const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "webkitRequestFileSystem";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 3)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(3, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_type = NativeValueTraits<IDLUnsignedShort>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_size = NativeValueTraits<IDLLongLong>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_success_callback = NativeValueTraits<V8FileSystemCallback>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
decltype(NativeValueTraits<IDLNullable<V8ErrorCallback>>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg4_error_callback{nullptr};
if (!info[3]->IsUndefined()) {
  arg4_error_callback = NativeValueTraits<IDLNullable<V8ErrorCallback>>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
DOMWindowFileSystem::webkitRequestFileSystem(*blink_receiver, arg1_type, arg2_size, arg3_success_callback, arg4_error_callback);

}

void WebkitResolveLocalFileSystemURLOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_webkitResolveLocalFileSystemURL");
BLINK_BINDINGS_TRACE_EVENT("Window.webkitResolveLocalFileSystemURL");




v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "Window";
const char* const property_name = "webkitResolveLocalFileSystemURL";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 2)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(2, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
LocalDOMWindow* blink_receiver = To<LocalDOMWindow>(V8Window::ToWrappableUnsafe(v8_receiver));
auto&& arg1_url = NativeValueTraits<IDLString>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_success_callback = NativeValueTraits<V8EntryCallback>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
decltype(NativeValueTraits<IDLNullable<V8ErrorCallback>>::NativeValue(std::declval<v8::Isolate*>(), std::declval<v8::Local<v8::Value>>(), std::declval<ExceptionState&>())) arg3_error_callback{nullptr};
if (!info[2]->IsUndefined()) {
  arg3_error_callback = NativeValueTraits<IDLNullable<V8ErrorCallback>>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
}
DOMWindowFileSystem::webkitResolveLocalFileSystemURL(*blink_receiver, arg1_url, arg2_success_callback, arg3_error_callback);

}

void NamedPropsObjNamedGetterCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NamedPropertiesObject_NamedPropertyGetter");

const AtomicString& blink_property_name = ToCoreAtomicString(v8_property_name.As<v8::String>());
// 3.6.4.1. [[GetOwnProperty]]
// https://webidl.spec.whatwg.org/#named-properties-object-getownproperty
//
// TODO(yukishiino): Update the following hard-coded call to an appropriate
// one.
V8Window::NamedPropertyGetterCustom(blink_property_name, info);

}

void NamedPropsObjNamedSetterCallback(v8::Local<v8::Name> v8_property_name, v8::Local<v8::Value> v8_property_value, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NamedPropertiesObject_NamedPropertySetter");

// 3.6.4.2. [[DefineOwnProperty]]
// https://webidl.spec.whatwg.org/#named-properties-object-defineownproperty
bindings::V8SetReturnValue(info, nullptr);
if (info.ShouldThrowOnError()) {
  ExceptionState exception_state(info.GetIsolate(),
                                 ExceptionContext::Context::kNamedPropertySet,
                                 "Window");
  exception_state.ThrowTypeError("Named property setter is not supported.");
}

}

void NamedPropsObjNamedDeleterCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Boolean>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NamedPropertiesObject_NamedPropertyDeleter");

// 3.6.4.3. [[Delete]]
// https://webidl.spec.whatwg.org/#named-properties-object-delete
bindings::V8SetReturnValue(info, false);
if (info.ShouldThrowOnError()) {
  ExceptionState exception_state(
      info.GetIsolate(),
      ExceptionContext::Context::kNamedPropertyDelete,
      "Window");
  exception_state.ThrowTypeError("Named property deleter is not supported.");
}

}

void NamedPropsObjNamedDefinerCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyDescriptor& v8_property_desc, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NamedPropertiesObject_NamedPropertyDefiner");

// 3.6.4.2. [[DefineOwnProperty]]
// https://webidl.spec.whatwg.org/#named-properties-object-defineownproperty
bindings::V8SetReturnValue(info, nullptr);
if (info.ShouldThrowOnError()) {
  ExceptionState exception_state(info.GetIsolate(),
                                 ExceptionContext::Context::kNamedPropertySet,
                                 "Window");
  exception_state.ThrowTypeError("Named property setter is not supported.");
}

}

void NamedPropsObjNamedDescriptorCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NamedPropertiesObject_NamedPropertyDescriptor");

v8::Local<v8::Object> v8_receiver = info.Holder();
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const AtomicString& blink_property_name = ToCoreAtomicString(v8_property_name.As<v8::String>());
// 3.6.4.1. [[GetOwnProperty]]
// https://webidl.spec.whatwg.org/#named-properties-object-getownproperty
// step 4. If the result of running the named property visibility algorithm
//   with property name P and object object is true, then:
if (v8_receiver->GetRealNamedPropertyAttributesInPrototypeChain(
        current_context, v8_property_name).IsJust()) {
  return;  // Do not intercept.  Fallback to OrdinaryGetOwnProperty.
}

// TODO(yukishiino): Update the following hard-coded call to an appropriate
// one.
V8Window::NamedPropertyGetterCustom(blink_property_name, info);
v8::Local<v8::Value> v8_value = info.GetReturnValue().Get();
if (v8_value->IsUndefined())
  return;  // Do not intercept.  Fallback to OrdinaryGetOwnProperty.

// step 4.7. If A implements an interface with the
//   [LegacyUnenumerableNamedProperties] extended attribute, then set
//   desc.[[Enumerable]] to false, otherwise set it to true.
// step 4.8. Set desc.[[Writable]] to true and desc.[[Configurable]] to
//   true.
v8::PropertyDescriptor desc(v8_value, /*writable=*/true);
desc.set_enumerable(false);
desc.set_configurable(true);
bindings::V8SetReturnValue(info, desc);

}

void NamedPropsObjIndexedGetterCallback(uint32_t index, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NamedPropertiesObject_IndexedPropertyGetter");

v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::String> property_name =
    V8AtomicString(isolate, AtomicString::Number(index));
NamedPropsObjNamedGetterCallback(property_name, info);

}

void NamedPropsObjIndexedSetterCallback(uint32_t index, v8::Local<v8::Value> v8_property_value, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NamedPropertiesObject_IndexedPropertySetter");

// 3.6.4.2. [[DefineOwnProperty]]
// https://webidl.spec.whatwg.org/#named-properties-object-defineownproperty
bindings::V8SetReturnValue(info, nullptr);
if (info.ShouldThrowOnError()) {
  ExceptionState exception_state(
      info.GetIsolate(),
      ExceptionContext::Context::kIndexedPropertySet,
      "Window");
  exception_state.ThrowTypeError("Named property setter is not supported.");
}

}

void NamedPropsObjIndexedDeleterCallback(uint32_t index, const v8::PropertyCallbackInfo<v8::Boolean>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NamedPropertiesObject_IndexedPropertyDeleter");

bindings::V8SetReturnValue(info, false);
if (info.ShouldThrowOnError()) {
  ExceptionState exception_state(
      info.GetIsolate(),
      ExceptionContext::Context::kIndexedPropertyDelete,
      "Window");
  exception_state.ThrowTypeError("Named property deleter is not supported.");
}

}

void NamedPropsObjIndexedDefinerCallback(uint32_t index, const v8::PropertyDescriptor& v8_property_desc, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NamedPropertiesObject_IndexedPropertyDefiner");

// 3.6.4.2. [[DefineOwnProperty]]
// https://webidl.spec.whatwg.org/#named-properties-object-defineownproperty
bindings::V8SetReturnValue(info, nullptr);
if (info.ShouldThrowOnError()) {
  ExceptionState exception_state(
      info.GetIsolate(),
      ExceptionContext::Context::kIndexedPropertySet,
      "Window");
  exception_state.ThrowTypeError("Named property setter is not supported.");
}

}

void NamedPropsObjIndexedDescriptorCallback(uint32_t index, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_NamedPropertiesObject_IndexedPropertyDescriptor");

v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::String> property_name =
    V8AtomicString(isolate, AtomicString::Number(index));
NamedPropsObjNamedDescriptorCallback(property_name, info);

}

void WindowAttributeGetCrossOrigin(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_window_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.window.get");
v8::Local<v8::Object> v8_receiver = info.Holder();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "window";
blink_receiver->ReportCoopAccess(property_name);


auto&& return_value = blink_receiver->window();
bindings::V8SetReturnValue(info, return_value, blink_receiver, bindings::V8ReturnValue::kMaybeCrossOriginWindow);
}

void SelfAttributeGetCrossOrigin(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_self_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.self.get");
v8::Local<v8::Object> v8_receiver = info.Holder();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "self";
blink_receiver->ReportCoopAccess(property_name);


auto&& return_value = blink_receiver->self();
bindings::V8SetReturnValue(info, return_value, blink_receiver, bindings::V8ReturnValue::kMaybeCrossOriginWindow);
}

void LocationAttributeGetCrossOrigin(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_location_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.location.get");
v8::Local<v8::Object> v8_receiver = info.Holder();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "location";
blink_receiver->ReportCoopAccess(property_name);

V8Window::LocationAttributeGetterCustom(info);
}

void LocationAttributeSetCrossOrigin(v8::Local<v8::Name> v8_property_name, v8::Local<v8::Value> v8_property_value, const v8::PropertyCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_location_Setter");
BLINK_BINDINGS_TRACE_EVENT("Window.location.set");


// [PutForwards]
v8::Local<v8::Value> target;
v8::Local<v8::Object> v8_receiver = info.Holder();
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const char* const property_name = "location";
if (!v8_receiver->Get(current_context, V8AtomicString(isolate, property_name)).ToLocal(&target)) {
  return;
}
if (!target->IsObject()) {
  const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kAttributeSet;
const char* const class_like_name = "Window";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
exception_state.ThrowTypeError("The attribute value is not an object");
return;
}
bool did_set;
if (!target.As<v8::Object>()->Set(current_context, V8AtomicString(isolate, "href"), v8_property_value).To(&did_set)) {{
  return;
}}
}

void ClosedAttributeGetCrossOrigin(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_closed_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.closed.get");
v8::Local<v8::Object> v8_receiver = info.Holder();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "closed";
blink_receiver->ReportCoopAccess(property_name);
v8::Isolate* isolate = info.GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* current_execution_context = ExecutionContext::From(current_context);
// [Measure], [MeasureAs]
UseCounter::Count(current_execution_context, WebFeature::kWindowClosed);


auto&& return_value = blink_receiver->closed();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<bool>());
}

void FramesAttributeGetCrossOrigin(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_frames_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.frames.get");
v8::Local<v8::Object> v8_receiver = info.Holder();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "frames";
blink_receiver->ReportCoopAccess(property_name);


auto&& return_value = blink_receiver->frames();
bindings::V8SetReturnValue(info, return_value, blink_receiver, bindings::V8ReturnValue::kMaybeCrossOriginWindow);
}

void LengthAttributeGetCrossOrigin(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_length_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.length.get");
v8::Local<v8::Object> v8_receiver = info.Holder();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "length";
blink_receiver->ReportCoopAccess(property_name);


auto&& return_value = blink_receiver->length();
bindings::V8SetReturnValue(info, return_value, bindings::V8ReturnValue::PrimitiveType<uint32_t>());
}

void TopAttributeGetCrossOrigin(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_top_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.top.get");
v8::Local<v8::Object> v8_receiver = info.Holder();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "top";
blink_receiver->ReportCoopAccess(property_name);


auto&& return_value = blink_receiver->top();
bindings::V8SetReturnValue(info, return_value, blink_receiver, bindings::V8ReturnValue::kMaybeCrossOriginWindow);
}

void OpenerAttributeGetCrossOrigin(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_opener_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.opener.get");
v8::Local<v8::Object> v8_receiver = info.Holder();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "opener";
blink_receiver->ReportCoopAccess(property_name);


auto&& return_value = blink_receiver->OpenerWithMetrics();
bindings::V8SetReturnValue(info, return_value, blink_receiver, bindings::V8ReturnValue::kMaybeCrossOriginWindow);
}

void ParentAttributeGetCrossOrigin(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  
RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_parent_Getter");
BLINK_BINDINGS_TRACE_EVENT("Window.parent.get");
v8::Local<v8::Object> v8_receiver = info.Holder();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
const char* const property_name = "parent";
blink_receiver->ReportCoopAccess(property_name);


auto&& return_value = blink_receiver->parent();
bindings::V8SetReturnValue(info, return_value, blink_receiver, bindings::V8ReturnValue::kMaybeCrossOriginWindow);
}

constexpr bindings::CrossOriginAttributeTableEntry kCrossOriginAttributeTable[] = {
{"window", WindowAttributeGetCallback, nullptr, WindowAttributeGetCrossOrigin, nullptr},
{"self", SelfAttributeGetCallback, nullptr, SelfAttributeGetCrossOrigin, nullptr},
{"location", LocationAttributeGetCallback, LocationAttributeSetCallback, LocationAttributeGetCrossOrigin, LocationAttributeSetCrossOrigin},
{"closed", ClosedAttributeGetCallback, nullptr, ClosedAttributeGetCrossOrigin, nullptr},
{"frames", FramesAttributeGetCallback, nullptr, FramesAttributeGetCrossOrigin, nullptr},
{"length", LengthAttributeGetCallback, nullptr, LengthAttributeGetCrossOrigin, nullptr},
{"top", TopAttributeGetCallback, nullptr, TopAttributeGetCrossOrigin, nullptr},
{"opener", OpenerAttributeGetCallback, nullptr, OpenerAttributeGetCrossOrigin, nullptr},
{"parent", ParentAttributeGetCallback, nullptr, ParentAttributeGetCrossOrigin, nullptr},
};

constexpr bindings::CrossOriginOperationTableEntry kCrossOriginOperationTable[] = {
{"blur", BlurOperationCallback, 0},
{"close", CloseOperationCallback, 0},
{"focus", FocusOperationCallback, 0},
{"postMessage", PostMessageOperationCallback, 1},
};

bool CrossOriginAccessCheckCallback(v8::Local<v8::Context> accessing_context, v8::Local<v8::Object> accessed_object, v8::Local<v8::Value> unused_data) {
  DOMWindow* blink_accessed_object = V8Window::ToWrappableUnsafe(accessed_object);
return BindingSecurity::ShouldAllowAccessTo(ToLocalDOMWindow(accessing_context), blink_accessed_object, BindingSecurity::ErrorReportOption::kDoNotReport);
}

void CrossOriginNamedGetterCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CrossOriginProperty_NamedPropertyGetter");

if (v8_property_name->IsString()) {
  const AtomicString& blink_property_name = ToCoreAtomicString(v8_property_name.As<v8::String>());
for (const auto& attribute : kCrossOriginAttributeTable) {
  if (blink_property_name != attribute.name)
    continue;
  if (UNLIKELY(!attribute.get_value)) {
    BindingSecurity::FailedAccessCheckFor(info.GetIsolate(), V8Window::GetWrapperTypeInfo(), info.Holder());
    return;
  }
  attribute.get_value(v8_property_name, info);
  return;
}
for (const auto& operation : kCrossOriginOperationTable) {
  if (blink_property_name != operation.name)
    continue;
  v8::Local<v8::Function> function;
  if (bindings::GetCrossOriginFunction(
          info.GetIsolate(), operation.callback, operation.func_length,
          V8Window::GetWrapperTypeInfo())
          .ToLocal(&function)) {
    bindings::V8SetReturnValue(info, function);
  }
  return;
}

// Window object's document-tree child browsing context name property set
//
// TODO(yukishiino): Update the following hard-coded call to an appropriate
// one.
V8Window::NamedPropertyGetterCustom(blink_property_name, info);
if (!info.GetReturnValue().Get()->IsUndefined())
  return;

}

// 7.2.3.2 CrossOriginPropertyFallback ( P )
// https://html.spec.whatwg.org/C/#crossoriginpropertyfallback-(-p-)
if (bindings::IsSupportedInCrossOriginPropertyFallback(
        info.GetIsolate(), v8_property_name)) {
  return info.GetReturnValue().SetUndefined();
}
BindingSecurity::FailedAccessCheckFor(info.GetIsolate(), V8Window::GetWrapperTypeInfo(), info.Holder());

}

void CrossOriginNamedSetterCallback(v8::Local<v8::Name> v8_property_name, v8::Local<v8::Value> v8_property_value, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CrossOriginProperty_NamedPropertySetter");

if (v8_property_name->IsString()) {
  const AtomicString& blink_property_name = ToCoreAtomicString(v8_property_name.As<v8::String>());
for (const auto& attribute : kCrossOriginAttributeTable) {
  if (blink_property_name == attribute.name && attribute.set_value) {
    attribute.set_value(v8_property_name, v8_property_value, info);
    return;
  }
}

}

BindingSecurity::FailedAccessCheckFor(info.GetIsolate(), V8Window::GetWrapperTypeInfo(), info.Holder());
}

void CrossOriginNamedDeleterCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Boolean>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CrossOriginProperty_NamedPropertyDeleter");

BindingSecurity::FailedAccessCheckFor(info.GetIsolate(), V8Window::GetWrapperTypeInfo(), info.Holder());
}

void CrossOriginNamedDefinerCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyDescriptor& v8_property_desc, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CrossOriginProperty_NamedPropertyDefiner");

BindingSecurity::FailedAccessCheckFor(info.GetIsolate(), V8Window::GetWrapperTypeInfo(), info.Holder());
}

void CrossOriginNamedDescriptorCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CrossOriginProperty_NamedPropertyDescriptor");

if (v8_property_name->IsString()) {
  const AtomicString& blink_property_name = ToCoreAtomicString(v8_property_name.As<v8::String>());
// 7.2.3.4 CrossOriginGetOwnPropertyHelper ( O, P )
// https://html.spec.whatwg.org/C/#crossorigingetownpropertyhelper-(-o,-p-)
for (const auto& attribute : kCrossOriginAttributeTable) {
  if (blink_property_name != attribute.name)
    continue;
  v8::Local<v8::Value> get;
  v8::Local<v8::Value> set;
  if (!bindings::GetCrossOriginFunctionOrUndefined(
           info.GetIsolate(), attribute.get_callback, 0,
           V8Window::GetWrapperTypeInfo())
           .ToLocal(&get) ||
      !bindings::GetCrossOriginFunctionOrUndefined(
           info.GetIsolate(), attribute.set_callback, 1,
           V8Window::GetWrapperTypeInfo())
           .ToLocal(&set)) {
    return;
  }
  v8::PropertyDescriptor desc(get, set);
  desc.set_enumerable(false);
  desc.set_configurable(true);
  bindings::V8SetReturnValue(info, desc);
  return;
}
for (const auto& operation : kCrossOriginOperationTable) {
  if (blink_property_name != operation.name)
    continue;
  v8::Local<v8::Function> function;
  if (!bindings::GetCrossOriginFunction(
           info.GetIsolate(), operation.callback, operation.func_length,
           V8Window::GetWrapperTypeInfo())
           .ToLocal(&function)) {
    return;
  }
  v8::PropertyDescriptor desc(function, /*writable=*/false);
  desc.set_enumerable(false);
  desc.set_configurable(true);
  bindings::V8SetReturnValue(info, desc);
  return;
}

// Window object's document-tree child browsing context name property set
//
// TODO(yukishiino): Update the following hard-coded call to an appropriate
// one.
V8Window::NamedPropertyGetterCustom(blink_property_name, info);
if (!info.GetReturnValue().Get()->IsUndefined()) {
  v8::PropertyDescriptor desc(info.GetReturnValue().Get(),
                              /*writable=*/false);
  desc.set_enumerable(false);
  desc.set_configurable(true);
  bindings::V8SetReturnValue(info, desc);
  return;
}

}

// 7.2.3.2 CrossOriginPropertyFallback ( P )
// https://html.spec.whatwg.org/C/#crossoriginpropertyfallback-(-p-)
if (bindings::IsSupportedInCrossOriginPropertyFallback(
        info.GetIsolate(), v8_property_name)) {
  v8::PropertyDescriptor desc(v8::Undefined(info.GetIsolate()),
                              /*writable=*/false);
  desc.set_enumerable(false);
  desc.set_configurable(true);
  bindings::V8SetReturnValue(info, desc);
  return;
}
BindingSecurity::FailedAccessCheckFor(info.GetIsolate(), V8Window::GetWrapperTypeInfo(), info.Holder());

}

void CrossOriginNamedQueryCallback(v8::Local<v8::Name> v8_property_name, const v8::PropertyCallbackInfo<v8::Integer>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CrossOriginProperty_NamedPropertyQuery");

if (v8_property_name->IsString()) {
  const AtomicString& blink_property_name = ToCoreAtomicString(v8_property_name.As<v8::String>());
// 7.2.3.4 CrossOriginGetOwnPropertyHelper ( O, P )
// https://html.spec.whatwg.org/C/#crossorigingetownpropertyhelper-(-o,-p-)
for (const auto& attribute : kCrossOriginAttributeTable) {
  if (blink_property_name != attribute.name)
    continue;
  int32_t v8_property_attribute = v8::DontEnum;
  if (!attribute.set_callback)
    v8_property_attribute |= v8::ReadOnly;
  bindings::V8SetReturnValue(info, v8_property_attribute);
  return;
}
for (const auto& operation : kCrossOriginOperationTable) {
  if (blink_property_name != operation.name)
    continue;
  int32_t v8_property_attribute = v8::DontEnum | v8::ReadOnly;
  bindings::V8SetReturnValue(info, v8_property_attribute);
  return;
}

}

// 7.2.3.2 CrossOriginPropertyFallback ( P )
// https://html.spec.whatwg.org/C/#crossoriginpropertyfallback-(-p-)
if (bindings::IsSupportedInCrossOriginPropertyFallback(
        info.GetIsolate(), v8_property_name)) {
  int32_t v8_property_attribute = v8::DontEnum | v8::ReadOnly;
  bindings::V8SetReturnValue(info, v8_property_attribute);
  return;
}

}

void CrossOriginNamedEnumeratorCallback(const v8::PropertyCallbackInfo<v8::Array>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CrossOriginProperty_NamedPropertyEnumerator");

v8::Isolate* isolate = info.GetIsolate();
bindings::V8SetReturnValue(
    info,
    bindings::EnumerateCrossOriginProperties(
        isolate,
        kCrossOriginAttributeTable,
        kCrossOriginOperationTable));

}

void CrossOriginIndexedGetterCallback(uint32_t index, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CrossOriginProperty_IndexedPropertyGetter");

v8::Local<v8::Object> v8_receiver = info.Holder();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
if (index >= blink_receiver->length()) {
  BindingSecurity::FailedAccessCheckFor(info.GetIsolate(), V8Window::GetWrapperTypeInfo(), info.Holder());
  return;
}

auto&& return_value = blink_receiver->AnonymousIndexedGetter(index);
bindings::V8SetReturnValue(info, return_value, blink_receiver, bindings::V8ReturnValue::kMaybeCrossOriginWindow);
}

void CrossOriginIndexedSetterCallback(uint32_t index, v8::Local<v8::Value> v8_property_value, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CrossOriginProperty_IndexedPropertySetter");

BindingSecurity::FailedAccessCheckFor(info.GetIsolate(), V8Window::GetWrapperTypeInfo(), info.Holder());
}

void CrossOriginIndexedDeleterCallback(uint32_t index, const v8::PropertyCallbackInfo<v8::Boolean>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CrossOriginProperty_IndexedPropertyDeleter");

BindingSecurity::FailedAccessCheckFor(info.GetIsolate(), V8Window::GetWrapperTypeInfo(), info.Holder());
}

void CrossOriginIndexedDefinerCallback(uint32_t index, const v8::PropertyDescriptor& v8_property_desc, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CrossOriginProperty_IndexedPropertyDefiner");

BindingSecurity::FailedAccessCheckFor(info.GetIsolate(), V8Window::GetWrapperTypeInfo(), info.Holder());
}

void CrossOriginIndexedDescriptorCallback(uint32_t index, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CrossOriginProperty_IndexedPropertyDescriptor");

CrossOriginIndexedGetterCallback(index, info);
v8::Local<v8::Value> v8_value = info.GetReturnValue().Get();
if (v8_value->IsUndefined()) {
  // Must have already thrown a SecurityError.
  return;
}

v8::PropertyDescriptor desc(v8_value, /*writable=*/false);
desc.set_enumerable(true);
desc.set_configurable(true);
bindings::V8SetReturnValue(info, desc);

}

void CrossOriginIndexedEnumeratorCallback(const v8::PropertyCallbackInfo<v8::Array>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_CrossOriginProperty_IndexedPropertyEnumerator");

v8::Local<v8::Object> v8_receiver = info.Holder();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
uint32_t length = blink_receiver->length();
v8::Local<v8::Array> array =
    bindings::EnumerateIndexedProperties(isolate, length);
bindings::V8SetReturnValue(info, array);

}

void SameOriginIndexedGetterCallback(uint32_t index, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SameOriginProperty_IndexedPropertyGetter");

v8::Local<v8::Object> v8_receiver = info.Holder();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
if (index >= blink_receiver->length()) {
  return;
}

auto&& return_value = blink_receiver->AnonymousIndexedGetter(index);
bindings::V8SetReturnValue(info, return_value, blink_receiver, bindings::V8ReturnValue::kMaybeCrossOriginWindow);
}

void SameOriginIndexedSetterCallback(uint32_t index, v8::Local<v8::Value> v8_property_value, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SameOriginProperty_IndexedPropertySetter");

bindings::V8SetReturnValue(info, nullptr);
if (info.ShouldThrowOnError()) {
  ExceptionState exception_state(
      info.GetIsolate(),
      ExceptionContext::Context::kIndexedPropertySet,
      "Window");
  exception_state.ThrowTypeError(
      "Indexed property setter is not supported.");
}

}

void SameOriginIndexedDeleterCallback(uint32_t index, const v8::PropertyCallbackInfo<v8::Boolean>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SameOriginProperty_IndexedPropertyDeleter");

v8::Local<v8::Object> v8_receiver = info.Holder();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
// 7.4.9 [[Delete]] ( P )
// https://html.spec.whatwg.org/C/#windowproxy-delete
const bool is_supported = index < blink_receiver->length();
bindings::V8SetReturnValue(info, !is_supported);
if (is_supported and info.ShouldThrowOnError()) {
  ExceptionState exception_state(
      info.GetIsolate(),
      ExceptionContext::Context::kIndexedPropertyDelete,
      "Window");
  exception_state.ThrowTypeError("Index property deleter is not supported.");
}

}

void SameOriginIndexedDefinerCallback(uint32_t index, const v8::PropertyDescriptor& v8_property_desc, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SameOriginProperty_IndexedPropertyDefiner");

// 7.4.6 [[DefineOwnProperty]] ( P, Desc )
// https://html.spec.whatwg.org/C/#windowproxy-defineownproperty
bindings::V8SetReturnValue(info, nullptr);
if (info.ShouldThrowOnError()) {
  ExceptionState exception_state(
      info.GetIsolate(),
      ExceptionContext::Context::kIndexedPropertySet,
      "Window");
  exception_state.ThrowTypeError("Index property setter is not supported.");
}

}

void SameOriginIndexedDescriptorCallback(uint32_t index, const v8::PropertyCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SameOriginProperty_IndexedPropertyDescriptor");

// 7.4.5 [[GetOwnProperty]] ( P )
// https://html.spec.whatwg.org/C/#windowproxy-getownproperty
SameOriginIndexedGetterCallback(index, info);
v8::Local<v8::Value> v8_value = info.GetReturnValue().Get();
if (v8_value->IsUndefined()) {
  return;  // Do not intercept.
}

v8::PropertyDescriptor desc(v8_value, /*writable=*/false);
desc.set_enumerable(true);
desc.set_configurable(true);
bindings::V8SetReturnValue(info, desc);

}

void SameOriginIndexedEnumeratorCallback(const v8::PropertyCallbackInfo<v8::Array>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_DOMWindow_SameOriginProperty_IndexedPropertyEnumerator");

v8::Local<v8::Object> v8_receiver = info.Holder();
DOMWindow* blink_receiver = V8Window::ToWrappableUnsafe(v8_receiver);
v8::Isolate* isolate = info.GetIsolate();
uint32_t length = blink_receiver->length();
v8::Local<v8::Array> array =
    bindings::EnumerateIndexedProperties(isolate, length);
bindings::V8SetReturnValue(info, array);

}


}  // namespace v8_window

using namespace v8_window;

}  // namespace 

void V8Window::Impl::InstallInterfaceTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Template> interface_template) {
  const WrapperTypeInfo* const wrapper_type_info = V8Window::GetWrapperTypeInfo();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::ObjectTemplate> instance_object_template = interface_function_template->InstanceTemplate();
v8::Local<v8::ObjectTemplate> prototype_object_template = interface_function_template->PrototypeTemplate();

// Named properties object
v8::Local<v8::FunctionTemplate> npo_interface_template =
    v8::FunctionTemplate::New(isolate);
v8::Local<v8::ObjectTemplate> npo_prototype_template =
    npo_interface_template->PrototypeTemplate();
npo_interface_template->Inherit(
    wrapper_type_info->parent_class
    ->GetV8ClassTemplate(isolate, world).As<v8::FunctionTemplate>());
npo_prototype_template->SetImmutableProto();
npo_prototype_template->Set(
    v8::Symbol::GetToStringTag(isolate),
    V8AtomicString(isolate, "WindowProperties"),
    static_cast<v8::PropertyAttribute>(v8::ReadOnly | v8::DontEnum));
// Make the named properties object look like the global object.  Note that
// the named properties object is _not_ a prototype object, plus, we'd like
// the named properties object to behave just like the global object (= the
// wrapper object of the global object) from the point of view of named
// properties.
// https://webidl.spec.whatwg.org/#named-properties-object
npo_prototype_template->SetInternalFieldCount(
    kV8DefaultWrapperInternalFieldCount);

v8::Local<v8::FunctionTemplate> parent_interface_template = npo_interface_template;
bindings::SetupIDLInterfaceTemplate(isolate, wrapper_type_info, instance_object_template, prototype_object_template, interface_function_template, parent_interface_template);



// Named interceptors
npo_prototype_template->SetHandler(
    v8::NamedPropertyHandlerConfiguration(
        NamedPropsObjNamedGetterCallback,
        NamedPropsObjNamedSetterCallback,
        nullptr,  // query
        NamedPropsObjNamedDeleterCallback,
        nullptr,  // enumerator
        NamedPropsObjNamedDefinerCallback,
        NamedPropsObjNamedDescriptorCallback,
        v8::Local<v8::Value>(),
        static_cast<v8::PropertyHandlerFlags>(
            int32_t(v8::PropertyHandlerFlags::kNonMasking) |
            int32_t(v8::PropertyHandlerFlags::kOnlyInterceptStrings))));
// Indexed interceptors
npo_prototype_template->SetHandler(
    v8::IndexedPropertyHandlerConfiguration(
        NamedPropsObjIndexedGetterCallback,
        NamedPropsObjIndexedSetterCallback,
        nullptr,  // query
        NamedPropsObjIndexedDeleterCallback,
        nullptr,  // enumerator
        NamedPropsObjIndexedDefinerCallback,
        NamedPropsObjIndexedDescriptorCallback,
        v8::Local<v8::Value>(),
        v8::PropertyHandlerFlags::kNone));

// Cross origin properties
instance_object_template->SetAccessCheckCallbackAndHandler(
    CrossOriginAccessCheckCallback,
    v8::NamedPropertyHandlerConfiguration(
        CrossOriginNamedGetterCallback,
        CrossOriginNamedSetterCallback,
        CrossOriginNamedQueryCallback,
        CrossOriginNamedDeleterCallback,
        CrossOriginNamedEnumeratorCallback,
        CrossOriginNamedDefinerCallback,
        CrossOriginNamedDescriptorCallback,
        v8::Local<v8::Value>(),
        v8::PropertyHandlerFlags::kNone),
    v8::IndexedPropertyHandlerConfiguration(
        CrossOriginIndexedGetterCallback,
        CrossOriginIndexedSetterCallback,
        nullptr,  // query
        CrossOriginIndexedDeleterCallback,
        CrossOriginIndexedEnumeratorCallback,
        CrossOriginIndexedDefinerCallback,
        CrossOriginIndexedDescriptorCallback,
        v8::Local<v8::Value>(),
        v8::PropertyHandlerFlags::kNone),
    v8::External::New(
        isolate,
        const_cast<WrapperTypeInfo*>(V8Window::GetWrapperTypeInfo())));

// Same origin interceptors
instance_object_template->SetHandler(
    v8::IndexedPropertyHandlerConfiguration(
        SameOriginIndexedGetterCallback,
        SameOriginIndexedSetterCallback,
        nullptr,  // query
        SameOriginIndexedDeleterCallback,
        SameOriginIndexedEnumeratorCallback,
        SameOriginIndexedDefinerCallback,
        SameOriginIndexedDescriptorCallback,
        v8::Local<v8::Value>(),
        v8::PropertyHandlerFlags::kNone));



// [Global]
// 3.7.1. [[SetPrototypeOf]]
// https://webidl.spec.whatwg.org/#platform-object-setprototypeof
instance_object_template->SetImmutableProto();
prototype_object_template->SetImmutableProto();

v8::Local<v8::Template> instance_template = instance_object_template;
v8::Local<v8::Template> prototype_template = prototype_object_template;
InstallUnconditionalProperties(isolate, world, instance_template, prototype_template, interface_template);
InstallContextIndependentProperties(isolate, world, instance_template, prototype_template, interface_template);
}

void V8Window::Impl::InstallUnconditionalProperties(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Template> instance_template, v8::Local<v8::Template> prototype_template, v8::Local<v8::Template> interface_template) {
  using bindings::IDLMemberInstaller;

v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
{
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"window", WindowAttributeGetCallback, nullptr, unsigned(v8::DontDelete), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kWindowProxy)},
{"self", SelfAttributeGetCallback, SelfAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kWindowProxy)},
{"document", DocumentAttributeGetCallback, nullptr, unsigned(v8::DontDelete), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kWindowDocument)},
{"name", NameAttributeGetCallback, NameAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"location", LocationAttributeGetCallback, LocationAttributeSetCallback, unsigned(v8::DontDelete), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kDoNotCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"customElements", CustomElementsAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"history", HistoryAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"locationbar", LocationbarAttributeGetCallback, LocationbarAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"menubar", MenubarAttributeGetCallback, MenubarAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"personalbar", PersonalbarAttributeGetCallback, PersonalbarAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"scrollbars", ScrollbarsAttributeGetCallback, ScrollbarsAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"statusbar", StatusbarAttributeGetCallback, StatusbarAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"toolbar", ToolbarAttributeGetCallback, ToolbarAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"status", StatusAttributeGetCallback, StatusAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"closed", ClosedAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"frames", FramesAttributeGetCallback, FramesAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kWindowProxy)},
{"length", LengthAttributeGetCallback, LengthAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"top", TopAttributeGetCallback, nullptr, unsigned(v8::DontDelete), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"opener", OpenerAttributeGetCallback, OpenerAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"parent", ParentAttributeGetCallback, ParentAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"frameElement", FrameElementAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"navigator", NavigatorAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"origin", OriginAttributeGetCallback, OriginAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"external", ExternalAttributeGetCallback, ExternalAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"screen", ScreenAttributeGetCallback, ScreenAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"innerWidth", InnerWidthAttributeGetCallback, InnerWidthAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"innerHeight", InnerHeightAttributeGetCallback, InnerHeightAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"scrollX", ScrollXAttributeGetCallback, ScrollXAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"pageXOffset", PageXOffsetAttributeGetCallback, PageXOffsetAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"scrollY", ScrollYAttributeGetCallback, ScrollYAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"pageYOffset", PageYOffsetAttributeGetCallback, PageYOffsetAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"visualViewport", VisualViewportAttributeGetCallback, VisualViewportAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"screenX", ScreenXAttributeGetCallback, ScreenXAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"screenY", ScreenYAttributeGetCallback, ScreenYAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"outerWidth", OuterWidthAttributeGetCallback, OuterWidthAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"outerHeight", OuterHeightAttributeGetCallback, OuterHeightAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"devicePixelRatio", DevicePixelRatioAttributeGetCallback, DevicePixelRatioAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"event", EventAttributeGetCallback, EventAttributeSetCallback, unsigned(v8::DontEnum), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"clientInformation", ClientInformationAttributeGetCallback, ClientInformationAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"offscreenBuffering", OffscreenBufferingAttributeGetCallback, OffscreenBufferingAttributeSetCallback, unsigned(v8::DontEnum), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"screenLeft", ScreenLeftAttributeGetCallback, ScreenLeftAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"screenTop", ScreenTopAttributeGetCallback, ScreenTopAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"defaultStatus", DefaultStatusAttributeGetCallback, DefaultStatusAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"defaultstatus", DefaultstatusAttributeGetCallback, DefaultstatusAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"styleMedia", StyleMediaAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onsearch", OnsearchAttributeGetCallback, OnsearchAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"isSecureContext", IsSecureContextAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"trustedTypes", TrustedTypesAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"performance", PerformanceAttributeGetCallback, PerformanceAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onappinstalled", OnappinstalledAttributeGetCallback, OnappinstalledAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onbeforeinstallprompt", OnbeforeinstallpromptAttributeGetCallback, OnbeforeinstallpromptAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"crypto", CryptoAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"indexedDB", IndexedDBAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"sessionStorage", SessionStorageAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"localStorage", LocalStorageAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onbeforexrselect", OnbeforexrselectAttributeGetCallback, OnbeforexrselectAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onabort", OnabortAttributeGetCallback, OnabortAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onbeforeinput", OnbeforeinputAttributeGetCallback, OnbeforeinputAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onblur", OnblurAttributeGetCallback, OnblurAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"oncancel", OncancelAttributeGetCallback, OncancelAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"oncanplay", OncanplayAttributeGetCallback, OncanplayAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"oncanplaythrough", OncanplaythroughAttributeGetCallback, OncanplaythroughAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onchange", OnchangeAttributeGetCallback, OnchangeAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onclick", OnclickAttributeGetCallback, OnclickAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onclose", OncloseAttributeGetCallback, OncloseAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"oncontextlost", OncontextlostAttributeGetCallback, OncontextlostAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"oncontextmenu", OncontextmenuAttributeGetCallback, OncontextmenuAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"oncontextrestored", OncontextrestoredAttributeGetCallback, OncontextrestoredAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"oncuechange", OncuechangeAttributeGetCallback, OncuechangeAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ondblclick", OndblclickAttributeGetCallback, OndblclickAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ondrag", OndragAttributeGetCallback, OndragAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ondragend", OndragendAttributeGetCallback, OndragendAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ondragenter", OndragenterAttributeGetCallback, OndragenterAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ondragleave", OndragleaveAttributeGetCallback, OndragleaveAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ondragover", OndragoverAttributeGetCallback, OndragoverAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ondragstart", OndragstartAttributeGetCallback, OndragstartAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ondrop", OndropAttributeGetCallback, OndropAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ondurationchange", OndurationchangeAttributeGetCallback, OndurationchangeAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onemptied", OnemptiedAttributeGetCallback, OnemptiedAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onended", OnendedAttributeGetCallback, OnendedAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onerror", OnerrorAttributeGetCallback, OnerrorAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onfocus", OnfocusAttributeGetCallback, OnfocusAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onformdata", OnformdataAttributeGetCallback, OnformdataAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"oninput", OninputAttributeGetCallback, OninputAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"oninvalid", OninvalidAttributeGetCallback, OninvalidAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onkeydown", OnkeydownAttributeGetCallback, OnkeydownAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onkeypress", OnkeypressAttributeGetCallback, OnkeypressAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onkeyup", OnkeyupAttributeGetCallback, OnkeyupAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onload", OnloadAttributeGetCallback, OnloadAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onloadeddata", OnloadeddataAttributeGetCallback, OnloadeddataAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onloadedmetadata", OnloadedmetadataAttributeGetCallback, OnloadedmetadataAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onloadstart", OnloadstartAttributeGetCallback, OnloadstartAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onmousedown", OnmousedownAttributeGetCallback, OnmousedownAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onmouseenter", OnmouseenterAttributeGetCallback, OnmouseenterAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onmouseleave", OnmouseleaveAttributeGetCallback, OnmouseleaveAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onmousemove", OnmousemoveAttributeGetCallback, OnmousemoveAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onmouseout", OnmouseoutAttributeGetCallback, OnmouseoutAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onmouseover", OnmouseoverAttributeGetCallback, OnmouseoverAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onmouseup", OnmouseupAttributeGetCallback, OnmouseupAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onmousewheel", OnmousewheelAttributeGetCallback, OnmousewheelAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onpause", OnpauseAttributeGetCallback, OnpauseAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onplay", OnplayAttributeGetCallback, OnplayAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onplaying", OnplayingAttributeGetCallback, OnplayingAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onprogress", OnprogressAttributeGetCallback, OnprogressAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onratechange", OnratechangeAttributeGetCallback, OnratechangeAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onreset", OnresetAttributeGetCallback, OnresetAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onresize", OnresizeAttributeGetCallback, OnresizeAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onscroll", OnscrollAttributeGetCallback, OnscrollAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onsecuritypolicyviolation", OnsecuritypolicyviolationAttributeGetCallback, OnsecuritypolicyviolationAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onseeked", OnseekedAttributeGetCallback, OnseekedAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onseeking", OnseekingAttributeGetCallback, OnseekingAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onselect", OnselectAttributeGetCallback, OnselectAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onslotchange", OnslotchangeAttributeGetCallback, OnslotchangeAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onstalled", OnstalledAttributeGetCallback, OnstalledAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onsubmit", OnsubmitAttributeGetCallback, OnsubmitAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onsuspend", OnsuspendAttributeGetCallback, OnsuspendAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ontimeupdate", OntimeupdateAttributeGetCallback, OntimeupdateAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ontoggle", OntoggleAttributeGetCallback, OntoggleAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onvolumechange", OnvolumechangeAttributeGetCallback, OnvolumechangeAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onwaiting", OnwaitingAttributeGetCallback, OnwaitingAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onwebkitanimationend", OnwebkitanimationendAttributeGetCallback, OnwebkitanimationendAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onwebkitanimationiteration", OnwebkitanimationiterationAttributeGetCallback, OnwebkitanimationiterationAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onwebkitanimationstart", OnwebkitanimationstartAttributeGetCallback, OnwebkitanimationstartAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onwebkittransitionend", OnwebkittransitionendAttributeGetCallback, OnwebkittransitionendAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onwheel", OnwheelAttributeGetCallback, OnwheelAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onauxclick", OnauxclickAttributeGetCallback, OnauxclickAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ongotpointercapture", OngotpointercaptureAttributeGetCallback, OngotpointercaptureAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onlostpointercapture", OnlostpointercaptureAttributeGetCallback, OnlostpointercaptureAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onpointerdown", OnpointerdownAttributeGetCallback, OnpointerdownAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onpointermove", OnpointermoveAttributeGetCallback, OnpointermoveAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onpointerrawupdate", OnpointerrawupdateAttributeGetCallback, OnpointerrawupdateAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onpointerup", OnpointerupAttributeGetCallback, OnpointerupAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onpointercancel", OnpointercancelAttributeGetCallback, OnpointercancelAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onpointerover", OnpointeroverAttributeGetCallback, OnpointeroverAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onpointerout", OnpointeroutAttributeGetCallback, OnpointeroutAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onpointerenter", OnpointerenterAttributeGetCallback, OnpointerenterAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onpointerleave", OnpointerleaveAttributeGetCallback, OnpointerleaveAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onselectstart", OnselectstartAttributeGetCallback, OnselectstartAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onselectionchange", OnselectionchangeAttributeGetCallback, OnselectionchangeAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onanimationend", OnanimationendAttributeGetCallback, OnanimationendAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onanimationiteration", OnanimationiterationAttributeGetCallback, OnanimationiterationAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onanimationstart", OnanimationstartAttributeGetCallback, OnanimationstartAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ontransitionrun", OntransitionrunAttributeGetCallback, OntransitionrunAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ontransitionstart", OntransitionstartAttributeGetCallback, OntransitionstartAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ontransitionend", OntransitionendAttributeGetCallback, OntransitionendAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ontransitioncancel", OntransitioncancelAttributeGetCallback, OntransitioncancelAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onafterprint", OnafterprintAttributeGetCallback, OnafterprintAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onbeforeprint", OnbeforeprintAttributeGetCallback, OnbeforeprintAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onbeforeunload", OnbeforeunloadAttributeGetCallback, OnbeforeunloadAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onhashchange", OnhashchangeAttributeGetCallback, OnhashchangeAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onlanguagechange", OnlanguagechangeAttributeGetCallback, OnlanguagechangeAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onmessage", OnmessageAttributeGetCallback, OnmessageAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onmessageerror", OnmessageerrorAttributeGetCallback, OnmessageerrorAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onoffline", OnofflineAttributeGetCallback, OnofflineAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ononline", OnonlineAttributeGetCallback, OnonlineAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onpagehide", OnpagehideAttributeGetCallback, OnpagehideAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onpageshow", OnpageshowAttributeGetCallback, OnpageshowAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onpopstate", OnpopstateAttributeGetCallback, OnpopstateAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onrejectionhandled", OnrejectionhandledAttributeGetCallback, OnrejectionhandledAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onstorage", OnstorageAttributeGetCallback, OnstorageAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onunhandledrejection", OnunhandledrejectionAttributeGetCallback, OnunhandledrejectionAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onunload", OnunloadAttributeGetCallback, OnunloadAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"crossOriginIsolated", CrossOriginIsolatedAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"scheduler", SchedulerAttributeGetCallback, SchedulerAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
IDLMemberInstaller::InstallAttributes(isolate, world, instance_template, prototype_template, interface_template, signature, kAttributeTable);
}



{
  static const IDLMemberInstaller::ConstantValueConfig kConstantValueTable[] = {
{"TEMPORARY", V8Window::Constant::kTemporary},
{"PERSISTENT", V8Window::Constant::kPersistent},
};
IDLMemberInstaller::InstallConstants(isolate, world, instance_template, prototype_template, interface_template, signature, kConstantValueTable);
}


{
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"AbortController", AbortControllerExposedConstructCallback}, 
{"AbortSignal", AbortSignalExposedConstructCallback}, 
{"AbstractRange", AbstractRangeExposedConstructCallback}, 
{"AnalyserNode", AnalyserNodeExposedConstructCallback}, 
{"Animation", AnimationExposedConstructCallback}, 
{"AnimationEffect", AnimationEffectExposedConstructCallback}, 
{"AnimationEvent", AnimationEventExposedConstructCallback}, 
{"Attr", AttrExposedConstructCallback}, 
{"AudioBuffer", AudioBufferExposedConstructCallback}, 
{"AudioBufferSourceNode", AudioBufferSourceNodeExposedConstructCallback}, 
{"AudioContext", AudioContextExposedConstructCallback}, 
{"AudioDestinationNode", AudioDestinationNodeExposedConstructCallback}, 
{"AudioListener", AudioListenerExposedConstructCallback}, 
{"AudioNode", AudioNodeExposedConstructCallback}, 
{"AudioParam", AudioParamExposedConstructCallback}, 
{"AudioParamMap", AudioParamMapExposedConstructCallback}, 
{"AudioProcessingEvent", AudioProcessingEventExposedConstructCallback}, 
{"AudioScheduledSourceNode", AudioScheduledSourceNodeExposedConstructCallback}, 
{"AudioWorkletNode", AudioWorkletNodeExposedConstructCallback}, 
{"BarProp", BarPropExposedConstructCallback}, 
{"BaseAudioContext", BaseAudioContextExposedConstructCallback}, 
{"BeforeInstallPromptEvent", BeforeInstallPromptEventExposedConstructCallback}, 
{"BeforeUnloadEvent", BeforeUnloadEventExposedConstructCallback}, 
{"BiquadFilterNode", BiquadFilterNodeExposedConstructCallback}, 
{"Blob", BlobExposedConstructCallback}, 
{"BlobEvent", BlobEventExposedConstructCallback}, 
{"BroadcastChannel", BroadcastChannelExposedConstructCallback}, 
{"ByteLengthQueuingStrategy", ByteLengthQueuingStrategyExposedConstructCallback}, 
{"CDATASection", CDATASectionExposedConstructCallback}, 
{"CSS", CSSExposedConstructCallback}, 
{"CSSConditionRule", CSSConditionRuleExposedConstructCallback}, 
{"CSSCounterStyleRule", CSSCounterStyleRuleExposedConstructCallback}, 
{"CSSFontFaceRule", CSSFontFaceRuleExposedConstructCallback}, 
{"CSSGroupingRule", CSSGroupingRuleExposedConstructCallback}, 
{"CSSImageValue", CSSImageValueExposedConstructCallback}, 
{"CSSImportRule", CSSImportRuleExposedConstructCallback}, 
{"CSSKeyframeRule", CSSKeyframeRuleExposedConstructCallback}, 
{"CSSKeyframesRule", CSSKeyframesRuleExposedConstructCallback}, 
{"CSSKeywordValue", CSSKeywordValueExposedConstructCallback}, 
{"CSSLayerBlockRule", CSSLayerBlockRuleExposedConstructCallback}, 
{"CSSLayerStatementRule", CSSLayerStatementRuleExposedConstructCallback}, 
{"CSSMathClamp", CSSMathClampExposedConstructCallback}, 
{"CSSMathInvert", CSSMathInvertExposedConstructCallback}, 
{"CSSMathMax", CSSMathMaxExposedConstructCallback}, 
{"CSSMathMin", CSSMathMinExposedConstructCallback}, 
{"CSSMathNegate", CSSMathNegateExposedConstructCallback}, 
{"CSSMathProduct", CSSMathProductExposedConstructCallback}, 
{"CSSMathSum", CSSMathSumExposedConstructCallback}, 
{"CSSMathValue", CSSMathValueExposedConstructCallback}, 
{"CSSMatrixComponent", CSSMatrixComponentExposedConstructCallback}, 
{"CSSMediaRule", CSSMediaRuleExposedConstructCallback}, 
{"CSSNamespaceRule", CSSNamespaceRuleExposedConstructCallback}, 
{"CSSNumericArray", CSSNumericArrayExposedConstructCallback}, 
{"CSSNumericValue", CSSNumericValueExposedConstructCallback}, 
{"CSSPageRule", CSSPageRuleExposedConstructCallback}, 
{"CSSPerspective", CSSPerspectiveExposedConstructCallback}, 
{"CSSPositionValue", CSSPositionValueExposedConstructCallback}, 
{"CSSPropertyRule", CSSPropertyRuleExposedConstructCallback}, 
{"CSSRotate", CSSRotateExposedConstructCallback}, 
{"CSSRule", CSSRuleExposedConstructCallback}, 
{"CSSRuleList", CSSRuleListExposedConstructCallback}, 
{"CSSScale", CSSScaleExposedConstructCallback}, 
{"CSSSkew", CSSSkewExposedConstructCallback}, 
{"CSSSkewX", CSSSkewXExposedConstructCallback}, 
{"CSSSkewY", CSSSkewYExposedConstructCallback}, 
{"CSSStyleDeclaration", CSSStyleDeclarationExposedConstructCallback}, 
{"CSSStyleRule", CSSStyleRuleExposedConstructCallback}, 
{"CSSStyleSheet", CSSStyleSheetExposedConstructCallback}, 
{"CSSStyleValue", CSSStyleValueExposedConstructCallback}, 
{"CSSSupportsRule", CSSSupportsRuleExposedConstructCallback}, 
{"CSSTransformComponent", CSSTransformComponentExposedConstructCallback}, 
{"CSSTransformValue", CSSTransformValueExposedConstructCallback}, 
{"CSSTranslate", CSSTranslateExposedConstructCallback}, 
{"CSSUnitValue", CSSUnitValueExposedConstructCallback}, 
{"CSSUnparsedValue", CSSUnparsedValueExposedConstructCallback}, 
{"CSSVariableReferenceValue", CSSVariableReferenceValueExposedConstructCallback}, 
{"CanvasCaptureMediaStreamTrack", CanvasCaptureMediaStreamTrackExposedConstructCallback}, 
{"CanvasFilter", CanvasFilterExposedConstructCallback}, 
{"CanvasGradient", CanvasGradientExposedConstructCallback}, 
{"CanvasPattern", CanvasPatternExposedConstructCallback}, 
{"CanvasRenderingContext2D", CanvasRenderingContext2DExposedConstructCallback}, 
{"ChannelMergerNode", ChannelMergerNodeExposedConstructCallback}, 
{"ChannelSplitterNode", ChannelSplitterNodeExposedConstructCallback}, 
{"CharacterData", CharacterDataExposedConstructCallback}, 
{"ClipboardEvent", ClipboardEventExposedConstructCallback}, 
{"CloseEvent", CloseEventExposedConstructCallback}, 
{"Comment", CommentExposedConstructCallback}, 
{"CompositionEvent", CompositionEventExposedConstructCallback}, 
{"CompressionStream", CompressionStreamExposedConstructCallback}, 
{"ConstantSourceNode", ConstantSourceNodeExposedConstructCallback}, 
{"ConvolverNode", ConvolverNodeExposedConstructCallback}, 
{"CountQueuingStrategy", CountQueuingStrategyExposedConstructCallback}, 
{"Crypto", CryptoExposedConstructCallback}, 
{"CustomElementRegistry", CustomElementRegistryExposedConstructCallback}, 
{"CustomEvent", CustomEventExposedConstructCallback}, 
{"CustomStateSet", CustomStateSetExposedConstructCallback}, 
{"DOMError", DOMErrorExposedConstructCallback}, 
{"DOMException", DOMExceptionExposedConstructCallback}, 
{"DOMImplementation", DOMImplementationExposedConstructCallback}, 
{"DOMMatrix", DOMMatrixExposedConstructCallback}, 
{"DOMMatrixReadOnly", DOMMatrixReadOnlyExposedConstructCallback}, 
{"DOMParser", DOMParserExposedConstructCallback}, 
{"DOMPoint", DOMPointExposedConstructCallback}, 
{"DOMPointReadOnly", DOMPointReadOnlyExposedConstructCallback}, 
{"DOMQuad", DOMQuadExposedConstructCallback}, 
{"DOMRect", DOMRectExposedConstructCallback}, 
{"DOMRectList", DOMRectListExposedConstructCallback}, 
{"DOMRectReadOnly", DOMRectReadOnlyExposedConstructCallback}, 
{"DOMStringList", DOMStringListExposedConstructCallback}, 
{"DOMStringMap", DOMStringMapExposedConstructCallback}, 
{"DOMTokenList", DOMTokenListExposedConstructCallback}, 
{"DataTransfer", DataTransferExposedConstructCallback}, 
{"DataTransferItem", DataTransferItemExposedConstructCallback}, 
{"DataTransferItemList", DataTransferItemListExposedConstructCallback}, 
{"DecompressionStream", DecompressionStreamExposedConstructCallback}, 
{"DelayNode", DelayNodeExposedConstructCallback}, 
{"Document", DocumentExposedConstructCallback}, 
{"DocumentFragment", DocumentFragmentExposedConstructCallback}, 
{"DocumentType", DocumentTypeExposedConstructCallback}, 
{"DragEvent", DragEventExposedConstructCallback}, 
{"DynamicsCompressorNode", DynamicsCompressorNodeExposedConstructCallback}, 
{"Element", ElementExposedConstructCallback}, 
{"ElementInternals", ElementInternalsExposedConstructCallback}, 
{"ErrorEvent", ErrorEventExposedConstructCallback}, 
{"Event", EventExposedConstructCallback}, 
{"EventCounts", EventCountsExposedConstructCallback}, 
{"EventSource", EventSourceExposedConstructCallback}, 
{"EventTarget", EventTargetExposedConstructCallback}, 
{"External", ExternalExposedConstructCallback}, 
{"FeaturePolicy", FeaturePolicyExposedConstructCallback}, 
{"File", FileExposedConstructCallback}, 
{"FileList", FileListExposedConstructCallback}, 
{"FileReader", FileReaderExposedConstructCallback}, 
{"FocusEvent", FocusEventExposedConstructCallback}, 
{"FontFace", FontFaceExposedConstructCallback}, 
{"FontFaceSetLoadEvent", FontFaceSetLoadEventExposedConstructCallback}, 
{"FormData", FormDataExposedConstructCallback}, 
{"FormDataEvent", FormDataEventExposedConstructCallback}, 
{"GainNode", GainNodeExposedConstructCallback}, 
{"Gamepad", GamepadExposedConstructCallback}, 
{"GamepadButton", GamepadButtonExposedConstructCallback}, 
{"GamepadEvent", GamepadEventExposedConstructCallback}, 
{"GamepadHapticActuator", GamepadHapticActuatorExposedConstructCallback}, 
{"Geolocation", GeolocationExposedConstructCallback}, 
{"GeolocationCoordinates", GeolocationCoordinatesExposedConstructCallback}, 
{"GeolocationPosition", GeolocationPositionExposedConstructCallback}, 
{"GeolocationPositionError", GeolocationPositionErrorExposedConstructCallback}, 
{"HTMLAllCollection", HTMLAllCollectionExposedConstructCallback}, 
{"HTMLAnchorElement", HTMLAnchorElementExposedConstructCallback}, 
{"HTMLAreaElement", HTMLAreaElementExposedConstructCallback}, 
{"HTMLAudioElement", HTMLAudioElementExposedConstructCallback}, 
{"HTMLBRElement", HTMLBRElementExposedConstructCallback}, 
{"HTMLBaseElement", HTMLBaseElementExposedConstructCallback}, 
{"HTMLBodyElement", HTMLBodyElementExposedConstructCallback}, 
{"HTMLButtonElement", HTMLButtonElementExposedConstructCallback}, 
{"HTMLCanvasElement", HTMLCanvasElementExposedConstructCallback}, 
{"HTMLCollection", HTMLCollectionExposedConstructCallback}, 
{"HTMLDListElement", HTMLDListElementExposedConstructCallback}, 
{"HTMLDataElement", HTMLDataElementExposedConstructCallback}, 
{"HTMLDataListElement", HTMLDataListElementExposedConstructCallback}, 
{"HTMLDetailsElement", HTMLDetailsElementExposedConstructCallback}, 
{"HTMLDialogElement", HTMLDialogElementExposedConstructCallback}, 
{"HTMLDirectoryElement", HTMLDirectoryElementExposedConstructCallback}, 
{"HTMLDivElement", HTMLDivElementExposedConstructCallback}, 
{"HTMLDocument", HTMLDocumentExposedConstructCallback}, 
{"HTMLElement", HTMLElementExposedConstructCallback}, 
{"HTMLEmbedElement", HTMLEmbedElementExposedConstructCallback}, 
{"HTMLFieldSetElement", HTMLFieldSetElementExposedConstructCallback}, 
{"HTMLFontElement", HTMLFontElementExposedConstructCallback}, 
{"HTMLFormControlsCollection", HTMLFormControlsCollectionExposedConstructCallback}, 
{"HTMLFormElement", HTMLFormElementExposedConstructCallback}, 
{"HTMLFrameElement", HTMLFrameElementExposedConstructCallback}, 
{"HTMLFrameSetElement", HTMLFrameSetElementExposedConstructCallback}, 
{"HTMLHRElement", HTMLHRElementExposedConstructCallback}, 
{"HTMLHeadElement", HTMLHeadElementExposedConstructCallback}, 
{"HTMLHeadingElement", HTMLHeadingElementExposedConstructCallback}, 
{"HTMLHtmlElement", HTMLHtmlElementExposedConstructCallback}, 
{"HTMLIFrameElement", HTMLIFrameElementExposedConstructCallback}, 
{"HTMLImageElement", HTMLImageElementExposedConstructCallback}, 
{"HTMLInputElement", HTMLInputElementExposedConstructCallback}, 
{"HTMLLIElement", HTMLLIElementExposedConstructCallback}, 
{"HTMLLabelElement", HTMLLabelElementExposedConstructCallback}, 
{"HTMLLegendElement", HTMLLegendElementExposedConstructCallback}, 
{"HTMLLinkElement", HTMLLinkElementExposedConstructCallback}, 
{"HTMLMapElement", HTMLMapElementExposedConstructCallback}, 
{"HTMLMarqueeElement", HTMLMarqueeElementExposedConstructCallback}, 
{"HTMLMediaElement", HTMLMediaElementExposedConstructCallback}, 
{"HTMLMenuElement", HTMLMenuElementExposedConstructCallback}, 
{"HTMLMetaElement", HTMLMetaElementExposedConstructCallback}, 
{"HTMLMeterElement", HTMLMeterElementExposedConstructCallback}, 
{"HTMLModElement", HTMLModElementExposedConstructCallback}, 
{"HTMLOListElement", HTMLOListElementExposedConstructCallback}, 
{"HTMLObjectElement", HTMLObjectElementExposedConstructCallback}, 
{"HTMLOptGroupElement", HTMLOptGroupElementExposedConstructCallback}, 
{"HTMLOptionElement", HTMLOptionElementExposedConstructCallback}, 
{"HTMLOptionsCollection", HTMLOptionsCollectionExposedConstructCallback}, 
{"HTMLOutputElement", HTMLOutputElementExposedConstructCallback}, 
{"HTMLParagraphElement", HTMLParagraphElementExposedConstructCallback}, 
{"HTMLParamElement", HTMLParamElementExposedConstructCallback}, 
{"HTMLPictureElement", HTMLPictureElementExposedConstructCallback}, 
{"HTMLPreElement", HTMLPreElementExposedConstructCallback}, 
{"HTMLProgressElement", HTMLProgressElementExposedConstructCallback}, 
{"HTMLQuoteElement", HTMLQuoteElementExposedConstructCallback}, 
{"HTMLScriptElement", HTMLScriptElementExposedConstructCallback}, 
{"HTMLSelectElement", HTMLSelectElementExposedConstructCallback}, 
{"HTMLSlotElement", HTMLSlotElementExposedConstructCallback}, 
{"HTMLSourceElement", HTMLSourceElementExposedConstructCallback}, 
{"HTMLSpanElement", HTMLSpanElementExposedConstructCallback}, 
{"HTMLStyleElement", HTMLStyleElementExposedConstructCallback}, 
{"HTMLTableCaptionElement", HTMLTableCaptionElementExposedConstructCallback}, 
{"HTMLTableCellElement", HTMLTableCellElementExposedConstructCallback}, 
{"HTMLTableColElement", HTMLTableColElementExposedConstructCallback}, 
{"HTMLTableElement", HTMLTableElementExposedConstructCallback}, 
{"HTMLTableRowElement", HTMLTableRowElementExposedConstructCallback}, 
{"HTMLTableSectionElement", HTMLTableSectionElementExposedConstructCallback}, 
{"HTMLTemplateElement", HTMLTemplateElementExposedConstructCallback}, 
{"HTMLTextAreaElement", HTMLTextAreaElementExposedConstructCallback}, 
{"HTMLTimeElement", HTMLTimeElementExposedConstructCallback}, 
{"HTMLTitleElement", HTMLTitleElementExposedConstructCallback}, 
{"HTMLTrackElement", HTMLTrackElementExposedConstructCallback}, 
{"HTMLUListElement", HTMLUListElementExposedConstructCallback}, 
{"HTMLUnknownElement", HTMLUnknownElementExposedConstructCallback}, 
{"HTMLVideoElement", HTMLVideoElementExposedConstructCallback}, 
{"HashChangeEvent", HashChangeEventExposedConstructCallback}, 
{"Headers", HeadersExposedConstructCallback}, 
{"History", HistoryExposedConstructCallback}, 
{"IDBCursor", IDBCursorExposedConstructCallback}, 
{"IDBCursorWithValue", IDBCursorWithValueExposedConstructCallback}, 
{"IDBDatabase", IDBDatabaseExposedConstructCallback}, 
{"IDBFactory", IDBFactoryExposedConstructCallback}, 
{"IDBIndex", IDBIndexExposedConstructCallback}, 
{"IDBKeyRange", IDBKeyRangeExposedConstructCallback}, 
{"IDBObjectStore", IDBObjectStoreExposedConstructCallback}, 
{"IDBOpenDBRequest", IDBOpenDBRequestExposedConstructCallback}, 
{"IDBRequest", IDBRequestExposedConstructCallback}, 
{"IDBTransaction", IDBTransactionExposedConstructCallback}, 
{"IDBVersionChangeEvent", IDBVersionChangeEventExposedConstructCallback}, 
{"IIRFilterNode", IIRFilterNodeExposedConstructCallback}, 
{"IdleDeadline", IdleDeadlineExposedConstructCallback}, 
{"ImageBitmap", ImageBitmapExposedConstructCallback}, 
{"ImageBitmapRenderingContext", ImageBitmapRenderingContextExposedConstructCallback}, 
{"ImageCapture", ImageCaptureExposedConstructCallback}, 
{"ImageData", ImageDataExposedConstructCallback}, 
{"InputDeviceCapabilities", InputDeviceCapabilitiesExposedConstructCallback}, 
{"InputDeviceInfo", InputDeviceInfoExposedConstructCallback}, 
{"InputEvent", InputEventExposedConstructCallback}, 
{"IntersectionObserver", IntersectionObserverExposedConstructCallback}, 
{"IntersectionObserverEntry", IntersectionObserverEntryExposedConstructCallback}, 
{"KeyboardEvent", KeyboardEventExposedConstructCallback}, 
{"KeyframeEffect", KeyframeEffectExposedConstructCallback}, 
{"LargestContentfulPaint", LargestContentfulPaintExposedConstructCallback}, 
{"LayoutShift", LayoutShiftExposedConstructCallback}, 
{"LayoutShiftAttribution", LayoutShiftAttributionExposedConstructCallback}, 
{"Location", LocationExposedConstructCallback}, 
{"MediaCapabilities", MediaCapabilitiesExposedConstructCallback}, 
{"MediaElementAudioSourceNode", MediaElementAudioSourceNodeExposedConstructCallback}, 
{"MediaEncryptedEvent", MediaEncryptedEventExposedConstructCallback}, 
{"MediaError", MediaErrorExposedConstructCallback}, 
{"MediaList", MediaListExposedConstructCallback}, 
{"MediaQueryList", MediaQueryListExposedConstructCallback}, 
{"MediaQueryListEvent", MediaQueryListEventExposedConstructCallback}, 
{"MediaRecorder", MediaRecorderExposedConstructCallback}, 
{"MediaStream", MediaStreamExposedConstructCallback}, 
{"MediaStreamAudioDestinationNode", MediaStreamAudioDestinationNodeExposedConstructCallback}, 
{"MediaStreamAudioSourceNode", MediaStreamAudioSourceNodeExposedConstructCallback}, 
{"MediaStreamEvent", MediaStreamEventExposedConstructCallback}, 
{"MediaStreamTrackEvent", MediaStreamTrackEventExposedConstructCallback}, 
{"MediaStreamTrackProcessor", MediaStreamTrackProcessorExposedConstructCallback}, 
{"MessageChannel", MessageChannelExposedConstructCallback}, 
{"MessageEvent", MessageEventExposedConstructCallback}, 
{"MessagePort", MessagePortExposedConstructCallback}, 
{"MimeType", MimeTypeExposedConstructCallback}, 
{"MimeTypeArray", MimeTypeArrayExposedConstructCallback}, 
{"MouseEvent", MouseEventExposedConstructCallback}, 
{"MutationEvent", MutationEventExposedConstructCallback}, 
{"MutationObserver", MutationObserverExposedConstructCallback}, 
{"MutationRecord", MutationRecordExposedConstructCallback}, 
{"NamedNodeMap", NamedNodeMapExposedConstructCallback}, 
{"Navigator", NavigatorExposedConstructCallback}, 
{"NetworkInformation", NetworkInformationExposedConstructCallback}, 
{"Node", NodeExposedConstructCallback}, 
{"NodeFilter", NodeFilterExposedConstructCallback}, 
{"NodeIterator", NodeIteratorExposedConstructCallback}, 
{"NodeList", NodeListExposedConstructCallback}, 
{"OfflineAudioCompletionEvent", OfflineAudioCompletionEventExposedConstructCallback}, 
{"OfflineAudioContext", OfflineAudioContextExposedConstructCallback}, 
{"OffscreenCanvas", OffscreenCanvasExposedConstructCallback}, 
{"OffscreenCanvasRenderingContext2D", OffscreenCanvasRenderingContext2DExposedConstructCallback}, 
{"OscillatorNode", OscillatorNodeExposedConstructCallback}, 
{"OverconstrainedError", OverconstrainedErrorExposedConstructCallback}, 
{"PageTransitionEvent", PageTransitionEventExposedConstructCallback}, 
{"PannerNode", PannerNodeExposedConstructCallback}, 
{"Path2D", Path2DExposedConstructCallback}, 
{"Performance", PerformanceExposedConstructCallback}, 
{"PerformanceElementTiming", PerformanceElementTimingExposedConstructCallback}, 
{"PerformanceEntry", PerformanceEntryExposedConstructCallback}, 
{"PerformanceEventTiming", PerformanceEventTimingExposedConstructCallback}, 
{"PerformanceLongTaskTiming", PerformanceLongTaskTimingExposedConstructCallback}, 
{"PerformanceMark", PerformanceMarkExposedConstructCallback}, 
{"PerformanceMeasure", PerformanceMeasureExposedConstructCallback}, 
{"PerformanceNavigation", PerformanceNavigationExposedConstructCallback}, 
{"PerformanceNavigationTiming", PerformanceNavigationTimingExposedConstructCallback}, 
{"PerformanceObserver", PerformanceObserverExposedConstructCallback}, 
{"PerformanceObserverEntryList", PerformanceObserverEntryListExposedConstructCallback}, 
{"PerformancePaintTiming", PerformancePaintTimingExposedConstructCallback}, 
{"PerformanceResourceTiming", PerformanceResourceTimingExposedConstructCallback}, 
{"PerformanceServerTiming", PerformanceServerTimingExposedConstructCallback}, 
{"PerformanceTiming", PerformanceTimingExposedConstructCallback}, 
{"PeriodicWave", PeriodicWaveExposedConstructCallback}, 
{"Plugin", PluginExposedConstructCallback}, 
{"PluginArray", PluginArrayExposedConstructCallback}, 
{"PointerEvent", PointerEventExposedConstructCallback}, 
{"PopStateEvent", PopStateEventExposedConstructCallback}, 
{"ProcessingInstruction", ProcessingInstructionExposedConstructCallback}, 
{"Profiler", ProfilerExposedConstructCallback}, 
{"ProgressEvent", ProgressEventExposedConstructCallback}, 
{"PromiseRejectionEvent", PromiseRejectionEventExposedConstructCallback}, 
{"RTCCertificate", RTCCertificateExposedConstructCallback}, 
{"RTCDTMFSender", RTCDTMFSenderExposedConstructCallback}, 
{"RTCDTMFToneChangeEvent", RTCDTMFToneChangeEventExposedConstructCallback}, 
{"RTCDataChannel", RTCDataChannelExposedConstructCallback}, 
{"RTCDataChannelEvent", RTCDataChannelEventExposedConstructCallback}, 
{"RTCDtlsTransport", RTCDtlsTransportExposedConstructCallback}, 
{"RTCEncodedAudioFrame", RTCEncodedAudioFrameExposedConstructCallback}, 
{"RTCEncodedVideoFrame", RTCEncodedVideoFrameExposedConstructCallback}, 
{"RTCError", RTCErrorExposedConstructCallback}, 
{"RTCErrorEvent", RTCErrorEventExposedConstructCallback}, 
{"RTCIceCandidate", RTCIceCandidateExposedConstructCallback}, 
{"RTCPeerConnection", RTCPeerConnectionExposedConstructCallback}, 
{"RTCPeerConnectionIceErrorEvent", RTCPeerConnectionIceErrorEventExposedConstructCallback}, 
{"RTCPeerConnectionIceEvent", RTCPeerConnectionIceEventExposedConstructCallback}, 
{"RTCRtpReceiver", RTCRtpReceiverExposedConstructCallback}, 
{"RTCRtpSender", RTCRtpSenderExposedConstructCallback}, 
{"RTCRtpTransceiver", RTCRtpTransceiverExposedConstructCallback}, 
{"RTCSctpTransport", RTCSctpTransportExposedConstructCallback}, 
{"RTCSessionDescription", RTCSessionDescriptionExposedConstructCallback}, 
{"RTCStatsReport", RTCStatsReportExposedConstructCallback}, 
{"RTCTrackEvent", RTCTrackEventExposedConstructCallback}, 
{"RadioNodeList", RadioNodeListExposedConstructCallback}, 
{"Range", RangeExposedConstructCallback}, 
{"ReadableByteStreamController", ReadableByteStreamControllerExposedConstructCallback}, 
{"ReadableStream", ReadableStreamExposedConstructCallback}, 
{"ReadableStreamBYOBReader", ReadableStreamBYOBReaderExposedConstructCallback}, 
{"ReadableStreamBYOBRequest", ReadableStreamBYOBRequestExposedConstructCallback}, 
{"ReadableStreamDefaultController", ReadableStreamDefaultControllerExposedConstructCallback}, 
{"ReadableStreamDefaultReader", ReadableStreamDefaultReaderExposedConstructCallback}, 
{"ReportingObserver", ReportingObserverExposedConstructCallback}, 
{"Request", RequestExposedConstructCallback}, 
{"ResizeObserver", ResizeObserverExposedConstructCallback}, 
{"ResizeObserverEntry", ResizeObserverEntryExposedConstructCallback}, 
{"ResizeObserverSize", ResizeObserverSizeExposedConstructCallback}, 
{"Response", ResponseExposedConstructCallback}, 
{"SVGAElement", SVGAElementExposedConstructCallback}, 
{"SVGAngle", SVGAngleExposedConstructCallback}, 
{"SVGAnimateElement", SVGAnimateElementExposedConstructCallback}, 
{"SVGAnimateMotionElement", SVGAnimateMotionElementExposedConstructCallback}, 
{"SVGAnimateTransformElement", SVGAnimateTransformElementExposedConstructCallback}, 
{"SVGAnimatedAngle", SVGAnimatedAngleExposedConstructCallback}, 
{"SVGAnimatedBoolean", SVGAnimatedBooleanExposedConstructCallback}, 
{"SVGAnimatedEnumeration", SVGAnimatedEnumerationExposedConstructCallback}, 
{"SVGAnimatedInteger", SVGAnimatedIntegerExposedConstructCallback}, 
{"SVGAnimatedLength", SVGAnimatedLengthExposedConstructCallback}, 
{"SVGAnimatedLengthList", SVGAnimatedLengthListExposedConstructCallback}, 
{"SVGAnimatedNumber", SVGAnimatedNumberExposedConstructCallback}, 
{"SVGAnimatedNumberList", SVGAnimatedNumberListExposedConstructCallback}, 
{"SVGAnimatedPreserveAspectRatio", SVGAnimatedPreserveAspectRatioExposedConstructCallback}, 
{"SVGAnimatedRect", SVGAnimatedRectExposedConstructCallback}, 
{"SVGAnimatedString", SVGAnimatedStringExposedConstructCallback}, 
{"SVGAnimatedTransformList", SVGAnimatedTransformListExposedConstructCallback}, 
{"SVGAnimationElement", SVGAnimationElementExposedConstructCallback}, 
{"SVGCircleElement", SVGCircleElementExposedConstructCallback}, 
{"SVGClipPathElement", SVGClipPathElementExposedConstructCallback}, 
{"SVGComponentTransferFunctionElement", SVGComponentTransferFunctionElementExposedConstructCallback}, 
{"SVGDefsElement", SVGDefsElementExposedConstructCallback}, 
{"SVGDescElement", SVGDescElementExposedConstructCallback}, 
{"SVGElement", SVGElementExposedConstructCallback}, 
{"SVGEllipseElement", SVGEllipseElementExposedConstructCallback}, 
{"SVGFEBlendElement", SVGFEBlendElementExposedConstructCallback}, 
{"SVGFEColorMatrixElement", SVGFEColorMatrixElementExposedConstructCallback}, 
{"SVGFEComponentTransferElement", SVGFEComponentTransferElementExposedConstructCallback}, 
{"SVGFECompositeElement", SVGFECompositeElementExposedConstructCallback}, 
{"SVGFEConvolveMatrixElement", SVGFEConvolveMatrixElementExposedConstructCallback}, 
{"SVGFEDiffuseLightingElement", SVGFEDiffuseLightingElementExposedConstructCallback}, 
{"SVGFEDisplacementMapElement", SVGFEDisplacementMapElementExposedConstructCallback}, 
{"SVGFEDistantLightElement", SVGFEDistantLightElementExposedConstructCallback}, 
{"SVGFEDropShadowElement", SVGFEDropShadowElementExposedConstructCallback}, 
{"SVGFEFloodElement", SVGFEFloodElementExposedConstructCallback}, 
{"SVGFEFuncAElement", SVGFEFuncAElementExposedConstructCallback}, 
{"SVGFEFuncBElement", SVGFEFuncBElementExposedConstructCallback}, 
{"SVGFEFuncGElement", SVGFEFuncGElementExposedConstructCallback}, 
{"SVGFEFuncRElement", SVGFEFuncRElementExposedConstructCallback}, 
{"SVGFEGaussianBlurElement", SVGFEGaussianBlurElementExposedConstructCallback}, 
{"SVGFEImageElement", SVGFEImageElementExposedConstructCallback}, 
{"SVGFEMergeElement", SVGFEMergeElementExposedConstructCallback}, 
{"SVGFEMergeNodeElement", SVGFEMergeNodeElementExposedConstructCallback}, 
{"SVGFEMorphologyElement", SVGFEMorphologyElementExposedConstructCallback}, 
{"SVGFEOffsetElement", SVGFEOffsetElementExposedConstructCallback}, 
{"SVGFEPointLightElement", SVGFEPointLightElementExposedConstructCallback}, 
{"SVGFESpecularLightingElement", SVGFESpecularLightingElementExposedConstructCallback}, 
{"SVGFESpotLightElement", SVGFESpotLightElementExposedConstructCallback}, 
{"SVGFETileElement", SVGFETileElementExposedConstructCallback}, 
{"SVGFETurbulenceElement", SVGFETurbulenceElementExposedConstructCallback}, 
{"SVGFilterElement", SVGFilterElementExposedConstructCallback}, 
{"SVGForeignObjectElement", SVGForeignObjectElementExposedConstructCallback}, 
{"SVGGElement", SVGGElementExposedConstructCallback}, 
{"SVGGeometryElement", SVGGeometryElementExposedConstructCallback}, 
{"SVGGradientElement", SVGGradientElementExposedConstructCallback}, 
{"SVGGraphicsElement", SVGGraphicsElementExposedConstructCallback}, 
{"SVGImageElement", SVGImageElementExposedConstructCallback}, 
{"SVGLength", SVGLengthExposedConstructCallback}, 
{"SVGLengthList", SVGLengthListExposedConstructCallback}, 
{"SVGLineElement", SVGLineElementExposedConstructCallback}, 
{"SVGLinearGradientElement", SVGLinearGradientElementExposedConstructCallback}, 
{"SVGMPathElement", SVGMPathElementExposedConstructCallback}, 
{"SVGMarkerElement", SVGMarkerElementExposedConstructCallback}, 
{"SVGMaskElement", SVGMaskElementExposedConstructCallback}, 
{"SVGMatrix", SVGMatrixExposedConstructCallback}, 
{"SVGMetadataElement", SVGMetadataElementExposedConstructCallback}, 
{"SVGNumber", SVGNumberExposedConstructCallback}, 
{"SVGNumberList", SVGNumberListExposedConstructCallback}, 
{"SVGPathElement", SVGPathElementExposedConstructCallback}, 
{"SVGPatternElement", SVGPatternElementExposedConstructCallback}, 
{"SVGPoint", SVGPointExposedConstructCallback}, 
{"SVGPointList", SVGPointListExposedConstructCallback}, 
{"SVGPolygonElement", SVGPolygonElementExposedConstructCallback}, 
{"SVGPolylineElement", SVGPolylineElementExposedConstructCallback}, 
{"SVGPreserveAspectRatio", SVGPreserveAspectRatioExposedConstructCallback}, 
{"SVGRadialGradientElement", SVGRadialGradientElementExposedConstructCallback}, 
{"SVGRect", SVGRectExposedConstructCallback}, 
{"SVGRectElement", SVGRectElementExposedConstructCallback}, 
{"SVGSVGElement", SVGSVGElementExposedConstructCallback}, 
{"SVGScriptElement", SVGScriptElementExposedConstructCallback}, 
{"SVGSetElement", SVGSetElementExposedConstructCallback}, 
{"SVGStopElement", SVGStopElementExposedConstructCallback}, 
{"SVGStringList", SVGStringListExposedConstructCallback}, 
{"SVGStyleElement", SVGStyleElementExposedConstructCallback}, 
{"SVGSwitchElement", SVGSwitchElementExposedConstructCallback}, 
{"SVGSymbolElement", SVGSymbolElementExposedConstructCallback}, 
{"SVGTSpanElement", SVGTSpanElementExposedConstructCallback}, 
{"SVGTextContentElement", SVGTextContentElementExposedConstructCallback}, 
{"SVGTextElement", SVGTextElementExposedConstructCallback}, 
{"SVGTextPathElement", SVGTextPathElementExposedConstructCallback}, 
{"SVGTextPositioningElement", SVGTextPositioningElementExposedConstructCallback}, 
{"SVGTitleElement", SVGTitleElementExposedConstructCallback}, 
{"SVGTransform", SVGTransformExposedConstructCallback}, 
{"SVGTransformList", SVGTransformListExposedConstructCallback}, 
{"SVGUnitTypes", SVGUnitTypesExposedConstructCallback}, 
{"SVGUseElement", SVGUseElementExposedConstructCallback}, 
{"SVGViewElement", SVGViewElementExposedConstructCallback}, 
{"Scheduler", SchedulerExposedConstructCallback}, 
{"Scheduling", SchedulingExposedConstructCallback}, 
{"Screen", ScreenExposedConstructCallback}, 
{"ScreenOrientation", ScreenOrientationExposedConstructCallback}, 
{"ScriptProcessorNode", ScriptProcessorNodeExposedConstructCallback}, 
{"SecurityPolicyViolationEvent", SecurityPolicyViolationEventExposedConstructCallback}, 
{"Selection", SelectionExposedConstructCallback}, 
{"ShadowRoot", ShadowRootExposedConstructCallback}, 
{"StaticRange", StaticRangeExposedConstructCallback}, 
{"StereoPannerNode", StereoPannerNodeExposedConstructCallback}, 
{"Storage", StorageExposedConstructCallback}, 
{"StorageEvent", StorageEventExposedConstructCallback}, 
{"StylePropertyMap", StylePropertyMapExposedConstructCallback}, 
{"StylePropertyMapReadOnly", StylePropertyMapReadOnlyExposedConstructCallback}, 
{"StyleSheet", StyleSheetExposedConstructCallback}, 
{"StyleSheetList", StyleSheetListExposedConstructCallback}, 
{"SubmitEvent", SubmitEventExposedConstructCallback}, 
{"SyncManager", SyncManagerExposedConstructCallback}, 
{"TaskAttributionTiming", TaskAttributionTimingExposedConstructCallback}, 
{"TaskController", TaskControllerExposedConstructCallback}, 
{"TaskPriorityChangeEvent", TaskPriorityChangeEventExposedConstructCallback}, 
{"TaskSignal", TaskSignalExposedConstructCallback}, 
{"Text", TextExposedConstructCallback}, 
{"TextDecoder", TextDecoderExposedConstructCallback}, 
{"TextDecoderStream", TextDecoderStreamExposedConstructCallback}, 
{"TextEncoder", TextEncoderExposedConstructCallback}, 
{"TextEncoderStream", TextEncoderStreamExposedConstructCallback}, 
{"TextEvent", TextEventExposedConstructCallback}, 
{"TextMetrics", TextMetricsExposedConstructCallback}, 
{"TextTrack", TextTrackExposedConstructCallback}, 
{"TextTrackCue", TextTrackCueExposedConstructCallback}, 
{"TextTrackCueList", TextTrackCueListExposedConstructCallback}, 
{"TextTrackList", TextTrackListExposedConstructCallback}, 
{"TimeRanges", TimeRangesExposedConstructCallback}, 
{"Touch", TouchExposedConstructCallback}, 
{"TouchEvent", TouchEventExposedConstructCallback}, 
{"TouchList", TouchListExposedConstructCallback}, 
{"TrackEvent", TrackEventExposedConstructCallback}, 
{"TransformStream", TransformStreamExposedConstructCallback}, 
{"TransformStreamDefaultController", TransformStreamDefaultControllerExposedConstructCallback}, 
{"TransitionEvent", TransitionEventExposedConstructCallback}, 
{"TreeWalker", TreeWalkerExposedConstructCallback}, 
{"TrustedHTML", TrustedHTMLExposedConstructCallback}, 
{"TrustedScript", TrustedScriptExposedConstructCallback}, 
{"TrustedScriptURL", TrustedScriptURLExposedConstructCallback}, 
{"TrustedTypePolicy", TrustedTypePolicyExposedConstructCallback}, 
{"TrustedTypePolicyFactory", TrustedTypePolicyFactoryExposedConstructCallback}, 
{"UIEvent", UIEventExposedConstructCallback}, 
{"URL", URLExposedConstructCallback}, 
{"URLPattern", URLPatternExposedConstructCallback}, 
{"URLSearchParams", URLSearchParamsExposedConstructCallback}, 
{"UserActivation", UserActivationExposedConstructCallback}, 
{"VTTCue", VTTCueExposedConstructCallback}, 
{"ValidityState", ValidityStateExposedConstructCallback}, 
{"VisualViewport", VisualViewportExposedConstructCallback}, 
{"WaveShaperNode", WaveShaperNodeExposedConstructCallback}, 
{"WebGL2RenderingContext", WebGL2RenderingContextExposedConstructCallback}, 
{"WebGLActiveInfo", WebGLActiveInfoExposedConstructCallback}, 
{"WebGLBuffer", WebGLBufferExposedConstructCallback}, 
{"WebGLContextEvent", WebGLContextEventExposedConstructCallback}, 
{"WebGLFramebuffer", WebGLFramebufferExposedConstructCallback}, 
{"WebGLProgram", WebGLProgramExposedConstructCallback}, 
{"WebGLQuery", WebGLQueryExposedConstructCallback}, 
{"WebGLRenderbuffer", WebGLRenderbufferExposedConstructCallback}, 
{"WebGLRenderingContext", WebGLRenderingContextExposedConstructCallback}, 
{"WebGLSampler", WebGLSamplerExposedConstructCallback}, 
{"WebGLShader", WebGLShaderExposedConstructCallback}, 
{"WebGLShaderPrecisionFormat", WebGLShaderPrecisionFormatExposedConstructCallback}, 
{"WebGLSync", WebGLSyncExposedConstructCallback}, 
{"WebGLTexture", WebGLTextureExposedConstructCallback}, 
{"WebGLTransformFeedback", WebGLTransformFeedbackExposedConstructCallback}, 
{"WebGLUniformLocation", WebGLUniformLocationExposedConstructCallback}, 
{"WebGLVertexArrayObject", WebGLVertexArrayObjectExposedConstructCallback}, 
{"WebSocket", WebSocketExposedConstructCallback}, 
{"WheelEvent", WheelEventExposedConstructCallback}, 
{"Window", WindowExposedConstructCallback}, 
{"Worker", WorkerExposedConstructCallback}, 
{"WritableStream", WritableStreamExposedConstructCallback}, 
{"WritableStreamDefaultController", WritableStreamDefaultControllerExposedConstructCallback}, 
{"WritableStreamDefaultWriter", WritableStreamDefaultWriterExposedConstructCallback}, 
{"XMLDocument", XMLDocumentExposedConstructCallback}, 
{"XMLHttpRequest", XMLHttpRequestExposedConstructCallback}, 
{"XMLHttpRequestEventTarget", XMLHttpRequestEventTargetExposedConstructCallback}, 
{"XMLHttpRequestUpload", XMLHttpRequestUploadExposedConstructCallback}, 
{"XMLSerializer", XMLSerializerExposedConstructCallback}, 
{"XPathEvaluator", XPathEvaluatorExposedConstructCallback}, 
{"XPathExpression", XPathExpressionExposedConstructCallback}, 
{"XPathResult", XPathResultExposedConstructCallback}, 
{"WebKitCSSMatrix", WebKitCSSMatrixLegacyWindowAliasCallback}, 
{"WebKitMutationObserver", WebKitMutationObserverLegacyWindowAliasCallback}, 
{"webkitMediaStream", WebkitMediaStreamLegacyWindowAliasCallback}, 
{"webkitRTCPeerConnection", WebkitRTCPeerConnectionLegacyWindowAliasCallback}, 
{"webkitURL", WebkitURLLegacyWindowAliasCallback}, 
{"Audio", AudioNamedConstructorPropertyCallback}, 
{"Image", ImageNamedConstructorPropertyCallback}, 
{"Option", OptionNamedConstructorPropertyCallback}, 
};
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}


{
  static const IDLMemberInstaller::OperationConfig kOperationTable[] = {
{"alert", AlertOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"atob", AtobOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"blur", BlurOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kDoNotCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"btoa", BtoaOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"cancelAnimationFrame", CancelAnimationFrameOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"cancelIdleCallback", CancelIdleCallbackOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"captureEvents", CaptureEventsOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"clearInterval", ClearIntervalOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"clearTimeout", ClearTimeoutOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"close", CloseOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kDoNotCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"confirm", ConfirmOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"createImageBitmap", CreateImageBitmapOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"fetch", FetchOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"find", FindOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"focus", FocusOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kDoNotCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"getComputedStyle", GetComputedStyleOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect)}, 
{"getSelection", GetSelectionOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect)}, 
{"matchMedia", MatchMediaOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"moveBy", MoveByOperationCallback, 2, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"moveTo", MoveToOperationCallback, 2, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"open", OpenOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"postMessage", PostMessageOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kDoNotCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"print", PrintOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"prompt", PromptOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"queueMicrotask", QueueMicrotaskOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"releaseEvents", ReleaseEventsOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"reportError", ReportErrorOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"requestAnimationFrame", RequestAnimationFrameOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"requestIdleCallback", RequestIdleCallbackOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"resizeBy", ResizeByOperationCallback, 2, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"resizeTo", ResizeToOperationCallback, 2, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"scroll", ScrollOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"scrollBy", ScrollByOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"scrollTo", ScrollToOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"setInterval", SetIntervalOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"setTimeout", SetTimeoutOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"stop", StopOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"structuredClone", StructuredCloneOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"webkitCancelAnimationFrame", WebkitCancelAnimationFrameOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"webkitRequestAnimationFrame", WebkitRequestAnimationFrameOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
};
IDLMemberInstaller::InstallOperations(isolate, world, instance_template, prototype_template, interface_template, signature, kOperationTable);
}



}

void V8Window::Impl::InstallContextIndependentProperties(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Template> instance_template, v8::Local<v8::Template> prototype_template, v8::Local<v8::Template> interface_template) {
  using bindings::IDLMemberInstaller;

if (RuntimeEnabledFeatures::OriginIsolationHeaderEnabled()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"originAgentCluster", OriginAgentClusterAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_template, prototype_template, interface_template, signature, kAttributeTable);
}
if (RuntimeEnabledFeatures::OrientationEventEnabled()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"onorientationchange", OnorientationchangeAttributeGetCallback, OnorientationchangeAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"orientation", OrientationAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_template, prototype_template, interface_template, signature, kAttributeTable);
}
if (RuntimeEnabledFeatures::NavigationApiEnabled()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"navigation", NavigationAttributeGetCallback, NavigationAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_template, prototype_template, interface_template, signature, kAttributeTable);
}
if (RuntimeEnabledFeatures::PrefixedStorageInfoEnabled()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"webkitStorageInfo", WebkitStorageInfoAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_template, prototype_template, interface_template, signature, kAttributeTable);
}
if (RuntimeEnabledFeatures::ScriptedSpeechSynthesisEnabled()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"speechSynthesis", SpeechSynthesisAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_template, prototype_template, interface_template, signature, kAttributeTable);
}
if (RuntimeEnabledFeatures::ContentVisibilityAutoStateChangedEventEnabled()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"oncontentvisibilityautostatechanged", OncontentvisibilityautostatechangedAttributeGetCallback, OncontentvisibilityautostatechangedAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_template, prototype_template, interface_template, signature, kAttributeTable);
}
if (RuntimeEnabledFeatures::OverscrollCustomizationEnabled()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"onoverscroll", OnoverscrollAttributeGetCallback, OnoverscrollAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_template, prototype_template, interface_template, signature, kAttributeTable);
}
if (RuntimeEnabledFeatures::ScrollEndEventsEnabled()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"onscrollend", OnscrollendAttributeGetCallback, OnscrollendAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_template, prototype_template, interface_template, signature, kAttributeTable);
}
if (RuntimeEnabledFeatures::TimeZoneChangeEventEnabled()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"ontimezonechange", OntimezonechangeAttributeGetCallback, OntimezonechangeAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_template, prototype_template, interface_template, signature, kAttributeTable);
}
if (RuntimeEnabledFeatures::CoepReflectionEnabled()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"crossOriginEmbedderPolicy", CrossOriginEmbedderPolicyAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_template, prototype_template, interface_template, signature, kAttributeTable);
}



if (RuntimeEnabledFeatures::AccessibilityObjectModelEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"AccessibleNode", AccessibleNodeExposedConstructCallback}, 
{"AccessibleNodeList", AccessibleNodeListExposedConstructCallback}, 
{"ComputedAccessibleNode", ComputedAccessibleNodeExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::WebAnimationsAPIEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"AnimationPlaybackEvent", AnimationPlaybackEventExposedConstructCallback}, 
{"AnimationTimeline", AnimationTimelineExposedConstructCallback}, 
{"CSSAnimation", CSSAnimationExposedConstructCallback}, 
{"CSSTransition", CSSTransitionExposedConstructCallback}, 
{"DocumentTimeline", DocumentTimelineExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::AudioVideoTracksEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"AudioTrack", AudioTrackExposedConstructCallback}, 
{"AudioTrackList", AudioTrackListExposedConstructCallback}, 
{"VideoTrack", VideoTrackExposedConstructCallback}, 
{"VideoTrackList", VideoTrackListExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::NavigationIdEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"BackForwardCacheRestoration", BackForwardCacheRestorationExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::BackgroundFetchEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"BackgroundFetchManager", BackgroundFetchManagerExposedConstructCallback}, 
{"BackgroundFetchRecord", BackgroundFetchRecordExposedConstructCallback}, 
{"BackgroundFetchRegistration", BackgroundFetchRegistrationExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::TrustedTypeBeforePolicyCreationEventEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"BeforeCreatePolicyEvent", BeforeCreatePolicyEventExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::WebBluetoothEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"BluetoothUUID", BluetoothUUIDExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::CSSColorTypedOMEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"CSSColorValue", CSSColorValueExposedConstructCallback}, 
{"CSSHSL", CSSHSLExposedConstructCallback}, 
{"CSSHWB", CSSHWBExposedConstructCallback}, 
{"CSSRGB", CSSRGBExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::CSSContainerQueriesEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"CSSContainerRule", CSSContainerRuleExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::FontPaletteEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"CSSFontPaletteValuesRule", CSSFontPaletteValuesRuleExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::CSSAnchorPositioningEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"CSSPositionFallbackRule", CSSPositionFallbackRuleExposedConstructCallback}, 
{"CSSTryRule", CSSTryRuleExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::CSSScopeEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"CSSScopeRule", CSSScopeRuleExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::CSSScrollTimelineEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"CSSScrollTimelineRule", CSSScrollTimelineRuleExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::CanvasFormattedTextEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"CanvasFormattedText", CanvasFormattedTextExposedConstructCallback}, 
{"CanvasFormattedTextRun", CanvasFormattedTextRunExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::EditContextEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"CharacterBoundsUpdateEvent", CharacterBoundsUpdateEventExposedConstructCallback}, 
{"EditContext", EditContextExposedConstructCallback}, 
{"TextFormat", TextFormatExposedConstructCallback}, 
{"TextFormatUpdateEvent", TextFormatUpdateEventExposedConstructCallback}, 
{"TextUpdateEvent", TextUpdateEventExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::CloseWatcherEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"CloseWatcher", CloseWatcherExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::ContentIndexEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"ContentIndex", ContentIndexExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::ContentVisibilityAutoStateChangedEventEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"ContentVisibilityAutoStateChangedEvent", ContentVisibilityAutoStateChangedEventExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::DelegatedInkTrailsEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"DelegatedInkTrailPresenter", DelegatedInkTrailPresenterExposedConstructCallback}, 
{"Ink", InkExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::TextFragmentAPIEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"Directive", DirectiveExposedConstructCallback}, 
{"SelectorDirective", SelectorDirectiveExposedConstructCallback}, 
{"TextDirective", TextDirectiveExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::GamepadButtonAxisEventsEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"GamepadAxisEvent", GamepadAxisEventExposedConstructCallback}, 
{"GamepadButtonEvent", GamepadButtonEventExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::HTMLSelectMenuElementEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"HTMLSelectMenuElement", HTMLSelectMenuElementExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::HighlightAPIEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"Highlight", HighlightExposedConstructCallback}, 
{"HighlightRegistry", HighlightRegistryExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::HighlightPointerEventsEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"HighlightPointerEvent", HighlightPointerEventExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::MachineLearningCommonEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"ML", MLExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::MachineLearningNeuralNetworkEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"MLGraphBuilder", MLGraphBuilderExposedConstructCallback}, 
{"MLOperand", MLOperandExposedConstructCallback}, 
{"MLOperator", MLOperatorExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::MachineLearningModelLoaderEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"MLModelLoader", MLModelLoaderExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::MathMLCoreEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"MathMLElement", MathMLElementExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::MediaSessionEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"MediaMetadata", MediaMetadataExposedConstructCallback}, 
{"MediaSession", MediaSessionExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::MediaSourceStableEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"MediaSource", MediaSourceExposedConstructCallback}, 
{"SourceBuffer", SourceBufferExposedConstructCallback}, 
{"SourceBufferList", SourceBufferListExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::MediaSourceInWorkersUsingHandleEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"MediaSourceHandle", MediaSourceHandleExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::MediaStreamTrackInWindowEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"MediaStreamTrack", MediaStreamTrackExposedConstructCallback}, 
{"MediaStreamTrackGenerator", MediaStreamTrackGeneratorExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::MojoJSTestEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"MojoInterfaceInterceptor", MojoInterfaceInterceptorExposedConstructCallback}, 
{"MojoInterfaceRequestEvent", MojoInterfaceRequestEventExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::NavigationApiEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"NavigateEvent", NavigateEventExposedConstructCallback}, 
{"Navigation", NavigationExposedConstructCallback}, 
{"NavigationCurrentEntryChangeEvent", NavigationCurrentEntryChangeEventExposedConstructCallback}, 
{"NavigationDestination", NavigationDestinationExposedConstructCallback}, 
{"NavigationHistoryEntry", NavigationHistoryEntryExposedConstructCallback}, 
{"NavigationTransition", NavigationTransitionExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::UserAgentClientHintEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"NavigatorUAData", NavigatorUADataExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::NotificationsEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"Notification", NotificationExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::OverscrollCustomizationEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"OverscrollEvent", OverscrollEventExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::PaymentAppEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"PaymentInstruments", PaymentInstrumentsExposedConstructCallback}, 
{"PaymentManager", PaymentManagerExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::PaymentRequestEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"PaymentRequestUpdateEvent", PaymentRequestUpdateEventExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::PeriodicBackgroundSyncEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"PeriodicSyncManager", PeriodicSyncManagerExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::PermissionsEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"PermissionStatus", PermissionStatusExposedConstructCallback}, 
{"Permissions", PermissionsExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::PictureInPictureAPIEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"PictureInPictureEvent", PictureInPictureEventExposedConstructCallback}, 
{"PictureInPictureWindow", PictureInPictureWindowExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::PushMessagingEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"PushManager", PushManagerExposedConstructCallback}, 
{"PushSubscription", PushSubscriptionExposedConstructCallback}, 
{"PushSubscriptionOptions", PushSubscriptionOptionsExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::RemotePlaybackEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"RemotePlayback", RemotePlaybackExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::ScrollCustomizationEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"ScrollState", ScrollStateExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::ScrollTimelineEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"ScrollTimeline", ScrollTimelineExposedConstructCallback}, 
{"ViewTimeline", ViewTimelineExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::SharedWorkerEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"SharedWorker", SharedWorkerExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::ScriptedSpeechSynthesisEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"SpeechSynthesisErrorEvent", SpeechSynthesisErrorEventExposedConstructCallback}, 
{"SpeechSynthesisEvent", SpeechSynthesisEventExposedConstructCallback}, 
{"SpeechSynthesisUtterance", SpeechSynthesisUtteranceExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::MediaSourceExperimentalEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"TrackDefault", TrackDefaultExposedConstructCallback}, 
{"TrackDefaultList", TrackDefaultListExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::WebVTTRegionsEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"VTTRegion", VTTRegionExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::VideoPlaybackQualityEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"VideoPlaybackQuality", VideoPlaybackQualityExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::VideoTrackGeneratorInWindowEnabled() && RuntimeEnabledFeatures::VideoTrackGeneratorEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"VideoTrackGenerator", VideoTrackGeneratorExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::VirtualKeyboardEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"VirtualKeyboardGeometryChangeEvent", VirtualKeyboardGeometryChangeEventExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::VisibilityStateEntryEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"VisibilityStateEntry", VisibilityStateEntryExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::WebSocketStreamEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"WebSocketStream", WebSocketStreamExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::AnimationWorkletEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"WorkletAnimation", WorkletAnimationExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::XSLTEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"XSLTProcessor", XSLTProcessorExposedConstructCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::ScriptedSpeechRecognitionEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"webkitSpeechGrammar", WebkitSpeechGrammarLegacyWindowAliasCallback}, 
{"webkitSpeechGrammarList", WebkitSpeechGrammarListLegacyWindowAliasCallback}, 
{"webkitSpeechRecognition", WebkitSpeechRecognitionLegacyWindowAliasCallback}, 
{"webkitSpeechRecognitionError", WebkitSpeechRecognitionErrorLegacyWindowAliasCallback}, 
{"webkitSpeechRecognitionEvent", WebkitSpeechRecognitionEventLegacyWindowAliasCallback}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_template, prototype_template, interface_template, signature, kExposedConstructTable);
}

if (RuntimeEnabledFeatures::AccessibilityObjectModelEnabled()) {
  static const IDLMemberInstaller::OperationConfig kOperationTable[] = {
{"getComputedAccessibleNode", GetComputedAccessibleNodeOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallOperations(isolate, world, instance_template, prototype_template, interface_template, signature, kOperationTable);
}
if (RuntimeEnabledFeatures::DatabaseEnabled()) {
  static const IDLMemberInstaller::OperationConfig kOperationTable[] = {
{"openDatabase", OpenDatabaseOperationCallback, 4, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallOperations(isolate, world, instance_template, prototype_template, interface_template, signature, kOperationTable);
}
if (RuntimeEnabledFeatures::FileSystemEnabled()) {
  static const IDLMemberInstaller::OperationConfig kOperationTable[] = {
{"webkitRequestFileSystem", WebkitRequestFileSystemOperationCallback, 3, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"webkitResolveLocalFileSystemURL", WebkitResolveLocalFileSystemURLOperationCallback, 2, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallOperations(isolate, world, instance_template, prototype_template, interface_template, signature, kOperationTable);
}


}

void V8Window::Impl::InstallContextDependentProperties(v8::Local<v8::Context> context, const DOMWrapperWorld& world, v8::Local<v8::Object> instance_object, v8::Local<v8::Object> prototype_object, v8::Local<v8::Object> interface_object, v8::Local<v8::Template> interface_template, FeatureSelector feature_selector) {
  using bindings::IDLMemberInstaller;

if (instance_object.IsEmpty()) {
  instance_object = context->Global()->GetPrototype().As<v8::Object>();
}

if (feature_selector.IsAll()) {
  v8::Isolate* isolate = context->GetIsolate();
// https://webidl.spec.whatwg.org/#named-properties-object
// V8 defines "constructor" property on the prototype object by default.
// Named properties object is currently implemented as a prototype object
// (implemented with v8::FunctionTemplate::PrototypeTemplate()).
prototype_object->GetPrototype().As<v8::Object>()->Delete(
    context, V8AtomicString(isolate, "constructor")).ToChecked();

}

ScriptState* script_state = ScriptState::From(context);
ExecutionContext* execution_context = ExecutionContext::From(script_state);
if ((feature_selector.IsAll() && RuntimeEnabledFeatures::AnonymousIframeEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kAnonymousIframe)) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"anonymouslyFramed", AnonymouslyFramedAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_object, prototype_object, interface_object, signature, kAttributeTable);
}
if ((feature_selector.IsAll() && RuntimeEnabledFeatures::FencedFramesEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kFencedFrames)) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"fence", FenceAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_object, prototype_object, interface_object, signature, kAttributeTable);
}
if ((feature_selector.IsAll() && RuntimeEnabledFeatures::PortalsEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kPortals)) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"portalHost", PortalHostAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"onportalactivate", OnportalactivateAttributeGetCallback, OnportalactivateAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_object, prototype_object, interface_object, signature, kAttributeTable);
}
if ((feature_selector.IsAll() && RuntimeEnabledFeatures::OriginTrialsSampleAPIEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kOriginTrialsSampleAPI)) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"testOriginTrialGlobalAttribute", TestOriginTrialGlobalAttributeAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_object, prototype_object, interface_object, signature, kAttributeTable);
}
const bool is_in_secure_context = execution_context->IsSecureContext();
if (is_in_secure_context && feature_selector.IsAll()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"caches", CachesAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"cookieStore", CookieStoreAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ondevicemotion", OndevicemotionAttributeGetCallback, OndevicemotionAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ondeviceorientation", OndeviceorientationAttributeGetCallback, OndeviceorientationAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ondeviceorientationabsolute", OndeviceorientationabsoluteAttributeGetCallback, OndeviceorientationabsoluteAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_object, prototype_object, interface_object, signature, kAttributeTable);
}
if ((feature_selector.IsAll() && RuntimeEnabledFeatures::WebAppLaunchQueueEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kWebAppLaunchQueue)) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"launchQueue", LaunchQueueAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_object, prototype_object, interface_object, signature, kAttributeTable);
}
if (is_in_secure_context && ((feature_selector.IsAll() && RuntimeEnabledFeatures::StorageFoundationAPIEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kStorageFoundationAPI))) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"storageFoundation", StorageFoundationAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_object, prototype_object, interface_object, signature, kAttributeTable);
}
if ((feature_selector.IsAll() && RuntimeEnabledFeatures::SharedStorageAPIEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kSharedStorageAPI)) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"sharedStorage", SharedStorageAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_object, prototype_object, interface_object, signature, kAttributeTable);
}
if ((feature_selector.IsAll() && RuntimeEnabledFeatures::BeforeMatchEventEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kBeforeMatchEvent)) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"onbeforematch", OnbeforematchAttributeGetCallback, OnbeforematchAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_object, prototype_object, interface_object, signature, kAttributeTable);
}
if ((feature_selector.IsAll() && RuntimeEnabledFeatures::TouchEventFeatureDetectionEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kTouchEventFeatureDetection)) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"ontouchcancel", OntouchcancelAttributeGetCallback, OntouchcancelAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ontouchend", OntouchendAttributeGetCallback, OntouchendAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ontouchmove", OntouchmoveAttributeGetCallback, OntouchmoveAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"ontouchstart", OntouchstartAttributeGetCallback, OntouchstartAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_object, prototype_object, interface_object, signature, kAttributeTable);
}



if (is_in_secure_context && feature_selector.IsAll()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"AbsoluteOrientationSensor", AbsoluteOrientationSensorExposedConstructCallback}, 
{"Accelerometer", AccelerometerExposedConstructCallback}, 
{"AudioWorklet", AudioWorkletExposedConstructCallback}, 
{"Cache", CacheExposedConstructCallback}, 
{"CacheStorage", CacheStorageExposedConstructCallback}, 
{"Clipboard", ClipboardExposedConstructCallback}, 
{"ClipboardItem", ClipboardItemExposedConstructCallback}, 
{"CookieChangeEvent", CookieChangeEventExposedConstructCallback}, 
{"CookieStore", CookieStoreExposedConstructCallback}, 
{"CookieStoreManager", CookieStoreManagerExposedConstructCallback}, 
{"Credential", CredentialExposedConstructCallback}, 
{"CredentialsContainer", CredentialsContainerExposedConstructCallback}, 
{"CryptoKey", CryptoKeyExposedConstructCallback}, 
{"DeviceMotionEvent", DeviceMotionEventExposedConstructCallback}, 
{"DeviceMotionEventAcceleration", DeviceMotionEventAccelerationExposedConstructCallback}, 
{"DeviceMotionEventRotationRate", DeviceMotionEventRotationRateExposedConstructCallback}, 
{"DeviceOrientationEvent", DeviceOrientationEventExposedConstructCallback}, 
{"FederatedCredential", FederatedCredentialExposedConstructCallback}, 
{"GravitySensor", GravitySensorExposedConstructCallback}, 
{"Gyroscope", GyroscopeExposedConstructCallback}, 
{"Keyboard", KeyboardExposedConstructCallback}, 
{"KeyboardLayoutMap", KeyboardLayoutMapExposedConstructCallback}, 
{"LinearAccelerationSensor", LinearAccelerationSensorExposedConstructCallback}, 
{"Lock", LockExposedConstructCallback}, 
{"LockManager", LockManagerExposedConstructCallback}, 
{"MIDIAccess", MIDIAccessExposedConstructCallback}, 
{"MIDIConnectionEvent", MIDIConnectionEventExposedConstructCallback}, 
{"MIDIInput", MIDIInputExposedConstructCallback}, 
{"MIDIInputMap", MIDIInputMapExposedConstructCallback}, 
{"MIDIMessageEvent", MIDIMessageEventExposedConstructCallback}, 
{"MIDIOutput", MIDIOutputExposedConstructCallback}, 
{"MIDIOutputMap", MIDIOutputMapExposedConstructCallback}, 
{"MIDIPort", MIDIPortExposedConstructCallback}, 
{"MediaDeviceInfo", MediaDeviceInfoExposedConstructCallback}, 
{"MediaDevices", MediaDevicesExposedConstructCallback}, 
{"MediaKeyMessageEvent", MediaKeyMessageEventExposedConstructCallback}, 
{"MediaKeySession", MediaKeySessionExposedConstructCallback}, 
{"MediaKeyStatusMap", MediaKeyStatusMapExposedConstructCallback}, 
{"MediaKeySystemAccess", MediaKeySystemAccessExposedConstructCallback}, 
{"MediaKeys", MediaKeysExposedConstructCallback}, 
{"NavigationPreloadManager", NavigationPreloadManagerExposedConstructCallback}, 
{"NavigatorManagedData", NavigatorManagedDataExposedConstructCallback}, 
{"OrientationSensor", OrientationSensorExposedConstructCallback}, 
{"PasswordCredential", PasswordCredentialExposedConstructCallback}, 
{"RTCIceTransport", RTCIceTransportExposedConstructCallback}, 
{"RelativeOrientationSensor", RelativeOrientationSensorExposedConstructCallback}, 
{"Sensor", SensorExposedConstructCallback}, 
{"SensorErrorEvent", SensorErrorEventExposedConstructCallback}, 
{"ServiceWorker", ServiceWorkerExposedConstructCallback}, 
{"ServiceWorkerContainer", ServiceWorkerContainerExposedConstructCallback}, 
{"ServiceWorkerRegistration", ServiceWorkerRegistrationExposedConstructCallback}, 
{"StorageManager", StorageManagerExposedConstructCallback}, 
{"SubtleCrypto", SubtleCryptoExposedConstructCallback}, 
{"WebTransport", WebTransportExposedConstructCallback}, 
{"WebTransportBidirectionalStream", WebTransportBidirectionalStreamExposedConstructCallback}, 
{"WebTransportDatagramDuplexStream", WebTransportDatagramDuplexStreamExposedConstructCallback}, 
{"WebTransportError", WebTransportErrorExposedConstructCallback}, 
{"Worklet", WorkletExposedConstructCallback}, 
{"XRDOMOverlayState", XRDOMOverlayStateExposedConstructCallback}, 
{"XRLayer", XRLayerExposedConstructCallback}, 
{"XRWebGLBinding", XRWebGLBindingExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::SensorExtraClassesEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"AmbientLightSensor", AmbientLightSensorExposedConstructCallback}, 
{"Magnetometer", MagnetometerExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if ((feature_selector.IsAll() && RuntimeEnabledFeatures::WebCodecsEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kWebCodecs)) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"AudioData", AudioDataExposedConstructCallback}, 
{"EncodedAudioChunk", EncodedAudioChunkExposedConstructCallback}, 
{"EncodedVideoChunk", EncodedVideoChunkExposedConstructCallback}, 
{"ImageTrack", ImageTrackExposedConstructCallback}, 
{"ImageTrackList", ImageTrackListExposedConstructCallback}, 
{"VideoColorSpace", VideoColorSpaceExposedConstructCallback}, 
{"VideoFrame", VideoFrameExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && ((feature_selector.IsAll() && RuntimeEnabledFeatures::WebCodecsEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kWebCodecs))) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"AudioDecoder", AudioDecoderExposedConstructCallback}, 
{"AudioEncoder", AudioEncoderExposedConstructCallback}, 
{"ImageDecoder", ImageDecoderExposedConstructCallback}, 
{"VideoDecoder", VideoDecoderExposedConstructCallback}, 
{"VideoEncoder", VideoEncoderExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::WebAuthEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"AuthenticatorAssertionResponse", AuthenticatorAssertionResponseExposedConstructCallback}, 
{"AuthenticatorAttestationResponse", AuthenticatorAttestationResponseExposedConstructCallback}, 
{"AuthenticatorResponse", AuthenticatorResponseExposedConstructCallback}, 
{"PublicKeyCredential", PublicKeyCredentialExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::BarcodeDetectorEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"BarcodeDetector", BarcodeDetectorExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if ((is_in_secure_context || (!RuntimeEnabledFeatures::RestrictBatteryStatusToSecureContextsEnabled())) && feature_selector.IsAll()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"BatteryManager", BatteryManagerExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::WebBluetoothEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"Bluetooth", BluetoothExposedConstructCallback}, 
{"BluetoothCharacteristicProperties", BluetoothCharacteristicPropertiesExposedConstructCallback}, 
{"BluetoothDevice", BluetoothDeviceExposedConstructCallback}, 
{"BluetoothRemoteGATTCharacteristic", BluetoothRemoteGATTCharacteristicExposedConstructCallback}, 
{"BluetoothRemoteGATTDescriptor", BluetoothRemoteGATTDescriptorExposedConstructCallback}, 
{"BluetoothRemoteGATTServer", BluetoothRemoteGATTServerExposedConstructCallback}, 
{"BluetoothRemoteGATTService", BluetoothRemoteGATTServiceExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::WebBluetoothScanningEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"BluetoothAdvertisingEvent", BluetoothAdvertisingEventExposedConstructCallback}, 
{"BluetoothLEScan", BluetoothLEScanExposedConstructCallback}, 
{"BluetoothManufacturerDataMap", BluetoothManufacturerDataMapExposedConstructCallback}, 
{"BluetoothServiceDataMap", BluetoothServiceDataMapExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if ((feature_selector.IsAll() && RuntimeEnabledFeatures::RegionCaptureEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kRegionCapture)) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"BrowserCaptureMediaStreamTrack", BrowserCaptureMediaStreamTrackExposedConstructCallback}, 
{"CropTarget", CropTargetExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::ContactsManagerExtraPropertiesEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"ContactAddress", ContactAddressExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::ContactsManagerEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"ContactsManager", ContactsManagerExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::DevicePostureEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"DevicePosture", DevicePostureExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if ((feature_selector.IsAll() && RuntimeEnabledFeatures::DocumentTransitionEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kDocumentTransition)) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"DocumentTransition", DocumentTransitionExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::EyeDropperAPIEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"EyeDropper", EyeDropperExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::FaceDetectorEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"FaceDetector", FaceDetectorExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if ((feature_selector.IsAll() && RuntimeEnabledFeatures::FencedFramesEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kFencedFrames)) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"Fence", FenceExposedConstructCallback}, 
{"HTMLFencedFrameElement", HTMLFencedFrameElementExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::FileSystemAccessEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"FileSystemDirectoryHandle", FileSystemDirectoryHandleExposedConstructCallback}, 
{"FileSystemFileHandle", FileSystemFileHandleExposedConstructCallback}, 
{"FileSystemHandle", FileSystemHandleExposedConstructCallback}, 
{"FileSystemWritableFileStream", FileSystemWritableFileStreamExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if ((feature_selector.IsAll() && RuntimeEnabledFeatures::ConditionalFocusEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kConditionalFocus)) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"FocusableMediaStreamTrack", FocusableMediaStreamTrackExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::FontAccessEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"FontData", FontDataExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if ((feature_selector.IsAll() && RuntimeEnabledFeatures::TextFragmentIdentifiersEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kTextFragmentIdentifiers)) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"FragmentDirective", FragmentDirectiveExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && ((feature_selector.IsAll() && RuntimeEnabledFeatures::WebGPUEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kWebGPU))) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"GPU", GPUExposedConstructCallback}, 
{"GPUAdapter", GPUAdapterExposedConstructCallback}, 
{"GPUAdapterInfo", GPUAdapterInfoExposedConstructCallback}, 
{"GPUBindGroup", GPUBindGroupExposedConstructCallback}, 
{"GPUBindGroupLayout", GPUBindGroupLayoutExposedConstructCallback}, 
{"GPUBuffer", GPUBufferExposedConstructCallback}, 
{"GPUBufferUsage", GPUBufferUsageExposedConstructCallback}, 
{"GPUCanvasContext", GPUCanvasContextExposedConstructCallback}, 
{"GPUColorWrite", GPUColorWriteExposedConstructCallback}, 
{"GPUCommandBuffer", GPUCommandBufferExposedConstructCallback}, 
{"GPUCommandEncoder", GPUCommandEncoderExposedConstructCallback}, 
{"GPUCompilationInfo", GPUCompilationInfoExposedConstructCallback}, 
{"GPUCompilationMessage", GPUCompilationMessageExposedConstructCallback}, 
{"GPUComputePassEncoder", GPUComputePassEncoderExposedConstructCallback}, 
{"GPUComputePipeline", GPUComputePipelineExposedConstructCallback}, 
{"GPUDevice", GPUDeviceExposedConstructCallback}, 
{"GPUDeviceLostInfo", GPUDeviceLostInfoExposedConstructCallback}, 
{"GPUError", GPUErrorExposedConstructCallback}, 
{"GPUExternalTexture", GPUExternalTextureExposedConstructCallback}, 
{"GPUMapMode", GPUMapModeExposedConstructCallback}, 
{"GPUOutOfMemoryError", GPUOutOfMemoryErrorExposedConstructCallback}, 
{"GPUPipelineLayout", GPUPipelineLayoutExposedConstructCallback}, 
{"GPUQuerySet", GPUQuerySetExposedConstructCallback}, 
{"GPUQueue", GPUQueueExposedConstructCallback}, 
{"GPURenderBundle", GPURenderBundleExposedConstructCallback}, 
{"GPURenderBundleEncoder", GPURenderBundleEncoderExposedConstructCallback}, 
{"GPURenderPassEncoder", GPURenderPassEncoderExposedConstructCallback}, 
{"GPURenderPipeline", GPURenderPipelineExposedConstructCallback}, 
{"GPUSampler", GPUSamplerExposedConstructCallback}, 
{"GPUShaderModule", GPUShaderModuleExposedConstructCallback}, 
{"GPUShaderStage", GPUShaderStageExposedConstructCallback}, 
{"GPUSupportedFeatures", GPUSupportedFeaturesExposedConstructCallback}, 
{"GPUSupportedLimits", GPUSupportedLimitsExposedConstructCallback}, 
{"GPUTexture", GPUTextureExposedConstructCallback}, 
{"GPUTextureUsage", GPUTextureUsageExposedConstructCallback}, 
{"GPUTextureView", GPUTextureViewExposedConstructCallback}, 
{"GPUUncapturedErrorEvent", GPUUncapturedErrorEventExposedConstructCallback}, 
{"GPUValidationError", GPUValidationErrorExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::WebHIDEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"HID", HIDExposedConstructCallback}, 
{"HIDConnectionEvent", HIDConnectionEventExposedConstructCallback}, 
{"HIDDevice", HIDDeviceExposedConstructCallback}, 
{"HIDInputReportEvent", HIDInputReportEventExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if ((feature_selector.IsAll() && RuntimeEnabledFeatures::PortalsEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kPortals)) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"HTMLPortalElement", HTMLPortalElementExposedConstructCallback}, 
{"PortalActivateEvent", PortalActivateEventExposedConstructCallback}, 
{"PortalHost", PortalHostExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::HandwritingRecognitionEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"HandwritingStroke", HandwritingStrokeExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && ((feature_selector.IsAll() && RuntimeEnabledFeatures::FedCmEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kFedCm))) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"IdentityCredential", IdentityCredentialExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::IdleDetectionEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"IdleDetector", IdleDetectorExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if ((feature_selector.IsAll() && RuntimeEnabledFeatures::WebAppLaunchQueueEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kWebAppLaunchQueue)) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"LaunchParams", LaunchParamsExposedConstructCallback}, 
{"LaunchQueue", LaunchQueueExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::MachineLearningCommonEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"MLContext", MLContextExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::PaymentRequestMerchantValidationEventEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"MerchantValidationEvent", MerchantValidationEventExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
const ContextFeatureSettings* context_feature_settings = ContextFeatureSettings::From(execution_context, ContextFeatureSettings::CreationMode::kDontCreateIfNotExists);
if (feature_selector.IsAll() && (RuntimeEnabledFeatures::MojoJSEnabled() || (context_feature_settings && context_feature_settings->isMojoJSEnabled()))) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"Mojo", MojoExposedConstructCallback}, 
{"MojoHandle", MojoHandleExposedConstructCallback}, 
{"MojoWatcher", MojoWatcherExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::WebNFCEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"NDEFMessage", NDEFMessageExposedConstructCallback}, 
{"NDEFReader", NDEFReaderExposedConstructCallback}, 
{"NDEFReadingEvent", NDEFReadingEventExposedConstructCallback}, 
{"NDEFRecord", NDEFRecordExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && ((feature_selector.IsAll() && RuntimeEnabledFeatures::StorageFoundationAPIEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kStorageFoundationAPI))) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"NativeIOFile", NativeIOFileExposedConstructCallback}, 
{"NativeIOFileManager", NativeIOFileManagerExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::WebOTPEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"OTPCredential", OTPCredentialExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::PaymentRequestEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"PaymentAddress", PaymentAddressExposedConstructCallback}, 
{"PaymentRequest", PaymentRequestExposedConstructCallback}, 
{"PaymentResponse", PaymentResponseExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::PaymentMethodChangeEventEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"PaymentMethodChangeEvent", PaymentMethodChangeEventExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if ((feature_selector.IsAll() && RuntimeEnabledFeatures::PendingBeaconAPIEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kPendingBeaconAPI)) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"PendingBeacon", PendingBeaconExposedConstructCallback}, 
{"PendingGetBeacon", PendingGetBeaconExposedConstructCallback}, 
{"PendingPostBeacon", PendingPostBeaconExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::PresentationEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"Presentation", PresentationExposedConstructCallback}, 
{"PresentationAvailability", PresentationAvailabilityExposedConstructCallback}, 
{"PresentationConnection", PresentationConnectionExposedConstructCallback}, 
{"PresentationConnectionAvailableEvent", PresentationConnectionAvailableEventExposedConstructCallback}, 
{"PresentationConnectionCloseEvent", PresentationConnectionCloseEventExposedConstructCallback}, 
{"PresentationConnectionList", PresentationConnectionListExposedConstructCallback}, 
{"PresentationReceiver", PresentationReceiverExposedConstructCallback}, 
{"PresentationRequest", PresentationRequestExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && ((feature_selector.IsAll() && RuntimeEnabledFeatures::ComputePressureEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kComputePressure))) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"PressureObserver", PressureObserverExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::SanitizerAPIv0Enabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"Sanitizer", SanitizerExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::WindowPlacementEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"ScreenDetailed", ScreenDetailedExposedConstructCallback}, 
{"ScreenDetails", ScreenDetailsExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if ((feature_selector.IsAll() && RuntimeEnabledFeatures::SharedStorageAPIEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kSharedStorageAPI)) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"SharedStorage", SharedStorageExposedConstructCallback}, 
{"SharedStorageWorklet", SharedStorageWorkletExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::StorageBucketsEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"StorageBucket", StorageBucketExposedConstructCallback}, 
{"StorageBucketManager", StorageBucketManagerExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::DesktopPWAsSubAppsEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"SubApps", SubAppsExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::TextDetectorEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"TextDetector", TextDetectorExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if ((feature_selector.IsAll() && RuntimeEnabledFeatures::NotificationTriggersEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kNotificationTriggers)) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"TimestampTrigger", TimestampTriggerExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::WebUSBEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"USB", USBExposedConstructCallback}, 
{"USBAlternateInterface", USBAlternateInterfaceExposedConstructCallback}, 
{"USBConfiguration", USBConfigurationExposedConstructCallback}, 
{"USBConnectionEvent", USBConnectionEventExposedConstructCallback}, 
{"USBDevice", USBDeviceExposedConstructCallback}, 
{"USBEndpoint", USBEndpointExposedConstructCallback}, 
{"USBInTransferResult", USBInTransferResultExposedConstructCallback}, 
{"USBInterface", USBInterfaceExposedConstructCallback}, 
{"USBIsochronousInTransferPacket", USBIsochronousInTransferPacketExposedConstructCallback}, 
{"USBIsochronousInTransferResult", USBIsochronousInTransferResultExposedConstructCallback}, 
{"USBIsochronousOutTransferPacket", USBIsochronousOutTransferPacketExposedConstructCallback}, 
{"USBIsochronousOutTransferResult", USBIsochronousOutTransferResultExposedConstructCallback}, 
{"USBOutTransferResult", USBOutTransferResultExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::VirtualKeyboardEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"VirtualKeyboard", VirtualKeyboardExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::WakeLockEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"WakeLock", WakeLockExposedConstructCallback}, 
{"WakeLockSentinel", WakeLockSentinelExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::WebXRAnchorsEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"XRAnchor", XRAnchorExposedConstructCallback}, 
{"XRAnchorSet", XRAnchorSetExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::WebXREnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"XRBoundedReferenceSpace", XRBoundedReferenceSpaceExposedConstructCallback}, 
{"XRFrame", XRFrameExposedConstructCallback}, 
{"XRInputSource", XRInputSourceExposedConstructCallback}, 
{"XRInputSourceArray", XRInputSourceArrayExposedConstructCallback}, 
{"XRInputSourceEvent", XRInputSourceEventExposedConstructCallback}, 
{"XRInputSourcesChangeEvent", XRInputSourcesChangeEventExposedConstructCallback}, 
{"XRPose", XRPoseExposedConstructCallback}, 
{"XRReferenceSpace", XRReferenceSpaceExposedConstructCallback}, 
{"XRReferenceSpaceEvent", XRReferenceSpaceEventExposedConstructCallback}, 
{"XRRenderState", XRRenderStateExposedConstructCallback}, 
{"XRRigidTransform", XRRigidTransformExposedConstructCallback}, 
{"XRSession", XRSessionExposedConstructCallback}, 
{"XRSessionEvent", XRSessionEventExposedConstructCallback}, 
{"XRSpace", XRSpaceExposedConstructCallback}, 
{"XRSystem", XRSystemExposedConstructCallback}, 
{"XRView", XRViewExposedConstructCallback}, 
{"XRViewerPose", XRViewerPoseExposedConstructCallback}, 
{"XRViewport", XRViewportExposedConstructCallback}, 
{"XRWebGLLayer", XRWebGLLayerExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && ((feature_selector.IsAll() && RuntimeEnabledFeatures::WebXRDepthEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kWebXRDepth))) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"XRCPUDepthInformation", XRCPUDepthInformationExposedConstructCallback}, 
{"XRDepthInformation", XRDepthInformationExposedConstructCallback}, 
{"XRWebGLDepthInformation", XRWebGLDepthInformationExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::WebXRCameraAccessEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"XRCamera", XRCameraExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::WebXRHandInputEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"XRHand", XRHandExposedConstructCallback}, 
{"XRJointPose", XRJointPoseExposedConstructCallback}, 
{"XRJointSpace", XRJointSpaceExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::WebXRHitTestEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"XRHitTestResult", XRHitTestResultExposedConstructCallback}, 
{"XRHitTestSource", XRHitTestSourceExposedConstructCallback}, 
{"XRRay", XRRayExposedConstructCallback}, 
{"XRTransientInputHitTestResult", XRTransientInputHitTestResultExposedConstructCallback}, 
{"XRTransientInputHitTestSource", XRTransientInputHitTestSourceExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && ((feature_selector.IsAll() && RuntimeEnabledFeatures::WebXRImageTrackingEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kWebXRImageTracking))) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"XRImageTrackingResult", XRImageTrackingResultExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::WebXRLightEstimationEnabled())) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"XRLightEstimate", XRLightEstimateExposedConstructCallback}, 
{"XRLightProbe", XRLightProbeExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (is_in_secure_context && ((feature_selector.IsAll() && RuntimeEnabledFeatures::WebXRPlaneDetectionEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kWebXRPlaneDetection))) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"XRPlane", XRPlaneExposedConstructCallback}, 
{"XRPlaneSet", XRPlaneSetExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}

if (is_in_secure_context && ((feature_selector.IsAll() && RuntimeEnabledFeatures::DigitalGoodsEnabled(execution_context)) || feature_selector.IsAnyOf(OriginTrialFeature::kDigitalGoods))) {
  static const IDLMemberInstaller::OperationConfig kOperationTable[] = {
{"getDigitalGoodsService", GetDigitalGoodsServiceOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallOperations(isolate, world, instance_object, prototype_object, interface_object, signature, kOperationTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::WebAppsLockScreenEnabled())) {
  static const IDLMemberInstaller::OperationConfig kOperationTable[] = {
{"getLockScreenData", GetLockScreenDataOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallOperations(isolate, world, instance_object, prototype_object, interface_object, signature, kOperationTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::WindowPlacementEnabled())) {
  static const IDLMemberInstaller::OperationConfig kOperationTable[] = {
{"getScreenDetails", GetScreenDetailsOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallOperations(isolate, world, instance_object, prototype_object, interface_object, signature, kOperationTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::FontAccessEnabled())) {
  static const IDLMemberInstaller::OperationConfig kOperationTable[] = {
{"queryLocalFonts", QueryLocalFontsOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallOperations(isolate, world, instance_object, prototype_object, interface_object, signature, kOperationTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::DocumentPictureInPictureAPIEnabled())) {
  static const IDLMemberInstaller::OperationConfig kOperationTable[] = {
{"requestPictureInPictureWindow", RequestPictureInPictureWindowOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallOperations(isolate, world, instance_object, prototype_object, interface_object, signature, kOperationTable);
}
if (is_in_secure_context && (feature_selector.IsAll() && RuntimeEnabledFeatures::FileSystemAccessEnabled())) {
  static const IDLMemberInstaller::OperationConfig kOperationTable[] = {
{"showDirectoryPicker", ShowDirectoryPickerOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"showOpenFilePicker", ShowOpenFilePickerOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"showSaveFilePicker", ShowSaveFilePickerOperationCallback, 0, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallOperations(isolate, world, instance_object, prototype_object, interface_object, signature, kOperationTable);
}


}

namespace bindings {

namespace v8_context_snapshot {

base::span<const intptr_t> GetRefTableOfV8Window() {
  static const intptr_t kReferenceTable[] = {
reinterpret_cast<intptr_t>(V8Window::GetWrapperTypeInfo()),
reinterpret_cast<intptr_t>(WindowAttributeGetCallback),
reinterpret_cast<intptr_t>(SelfAttributeGetCallback),
reinterpret_cast<intptr_t>(SelfAttributeSetCallback),
reinterpret_cast<intptr_t>(DocumentAttributeGetCallback),
reinterpret_cast<intptr_t>(NameAttributeGetCallback),
reinterpret_cast<intptr_t>(NameAttributeSetCallback),
reinterpret_cast<intptr_t>(LocationAttributeGetCallback),
reinterpret_cast<intptr_t>(LocationAttributeSetCallback),
reinterpret_cast<intptr_t>(CustomElementsAttributeGetCallback),
reinterpret_cast<intptr_t>(HistoryAttributeGetCallback),
reinterpret_cast<intptr_t>(LocationbarAttributeGetCallback),
reinterpret_cast<intptr_t>(LocationbarAttributeSetCallback),
reinterpret_cast<intptr_t>(MenubarAttributeGetCallback),
reinterpret_cast<intptr_t>(MenubarAttributeSetCallback),
reinterpret_cast<intptr_t>(PersonalbarAttributeGetCallback),
reinterpret_cast<intptr_t>(PersonalbarAttributeSetCallback),
reinterpret_cast<intptr_t>(ScrollbarsAttributeGetCallback),
reinterpret_cast<intptr_t>(ScrollbarsAttributeSetCallback),
reinterpret_cast<intptr_t>(StatusbarAttributeGetCallback),
reinterpret_cast<intptr_t>(StatusbarAttributeSetCallback),
reinterpret_cast<intptr_t>(ToolbarAttributeGetCallback),
reinterpret_cast<intptr_t>(ToolbarAttributeSetCallback),
reinterpret_cast<intptr_t>(StatusAttributeGetCallback),
reinterpret_cast<intptr_t>(StatusAttributeSetCallback),
reinterpret_cast<intptr_t>(ClosedAttributeGetCallback),
reinterpret_cast<intptr_t>(FramesAttributeGetCallback),
reinterpret_cast<intptr_t>(FramesAttributeSetCallback),
reinterpret_cast<intptr_t>(LengthAttributeGetCallback),
reinterpret_cast<intptr_t>(LengthAttributeSetCallback),
reinterpret_cast<intptr_t>(TopAttributeGetCallback),
reinterpret_cast<intptr_t>(OpenerAttributeGetCallback),
reinterpret_cast<intptr_t>(OpenerAttributeSetCallback),
reinterpret_cast<intptr_t>(ParentAttributeGetCallback),
reinterpret_cast<intptr_t>(ParentAttributeSetCallback),
reinterpret_cast<intptr_t>(FrameElementAttributeGetCallback),
reinterpret_cast<intptr_t>(NavigatorAttributeGetCallback),
reinterpret_cast<intptr_t>(OriginAttributeGetCallback),
reinterpret_cast<intptr_t>(OriginAttributeSetCallback),
reinterpret_cast<intptr_t>(ExternalAttributeGetCallback),
reinterpret_cast<intptr_t>(ExternalAttributeSetCallback),
reinterpret_cast<intptr_t>(ScreenAttributeGetCallback),
reinterpret_cast<intptr_t>(ScreenAttributeSetCallback),
reinterpret_cast<intptr_t>(InnerWidthAttributeGetCallback),
reinterpret_cast<intptr_t>(InnerWidthAttributeSetCallback),
reinterpret_cast<intptr_t>(InnerHeightAttributeGetCallback),
reinterpret_cast<intptr_t>(InnerHeightAttributeSetCallback),
reinterpret_cast<intptr_t>(ScrollXAttributeGetCallback),
reinterpret_cast<intptr_t>(ScrollXAttributeSetCallback),
reinterpret_cast<intptr_t>(PageXOffsetAttributeGetCallback),
reinterpret_cast<intptr_t>(PageXOffsetAttributeSetCallback),
reinterpret_cast<intptr_t>(ScrollYAttributeGetCallback),
reinterpret_cast<intptr_t>(ScrollYAttributeSetCallback),
reinterpret_cast<intptr_t>(PageYOffsetAttributeGetCallback),
reinterpret_cast<intptr_t>(PageYOffsetAttributeSetCallback),
reinterpret_cast<intptr_t>(VisualViewportAttributeGetCallback),
reinterpret_cast<intptr_t>(VisualViewportAttributeSetCallback),
reinterpret_cast<intptr_t>(ScreenXAttributeGetCallback),
reinterpret_cast<intptr_t>(ScreenXAttributeSetCallback),
reinterpret_cast<intptr_t>(ScreenYAttributeGetCallback),
reinterpret_cast<intptr_t>(ScreenYAttributeSetCallback),
reinterpret_cast<intptr_t>(OuterWidthAttributeGetCallback),
reinterpret_cast<intptr_t>(OuterWidthAttributeSetCallback),
reinterpret_cast<intptr_t>(OuterHeightAttributeGetCallback),
reinterpret_cast<intptr_t>(OuterHeightAttributeSetCallback),
reinterpret_cast<intptr_t>(DevicePixelRatioAttributeGetCallback),
reinterpret_cast<intptr_t>(DevicePixelRatioAttributeSetCallback),
reinterpret_cast<intptr_t>(EventAttributeGetCallback),
reinterpret_cast<intptr_t>(EventAttributeSetCallback),
reinterpret_cast<intptr_t>(ClientInformationAttributeGetCallback),
reinterpret_cast<intptr_t>(ClientInformationAttributeSetCallback),
reinterpret_cast<intptr_t>(OffscreenBufferingAttributeGetCallback),
reinterpret_cast<intptr_t>(OffscreenBufferingAttributeSetCallback),
reinterpret_cast<intptr_t>(ScreenLeftAttributeGetCallback),
reinterpret_cast<intptr_t>(ScreenLeftAttributeSetCallback),
reinterpret_cast<intptr_t>(ScreenTopAttributeGetCallback),
reinterpret_cast<intptr_t>(ScreenTopAttributeSetCallback),
reinterpret_cast<intptr_t>(DefaultStatusAttributeGetCallback),
reinterpret_cast<intptr_t>(DefaultStatusAttributeSetCallback),
reinterpret_cast<intptr_t>(DefaultstatusAttributeGetCallback),
reinterpret_cast<intptr_t>(DefaultstatusAttributeSetCallback),
reinterpret_cast<intptr_t>(StyleMediaAttributeGetCallback),
reinterpret_cast<intptr_t>(OnsearchAttributeGetCallback),
reinterpret_cast<intptr_t>(OnsearchAttributeSetCallback),
reinterpret_cast<intptr_t>(IsSecureContextAttributeGetCallback),
reinterpret_cast<intptr_t>(TrustedTypesAttributeGetCallback),
reinterpret_cast<intptr_t>(PerformanceAttributeGetCallback),
reinterpret_cast<intptr_t>(PerformanceAttributeSetCallback),
reinterpret_cast<intptr_t>(OnappinstalledAttributeGetCallback),
reinterpret_cast<intptr_t>(OnappinstalledAttributeSetCallback),
reinterpret_cast<intptr_t>(OnbeforeinstallpromptAttributeGetCallback),
reinterpret_cast<intptr_t>(OnbeforeinstallpromptAttributeSetCallback),
reinterpret_cast<intptr_t>(CryptoAttributeGetCallback),
reinterpret_cast<intptr_t>(IndexedDBAttributeGetCallback),
reinterpret_cast<intptr_t>(SessionStorageAttributeGetCallback),
reinterpret_cast<intptr_t>(LocalStorageAttributeGetCallback),
reinterpret_cast<intptr_t>(OnbeforexrselectAttributeGetCallback),
reinterpret_cast<intptr_t>(OnbeforexrselectAttributeSetCallback),
reinterpret_cast<intptr_t>(OnabortAttributeGetCallback),
reinterpret_cast<intptr_t>(OnabortAttributeSetCallback),
reinterpret_cast<intptr_t>(OnbeforeinputAttributeGetCallback),
reinterpret_cast<intptr_t>(OnbeforeinputAttributeSetCallback),
reinterpret_cast<intptr_t>(OnblurAttributeGetCallback),
reinterpret_cast<intptr_t>(OnblurAttributeSetCallback),
reinterpret_cast<intptr_t>(OncancelAttributeGetCallback),
reinterpret_cast<intptr_t>(OncancelAttributeSetCallback),
reinterpret_cast<intptr_t>(OncanplayAttributeGetCallback),
reinterpret_cast<intptr_t>(OncanplayAttributeSetCallback),
reinterpret_cast<intptr_t>(OncanplaythroughAttributeGetCallback),
reinterpret_cast<intptr_t>(OncanplaythroughAttributeSetCallback),
reinterpret_cast<intptr_t>(OnchangeAttributeGetCallback),
reinterpret_cast<intptr_t>(OnchangeAttributeSetCallback),
reinterpret_cast<intptr_t>(OnclickAttributeGetCallback),
reinterpret_cast<intptr_t>(OnclickAttributeSetCallback),
reinterpret_cast<intptr_t>(OncloseAttributeGetCallback),
reinterpret_cast<intptr_t>(OncloseAttributeSetCallback),
reinterpret_cast<intptr_t>(OncontextlostAttributeGetCallback),
reinterpret_cast<intptr_t>(OncontextlostAttributeSetCallback),
reinterpret_cast<intptr_t>(OncontextmenuAttributeGetCallback),
reinterpret_cast<intptr_t>(OncontextmenuAttributeSetCallback),
reinterpret_cast<intptr_t>(OncontextrestoredAttributeGetCallback),
reinterpret_cast<intptr_t>(OncontextrestoredAttributeSetCallback),
reinterpret_cast<intptr_t>(OncuechangeAttributeGetCallback),
reinterpret_cast<intptr_t>(OncuechangeAttributeSetCallback),
reinterpret_cast<intptr_t>(OndblclickAttributeGetCallback),
reinterpret_cast<intptr_t>(OndblclickAttributeSetCallback),
reinterpret_cast<intptr_t>(OndragAttributeGetCallback),
reinterpret_cast<intptr_t>(OndragAttributeSetCallback),
reinterpret_cast<intptr_t>(OndragendAttributeGetCallback),
reinterpret_cast<intptr_t>(OndragendAttributeSetCallback),
reinterpret_cast<intptr_t>(OndragenterAttributeGetCallback),
reinterpret_cast<intptr_t>(OndragenterAttributeSetCallback),
reinterpret_cast<intptr_t>(OndragleaveAttributeGetCallback),
reinterpret_cast<intptr_t>(OndragleaveAttributeSetCallback),
reinterpret_cast<intptr_t>(OndragoverAttributeGetCallback),
reinterpret_cast<intptr_t>(OndragoverAttributeSetCallback),
reinterpret_cast<intptr_t>(OndragstartAttributeGetCallback),
reinterpret_cast<intptr_t>(OndragstartAttributeSetCallback),
reinterpret_cast<intptr_t>(OndropAttributeGetCallback),
reinterpret_cast<intptr_t>(OndropAttributeSetCallback),
reinterpret_cast<intptr_t>(OndurationchangeAttributeGetCallback),
reinterpret_cast<intptr_t>(OndurationchangeAttributeSetCallback),
reinterpret_cast<intptr_t>(OnemptiedAttributeGetCallback),
reinterpret_cast<intptr_t>(OnemptiedAttributeSetCallback),
reinterpret_cast<intptr_t>(OnendedAttributeGetCallback),
reinterpret_cast<intptr_t>(OnendedAttributeSetCallback),
reinterpret_cast<intptr_t>(OnerrorAttributeGetCallback),
reinterpret_cast<intptr_t>(OnerrorAttributeSetCallback),
reinterpret_cast<intptr_t>(OnfocusAttributeGetCallback),
reinterpret_cast<intptr_t>(OnfocusAttributeSetCallback),
reinterpret_cast<intptr_t>(OnformdataAttributeGetCallback),
reinterpret_cast<intptr_t>(OnformdataAttributeSetCallback),
reinterpret_cast<intptr_t>(OninputAttributeGetCallback),
reinterpret_cast<intptr_t>(OninputAttributeSetCallback),
reinterpret_cast<intptr_t>(OninvalidAttributeGetCallback),
reinterpret_cast<intptr_t>(OninvalidAttributeSetCallback),
reinterpret_cast<intptr_t>(OnkeydownAttributeGetCallback),
reinterpret_cast<intptr_t>(OnkeydownAttributeSetCallback),
reinterpret_cast<intptr_t>(OnkeypressAttributeGetCallback),
reinterpret_cast<intptr_t>(OnkeypressAttributeSetCallback),
reinterpret_cast<intptr_t>(OnkeyupAttributeGetCallback),
reinterpret_cast<intptr_t>(OnkeyupAttributeSetCallback),
reinterpret_cast<intptr_t>(OnloadAttributeGetCallback),
reinterpret_cast<intptr_t>(OnloadAttributeSetCallback),
reinterpret_cast<intptr_t>(OnloadeddataAttributeGetCallback),
reinterpret_cast<intptr_t>(OnloadeddataAttributeSetCallback),
reinterpret_cast<intptr_t>(OnloadedmetadataAttributeGetCallback),
reinterpret_cast<intptr_t>(OnloadedmetadataAttributeSetCallback),
reinterpret_cast<intptr_t>(OnloadstartAttributeGetCallback),
reinterpret_cast<intptr_t>(OnloadstartAttributeSetCallback),
reinterpret_cast<intptr_t>(OnmousedownAttributeGetCallback),
reinterpret_cast<intptr_t>(OnmousedownAttributeSetCallback),
reinterpret_cast<intptr_t>(OnmouseenterAttributeGetCallback),
reinterpret_cast<intptr_t>(OnmouseenterAttributeSetCallback),
reinterpret_cast<intptr_t>(OnmouseleaveAttributeGetCallback),
reinterpret_cast<intptr_t>(OnmouseleaveAttributeSetCallback),
reinterpret_cast<intptr_t>(OnmousemoveAttributeGetCallback),
reinterpret_cast<intptr_t>(OnmousemoveAttributeSetCallback),
reinterpret_cast<intptr_t>(OnmouseoutAttributeGetCallback),
reinterpret_cast<intptr_t>(OnmouseoutAttributeSetCallback),
reinterpret_cast<intptr_t>(OnmouseoverAttributeGetCallback),
reinterpret_cast<intptr_t>(OnmouseoverAttributeSetCallback),
reinterpret_cast<intptr_t>(OnmouseupAttributeGetCallback),
reinterpret_cast<intptr_t>(OnmouseupAttributeSetCallback),
reinterpret_cast<intptr_t>(OnmousewheelAttributeGetCallback),
reinterpret_cast<intptr_t>(OnmousewheelAttributeSetCallback),
reinterpret_cast<intptr_t>(OnpauseAttributeGetCallback),
reinterpret_cast<intptr_t>(OnpauseAttributeSetCallback),
reinterpret_cast<intptr_t>(OnplayAttributeGetCallback),
reinterpret_cast<intptr_t>(OnplayAttributeSetCallback),
reinterpret_cast<intptr_t>(OnplayingAttributeGetCallback),
reinterpret_cast<intptr_t>(OnplayingAttributeSetCallback),
reinterpret_cast<intptr_t>(OnprogressAttributeGetCallback),
reinterpret_cast<intptr_t>(OnprogressAttributeSetCallback),
reinterpret_cast<intptr_t>(OnratechangeAttributeGetCallback),
reinterpret_cast<intptr_t>(OnratechangeAttributeSetCallback),
reinterpret_cast<intptr_t>(OnresetAttributeGetCallback),
reinterpret_cast<intptr_t>(OnresetAttributeSetCallback),
reinterpret_cast<intptr_t>(OnresizeAttributeGetCallback),
reinterpret_cast<intptr_t>(OnresizeAttributeSetCallback),
reinterpret_cast<intptr_t>(OnscrollAttributeGetCallback),
reinterpret_cast<intptr_t>(OnscrollAttributeSetCallback),
reinterpret_cast<intptr_t>(OnsecuritypolicyviolationAttributeGetCallback),
reinterpret_cast<intptr_t>(OnsecuritypolicyviolationAttributeSetCallback),
reinterpret_cast<intptr_t>(OnseekedAttributeGetCallback),
reinterpret_cast<intptr_t>(OnseekedAttributeSetCallback),
reinterpret_cast<intptr_t>(OnseekingAttributeGetCallback),
reinterpret_cast<intptr_t>(OnseekingAttributeSetCallback),
reinterpret_cast<intptr_t>(OnselectAttributeGetCallback),
reinterpret_cast<intptr_t>(OnselectAttributeSetCallback),
reinterpret_cast<intptr_t>(OnslotchangeAttributeGetCallback),
reinterpret_cast<intptr_t>(OnslotchangeAttributeSetCallback),
reinterpret_cast<intptr_t>(OnstalledAttributeGetCallback),
reinterpret_cast<intptr_t>(OnstalledAttributeSetCallback),
reinterpret_cast<intptr_t>(OnsubmitAttributeGetCallback),
reinterpret_cast<intptr_t>(OnsubmitAttributeSetCallback),
reinterpret_cast<intptr_t>(OnsuspendAttributeGetCallback),
reinterpret_cast<intptr_t>(OnsuspendAttributeSetCallback),
reinterpret_cast<intptr_t>(OntimeupdateAttributeGetCallback),
reinterpret_cast<intptr_t>(OntimeupdateAttributeSetCallback),
reinterpret_cast<intptr_t>(OntoggleAttributeGetCallback),
reinterpret_cast<intptr_t>(OntoggleAttributeSetCallback),
reinterpret_cast<intptr_t>(OnvolumechangeAttributeGetCallback),
reinterpret_cast<intptr_t>(OnvolumechangeAttributeSetCallback),
reinterpret_cast<intptr_t>(OnwaitingAttributeGetCallback),
reinterpret_cast<intptr_t>(OnwaitingAttributeSetCallback),
reinterpret_cast<intptr_t>(OnwebkitanimationendAttributeGetCallback),
reinterpret_cast<intptr_t>(OnwebkitanimationendAttributeSetCallback),
reinterpret_cast<intptr_t>(OnwebkitanimationiterationAttributeGetCallback),
reinterpret_cast<intptr_t>(OnwebkitanimationiterationAttributeSetCallback),
reinterpret_cast<intptr_t>(OnwebkitanimationstartAttributeGetCallback),
reinterpret_cast<intptr_t>(OnwebkitanimationstartAttributeSetCallback),
reinterpret_cast<intptr_t>(OnwebkittransitionendAttributeGetCallback),
reinterpret_cast<intptr_t>(OnwebkittransitionendAttributeSetCallback),
reinterpret_cast<intptr_t>(OnwheelAttributeGetCallback),
reinterpret_cast<intptr_t>(OnwheelAttributeSetCallback),
reinterpret_cast<intptr_t>(OnauxclickAttributeGetCallback),
reinterpret_cast<intptr_t>(OnauxclickAttributeSetCallback),
reinterpret_cast<intptr_t>(OngotpointercaptureAttributeGetCallback),
reinterpret_cast<intptr_t>(OngotpointercaptureAttributeSetCallback),
reinterpret_cast<intptr_t>(OnlostpointercaptureAttributeGetCallback),
reinterpret_cast<intptr_t>(OnlostpointercaptureAttributeSetCallback),
reinterpret_cast<intptr_t>(OnpointerdownAttributeGetCallback),
reinterpret_cast<intptr_t>(OnpointerdownAttributeSetCallback),
reinterpret_cast<intptr_t>(OnpointermoveAttributeGetCallback),
reinterpret_cast<intptr_t>(OnpointermoveAttributeSetCallback),
reinterpret_cast<intptr_t>(OnpointerrawupdateAttributeGetCallback),
reinterpret_cast<intptr_t>(OnpointerrawupdateAttributeSetCallback),
reinterpret_cast<intptr_t>(OnpointerupAttributeGetCallback),
reinterpret_cast<intptr_t>(OnpointerupAttributeSetCallback),
reinterpret_cast<intptr_t>(OnpointercancelAttributeGetCallback),
reinterpret_cast<intptr_t>(OnpointercancelAttributeSetCallback),
reinterpret_cast<intptr_t>(OnpointeroverAttributeGetCallback),
reinterpret_cast<intptr_t>(OnpointeroverAttributeSetCallback),
reinterpret_cast<intptr_t>(OnpointeroutAttributeGetCallback),
reinterpret_cast<intptr_t>(OnpointeroutAttributeSetCallback),
reinterpret_cast<intptr_t>(OnpointerenterAttributeGetCallback),
reinterpret_cast<intptr_t>(OnpointerenterAttributeSetCallback),
reinterpret_cast<intptr_t>(OnpointerleaveAttributeGetCallback),
reinterpret_cast<intptr_t>(OnpointerleaveAttributeSetCallback),
reinterpret_cast<intptr_t>(OnselectstartAttributeGetCallback),
reinterpret_cast<intptr_t>(OnselectstartAttributeSetCallback),
reinterpret_cast<intptr_t>(OnselectionchangeAttributeGetCallback),
reinterpret_cast<intptr_t>(OnselectionchangeAttributeSetCallback),
reinterpret_cast<intptr_t>(OnanimationendAttributeGetCallback),
reinterpret_cast<intptr_t>(OnanimationendAttributeSetCallback),
reinterpret_cast<intptr_t>(OnanimationiterationAttributeGetCallback),
reinterpret_cast<intptr_t>(OnanimationiterationAttributeSetCallback),
reinterpret_cast<intptr_t>(OnanimationstartAttributeGetCallback),
reinterpret_cast<intptr_t>(OnanimationstartAttributeSetCallback),
reinterpret_cast<intptr_t>(OntransitionrunAttributeGetCallback),
reinterpret_cast<intptr_t>(OntransitionrunAttributeSetCallback),
reinterpret_cast<intptr_t>(OntransitionstartAttributeGetCallback),
reinterpret_cast<intptr_t>(OntransitionstartAttributeSetCallback),
reinterpret_cast<intptr_t>(OntransitionendAttributeGetCallback),
reinterpret_cast<intptr_t>(OntransitionendAttributeSetCallback),
reinterpret_cast<intptr_t>(OntransitioncancelAttributeGetCallback),
reinterpret_cast<intptr_t>(OntransitioncancelAttributeSetCallback),
reinterpret_cast<intptr_t>(OnafterprintAttributeGetCallback),
reinterpret_cast<intptr_t>(OnafterprintAttributeSetCallback),
reinterpret_cast<intptr_t>(OnbeforeprintAttributeGetCallback),
reinterpret_cast<intptr_t>(OnbeforeprintAttributeSetCallback),
reinterpret_cast<intptr_t>(OnbeforeunloadAttributeGetCallback),
reinterpret_cast<intptr_t>(OnbeforeunloadAttributeSetCallback),
reinterpret_cast<intptr_t>(OnhashchangeAttributeGetCallback),
reinterpret_cast<intptr_t>(OnhashchangeAttributeSetCallback),
reinterpret_cast<intptr_t>(OnlanguagechangeAttributeGetCallback),
reinterpret_cast<intptr_t>(OnlanguagechangeAttributeSetCallback),
reinterpret_cast<intptr_t>(OnmessageAttributeGetCallback),
reinterpret_cast<intptr_t>(OnmessageAttributeSetCallback),
reinterpret_cast<intptr_t>(OnmessageerrorAttributeGetCallback),
reinterpret_cast<intptr_t>(OnmessageerrorAttributeSetCallback),
reinterpret_cast<intptr_t>(OnofflineAttributeGetCallback),
reinterpret_cast<intptr_t>(OnofflineAttributeSetCallback),
reinterpret_cast<intptr_t>(OnonlineAttributeGetCallback),
reinterpret_cast<intptr_t>(OnonlineAttributeSetCallback),
reinterpret_cast<intptr_t>(OnpagehideAttributeGetCallback),
reinterpret_cast<intptr_t>(OnpagehideAttributeSetCallback),
reinterpret_cast<intptr_t>(OnpageshowAttributeGetCallback),
reinterpret_cast<intptr_t>(OnpageshowAttributeSetCallback),
reinterpret_cast<intptr_t>(OnpopstateAttributeGetCallback),
reinterpret_cast<intptr_t>(OnpopstateAttributeSetCallback),
reinterpret_cast<intptr_t>(OnrejectionhandledAttributeGetCallback),
reinterpret_cast<intptr_t>(OnrejectionhandledAttributeSetCallback),
reinterpret_cast<intptr_t>(OnstorageAttributeGetCallback),
reinterpret_cast<intptr_t>(OnstorageAttributeSetCallback),
reinterpret_cast<intptr_t>(OnunhandledrejectionAttributeGetCallback),
reinterpret_cast<intptr_t>(OnunhandledrejectionAttributeSetCallback),
reinterpret_cast<intptr_t>(OnunloadAttributeGetCallback),
reinterpret_cast<intptr_t>(OnunloadAttributeSetCallback),
reinterpret_cast<intptr_t>(CrossOriginIsolatedAttributeGetCallback),
reinterpret_cast<intptr_t>(SchedulerAttributeGetCallback),
reinterpret_cast<intptr_t>(SchedulerAttributeSetCallback),
reinterpret_cast<intptr_t>(AbortControllerExposedConstructCallback),
reinterpret_cast<intptr_t>(AbortSignalExposedConstructCallback),
reinterpret_cast<intptr_t>(AbstractRangeExposedConstructCallback),
reinterpret_cast<intptr_t>(AnalyserNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(AnimationExposedConstructCallback),
reinterpret_cast<intptr_t>(AnimationEffectExposedConstructCallback),
reinterpret_cast<intptr_t>(AnimationEventExposedConstructCallback),
reinterpret_cast<intptr_t>(AttrExposedConstructCallback),
reinterpret_cast<intptr_t>(AudioBufferExposedConstructCallback),
reinterpret_cast<intptr_t>(AudioBufferSourceNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(AudioContextExposedConstructCallback),
reinterpret_cast<intptr_t>(AudioDestinationNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(AudioListenerExposedConstructCallback),
reinterpret_cast<intptr_t>(AudioNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(AudioParamExposedConstructCallback),
reinterpret_cast<intptr_t>(AudioParamMapExposedConstructCallback),
reinterpret_cast<intptr_t>(AudioProcessingEventExposedConstructCallback),
reinterpret_cast<intptr_t>(AudioScheduledSourceNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(AudioWorkletNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(BarPropExposedConstructCallback),
reinterpret_cast<intptr_t>(BaseAudioContextExposedConstructCallback),
reinterpret_cast<intptr_t>(BeforeInstallPromptEventExposedConstructCallback),
reinterpret_cast<intptr_t>(BeforeUnloadEventExposedConstructCallback),
reinterpret_cast<intptr_t>(BiquadFilterNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(BlobExposedConstructCallback),
reinterpret_cast<intptr_t>(BlobEventExposedConstructCallback),
reinterpret_cast<intptr_t>(BroadcastChannelExposedConstructCallback),
reinterpret_cast<intptr_t>(ByteLengthQueuingStrategyExposedConstructCallback),
reinterpret_cast<intptr_t>(CDATASectionExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSConditionRuleExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSCounterStyleRuleExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSFontFaceRuleExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSGroupingRuleExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSImageValueExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSImportRuleExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSKeyframeRuleExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSKeyframesRuleExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSKeywordValueExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSLayerBlockRuleExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSLayerStatementRuleExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSMathClampExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSMathInvertExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSMathMaxExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSMathMinExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSMathNegateExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSMathProductExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSMathSumExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSMathValueExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSMatrixComponentExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSMediaRuleExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSNamespaceRuleExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSNumericArrayExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSNumericValueExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSPageRuleExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSPerspectiveExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSPositionValueExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSPropertyRuleExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSRotateExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSRuleExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSRuleListExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSScaleExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSSkewExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSSkewXExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSSkewYExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSStyleDeclarationExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSStyleRuleExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSStyleSheetExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSStyleValueExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSSupportsRuleExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSTransformComponentExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSTransformValueExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSTranslateExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSUnitValueExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSUnparsedValueExposedConstructCallback),
reinterpret_cast<intptr_t>(CSSVariableReferenceValueExposedConstructCallback),
reinterpret_cast<intptr_t>(CanvasCaptureMediaStreamTrackExposedConstructCallback),
reinterpret_cast<intptr_t>(CanvasFilterExposedConstructCallback),
reinterpret_cast<intptr_t>(CanvasGradientExposedConstructCallback),
reinterpret_cast<intptr_t>(CanvasPatternExposedConstructCallback),
reinterpret_cast<intptr_t>(CanvasRenderingContext2DExposedConstructCallback),
reinterpret_cast<intptr_t>(ChannelMergerNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(ChannelSplitterNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(CharacterDataExposedConstructCallback),
reinterpret_cast<intptr_t>(ClipboardEventExposedConstructCallback),
reinterpret_cast<intptr_t>(CloseEventExposedConstructCallback),
reinterpret_cast<intptr_t>(CommentExposedConstructCallback),
reinterpret_cast<intptr_t>(CompositionEventExposedConstructCallback),
reinterpret_cast<intptr_t>(CompressionStreamExposedConstructCallback),
reinterpret_cast<intptr_t>(ConstantSourceNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(ConvolverNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(CountQueuingStrategyExposedConstructCallback),
reinterpret_cast<intptr_t>(CryptoExposedConstructCallback),
reinterpret_cast<intptr_t>(CustomElementRegistryExposedConstructCallback),
reinterpret_cast<intptr_t>(CustomEventExposedConstructCallback),
reinterpret_cast<intptr_t>(CustomStateSetExposedConstructCallback),
reinterpret_cast<intptr_t>(DOMErrorExposedConstructCallback),
reinterpret_cast<intptr_t>(DOMExceptionExposedConstructCallback),
reinterpret_cast<intptr_t>(DOMImplementationExposedConstructCallback),
reinterpret_cast<intptr_t>(DOMMatrixExposedConstructCallback),
reinterpret_cast<intptr_t>(DOMMatrixReadOnlyExposedConstructCallback),
reinterpret_cast<intptr_t>(DOMParserExposedConstructCallback),
reinterpret_cast<intptr_t>(DOMPointExposedConstructCallback),
reinterpret_cast<intptr_t>(DOMPointReadOnlyExposedConstructCallback),
reinterpret_cast<intptr_t>(DOMQuadExposedConstructCallback),
reinterpret_cast<intptr_t>(DOMRectExposedConstructCallback),
reinterpret_cast<intptr_t>(DOMRectListExposedConstructCallback),
reinterpret_cast<intptr_t>(DOMRectReadOnlyExposedConstructCallback),
reinterpret_cast<intptr_t>(DOMStringListExposedConstructCallback),
reinterpret_cast<intptr_t>(DOMStringMapExposedConstructCallback),
reinterpret_cast<intptr_t>(DOMTokenListExposedConstructCallback),
reinterpret_cast<intptr_t>(DataTransferExposedConstructCallback),
reinterpret_cast<intptr_t>(DataTransferItemExposedConstructCallback),
reinterpret_cast<intptr_t>(DataTransferItemListExposedConstructCallback),
reinterpret_cast<intptr_t>(DecompressionStreamExposedConstructCallback),
reinterpret_cast<intptr_t>(DelayNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(DocumentExposedConstructCallback),
reinterpret_cast<intptr_t>(DocumentFragmentExposedConstructCallback),
reinterpret_cast<intptr_t>(DocumentTypeExposedConstructCallback),
reinterpret_cast<intptr_t>(DragEventExposedConstructCallback),
reinterpret_cast<intptr_t>(DynamicsCompressorNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(ElementExposedConstructCallback),
reinterpret_cast<intptr_t>(ElementInternalsExposedConstructCallback),
reinterpret_cast<intptr_t>(ErrorEventExposedConstructCallback),
reinterpret_cast<intptr_t>(EventExposedConstructCallback),
reinterpret_cast<intptr_t>(EventCountsExposedConstructCallback),
reinterpret_cast<intptr_t>(EventSourceExposedConstructCallback),
reinterpret_cast<intptr_t>(EventTargetExposedConstructCallback),
reinterpret_cast<intptr_t>(ExternalExposedConstructCallback),
reinterpret_cast<intptr_t>(FeaturePolicyExposedConstructCallback),
reinterpret_cast<intptr_t>(FileExposedConstructCallback),
reinterpret_cast<intptr_t>(FileListExposedConstructCallback),
reinterpret_cast<intptr_t>(FileReaderExposedConstructCallback),
reinterpret_cast<intptr_t>(FocusEventExposedConstructCallback),
reinterpret_cast<intptr_t>(FontFaceExposedConstructCallback),
reinterpret_cast<intptr_t>(FontFaceSetLoadEventExposedConstructCallback),
reinterpret_cast<intptr_t>(FormDataExposedConstructCallback),
reinterpret_cast<intptr_t>(FormDataEventExposedConstructCallback),
reinterpret_cast<intptr_t>(GainNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(GamepadExposedConstructCallback),
reinterpret_cast<intptr_t>(GamepadButtonExposedConstructCallback),
reinterpret_cast<intptr_t>(GamepadEventExposedConstructCallback),
reinterpret_cast<intptr_t>(GamepadHapticActuatorExposedConstructCallback),
reinterpret_cast<intptr_t>(GeolocationExposedConstructCallback),
reinterpret_cast<intptr_t>(GeolocationCoordinatesExposedConstructCallback),
reinterpret_cast<intptr_t>(GeolocationPositionExposedConstructCallback),
reinterpret_cast<intptr_t>(GeolocationPositionErrorExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLAllCollectionExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLAnchorElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLAreaElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLAudioElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLBRElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLBaseElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLBodyElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLButtonElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLCanvasElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLCollectionExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLDListElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLDataElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLDataListElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLDetailsElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLDialogElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLDirectoryElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLDivElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLDocumentExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLEmbedElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLFieldSetElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLFontElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLFormControlsCollectionExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLFormElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLFrameElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLFrameSetElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLHRElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLHeadElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLHeadingElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLHtmlElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLIFrameElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLImageElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLInputElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLLIElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLLabelElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLLegendElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLLinkElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLMapElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLMarqueeElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLMediaElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLMenuElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLMetaElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLMeterElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLModElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLOListElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLObjectElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLOptGroupElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLOptionElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLOptionsCollectionExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLOutputElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLParagraphElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLParamElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLPictureElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLPreElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLProgressElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLQuoteElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLScriptElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLSelectElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLSlotElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLSourceElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLSpanElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLStyleElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLTableCaptionElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLTableCellElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLTableColElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLTableElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLTableRowElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLTableSectionElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLTemplateElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLTextAreaElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLTimeElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLTitleElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLTrackElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLUListElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLUnknownElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HTMLVideoElementExposedConstructCallback),
reinterpret_cast<intptr_t>(HashChangeEventExposedConstructCallback),
reinterpret_cast<intptr_t>(HeadersExposedConstructCallback),
reinterpret_cast<intptr_t>(HistoryExposedConstructCallback),
reinterpret_cast<intptr_t>(IDBCursorExposedConstructCallback),
reinterpret_cast<intptr_t>(IDBCursorWithValueExposedConstructCallback),
reinterpret_cast<intptr_t>(IDBDatabaseExposedConstructCallback),
reinterpret_cast<intptr_t>(IDBFactoryExposedConstructCallback),
reinterpret_cast<intptr_t>(IDBIndexExposedConstructCallback),
reinterpret_cast<intptr_t>(IDBKeyRangeExposedConstructCallback),
reinterpret_cast<intptr_t>(IDBObjectStoreExposedConstructCallback),
reinterpret_cast<intptr_t>(IDBOpenDBRequestExposedConstructCallback),
reinterpret_cast<intptr_t>(IDBRequestExposedConstructCallback),
reinterpret_cast<intptr_t>(IDBTransactionExposedConstructCallback),
reinterpret_cast<intptr_t>(IDBVersionChangeEventExposedConstructCallback),
reinterpret_cast<intptr_t>(IIRFilterNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(IdleDeadlineExposedConstructCallback),
reinterpret_cast<intptr_t>(ImageBitmapExposedConstructCallback),
reinterpret_cast<intptr_t>(ImageBitmapRenderingContextExposedConstructCallback),
reinterpret_cast<intptr_t>(ImageCaptureExposedConstructCallback),
reinterpret_cast<intptr_t>(ImageDataExposedConstructCallback),
reinterpret_cast<intptr_t>(InputDeviceCapabilitiesExposedConstructCallback),
reinterpret_cast<intptr_t>(InputDeviceInfoExposedConstructCallback),
reinterpret_cast<intptr_t>(InputEventExposedConstructCallback),
reinterpret_cast<intptr_t>(IntersectionObserverExposedConstructCallback),
reinterpret_cast<intptr_t>(IntersectionObserverEntryExposedConstructCallback),
reinterpret_cast<intptr_t>(KeyboardEventExposedConstructCallback),
reinterpret_cast<intptr_t>(KeyframeEffectExposedConstructCallback),
reinterpret_cast<intptr_t>(LargestContentfulPaintExposedConstructCallback),
reinterpret_cast<intptr_t>(LayoutShiftExposedConstructCallback),
reinterpret_cast<intptr_t>(LayoutShiftAttributionExposedConstructCallback),
reinterpret_cast<intptr_t>(LocationExposedConstructCallback),
reinterpret_cast<intptr_t>(MediaCapabilitiesExposedConstructCallback),
reinterpret_cast<intptr_t>(MediaElementAudioSourceNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(MediaEncryptedEventExposedConstructCallback),
reinterpret_cast<intptr_t>(MediaErrorExposedConstructCallback),
reinterpret_cast<intptr_t>(MediaListExposedConstructCallback),
reinterpret_cast<intptr_t>(MediaQueryListExposedConstructCallback),
reinterpret_cast<intptr_t>(MediaQueryListEventExposedConstructCallback),
reinterpret_cast<intptr_t>(MediaRecorderExposedConstructCallback),
reinterpret_cast<intptr_t>(MediaStreamExposedConstructCallback),
reinterpret_cast<intptr_t>(MediaStreamAudioDestinationNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(MediaStreamAudioSourceNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(MediaStreamEventExposedConstructCallback),
reinterpret_cast<intptr_t>(MediaStreamTrackEventExposedConstructCallback),
reinterpret_cast<intptr_t>(MediaStreamTrackProcessorExposedConstructCallback),
reinterpret_cast<intptr_t>(MessageChannelExposedConstructCallback),
reinterpret_cast<intptr_t>(MessageEventExposedConstructCallback),
reinterpret_cast<intptr_t>(MessagePortExposedConstructCallback),
reinterpret_cast<intptr_t>(MimeTypeExposedConstructCallback),
reinterpret_cast<intptr_t>(MimeTypeArrayExposedConstructCallback),
reinterpret_cast<intptr_t>(MouseEventExposedConstructCallback),
reinterpret_cast<intptr_t>(MutationEventExposedConstructCallback),
reinterpret_cast<intptr_t>(MutationObserverExposedConstructCallback),
reinterpret_cast<intptr_t>(MutationRecordExposedConstructCallback),
reinterpret_cast<intptr_t>(NamedNodeMapExposedConstructCallback),
reinterpret_cast<intptr_t>(NavigatorExposedConstructCallback),
reinterpret_cast<intptr_t>(NetworkInformationExposedConstructCallback),
reinterpret_cast<intptr_t>(NodeExposedConstructCallback),
reinterpret_cast<intptr_t>(NodeFilterExposedConstructCallback),
reinterpret_cast<intptr_t>(NodeIteratorExposedConstructCallback),
reinterpret_cast<intptr_t>(NodeListExposedConstructCallback),
reinterpret_cast<intptr_t>(OfflineAudioCompletionEventExposedConstructCallback),
reinterpret_cast<intptr_t>(OfflineAudioContextExposedConstructCallback),
reinterpret_cast<intptr_t>(OffscreenCanvasExposedConstructCallback),
reinterpret_cast<intptr_t>(OffscreenCanvasRenderingContext2DExposedConstructCallback),
reinterpret_cast<intptr_t>(OscillatorNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(OverconstrainedErrorExposedConstructCallback),
reinterpret_cast<intptr_t>(PageTransitionEventExposedConstructCallback),
reinterpret_cast<intptr_t>(PannerNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(Path2DExposedConstructCallback),
reinterpret_cast<intptr_t>(PerformanceExposedConstructCallback),
reinterpret_cast<intptr_t>(PerformanceElementTimingExposedConstructCallback),
reinterpret_cast<intptr_t>(PerformanceEntryExposedConstructCallback),
reinterpret_cast<intptr_t>(PerformanceEventTimingExposedConstructCallback),
reinterpret_cast<intptr_t>(PerformanceLongTaskTimingExposedConstructCallback),
reinterpret_cast<intptr_t>(PerformanceMarkExposedConstructCallback),
reinterpret_cast<intptr_t>(PerformanceMeasureExposedConstructCallback),
reinterpret_cast<intptr_t>(PerformanceNavigationExposedConstructCallback),
reinterpret_cast<intptr_t>(PerformanceNavigationTimingExposedConstructCallback),
reinterpret_cast<intptr_t>(PerformanceObserverExposedConstructCallback),
reinterpret_cast<intptr_t>(PerformanceObserverEntryListExposedConstructCallback),
reinterpret_cast<intptr_t>(PerformancePaintTimingExposedConstructCallback),
reinterpret_cast<intptr_t>(PerformanceResourceTimingExposedConstructCallback),
reinterpret_cast<intptr_t>(PerformanceServerTimingExposedConstructCallback),
reinterpret_cast<intptr_t>(PerformanceTimingExposedConstructCallback),
reinterpret_cast<intptr_t>(PeriodicWaveExposedConstructCallback),
reinterpret_cast<intptr_t>(PluginExposedConstructCallback),
reinterpret_cast<intptr_t>(PluginArrayExposedConstructCallback),
reinterpret_cast<intptr_t>(PointerEventExposedConstructCallback),
reinterpret_cast<intptr_t>(PopStateEventExposedConstructCallback),
reinterpret_cast<intptr_t>(ProcessingInstructionExposedConstructCallback),
reinterpret_cast<intptr_t>(ProfilerExposedConstructCallback),
reinterpret_cast<intptr_t>(ProgressEventExposedConstructCallback),
reinterpret_cast<intptr_t>(PromiseRejectionEventExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCCertificateExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCDTMFSenderExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCDTMFToneChangeEventExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCDataChannelExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCDataChannelEventExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCDtlsTransportExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCEncodedAudioFrameExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCEncodedVideoFrameExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCErrorExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCErrorEventExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCIceCandidateExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCPeerConnectionExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCPeerConnectionIceErrorEventExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCPeerConnectionIceEventExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCRtpReceiverExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCRtpSenderExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCRtpTransceiverExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCSctpTransportExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCSessionDescriptionExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCStatsReportExposedConstructCallback),
reinterpret_cast<intptr_t>(RTCTrackEventExposedConstructCallback),
reinterpret_cast<intptr_t>(RadioNodeListExposedConstructCallback),
reinterpret_cast<intptr_t>(RangeExposedConstructCallback),
reinterpret_cast<intptr_t>(ReadableByteStreamControllerExposedConstructCallback),
reinterpret_cast<intptr_t>(ReadableStreamExposedConstructCallback),
reinterpret_cast<intptr_t>(ReadableStreamBYOBReaderExposedConstructCallback),
reinterpret_cast<intptr_t>(ReadableStreamBYOBRequestExposedConstructCallback),
reinterpret_cast<intptr_t>(ReadableStreamDefaultControllerExposedConstructCallback),
reinterpret_cast<intptr_t>(ReadableStreamDefaultReaderExposedConstructCallback),
reinterpret_cast<intptr_t>(ReportingObserverExposedConstructCallback),
reinterpret_cast<intptr_t>(RequestExposedConstructCallback),
reinterpret_cast<intptr_t>(ResizeObserverExposedConstructCallback),
reinterpret_cast<intptr_t>(ResizeObserverEntryExposedConstructCallback),
reinterpret_cast<intptr_t>(ResizeObserverSizeExposedConstructCallback),
reinterpret_cast<intptr_t>(ResponseExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGAElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGAngleExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGAnimateElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGAnimateMotionElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGAnimateTransformElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGAnimatedAngleExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGAnimatedBooleanExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGAnimatedEnumerationExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGAnimatedIntegerExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGAnimatedLengthExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGAnimatedLengthListExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGAnimatedNumberExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGAnimatedNumberListExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGAnimatedPreserveAspectRatioExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGAnimatedRectExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGAnimatedStringExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGAnimatedTransformListExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGAnimationElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGCircleElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGClipPathElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGComponentTransferFunctionElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGDefsElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGDescElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGEllipseElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFEBlendElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFEColorMatrixElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFEComponentTransferElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFECompositeElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFEConvolveMatrixElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFEDiffuseLightingElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFEDisplacementMapElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFEDistantLightElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFEDropShadowElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFEFloodElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFEFuncAElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFEFuncBElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFEFuncGElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFEFuncRElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFEGaussianBlurElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFEImageElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFEMergeElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFEMergeNodeElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFEMorphologyElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFEOffsetElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFEPointLightElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFESpecularLightingElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFESpotLightElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFETileElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFETurbulenceElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGFilterElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGForeignObjectElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGGElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGGeometryElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGGradientElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGGraphicsElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGImageElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGLengthExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGLengthListExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGLineElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGLinearGradientElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGMPathElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGMarkerElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGMaskElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGMatrixExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGMetadataElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGNumberExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGNumberListExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGPathElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGPatternElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGPointExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGPointListExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGPolygonElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGPolylineElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGPreserveAspectRatioExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGRadialGradientElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGRectExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGRectElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGSVGElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGScriptElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGSetElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGStopElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGStringListExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGStyleElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGSwitchElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGSymbolElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGTSpanElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGTextContentElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGTextElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGTextPathElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGTextPositioningElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGTitleElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGTransformExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGTransformListExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGUnitTypesExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGUseElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SVGViewElementExposedConstructCallback),
reinterpret_cast<intptr_t>(SchedulerExposedConstructCallback),
reinterpret_cast<intptr_t>(SchedulingExposedConstructCallback),
reinterpret_cast<intptr_t>(ScreenExposedConstructCallback),
reinterpret_cast<intptr_t>(ScreenOrientationExposedConstructCallback),
reinterpret_cast<intptr_t>(ScriptProcessorNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(SecurityPolicyViolationEventExposedConstructCallback),
reinterpret_cast<intptr_t>(SelectionExposedConstructCallback),
reinterpret_cast<intptr_t>(ShadowRootExposedConstructCallback),
reinterpret_cast<intptr_t>(StaticRangeExposedConstructCallback),
reinterpret_cast<intptr_t>(StereoPannerNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(StorageExposedConstructCallback),
reinterpret_cast<intptr_t>(StorageEventExposedConstructCallback),
reinterpret_cast<intptr_t>(StylePropertyMapExposedConstructCallback),
reinterpret_cast<intptr_t>(StylePropertyMapReadOnlyExposedConstructCallback),
reinterpret_cast<intptr_t>(StyleSheetExposedConstructCallback),
reinterpret_cast<intptr_t>(StyleSheetListExposedConstructCallback),
reinterpret_cast<intptr_t>(SubmitEventExposedConstructCallback),
reinterpret_cast<intptr_t>(SyncManagerExposedConstructCallback),
reinterpret_cast<intptr_t>(TaskAttributionTimingExposedConstructCallback),
reinterpret_cast<intptr_t>(TaskControllerExposedConstructCallback),
reinterpret_cast<intptr_t>(TaskPriorityChangeEventExposedConstructCallback),
reinterpret_cast<intptr_t>(TaskSignalExposedConstructCallback),
reinterpret_cast<intptr_t>(TextExposedConstructCallback),
reinterpret_cast<intptr_t>(TextDecoderExposedConstructCallback),
reinterpret_cast<intptr_t>(TextDecoderStreamExposedConstructCallback),
reinterpret_cast<intptr_t>(TextEncoderExposedConstructCallback),
reinterpret_cast<intptr_t>(TextEncoderStreamExposedConstructCallback),
reinterpret_cast<intptr_t>(TextEventExposedConstructCallback),
reinterpret_cast<intptr_t>(TextMetricsExposedConstructCallback),
reinterpret_cast<intptr_t>(TextTrackExposedConstructCallback),
reinterpret_cast<intptr_t>(TextTrackCueExposedConstructCallback),
reinterpret_cast<intptr_t>(TextTrackCueListExposedConstructCallback),
reinterpret_cast<intptr_t>(TextTrackListExposedConstructCallback),
reinterpret_cast<intptr_t>(TimeRangesExposedConstructCallback),
reinterpret_cast<intptr_t>(TouchExposedConstructCallback),
reinterpret_cast<intptr_t>(TouchEventExposedConstructCallback),
reinterpret_cast<intptr_t>(TouchListExposedConstructCallback),
reinterpret_cast<intptr_t>(TrackEventExposedConstructCallback),
reinterpret_cast<intptr_t>(TransformStreamExposedConstructCallback),
reinterpret_cast<intptr_t>(TransformStreamDefaultControllerExposedConstructCallback),
reinterpret_cast<intptr_t>(TransitionEventExposedConstructCallback),
reinterpret_cast<intptr_t>(TreeWalkerExposedConstructCallback),
reinterpret_cast<intptr_t>(TrustedHTMLExposedConstructCallback),
reinterpret_cast<intptr_t>(TrustedScriptExposedConstructCallback),
reinterpret_cast<intptr_t>(TrustedScriptURLExposedConstructCallback),
reinterpret_cast<intptr_t>(TrustedTypePolicyExposedConstructCallback),
reinterpret_cast<intptr_t>(TrustedTypePolicyFactoryExposedConstructCallback),
reinterpret_cast<intptr_t>(UIEventExposedConstructCallback),
reinterpret_cast<intptr_t>(URLExposedConstructCallback),
reinterpret_cast<intptr_t>(URLPatternExposedConstructCallback),
reinterpret_cast<intptr_t>(URLSearchParamsExposedConstructCallback),
reinterpret_cast<intptr_t>(UserActivationExposedConstructCallback),
reinterpret_cast<intptr_t>(VTTCueExposedConstructCallback),
reinterpret_cast<intptr_t>(ValidityStateExposedConstructCallback),
reinterpret_cast<intptr_t>(VisualViewportExposedConstructCallback),
reinterpret_cast<intptr_t>(WaveShaperNodeExposedConstructCallback),
reinterpret_cast<intptr_t>(WebGL2RenderingContextExposedConstructCallback),
reinterpret_cast<intptr_t>(WebGLActiveInfoExposedConstructCallback),
reinterpret_cast<intptr_t>(WebGLBufferExposedConstructCallback),
reinterpret_cast<intptr_t>(WebGLContextEventExposedConstructCallback),
reinterpret_cast<intptr_t>(WebGLFramebufferExposedConstructCallback),
reinterpret_cast<intptr_t>(WebGLProgramExposedConstructCallback),
reinterpret_cast<intptr_t>(WebGLQueryExposedConstructCallback),
reinterpret_cast<intptr_t>(WebGLRenderbufferExposedConstructCallback),
reinterpret_cast<intptr_t>(WebGLRenderingContextExposedConstructCallback),
reinterpret_cast<intptr_t>(WebGLSamplerExposedConstructCallback),
reinterpret_cast<intptr_t>(WebGLShaderExposedConstructCallback),
reinterpret_cast<intptr_t>(WebGLShaderPrecisionFormatExposedConstructCallback),
reinterpret_cast<intptr_t>(WebGLSyncExposedConstructCallback),
reinterpret_cast<intptr_t>(WebGLTextureExposedConstructCallback),
reinterpret_cast<intptr_t>(WebGLTransformFeedbackExposedConstructCallback),
reinterpret_cast<intptr_t>(WebGLUniformLocationExposedConstructCallback),
reinterpret_cast<intptr_t>(WebGLVertexArrayObjectExposedConstructCallback),
reinterpret_cast<intptr_t>(WebSocketExposedConstructCallback),
reinterpret_cast<intptr_t>(WheelEventExposedConstructCallback),
reinterpret_cast<intptr_t>(WindowExposedConstructCallback),
reinterpret_cast<intptr_t>(WorkerExposedConstructCallback),
reinterpret_cast<intptr_t>(WritableStreamExposedConstructCallback),
reinterpret_cast<intptr_t>(WritableStreamDefaultControllerExposedConstructCallback),
reinterpret_cast<intptr_t>(WritableStreamDefaultWriterExposedConstructCallback),
reinterpret_cast<intptr_t>(XMLDocumentExposedConstructCallback),
reinterpret_cast<intptr_t>(XMLHttpRequestExposedConstructCallback),
reinterpret_cast<intptr_t>(XMLHttpRequestEventTargetExposedConstructCallback),
reinterpret_cast<intptr_t>(XMLHttpRequestUploadExposedConstructCallback),
reinterpret_cast<intptr_t>(XMLSerializerExposedConstructCallback),
reinterpret_cast<intptr_t>(XPathEvaluatorExposedConstructCallback),
reinterpret_cast<intptr_t>(XPathExpressionExposedConstructCallback),
reinterpret_cast<intptr_t>(XPathResultExposedConstructCallback),
reinterpret_cast<intptr_t>(WebKitCSSMatrixLegacyWindowAliasCallback),
reinterpret_cast<intptr_t>(WebKitMutationObserverLegacyWindowAliasCallback),
reinterpret_cast<intptr_t>(WebkitMediaStreamLegacyWindowAliasCallback),
reinterpret_cast<intptr_t>(WebkitRTCPeerConnectionLegacyWindowAliasCallback),
reinterpret_cast<intptr_t>(WebkitURLLegacyWindowAliasCallback),
reinterpret_cast<intptr_t>(AudioNamedConstructorPropertyCallback),
reinterpret_cast<intptr_t>(ImageNamedConstructorPropertyCallback),
reinterpret_cast<intptr_t>(OptionNamedConstructorPropertyCallback),
reinterpret_cast<intptr_t>(AlertOperationCallback),
reinterpret_cast<intptr_t>(AtobOperationCallback),
reinterpret_cast<intptr_t>(BlurOperationCallback),
reinterpret_cast<intptr_t>(BtoaOperationCallback),
reinterpret_cast<intptr_t>(CancelAnimationFrameOperationCallback),
reinterpret_cast<intptr_t>(CancelIdleCallbackOperationCallback),
reinterpret_cast<intptr_t>(CaptureEventsOperationCallback),
reinterpret_cast<intptr_t>(ClearIntervalOperationCallback),
reinterpret_cast<intptr_t>(ClearTimeoutOperationCallback),
reinterpret_cast<intptr_t>(CloseOperationCallback),
reinterpret_cast<intptr_t>(ConfirmOperationCallback),
reinterpret_cast<intptr_t>(CreateImageBitmapOperationCallback),
reinterpret_cast<intptr_t>(FetchOperationCallback),
reinterpret_cast<intptr_t>(FindOperationCallback),
reinterpret_cast<intptr_t>(FocusOperationCallback),
reinterpret_cast<intptr_t>(GetComputedStyleOperationCallback),
reinterpret_cast<intptr_t>(GetSelectionOperationCallback),
reinterpret_cast<intptr_t>(MatchMediaOperationCallback),
reinterpret_cast<intptr_t>(MoveByOperationCallback),
reinterpret_cast<intptr_t>(MoveToOperationCallback),
reinterpret_cast<intptr_t>(OpenOperationCallback),
reinterpret_cast<intptr_t>(PostMessageOperationCallback),
reinterpret_cast<intptr_t>(PrintOperationCallback),
reinterpret_cast<intptr_t>(PromptOperationCallback),
reinterpret_cast<intptr_t>(QueueMicrotaskOperationCallback),
reinterpret_cast<intptr_t>(ReleaseEventsOperationCallback),
reinterpret_cast<intptr_t>(ReportErrorOperationCallback),
reinterpret_cast<intptr_t>(RequestAnimationFrameOperationCallback),
reinterpret_cast<intptr_t>(RequestIdleCallbackOperationCallback),
reinterpret_cast<intptr_t>(ResizeByOperationCallback),
reinterpret_cast<intptr_t>(ResizeToOperationCallback),
reinterpret_cast<intptr_t>(ScrollOperationCallback),
reinterpret_cast<intptr_t>(ScrollByOperationCallback),
reinterpret_cast<intptr_t>(ScrollToOperationCallback),
reinterpret_cast<intptr_t>(SetIntervalOperationCallback),
reinterpret_cast<intptr_t>(SetTimeoutOperationCallback),
reinterpret_cast<intptr_t>(StopOperationCallback),
reinterpret_cast<intptr_t>(StructuredCloneOperationCallback),
reinterpret_cast<intptr_t>(WebkitCancelAnimationFrameOperationCallback),
reinterpret_cast<intptr_t>(WebkitRequestAnimationFrameOperationCallback),
reinterpret_cast<intptr_t>(NamedPropsObjNamedGetterCallback),
reinterpret_cast<intptr_t>(NamedPropsObjNamedSetterCallback),
reinterpret_cast<intptr_t>(NamedPropsObjNamedDeleterCallback),
reinterpret_cast<intptr_t>(NamedPropsObjNamedDefinerCallback),
reinterpret_cast<intptr_t>(NamedPropsObjNamedDescriptorCallback),
reinterpret_cast<intptr_t>(NamedPropsObjIndexedGetterCallback),
reinterpret_cast<intptr_t>(NamedPropsObjIndexedSetterCallback),
reinterpret_cast<intptr_t>(NamedPropsObjIndexedDeleterCallback),
reinterpret_cast<intptr_t>(NamedPropsObjIndexedDefinerCallback),
reinterpret_cast<intptr_t>(NamedPropsObjIndexedDescriptorCallback),
reinterpret_cast<intptr_t>(WindowAttributeGetCrossOrigin),
reinterpret_cast<intptr_t>(SelfAttributeGetCrossOrigin),
reinterpret_cast<intptr_t>(LocationAttributeGetCrossOrigin),
reinterpret_cast<intptr_t>(LocationAttributeSetCrossOrigin),
reinterpret_cast<intptr_t>(ClosedAttributeGetCrossOrigin),
reinterpret_cast<intptr_t>(FramesAttributeGetCrossOrigin),
reinterpret_cast<intptr_t>(LengthAttributeGetCrossOrigin),
reinterpret_cast<intptr_t>(TopAttributeGetCrossOrigin),
reinterpret_cast<intptr_t>(OpenerAttributeGetCrossOrigin),
reinterpret_cast<intptr_t>(ParentAttributeGetCrossOrigin),
reinterpret_cast<intptr_t>(CrossOriginAccessCheckCallback),
reinterpret_cast<intptr_t>(CrossOriginNamedGetterCallback),
reinterpret_cast<intptr_t>(CrossOriginNamedSetterCallback),
reinterpret_cast<intptr_t>(CrossOriginNamedDeleterCallback),
reinterpret_cast<intptr_t>(CrossOriginNamedDefinerCallback),
reinterpret_cast<intptr_t>(CrossOriginNamedDescriptorCallback),
reinterpret_cast<intptr_t>(CrossOriginNamedQueryCallback),
reinterpret_cast<intptr_t>(CrossOriginNamedEnumeratorCallback),
reinterpret_cast<intptr_t>(CrossOriginIndexedGetterCallback),
reinterpret_cast<intptr_t>(CrossOriginIndexedSetterCallback),
reinterpret_cast<intptr_t>(CrossOriginIndexedDeleterCallback),
reinterpret_cast<intptr_t>(CrossOriginIndexedDefinerCallback),
reinterpret_cast<intptr_t>(CrossOriginIndexedDescriptorCallback),
reinterpret_cast<intptr_t>(CrossOriginIndexedEnumeratorCallback),
reinterpret_cast<intptr_t>(SameOriginIndexedGetterCallback),
reinterpret_cast<intptr_t>(SameOriginIndexedSetterCallback),
reinterpret_cast<intptr_t>(SameOriginIndexedDeleterCallback),
reinterpret_cast<intptr_t>(SameOriginIndexedDefinerCallback),
reinterpret_cast<intptr_t>(SameOriginIndexedDescriptorCallback),
reinterpret_cast<intptr_t>(SameOriginIndexedEnumeratorCallback),
};
return kReferenceTable;
}

void InstallPropsOfV8Window(v8::Local<v8::Context> context, const DOMWrapperWorld& world, v8::Local<v8::Object> instance_object, v8::Local<v8::Object> prototype_object, v8::Local<v8::Object> interface_object, v8::Local<v8::Template> interface_template) {
  using bindings::IDLMemberInstaller;

if (instance_object.IsEmpty()) {
  instance_object = context->Global()->GetPrototype().As<v8::Object>();
}

if (RuntimeEnabledFeatures::OriginIsolationHeaderEnabled()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"originAgentCluster", OriginAgentClusterAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_object, prototype_object, interface_object, signature, kAttributeTable);
}
if (RuntimeEnabledFeatures::OrientationEventEnabled()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"onorientationchange", OnorientationchangeAttributeGetCallback, OnorientationchangeAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
{"orientation", OrientationAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_object, prototype_object, interface_object, signature, kAttributeTable);
}
if (RuntimeEnabledFeatures::NavigationApiEnabled()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"navigation", NavigationAttributeGetCallback, NavigationAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_object, prototype_object, interface_object, signature, kAttributeTable);
}
if (RuntimeEnabledFeatures::PrefixedStorageInfoEnabled()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"webkitStorageInfo", WebkitStorageInfoAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_object, prototype_object, interface_object, signature, kAttributeTable);
}
if (RuntimeEnabledFeatures::ScriptedSpeechSynthesisEnabled()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"speechSynthesis", SpeechSynthesisAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_object, prototype_object, interface_object, signature, kAttributeTable);
}
if (RuntimeEnabledFeatures::ContentVisibilityAutoStateChangedEventEnabled()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"oncontentvisibilityautostatechanged", OncontentvisibilityautostatechangedAttributeGetCallback, OncontentvisibilityautostatechangedAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_object, prototype_object, interface_object, signature, kAttributeTable);
}
if (RuntimeEnabledFeatures::OverscrollCustomizationEnabled()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"onoverscroll", OnoverscrollAttributeGetCallback, OnoverscrollAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_object, prototype_object, interface_object, signature, kAttributeTable);
}
if (RuntimeEnabledFeatures::ScrollEndEventsEnabled()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"onscrollend", OnscrollendAttributeGetCallback, OnscrollendAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_object, prototype_object, interface_object, signature, kAttributeTable);
}
if (RuntimeEnabledFeatures::TimeZoneChangeEventEnabled()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"ontimezonechange", OntimezonechangeAttributeGetCallback, OntimezonechangeAttributeSetCallback, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_object, prototype_object, interface_object, signature, kAttributeTable);
}
if (RuntimeEnabledFeatures::CoepReflectionEnabled()) {
  static const IDLMemberInstaller::AttributeConfig kAttributeTable[] = {
{"crossOriginEmbedderPolicy", CrossOriginEmbedderPolicyAttributeGetCallback, nullptr, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasNoSideEffect), unsigned(V8PrivateProperty::CachedAccessor::kNone)},
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallAttributes(isolate, world, instance_object, prototype_object, interface_object, signature, kAttributeTable);
}



if (RuntimeEnabledFeatures::AccessibilityObjectModelEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"AccessibleNode", AccessibleNodeExposedConstructCallback}, 
{"AccessibleNodeList", AccessibleNodeListExposedConstructCallback}, 
{"ComputedAccessibleNode", ComputedAccessibleNodeExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::WebAnimationsAPIEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"AnimationPlaybackEvent", AnimationPlaybackEventExposedConstructCallback}, 
{"AnimationTimeline", AnimationTimelineExposedConstructCallback}, 
{"CSSAnimation", CSSAnimationExposedConstructCallback}, 
{"CSSTransition", CSSTransitionExposedConstructCallback}, 
{"DocumentTimeline", DocumentTimelineExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::AudioVideoTracksEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"AudioTrack", AudioTrackExposedConstructCallback}, 
{"AudioTrackList", AudioTrackListExposedConstructCallback}, 
{"VideoTrack", VideoTrackExposedConstructCallback}, 
{"VideoTrackList", VideoTrackListExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::NavigationIdEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"BackForwardCacheRestoration", BackForwardCacheRestorationExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::BackgroundFetchEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"BackgroundFetchManager", BackgroundFetchManagerExposedConstructCallback}, 
{"BackgroundFetchRecord", BackgroundFetchRecordExposedConstructCallback}, 
{"BackgroundFetchRegistration", BackgroundFetchRegistrationExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::TrustedTypeBeforePolicyCreationEventEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"BeforeCreatePolicyEvent", BeforeCreatePolicyEventExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::WebBluetoothEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"BluetoothUUID", BluetoothUUIDExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::CSSColorTypedOMEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"CSSColorValue", CSSColorValueExposedConstructCallback}, 
{"CSSHSL", CSSHSLExposedConstructCallback}, 
{"CSSHWB", CSSHWBExposedConstructCallback}, 
{"CSSRGB", CSSRGBExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::CSSContainerQueriesEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"CSSContainerRule", CSSContainerRuleExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::FontPaletteEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"CSSFontPaletteValuesRule", CSSFontPaletteValuesRuleExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::CSSAnchorPositioningEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"CSSPositionFallbackRule", CSSPositionFallbackRuleExposedConstructCallback}, 
{"CSSTryRule", CSSTryRuleExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::CSSScopeEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"CSSScopeRule", CSSScopeRuleExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::CSSScrollTimelineEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"CSSScrollTimelineRule", CSSScrollTimelineRuleExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::CanvasFormattedTextEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"CanvasFormattedText", CanvasFormattedTextExposedConstructCallback}, 
{"CanvasFormattedTextRun", CanvasFormattedTextRunExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::EditContextEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"CharacterBoundsUpdateEvent", CharacterBoundsUpdateEventExposedConstructCallback}, 
{"EditContext", EditContextExposedConstructCallback}, 
{"TextFormat", TextFormatExposedConstructCallback}, 
{"TextFormatUpdateEvent", TextFormatUpdateEventExposedConstructCallback}, 
{"TextUpdateEvent", TextUpdateEventExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::CloseWatcherEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"CloseWatcher", CloseWatcherExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::ContentIndexEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"ContentIndex", ContentIndexExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::ContentVisibilityAutoStateChangedEventEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"ContentVisibilityAutoStateChangedEvent", ContentVisibilityAutoStateChangedEventExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::DelegatedInkTrailsEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"DelegatedInkTrailPresenter", DelegatedInkTrailPresenterExposedConstructCallback}, 
{"Ink", InkExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::TextFragmentAPIEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"Directive", DirectiveExposedConstructCallback}, 
{"SelectorDirective", SelectorDirectiveExposedConstructCallback}, 
{"TextDirective", TextDirectiveExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::GamepadButtonAxisEventsEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"GamepadAxisEvent", GamepadAxisEventExposedConstructCallback}, 
{"GamepadButtonEvent", GamepadButtonEventExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::HTMLSelectMenuElementEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"HTMLSelectMenuElement", HTMLSelectMenuElementExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::HighlightAPIEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"Highlight", HighlightExposedConstructCallback}, 
{"HighlightRegistry", HighlightRegistryExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::HighlightPointerEventsEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"HighlightPointerEvent", HighlightPointerEventExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::MachineLearningCommonEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"ML", MLExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::MachineLearningNeuralNetworkEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"MLGraphBuilder", MLGraphBuilderExposedConstructCallback}, 
{"MLOperand", MLOperandExposedConstructCallback}, 
{"MLOperator", MLOperatorExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::MachineLearningModelLoaderEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"MLModelLoader", MLModelLoaderExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::MathMLCoreEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"MathMLElement", MathMLElementExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::MediaSessionEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"MediaMetadata", MediaMetadataExposedConstructCallback}, 
{"MediaSession", MediaSessionExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::MediaSourceStableEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"MediaSource", MediaSourceExposedConstructCallback}, 
{"SourceBuffer", SourceBufferExposedConstructCallback}, 
{"SourceBufferList", SourceBufferListExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::MediaSourceInWorkersUsingHandleEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"MediaSourceHandle", MediaSourceHandleExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::MediaStreamTrackInWindowEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"MediaStreamTrack", MediaStreamTrackExposedConstructCallback}, 
{"MediaStreamTrackGenerator", MediaStreamTrackGeneratorExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::MojoJSTestEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"MojoInterfaceInterceptor", MojoInterfaceInterceptorExposedConstructCallback}, 
{"MojoInterfaceRequestEvent", MojoInterfaceRequestEventExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::NavigationApiEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"NavigateEvent", NavigateEventExposedConstructCallback}, 
{"Navigation", NavigationExposedConstructCallback}, 
{"NavigationCurrentEntryChangeEvent", NavigationCurrentEntryChangeEventExposedConstructCallback}, 
{"NavigationDestination", NavigationDestinationExposedConstructCallback}, 
{"NavigationHistoryEntry", NavigationHistoryEntryExposedConstructCallback}, 
{"NavigationTransition", NavigationTransitionExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::UserAgentClientHintEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"NavigatorUAData", NavigatorUADataExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::NotificationsEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"Notification", NotificationExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::OverscrollCustomizationEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"OverscrollEvent", OverscrollEventExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::PaymentAppEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"PaymentInstruments", PaymentInstrumentsExposedConstructCallback}, 
{"PaymentManager", PaymentManagerExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::PaymentRequestEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"PaymentRequestUpdateEvent", PaymentRequestUpdateEventExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::PeriodicBackgroundSyncEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"PeriodicSyncManager", PeriodicSyncManagerExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::PermissionsEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"PermissionStatus", PermissionStatusExposedConstructCallback}, 
{"Permissions", PermissionsExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::PictureInPictureAPIEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"PictureInPictureEvent", PictureInPictureEventExposedConstructCallback}, 
{"PictureInPictureWindow", PictureInPictureWindowExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::PushMessagingEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"PushManager", PushManagerExposedConstructCallback}, 
{"PushSubscription", PushSubscriptionExposedConstructCallback}, 
{"PushSubscriptionOptions", PushSubscriptionOptionsExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::RemotePlaybackEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"RemotePlayback", RemotePlaybackExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::ScrollCustomizationEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"ScrollState", ScrollStateExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::ScrollTimelineEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"ScrollTimeline", ScrollTimelineExposedConstructCallback}, 
{"ViewTimeline", ViewTimelineExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::SharedWorkerEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"SharedWorker", SharedWorkerExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::ScriptedSpeechSynthesisEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"SpeechSynthesisErrorEvent", SpeechSynthesisErrorEventExposedConstructCallback}, 
{"SpeechSynthesisEvent", SpeechSynthesisEventExposedConstructCallback}, 
{"SpeechSynthesisUtterance", SpeechSynthesisUtteranceExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::MediaSourceExperimentalEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"TrackDefault", TrackDefaultExposedConstructCallback}, 
{"TrackDefaultList", TrackDefaultListExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::WebVTTRegionsEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"VTTRegion", VTTRegionExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::VideoPlaybackQualityEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"VideoPlaybackQuality", VideoPlaybackQualityExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::VideoTrackGeneratorInWindowEnabled() && RuntimeEnabledFeatures::VideoTrackGeneratorEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"VideoTrackGenerator", VideoTrackGeneratorExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::VirtualKeyboardEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"VirtualKeyboardGeometryChangeEvent", VirtualKeyboardGeometryChangeEventExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::VisibilityStateEntryEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"VisibilityStateEntry", VisibilityStateEntryExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::WebSocketStreamEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"WebSocketStream", WebSocketStreamExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::AnimationWorkletEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"WorkletAnimation", WorkletAnimationExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::XSLTEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"XSLTProcessor", XSLTProcessorExposedConstructCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}
if (RuntimeEnabledFeatures::ScriptedSpeechRecognitionEnabled()) {
  static const IDLMemberInstaller::ExposedConstructConfig kExposedConstructTable[] = {
{"webkitSpeechGrammar", WebkitSpeechGrammarLegacyWindowAliasCallback}, 
{"webkitSpeechGrammarList", WebkitSpeechGrammarListLegacyWindowAliasCallback}, 
{"webkitSpeechRecognition", WebkitSpeechRecognitionLegacyWindowAliasCallback}, 
{"webkitSpeechRecognitionError", WebkitSpeechRecognitionErrorLegacyWindowAliasCallback}, 
{"webkitSpeechRecognitionEvent", WebkitSpeechRecognitionEventLegacyWindowAliasCallback}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallExposedConstructs(isolate, world, instance_object, prototype_object, interface_object, signature, kExposedConstructTable);
}

if (RuntimeEnabledFeatures::AccessibilityObjectModelEnabled()) {
  static const IDLMemberInstaller::OperationConfig kOperationTable[] = {
{"getComputedAccessibleNode", GetComputedAccessibleNodeOperationCallback, 1, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kDoNotCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallOperations(isolate, world, instance_object, prototype_object, interface_object, signature, kOperationTable);
}
if (RuntimeEnabledFeatures::DatabaseEnabled()) {
  static const IDLMemberInstaller::OperationConfig kOperationTable[] = {
{"openDatabase", OpenDatabaseOperationCallback, 4, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallOperations(isolate, world, instance_object, prototype_object, interface_object, signature, kOperationTable);
}
if (RuntimeEnabledFeatures::FileSystemEnabled()) {
  static const IDLMemberInstaller::OperationConfig kOperationTable[] = {
{"webkitRequestFileSystem", WebkitRequestFileSystemOperationCallback, 3, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"webkitResolveLocalFileSystemURL", WebkitResolveLocalFileSystemURLOperationCallback, 2, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kInstance), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
};
v8::Isolate* isolate = context->GetIsolate();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallOperations(isolate, world, instance_object, prototype_object, interface_object, signature, kOperationTable);
}


}

void InstallPropsOfV8Window(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Template> instance_template, v8::Local<v8::Template> prototype_template, v8::Local<v8::Template> interface_template) {
  return V8Window::InstallContextIndependentProperties(
    isolate, world,
    instance_template,
    prototype_template,
    interface_template);
}


}  // namespace v8_context_snapshot

}  // namespace bindings


}  // namespace blink
