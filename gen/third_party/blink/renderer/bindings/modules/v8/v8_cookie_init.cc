// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_cookie_init.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/core/execution_context/execution_context.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



CookieInit* CookieInit::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  CookieInit* dictionary = MakeGarbageCollected<CookieInit>(isolate);
if (!v8_value->IsObject()) {
  const char* const class_like_name = "CookieInit";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 CookieInit::CookieInit() {
  
}

 CookieInit::CookieInit(v8::Isolate* isolate) {
  
}



void CookieInit::setDomain(const String& value) {
  member_domain_ = value;
}

void CookieInit::setDomain(String&& value) {
  member_domain_ = std::move(value);
}









void CookieInit::setName(const String& value) {
  member_name_ = value;
}

void CookieInit::setName(String&& value) {
  member_name_ = std::move(value);
}









void CookieInit::setPath(const String& value) {
  member_path_ = value;
}

void CookieInit::setPath(String&& value) {
  member_path_ = std::move(value);
}














void CookieInit::setValue(const String& value) {
  member_value_ = value;
}

void CookieInit::setValue(String&& value) {
  member_value_ = std::move(value);
}




void CookieInit::Trace(Visitor* visitor) const {
  TraceIfNeeded<String>::Trace(visitor, member_domain_);
TraceIfNeeded<absl::optional<uint64_t>>::Trace(visitor, member_expires_);
TraceIfNeeded<String>::Trace(visitor, member_name_);
TraceIfNeeded<bool>::Trace(visitor, member_partitioned_);
TraceIfNeeded<String>::Trace(visitor, member_path_);
TraceIfNeeded<bool>::Trace(visitor, member_same_party_);
TraceIfNeeded<V8CookieSameSite>::Trace(visitor, member_same_site_);
TraceIfNeeded<String>::Trace(visitor, member_value_);
bindings::DictionaryBase::Trace(visitor);
}

bool CookieInit::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasDomain()) {
  if (!ToV8Traits<IDLNullable<IDLUSVString>>::ToV8(script_state, member_domain_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasExpires()) {
  if (!ToV8Traits<IDLNullable<IDLUnsignedLongLong>>::ToV8(script_state, member_expires_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasName()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_name_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
ExecutionContext* execution_context = ExecutionContext::From(current_context);
if (RuntimeEnabledFeatures::PartitionedCookiesEnabled(execution_context)) {
  if (hasPartitioned()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_partitioned_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
if (hasPath()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_path_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (RuntimeEnabledFeatures::FirstPartySetsEnabled()) {
  if (hasSameParty()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_same_party_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
if (hasSameSite()) {
  if (!ToV8Traits<V8CookieSameSite>::ToV8(script_state, member_same_site_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasValue()) {
  if (!ToV8Traits<IDLUSVString>::ToV8(script_state, member_value_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void CookieInit::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "CookieInit";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("domain");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool fallback_presence_var;
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLNullable<IDLUSVString>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), fallback_presence_var, member_domain_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("expires");
if (!bindings::GetDictionaryMemberFromV8Object<IDLNullable<IDLUnsignedLongLong>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), fallback_presence_var, member_expires_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("name");
constexpr bool is_required = true;
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), fallback_presence_var, member_name_, try_block, exception_state)) {
  return;
}
ExecutionContext* execution_context = ExecutionContext::From(current_context);
if (RuntimeEnabledFeatures::PartitionedCookiesEnabled(execution_context)) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("partitioned");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), fallback_presence_var, member_partitioned_, try_block, exception_state)) {
  return;
}
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("path");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), fallback_presence_var, member_path_, try_block, exception_state)) {
  return;
}
if (RuntimeEnabledFeatures::FirstPartySetsEnabled()) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("sameParty");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), fallback_presence_var, member_same_party_, try_block, exception_state)) {
  return;
}
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("sameSite");
if (!bindings::GetDictionaryMemberFromV8Object<V8CookieSameSite, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), fallback_presence_var, member_same_site_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("value");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUSVString, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), fallback_presence_var, member_value_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> CookieInit::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"domain",
"expires",
"name",
"partitioned",
"path",
"sameParty",
"sameSite",
"value",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
