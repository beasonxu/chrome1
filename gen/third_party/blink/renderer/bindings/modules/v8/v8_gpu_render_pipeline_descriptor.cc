// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_render_pipeline_descriptor.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_depth_stencil_state.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_fragment_state.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_multisample_state.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_primitive_state.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_vertex_state.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



GPURenderPipelineDescriptor* GPURenderPipelineDescriptor::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  GPURenderPipelineDescriptor* dictionary = MakeGarbageCollected<GPURenderPipelineDescriptor>(isolate);
if (!v8_value->IsObject()) {
  const char* const class_like_name = "GPURenderPipelineDescriptor";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 GPURenderPipelineDescriptor::GPURenderPipelineDescriptor() : member_multisample_(GPUMultisampleState::Create()), member_primitive_(GPUPrimitiveState::Create()) {
  
}

 GPURenderPipelineDescriptor::GPURenderPipelineDescriptor(v8::Isolate* isolate) : GPUPipelineDescriptorBase(isolate), member_multisample_(GPUMultisampleState::Create()), member_primitive_(GPUPrimitiveState::Create()) {
  
}
































void GPURenderPipelineDescriptor::Trace(Visitor* visitor) const {
  TraceIfNeeded<Member<GPUDepthStencilState>>::Trace(visitor, member_depth_stencil_);
TraceIfNeeded<Member<GPUFragmentState>>::Trace(visitor, member_fragment_);
TraceIfNeeded<Member<GPUMultisampleState>>::Trace(visitor, member_multisample_);
TraceIfNeeded<Member<GPUPrimitiveState>>::Trace(visitor, member_primitive_);
TraceIfNeeded<Member<GPUVertexState>>::Trace(visitor, member_vertex_);
GPUPipelineDescriptorBase::Trace(visitor);
}

bool GPURenderPipelineDescriptor::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  if (!GPUPipelineDescriptorBase::FillV8ObjectWithMembers(script_state, v8_dictionary)) {
  return false;
}

v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasDepthStencil()) {
  if (!ToV8Traits<GPUDepthStencilState>::ToV8(script_state, member_depth_stencil_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasFragment()) {
  if (!ToV8Traits<GPUFragmentState>::ToV8(script_state, member_fragment_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasMultisample()) {
  if (!ToV8Traits<GPUMultisampleState>::ToV8(script_state, member_multisample_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPrimitive()) {
  if (!ToV8Traits<GPUPrimitiveState>::ToV8(script_state, member_primitive_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasVertex()) {
  if (!ToV8Traits<GPUVertexState>::ToV8(script_state, member_vertex_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void GPURenderPipelineDescriptor::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  GPUPipelineDescriptorBase::FillMembersFromV8Object(isolate, v8_dictionary, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

const char* const class_like_name = "GPURenderPipelineDescriptor";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("depthStencil");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<GPUDepthStencilState, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_depth_stencil_, member_depth_stencil_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("fragment");
if (!bindings::GetDictionaryMemberFromV8Object<GPUFragmentState, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_fragment_, member_fragment_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("multisample");
bool fallback_presence_var;
if (!bindings::GetDictionaryMemberFromV8Object<GPUMultisampleState, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), fallback_presence_var, member_multisample_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("primitive");
if (!bindings::GetDictionaryMemberFromV8Object<GPUPrimitiveState, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), fallback_presence_var, member_primitive_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("vertex");
constexpr bool is_required = true;
if (!bindings::GetDictionaryMemberFromV8Object<GPUVertexState, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), fallback_presence_var, member_vertex_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> GPURenderPipelineDescriptor::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"depthStencil",
"fragment",
"multisample",
"primitive",
"vertex",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
