// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_AUDIO_DECODER_SUPPORT_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_AUDIO_DECODER_SUPPORT_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/member.h"

namespace blink {

class AudioDecoderConfig;
class ExceptionState;

class MODULES_EXPORT AudioDecoderSupport : public bindings::DictionaryBase {
  
  public:
static AudioDecoderSupport* Create() {
  return MakeGarbageCollected<AudioDecoderSupport>();
}
static AudioDecoderSupport* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<AudioDecoderSupport>(isolate);
}
static AudioDecoderSupport* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  AudioDecoderSupport();
explicit  AudioDecoderSupport(v8::Isolate* isolate);

bool hasConfig() const {
  return true;
}
AudioDecoderConfig* config() const {
  return member_config_;
}
void setConfig(AudioDecoderConfig* value) {
  member_config_ = value;
DCHECK(member_config_);
}

bool hasSupported() const {
  return true;
}
bool supported() const {
  return member_supported_;
}
void setSupported(bool value) {
  member_supported_ = value;
}




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);



Member<AudioDecoderConfig> member_config_;
bool member_supported_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_AUDIO_DECODER_SUPPORT_H_
