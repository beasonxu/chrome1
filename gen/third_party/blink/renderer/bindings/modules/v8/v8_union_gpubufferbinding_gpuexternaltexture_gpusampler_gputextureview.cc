// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_union_gpubufferbinding_gpuexternaltexture_gpusampler_gputextureview.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_buffer_binding.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_external_texture.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_sampler.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_texture_view.h"
#include "third_party/blink/renderer/modules/webgpu/gpu_external_texture.h"
#include "third_party/blink/renderer/modules/webgpu/gpu_sampler.h"
#include "third_party/blink/renderer/modules/webgpu/gpu_texture_view.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"

namespace blink {



V8UnionGPUBufferBindingOrGPUExternalTextureOrGPUSamplerOrGPUTextureView* V8UnionGPUBufferBindingOrGPUExternalTextureOrGPUSamplerOrGPUTextureView::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  if (v8_value->IsNullOrUndefined()) {
  auto&& blink_value = NativeValueTraits<GPUBufferBinding>::NativeValue(isolate, v8_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionGPUBufferBindingOrGPUExternalTextureOrGPUSamplerOrGPUTextureView>(blink_value);
}
if (V8GPUTextureView::HasInstance(isolate, v8_value)) {
  auto&& blink_value = V8GPUTextureView::ToWrappableUnsafe(v8_value.As<v8::Object>());
return MakeGarbageCollected<V8UnionGPUBufferBindingOrGPUExternalTextureOrGPUSamplerOrGPUTextureView>(blink_value);
}
if (V8GPUSampler::HasInstance(isolate, v8_value)) {
  auto&& blink_value = V8GPUSampler::ToWrappableUnsafe(v8_value.As<v8::Object>());
return MakeGarbageCollected<V8UnionGPUBufferBindingOrGPUExternalTextureOrGPUSamplerOrGPUTextureView>(blink_value);
}
if (V8GPUExternalTexture::HasInstance(isolate, v8_value)) {
  auto&& blink_value = V8GPUExternalTexture::ToWrappableUnsafe(v8_value.As<v8::Object>());
return MakeGarbageCollected<V8UnionGPUBufferBindingOrGPUExternalTextureOrGPUSamplerOrGPUTextureView>(blink_value);
}
if (v8_value->IsObject()) {
  auto&& blink_value = NativeValueTraits<GPUBufferBinding>::NativeValue(isolate, v8_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionGPUBufferBindingOrGPUExternalTextureOrGPUSamplerOrGPUTextureView>(blink_value);
}
ThrowTypeErrorNotOfType(exception_state, UnionNameInIDL());
return nullptr;
}
















v8::MaybeLocal<v8::Value> V8UnionGPUBufferBindingOrGPUExternalTextureOrGPUSamplerOrGPUTextureView::ToV8Value(ScriptState* script_state) const {
  switch (content_type_) {
  case ContentType::kGPUBufferBinding: {
    return ToV8Traits<GPUBufferBinding>::ToV8(script_state, member_gpu_buffer_binding_);
  }
  case ContentType::kGPUExternalTexture: {
    return ToV8Traits<GPUExternalTexture>::ToV8(script_state, member_gpu_external_texture_);
  }
  case ContentType::kGPUSampler: {
    return ToV8Traits<GPUSampler>::ToV8(script_state, member_gpu_sampler_);
  }
  case ContentType::kGPUTextureView: {
    return ToV8Traits<GPUTextureView>::ToV8(script_state, member_gpu_texture_view_);
  }
}

NOTREACHED();
return v8::MaybeLocal<v8::Value>();
}

void V8UnionGPUBufferBindingOrGPUExternalTextureOrGPUSamplerOrGPUTextureView::Trace(Visitor* visitor) const {
  TraceIfNeeded<Member<GPUBufferBinding>>::Trace(visitor, member_gpu_buffer_binding_);
TraceIfNeeded<Member<GPUExternalTexture>>::Trace(visitor, member_gpu_external_texture_);
TraceIfNeeded<Member<GPUSampler>>::Trace(visitor, member_gpu_sampler_);
TraceIfNeeded<Member<GPUTextureView>>::Trace(visitor, member_gpu_texture_view_);
bindings::UnionBase::Trace(visitor);
}

void V8UnionGPUBufferBindingOrGPUExternalTextureOrGPUSamplerOrGPUTextureView::Clear() {
  member_gpu_buffer_binding_.Clear();
member_gpu_external_texture_.Clear();
member_gpu_sampler_.Clear();
member_gpu_texture_view_.Clear();
}



}  // namespace blink
