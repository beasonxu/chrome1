// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_PAYMENT_DETAILS_MODIFIER_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_PAYMENT_DETAILS_MODIFIER_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/core/v8/script_value.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/collection_support/heap_vector.h"
#include "third_party/blink/renderer/platform/heap/member.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

namespace blink {

class ExceptionState;
class PaymentItem;

class MODULES_EXPORT PaymentDetailsModifier : public bindings::DictionaryBase {
  
  public:
static PaymentDetailsModifier* Create() {
  return MakeGarbageCollected<PaymentDetailsModifier>();
}
static PaymentDetailsModifier* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<PaymentDetailsModifier>(isolate);
}
static PaymentDetailsModifier* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  PaymentDetailsModifier();
explicit  PaymentDetailsModifier(v8::Isolate* isolate);

bool hasAdditionalDisplayItems() const {
  return has_additional_display_items_;
}
const HeapVector<Member<PaymentItem>>& additionalDisplayItems() const {
  DCHECK(hasAdditionalDisplayItems());
return member_additional_display_items_;
}
HeapVector<Member<PaymentItem>> getAdditionalDisplayItemsOr(const HeapVector<Member<PaymentItem>>& fallback_value) const;
HeapVector<Member<PaymentItem>> getAdditionalDisplayItemsOr(HeapVector<Member<PaymentItem>>&& fallback_value) const;
void setAdditionalDisplayItems(const HeapVector<Member<PaymentItem>>& value);
void setAdditionalDisplayItems(HeapVector<Member<PaymentItem>>&& value);

bool hasData() const {
  return !member_data_.IsEmpty();
}
const ScriptValue& data() const {
  DCHECK(hasData());
return member_data_;
}
ScriptValue getDataOr(const ScriptValue& fallback_value) const {
  if (!hasData()) {
  return fallback_value;
}
return member_data_;
}
void setData(const ScriptValue& value) {
  member_data_ = value;
DCHECK(member_data_.IsObject());
}

bool hasSupportedMethod() const {
  return true;
}
const String& supportedMethod() const {
  return member_supported_method_;
}
void setSupportedMethod(const String& value);
void setSupportedMethod(String&& value);

bool hasTotal() const {
  return has_total_;
}
PaymentItem* total() const {
  DCHECK(hasTotal());
return member_total_;
}
PaymentItem* getTotalOr(PaymentItem* fallback_value) const {
  if (!hasTotal()) {
  return fallback_value;
}
return member_total_;
}
void setTotal(PaymentItem* value) {
  member_total_ = value;
has_total_ = true;
DCHECK(member_total_);
}




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_additional_display_items_ = false;
bool has_total_ = false;

HeapVector<Member<PaymentItem>> member_additional_display_items_;
ScriptValue member_data_;
String member_supported_method_;
Member<PaymentItem> member_total_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_PAYMENT_DETAILS_MODIFIER_H_
