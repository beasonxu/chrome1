// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_CANVAS_FILTER_DICTIONARY_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_CANVAS_FILTER_DICTIONARY_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/core/v8/script_value.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT CanvasFilterDictionary : public bindings::DictionaryBase {
  
  public:
static CanvasFilterDictionary* Create() {
  return MakeGarbageCollected<CanvasFilterDictionary>();
}
static CanvasFilterDictionary* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<CanvasFilterDictionary>(isolate);
}
static CanvasFilterDictionary* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  CanvasFilterDictionary();
explicit  CanvasFilterDictionary(v8::Isolate* isolate);

bool hasBlur() const {
  return !member_blur_.IsEmpty();
}
const ScriptValue& blur() const {
  DCHECK(hasBlur());
return member_blur_;
}
ScriptValue getBlurOr(const ScriptValue& fallback_value) const {
  if (!hasBlur()) {
  return fallback_value;
}
return member_blur_;
}
void setBlur(const ScriptValue& value) {
  member_blur_ = value;
DCHECK(member_blur_.IsObject());
}

bool hasColorMatrix() const {
  return !member_color_matrix_.IsEmpty();
}
const ScriptValue& colorMatrix() const {
  DCHECK(hasColorMatrix());
return member_color_matrix_;
}
ScriptValue getColorMatrixOr(const ScriptValue& fallback_value) const {
  if (!hasColorMatrix()) {
  return fallback_value;
}
return member_color_matrix_;
}
void setColorMatrix(const ScriptValue& value) {
  member_color_matrix_ = value;
DCHECK(member_color_matrix_.IsObject());
}

bool hasComponentTransfer() const {
  return !member_component_transfer_.IsEmpty();
}
const ScriptValue& componentTransfer() const {
  DCHECK(hasComponentTransfer());
return member_component_transfer_;
}
ScriptValue getComponentTransferOr(const ScriptValue& fallback_value) const {
  if (!hasComponentTransfer()) {
  return fallback_value;
}
return member_component_transfer_;
}
void setComponentTransfer(const ScriptValue& value) {
  member_component_transfer_ = value;
DCHECK(member_component_transfer_.IsObject());
}

bool hasConvolveMatrix() const {
  return !member_convolve_matrix_.IsEmpty();
}
const ScriptValue& convolveMatrix() const {
  DCHECK(hasConvolveMatrix());
return member_convolve_matrix_;
}
ScriptValue getConvolveMatrixOr(const ScriptValue& fallback_value) const {
  if (!hasConvolveMatrix()) {
  return fallback_value;
}
return member_convolve_matrix_;
}
void setConvolveMatrix(const ScriptValue& value) {
  member_convolve_matrix_ = value;
DCHECK(member_convolve_matrix_.IsObject());
}




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);



ScriptValue member_blur_;
ScriptValue member_color_matrix_;
ScriptValue member_component_transfer_;
ScriptValue member_convolve_matrix_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_CANVAS_FILTER_DICTIONARY_H_
