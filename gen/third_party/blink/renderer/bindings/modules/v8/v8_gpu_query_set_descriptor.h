// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GPU_QUERY_SET_DESCRIPTOR_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GPU_QUERY_SET_DESCRIPTOR_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_object_descriptor_base.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_pipeline_statistic_name.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_query_type.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/heap/collection_support/heap_vector.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT GPUQuerySetDescriptor : public GPUObjectDescriptorBase {
  
  public:
static GPUQuerySetDescriptor* Create() {
  return MakeGarbageCollected<GPUQuerySetDescriptor>();
}
static GPUQuerySetDescriptor* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<GPUQuerySetDescriptor>(isolate);
}
static GPUQuerySetDescriptor* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  GPUQuerySetDescriptor();
explicit  GPUQuerySetDescriptor(v8::Isolate* isolate);

bool hasCount() const {
  return true;
}
uint32_t count() const {
  return member_count_;
}
void setCount(uint32_t value) {
  member_count_ = value;
}

bool hasPipelineStatistics() const {
  return true;
}
const Vector<V8GPUPipelineStatisticName>& pipelineStatistics() const {
  return member_pipeline_statistics_;
}
void setPipelineStatistics(const Vector<V8GPUPipelineStatisticName>& value);
void setPipelineStatistics(Vector<V8GPUPipelineStatisticName>&& value);

bool hasType() const {
  return true;
}
V8GPUQueryType type() const {
  return member_type_;
}
void setType(V8GPUQueryType value) {
  member_type_ = value;
}
void setType(V8GPUQueryType::Enum value) {
  member_type_ = V8GPUQueryType(value);
}


// Obsolete accessor functions
void setType(const String& value) {
  member_type_ = V8GPUQueryType::Create(value).value();
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);



uint32_t member_count_;
Vector<V8GPUPipelineStatisticName> member_pipeline_statistics_;
V8GPUQueryType member_type_{static_cast<V8GPUQueryType::Enum>(0)};


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GPU_QUERY_SET_DESCRIPTOR_H_
