// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_VIDEO_COLOR_SPACE_INIT_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_VIDEO_COLOR_SPACE_INIT_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_video_color_primaries.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_video_matrix_coefficients.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_video_transfer_characteristics.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT VideoColorSpaceInit : public bindings::DictionaryBase {
  
  public:
static VideoColorSpaceInit* Create() {
  return MakeGarbageCollected<VideoColorSpaceInit>();
}
static VideoColorSpaceInit* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<VideoColorSpaceInit>(isolate);
}
static VideoColorSpaceInit* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  VideoColorSpaceInit();
explicit  VideoColorSpaceInit(v8::Isolate* isolate);

bool hasFullRange() const {
  return has_full_range_;
}
bool fullRange() const {
  DCHECK(hasFullRange());
return member_full_range_;
}
bool getFullRangeOr(bool fallback_value) const {
  if (!hasFullRange()) {
  return fallback_value;
}
return member_full_range_;
}
void setFullRange(bool value) {
  member_full_range_ = value;
has_full_range_ = true;
}

bool hasMatrix() const {
  return has_matrix_;
}
V8VideoMatrixCoefficients matrix() const {
  DCHECK(hasMatrix());
return member_matrix_;
}
V8VideoMatrixCoefficients getMatrixOr(V8VideoMatrixCoefficients fallback_value) const {
  if (!hasMatrix()) {
  return fallback_value;
}
return member_matrix_;
}
void setMatrix(V8VideoMatrixCoefficients value) {
  member_matrix_ = value;
has_matrix_ = true;
}
void setMatrix(V8VideoMatrixCoefficients::Enum value) {
  member_matrix_ = V8VideoMatrixCoefficients(value);
has_matrix_ = true;
}

bool hasPrimaries() const {
  return has_primaries_;
}
V8VideoColorPrimaries primaries() const {
  DCHECK(hasPrimaries());
return member_primaries_;
}
V8VideoColorPrimaries getPrimariesOr(V8VideoColorPrimaries fallback_value) const {
  if (!hasPrimaries()) {
  return fallback_value;
}
return member_primaries_;
}
void setPrimaries(V8VideoColorPrimaries value) {
  member_primaries_ = value;
has_primaries_ = true;
}
void setPrimaries(V8VideoColorPrimaries::Enum value) {
  member_primaries_ = V8VideoColorPrimaries(value);
has_primaries_ = true;
}

bool hasTransfer() const {
  return has_transfer_;
}
V8VideoTransferCharacteristics transfer() const {
  DCHECK(hasTransfer());
return member_transfer_;
}
V8VideoTransferCharacteristics getTransferOr(V8VideoTransferCharacteristics fallback_value) const {
  if (!hasTransfer()) {
  return fallback_value;
}
return member_transfer_;
}
void setTransfer(V8VideoTransferCharacteristics value) {
  member_transfer_ = value;
has_transfer_ = true;
}
void setTransfer(V8VideoTransferCharacteristics::Enum value) {
  member_transfer_ = V8VideoTransferCharacteristics(value);
has_transfer_ = true;
}


// Obsolete accessor functions
void setMatrix(const String& value) {
  member_matrix_ = V8VideoMatrixCoefficients::Create(value).value();
has_matrix_ = true;
}
void setPrimaries(const String& value) {
  member_primaries_ = V8VideoColorPrimaries::Create(value).value();
has_primaries_ = true;
}
void setTransfer(const String& value) {
  member_transfer_ = V8VideoTransferCharacteristics::Create(value).value();
has_transfer_ = true;
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_full_range_ = false;
bool has_matrix_ = false;
bool has_primaries_ = false;
bool has_transfer_ = false;

bool member_full_range_;
V8VideoMatrixCoefficients member_matrix_{static_cast<V8VideoMatrixCoefficients::Enum>(0)};
V8VideoColorPrimaries member_primaries_{static_cast<V8VideoColorPrimaries::Enum>(0)};
V8VideoTransferCharacteristics member_transfer_{static_cast<V8VideoTransferCharacteristics::Enum>(0)};


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_VIDEO_COLOR_SPACE_INIT_H_
