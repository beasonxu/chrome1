// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_RTC_RTP_CODEC_PARAMETERS_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_RTC_RTP_CODEC_PARAMETERS_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT RTCRtpCodecParameters : public bindings::DictionaryBase {
  
  public:
static RTCRtpCodecParameters* Create() {
  return MakeGarbageCollected<RTCRtpCodecParameters>();
}
static RTCRtpCodecParameters* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<RTCRtpCodecParameters>(isolate);
}
static RTCRtpCodecParameters* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  RTCRtpCodecParameters();
explicit  RTCRtpCodecParameters(v8::Isolate* isolate);

bool hasChannels() const {
  return has_channels_;
}
uint16_t channels() const {
  DCHECK(hasChannels());
return member_channels_;
}
uint16_t getChannelsOr(uint16_t fallback_value) const {
  if (!hasChannels()) {
  return fallback_value;
}
return member_channels_;
}
void setChannels(uint16_t value) {
  member_channels_ = value;
has_channels_ = true;
}

bool hasClockRate() const {
  return true;
}
uint32_t clockRate() const {
  return member_clock_rate_;
}
void setClockRate(uint32_t value) {
  member_clock_rate_ = value;
}

bool hasMimeType() const {
  return true;
}
const String& mimeType() const {
  return member_mime_type_;
}
void setMimeType(const String& value);
void setMimeType(String&& value);

bool hasPayloadType() const {
  return true;
}
uint8_t payloadType() const {
  return member_payload_type_;
}
void setPayloadType(uint8_t value) {
  member_payload_type_ = value;
}

bool hasSdpFmtpLine() const {
  return has_sdp_fmtp_line_;
}
const String& sdpFmtpLine() const {
  DCHECK(hasSdpFmtpLine());
return member_sdp_fmtp_line_;
}
String getSdpFmtpLineOr(const String& fallback_value) const;
String getSdpFmtpLineOr(String&& fallback_value) const;
void setSdpFmtpLine(const String& value);
void setSdpFmtpLine(String&& value);




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_channels_ = false;
bool has_sdp_fmtp_line_ = false;

uint16_t member_channels_;
uint32_t member_clock_rate_;
String member_mime_type_;
uint8_t member_payload_type_;
String member_sdp_fmtp_line_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_RTC_RTP_CODEC_PARAMETERS_H_
