// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_SPATIAL_SENSOR_OPTIONS_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_SPATIAL_SENSOR_OPTIONS_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_local_coordinate_system.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_sensor_options.h"
#include "third_party/blink/renderer/modules/modules_export.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT SpatialSensorOptions : public SensorOptions {
  
  public:
static SpatialSensorOptions* Create() {
  return MakeGarbageCollected<SpatialSensorOptions>();
}
static SpatialSensorOptions* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<SpatialSensorOptions>(isolate);
}
static SpatialSensorOptions* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  SpatialSensorOptions();
explicit  SpatialSensorOptions(v8::Isolate* isolate);

bool hasReferenceFrame() const {
  return true;
}
V8LocalCoordinateSystem referenceFrame() const {
  return member_reference_frame_;
}
void setReferenceFrame(V8LocalCoordinateSystem value) {
  member_reference_frame_ = value;
}
void setReferenceFrame(V8LocalCoordinateSystem::Enum value) {
  member_reference_frame_ = V8LocalCoordinateSystem(value);
}


// Obsolete accessor functions
void setReferenceFrame(const String& value) {
  member_reference_frame_ = V8LocalCoordinateSystem::Create(value).value();
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);



V8LocalCoordinateSystem member_reference_frame_{V8LocalCoordinateSystem::Enum::kDevice};


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_SPATIAL_SENSOR_OPTIONS_H_
