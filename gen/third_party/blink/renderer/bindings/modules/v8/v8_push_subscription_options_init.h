// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_PUSH_SUBSCRIPTION_OPTIONS_INIT_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_PUSH_SUBSCRIPTION_OPTIONS_INIT_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/core/typed_arrays/array_buffer_view_helpers.h"
#include "third_party/blink/renderer/core/typed_arrays/dom_typed_array.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/member.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

namespace blink {

class ExceptionState;
class V8UnionArrayBufferOrArrayBufferView;
class V8UnionArrayBufferOrArrayBufferViewOrString;

class MODULES_EXPORT PushSubscriptionOptionsInit : public bindings::DictionaryBase {
  
  public:
static PushSubscriptionOptionsInit* Create() {
  return MakeGarbageCollected<PushSubscriptionOptionsInit>();
}
static PushSubscriptionOptionsInit* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<PushSubscriptionOptionsInit>(isolate);
}
static PushSubscriptionOptionsInit* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  PushSubscriptionOptionsInit();
explicit  PushSubscriptionOptionsInit(v8::Isolate* isolate);

bool hasApplicationServerKey() const {
  return true;
}
V8UnionArrayBufferOrArrayBufferViewOrString* applicationServerKey() const {
  return member_application_server_key_;
}
void setApplicationServerKey(V8UnionArrayBufferOrArrayBufferViewOrString* value) {
  member_application_server_key_ = value;
}

bool hasUserVisibleOnly() const {
  return true;
}
bool userVisibleOnly() const {
  return member_user_visible_only_;
}
void setUserVisibleOnly(bool value) {
  member_user_visible_only_ = value;
}




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);



Member<V8UnionArrayBufferOrArrayBufferViewOrString> member_application_server_key_;
bool member_user_visible_only_{false};


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_PUSH_SUBSCRIPTION_OPTIONS_INIT_H_
