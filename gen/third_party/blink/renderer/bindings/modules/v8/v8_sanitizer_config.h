// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_SANITIZER_CONFIG_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_SANITIZER_CONFIG_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/collection_support/heap_vector.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT SanitizerConfig : public bindings::DictionaryBase {
  
  public:
static SanitizerConfig* Create() {
  return MakeGarbageCollected<SanitizerConfig>();
}
static SanitizerConfig* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<SanitizerConfig>(isolate);
}
static SanitizerConfig* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  SanitizerConfig();
explicit  SanitizerConfig(v8::Isolate* isolate);

bool hasAllowAttributes() const {
  return has_allow_attributes_;
}
const Vector<std::pair<String, Vector<String>>>& allowAttributes() const {
  DCHECK(hasAllowAttributes());
return member_allow_attributes_;
}
Vector<std::pair<String, Vector<String>>> getAllowAttributesOr(const Vector<std::pair<String, Vector<String>>>& fallback_value) const;
Vector<std::pair<String, Vector<String>>> getAllowAttributesOr(Vector<std::pair<String, Vector<String>>>&& fallback_value) const;
void setAllowAttributes(const Vector<std::pair<String, Vector<String>>>& value);
void setAllowAttributes(Vector<std::pair<String, Vector<String>>>&& value);

bool hasAllowComments() const {
  return has_allow_comments_;
}
bool allowComments() const {
  DCHECK(hasAllowComments());
return member_allow_comments_;
}
bool getAllowCommentsOr(bool fallback_value) const {
  if (!hasAllowComments()) {
  return fallback_value;
}
return member_allow_comments_;
}
void setAllowComments(bool value) {
  member_allow_comments_ = value;
has_allow_comments_ = true;
}

bool hasAllowCustomElements() const {
  return has_allow_custom_elements_;
}
bool allowCustomElements() const {
  DCHECK(hasAllowCustomElements());
return member_allow_custom_elements_;
}
bool getAllowCustomElementsOr(bool fallback_value) const {
  if (!hasAllowCustomElements()) {
  return fallback_value;
}
return member_allow_custom_elements_;
}
void setAllowCustomElements(bool value) {
  member_allow_custom_elements_ = value;
has_allow_custom_elements_ = true;
}

bool hasAllowElements() const {
  return has_allow_elements_;
}
const Vector<String>& allowElements() const {
  DCHECK(hasAllowElements());
return member_allow_elements_;
}
Vector<String> getAllowElementsOr(const Vector<String>& fallback_value) const;
Vector<String> getAllowElementsOr(Vector<String>&& fallback_value) const;
void setAllowElements(const Vector<String>& value);
void setAllowElements(Vector<String>&& value);

bool hasAllowUnknownMarkup() const {
  return has_allow_unknown_markup_;
}
bool allowUnknownMarkup() const {
  DCHECK(hasAllowUnknownMarkup());
return member_allow_unknown_markup_;
}
bool getAllowUnknownMarkupOr(bool fallback_value) const {
  if (!hasAllowUnknownMarkup()) {
  return fallback_value;
}
return member_allow_unknown_markup_;
}
void setAllowUnknownMarkup(bool value) {
  member_allow_unknown_markup_ = value;
has_allow_unknown_markup_ = true;
}

bool hasBlockElements() const {
  return has_block_elements_;
}
const Vector<String>& blockElements() const {
  DCHECK(hasBlockElements());
return member_block_elements_;
}
Vector<String> getBlockElementsOr(const Vector<String>& fallback_value) const;
Vector<String> getBlockElementsOr(Vector<String>&& fallback_value) const;
void setBlockElements(const Vector<String>& value);
void setBlockElements(Vector<String>&& value);

bool hasDropAttributes() const {
  return has_drop_attributes_;
}
const Vector<std::pair<String, Vector<String>>>& dropAttributes() const {
  DCHECK(hasDropAttributes());
return member_drop_attributes_;
}
Vector<std::pair<String, Vector<String>>> getDropAttributesOr(const Vector<std::pair<String, Vector<String>>>& fallback_value) const;
Vector<std::pair<String, Vector<String>>> getDropAttributesOr(Vector<std::pair<String, Vector<String>>>&& fallback_value) const;
void setDropAttributes(const Vector<std::pair<String, Vector<String>>>& value);
void setDropAttributes(Vector<std::pair<String, Vector<String>>>&& value);

bool hasDropElements() const {
  return has_drop_elements_;
}
const Vector<String>& dropElements() const {
  DCHECK(hasDropElements());
return member_drop_elements_;
}
Vector<String> getDropElementsOr(const Vector<String>& fallback_value) const;
Vector<String> getDropElementsOr(Vector<String>&& fallback_value) const;
void setDropElements(const Vector<String>& value);
void setDropElements(Vector<String>&& value);




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_allow_attributes_ = false;
bool has_allow_comments_ = false;
bool has_allow_custom_elements_ = false;
bool has_allow_elements_ = false;
bool has_allow_unknown_markup_ = false;
bool has_block_elements_ = false;
bool has_drop_attributes_ = false;
bool has_drop_elements_ = false;

Vector<std::pair<String, Vector<String>>> member_allow_attributes_;
bool member_allow_comments_;
bool member_allow_custom_elements_;
Vector<String> member_allow_elements_;
bool member_allow_unknown_markup_;
Vector<String> member_block_elements_;
Vector<std::pair<String, Vector<String>>> member_drop_attributes_;
Vector<String> member_drop_elements_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_SANITIZER_CONFIG_H_
