// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_PUBLIC_KEY_CREDENTIAL_DESCRIPTOR_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_PUBLIC_KEY_CREDENTIAL_DESCRIPTOR_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_public_key_credential_type.h"
#include "third_party/blink/renderer/core/typed_arrays/array_buffer_view_helpers.h"
#include "third_party/blink/renderer/core/typed_arrays/dom_typed_array.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/collection_support/heap_vector.h"
#include "third_party/blink/renderer/platform/heap/member.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

namespace blink {

class ExceptionState;
class V8UnionArrayBufferOrArrayBufferView;

class MODULES_EXPORT PublicKeyCredentialDescriptor : public bindings::DictionaryBase {
  
  public:
static PublicKeyCredentialDescriptor* Create() {
  return MakeGarbageCollected<PublicKeyCredentialDescriptor>();
}
static PublicKeyCredentialDescriptor* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<PublicKeyCredentialDescriptor>(isolate);
}
static PublicKeyCredentialDescriptor* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  PublicKeyCredentialDescriptor();
explicit  PublicKeyCredentialDescriptor(v8::Isolate* isolate);

bool hasId() const {
  return true;
}
V8UnionArrayBufferOrArrayBufferView* id() const {
  return member_id_;
}
void setId(V8UnionArrayBufferOrArrayBufferView* value) {
  member_id_ = value;
DCHECK(member_id_);
}

bool hasTransports() const {
  return has_transports_;
}
const Vector<String>& transports() const {
  DCHECK(hasTransports());
return member_transports_;
}
Vector<String> getTransportsOr(const Vector<String>& fallback_value) const;
Vector<String> getTransportsOr(Vector<String>&& fallback_value) const;
void setTransports(const Vector<String>& value);
void setTransports(Vector<String>&& value);

bool hasType() const {
  return true;
}
V8PublicKeyCredentialType type() const {
  return member_type_;
}
void setType(V8PublicKeyCredentialType value) {
  member_type_ = value;
}
void setType(V8PublicKeyCredentialType::Enum value) {
  member_type_ = V8PublicKeyCredentialType(value);
}


// Obsolete accessor functions
void setType(const String& value) {
  member_type_ = V8PublicKeyCredentialType::Create(value).value();
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_transports_ = false;

Member<V8UnionArrayBufferOrArrayBufferView> member_id_;
Vector<String> member_transports_;
V8PublicKeyCredentialType member_type_{static_cast<V8PublicKeyCredentialType::Enum>(0)};


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_PUBLIC_KEY_CREDENTIAL_DESCRIPTOR_H_
