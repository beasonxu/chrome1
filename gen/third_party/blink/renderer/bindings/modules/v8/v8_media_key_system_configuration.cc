// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_media_key_system_configuration.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_key_system_media_capability.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



MediaKeySystemConfiguration* MediaKeySystemConfiguration::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  MediaKeySystemConfiguration* dictionary = MakeGarbageCollected<MediaKeySystemConfiguration>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "MediaKeySystemConfiguration";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 MediaKeySystemConfiguration::MediaKeySystemConfiguration() {
  
}

 MediaKeySystemConfiguration::MediaKeySystemConfiguration(v8::Isolate* isolate) {
  
}



void MediaKeySystemConfiguration::setAudioCapabilities(const HeapVector<Member<MediaKeySystemMediaCapability>>& value) {
  member_audio_capabilities_ = value;
}

void MediaKeySystemConfiguration::setAudioCapabilities(HeapVector<Member<MediaKeySystemMediaCapability>>&& value) {
  member_audio_capabilities_ = std::move(value);
}









void MediaKeySystemConfiguration::setInitDataTypes(const Vector<String>& value) {
  member_init_data_types_ = value;
}

void MediaKeySystemConfiguration::setInitDataTypes(Vector<String>&& value) {
  member_init_data_types_ = std::move(value);
}




void MediaKeySystemConfiguration::setLabel(const String& value) {
  member_label_ = value;
}

void MediaKeySystemConfiguration::setLabel(String&& value) {
  member_label_ = std::move(value);
}









Vector<String> MediaKeySystemConfiguration::getSessionTypesOr(const Vector<String>& fallback_value) const {
  if (!hasSessionTypes()) {
  return fallback_value;
}
return member_session_types_;
}

Vector<String> MediaKeySystemConfiguration::getSessionTypesOr(Vector<String>&& fallback_value) const {
  if (!hasSessionTypes()) {
  return std::move(fallback_value);
}
return member_session_types_;
}

void MediaKeySystemConfiguration::setSessionTypes(const Vector<String>& value) {
  member_session_types_ = value;
has_session_types_ = true;
}

void MediaKeySystemConfiguration::setSessionTypes(Vector<String>&& value) {
  member_session_types_ = std::move(value);
has_session_types_ = true;
}




void MediaKeySystemConfiguration::setVideoCapabilities(const HeapVector<Member<MediaKeySystemMediaCapability>>& value) {
  member_video_capabilities_ = value;
}

void MediaKeySystemConfiguration::setVideoCapabilities(HeapVector<Member<MediaKeySystemMediaCapability>>&& value) {
  member_video_capabilities_ = std::move(value);
}




void MediaKeySystemConfiguration::Trace(Visitor* visitor) const {
  TraceIfNeeded<HeapVector<Member<MediaKeySystemMediaCapability>>>::Trace(visitor, member_audio_capabilities_);
TraceIfNeeded<V8MediaKeysRequirement>::Trace(visitor, member_distinctive_identifier_);
TraceIfNeeded<Vector<String>>::Trace(visitor, member_init_data_types_);
TraceIfNeeded<String>::Trace(visitor, member_label_);
TraceIfNeeded<V8MediaKeysRequirement>::Trace(visitor, member_persistent_state_);
TraceIfNeeded<Vector<String>>::Trace(visitor, member_session_types_);
TraceIfNeeded<HeapVector<Member<MediaKeySystemMediaCapability>>>::Trace(visitor, member_video_capabilities_);
bindings::DictionaryBase::Trace(visitor);
}

bool MediaKeySystemConfiguration::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasAudioCapabilities()) {
  if (!ToV8Traits<IDLSequence<MediaKeySystemMediaCapability>>::ToV8(script_state, member_audio_capabilities_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDistinctiveIdentifier()) {
  if (!ToV8Traits<V8MediaKeysRequirement>::ToV8(script_state, member_distinctive_identifier_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasInitDataTypes()) {
  if (!ToV8Traits<IDLSequence<IDLString>>::ToV8(script_state, member_init_data_types_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasLabel()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_label_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPersistentState()) {
  if (!ToV8Traits<V8MediaKeysRequirement>::ToV8(script_state, member_persistent_state_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasSessionTypes()) {
  if (!ToV8Traits<IDLSequence<IDLString>>::ToV8(script_state, member_session_types_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasVideoCapabilities()) {
  if (!ToV8Traits<IDLSequence<MediaKeySystemMediaCapability>>::ToV8(script_state, member_video_capabilities_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void MediaKeySystemConfiguration::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "MediaKeySystemConfiguration";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("audioCapabilities");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool fallback_presence_var;
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<MediaKeySystemMediaCapability>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), fallback_presence_var, member_audio_capabilities_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("distinctiveIdentifier");
if (!bindings::GetDictionaryMemberFromV8Object<V8MediaKeysRequirement, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), fallback_presence_var, member_distinctive_identifier_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("initDataTypes");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLString>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), fallback_presence_var, member_init_data_types_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("label");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), fallback_presence_var, member_label_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("persistentState");
if (!bindings::GetDictionaryMemberFromV8Object<V8MediaKeysRequirement, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), fallback_presence_var, member_persistent_state_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("sessionTypes");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLString>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), has_session_types_, member_session_types_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("videoCapabilities");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<MediaKeySystemMediaCapability>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), fallback_presence_var, member_video_capabilities_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> MediaKeySystemConfiguration::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"audioCapabilities",
"distinctiveIdentifier",
"initDataTypes",
"label",
"persistentState",
"sessionTypes",
"videoCapabilities",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
