// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_union_arraybuffer_arraybufferview_jsonwebkey.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_arraybuffer_arraybufferview.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_json_web_key.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"

namespace blink {



V8UnionArrayBufferOrArrayBufferViewOrJsonWebKey* V8UnionArrayBufferOrArrayBufferViewOrJsonWebKey::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  if (v8_value->IsNullOrUndefined()) {
  auto&& blink_value = JsonWebKey::Create(isolate);
return MakeGarbageCollected<V8UnionArrayBufferOrArrayBufferViewOrJsonWebKey>(blink_value);
}
if (v8_value->IsArrayBuffer() || v8_value->IsSharedArrayBuffer()) {
  auto&& blink_value = NativeValueTraits<DOMArrayBuffer>::NativeValue(isolate, v8_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionArrayBufferOrArrayBufferViewOrJsonWebKey>(blink_value);
}
if (v8_value->IsArrayBufferView()) {
  auto&& blink_value = NativeValueTraits<NotShared<DOMArrayBufferView>>::NativeValue(isolate, v8_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionArrayBufferOrArrayBufferViewOrJsonWebKey>(blink_value);
}
if (v8_value->IsObject()) {
  auto&& blink_value = NativeValueTraits<JsonWebKey>::NativeValue(isolate, v8_value, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return MakeGarbageCollected<V8UnionArrayBufferOrArrayBufferViewOrJsonWebKey>(blink_value);
}
ThrowTypeErrorNotOfType(exception_state, UnionNameInIDL());
return nullptr;
}













V8UnionArrayBufferOrArrayBufferView* V8UnionArrayBufferOrArrayBufferViewOrJsonWebKey::GetAsV8UnionArrayBufferOrArrayBufferView() const {
  switch (content_type_) {
  case ContentType::kArrayBuffer: {
    return MakeGarbageCollected<V8UnionArrayBufferOrArrayBufferView>(GetAsArrayBuffer());
  }
  case ContentType::kArrayBufferView: {
    return MakeGarbageCollected<V8UnionArrayBufferOrArrayBufferView>(GetAsArrayBufferView());
  }
  default: {
    NOTREACHED();
return nullptr;
  }
}
}

void V8UnionArrayBufferOrArrayBufferViewOrJsonWebKey::Set(const V8UnionArrayBufferOrArrayBufferView* value) {
  switch (value->GetContentType()) {
  case V8UnionArrayBufferOrArrayBufferView::ContentType::kArrayBuffer: {
    Set(value->GetAsArrayBuffer());
    break;
  }
  case V8UnionArrayBufferOrArrayBufferView::ContentType::kArrayBufferView: {
    Set(value->GetAsArrayBufferView());
    break;
  }
}
}




v8::MaybeLocal<v8::Value> V8UnionArrayBufferOrArrayBufferViewOrJsonWebKey::ToV8Value(ScriptState* script_state) const {
  switch (content_type_) {
  case ContentType::kArrayBuffer: {
    return ToV8Traits<DOMArrayBuffer>::ToV8(script_state, member_array_buffer_);
  }
  case ContentType::kArrayBufferView: {
    return ToV8Traits<NotShared<DOMArrayBufferView>>::ToV8(script_state, member_array_buffer_view_);
  }
  case ContentType::kJsonWebKey: {
    return ToV8Traits<JsonWebKey>::ToV8(script_state, member_json_web_key_);
  }
}

NOTREACHED();
return v8::MaybeLocal<v8::Value>();
}

void V8UnionArrayBufferOrArrayBufferViewOrJsonWebKey::Trace(Visitor* visitor) const {
  TraceIfNeeded<Member<DOMArrayBuffer>>::Trace(visitor, member_array_buffer_);
TraceIfNeeded<NotShared<DOMArrayBufferView>>::Trace(visitor, member_array_buffer_view_);
TraceIfNeeded<Member<JsonWebKey>>::Trace(visitor, member_json_web_key_);
bindings::UnionBase::Trace(visitor);
}

void V8UnionArrayBufferOrArrayBufferViewOrJsonWebKey::Clear() {
  member_array_buffer_.Clear();
member_array_buffer_view_.Clear();
member_json_web_key_.Clear();
}



}  // namespace blink
