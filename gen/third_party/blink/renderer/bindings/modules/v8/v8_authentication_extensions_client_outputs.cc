// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_authentication_extensions_client_outputs.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_authentication_extensions_large_blob_outputs.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_credential_properties_output.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



AuthenticationExtensionsClientOutputs* AuthenticationExtensionsClientOutputs::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  AuthenticationExtensionsClientOutputs* dictionary = MakeGarbageCollected<AuthenticationExtensionsClientOutputs>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "AuthenticationExtensionsClientOutputs";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 AuthenticationExtensionsClientOutputs::AuthenticationExtensionsClientOutputs() {
  
}

 AuthenticationExtensionsClientOutputs::AuthenticationExtensionsClientOutputs(v8::Isolate* isolate) {
  
}













































Vector<Vector<uint32_t>> AuthenticationExtensionsClientOutputs::getUvmOr(const Vector<Vector<uint32_t>>& fallback_value) const {
  if (!hasUvm()) {
  return fallback_value;
}
return member_uvm_;
}

Vector<Vector<uint32_t>> AuthenticationExtensionsClientOutputs::getUvmOr(Vector<Vector<uint32_t>>&& fallback_value) const {
  if (!hasUvm()) {
  return std::move(fallback_value);
}
return member_uvm_;
}

void AuthenticationExtensionsClientOutputs::setUvm(const Vector<Vector<uint32_t>>& value) {
  member_uvm_ = value;
has_uvm_ = true;
}

void AuthenticationExtensionsClientOutputs::setUvm(Vector<Vector<uint32_t>>&& value) {
  member_uvm_ = std::move(value);
has_uvm_ = true;
}




void AuthenticationExtensionsClientOutputs::Trace(Visitor* visitor) const {
  TraceIfNeeded<bool>::Trace(visitor, member_appid_);
TraceIfNeeded<bool>::Trace(visitor, member_cred_blob_);
TraceIfNeeded<Member<CredentialPropertiesOutput>>::Trace(visitor, member_cred_props_);
TraceIfNeeded<Member<DOMArrayBuffer>>::Trace(visitor, member_get_cred_blob_);
TraceIfNeeded<bool>::Trace(visitor, member_hmac_create_secret_);
TraceIfNeeded<Member<AuthenticationExtensionsLargeBlobOutputs>>::Trace(visitor, member_large_blob_);
TraceIfNeeded<Vector<Vector<uint32_t>>>::Trace(visitor, member_uvm_);
bindings::DictionaryBase::Trace(visitor);
}

bool AuthenticationExtensionsClientOutputs::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasAppid()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_appid_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasCredBlob()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_cred_blob_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasCredProps()) {
  if (!ToV8Traits<CredentialPropertiesOutput>::ToV8(script_state, member_cred_props_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasGetCredBlob()) {
  if (!ToV8Traits<DOMArrayBuffer>::ToV8(script_state, member_get_cred_blob_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasHmacCreateSecret()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_hmac_create_secret_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (RuntimeEnabledFeatures::WebAuthenticationLargeBlobExtensionEnabled()) {
  if (hasLargeBlob()) {
  if (!ToV8Traits<AuthenticationExtensionsLargeBlobOutputs>::ToV8(script_state, member_large_blob_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
if (hasUvm()) {
  if (!ToV8Traits<IDLSequence<IDLSequence<IDLUnsignedLong>>>::ToV8(script_state, member_uvm_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void AuthenticationExtensionsClientOutputs::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "AuthenticationExtensionsClientOutputs";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("appid");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_appid_, member_appid_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("credBlob");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_cred_blob_, member_cred_blob_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("credProps");
if (!bindings::GetDictionaryMemberFromV8Object<CredentialPropertiesOutput, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_cred_props_, member_cred_props_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("getCredBlob");
if (!bindings::GetDictionaryMemberFromV8Object<DOMArrayBuffer, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_get_cred_blob_, member_get_cred_blob_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("hmacCreateSecret");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_hmac_create_secret_, member_hmac_create_secret_, try_block, exception_state)) {
  return;
}
if (RuntimeEnabledFeatures::WebAuthenticationLargeBlobExtensionEnabled()) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("largeBlob");
if (!bindings::GetDictionaryMemberFromV8Object<AuthenticationExtensionsLargeBlobOutputs, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), has_large_blob_, member_large_blob_, try_block, exception_state)) {
  return;
}
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("uvm");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLSequence<IDLUnsignedLong>>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), has_uvm_, member_uvm_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> AuthenticationExtensionsClientOutputs::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"appid",
"credBlob",
"credProps",
"getCredBlob",
"hmacCreateSecret",
"largeBlob",
"uvm",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
