// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_RTC_ENCODED_VIDEO_FRAME_METADATA_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_RTC_ENCODED_VIDEO_FRAME_METADATA_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/collection_support/heap_vector.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT RTCEncodedVideoFrameMetadata : public bindings::DictionaryBase {
  
  public:
static RTCEncodedVideoFrameMetadata* Create() {
  return MakeGarbageCollected<RTCEncodedVideoFrameMetadata>();
}
static RTCEncodedVideoFrameMetadata* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<RTCEncodedVideoFrameMetadata>(isolate);
}
static RTCEncodedVideoFrameMetadata* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  RTCEncodedVideoFrameMetadata();
explicit  RTCEncodedVideoFrameMetadata(v8::Isolate* isolate);

bool hasContributingSources() const {
  return has_contributing_sources_;
}
const Vector<uint32_t>& contributingSources() const {
  DCHECK(hasContributingSources());
return member_contributing_sources_;
}
Vector<uint32_t> getContributingSourcesOr(const Vector<uint32_t>& fallback_value) const;
Vector<uint32_t> getContributingSourcesOr(Vector<uint32_t>&& fallback_value) const;
void setContributingSources(const Vector<uint32_t>& value);
void setContributingSources(Vector<uint32_t>&& value);

bool hasDependencies() const {
  return has_dependencies_;
}
const Vector<int64_t>& dependencies() const {
  DCHECK(hasDependencies());
return member_dependencies_;
}
Vector<int64_t> getDependenciesOr(const Vector<int64_t>& fallback_value) const;
Vector<int64_t> getDependenciesOr(Vector<int64_t>&& fallback_value) const;
void setDependencies(const Vector<int64_t>& value);
void setDependencies(Vector<int64_t>&& value);

bool hasFrameId() const {
  return has_frame_id_;
}
int64_t frameId() const {
  DCHECK(hasFrameId());
return member_frame_id_;
}
int64_t getFrameIdOr(int64_t fallback_value) const {
  if (!hasFrameId()) {
  return fallback_value;
}
return member_frame_id_;
}
void setFrameId(int64_t value) {
  member_frame_id_ = value;
has_frame_id_ = true;
}

bool hasHeight() const {
  return has_height_;
}
uint16_t height() const {
  DCHECK(hasHeight());
return member_height_;
}
uint16_t getHeightOr(uint16_t fallback_value) const {
  if (!hasHeight()) {
  return fallback_value;
}
return member_height_;
}
void setHeight(uint16_t value) {
  member_height_ = value;
has_height_ = true;
}

bool hasPayloadType() const {
  return has_payload_type_;
}
int16_t payloadType() const {
  DCHECK(hasPayloadType());
return member_payload_type_;
}
int16_t getPayloadTypeOr(int16_t fallback_value) const {
  if (!hasPayloadType()) {
  return fallback_value;
}
return member_payload_type_;
}
void setPayloadType(int16_t value) {
  member_payload_type_ = value;
has_payload_type_ = true;
}

bool hasSpatialIndex() const {
  return has_spatial_index_;
}
int32_t spatialIndex() const {
  DCHECK(hasSpatialIndex());
return member_spatial_index_;
}
int32_t getSpatialIndexOr(int32_t fallback_value) const {
  if (!hasSpatialIndex()) {
  return fallback_value;
}
return member_spatial_index_;
}
void setSpatialIndex(int32_t value) {
  member_spatial_index_ = value;
has_spatial_index_ = true;
}

bool hasSynchronizationSource() const {
  return has_synchronization_source_;
}
uint32_t synchronizationSource() const {
  DCHECK(hasSynchronizationSource());
return member_synchronization_source_;
}
uint32_t getSynchronizationSourceOr(uint32_t fallback_value) const {
  if (!hasSynchronizationSource()) {
  return fallback_value;
}
return member_synchronization_source_;
}
void setSynchronizationSource(uint32_t value) {
  member_synchronization_source_ = value;
has_synchronization_source_ = true;
}

bool hasTemporalIndex() const {
  return has_temporal_index_;
}
int32_t temporalIndex() const {
  DCHECK(hasTemporalIndex());
return member_temporal_index_;
}
int32_t getTemporalIndexOr(int32_t fallback_value) const {
  if (!hasTemporalIndex()) {
  return fallback_value;
}
return member_temporal_index_;
}
void setTemporalIndex(int32_t value) {
  member_temporal_index_ = value;
has_temporal_index_ = true;
}

bool hasWidth() const {
  return has_width_;
}
uint16_t width() const {
  DCHECK(hasWidth());
return member_width_;
}
uint16_t getWidthOr(uint16_t fallback_value) const {
  if (!hasWidth()) {
  return fallback_value;
}
return member_width_;
}
void setWidth(uint16_t value) {
  member_width_ = value;
has_width_ = true;
}




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_contributing_sources_ = false;
bool has_dependencies_ = false;
bool has_frame_id_ = false;
bool has_height_ = false;
bool has_payload_type_ = false;
bool has_spatial_index_ = false;
bool has_synchronization_source_ = false;
bool has_temporal_index_ = false;
bool has_width_ = false;

Vector<uint32_t> member_contributing_sources_;
Vector<int64_t> member_dependencies_;
int64_t member_frame_id_;
uint16_t member_height_;
int16_t member_payload_type_;
int32_t member_spatial_index_;
uint32_t member_synchronization_source_;
int32_t member_temporal_index_;
uint16_t member_width_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_RTC_ENCODED_VIDEO_FRAME_METADATA_H_
