// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/properties_per_feature_installer.h"

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_dedicated_worker_global_scope.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_document.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_anchor_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_body_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_frame_set_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_iframe_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_image_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_html_script_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_mathml_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_navigator.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_performance_navigation_timing.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_shared_worker_global_scope.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_svg_element.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_window.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_worker_global_scope.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_worker_navigator.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_xml_http_request.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_browser_capture_media_stream_track.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_crop_target.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_focusable_media_stream_track.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_launch_params.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_media_source.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_navigator_managed_data.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_notification.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_ice_transport.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_service_worker_global_scope.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_source_buffer.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_frame.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_session.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_webgl_binding.h"
#include "third_party/blink/renderer/platform/bindings/script_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_context_data.h"

namespace blink {

namespace bindings {

namespace  {

void InstallPropertiesPerFeatureInternal(ScriptState* script_state, OriginTrialFeature feature, base::span<const WrapperTypeInfo* const> wrapper_type_info_list) {
  V8PerContextData* per_context_data = script_state->PerContextData();
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> context = script_state->GetContext();
const DOMWrapperWorld& world = script_state->World();
V8InterfaceBridgeBase::FeatureSelector feature_selector(feature);

for (const auto* wrapper_type_info : wrapper_type_info_list) {
  v8::Local<v8::Object> instance_object;
  v8::Local<v8::Object> prototype_object;
  v8::Local<v8::Function> interface_object;
  v8::Local<v8::Template> interface_template =
      wrapper_type_info->GetV8ClassTemplate(isolate, world);

  switch (wrapper_type_info->idl_definition_kind) {
    case WrapperTypeInfo::kIdlInterface:
      if (!per_context_data->GetExistingConstructorAndPrototypeForType(
              wrapper_type_info, &prototype_object, &interface_object)) {
        continue;
      }
      break;
    case WrapperTypeInfo::kIdlNamespace:
      NOTIMPLEMENTED();
      break;
    default:
      NOTREACHED();
  }

  wrapper_type_info->install_context_dependent_props_func(
      context, world, instance_object, prototype_object,  interface_object,
      interface_template, feature_selector);
}
}

}  // namespace 

void InstallPropertiesPerFeature(ScriptState* script_state, OriginTrialFeature feature) {
  base::span<const WrapperTypeInfo* const> selected_wti_list;

switch (feature) {
  case OriginTrialFeature::kAdInterestGroupAPI: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Navigator::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kAnonymousIframe: {
    static const WrapperTypeInfo* const wti_list[] = {
V8HTMLIFrameElement::GetWrapperTypeInfo(), 
V8Window::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kAttributionReporting: {
    static const WrapperTypeInfo* const wti_list[] = {
V8HTMLAnchorElement::GetWrapperTypeInfo(), 
V8HTMLImageElement::GetWrapperTypeInfo(), 
V8HTMLScriptElement::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kBeforeMatchEvent: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Document::GetWrapperTypeInfo(), 
V8HTMLElement::GetWrapperTypeInfo(), 
V8MathMLElement::GetWrapperTypeInfo(), 
V8SVGElement::GetWrapperTypeInfo(), 
V8Window::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kComputePressure: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Window::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kConditionalFocus: {
    static const WrapperTypeInfo* const wti_list[] = {
V8BrowserCaptureMediaStreamTrack::GetWrapperTypeInfo(), 
V8FocusableMediaStreamTrack::GetWrapperTypeInfo(), 
V8Window::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kDeviceAttributes: {
    static const WrapperTypeInfo* const wti_list[] = {
V8NavigatorManagedData::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kDigitalGoods: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Window::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kDocumentPolicyNegotiation: {
    static const WrapperTypeInfo* const wti_list[] = {
V8HTMLIFrameElement::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kDocumentTransition: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Document::GetWrapperTypeInfo(), 
V8Window::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kFedCm: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Window::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kFencedFrames: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Window::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kFileHandling: {
    static const WrapperTypeInfo* const wti_list[] = {
V8LaunchParams::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kFledge: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Navigator::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kFocusgroup: {
    static const WrapperTypeInfo* const wti_list[] = {
V8HTMLElement::GetWrapperTypeInfo(), 
V8MathMLElement::GetWrapperTypeInfo(), 
V8SVGElement::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kHrefTranslate: {
    static const WrapperTypeInfo* const wti_list[] = {
V8HTMLAnchorElement::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kMediaSourceExtensionsForWebCodecs: {
    static const WrapperTypeInfo* const wti_list[] = {
V8SourceBuffer::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kMediaSourceInWorkers: {
    static const WrapperTypeInfo* const wti_list[] = {
V8DedicatedWorkerGlobalScope::GetWrapperTypeInfo(), 
V8MediaSource::GetWrapperTypeInfo(), 
V8Window::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kNotificationTriggers: {
    static const WrapperTypeInfo* const wti_list[] = {
V8DedicatedWorkerGlobalScope::GetWrapperTypeInfo(), 
V8Notification::GetWrapperTypeInfo(), 
V8ServiceWorkerGlobalScope::GetWrapperTypeInfo(), 
V8SharedWorkerGlobalScope::GetWrapperTypeInfo(), 
V8Window::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kOriginTrialsSampleAPI: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Window::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kParakeet: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Navigator::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kPendingBeaconAPI: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Window::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kPortals: {
    static const WrapperTypeInfo* const wti_list[] = {
V8HTMLBodyElement::GetWrapperTypeInfo(), 
V8HTMLFrameSetElement::GetWrapperTypeInfo(), 
V8Window::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kPrerender2RelatedFeatures: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Document::GetWrapperTypeInfo(), 
V8PerformanceNavigationTiming::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kRTCIceTransportExtension: {
    static const WrapperTypeInfo* const wti_list[] = {
V8RTCIceTransport::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kRegionCapture: {
    static const WrapperTypeInfo* const wti_list[] = {
V8CropTarget::GetWrapperTypeInfo(), 
V8DedicatedWorkerGlobalScope::GetWrapperTypeInfo(), 
V8ServiceWorkerGlobalScope::GetWrapperTypeInfo(), 
V8SharedWorkerGlobalScope::GetWrapperTypeInfo(), 
V8Window::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kSharedStorageAPI: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Window::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kStorageFoundationAPI: {
    static const WrapperTypeInfo* const wti_list[] = {
V8DedicatedWorkerGlobalScope::GetWrapperTypeInfo(), 
V8ServiceWorkerGlobalScope::GetWrapperTypeInfo(), 
V8SharedWorkerGlobalScope::GetWrapperTypeInfo(), 
V8Window::GetWrapperTypeInfo(), 
V8WorkerGlobalScope::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kTextFragmentIdentifiers: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Document::GetWrapperTypeInfo(), 
V8Window::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kTopicsAPI: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Document::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kTouchEventFeatureDetection: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Document::GetWrapperTypeInfo(), 
V8HTMLElement::GetWrapperTypeInfo(), 
V8MathMLElement::GetWrapperTypeInfo(), 
V8SVGElement::GetWrapperTypeInfo(), 
V8Window::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kTrustTokens: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Document::GetWrapperTypeInfo(), 
V8HTMLIFrameElement::GetWrapperTypeInfo(), 
V8XMLHttpRequest::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kWebAppLaunchHandler: {
    static const WrapperTypeInfo* const wti_list[] = {
V8LaunchParams::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kWebAppLaunchQueue: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Window::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kWebCodecs: {
    static const WrapperTypeInfo* const wti_list[] = {
V8DedicatedWorkerGlobalScope::GetWrapperTypeInfo(), 
V8Window::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kWebGPU: {
    static const WrapperTypeInfo* const wti_list[] = {
V8DedicatedWorkerGlobalScope::GetWrapperTypeInfo(), 
V8GPU::GetWrapperTypeInfo(), 
V8Navigator::GetWrapperTypeInfo(), 
V8Window::GetWrapperTypeInfo(), 
V8WorkerNavigator::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kWebXRDepth: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Window::GetWrapperTypeInfo(), 
V8XRFrame::GetWrapperTypeInfo(), 
V8XRSession::GetWrapperTypeInfo(), 
V8XRWebGLBinding::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kWebXRImageTracking: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Window::GetWrapperTypeInfo(), 
V8XRFrame::GetWrapperTypeInfo(), 
V8XRSession::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  case OriginTrialFeature::kWebXRPlaneDetection: {
    static const WrapperTypeInfo* const wti_list[] = {
V8Window::GetWrapperTypeInfo(), 
V8XRFrame::GetWrapperTypeInfo(), 
};
selected_wti_list = wti_list;
    break;
  }
  default: {
    // Ignore unknown, deprecated, and unused features.
return;
  }
}

InstallPropertiesPerFeatureInternal(script_state, feature, selected_wti_list);
}

}  // namespace bindings

}  // namespace blink
