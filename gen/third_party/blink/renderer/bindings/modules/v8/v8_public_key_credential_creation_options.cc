// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_public_key_credential_creation_options.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_arraybuffer_arraybufferview.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_authentication_extensions_client_inputs.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_authenticator_selection_criteria.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_public_key_credential_descriptor.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_public_key_credential_parameters.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_public_key_credential_rp_entity.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_public_key_credential_user_entity.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



PublicKeyCredentialCreationOptions* PublicKeyCredentialCreationOptions::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  PublicKeyCredentialCreationOptions* dictionary = MakeGarbageCollected<PublicKeyCredentialCreationOptions>(isolate);
if (!v8_value->IsObject()) {
  const char* const class_like_name = "PublicKeyCredentialCreationOptions";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions() {
  
}

 PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions(v8::Isolate* isolate) {
  
}



String PublicKeyCredentialCreationOptions::getAttestationOr(const String& fallback_value) const {
  if (!hasAttestation()) {
  return fallback_value;
}
return member_attestation_;
}

String PublicKeyCredentialCreationOptions::getAttestationOr(String&& fallback_value) const {
  if (!hasAttestation()) {
  return std::move(fallback_value);
}
return member_attestation_;
}

void PublicKeyCredentialCreationOptions::setAttestation(const String& value) {
  member_attestation_ = value;
has_attestation_ = true;
}

void PublicKeyCredentialCreationOptions::setAttestation(String&& value) {
  member_attestation_ = std::move(value);
has_attestation_ = true;
}
















void PublicKeyCredentialCreationOptions::setExcludeCredentials(const HeapVector<Member<PublicKeyCredentialDescriptor>>& value) {
  member_exclude_credentials_ = value;
}

void PublicKeyCredentialCreationOptions::setExcludeCredentials(HeapVector<Member<PublicKeyCredentialDescriptor>>&& value) {
  member_exclude_credentials_ = std::move(value);
}











void PublicKeyCredentialCreationOptions::setPubKeyCredParams(const HeapVector<Member<PublicKeyCredentialParameters>>& value) {
  member_pub_key_cred_params_ = value;
}

void PublicKeyCredentialCreationOptions::setPubKeyCredParams(HeapVector<Member<PublicKeyCredentialParameters>>&& value) {
  member_pub_key_cred_params_ = std::move(value);
}





















void PublicKeyCredentialCreationOptions::Trace(Visitor* visitor) const {
  TraceIfNeeded<String>::Trace(visitor, member_attestation_);
TraceIfNeeded<Member<AuthenticatorSelectionCriteria>>::Trace(visitor, member_authenticator_selection_);
TraceIfNeeded<Member<V8UnionArrayBufferOrArrayBufferView>>::Trace(visitor, member_challenge_);
TraceIfNeeded<HeapVector<Member<PublicKeyCredentialDescriptor>>>::Trace(visitor, member_exclude_credentials_);
TraceIfNeeded<Member<AuthenticationExtensionsClientInputs>>::Trace(visitor, member_extensions_);
TraceIfNeeded<HeapVector<Member<PublicKeyCredentialParameters>>>::Trace(visitor, member_pub_key_cred_params_);
TraceIfNeeded<Member<PublicKeyCredentialRpEntity>>::Trace(visitor, member_rp_);
TraceIfNeeded<uint32_t>::Trace(visitor, member_timeout_);
TraceIfNeeded<Member<PublicKeyCredentialUserEntity>>::Trace(visitor, member_user_);
bindings::DictionaryBase::Trace(visitor);
}

bool PublicKeyCredentialCreationOptions::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasAttestation()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_attestation_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasAuthenticatorSelection()) {
  if (!ToV8Traits<AuthenticatorSelectionCriteria>::ToV8(script_state, member_authenticator_selection_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasChallenge()) {
  if (!ToV8Traits<V8UnionArrayBufferOrArrayBufferView>::ToV8(script_state, member_challenge_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasExcludeCredentials()) {
  if (!ToV8Traits<IDLSequence<PublicKeyCredentialDescriptor>>::ToV8(script_state, member_exclude_credentials_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasExtensions()) {
  if (!ToV8Traits<AuthenticationExtensionsClientInputs>::ToV8(script_state, member_extensions_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPubKeyCredParams()) {
  if (!ToV8Traits<IDLSequence<PublicKeyCredentialParameters>>::ToV8(script_state, member_pub_key_cred_params_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasRp()) {
  if (!ToV8Traits<PublicKeyCredentialRpEntity>::ToV8(script_state, member_rp_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasTimeout()) {
  if (!ToV8Traits<IDLUnsignedLong>::ToV8(script_state, member_timeout_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUser()) {
  if (!ToV8Traits<PublicKeyCredentialUserEntity>::ToV8(script_state, member_user_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[8].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void PublicKeyCredentialCreationOptions::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "PublicKeyCredentialCreationOptions";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("attestation");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_attestation_, member_attestation_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("authenticatorSelection");
if (!bindings::GetDictionaryMemberFromV8Object<AuthenticatorSelectionCriteria, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_authenticator_selection_, member_authenticator_selection_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("challenge");
constexpr bool is_required = true;
bool fallback_presence_var;
if (!bindings::GetDictionaryMemberFromV8Object<V8UnionArrayBufferOrArrayBufferView, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), fallback_presence_var, member_challenge_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("excludeCredentials");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<PublicKeyCredentialDescriptor>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), fallback_presence_var, member_exclude_credentials_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("extensions");
if (!bindings::GetDictionaryMemberFromV8Object<AuthenticationExtensionsClientInputs, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_extensions_, member_extensions_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("pubKeyCredParams");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<PublicKeyCredentialParameters>, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), fallback_presence_var, member_pub_key_cred_params_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("rp");
if (!bindings::GetDictionaryMemberFromV8Object<PublicKeyCredentialRpEntity, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), fallback_presence_var, member_rp_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("timeout");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), has_timeout_, member_timeout_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("user");
if (!bindings::GetDictionaryMemberFromV8Object<PublicKeyCredentialUserEntity, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[8].Get(isolate), fallback_presence_var, member_user_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> PublicKeyCredentialCreationOptions::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"attestation",
"authenticatorSelection",
"challenge",
"excludeCredentials",
"extensions",
"pubKeyCredParams",
"rp",
"timeout",
"user",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
