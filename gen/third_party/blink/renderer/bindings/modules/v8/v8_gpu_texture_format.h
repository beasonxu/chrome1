// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GPU_TEXTURE_FORMAT_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GPU_TEXTURE_FORMAT_H_

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/enumeration_base.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT V8GPUTextureFormat final : public bindings::EnumerationBase {
  
  public:
enum class Enum : enum_int_t {
kR8Unorm, kR8Snorm, kR8Uint, kR8Sint, kR16Uint, kR16Sint, kR16Float, kRg8Unorm, kRg8Snorm, kRg8Uint, kRg8Sint, kR32Uint, kR32Sint, kR32Float, kRg16Uint, kRg16Sint, kRg16Float, kRgba8Unorm, kRgba8UnormSrgb, kRgba8Snorm, kRgba8Uint, kRgba8Sint, kBgra8Unorm, kBgra8UnormSrgb, kRgb9E5Ufloat, kRgb10A2Unorm, kRg11B10Ufloat, kRg32Uint, kRg32Sint, kRg32Float, kRgba16Uint, kRgba16Sint, kRgba16Float, kRgba32Uint, kRgba32Sint, kRgba32Float, kDepth32Float, kDepth32FloatStencil8, kDepth24Plus, kDepth24PlusStencil8, kDepth16Unorm, kStencil8, kBc1RgbaUnorm, kBc1RgbaUnormSrgb, kBc2RgbaUnorm, kBc2RgbaUnormSrgb, kBc3RgbaUnorm, kBc3RgbaUnormSrgb, kBc4RUnorm, kBc4RSnorm, kBc5RgUnorm, kBc5RgSnorm, kBc6HRgbUfloat, kBc6HRgbFloat, kBc7RgbaUnorm, kBc7RgbaUnormSrgb, kEtc2Rgb8Unorm, kEtc2Rgb8UnormSrgb, kEtc2Rgb8A1Unorm, kEtc2Rgb8A1UnormSrgb, kEtc2Rgba8Unorm, kEtc2Rgba8UnormSrgb, kEacR11Unorm, kEacR11Snorm, kEacRg11Unorm, kEacRg11Snorm, kAstc4X4Unorm, kAstc4X4UnormSrgb, kAstc5X4Unorm, kAstc5X4UnormSrgb, kAstc5X5Unorm, kAstc5X5UnormSrgb, kAstc6X5Unorm, kAstc6X5UnormSrgb, kAstc6X6Unorm, kAstc6X6UnormSrgb, kAstc8X5Unorm, kAstc8X5UnormSrgb, kAstc8X6Unorm, kAstc8X6UnormSrgb, kAstc8X8Unorm, kAstc8X8UnormSrgb, kAstc10X5Unorm, kAstc10X5UnormSrgb, kAstc10X6Unorm, kAstc10X6UnormSrgb, kAstc10X8Unorm, kAstc10X8UnormSrgb, kAstc10X10Unorm, kAstc10X10UnormSrgb, kAstc12X10Unorm, kAstc12X10UnormSrgb, kAstc12X12Unorm, kAstc12X12UnormSrgb
};
static constexpr size_t kEnumSize = 94;

static V8GPUTextureFormat Create(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exception_state);
static absl::optional<V8GPUTextureFormat> Create(const String& value);

explicit constexpr  V8GPUTextureFormat(Enum value) : bindings::EnumerationBase(static_cast<enum_int_t>(value), string_table_[static_cast<enum_int_t>(value)]) {
  
}
constexpr  V8GPUTextureFormat(const V8GPUTextureFormat&) = default;
constexpr  V8GPUTextureFormat(V8GPUTextureFormat&&) = default;
 ~V8GPUTextureFormat() = default;

V8GPUTextureFormat& operator=(const V8GPUTextureFormat&) = default;
V8GPUTextureFormat& operator=(V8GPUTextureFormat&&) = default;
V8GPUTextureFormat& operator=(const String&);

Enum AsEnum() const {
  return static_cast<Enum>(GetEnumValue());
}


  
  private:
static const char* const string_table_[];

constexpr  V8GPUTextureFormat() = default;


  
};

inline bool operator==(const V8GPUTextureFormat& lhs, V8GPUTextureFormat::Enum rhs) {
  return lhs.AsEnum() == rhs;
}

inline bool operator==(V8GPUTextureFormat::Enum lhs, const V8GPUTextureFormat& rhs) {
  return lhs == rhs.AsEnum();
}


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GPU_TEXTURE_FORMAT_H_
