// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_video_configuration.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



VideoConfiguration* VideoConfiguration::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  VideoConfiguration* dictionary = MakeGarbageCollected<VideoConfiguration>(isolate);
if (!v8_value->IsObject()) {
  const char* const class_like_name = "VideoConfiguration";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 VideoConfiguration::VideoConfiguration() {
  
}

 VideoConfiguration::VideoConfiguration(v8::Isolate* isolate) {
  
}















void VideoConfiguration::setContentType(const String& value) {
  member_content_type_ = value;
}

void VideoConfiguration::setContentType(String&& value) {
  member_content_type_ = std::move(value);
}





















String VideoConfiguration::getScalabilityModeOr(const String& fallback_value) const {
  if (!hasScalabilityMode()) {
  return fallback_value;
}
return member_scalability_mode_;
}

String VideoConfiguration::getScalabilityModeOr(String&& fallback_value) const {
  if (!hasScalabilityMode()) {
  return std::move(fallback_value);
}
return member_scalability_mode_;
}

void VideoConfiguration::setScalabilityMode(const String& value) {
  member_scalability_mode_ = value;
has_scalability_mode_ = true;
}

void VideoConfiguration::setScalabilityMode(String&& value) {
  member_scalability_mode_ = std::move(value);
has_scalability_mode_ = true;
}























void VideoConfiguration::Trace(Visitor* visitor) const {
  TraceIfNeeded<uint32_t>::Trace(visitor, member_bitrate_);
TraceIfNeeded<V8ColorGamut>::Trace(visitor, member_color_gamut_);
TraceIfNeeded<String>::Trace(visitor, member_content_type_);
TraceIfNeeded<double>::Trace(visitor, member_framerate_);
TraceIfNeeded<V8HdrMetadataType>::Trace(visitor, member_hdr_metadata_type_);
TraceIfNeeded<uint32_t>::Trace(visitor, member_height_);
TraceIfNeeded<String>::Trace(visitor, member_scalability_mode_);
TraceIfNeeded<bool>::Trace(visitor, member_spatial_scalability_);
TraceIfNeeded<V8TransferFunction>::Trace(visitor, member_transfer_function_);
TraceIfNeeded<uint32_t>::Trace(visitor, member_width_);
bindings::DictionaryBase::Trace(visitor);
}

bool VideoConfiguration::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasBitrate()) {
  if (!ToV8Traits<IDLUnsignedLong>::ToV8(script_state, member_bitrate_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (RuntimeEnabledFeatures::MediaCapabilitiesDynamicRangeEnabled()) {
  if (hasColorGamut()) {
  if (!ToV8Traits<V8ColorGamut>::ToV8(script_state, member_color_gamut_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
if (hasContentType()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_content_type_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasFramerate()) {
  if (!ToV8Traits<IDLDouble>::ToV8(script_state, member_framerate_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (RuntimeEnabledFeatures::MediaCapabilitiesDynamicRangeEnabled()) {
  if (hasHdrMetadataType()) {
  if (!ToV8Traits<V8HdrMetadataType>::ToV8(script_state, member_hdr_metadata_type_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
if (hasHeight()) {
  if (!ToV8Traits<IDLUnsignedLong>::ToV8(script_state, member_height_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasScalabilityMode()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_scalability_mode_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasSpatialScalability()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_spatial_scalability_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (RuntimeEnabledFeatures::MediaCapabilitiesDynamicRangeEnabled()) {
  if (hasTransferFunction()) {
  if (!ToV8Traits<V8TransferFunction>::ToV8(script_state, member_transfer_function_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[8].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
if (hasWidth()) {
  if (!ToV8Traits<IDLUnsignedLong>::ToV8(script_state, member_width_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[9].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void VideoConfiguration::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "VideoConfiguration";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("bitrate");
constexpr bool is_required = true;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool fallback_presence_var;
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedLong, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), fallback_presence_var, member_bitrate_, try_block, exception_state)) {
  return;
}
constexpr bool is_optional = false;
if (RuntimeEnabledFeatures::MediaCapabilitiesDynamicRangeEnabled()) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("colorGamut");
if (!bindings::GetDictionaryMemberFromV8Object<V8ColorGamut, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_color_gamut_, member_color_gamut_, try_block, exception_state)) {
  return;
}
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("contentType");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), fallback_presence_var, member_content_type_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("framerate");
if (!bindings::GetDictionaryMemberFromV8Object<IDLDouble, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), fallback_presence_var, member_framerate_, try_block, exception_state)) {
  return;
}
if (RuntimeEnabledFeatures::MediaCapabilitiesDynamicRangeEnabled()) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("hdrMetadataType");
if (!bindings::GetDictionaryMemberFromV8Object<V8HdrMetadataType, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_hdr_metadata_type_, member_hdr_metadata_type_, try_block, exception_state)) {
  return;
}
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("height");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedLong, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), fallback_presence_var, member_height_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("scalabilityMode");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), has_scalability_mode_, member_scalability_mode_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("spatialScalability");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), has_spatial_scalability_, member_spatial_scalability_, try_block, exception_state)) {
  return;
}
if (RuntimeEnabledFeatures::MediaCapabilitiesDynamicRangeEnabled()) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("transferFunction");
if (!bindings::GetDictionaryMemberFromV8Object<V8TransferFunction, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[8].Get(isolate), has_transfer_function_, member_transfer_function_, try_block, exception_state)) {
  return;
}
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("width");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedLong, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[9].Get(isolate), fallback_presence_var, member_width_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> VideoConfiguration::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"bitrate",
"colorGamut",
"contentType",
"framerate",
"hdrMetadataType",
"height",
"scalabilityMode",
"spatialScalability",
"transferFunction",
"width",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
