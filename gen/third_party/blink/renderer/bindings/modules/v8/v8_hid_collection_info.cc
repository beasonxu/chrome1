// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_hid_collection_info.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_hid_collection_info.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_hid_report_info.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



HIDCollectionInfo* HIDCollectionInfo::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  HIDCollectionInfo* dictionary = MakeGarbageCollected<HIDCollectionInfo>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "HIDCollectionInfo";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 HIDCollectionInfo::HIDCollectionInfo() {
  
}

 HIDCollectionInfo::HIDCollectionInfo(v8::Isolate* isolate) {
  
}



HeapVector<Member<HIDCollectionInfo>> HIDCollectionInfo::getChildrenOr(const HeapVector<Member<HIDCollectionInfo>>& fallback_value) const {
  if (!hasChildren()) {
  return fallback_value;
}
return member_children_;
}

HeapVector<Member<HIDCollectionInfo>> HIDCollectionInfo::getChildrenOr(HeapVector<Member<HIDCollectionInfo>>&& fallback_value) const {
  if (!hasChildren()) {
  return std::move(fallback_value);
}
return member_children_;
}

void HIDCollectionInfo::setChildren(const HeapVector<Member<HIDCollectionInfo>>& value) {
  member_children_ = value;
has_children_ = true;
}

void HIDCollectionInfo::setChildren(HeapVector<Member<HIDCollectionInfo>>&& value) {
  member_children_ = std::move(value);
has_children_ = true;
}




HeapVector<Member<HIDReportInfo>> HIDCollectionInfo::getFeatureReportsOr(const HeapVector<Member<HIDReportInfo>>& fallback_value) const {
  if (!hasFeatureReports()) {
  return fallback_value;
}
return member_feature_reports_;
}

HeapVector<Member<HIDReportInfo>> HIDCollectionInfo::getFeatureReportsOr(HeapVector<Member<HIDReportInfo>>&& fallback_value) const {
  if (!hasFeatureReports()) {
  return std::move(fallback_value);
}
return member_feature_reports_;
}

void HIDCollectionInfo::setFeatureReports(const HeapVector<Member<HIDReportInfo>>& value) {
  member_feature_reports_ = value;
has_feature_reports_ = true;
}

void HIDCollectionInfo::setFeatureReports(HeapVector<Member<HIDReportInfo>>&& value) {
  member_feature_reports_ = std::move(value);
has_feature_reports_ = true;
}




HeapVector<Member<HIDReportInfo>> HIDCollectionInfo::getInputReportsOr(const HeapVector<Member<HIDReportInfo>>& fallback_value) const {
  if (!hasInputReports()) {
  return fallback_value;
}
return member_input_reports_;
}

HeapVector<Member<HIDReportInfo>> HIDCollectionInfo::getInputReportsOr(HeapVector<Member<HIDReportInfo>>&& fallback_value) const {
  if (!hasInputReports()) {
  return std::move(fallback_value);
}
return member_input_reports_;
}

void HIDCollectionInfo::setInputReports(const HeapVector<Member<HIDReportInfo>>& value) {
  member_input_reports_ = value;
has_input_reports_ = true;
}

void HIDCollectionInfo::setInputReports(HeapVector<Member<HIDReportInfo>>&& value) {
  member_input_reports_ = std::move(value);
has_input_reports_ = true;
}




HeapVector<Member<HIDReportInfo>> HIDCollectionInfo::getOutputReportsOr(const HeapVector<Member<HIDReportInfo>>& fallback_value) const {
  if (!hasOutputReports()) {
  return fallback_value;
}
return member_output_reports_;
}

HeapVector<Member<HIDReportInfo>> HIDCollectionInfo::getOutputReportsOr(HeapVector<Member<HIDReportInfo>>&& fallback_value) const {
  if (!hasOutputReports()) {
  return std::move(fallback_value);
}
return member_output_reports_;
}

void HIDCollectionInfo::setOutputReports(const HeapVector<Member<HIDReportInfo>>& value) {
  member_output_reports_ = value;
has_output_reports_ = true;
}

void HIDCollectionInfo::setOutputReports(HeapVector<Member<HIDReportInfo>>&& value) {
  member_output_reports_ = std::move(value);
has_output_reports_ = true;
}

























void HIDCollectionInfo::Trace(Visitor* visitor) const {
  TraceIfNeeded<HeapVector<Member<HIDCollectionInfo>>>::Trace(visitor, member_children_);
TraceIfNeeded<HeapVector<Member<HIDReportInfo>>>::Trace(visitor, member_feature_reports_);
TraceIfNeeded<HeapVector<Member<HIDReportInfo>>>::Trace(visitor, member_input_reports_);
TraceIfNeeded<HeapVector<Member<HIDReportInfo>>>::Trace(visitor, member_output_reports_);
TraceIfNeeded<uint8_t>::Trace(visitor, member_type_);
TraceIfNeeded<uint16_t>::Trace(visitor, member_usage_);
TraceIfNeeded<uint16_t>::Trace(visitor, member_usage_page_);
bindings::DictionaryBase::Trace(visitor);
}

bool HIDCollectionInfo::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasChildren()) {
  if (!ToV8Traits<IDLSequence<HIDCollectionInfo>>::ToV8(script_state, member_children_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasFeatureReports()) {
  if (!ToV8Traits<IDLSequence<HIDReportInfo>>::ToV8(script_state, member_feature_reports_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasInputReports()) {
  if (!ToV8Traits<IDLSequence<HIDReportInfo>>::ToV8(script_state, member_input_reports_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasOutputReports()) {
  if (!ToV8Traits<IDLSequence<HIDReportInfo>>::ToV8(script_state, member_output_reports_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasType()) {
  if (!ToV8Traits<IDLOctet>::ToV8(script_state, member_type_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUsage()) {
  if (!ToV8Traits<IDLUnsignedShort>::ToV8(script_state, member_usage_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasUsagePage()) {
  if (!ToV8Traits<IDLUnsignedShort>::ToV8(script_state, member_usage_page_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void HIDCollectionInfo::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "HIDCollectionInfo";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("children");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<HIDCollectionInfo>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_children_, member_children_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("featureReports");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<HIDReportInfo>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_feature_reports_, member_feature_reports_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("inputReports");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<HIDReportInfo>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_input_reports_, member_input_reports_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("outputReports");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<HIDReportInfo>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_output_reports_, member_output_reports_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("type");
if (!bindings::GetDictionaryMemberFromV8Object<IDLOctet, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_type_, member_type_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("usage");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedShort, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), has_usage_, member_usage_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("usagePage");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedShort, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), has_usage_page_, member_usage_page_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> HIDCollectionInfo::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"children",
"featureReports",
"inputReports",
"outputReports",
"type",
"usage",
"usagePage",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
