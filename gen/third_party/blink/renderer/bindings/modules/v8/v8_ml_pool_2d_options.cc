// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_ml_pool_2d_options.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



MLPool2dOptions* MLPool2dOptions::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  MLPool2dOptions* dictionary = MakeGarbageCollected<MLPool2dOptions>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "MLPool2dOptions";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 MLPool2dOptions::MLPool2dOptions() {
  
}

 MLPool2dOptions::MLPool2dOptions(v8::Isolate* isolate) {
  
}








Vector<int32_t> MLPool2dOptions::getDilationsOr(const Vector<int32_t>& fallback_value) const {
  if (!hasDilations()) {
  return fallback_value;
}
return member_dilations_;
}

Vector<int32_t> MLPool2dOptions::getDilationsOr(Vector<int32_t>&& fallback_value) const {
  if (!hasDilations()) {
  return std::move(fallback_value);
}
return member_dilations_;
}

void MLPool2dOptions::setDilations(const Vector<int32_t>& value) {
  member_dilations_ = value;
has_dilations_ = true;
}

void MLPool2dOptions::setDilations(Vector<int32_t>&& value) {
  member_dilations_ = std::move(value);
has_dilations_ = true;
}









Vector<int32_t> MLPool2dOptions::getOutputSizesOr(const Vector<int32_t>& fallback_value) const {
  if (!hasOutputSizes()) {
  return fallback_value;
}
return member_output_sizes_;
}

Vector<int32_t> MLPool2dOptions::getOutputSizesOr(Vector<int32_t>&& fallback_value) const {
  if (!hasOutputSizes()) {
  return std::move(fallback_value);
}
return member_output_sizes_;
}

void MLPool2dOptions::setOutputSizes(const Vector<int32_t>& value) {
  member_output_sizes_ = value;
has_output_sizes_ = true;
}

void MLPool2dOptions::setOutputSizes(Vector<int32_t>&& value) {
  member_output_sizes_ = std::move(value);
has_output_sizes_ = true;
}




Vector<int32_t> MLPool2dOptions::getPaddingOr(const Vector<int32_t>& fallback_value) const {
  if (!hasPadding()) {
  return fallback_value;
}
return member_padding_;
}

Vector<int32_t> MLPool2dOptions::getPaddingOr(Vector<int32_t>&& fallback_value) const {
  if (!hasPadding()) {
  return std::move(fallback_value);
}
return member_padding_;
}

void MLPool2dOptions::setPadding(const Vector<int32_t>& value) {
  member_padding_ = value;
has_padding_ = true;
}

void MLPool2dOptions::setPadding(Vector<int32_t>&& value) {
  member_padding_ = std::move(value);
has_padding_ = true;
}









Vector<int32_t> MLPool2dOptions::getStridesOr(const Vector<int32_t>& fallback_value) const {
  if (!hasStrides()) {
  return fallback_value;
}
return member_strides_;
}

Vector<int32_t> MLPool2dOptions::getStridesOr(Vector<int32_t>&& fallback_value) const {
  if (!hasStrides()) {
  return std::move(fallback_value);
}
return member_strides_;
}

void MLPool2dOptions::setStrides(const Vector<int32_t>& value) {
  member_strides_ = value;
has_strides_ = true;
}

void MLPool2dOptions::setStrides(Vector<int32_t>&& value) {
  member_strides_ = std::move(value);
has_strides_ = true;
}




Vector<int32_t> MLPool2dOptions::getWindowDimensionsOr(const Vector<int32_t>& fallback_value) const {
  if (!hasWindowDimensions()) {
  return fallback_value;
}
return member_window_dimensions_;
}

Vector<int32_t> MLPool2dOptions::getWindowDimensionsOr(Vector<int32_t>&& fallback_value) const {
  if (!hasWindowDimensions()) {
  return std::move(fallback_value);
}
return member_window_dimensions_;
}

void MLPool2dOptions::setWindowDimensions(const Vector<int32_t>& value) {
  member_window_dimensions_ = value;
has_window_dimensions_ = true;
}

void MLPool2dOptions::setWindowDimensions(Vector<int32_t>&& value) {
  member_window_dimensions_ = std::move(value);
has_window_dimensions_ = true;
}




void MLPool2dOptions::Trace(Visitor* visitor) const {
  TraceIfNeeded<V8MLAutoPad>::Trace(visitor, member_auto_pad_);
TraceIfNeeded<Vector<int32_t>>::Trace(visitor, member_dilations_);
TraceIfNeeded<V8MLInputOperandLayout>::Trace(visitor, member_layout_);
TraceIfNeeded<Vector<int32_t>>::Trace(visitor, member_output_sizes_);
TraceIfNeeded<Vector<int32_t>>::Trace(visitor, member_padding_);
TraceIfNeeded<V8MLRoundingType>::Trace(visitor, member_rounding_type_);
TraceIfNeeded<Vector<int32_t>>::Trace(visitor, member_strides_);
TraceIfNeeded<Vector<int32_t>>::Trace(visitor, member_window_dimensions_);
bindings::DictionaryBase::Trace(visitor);
}

bool MLPool2dOptions::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasAutoPad()) {
  if (!ToV8Traits<V8MLAutoPad>::ToV8(script_state, member_auto_pad_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDilations()) {
  if (!ToV8Traits<IDLSequence<IDLLong>>::ToV8(script_state, member_dilations_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasLayout()) {
  if (!ToV8Traits<V8MLInputOperandLayout>::ToV8(script_state, member_layout_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasOutputSizes()) {
  if (!ToV8Traits<IDLSequence<IDLLong>>::ToV8(script_state, member_output_sizes_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPadding()) {
  if (!ToV8Traits<IDLSequence<IDLLong>>::ToV8(script_state, member_padding_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasRoundingType()) {
  if (!ToV8Traits<V8MLRoundingType>::ToV8(script_state, member_rounding_type_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasStrides()) {
  if (!ToV8Traits<IDLSequence<IDLLong>>::ToV8(script_state, member_strides_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasWindowDimensions()) {
  if (!ToV8Traits<IDLSequence<IDLLong>>::ToV8(script_state, member_window_dimensions_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void MLPool2dOptions::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "MLPool2dOptions";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("autoPad");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool fallback_presence_var;
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<V8MLAutoPad, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), fallback_presence_var, member_auto_pad_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("dilations");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLLong>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_dilations_, member_dilations_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("layout");
if (!bindings::GetDictionaryMemberFromV8Object<V8MLInputOperandLayout, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), fallback_presence_var, member_layout_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("outputSizes");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLLong>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_output_sizes_, member_output_sizes_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("padding");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLLong>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_padding_, member_padding_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("roundingType");
if (!bindings::GetDictionaryMemberFromV8Object<V8MLRoundingType, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), fallback_presence_var, member_rounding_type_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("strides");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLLong>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), has_strides_, member_strides_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("windowDimensions");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLLong>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), has_window_dimensions_, member_window_dimensions_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> MLPool2dOptions::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"autoPad",
"dilations",
"layout",
"outputSizes",
"padding",
"roundingType",
"strides",
"windowDimensions",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
