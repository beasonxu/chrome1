// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GOOG_MEDIA_CONSTRAINTS_SET_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GOOG_MEDIA_CONSTRAINTS_SET_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT GoogMediaConstraintsSet : public bindings::DictionaryBase {
  
  public:
static GoogMediaConstraintsSet* Create() {
  return MakeGarbageCollected<GoogMediaConstraintsSet>();
}
static GoogMediaConstraintsSet* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<GoogMediaConstraintsSet>(isolate);
}
static GoogMediaConstraintsSet* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  GoogMediaConstraintsSet();
explicit  GoogMediaConstraintsSet(v8::Isolate* isolate);

bool hasDtlsSrtpKeyAgreement() const {
  return has_dtls_srtp_key_agreement_;
}
bool dtlsSrtpKeyAgreement() const {
  DCHECK(hasDtlsSrtpKeyAgreement());
return member_dtls_srtp_key_agreement_;
}
bool getDtlsSrtpKeyAgreementOr(bool fallback_value) const {
  if (!hasDtlsSrtpKeyAgreement()) {
  return fallback_value;
}
return member_dtls_srtp_key_agreement_;
}
void setDtlsSrtpKeyAgreement(bool value) {
  member_dtls_srtp_key_agreement_ = value;
has_dtls_srtp_key_agreement_ = true;
}

bool hasGoogIPv6() const {
  return has_goog_i_pv_6_;
}
bool googIPv6() const {
  DCHECK(hasGoogIPv6());
return member_goog_i_pv_6_;
}
bool getGoogIPv6Or(bool fallback_value) const {
  if (!hasGoogIPv6()) {
  return fallback_value;
}
return member_goog_i_pv_6_;
}
void setGoogIPv6(bool value) {
  member_goog_i_pv_6_ = value;
has_goog_i_pv_6_ = true;
}




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_dtls_srtp_key_agreement_ = false;
bool has_goog_i_pv_6_ = false;

bool member_dtls_srtp_key_agreement_;
bool member_goog_i_pv_6_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GOOG_MEDIA_CONSTRAINTS_SET_H_
