// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_rtc_rtp_encoding_parameters.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



RTCRtpEncodingParameters* RTCRtpEncodingParameters::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  RTCRtpEncodingParameters* dictionary = MakeGarbageCollected<RTCRtpEncodingParameters>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "RTCRtpEncodingParameters";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 RTCRtpEncodingParameters::RTCRtpEncodingParameters() {
  
}

 RTCRtpEncodingParameters::RTCRtpEncodingParameters(v8::Isolate* isolate) : RTCRtpCodingParameters(isolate) {
  
}





































String RTCRtpEncodingParameters::getScalabilityModeOr(const String& fallback_value) const {
  if (!hasScalabilityMode()) {
  return fallback_value;
}
return member_scalability_mode_;
}

String RTCRtpEncodingParameters::getScalabilityModeOr(String&& fallback_value) const {
  if (!hasScalabilityMode()) {
  return std::move(fallback_value);
}
return member_scalability_mode_;
}

void RTCRtpEncodingParameters::setScalabilityMode(const String& value) {
  member_scalability_mode_ = value;
has_scalability_mode_ = true;
}

void RTCRtpEncodingParameters::setScalabilityMode(String&& value) {
  member_scalability_mode_ = std::move(value);
has_scalability_mode_ = true;
}











void RTCRtpEncodingParameters::Trace(Visitor* visitor) const {
  TraceIfNeeded<bool>::Trace(visitor, member_active_);
TraceIfNeeded<bool>::Trace(visitor, member_adaptive_ptime_);
TraceIfNeeded<uint32_t>::Trace(visitor, member_max_bitrate_);
TraceIfNeeded<double>::Trace(visitor, member_max_framerate_);
TraceIfNeeded<V8RTCPriorityType>::Trace(visitor, member_network_priority_);
TraceIfNeeded<V8RTCPriorityType>::Trace(visitor, member_priority_);
TraceIfNeeded<String>::Trace(visitor, member_scalability_mode_);
TraceIfNeeded<double>::Trace(visitor, member_scale_resolution_down_by_);
RTCRtpCodingParameters::Trace(visitor);
}

bool RTCRtpEncodingParameters::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  if (!RTCRtpCodingParameters::FillV8ObjectWithMembers(script_state, v8_dictionary)) {
  return false;
}

v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasActive()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_active_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasAdaptivePtime()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_adaptive_ptime_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasMaxBitrate()) {
  if (!ToV8Traits<IDLUnsignedLong>::ToV8(script_state, member_max_bitrate_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasMaxFramerate()) {
  if (!ToV8Traits<IDLDouble>::ToV8(script_state, member_max_framerate_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasNetworkPriority()) {
  if (!ToV8Traits<V8RTCPriorityType>::ToV8(script_state, member_network_priority_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPriority()) {
  if (!ToV8Traits<V8RTCPriorityType>::ToV8(script_state, member_priority_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (RuntimeEnabledFeatures::RTCSvcScalabilityModeEnabled()) {
  if (hasScalabilityMode()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_scalability_mode_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
if (hasScaleResolutionDownBy()) {
  if (!ToV8Traits<IDLDouble>::ToV8(script_state, member_scale_resolution_down_by_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void RTCRtpEncodingParameters::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  RTCRtpCodingParameters::FillMembersFromV8Object(isolate, v8_dictionary, exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}

const char* const class_like_name = "RTCRtpEncodingParameters";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("active");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool fallback_presence_var;
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), fallback_presence_var, member_active_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("adaptivePtime");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), fallback_presence_var, member_adaptive_ptime_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("maxBitrate");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_max_bitrate_, member_max_bitrate_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("maxFramerate");
if (!bindings::GetDictionaryMemberFromV8Object<IDLDouble, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_max_framerate_, member_max_framerate_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("networkPriority");
if (!bindings::GetDictionaryMemberFromV8Object<V8RTCPriorityType, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), fallback_presence_var, member_network_priority_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("priority");
if (!bindings::GetDictionaryMemberFromV8Object<V8RTCPriorityType, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), fallback_presence_var, member_priority_, try_block, exception_state)) {
  return;
}
if (RuntimeEnabledFeatures::RTCSvcScalabilityModeEnabled()) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("scalabilityMode");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), has_scalability_mode_, member_scalability_mode_, try_block, exception_state)) {
  return;
}
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("scaleResolutionDownBy");
if (!bindings::GetDictionaryMemberFromV8Object<IDLDouble, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), has_scale_resolution_down_by_, member_scale_resolution_down_by_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> RTCRtpEncodingParameters::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"active",
"adaptivePtime",
"maxBitrate",
"maxFramerate",
"networkPriority",
"priority",
"scalabilityMode",
"scaleResolutionDownBy",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
