// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_WEBGL_DRAW_BUFFERS_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_WEBGL_DRAW_BUFFERS_H_

#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/v8_interface_bridge.h"

namespace blink {

class ExecutionContext;
class WebGLDrawBuffers;
struct WrapperTypeInfo;

class MODULES_EXPORT V8WebGLDrawBuffers final : public bindings::V8InterfaceBridge<V8WebGLDrawBuffers, WebGLDrawBuffers> {
  
  public:
// Constants
class Constant final {
  STATIC_ONLY(Constant);

  public:
static constexpr uint32_t kColorAttachment0Webgl = 0x8CE0;
static constexpr uint32_t kColorAttachment1Webgl = 0x8CE1;
static constexpr uint32_t kColorAttachment2Webgl = 0x8CE2;
static constexpr uint32_t kColorAttachment3Webgl = 0x8CE3;
static constexpr uint32_t kColorAttachment4Webgl = 0x8CE4;
static constexpr uint32_t kColorAttachment5Webgl = 0x8CE5;
static constexpr uint32_t kColorAttachment6Webgl = 0x8CE6;
static constexpr uint32_t kColorAttachment7Webgl = 0x8CE7;
static constexpr uint32_t kColorAttachment8Webgl = 0x8CE8;
static constexpr uint32_t kColorAttachment9Webgl = 0x8CE9;
static constexpr uint32_t kColorAttachment10Webgl = 0x8CEA;
static constexpr uint32_t kColorAttachment11Webgl = 0x8CEB;
static constexpr uint32_t kColorAttachment12Webgl = 0x8CEC;
static constexpr uint32_t kColorAttachment13Webgl = 0x8CED;
static constexpr uint32_t kColorAttachment14Webgl = 0x8CEE;
static constexpr uint32_t kColorAttachment15Webgl = 0x8CEF;
static constexpr uint32_t kDrawBuffer0Webgl = 0x8825;
static constexpr uint32_t kDrawBuffer1Webgl = 0x8826;
static constexpr uint32_t kDrawBuffer2Webgl = 0x8827;
static constexpr uint32_t kDrawBuffer3Webgl = 0x8828;
static constexpr uint32_t kDrawBuffer4Webgl = 0x8829;
static constexpr uint32_t kDrawBuffer5Webgl = 0x882A;
static constexpr uint32_t kDrawBuffer6Webgl = 0x882B;
static constexpr uint32_t kDrawBuffer7Webgl = 0x882C;
static constexpr uint32_t kDrawBuffer8Webgl = 0x882D;
static constexpr uint32_t kDrawBuffer9Webgl = 0x882E;
static constexpr uint32_t kDrawBuffer10Webgl = 0x882F;
static constexpr uint32_t kDrawBuffer11Webgl = 0x8830;
static constexpr uint32_t kDrawBuffer12Webgl = 0x8831;
static constexpr uint32_t kDrawBuffer13Webgl = 0x8832;
static constexpr uint32_t kDrawBuffer14Webgl = 0x8833;
static constexpr uint32_t kDrawBuffer15Webgl = 0x8834;
static constexpr uint32_t kMaxColorAttachmentsWebgl = 0x8CDF;
static constexpr uint32_t kMaxDrawBuffersWebgl = 0x8824;

  
  
  
};

static bool IsExposed(ExecutionContext* execution_context);

static constexpr const WrapperTypeInfo* GetWrapperTypeInfo() {
  return &wrapper_type_info_;
}

static void InstallInterfaceTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Template> interface_template);
static void InstallUnconditionalProperties(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Template> instance_template, v8::Local<v8::Template> prototype_template, v8::Local<v8::Template> interface_template);
static void InstallContextDependentProperties(v8::Local<v8::Context> context, const DOMWrapperWorld& world, v8::Local<v8::Object> instance_object, v8::Local<v8::Object> prototype_object, v8::Local<v8::Object> interface_object, v8::Local<v8::Template> interface_template, FeatureSelector feature_selector);


  
  private:
static const WrapperTypeInfo wrapper_type_info_;


  friend class WebGLDrawBuffers;
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_WEBGL_DRAW_BUFFERS_H_
