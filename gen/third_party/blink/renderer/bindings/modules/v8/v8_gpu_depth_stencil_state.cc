// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_depth_stencil_state.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_stencil_face_state.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



GPUDepthStencilState* GPUDepthStencilState::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  GPUDepthStencilState* dictionary = MakeGarbageCollected<GPUDepthStencilState>(isolate);
if (!v8_value->IsObject()) {
  const char* const class_like_name = "GPUDepthStencilState";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 GPUDepthStencilState::GPUDepthStencilState() : member_stencil_back_(GPUStencilFaceState::Create()), member_stencil_front_(GPUStencilFaceState::Create()) {
  
}

 GPUDepthStencilState::GPUDepthStencilState(v8::Isolate* isolate) : member_stencil_back_(GPUStencilFaceState::Create()), member_stencil_front_(GPUStencilFaceState::Create()) {
  
}





















































void GPUDepthStencilState::Trace(Visitor* visitor) const {
  TraceIfNeeded<int32_t>::Trace(visitor, member_depth_bias_);
TraceIfNeeded<float>::Trace(visitor, member_depth_bias_clamp_);
TraceIfNeeded<float>::Trace(visitor, member_depth_bias_slope_scale_);
TraceIfNeeded<V8GPUCompareFunction>::Trace(visitor, member_depth_compare_);
TraceIfNeeded<bool>::Trace(visitor, member_depth_write_enabled_);
TraceIfNeeded<V8GPUTextureFormat>::Trace(visitor, member_format_);
TraceIfNeeded<Member<GPUStencilFaceState>>::Trace(visitor, member_stencil_back_);
TraceIfNeeded<Member<GPUStencilFaceState>>::Trace(visitor, member_stencil_front_);
TraceIfNeeded<uint32_t>::Trace(visitor, member_stencil_read_mask_);
TraceIfNeeded<uint32_t>::Trace(visitor, member_stencil_write_mask_);
bindings::DictionaryBase::Trace(visitor);
}

bool GPUDepthStencilState::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasDepthBias()) {
  if (!ToV8Traits<IDLLongEnforceRange>::ToV8(script_state, member_depth_bias_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDepthBiasClamp()) {
  if (!ToV8Traits<IDLFloat>::ToV8(script_state, member_depth_bias_clamp_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDepthBiasSlopeScale()) {
  if (!ToV8Traits<IDLFloat>::ToV8(script_state, member_depth_bias_slope_scale_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDepthCompare()) {
  if (!ToV8Traits<V8GPUCompareFunction>::ToV8(script_state, member_depth_compare_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDepthWriteEnabled()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_depth_write_enabled_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasFormat()) {
  if (!ToV8Traits<V8GPUTextureFormat>::ToV8(script_state, member_format_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasStencilBack()) {
  if (!ToV8Traits<GPUStencilFaceState>::ToV8(script_state, member_stencil_back_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasStencilFront()) {
  if (!ToV8Traits<GPUStencilFaceState>::ToV8(script_state, member_stencil_front_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasStencilReadMask()) {
  if (!ToV8Traits<IDLUnsignedLongEnforceRange>::ToV8(script_state, member_stencil_read_mask_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[8].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasStencilWriteMask()) {
  if (!ToV8Traits<IDLUnsignedLongEnforceRange>::ToV8(script_state, member_stencil_write_mask_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[9].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void GPUDepthStencilState::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "GPUDepthStencilState";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("depthBias");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool fallback_presence_var;
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLLongEnforceRange, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), fallback_presence_var, member_depth_bias_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("depthBiasClamp");
if (!bindings::GetDictionaryMemberFromV8Object<IDLFloat, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), fallback_presence_var, member_depth_bias_clamp_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("depthBiasSlopeScale");
if (!bindings::GetDictionaryMemberFromV8Object<IDLFloat, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), fallback_presence_var, member_depth_bias_slope_scale_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("depthCompare");
if (!bindings::GetDictionaryMemberFromV8Object<V8GPUCompareFunction, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), fallback_presence_var, member_depth_compare_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("depthWriteEnabled");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), fallback_presence_var, member_depth_write_enabled_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("format");
constexpr bool is_required = true;
if (!bindings::GetDictionaryMemberFromV8Object<V8GPUTextureFormat, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), fallback_presence_var, member_format_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("stencilBack");
if (!bindings::GetDictionaryMemberFromV8Object<GPUStencilFaceState, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), fallback_presence_var, member_stencil_back_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("stencilFront");
if (!bindings::GetDictionaryMemberFromV8Object<GPUStencilFaceState, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), fallback_presence_var, member_stencil_front_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("stencilReadMask");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedLongEnforceRange, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[8].Get(isolate), fallback_presence_var, member_stencil_read_mask_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("stencilWriteMask");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedLongEnforceRange, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[9].Get(isolate), fallback_presence_var, member_stencil_write_mask_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> GPUDepthStencilState::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"depthBias",
"depthBiasClamp",
"depthBiasSlopeScale",
"depthCompare",
"depthWriteEnabled",
"format",
"stencilBack",
"stencilFront",
"stencilReadMask",
"stencilWriteMask",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
