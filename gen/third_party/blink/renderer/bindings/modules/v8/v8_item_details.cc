// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_item_details.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_payment_currency_amount.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



ItemDetails* ItemDetails::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  ItemDetails* dictionary = MakeGarbageCollected<ItemDetails>(isolate);
if (!v8_value->IsObject()) {
  const char* const class_like_name = "ItemDetails";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 ItemDetails::ItemDetails() {
  
}

 ItemDetails::ItemDetails(v8::Isolate* isolate) {
  
}



String ItemDetails::getDescriptionOr(const String& fallback_value) const {
  if (!hasDescription()) {
  return fallback_value;
}
return member_description_;
}

String ItemDetails::getDescriptionOr(String&& fallback_value) const {
  if (!hasDescription()) {
  return std::move(fallback_value);
}
return member_description_;
}

void ItemDetails::setDescription(const String& value) {
  member_description_ = value;
has_description_ = true;
}

void ItemDetails::setDescription(String&& value) {
  member_description_ = std::move(value);
has_description_ = true;
}




String ItemDetails::getFreeTrialPeriodOr(const String& fallback_value) const {
  if (!hasFreeTrialPeriod()) {
  return fallback_value;
}
return member_free_trial_period_;
}

String ItemDetails::getFreeTrialPeriodOr(String&& fallback_value) const {
  if (!hasFreeTrialPeriod()) {
  return std::move(fallback_value);
}
return member_free_trial_period_;
}

void ItemDetails::setFreeTrialPeriod(const String& value) {
  member_free_trial_period_ = value;
has_free_trial_period_ = true;
}

void ItemDetails::setFreeTrialPeriod(String&& value) {
  member_free_trial_period_ = std::move(value);
has_free_trial_period_ = true;
}




Vector<String> ItemDetails::getIconURLsOr(const Vector<String>& fallback_value) const {
  if (!hasIconURLs()) {
  return fallback_value;
}
return member_icon_urls_;
}

Vector<String> ItemDetails::getIconURLsOr(Vector<String>&& fallback_value) const {
  if (!hasIconURLs()) {
  return std::move(fallback_value);
}
return member_icon_urls_;
}

void ItemDetails::setIconURLs(const Vector<String>& value) {
  member_icon_urls_ = value;
has_icon_urls_ = true;
}

void ItemDetails::setIconURLs(Vector<String>&& value) {
  member_icon_urls_ = std::move(value);
has_icon_urls_ = true;
}


















String ItemDetails::getIntroductoryPricePeriodOr(const String& fallback_value) const {
  if (!hasIntroductoryPricePeriod()) {
  return fallback_value;
}
return member_introductory_price_period_;
}

String ItemDetails::getIntroductoryPricePeriodOr(String&& fallback_value) const {
  if (!hasIntroductoryPricePeriod()) {
  return std::move(fallback_value);
}
return member_introductory_price_period_;
}

void ItemDetails::setIntroductoryPricePeriod(const String& value) {
  member_introductory_price_period_ = value;
has_introductory_price_period_ = true;
}

void ItemDetails::setIntroductoryPricePeriod(String&& value) {
  member_introductory_price_period_ = std::move(value);
has_introductory_price_period_ = true;
}




void ItemDetails::setItemId(const String& value) {
  member_item_id_ = value;
}

void ItemDetails::setItemId(String&& value) {
  member_item_id_ = std::move(value);
}









String ItemDetails::getSubscriptionPeriodOr(const String& fallback_value) const {
  if (!hasSubscriptionPeriod()) {
  return fallback_value;
}
return member_subscription_period_;
}

String ItemDetails::getSubscriptionPeriodOr(String&& fallback_value) const {
  if (!hasSubscriptionPeriod()) {
  return std::move(fallback_value);
}
return member_subscription_period_;
}

void ItemDetails::setSubscriptionPeriod(const String& value) {
  member_subscription_period_ = value;
has_subscription_period_ = true;
}

void ItemDetails::setSubscriptionPeriod(String&& value) {
  member_subscription_period_ = std::move(value);
has_subscription_period_ = true;
}




void ItemDetails::setTitle(const String& value) {
  member_title_ = value;
}

void ItemDetails::setTitle(String&& value) {
  member_title_ = std::move(value);
}











void ItemDetails::Trace(Visitor* visitor) const {
  TraceIfNeeded<String>::Trace(visitor, member_description_);
TraceIfNeeded<String>::Trace(visitor, member_free_trial_period_);
TraceIfNeeded<Vector<String>>::Trace(visitor, member_icon_urls_);
TraceIfNeeded<Member<PaymentCurrencyAmount>>::Trace(visitor, member_introductory_price_);
TraceIfNeeded<uint64_t>::Trace(visitor, member_introductory_price_cycles_);
TraceIfNeeded<String>::Trace(visitor, member_introductory_price_period_);
TraceIfNeeded<String>::Trace(visitor, member_item_id_);
TraceIfNeeded<Member<PaymentCurrencyAmount>>::Trace(visitor, member_price_);
TraceIfNeeded<String>::Trace(visitor, member_subscription_period_);
TraceIfNeeded<String>::Trace(visitor, member_title_);
TraceIfNeeded<V8ItemType>::Trace(visitor, member_type_);
bindings::DictionaryBase::Trace(visitor);
}

bool ItemDetails::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasDescription()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_description_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasFreeTrialPeriod()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_free_trial_period_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (RuntimeEnabledFeatures::DigitalGoodsV2_1Enabled()) {
  if (hasIconURLs()) {
  if (!ToV8Traits<IDLSequence<IDLString>>::ToV8(script_state, member_icon_urls_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
if (hasIntroductoryPrice()) {
  if (!ToV8Traits<PaymentCurrencyAmount>::ToV8(script_state, member_introductory_price_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (RuntimeEnabledFeatures::DigitalGoodsV2_1Enabled()) {
  if (hasIntroductoryPriceCycles()) {
  if (!ToV8Traits<IDLUnsignedLongLongEnforceRange>::ToV8(script_state, member_introductory_price_cycles_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
if (hasIntroductoryPricePeriod()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_introductory_price_period_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasItemId()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_item_id_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPrice()) {
  if (!ToV8Traits<PaymentCurrencyAmount>::ToV8(script_state, member_price_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasSubscriptionPeriod()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_subscription_period_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[8].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasTitle()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_title_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[9].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (RuntimeEnabledFeatures::DigitalGoodsV2_1Enabled()) {
  if (hasType()) {
  if (!ToV8Traits<V8ItemType>::ToV8(script_state, member_type_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[10].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
return true;
}

void ItemDetails::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "ItemDetails";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("description");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_description_, member_description_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("freeTrialPeriod");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_free_trial_period_, member_free_trial_period_, try_block, exception_state)) {
  return;
}
if (RuntimeEnabledFeatures::DigitalGoodsV2_1Enabled()) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("iconURLs");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLString>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_icon_urls_, member_icon_urls_, try_block, exception_state)) {
  return;
}
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("introductoryPrice");
if (!bindings::GetDictionaryMemberFromV8Object<PaymentCurrencyAmount, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_introductory_price_, member_introductory_price_, try_block, exception_state)) {
  return;
}
if (RuntimeEnabledFeatures::DigitalGoodsV2_1Enabled()) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("introductoryPriceCycles");
if (!bindings::GetDictionaryMemberFromV8Object<IDLUnsignedLongLongEnforceRange, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_introductory_price_cycles_, member_introductory_price_cycles_, try_block, exception_state)) {
  return;
}
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("introductoryPricePeriod");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), has_introductory_price_period_, member_introductory_price_period_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("itemId");
constexpr bool is_required = true;
bool fallback_presence_var;
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), fallback_presence_var, member_item_id_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("price");
if (!bindings::GetDictionaryMemberFromV8Object<PaymentCurrencyAmount, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), fallback_presence_var, member_price_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("subscriptionPeriod");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[8].Get(isolate), has_subscription_period_, member_subscription_period_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("title");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[9].Get(isolate), fallback_presence_var, member_title_, try_block, exception_state)) {
  return;
}
if (RuntimeEnabledFeatures::DigitalGoodsV2_1Enabled()) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("type");
if (!bindings::GetDictionaryMemberFromV8Object<V8ItemType, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[10].Get(isolate), has_type_, member_type_, try_block, exception_state)) {
  return;
}
}
}

const base::span<const v8::Eternal<v8::Name>> ItemDetails::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"description",
"freeTrialPeriod",
"iconURLs",
"introductoryPrice",
"introductoryPriceCycles",
"introductoryPricePeriod",
"itemId",
"price",
"subscriptionPeriod",
"title",
"type",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
