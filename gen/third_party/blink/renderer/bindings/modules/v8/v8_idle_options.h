// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_IDLE_OPTIONS_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_IDLE_OPTIONS_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/member.h"

namespace blink {

class AbortSignal;
class ExceptionState;

class MODULES_EXPORT IdleOptions : public bindings::DictionaryBase {
  
  public:
static IdleOptions* Create() {
  return MakeGarbageCollected<IdleOptions>();
}
static IdleOptions* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<IdleOptions>(isolate);
}
static IdleOptions* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  IdleOptions();
explicit  IdleOptions(v8::Isolate* isolate);

bool hasSignal() const {
  return has_signal_;
}
AbortSignal* signal() const {
  DCHECK(hasSignal());
return member_signal_;
}
AbortSignal* getSignalOr(AbortSignal* fallback_value) const {
  if (!hasSignal()) {
  return fallback_value;
}
return member_signal_;
}
void setSignal(AbortSignal* value) {
  member_signal_ = value;
has_signal_ = true;
DCHECK(member_signal_);
}

bool hasThreshold() const {
  return has_threshold_;
}
uint32_t threshold() const {
  DCHECK(hasThreshold());
return member_threshold_;
}
uint32_t getThresholdOr(uint32_t fallback_value) const {
  if (!hasThreshold()) {
  return fallback_value;
}
return member_threshold_;
}
void setThreshold(uint32_t value) {
  member_threshold_ = value;
has_threshold_ = true;
}




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_signal_ = false;
bool has_threshold_ = false;

Member<AbortSignal> member_signal_;
uint32_t member_threshold_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_IDLE_OPTIONS_H_
