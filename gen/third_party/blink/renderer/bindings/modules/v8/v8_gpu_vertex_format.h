// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GPU_VERTEX_FORMAT_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GPU_VERTEX_FORMAT_H_

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/enumeration_base.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT V8GPUVertexFormat final : public bindings::EnumerationBase {
  
  public:
enum class Enum : enum_int_t {
kUint8X2, kUint8X4, kSint8X2, kSint8X4, kUnorm8X2, kUnorm8X4, kSnorm8X2, kSnorm8X4, kUint16X2, kUint16X4, kSint16X2, kSint16X4, kUnorm16X2, kUnorm16X4, kSnorm16X2, kSnorm16X4, kFloat16X2, kFloat16X4, kFloat32, kFloat32X2, kFloat32X3, kFloat32X4, kUint32, kUint32X2, kUint32X3, kUint32X4, kSint32, kSint32X2, kSint32X3, kSint32X4
};
static constexpr size_t kEnumSize = 30;

static V8GPUVertexFormat Create(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exception_state);
static absl::optional<V8GPUVertexFormat> Create(const String& value);

explicit constexpr  V8GPUVertexFormat(Enum value) : bindings::EnumerationBase(static_cast<enum_int_t>(value), string_table_[static_cast<enum_int_t>(value)]) {
  
}
constexpr  V8GPUVertexFormat(const V8GPUVertexFormat&) = default;
constexpr  V8GPUVertexFormat(V8GPUVertexFormat&&) = default;
 ~V8GPUVertexFormat() = default;

V8GPUVertexFormat& operator=(const V8GPUVertexFormat&) = default;
V8GPUVertexFormat& operator=(V8GPUVertexFormat&&) = default;
V8GPUVertexFormat& operator=(const String&);

Enum AsEnum() const {
  return static_cast<Enum>(GetEnumValue());
}


  
  private:
static const char* const string_table_[];

constexpr  V8GPUVertexFormat() = default;


  
};

inline bool operator==(const V8GPUVertexFormat& lhs, V8GPUVertexFormat::Enum rhs) {
  return lhs.AsEnum() == rhs;
}

inline bool operator==(V8GPUVertexFormat::Enum lhs, const V8GPUVertexFormat& rhs) {
  return lhs == rhs.AsEnum();
}


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GPU_VERTEX_FORMAT_H_
