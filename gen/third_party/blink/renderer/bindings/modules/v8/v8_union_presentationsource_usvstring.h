// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_UNION_PRESENTATIONSOURCE_USVSTRING_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_UNION_PRESENTATIONSOURCE_USVSTRING_H_

#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/union_base.h"
#include "third_party/blink/renderer/platform/heap/member.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

namespace blink {

class ExceptionState;
class PresentationSource;

class MODULES_EXPORT V8UnionPresentationSourceOrUSVString final : public bindings::UnionBase {
  
  public:
// The type of the content value of this IDL union.
enum class ContentType {
kPresentationSource, kUSVString
};

static V8UnionPresentationSourceOrUSVString* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  V8UnionPresentationSourceOrUSVString(PresentationSource* value) : content_type_(ContentType::kPresentationSource), member_presentation_source_(value) {
  DCHECK(value);
}
explicit  V8UnionPresentationSourceOrUSVString(const String& value);
explicit  V8UnionPresentationSourceOrUSVString(String&& value);

// Returns the type of the content value.
ContentType GetContentType() const {
  return content_type_;
}

bool IsPresentationSource() const {
  return content_type_ == ContentType::kPresentationSource;
}
PresentationSource* GetAsPresentationSource() const {
  DCHECK_EQ(content_type_, ContentType::kPresentationSource);
return member_presentation_source_;
}
void Set(PresentationSource* value) {
  DCHECK(value);
Clear();
member_presentation_source_ = value;
content_type_ = ContentType::kPresentationSource;
}

bool IsUSVString() const {
  return content_type_ == ContentType::kUSVString;
}
const String& GetAsUSVString() const {
  DCHECK_EQ(content_type_, ContentType::kUSVString);
return member_usv_string_;
}
void Set(const String& value);
void Set(String&& value);


v8::MaybeLocal<v8::Value> ToV8Value(ScriptState* script_state) const override;

void Trace(Visitor* visitor) const override;


  
  private:
void Clear();

static constexpr const char* UnionNameInIDL() {
  return "(PresentationSource or USVString)";
}

ContentType content_type_;

Member<PresentationSource> member_presentation_source_;
String member_usv_string_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_UNION_PRESENTATIONSOURCE_USVSTRING_H_
