// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_multi_draw_instanced_base_vertex_base_instance.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_set_return_value_for_core.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_int32arrayallowshared_longsequence.h"
#include "third_party/blink/renderer/bindings/core/v8/v8_union_uint32arrayallowshared_unsignedlongsequence.h"
#include "third_party/blink/renderer/modules/webgl/webgl_multi_draw_instanced_base_vertex_base_instance.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/idl_member_installer.h"
#include "third_party/blink/renderer/platform/bindings/runtime_call_stats.h"
#include "third_party/blink/renderer/platform/bindings/v8_binding.h"
#include "third_party/blink/renderer/platform/bindings/wrapper_type_info.h"

namespace blink {



bool V8WebGLMultiDrawInstancedBaseVertexBaseInstance::IsExposed(ExecutionContext* execution_context) {
  return false;
}

// Construction of WrapperTypeInfo may require non-trivial initialization due
// to cross-component address resolution in order to load the pointer to the
// parent interface's WrapperTypeInfo.  We ignore this issue because the issue
// happens only on component builds and the official release builds
// (statically-linked builds) are never affected by this issue.
#if defined(COMPONENT_BUILD) && defined(WIN32) && defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif

const WrapperTypeInfo V8WebGLMultiDrawInstancedBaseVertexBaseInstance::wrapper_type_info_{
    gin::kEmbedderBlink,
    V8WebGLMultiDrawInstancedBaseVertexBaseInstance::InstallInterfaceTemplate,
    V8WebGLMultiDrawInstancedBaseVertexBaseInstance::InstallContextDependentProperties,
    "WebGLMultiDrawInstancedBaseVertexBaseInstance",
    nullptr,
    WrapperTypeInfo::kWrapperTypeObjectPrototype,
    WrapperTypeInfo::kObjectClassId,
    WrapperTypeInfo::kNotInheritFromActiveScriptWrappable,
    WrapperTypeInfo::kIdlInterface,
};

#if defined(COMPONENT_BUILD) && defined(WIN32) && defined(__clang__)
#pragma clang diagnostic pop
#endif

const WrapperTypeInfo& WebGLMultiDrawInstancedBaseVertexBaseInstance::wrapper_type_info_ =
    V8WebGLMultiDrawInstancedBaseVertexBaseInstance::wrapper_type_info_;

// non-[ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, WebGLMultiDrawInstancedBaseVertexBaseInstance>::value,
    "WebGLMultiDrawInstancedBaseVertexBaseInstance inherits from ActiveScriptWrappable<> without "
    "[ActiveScriptWrappable] extended attribute.");
static_assert(
    std::is_same<decltype(&WebGLMultiDrawInstancedBaseVertexBaseInstance::HasPendingActivity),
                 decltype(&ScriptWrappable::HasPendingActivity)>::value,
    "WebGLMultiDrawInstancedBaseVertexBaseInstance is overriding hasPendingActivity() without "
    "[ActiveScriptWrappable] extended attribute.");

namespace  {

namespace v8_webgl_multi_draw_instanced_base_vertex_base_instance {

void MultiDrawArraysInstancedBaseInstanceWEBGLOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_WebGLMultiDrawInstancedBaseVertexBaseInstance_multiDrawArraysInstancedBaseInstanceWEBGL");
BLINK_BINDINGS_TRACE_EVENT("WebGLMultiDrawInstancedBaseVertexBaseInstance.multiDrawArraysInstancedBaseInstanceWEBGL");




v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "WebGLMultiDrawInstancedBaseVertexBaseInstance";
const char* const property_name = "multiDrawArraysInstancedBaseInstanceWEBGL";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 10)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(10, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
WebGLMultiDrawInstancedBaseVertexBaseInstance* blink_receiver = V8WebGLMultiDrawInstancedBaseVertexBaseInstance::ToWrappableUnsafe(v8_receiver);
auto&& arg1_mode = NativeValueTraits<IDLUnsignedLong>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_firsts_list = NativeValueTraits<V8UnionInt32ArrayAllowSharedOrLongSequence>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_firsts_offset = NativeValueTraits<IDLUnsignedLong>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_counts_list = NativeValueTraits<V8UnionInt32ArrayAllowSharedOrLongSequence>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg5_counts_offset = NativeValueTraits<IDLUnsignedLong>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg6_instance_counts_list = NativeValueTraits<V8UnionInt32ArrayAllowSharedOrLongSequence>::ArgumentValue(isolate, 5, info[5], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg7_instance_counts_offset = NativeValueTraits<IDLUnsignedLong>::ArgumentValue(isolate, 6, info[6], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg8_base_instances_list = NativeValueTraits<V8UnionUint32ArrayAllowSharedOrUnsignedLongSequence>::ArgumentValue(isolate, 7, info[7], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg9_base_instances_offset = NativeValueTraits<IDLUnsignedLong>::ArgumentValue(isolate, 8, info[8], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg10_drawcount = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 9, info[9], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->multiDrawArraysInstancedBaseInstanceWEBGL(arg1_mode, arg2_firsts_list, arg3_firsts_offset, arg4_counts_list, arg5_counts_offset, arg6_instance_counts_list, arg7_instance_counts_offset, arg8_base_instances_list, arg9_base_instances_offset, arg10_drawcount);

}

void MultiDrawElementsInstancedBaseVertexBaseInstanceWEBGLOperationCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), "Blink_WebGLMultiDrawInstancedBaseVertexBaseInstance_multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL");
BLINK_BINDINGS_TRACE_EVENT("WebGLMultiDrawInstancedBaseVertexBaseInstance.multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL");




v8::Isolate* isolate = info.GetIsolate();
const ExceptionState::ContextType exception_state_context_type = ExceptionContext::Context::kOperationInvoke;
const char* const class_like_name = "WebGLMultiDrawInstancedBaseVertexBaseInstance";
const char* const property_name = "multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL";
ExceptionState exception_state(isolate, exception_state_context_type, class_like_name, property_name);
if (UNLIKELY(info.Length() < 13)) {
  exception_state.ThrowTypeError(ExceptionMessages::NotEnoughArguments(13, info.Length()));
return;
}



v8::Local<v8::Object> v8_receiver = info.This();
WebGLMultiDrawInstancedBaseVertexBaseInstance* blink_receiver = V8WebGLMultiDrawInstancedBaseVertexBaseInstance::ToWrappableUnsafe(v8_receiver);
auto&& arg1_mode = NativeValueTraits<IDLUnsignedLong>::ArgumentValue(isolate, 0, info[0], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg2_counts_list = NativeValueTraits<V8UnionInt32ArrayAllowSharedOrLongSequence>::ArgumentValue(isolate, 1, info[1], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg3_counts_offset = NativeValueTraits<IDLUnsignedLong>::ArgumentValue(isolate, 2, info[2], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg4_type = NativeValueTraits<IDLUnsignedLong>::ArgumentValue(isolate, 3, info[3], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg5_offsets_list = NativeValueTraits<V8UnionInt32ArrayAllowSharedOrLongSequence>::ArgumentValue(isolate, 4, info[4], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg6_offsets_offset = NativeValueTraits<IDLUnsignedLong>::ArgumentValue(isolate, 5, info[5], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg7_instance_counts_list = NativeValueTraits<V8UnionInt32ArrayAllowSharedOrLongSequence>::ArgumentValue(isolate, 6, info[6], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg8_instance_counts_offset = NativeValueTraits<IDLUnsignedLong>::ArgumentValue(isolate, 7, info[7], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg9_base_vertices_list = NativeValueTraits<V8UnionInt32ArrayAllowSharedOrLongSequence>::ArgumentValue(isolate, 8, info[8], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg10_base_vertices_offset = NativeValueTraits<IDLUnsignedLong>::ArgumentValue(isolate, 9, info[9], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg11_base_instances_list = NativeValueTraits<V8UnionUint32ArrayAllowSharedOrUnsignedLongSequence>::ArgumentValue(isolate, 10, info[10], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg12_base_instances_offset = NativeValueTraits<IDLUnsignedLong>::ArgumentValue(isolate, 11, info[11], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
auto&& arg13_drawcount = NativeValueTraits<IDLLong>::ArgumentValue(isolate, 12, info[12], exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return;
}
blink_receiver->multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL(arg1_mode, arg2_counts_list, arg3_counts_offset, arg4_type, arg5_offsets_list, arg6_offsets_offset, arg7_instance_counts_list, arg8_instance_counts_offset, arg9_base_vertices_list, arg10_base_vertices_offset, arg11_base_instances_list, arg12_base_instances_offset, arg13_drawcount);

}


}  // namespace v8_webgl_multi_draw_instanced_base_vertex_base_instance

using namespace v8_webgl_multi_draw_instanced_base_vertex_base_instance;

}  // namespace 

void V8WebGLMultiDrawInstancedBaseVertexBaseInstance::InstallInterfaceTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Template> interface_template) {
  const WrapperTypeInfo* const wrapper_type_info = V8WebGLMultiDrawInstancedBaseVertexBaseInstance::GetWrapperTypeInfo();
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::ObjectTemplate> instance_object_template = interface_function_template->InstanceTemplate();
v8::Local<v8::ObjectTemplate> prototype_object_template = interface_function_template->PrototypeTemplate();
v8::Local<v8::FunctionTemplate> parent_interface_template;
bindings::SetupIDLInterfaceTemplate(isolate, wrapper_type_info, instance_object_template, prototype_object_template, interface_function_template, parent_interface_template);








v8::Local<v8::Template> instance_template = instance_object_template;
v8::Local<v8::Template> prototype_template = prototype_object_template;
InstallUnconditionalProperties(isolate, world, instance_template, prototype_template, interface_template);
}

void V8WebGLMultiDrawInstancedBaseVertexBaseInstance::InstallUnconditionalProperties(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Template> instance_template, v8::Local<v8::Template> prototype_template, v8::Local<v8::Template> interface_template) {
  using bindings::IDLMemberInstaller;





{
  static const IDLMemberInstaller::OperationConfig kOperationTable[] = {
{"multiDrawArraysInstancedBaseInstanceWEBGL", MultiDrawArraysInstancedBaseInstanceWEBGLOperationCallback, 10, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
{"multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL", MultiDrawElementsInstancedBaseVertexBaseInstanceWEBGLOperationCallback, 13, unsigned(v8::None), unsigned(IDLMemberInstaller::FlagLocation::kPrototype), unsigned(IDLMemberInstaller::FlagWorld::kAllWorlds), unsigned(IDLMemberInstaller::FlagReceiverCheck::kCheck), unsigned(IDLMemberInstaller::FlagCrossOriginCheck::kCheck), unsigned(v8::SideEffectType::kHasSideEffect)}, 
};
v8::Local<v8::FunctionTemplate> interface_function_template = interface_template.As<v8::FunctionTemplate>();
v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interface_function_template);
IDLMemberInstaller::InstallOperations(isolate, world, instance_template, prototype_template, interface_template, signature, kOperationTable);
}



}


void V8WebGLMultiDrawInstancedBaseVertexBaseInstance::InstallContextDependentProperties(v8::Local<v8::Context> context, const DOMWrapperWorld& world, v8::Local<v8::Object> instance_object, v8::Local<v8::Object> prototype_object, v8::Local<v8::Object> interface_object, v8::Local<v8::Template> interface_template, FeatureSelector feature_selector) {
  using bindings::IDLMemberInstaller;

if (feature_selector.IsAll()) {
  v8::Isolate* isolate = context->GetIsolate();
// [LegacyNoInterfaceObject]
// 3.7.3. Interface prototype object
// https://webidl.spec.whatwg.org/#interface-prototype-object
// step 13. If the [LegacyNoInterfaceObject] extended attribute was not
//   specified on interface, then:
//
// V8 defines "constructor" property on the prototype object by default.
prototype_object->Delete(
    context, V8AtomicString(isolate, "constructor")).ToChecked();

}







}


}  // namespace blink
