// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GPU_DEPTH_STENCIL_STATE_DESCRIPTOR_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GPU_DEPTH_STENCIL_STATE_DESCRIPTOR_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_compare_function.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_texture_format.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/member.h"

namespace blink {

class ExceptionState;
class GPUStencilFaceState;

class MODULES_EXPORT GPUDepthStencilStateDescriptor : public bindings::DictionaryBase {
  
  public:
static GPUDepthStencilStateDescriptor* Create() {
  return MakeGarbageCollected<GPUDepthStencilStateDescriptor>();
}
static GPUDepthStencilStateDescriptor* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<GPUDepthStencilStateDescriptor>(isolate);
}
static GPUDepthStencilStateDescriptor* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  GPUDepthStencilStateDescriptor();
explicit  GPUDepthStencilStateDescriptor(v8::Isolate* isolate);

bool hasDepthCompare() const {
  return true;
}
V8GPUCompareFunction depthCompare() const {
  return member_depth_compare_;
}
void setDepthCompare(V8GPUCompareFunction value) {
  member_depth_compare_ = value;
}
void setDepthCompare(V8GPUCompareFunction::Enum value) {
  member_depth_compare_ = V8GPUCompareFunction(value);
}

bool hasDepthWriteEnabled() const {
  return true;
}
bool depthWriteEnabled() const {
  return member_depth_write_enabled_;
}
void setDepthWriteEnabled(bool value) {
  member_depth_write_enabled_ = value;
}

bool hasFormat() const {
  return true;
}
V8GPUTextureFormat format() const {
  return member_format_;
}
void setFormat(V8GPUTextureFormat value) {
  member_format_ = value;
}
void setFormat(V8GPUTextureFormat::Enum value) {
  member_format_ = V8GPUTextureFormat(value);
}

bool hasStencilBack() const {
  return true;
}
GPUStencilFaceState* stencilBack() const {
  return member_stencil_back_;
}
void setStencilBack(GPUStencilFaceState* value) {
  member_stencil_back_ = value;
DCHECK(member_stencil_back_);
}

bool hasStencilFront() const {
  return true;
}
GPUStencilFaceState* stencilFront() const {
  return member_stencil_front_;
}
void setStencilFront(GPUStencilFaceState* value) {
  member_stencil_front_ = value;
DCHECK(member_stencil_front_);
}

bool hasStencilReadMask() const {
  return true;
}
uint32_t stencilReadMask() const {
  return member_stencil_read_mask_;
}
void setStencilReadMask(uint32_t value) {
  member_stencil_read_mask_ = value;
}

bool hasStencilWriteMask() const {
  return true;
}
uint32_t stencilWriteMask() const {
  return member_stencil_write_mask_;
}
void setStencilWriteMask(uint32_t value) {
  member_stencil_write_mask_ = value;
}


// Obsolete accessor functions
void setDepthCompare(const String& value) {
  member_depth_compare_ = V8GPUCompareFunction::Create(value).value();
}
void setFormat(const String& value) {
  member_format_ = V8GPUTextureFormat::Create(value).value();
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);



V8GPUCompareFunction member_depth_compare_{V8GPUCompareFunction::Enum::kAlways};
bool member_depth_write_enabled_{false};
V8GPUTextureFormat member_format_{static_cast<V8GPUTextureFormat::Enum>(0)};
Member<GPUStencilFaceState> member_stencil_back_;
Member<GPUStencilFaceState> member_stencil_front_;
uint32_t member_stencil_read_mask_{0xFFFFFFFF};
uint32_t member_stencil_write_mask_{0xFFFFFFFF};


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_GPU_DEPTH_STENCIL_STATE_DESCRIPTOR_H_
