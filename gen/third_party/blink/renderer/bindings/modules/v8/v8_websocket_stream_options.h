// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_WEBSOCKET_STREAM_OPTIONS_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_WEBSOCKET_STREAM_OPTIONS_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/collection_support/heap_vector.h"
#include "third_party/blink/renderer/platform/heap/member.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

namespace blink {

class AbortSignal;
class ExceptionState;

class MODULES_EXPORT WebSocketStreamOptions : public bindings::DictionaryBase {
  
  public:
static WebSocketStreamOptions* Create() {
  return MakeGarbageCollected<WebSocketStreamOptions>();
}
static WebSocketStreamOptions* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<WebSocketStreamOptions>(isolate);
}
static WebSocketStreamOptions* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  WebSocketStreamOptions();
explicit  WebSocketStreamOptions(v8::Isolate* isolate);

bool hasProtocols() const {
  return has_protocols_;
}
const Vector<String>& protocols() const {
  DCHECK(hasProtocols());
return member_protocols_;
}
Vector<String> getProtocolsOr(const Vector<String>& fallback_value) const;
Vector<String> getProtocolsOr(Vector<String>&& fallback_value) const;
void setProtocols(const Vector<String>& value);
void setProtocols(Vector<String>&& value);

bool hasSignal() const {
  return has_signal_;
}
AbortSignal* signal() const {
  DCHECK(hasSignal());
return member_signal_;
}
AbortSignal* getSignalOr(AbortSignal* fallback_value) const {
  if (!hasSignal()) {
  return fallback_value;
}
return member_signal_;
}
void setSignal(AbortSignal* value) {
  member_signal_ = value;
has_signal_ = true;
DCHECK(member_signal_);
}




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_protocols_ = false;
bool has_signal_ = false;

Vector<String> member_protocols_;
Member<AbortSignal> member_signal_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_WEBSOCKET_STREAM_OPTIONS_H_
