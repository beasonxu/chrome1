// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_union_canvasrenderingcontext2d_gpucanvascontext_imagebitmaprenderingcontext_webgl2renderingcontext_webglrenderingcontext.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_canvas_rendering_context_2d.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_gpu_canvas_context.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_image_bitmap_rendering_context.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_union_webgl2renderingcontext_webglrenderingcontext.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl2_rendering_context.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_webgl_rendering_context.h"
#include "third_party/blink/renderer/modules/canvas/canvas2d/canvas_rendering_context_2d.h"
#include "third_party/blink/renderer/modules/canvas/imagebitmap/image_bitmap_rendering_context.h"
#include "third_party/blink/renderer/modules/webgl/webgl2_rendering_context.h"
#include "third_party/blink/renderer/modules/webgl/webgl_rendering_context.h"
#include "third_party/blink/renderer/modules/webgpu/gpu_canvas_context.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"

namespace blink {



V8UnionCanvasRenderingContext2DOrGPUCanvasContextOrImageBitmapRenderingContextOrWebGL2RenderingContextOrWebGLRenderingContext* V8UnionCanvasRenderingContext2DOrGPUCanvasContextOrImageBitmapRenderingContextOrWebGL2RenderingContextOrWebGLRenderingContext::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  if (V8WebGLRenderingContext::HasInstance(isolate, v8_value)) {
  auto&& blink_value = V8WebGLRenderingContext::ToWrappableUnsafe(v8_value.As<v8::Object>());
return MakeGarbageCollected<V8UnionCanvasRenderingContext2DOrGPUCanvasContextOrImageBitmapRenderingContextOrWebGL2RenderingContextOrWebGLRenderingContext>(blink_value);
}
if (V8WebGL2RenderingContext::HasInstance(isolate, v8_value)) {
  auto&& blink_value = V8WebGL2RenderingContext::ToWrappableUnsafe(v8_value.As<v8::Object>());
return MakeGarbageCollected<V8UnionCanvasRenderingContext2DOrGPUCanvasContextOrImageBitmapRenderingContextOrWebGL2RenderingContextOrWebGLRenderingContext>(blink_value);
}
if (V8ImageBitmapRenderingContext::HasInstance(isolate, v8_value)) {
  auto&& blink_value = V8ImageBitmapRenderingContext::ToWrappableUnsafe(v8_value.As<v8::Object>());
return MakeGarbageCollected<V8UnionCanvasRenderingContext2DOrGPUCanvasContextOrImageBitmapRenderingContextOrWebGL2RenderingContextOrWebGLRenderingContext>(blink_value);
}
if (V8GPUCanvasContext::HasInstance(isolate, v8_value)) {
  auto&& blink_value = V8GPUCanvasContext::ToWrappableUnsafe(v8_value.As<v8::Object>());
return MakeGarbageCollected<V8UnionCanvasRenderingContext2DOrGPUCanvasContextOrImageBitmapRenderingContextOrWebGL2RenderingContextOrWebGLRenderingContext>(blink_value);
}
if (V8CanvasRenderingContext2D::HasInstance(isolate, v8_value)) {
  auto&& blink_value = V8CanvasRenderingContext2D::ToWrappableUnsafe(v8_value.As<v8::Object>());
return MakeGarbageCollected<V8UnionCanvasRenderingContext2DOrGPUCanvasContextOrImageBitmapRenderingContextOrWebGL2RenderingContextOrWebGLRenderingContext>(blink_value);
}
ThrowTypeErrorNotOfType(exception_state, UnionNameInIDL());
return nullptr;
}



















V8UnionWebGL2RenderingContextOrWebGLRenderingContext* V8UnionCanvasRenderingContext2DOrGPUCanvasContextOrImageBitmapRenderingContextOrWebGL2RenderingContextOrWebGLRenderingContext::GetAsV8UnionWebGL2RenderingContextOrWebGLRenderingContext() const {
  switch (content_type_) {
  case ContentType::kWebGL2RenderingContext: {
    return MakeGarbageCollected<V8UnionWebGL2RenderingContextOrWebGLRenderingContext>(GetAsWebGL2RenderingContext());
  }
  case ContentType::kWebGLRenderingContext: {
    return MakeGarbageCollected<V8UnionWebGL2RenderingContextOrWebGLRenderingContext>(GetAsWebGLRenderingContext());
  }
  default: {
    NOTREACHED();
return nullptr;
  }
}
}

void V8UnionCanvasRenderingContext2DOrGPUCanvasContextOrImageBitmapRenderingContextOrWebGL2RenderingContextOrWebGLRenderingContext::Set(const V8UnionWebGL2RenderingContextOrWebGLRenderingContext* value) {
  switch (value->GetContentType()) {
  case V8UnionWebGL2RenderingContextOrWebGLRenderingContext::ContentType::kWebGL2RenderingContext: {
    Set(value->GetAsWebGL2RenderingContext());
    break;
  }
  case V8UnionWebGL2RenderingContextOrWebGLRenderingContext::ContentType::kWebGLRenderingContext: {
    Set(value->GetAsWebGLRenderingContext());
    break;
  }
}
}




v8::MaybeLocal<v8::Value> V8UnionCanvasRenderingContext2DOrGPUCanvasContextOrImageBitmapRenderingContextOrWebGL2RenderingContextOrWebGLRenderingContext::ToV8Value(ScriptState* script_state) const {
  switch (content_type_) {
  case ContentType::kCanvasRenderingContext2D: {
    return ToV8Traits<CanvasRenderingContext2D>::ToV8(script_state, member_canvas_rendering_context_2d_);
  }
  case ContentType::kGPUCanvasContext: {
    return ToV8Traits<GPUCanvasContext>::ToV8(script_state, member_gpu_canvas_context_);
  }
  case ContentType::kImageBitmapRenderingContext: {
    return ToV8Traits<ImageBitmapRenderingContext>::ToV8(script_state, member_image_bitmap_rendering_context_);
  }
  case ContentType::kWebGL2RenderingContext: {
    return ToV8Traits<WebGL2RenderingContext>::ToV8(script_state, member_webgl2_rendering_context_);
  }
  case ContentType::kWebGLRenderingContext: {
    return ToV8Traits<WebGLRenderingContext>::ToV8(script_state, member_webgl_rendering_context_);
  }
}

NOTREACHED();
return v8::MaybeLocal<v8::Value>();
}

void V8UnionCanvasRenderingContext2DOrGPUCanvasContextOrImageBitmapRenderingContextOrWebGL2RenderingContextOrWebGLRenderingContext::Trace(Visitor* visitor) const {
  TraceIfNeeded<Member<CanvasRenderingContext2D>>::Trace(visitor, member_canvas_rendering_context_2d_);
TraceIfNeeded<Member<GPUCanvasContext>>::Trace(visitor, member_gpu_canvas_context_);
TraceIfNeeded<Member<ImageBitmapRenderingContext>>::Trace(visitor, member_image_bitmap_rendering_context_);
TraceIfNeeded<Member<WebGL2RenderingContext>>::Trace(visitor, member_webgl2_rendering_context_);
TraceIfNeeded<Member<WebGLRenderingContext>>::Trace(visitor, member_webgl_rendering_context_);
bindings::UnionBase::Trace(visitor);
}

void V8UnionCanvasRenderingContext2DOrGPUCanvasContextOrImageBitmapRenderingContextOrWebGL2RenderingContextOrWebGLRenderingContext::Clear() {
  member_canvas_rendering_context_2d_.Clear();
member_gpu_canvas_context_.Clear();
member_image_bitmap_rendering_context_.Clear();
member_webgl2_rendering_context_.Clear();
member_webgl_rendering_context_.Clear();
}



}  // namespace blink
