// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_STORAGE_BUCKET_OPTIONS_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_STORAGE_BUCKET_OPTIONS_H_

#include "base/containers/span.h"
#include "third_party/abseil-cpp/absl/types/optional.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_storage_bucket_durability.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT StorageBucketOptions : public bindings::DictionaryBase {
  
  public:
static StorageBucketOptions* Create() {
  return MakeGarbageCollected<StorageBucketOptions>();
}
static StorageBucketOptions* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<StorageBucketOptions>(isolate);
}
static StorageBucketOptions* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  StorageBucketOptions();
explicit  StorageBucketOptions(v8::Isolate* isolate);

bool hasDurability() const {
  return true;
}
const absl::optional<V8StorageBucketDurability>& durability() const {
  return member_durability_;
}
void setDurability(const absl::optional<V8StorageBucketDurability>& value) {
  member_durability_ = value;
}
void setDurability(V8StorageBucketDurability value) {
  member_durability_ = value;
}
void setDurability(V8StorageBucketDurability::Enum value) {
  member_durability_ = V8StorageBucketDurability(value);
}

bool hasExpires() const {
  return true;
}
const absl::optional<uint64_t>& expires() const {
  return member_expires_;
}
void setExpires(const absl::optional<uint64_t>& value) {
  member_expires_ = value;
}
void setExpires(uint64_t value) {
  member_expires_ = value;
}

bool hasPersisted() const {
  return true;
}
const absl::optional<bool>& persisted() const {
  return member_persisted_;
}
void setPersisted(const absl::optional<bool>& value) {
  member_persisted_ = value;
}
void setPersisted(bool value) {
  member_persisted_ = value;
}

bool hasQuota() const {
  return true;
}
const absl::optional<uint64_t>& quota() const {
  return member_quota_;
}
void setQuota(const absl::optional<uint64_t>& value) {
  member_quota_ = value;
}
void setQuota(uint64_t value) {
  member_quota_ = value;
}


// Obsolete accessor functions
void setDurability(const String& value) {
  member_durability_ = V8StorageBucketDurability::Create(value).value();
}
bool hasDurabilityNonNull() const {
  return hasDurability() && durability().has_value();
}
V8StorageBucketDurability durabilityNonNull() const {
  DCHECK(hasDurabilityNonNull());
return durability().value();
}
bool hasExpiresNonNull() const {
  return hasExpires() && expires().has_value();
}
uint64_t expiresNonNull() const {
  DCHECK(hasExpiresNonNull());
return expires().value();
}
bool hasPersistedNonNull() const {
  return hasPersisted() && persisted().has_value();
}
bool persistedNonNull() const {
  DCHECK(hasPersistedNonNull());
return persisted().value();
}
bool hasQuotaNonNull() const {
  return hasQuota() && quota().has_value();
}
uint64_t quotaNonNull() const {
  DCHECK(hasQuotaNonNull());
return quota().value();
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);



absl::optional<V8StorageBucketDurability> member_durability_;
absl::optional<uint64_t> member_expires_;
absl::optional<bool> member_persisted_;
absl::optional<uint64_t> member_quota_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_STORAGE_BUCKET_OPTIONS_H_
