// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_ENCODED_AUDIO_CHUNK_INIT_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_ENCODED_AUDIO_CHUNK_INIT_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_encoded_audio_chunk_type.h"
#include "third_party/blink/renderer/core/typed_arrays/array_buffer_view_helpers.h"
#include "third_party/blink/renderer/core/typed_arrays/dom_typed_array.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/member.h"

namespace blink {

class ExceptionState;
class V8UnionArrayBufferAllowSharedOrArrayBufferViewAllowShared;

class MODULES_EXPORT EncodedAudioChunkInit : public bindings::DictionaryBase {
  
  public:
static EncodedAudioChunkInit* Create() {
  return MakeGarbageCollected<EncodedAudioChunkInit>();
}
static EncodedAudioChunkInit* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<EncodedAudioChunkInit>(isolate);
}
static EncodedAudioChunkInit* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  EncodedAudioChunkInit();
explicit  EncodedAudioChunkInit(v8::Isolate* isolate);

bool hasData() const {
  return true;
}
V8UnionArrayBufferAllowSharedOrArrayBufferViewAllowShared* data() const {
  return member_data_;
}
void setData(V8UnionArrayBufferAllowSharedOrArrayBufferViewAllowShared* value) {
  member_data_ = value;
DCHECK(member_data_);
}

bool hasDuration() const {
  return has_duration_;
}
uint64_t duration() const {
  DCHECK(hasDuration());
return member_duration_;
}
uint64_t getDurationOr(uint64_t fallback_value) const {
  if (!hasDuration()) {
  return fallback_value;
}
return member_duration_;
}
void setDuration(uint64_t value) {
  member_duration_ = value;
has_duration_ = true;
}

bool hasTimestamp() const {
  return true;
}
int64_t timestamp() const {
  return member_timestamp_;
}
void setTimestamp(int64_t value) {
  member_timestamp_ = value;
}

bool hasType() const {
  return true;
}
V8EncodedAudioChunkType type() const {
  return member_type_;
}
void setType(V8EncodedAudioChunkType value) {
  member_type_ = value;
}
void setType(V8EncodedAudioChunkType::Enum value) {
  member_type_ = V8EncodedAudioChunkType(value);
}


// Obsolete accessor functions
void setType(const String& value) {
  member_type_ = V8EncodedAudioChunkType::Create(value).value();
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_duration_ = false;

Member<V8UnionArrayBufferAllowSharedOrArrayBufferViewAllowShared> member_data_;
uint64_t member_duration_;
int64_t member_timestamp_;
V8EncodedAudioChunkType member_type_{static_cast<V8EncodedAudioChunkType::Enum>(0)};


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_ENCODED_AUDIO_CHUNK_INIT_H_
