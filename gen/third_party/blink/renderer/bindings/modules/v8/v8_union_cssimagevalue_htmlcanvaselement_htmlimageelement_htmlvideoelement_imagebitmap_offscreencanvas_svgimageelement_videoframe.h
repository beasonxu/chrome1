// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_UNION_CSSIMAGEVALUE_HTMLCANVASELEMENT_HTMLIMAGEELEMENT_HTMLVIDEOELEMENT_IMAGEBITMAP_OFFSCREENCANVAS_SVGIMAGEELEMENT_VIDEOFRAME_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_UNION_CSSIMAGEVALUE_HTMLCANVASELEMENT_HTMLIMAGEELEMENT_HTMLVIDEOELEMENT_IMAGEBITMAP_OFFSCREENCANVAS_SVGIMAGEELEMENT_VIDEOFRAME_H_

#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/union_base.h"
#include "third_party/blink/renderer/platform/heap/member.h"

namespace blink {

class CSSStyleImageValue;
class ExceptionState;
class HTMLCanvasElement;
class HTMLImageElement;
class HTMLVideoElement;
class ImageBitmap;
class OffscreenCanvas;
class SVGImageElement;
class V8UnionHTMLCanvasElementOrImageBitmapOrOffscreenCanvas;
class V8UnionHTMLCanvasElementOrOffscreenCanvas;
class V8UnionHTMLVideoElementOrVideoFrame;
class VideoFrame;

class MODULES_EXPORT V8UnionCSSImageValueOrHTMLCanvasElementOrHTMLImageElementOrHTMLVideoElementOrImageBitmapOrOffscreenCanvasOrSVGImageElementOrVideoFrame final : public bindings::UnionBase {
  
  public:
// The type of the content value of this IDL union.
enum class ContentType {
kCSSImageValue, kHTMLCanvasElement, kHTMLImageElement, kHTMLVideoElement, kImageBitmap, kOffscreenCanvas, kSVGImageElement, kVideoFrame
};

static V8UnionCSSImageValueOrHTMLCanvasElementOrHTMLImageElementOrHTMLVideoElementOrImageBitmapOrOffscreenCanvasOrSVGImageElementOrVideoFrame* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  V8UnionCSSImageValueOrHTMLCanvasElementOrHTMLImageElementOrHTMLVideoElementOrImageBitmapOrOffscreenCanvasOrSVGImageElementOrVideoFrame(CSSStyleImageValue* value) : content_type_(ContentType::kCSSImageValue), member_css_image_value_(value) {
  DCHECK(value);
}
explicit  V8UnionCSSImageValueOrHTMLCanvasElementOrHTMLImageElementOrHTMLVideoElementOrImageBitmapOrOffscreenCanvasOrSVGImageElementOrVideoFrame(HTMLCanvasElement* value) : content_type_(ContentType::kHTMLCanvasElement), member_html_canvas_element_(value) {
  DCHECK(value);
}
explicit  V8UnionCSSImageValueOrHTMLCanvasElementOrHTMLImageElementOrHTMLVideoElementOrImageBitmapOrOffscreenCanvasOrSVGImageElementOrVideoFrame(HTMLImageElement* value) : content_type_(ContentType::kHTMLImageElement), member_html_image_element_(value) {
  DCHECK(value);
}
explicit  V8UnionCSSImageValueOrHTMLCanvasElementOrHTMLImageElementOrHTMLVideoElementOrImageBitmapOrOffscreenCanvasOrSVGImageElementOrVideoFrame(HTMLVideoElement* value) : content_type_(ContentType::kHTMLVideoElement), member_html_video_element_(value) {
  DCHECK(value);
}
explicit  V8UnionCSSImageValueOrHTMLCanvasElementOrHTMLImageElementOrHTMLVideoElementOrImageBitmapOrOffscreenCanvasOrSVGImageElementOrVideoFrame(ImageBitmap* value) : content_type_(ContentType::kImageBitmap), member_image_bitmap_(value) {
  DCHECK(value);
}
explicit  V8UnionCSSImageValueOrHTMLCanvasElementOrHTMLImageElementOrHTMLVideoElementOrImageBitmapOrOffscreenCanvasOrSVGImageElementOrVideoFrame(OffscreenCanvas* value) : content_type_(ContentType::kOffscreenCanvas), member_offscreen_canvas_(value) {
  DCHECK(value);
}
explicit  V8UnionCSSImageValueOrHTMLCanvasElementOrHTMLImageElementOrHTMLVideoElementOrImageBitmapOrOffscreenCanvasOrSVGImageElementOrVideoFrame(SVGImageElement* value) : content_type_(ContentType::kSVGImageElement), member_svg_image_element_(value) {
  DCHECK(value);
}
explicit  V8UnionCSSImageValueOrHTMLCanvasElementOrHTMLImageElementOrHTMLVideoElementOrImageBitmapOrOffscreenCanvasOrSVGImageElementOrVideoFrame(VideoFrame* value) : content_type_(ContentType::kVideoFrame), member_video_frame_(value) {
  DCHECK(value);
}

// Returns the type of the content value.
ContentType GetContentType() const {
  return content_type_;
}

bool IsCSSImageValue() const {
  return content_type_ == ContentType::kCSSImageValue;
}
CSSStyleImageValue* GetAsCSSImageValue() const {
  DCHECK_EQ(content_type_, ContentType::kCSSImageValue);
return member_css_image_value_;
}
void Set(CSSStyleImageValue* value) {
  DCHECK(value);
Clear();
member_css_image_value_ = value;
content_type_ = ContentType::kCSSImageValue;
}

bool IsHTMLCanvasElement() const {
  return content_type_ == ContentType::kHTMLCanvasElement;
}
HTMLCanvasElement* GetAsHTMLCanvasElement() const {
  DCHECK_EQ(content_type_, ContentType::kHTMLCanvasElement);
return member_html_canvas_element_;
}
void Set(HTMLCanvasElement* value) {
  DCHECK(value);
Clear();
member_html_canvas_element_ = value;
content_type_ = ContentType::kHTMLCanvasElement;
}

bool IsHTMLImageElement() const {
  return content_type_ == ContentType::kHTMLImageElement;
}
HTMLImageElement* GetAsHTMLImageElement() const {
  DCHECK_EQ(content_type_, ContentType::kHTMLImageElement);
return member_html_image_element_;
}
void Set(HTMLImageElement* value) {
  DCHECK(value);
Clear();
member_html_image_element_ = value;
content_type_ = ContentType::kHTMLImageElement;
}

bool IsHTMLVideoElement() const {
  return content_type_ == ContentType::kHTMLVideoElement;
}
HTMLVideoElement* GetAsHTMLVideoElement() const {
  DCHECK_EQ(content_type_, ContentType::kHTMLVideoElement);
return member_html_video_element_;
}
void Set(HTMLVideoElement* value) {
  DCHECK(value);
Clear();
member_html_video_element_ = value;
content_type_ = ContentType::kHTMLVideoElement;
}

bool IsImageBitmap() const {
  return content_type_ == ContentType::kImageBitmap;
}
ImageBitmap* GetAsImageBitmap() const {
  DCHECK_EQ(content_type_, ContentType::kImageBitmap);
return member_image_bitmap_;
}
void Set(ImageBitmap* value) {
  DCHECK(value);
Clear();
member_image_bitmap_ = value;
content_type_ = ContentType::kImageBitmap;
}

bool IsOffscreenCanvas() const {
  return content_type_ == ContentType::kOffscreenCanvas;
}
OffscreenCanvas* GetAsOffscreenCanvas() const {
  DCHECK_EQ(content_type_, ContentType::kOffscreenCanvas);
return member_offscreen_canvas_;
}
void Set(OffscreenCanvas* value) {
  DCHECK(value);
Clear();
member_offscreen_canvas_ = value;
content_type_ = ContentType::kOffscreenCanvas;
}

bool IsSVGImageElement() const {
  return content_type_ == ContentType::kSVGImageElement;
}
SVGImageElement* GetAsSVGImageElement() const {
  DCHECK_EQ(content_type_, ContentType::kSVGImageElement);
return member_svg_image_element_;
}
void Set(SVGImageElement* value) {
  DCHECK(value);
Clear();
member_svg_image_element_ = value;
content_type_ = ContentType::kSVGImageElement;
}

bool IsVideoFrame() const {
  return content_type_ == ContentType::kVideoFrame;
}
VideoFrame* GetAsVideoFrame() const {
  DCHECK_EQ(content_type_, ContentType::kVideoFrame);
return member_video_frame_;
}
void Set(VideoFrame* value) {
  DCHECK(value);
Clear();
member_video_frame_ = value;
content_type_ = ContentType::kVideoFrame;
}

bool IsV8UnionHTMLCanvasElementOrImageBitmapOrOffscreenCanvas() const {
  return content_type_ == ContentType::kHTMLCanvasElement || content_type_ == ContentType::kImageBitmap || content_type_ == ContentType::kOffscreenCanvas;
}
V8UnionHTMLCanvasElementOrImageBitmapOrOffscreenCanvas* GetAsV8UnionHTMLCanvasElementOrImageBitmapOrOffscreenCanvas() const;
void Set(const V8UnionHTMLCanvasElementOrImageBitmapOrOffscreenCanvas* value);

bool IsV8UnionHTMLCanvasElementOrOffscreenCanvas() const {
  return content_type_ == ContentType::kHTMLCanvasElement || content_type_ == ContentType::kOffscreenCanvas;
}
V8UnionHTMLCanvasElementOrOffscreenCanvas* GetAsV8UnionHTMLCanvasElementOrOffscreenCanvas() const;
void Set(const V8UnionHTMLCanvasElementOrOffscreenCanvas* value);

bool IsV8UnionHTMLVideoElementOrVideoFrame() const {
  return content_type_ == ContentType::kHTMLVideoElement || content_type_ == ContentType::kVideoFrame;
}
V8UnionHTMLVideoElementOrVideoFrame* GetAsV8UnionHTMLVideoElementOrVideoFrame() const;
void Set(const V8UnionHTMLVideoElementOrVideoFrame* value);


v8::MaybeLocal<v8::Value> ToV8Value(ScriptState* script_state) const override;

void Trace(Visitor* visitor) const override;


  
  private:
void Clear();

static constexpr const char* UnionNameInIDL() {
  return "(CSSImageValue or HTMLCanvasElement or HTMLImageElement or HTMLVideoElement or ImageBitmap or OffscreenCanvas or SVGImageElement or VideoFrame)";
}

ContentType content_type_;

Member<CSSStyleImageValue> member_css_image_value_;
Member<HTMLCanvasElement> member_html_canvas_element_;
Member<HTMLImageElement> member_html_image_element_;
Member<HTMLVideoElement> member_html_video_element_;
Member<ImageBitmap> member_image_bitmap_;
Member<OffscreenCanvas> member_offscreen_canvas_;
Member<SVGImageElement> member_svg_image_element_;
Member<VideoFrame> member_video_frame_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_UNION_CSSIMAGEVALUE_HTMLCANVASELEMENT_HTMLIMAGEELEMENT_HTMLVIDEOELEMENT_IMAGEBITMAP_OFFSCREENCANVAS_SVGIMAGEELEMENT_VIDEOFRAME_H_
