// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_browsing_topic.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



BrowsingTopic* BrowsingTopic::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  BrowsingTopic* dictionary = MakeGarbageCollected<BrowsingTopic>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "BrowsingTopic";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 BrowsingTopic::BrowsingTopic() {
  
}

 BrowsingTopic::BrowsingTopic(v8::Isolate* isolate) {
  
}



String BrowsingTopic::getConfigVersionOr(const String& fallback_value) const {
  if (!hasConfigVersion()) {
  return fallback_value;
}
return member_config_version_;
}

String BrowsingTopic::getConfigVersionOr(String&& fallback_value) const {
  if (!hasConfigVersion()) {
  return std::move(fallback_value);
}
return member_config_version_;
}

void BrowsingTopic::setConfigVersion(const String& value) {
  member_config_version_ = value;
has_config_version_ = true;
}

void BrowsingTopic::setConfigVersion(String&& value) {
  member_config_version_ = std::move(value);
has_config_version_ = true;
}




String BrowsingTopic::getModelVersionOr(const String& fallback_value) const {
  if (!hasModelVersion()) {
  return fallback_value;
}
return member_model_version_;
}

String BrowsingTopic::getModelVersionOr(String&& fallback_value) const {
  if (!hasModelVersion()) {
  return std::move(fallback_value);
}
return member_model_version_;
}

void BrowsingTopic::setModelVersion(const String& value) {
  member_model_version_ = value;
has_model_version_ = true;
}

void BrowsingTopic::setModelVersion(String&& value) {
  member_model_version_ = std::move(value);
has_model_version_ = true;
}




String BrowsingTopic::getTaxonomyVersionOr(const String& fallback_value) const {
  if (!hasTaxonomyVersion()) {
  return fallback_value;
}
return member_taxonomy_version_;
}

String BrowsingTopic::getTaxonomyVersionOr(String&& fallback_value) const {
  if (!hasTaxonomyVersion()) {
  return std::move(fallback_value);
}
return member_taxonomy_version_;
}

void BrowsingTopic::setTaxonomyVersion(const String& value) {
  member_taxonomy_version_ = value;
has_taxonomy_version_ = true;
}

void BrowsingTopic::setTaxonomyVersion(String&& value) {
  member_taxonomy_version_ = std::move(value);
has_taxonomy_version_ = true;
}











String BrowsingTopic::getVersionOr(const String& fallback_value) const {
  if (!hasVersion()) {
  return fallback_value;
}
return member_version_;
}

String BrowsingTopic::getVersionOr(String&& fallback_value) const {
  if (!hasVersion()) {
  return std::move(fallback_value);
}
return member_version_;
}

void BrowsingTopic::setVersion(const String& value) {
  member_version_ = value;
has_version_ = true;
}

void BrowsingTopic::setVersion(String&& value) {
  member_version_ = std::move(value);
has_version_ = true;
}




void BrowsingTopic::Trace(Visitor* visitor) const {
  TraceIfNeeded<String>::Trace(visitor, member_config_version_);
TraceIfNeeded<String>::Trace(visitor, member_model_version_);
TraceIfNeeded<String>::Trace(visitor, member_taxonomy_version_);
TraceIfNeeded<int32_t>::Trace(visitor, member_topic_);
TraceIfNeeded<String>::Trace(visitor, member_version_);
bindings::DictionaryBase::Trace(visitor);
}

bool BrowsingTopic::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasConfigVersion()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_config_version_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasModelVersion()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_model_version_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasTaxonomyVersion()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_taxonomy_version_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasTopic()) {
  if (!ToV8Traits<IDLLong>::ToV8(script_state, member_topic_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasVersion()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_version_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void BrowsingTopic::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "BrowsingTopic";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("configVersion");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_config_version_, member_config_version_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("modelVersion");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_model_version_, member_model_version_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("taxonomyVersion");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_taxonomy_version_, member_taxonomy_version_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("topic");
if (!bindings::GetDictionaryMemberFromV8Object<IDLLong, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_topic_, member_topic_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("version");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_version_, member_version_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> BrowsingTopic::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"configVersion",
"modelVersion",
"taxonomyVersion",
"topic",
"version",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
