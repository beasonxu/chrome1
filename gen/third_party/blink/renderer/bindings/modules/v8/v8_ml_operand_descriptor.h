// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_ML_OPERAND_DESCRIPTOR_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_ML_OPERAND_DESCRIPTOR_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_ml_operand_type.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/collection_support/heap_vector.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT MLOperandDescriptor : public bindings::DictionaryBase {
  
  public:
static MLOperandDescriptor* Create() {
  return MakeGarbageCollected<MLOperandDescriptor>();
}
static MLOperandDescriptor* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<MLOperandDescriptor>(isolate);
}
static MLOperandDescriptor* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  MLOperandDescriptor();
explicit  MLOperandDescriptor(v8::Isolate* isolate);

bool hasDimensions() const {
  return has_dimensions_;
}
const Vector<int32_t>& dimensions() const {
  DCHECK(hasDimensions());
return member_dimensions_;
}
Vector<int32_t> getDimensionsOr(const Vector<int32_t>& fallback_value) const;
Vector<int32_t> getDimensionsOr(Vector<int32_t>&& fallback_value) const;
void setDimensions(const Vector<int32_t>& value);
void setDimensions(Vector<int32_t>&& value);

bool hasType() const {
  return true;
}
V8MLOperandType type() const {
  return member_type_;
}
void setType(V8MLOperandType value) {
  member_type_ = value;
}
void setType(V8MLOperandType::Enum value) {
  member_type_ = V8MLOperandType(value);
}


// Obsolete accessor functions
void setType(const String& value) {
  member_type_ = V8MLOperandType::Create(value).value();
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_dimensions_ = false;

Vector<int32_t> member_dimensions_;
V8MLOperandType member_type_{static_cast<V8MLOperandType::Enum>(0)};


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_ML_OPERAND_DESCRIPTOR_H_
