// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_media_capabilities_key_system_configuration.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_key_system_track_configuration.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



MediaCapabilitiesKeySystemConfiguration* MediaCapabilitiesKeySystemConfiguration::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  MediaCapabilitiesKeySystemConfiguration* dictionary = MakeGarbageCollected<MediaCapabilitiesKeySystemConfiguration>(isolate);
if (!v8_value->IsObject()) {
  const char* const class_like_name = "MediaCapabilitiesKeySystemConfiguration";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 MediaCapabilitiesKeySystemConfiguration::MediaCapabilitiesKeySystemConfiguration() {
  
}

 MediaCapabilitiesKeySystemConfiguration::MediaCapabilitiesKeySystemConfiguration(v8::Isolate* isolate) {
  
}















void MediaCapabilitiesKeySystemConfiguration::setInitDataType(const String& value) {
  member_init_data_type_ = value;
}

void MediaCapabilitiesKeySystemConfiguration::setInitDataType(String&& value) {
  member_init_data_type_ = std::move(value);
}




void MediaCapabilitiesKeySystemConfiguration::setKeySystem(const String& value) {
  member_key_system_ = value;
}

void MediaCapabilitiesKeySystemConfiguration::setKeySystem(String&& value) {
  member_key_system_ = std::move(value);
}









Vector<String> MediaCapabilitiesKeySystemConfiguration::getSessionTypesOr(const Vector<String>& fallback_value) const {
  if (!hasSessionTypes()) {
  return fallback_value;
}
return member_session_types_;
}

Vector<String> MediaCapabilitiesKeySystemConfiguration::getSessionTypesOr(Vector<String>&& fallback_value) const {
  if (!hasSessionTypes()) {
  return std::move(fallback_value);
}
return member_session_types_;
}

void MediaCapabilitiesKeySystemConfiguration::setSessionTypes(const Vector<String>& value) {
  member_session_types_ = value;
has_session_types_ = true;
}

void MediaCapabilitiesKeySystemConfiguration::setSessionTypes(Vector<String>&& value) {
  member_session_types_ = std::move(value);
has_session_types_ = true;
}











void MediaCapabilitiesKeySystemConfiguration::Trace(Visitor* visitor) const {
  TraceIfNeeded<Member<KeySystemTrackConfiguration>>::Trace(visitor, member_audio_);
TraceIfNeeded<V8MediaKeysRequirement>::Trace(visitor, member_distinctive_identifier_);
TraceIfNeeded<String>::Trace(visitor, member_init_data_type_);
TraceIfNeeded<String>::Trace(visitor, member_key_system_);
TraceIfNeeded<V8MediaKeysRequirement>::Trace(visitor, member_persistent_state_);
TraceIfNeeded<Vector<String>>::Trace(visitor, member_session_types_);
TraceIfNeeded<Member<KeySystemTrackConfiguration>>::Trace(visitor, member_video_);
bindings::DictionaryBase::Trace(visitor);
}

bool MediaCapabilitiesKeySystemConfiguration::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasAudio()) {
  if (!ToV8Traits<KeySystemTrackConfiguration>::ToV8(script_state, member_audio_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDistinctiveIdentifier()) {
  if (!ToV8Traits<V8MediaKeysRequirement>::ToV8(script_state, member_distinctive_identifier_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasInitDataType()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_init_data_type_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasKeySystem()) {
  if (!ToV8Traits<IDLString>::ToV8(script_state, member_key_system_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPersistentState()) {
  if (!ToV8Traits<V8MediaKeysRequirement>::ToV8(script_state, member_persistent_state_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasSessionTypes()) {
  if (!ToV8Traits<IDLSequence<IDLString>>::ToV8(script_state, member_session_types_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasVideo()) {
  if (!ToV8Traits<KeySystemTrackConfiguration>::ToV8(script_state, member_video_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
return true;
}

void MediaCapabilitiesKeySystemConfiguration::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "MediaCapabilitiesKeySystemConfiguration";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("audio");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<KeySystemTrackConfiguration, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_audio_, member_audio_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("distinctiveIdentifier");
bool fallback_presence_var;
if (!bindings::GetDictionaryMemberFromV8Object<V8MediaKeysRequirement, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), fallback_presence_var, member_distinctive_identifier_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("initDataType");
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), fallback_presence_var, member_init_data_type_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("keySystem");
constexpr bool is_required = true;
if (!bindings::GetDictionaryMemberFromV8Object<IDLString, is_required>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), fallback_presence_var, member_key_system_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("persistentState");
if (!bindings::GetDictionaryMemberFromV8Object<V8MediaKeysRequirement, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), fallback_presence_var, member_persistent_state_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("sessionTypes");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLString>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), has_session_types_, member_session_types_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("video");
if (!bindings::GetDictionaryMemberFromV8Object<KeySystemTrackConfiguration, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), has_video_, member_video_, try_block, exception_state)) {
  return;
}
}

const base::span<const v8::Eternal<v8::Name>> MediaCapabilitiesKeySystemConfiguration::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"audio",
"distinctiveIdentifier",
"initDataType",
"keySystem",
"persistentState",
"sessionTypes",
"video",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
