// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_LOCK_OPTIONS_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_LOCK_OPTIONS_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_lock_mode.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/member.h"

namespace blink {

class AbortSignal;
class ExceptionState;

class MODULES_EXPORT LockOptions : public bindings::DictionaryBase {
  
  public:
static LockOptions* Create() {
  return MakeGarbageCollected<LockOptions>();
}
static LockOptions* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<LockOptions>(isolate);
}
static LockOptions* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  LockOptions();
explicit  LockOptions(v8::Isolate* isolate);

bool hasIfAvailable() const {
  return true;
}
bool ifAvailable() const {
  return member_if_available_;
}
void setIfAvailable(bool value) {
  member_if_available_ = value;
}

bool hasMode() const {
  return true;
}
V8LockMode mode() const {
  return member_mode_;
}
void setMode(V8LockMode value) {
  member_mode_ = value;
}
void setMode(V8LockMode::Enum value) {
  member_mode_ = V8LockMode(value);
}

bool hasSignal() const {
  return has_signal_;
}
AbortSignal* signal() const {
  DCHECK(hasSignal());
return member_signal_;
}
AbortSignal* getSignalOr(AbortSignal* fallback_value) const {
  if (!hasSignal()) {
  return fallback_value;
}
return member_signal_;
}
void setSignal(AbortSignal* value) {
  member_signal_ = value;
has_signal_ = true;
DCHECK(member_signal_);
}

bool hasSteal() const {
  return true;
}
bool steal() const {
  return member_steal_;
}
void setSteal(bool value) {
  member_steal_ = value;
}


// Obsolete accessor functions
void setMode(const String& value) {
  member_mode_ = V8LockMode::Create(value).value();
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_signal_ = false;

bool member_if_available_{false};
V8LockMode member_mode_{V8LockMode::Enum::kExclusive};
Member<AbortSignal> member_signal_;
bool member_steal_{false};


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_LOCK_OPTIONS_H_
