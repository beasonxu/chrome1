// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_WEBGL_WEBCODECS_VIDEO_FRAME_HANDLE_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_WEBGL_WEBCODECS_VIDEO_FRAME_HANDLE_H_

#include "base/containers/span.h"
#include "third_party/abseil-cpp/absl/types/optional.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_video_pixel_format.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/collection_support/heap_vector.h"
#include "third_party/blink/renderer/platform/heap/member.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

namespace blink {

class ExceptionState;
class VideoColorSpace;
class WebGLWebCodecsTextureInfo;

class MODULES_EXPORT WebGLWebCodecsVideoFrameHandle : public bindings::DictionaryBase {
  
  public:
static WebGLWebCodecsVideoFrameHandle* Create() {
  return MakeGarbageCollected<WebGLWebCodecsVideoFrameHandle>();
}
static WebGLWebCodecsVideoFrameHandle* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<WebGLWebCodecsVideoFrameHandle>(isolate);
}
static WebGLWebCodecsVideoFrameHandle* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  WebGLWebCodecsVideoFrameHandle();
explicit  WebGLWebCodecsVideoFrameHandle(v8::Isolate* isolate);

bool hasColorConversionShaderFunc() const {
  return has_color_conversion_shader_func_;
}
const String& colorConversionShaderFunc() const {
  DCHECK(hasColorConversionShaderFunc());
return member_color_conversion_shader_func_;
}
String getColorConversionShaderFuncOr(const String& fallback_value) const;
String getColorConversionShaderFuncOr(String&& fallback_value) const;
void setColorConversionShaderFunc(const String& value);
void setColorConversionShaderFunc(String&& value);

bool hasColorSpace() const {
  return has_color_space_;
}
VideoColorSpace* colorSpace() const {
  DCHECK(hasColorSpace());
return member_color_space_;
}
VideoColorSpace* getColorSpaceOr(VideoColorSpace* fallback_value) const {
  if (!hasColorSpace()) {
  return fallback_value;
}
return member_color_space_;
}
void setColorSpace(VideoColorSpace* value) {
  member_color_space_ = value;
has_color_space_ = true;
DCHECK(member_color_space_);
}

bool hasFlipY() const {
  return has_flip_y_;
}
bool flipY() const {
  DCHECK(hasFlipY());
return member_flip_y_;
}
bool getFlipYOr(bool fallback_value) const {
  if (!hasFlipY()) {
  return fallback_value;
}
return member_flip_y_;
}
void setFlipY(bool value) {
  member_flip_y_ = value;
has_flip_y_ = true;
}

bool hasPixelFormat() const {
  return has_pixel_format_;
}
const absl::optional<V8VideoPixelFormat>& pixelFormat() const {
  DCHECK(hasPixelFormat());
return member_pixel_format_;
}
absl::optional<V8VideoPixelFormat> getPixelFormatOr(const absl::optional<V8VideoPixelFormat>& fallback_value) const {
  if (!hasPixelFormat()) {
  return fallback_value;
}
return member_pixel_format_;
}
void setPixelFormat(const absl::optional<V8VideoPixelFormat>& value) {
  member_pixel_format_ = value;
has_pixel_format_ = true;
}
void setPixelFormat(V8VideoPixelFormat value) {
  member_pixel_format_ = value;
has_pixel_format_ = true;
}
void setPixelFormat(V8VideoPixelFormat::Enum value) {
  member_pixel_format_ = V8VideoPixelFormat(value);
has_pixel_format_ = true;
}

bool hasPremultipliedAlpha() const {
  return has_premultiplied_alpha_;
}
bool premultipliedAlpha() const {
  DCHECK(hasPremultipliedAlpha());
return member_premultiplied_alpha_;
}
bool getPremultipliedAlphaOr(bool fallback_value) const {
  if (!hasPremultipliedAlpha()) {
  return fallback_value;
}
return member_premultiplied_alpha_;
}
void setPremultipliedAlpha(bool value) {
  member_premultiplied_alpha_ = value;
has_premultiplied_alpha_ = true;
}

bool hasRequiredExtension() const {
  return has_required_extension_;
}
const String& requiredExtension() const {
  DCHECK(hasRequiredExtension());
return member_required_extension_;
}
String getRequiredExtensionOr(const String& fallback_value) const;
String getRequiredExtensionOr(String&& fallback_value) const;
void setRequiredExtension(const String& value);
void setRequiredExtension(String&& value);

bool hasTextureInfoArray() const {
  return true;
}
const HeapVector<Member<WebGLWebCodecsTextureInfo>>& textureInfoArray() const {
  return member_texture_info_array_;
}
void setTextureInfoArray(const HeapVector<Member<WebGLWebCodecsTextureInfo>>& value);
void setTextureInfoArray(HeapVector<Member<WebGLWebCodecsTextureInfo>>&& value);


// Obsolete accessor functions
void setPixelFormat(const String& value) {
  member_pixel_format_ = V8VideoPixelFormat::Create(value).value();
has_pixel_format_ = true;
}
bool hasPixelFormatNonNull() const {
  return hasPixelFormat() && pixelFormat().has_value();
}
V8VideoPixelFormat pixelFormatNonNull() const {
  DCHECK(hasPixelFormatNonNull());
return pixelFormat().value();
}

void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_color_conversion_shader_func_ = false;
bool has_color_space_ = false;
bool has_flip_y_ = false;
bool has_pixel_format_ = false;
bool has_premultiplied_alpha_ = false;
bool has_required_extension_ = false;

String member_color_conversion_shader_func_;
Member<VideoColorSpace> member_color_space_;
bool member_flip_y_;
absl::optional<V8VideoPixelFormat> member_pixel_format_;
bool member_premultiplied_alpha_;
String member_required_extension_;
HeapVector<Member<WebGLWebCodecsTextureInfo>> member_texture_info_array_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_WEBGL_WEBCODECS_VIDEO_FRAME_HANDLE_H_
