// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_session_init.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_depth_state_init.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_dom_overlay_init.h"
#include "third_party/blink/renderer/bindings/modules/v8/v8_xr_tracked_image_init.h"
#include "third_party/blink/renderer/core/execution_context/execution_context.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



XRSessionInit* XRSessionInit::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  XRSessionInit* dictionary = MakeGarbageCollected<XRSessionInit>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  const char* const class_like_name = "XRSessionInit";
exception_state.ThrowTypeError(ExceptionMessages::ValueNotOfType(class_like_name));
return nullptr;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 XRSessionInit::XRSessionInit() {
  
}

 XRSessionInit::XRSessionInit(v8::Isolate* isolate) {
  
}

















HeapVector<ScriptValue> XRSessionInit::getOptionalFeaturesOr(const HeapVector<ScriptValue>& fallback_value) const {
  if (!hasOptionalFeatures()) {
  return fallback_value;
}
return member_optional_features_;
}

HeapVector<ScriptValue> XRSessionInit::getOptionalFeaturesOr(HeapVector<ScriptValue>&& fallback_value) const {
  if (!hasOptionalFeatures()) {
  return std::move(fallback_value);
}
return member_optional_features_;
}

void XRSessionInit::setOptionalFeatures(const HeapVector<ScriptValue>& value) {
  member_optional_features_ = value;
has_optional_features_ = true;
}

void XRSessionInit::setOptionalFeatures(HeapVector<ScriptValue>&& value) {
  member_optional_features_ = std::move(value);
has_optional_features_ = true;
}




HeapVector<ScriptValue> XRSessionInit::getRequiredFeaturesOr(const HeapVector<ScriptValue>& fallback_value) const {
  if (!hasRequiredFeatures()) {
  return fallback_value;
}
return member_required_features_;
}

HeapVector<ScriptValue> XRSessionInit::getRequiredFeaturesOr(HeapVector<ScriptValue>&& fallback_value) const {
  if (!hasRequiredFeatures()) {
  return std::move(fallback_value);
}
return member_required_features_;
}

void XRSessionInit::setRequiredFeatures(const HeapVector<ScriptValue>& value) {
  member_required_features_ = value;
has_required_features_ = true;
}

void XRSessionInit::setRequiredFeatures(HeapVector<ScriptValue>&& value) {
  member_required_features_ = std::move(value);
has_required_features_ = true;
}




HeapVector<Member<XRTrackedImageInit>> XRSessionInit::getTrackedImagesOr(const HeapVector<Member<XRTrackedImageInit>>& fallback_value) const {
  if (!hasTrackedImages()) {
  return fallback_value;
}
return member_tracked_images_;
}

HeapVector<Member<XRTrackedImageInit>> XRSessionInit::getTrackedImagesOr(HeapVector<Member<XRTrackedImageInit>>&& fallback_value) const {
  if (!hasTrackedImages()) {
  return std::move(fallback_value);
}
return member_tracked_images_;
}

void XRSessionInit::setTrackedImages(const HeapVector<Member<XRTrackedImageInit>>& value) {
  member_tracked_images_ = value;
has_tracked_images_ = true;
}

void XRSessionInit::setTrackedImages(HeapVector<Member<XRTrackedImageInit>>&& value) {
  member_tracked_images_ = std::move(value);
has_tracked_images_ = true;
}




void XRSessionInit::Trace(Visitor* visitor) const {
  TraceIfNeeded<Member<XRDepthStateInit>>::Trace(visitor, member_depth_sensing_);
TraceIfNeeded<Member<XRDOMOverlayInit>>::Trace(visitor, member_dom_overlay_);
TraceIfNeeded<HeapVector<ScriptValue>>::Trace(visitor, member_optional_features_);
TraceIfNeeded<HeapVector<ScriptValue>>::Trace(visitor, member_required_features_);
TraceIfNeeded<HeapVector<Member<XRTrackedImageInit>>>::Trace(visitor, member_tracked_images_);
bindings::DictionaryBase::Trace(visitor);
}

bool XRSessionInit::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* execution_context = ExecutionContext::From(current_context);
v8::Local<v8::Value> v8_value;
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (RuntimeEnabledFeatures::WebXRDepthEnabled(execution_context)) {
  if (hasDepthSensing()) {
  if (!ToV8Traits<XRDepthStateInit>::ToV8(script_state, member_depth_sensing_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
if (hasDomOverlay()) {
  if (!ToV8Traits<XRDOMOverlayInit>::ToV8(script_state, member_dom_overlay_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasOptionalFeatures()) {
  if (!ToV8Traits<IDLSequence<IDLAny>>::ToV8(script_state, member_optional_features_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasRequiredFeatures()) {
  if (!ToV8Traits<IDLSequence<IDLAny>>::ToV8(script_state, member_required_features_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (RuntimeEnabledFeatures::WebXRImageTrackingEnabled(execution_context)) {
  if (hasTrackedImages()) {
  if (!ToV8Traits<IDLSequence<XRTrackedImageInit>>::ToV8(script_state, member_tracked_images_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
return true;
}

void XRSessionInit::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
ExecutionContext* execution_context = ExecutionContext::From(current_context);
const char* const class_like_name = "XRSessionInit";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
constexpr bool is_optional = false;
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
v8::TryCatch try_block(isolate);
if (RuntimeEnabledFeatures::WebXRDepthEnabled(execution_context)) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("depthSensing");
if (!bindings::GetDictionaryMemberFromV8Object<XRDepthStateInit, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), has_depth_sensing_, member_depth_sensing_, try_block, exception_state)) {
  return;
}
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("domOverlay");
if (!bindings::GetDictionaryMemberFromV8Object<XRDOMOverlayInit, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), has_dom_overlay_, member_dom_overlay_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("optionalFeatures");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLAny>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), has_optional_features_, member_optional_features_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("requiredFeatures");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<IDLAny>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), has_required_features_, member_required_features_, try_block, exception_state)) {
  return;
}
if (RuntimeEnabledFeatures::WebXRImageTrackingEnabled(execution_context)) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("trackedImages");
if (!bindings::GetDictionaryMemberFromV8Object<IDLSequence<XRTrackedImageInit>, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), has_tracked_images_, member_tracked_images_, try_block, exception_state)) {
  return;
}
}
}

const base::span<const v8::Eternal<v8::Name>> XRSessionInit::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"depthSensing",
"domOverlay",
"optionalFeatures",
"requiredFeatures",
"trackedImages",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
