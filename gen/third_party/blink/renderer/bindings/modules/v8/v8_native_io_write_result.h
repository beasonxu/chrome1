// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_NATIVE_IO_WRITE_RESULT_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_NATIVE_IO_WRITE_RESULT_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/core/typed_arrays/array_buffer_view_helpers.h"
#include "third_party/blink/renderer/core/typed_arrays/dom_typed_array.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/member.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT NativeIOWriteResult : public bindings::DictionaryBase {
  
  public:
static NativeIOWriteResult* Create() {
  return MakeGarbageCollected<NativeIOWriteResult>();
}
static NativeIOWriteResult* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<NativeIOWriteResult>(isolate);
}
static NativeIOWriteResult* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  NativeIOWriteResult();
explicit  NativeIOWriteResult(v8::Isolate* isolate);

bool hasBuffer() const {
  return has_buffer_;
}
NotShared<DOMArrayBufferView> buffer() const {
  DCHECK(hasBuffer());
return member_buffer_;
}
NotShared<DOMArrayBufferView> getBufferOr(NotShared<DOMArrayBufferView> fallback_value) const {
  if (!hasBuffer()) {
  return fallback_value;
}
return member_buffer_;
}
void setBuffer(NotShared<DOMArrayBufferView> value) {
  member_buffer_ = value;
has_buffer_ = true;
DCHECK(member_buffer_);
}

bool hasWrittenBytes() const {
  return has_written_bytes_;
}
uint64_t writtenBytes() const {
  DCHECK(hasWrittenBytes());
return member_written_bytes_;
}
uint64_t getWrittenBytesOr(uint64_t fallback_value) const {
  if (!hasWrittenBytes()) {
  return fallback_value;
}
return member_written_bytes_;
}
void setWrittenBytes(uint64_t value) {
  member_written_bytes_ = value;
has_written_bytes_ = true;
}




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_buffer_ = false;
bool has_written_bytes_ = false;

NotShared<DOMArrayBufferView> member_buffer_;
uint64_t member_written_bytes_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_NATIVE_IO_WRITE_RESULT_H_
